
DiscoveryF4RobotController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000275f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004cf0  08027788  08027788  00037788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802c478  0802c478  00048088  2**0
                  CONTENTS
  4 .ARM          00000008  0802c478  0802c478  0003c478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802c480  0802c480  00048088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0802c480  0802c480  0003c480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0802c488  0802c488  0003c488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0802c490  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .user_heap_stack 00008000  20000088  0802c518  00040088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00011fb8  20008088  08034518  00048088  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2001a040  08034518  0004a040  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00048088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00062cc8  00000000  00000000  000480b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000b06f  00000000  00000000  000aad80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000033c8  00000000  00000000  000b5df0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000031c0  00000000  00000000  000b91b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0003b73a  00000000  00000000  000bc378  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0003db86  00000000  00000000  000f7ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    001092d9  00000000  00000000  00135638  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0023e911  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000e774  00000000  00000000  0023e98c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20008088 	.word	0x20008088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0802776c 	.word	0x0802776c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000808c 	.word	0x2000808c
 80001cc:	0802776c 	.word	0x0802776c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c30:	f000 b972 	b.w	8000f18 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9e08      	ldr	r6, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	4688      	mov	r8, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d14b      	bne.n	8000cf2 <__udivmoddi4+0xa6>
 8000c5a:	428a      	cmp	r2, r1
 8000c5c:	4615      	mov	r5, r2
 8000c5e:	d967      	bls.n	8000d30 <__udivmoddi4+0xe4>
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	b14a      	cbz	r2, 8000c7a <__udivmoddi4+0x2e>
 8000c66:	f1c2 0720 	rsb	r7, r2, #32
 8000c6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c6e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c72:	4095      	lsls	r5, r2
 8000c74:	ea47 0803 	orr.w	r8, r7, r3
 8000c78:	4094      	lsls	r4, r2
 8000c7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c7e:	0c23      	lsrs	r3, r4, #16
 8000c80:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c84:	fa1f fc85 	uxth.w	ip, r5
 8000c88:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c90:	fb07 f10c 	mul.w	r1, r7, ip
 8000c94:	4299      	cmp	r1, r3
 8000c96:	d909      	bls.n	8000cac <__udivmoddi4+0x60>
 8000c98:	18eb      	adds	r3, r5, r3
 8000c9a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c9e:	f080 811b 	bcs.w	8000ed8 <__udivmoddi4+0x28c>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 8118 	bls.w	8000ed8 <__udivmoddi4+0x28c>
 8000ca8:	3f02      	subs	r7, #2
 8000caa:	442b      	add	r3, r5
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cc0:	45a4      	cmp	ip, r4
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x8c>
 8000cc4:	192c      	adds	r4, r5, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cca:	f080 8107 	bcs.w	8000edc <__udivmoddi4+0x290>
 8000cce:	45a4      	cmp	ip, r4
 8000cd0:	f240 8104 	bls.w	8000edc <__udivmoddi4+0x290>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	442c      	add	r4, r5
 8000cd8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cdc:	eba4 040c 	sub.w	r4, r4, ip
 8000ce0:	2700      	movs	r7, #0
 8000ce2:	b11e      	cbz	r6, 8000cec <__udivmoddi4+0xa0>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cec:	4639      	mov	r1, r7
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xbe>
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	f000 80eb 	beq.w	8000ed2 <__udivmoddi4+0x286>
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	e9c6 0100 	strd	r0, r1, [r6]
 8000d02:	4638      	mov	r0, r7
 8000d04:	4639      	mov	r1, r7
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f783 	clz	r7, r3
 8000d0e:	2f00      	cmp	r7, #0
 8000d10:	d147      	bne.n	8000da2 <__udivmoddi4+0x156>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd0>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80fa 	bhi.w	8000f10 <__udivmoddi4+0x2c4>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	4698      	mov	r8, r3
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa0>
 8000d2a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa0>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xe8>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 808f 	bne.w	8000e5c <__udivmoddi4+0x210>
 8000d3e:	1b49      	subs	r1, r1, r5
 8000d40:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d44:	fa1f f885 	uxth.w	r8, r5
 8000d48:	2701      	movs	r7, #1
 8000d4a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d4e:	0c23      	lsrs	r3, r4, #16
 8000d50:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d58:	fb08 f10c 	mul.w	r1, r8, ip
 8000d5c:	4299      	cmp	r1, r3
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0x124>
 8000d60:	18eb      	adds	r3, r5, r3
 8000d62:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x122>
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	f200 80cd 	bhi.w	8000f08 <__udivmoddi4+0x2bc>
 8000d6e:	4684      	mov	ip, r0
 8000d70:	1a59      	subs	r1, r3, r1
 8000d72:	b2a3      	uxth	r3, r4
 8000d74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d78:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d80:	fb08 f800 	mul.w	r8, r8, r0
 8000d84:	45a0      	cmp	r8, r4
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0x14c>
 8000d88:	192c      	adds	r4, r5, r4
 8000d8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d8e:	d202      	bcs.n	8000d96 <__udivmoddi4+0x14a>
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	f200 80b6 	bhi.w	8000f02 <__udivmoddi4+0x2b6>
 8000d96:	4618      	mov	r0, r3
 8000d98:	eba4 0408 	sub.w	r4, r4, r8
 8000d9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000da0:	e79f      	b.n	8000ce2 <__udivmoddi4+0x96>
 8000da2:	f1c7 0c20 	rsb	ip, r7, #32
 8000da6:	40bb      	lsls	r3, r7
 8000da8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dac:	ea4e 0e03 	orr.w	lr, lr, r3
 8000db0:	fa01 f407 	lsl.w	r4, r1, r7
 8000db4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000db8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dbc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dc0:	4325      	orrs	r5, r4
 8000dc2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dc6:	0c2c      	lsrs	r4, r5, #16
 8000dc8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dcc:	fa1f fa8e 	uxth.w	sl, lr
 8000dd0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000dd4:	fb09 f40a 	mul.w	r4, r9, sl
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	fa02 f207 	lsl.w	r2, r2, r7
 8000dde:	fa00 f107 	lsl.w	r1, r0, r7
 8000de2:	d90b      	bls.n	8000dfc <__udivmoddi4+0x1b0>
 8000de4:	eb1e 0303 	adds.w	r3, lr, r3
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dec:	f080 8087 	bcs.w	8000efe <__udivmoddi4+0x2b2>
 8000df0:	429c      	cmp	r4, r3
 8000df2:	f240 8084 	bls.w	8000efe <__udivmoddi4+0x2b2>
 8000df6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dfa:	4473      	add	r3, lr
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	b2ad      	uxth	r5, r5
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3310 	mls	r3, r8, r0, r3
 8000e08:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e0c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e10:	45a2      	cmp	sl, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x1da>
 8000e14:	eb1e 0404 	adds.w	r4, lr, r4
 8000e18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e1c:	d26b      	bcs.n	8000ef6 <__udivmoddi4+0x2aa>
 8000e1e:	45a2      	cmp	sl, r4
 8000e20:	d969      	bls.n	8000ef6 <__udivmoddi4+0x2aa>
 8000e22:	3802      	subs	r0, #2
 8000e24:	4474      	add	r4, lr
 8000e26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	eba4 040a 	sub.w	r4, r4, sl
 8000e32:	454c      	cmp	r4, r9
 8000e34:	46c2      	mov	sl, r8
 8000e36:	464b      	mov	r3, r9
 8000e38:	d354      	bcc.n	8000ee4 <__udivmoddi4+0x298>
 8000e3a:	d051      	beq.n	8000ee0 <__udivmoddi4+0x294>
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d069      	beq.n	8000f14 <__udivmoddi4+0x2c8>
 8000e40:	ebb1 050a 	subs.w	r5, r1, sl
 8000e44:	eb64 0403 	sbc.w	r4, r4, r3
 8000e48:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e4c:	40fd      	lsrs	r5, r7
 8000e4e:	40fc      	lsrs	r4, r7
 8000e50:	ea4c 0505 	orr.w	r5, ip, r5
 8000e54:	e9c6 5400 	strd	r5, r4, [r6]
 8000e58:	2700      	movs	r7, #0
 8000e5a:	e747      	b.n	8000cec <__udivmoddi4+0xa0>
 8000e5c:	f1c2 0320 	rsb	r3, r2, #32
 8000e60:	fa20 f703 	lsr.w	r7, r0, r3
 8000e64:	4095      	lsls	r5, r2
 8000e66:	fa01 f002 	lsl.w	r0, r1, r2
 8000e6a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e72:	4338      	orrs	r0, r7
 8000e74:	0c01      	lsrs	r1, r0, #16
 8000e76:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e7a:	fa1f f885 	uxth.w	r8, r5
 8000e7e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e86:	fb07 f308 	mul.w	r3, r7, r8
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x256>
 8000e92:	1869      	adds	r1, r5, r1
 8000e94:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e98:	d22f      	bcs.n	8000efa <__udivmoddi4+0x2ae>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d92d      	bls.n	8000efa <__udivmoddi4+0x2ae>
 8000e9e:	3f02      	subs	r7, #2
 8000ea0:	4429      	add	r1, r5
 8000ea2:	1acb      	subs	r3, r1, r3
 8000ea4:	b281      	uxth	r1, r0
 8000ea6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eaa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb00 f308 	mul.w	r3, r0, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x27e>
 8000eba:	1869      	adds	r1, r5, r1
 8000ebc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ec0:	d217      	bcs.n	8000ef2 <__udivmoddi4+0x2a6>
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d915      	bls.n	8000ef2 <__udivmoddi4+0x2a6>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4429      	add	r1, r5
 8000eca:	1ac9      	subs	r1, r1, r3
 8000ecc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ed0:	e73b      	b.n	8000d4a <__udivmoddi4+0xfe>
 8000ed2:	4637      	mov	r7, r6
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	e709      	b.n	8000cec <__udivmoddi4+0xa0>
 8000ed8:	4607      	mov	r7, r0
 8000eda:	e6e7      	b.n	8000cac <__udivmoddi4+0x60>
 8000edc:	4618      	mov	r0, r3
 8000ede:	e6fb      	b.n	8000cd8 <__udivmoddi4+0x8c>
 8000ee0:	4541      	cmp	r1, r8
 8000ee2:	d2ab      	bcs.n	8000e3c <__udivmoddi4+0x1f0>
 8000ee4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ee8:	eb69 020e 	sbc.w	r2, r9, lr
 8000eec:	3801      	subs	r0, #1
 8000eee:	4613      	mov	r3, r2
 8000ef0:	e7a4      	b.n	8000e3c <__udivmoddi4+0x1f0>
 8000ef2:	4660      	mov	r0, ip
 8000ef4:	e7e9      	b.n	8000eca <__udivmoddi4+0x27e>
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	e795      	b.n	8000e26 <__udivmoddi4+0x1da>
 8000efa:	4667      	mov	r7, ip
 8000efc:	e7d1      	b.n	8000ea2 <__udivmoddi4+0x256>
 8000efe:	4681      	mov	r9, r0
 8000f00:	e77c      	b.n	8000dfc <__udivmoddi4+0x1b0>
 8000f02:	3802      	subs	r0, #2
 8000f04:	442c      	add	r4, r5
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0x14c>
 8000f08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f0c:	442b      	add	r3, r5
 8000f0e:	e72f      	b.n	8000d70 <__udivmoddi4+0x124>
 8000f10:	4638      	mov	r0, r7
 8000f12:	e708      	b.n	8000d26 <__udivmoddi4+0xda>
 8000f14:	4637      	mov	r7, r6
 8000f16:	e6e9      	b.n	8000cec <__udivmoddi4+0xa0>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f26:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f2a:	f023 fc2d 	bl	8024788 <cosf>
 8000f2e:	eef0 7a40 	vmov.f32	s15, s0
 8000f32:	eeb0 0a67 	vmov.f32	s0, s15
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f46:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f4a:	f023 fc83 	bl	8024854 <sinf>
 8000f4e:	eef0 7a40 	vmov.f32	s15, s0
 8000f52:	eeb0 0a67 	vmov.f32	s0, s15
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f66:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f6a:	f023 fc4d 	bl	8024808 <roundf>
 8000f6e:	eef0 7a40 	vmov.f32	s15, s0
 8000f72:	eeb0 0a67 	vmov.f32	s0, s15
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <_ZN3ros3Msg19serializeAvrFloat64EPhf>:
   * @param[in] f value to serialize.
   *
   * @return number of bytes to advance the buffer pointer.
   *
   */
  static int serializeAvrFloat64(unsigned char* outbuffer, const float f)
 8000f7c:	b480      	push	{r7}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	ed87 0a00 	vstr	s0, [r7]
  {
    const int32_t* val = (int32_t*) &f;
 8000f88:	463b      	mov	r3, r7
 8000f8a:	613b      	str	r3, [r7, #16]
    int32_t exp = ((*val >> 23) & 255);
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	15db      	asrs	r3, r3, #23
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	617b      	str	r3, [r7, #20]
    if (exp != 0)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d003      	beq.n	8000fa4 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0x28>
    {
      exp += 1023 - 127;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8000fa2:	617b      	str	r3, [r7, #20]
    }

    int32_t sig = *val;
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	60fb      	str	r3, [r7, #12]
    *(outbuffer++) = 0;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	607a      	str	r2, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = 0;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig << 5) & 0xff;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	0159      	lsls	r1, r3, #5
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	b2ca      	uxtb	r2, r1
 8000fd4:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 3) & 0xff;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	10d9      	asrs	r1, r3, #3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	b2ca      	uxtb	r2, r1
 8000fe2:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (sig >> 11) & 0xff;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	12d9      	asrs	r1, r3, #11
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	1c5a      	adds	r2, r3, #1
 8000fec:	607a      	str	r2, [r7, #4]
 8000fee:	b2ca      	uxtb	r2, r1
 8000ff0:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = ((exp << 4) & 0xF0) | ((sig >> 19) & 0x0F);
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	011b      	lsls	r3, r3, #4
 8000ff6:	b25a      	sxtb	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	14db      	asrs	r3, r3, #19
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	b25b      	sxtb	r3, r3
 8001004:	4313      	orrs	r3, r2
 8001006:	b259      	sxtb	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	b2ca      	uxtb	r2, r1
 8001010:	701a      	strb	r2, [r3, #0]
    *(outbuffer++) = (exp >> 4) & 0x7F;
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	111b      	asrs	r3, r3, #4
 8001016:	b2da      	uxtb	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	1c59      	adds	r1, r3, #1
 800101c:	6079      	str	r1, [r7, #4]
 800101e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	701a      	strb	r2, [r3, #0]

    // Mark negative bit as necessary.
    if (f < 0)
 8001026:	edd7 7a00 	vldr	s15, [r7]
 800102a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800102e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001032:	d508      	bpl.n	8001046 <_ZN3ros3Msg19serializeAvrFloat64EPhf+0xca>
    {
      *(outbuffer - 1) |= 0x80;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3b01      	subs	r3, #1
 800103e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	701a      	strb	r2, [r3, #0]
    }

    return 8;
 8001046:	2308      	movs	r3, #8
  }
 8001048:	4618      	mov	r0, r3
 800104a:	371c      	adds	r7, #28
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>:
   * @param[in] inbuffer pointer for buffer to deserialize from.
   * @param[out] f pointer to place the deserialized value in.
   *
   * @return number of bytes to advance the buffer pointer.
   */
  static int deserializeAvrFloat64(const unsigned char* inbuffer, float* f)
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  {
    uint32_t* val = (uint32_t*)f;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	60fb      	str	r3, [r7, #12]
    inbuffer += 3;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3303      	adds	r3, #3
 8001066:	607b      	str	r3, [r7, #4]

    // Copy truncated mantissa.
    *val = ((uint32_t)(*(inbuffer++)) >> 5 & 0x07);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	095b      	lsrs	r3, r3, #5
 8001072:	f003 0207 	and.w	r2, r3, #7
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 3;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	1c5a      	adds	r2, r3, #1
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	00da      	lsls	r2, r3, #3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	431a      	orrs	r2, r3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*(inbuffer++)) & 0xff) << 11;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	02da      	lsls	r2, r3, #11
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	431a      	orrs	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	601a      	str	r2, [r3, #0]
    *val |= ((uint32_t)(*inbuffer) & 0x0f) << 19;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	04db      	lsls	r3, r3, #19
 80010ac:	f403 03f0 	and.w	r3, r3, #7864320	; 0x780000
 80010b0:	431a      	orrs	r2, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	601a      	str	r2, [r3, #0]

    // Copy truncated exponent.
    uint32_t exp = ((uint32_t)(*(inbuffer++)) & 0xf0) >> 4;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	091b      	lsrs	r3, r3, #4
 80010c0:	f003 030f 	and.w	r3, r3, #15
 80010c4:	60bb      	str	r3, [r7, #8]
    exp |= ((uint32_t)(*inbuffer) & 0x7f) << 4;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	011b      	lsls	r3, r3, #4
 80010cc:	f403 62fe 	and.w	r2, r3, #2032	; 0x7f0
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	60bb      	str	r3, [r7, #8]
    if (exp != 0)
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d008      	beq.n	80010ee <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf+0x9a>
    {
      *val |= ((exp) - 1023 + 127) << 23;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80010e6:	05db      	lsls	r3, r3, #23
 80010e8:	431a      	orrs	r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	601a      	str	r2, [r3, #0]
    }

    // Copy negative sign.
    *val |= ((uint32_t)(*(inbuffer++)) & 0x80) << 24;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	1c5a      	adds	r2, r3, #1
 80010f2:	607a      	str	r2, [r7, #4]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	061b      	lsls	r3, r3, #24
 80010f8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	431a      	orrs	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	601a      	str	r2, [r3, #0]

    return 8;
 8001106:	2308      	movs	r3, #8
  }
 8001108:	4618      	mov	r0, r3
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4618      	mov	r0, r3
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <_ZN3ros3MsgC1Ev>:
class Msg
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <_ZN3ros3MsgC1Ev+0x1c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	0802bc04 	.word	0x0802bc04

08001158 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
      data()
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ffe8 	bl	8001138 <_ZN3ros3MsgC1Ev>
 8001168:	4a06      	ldr	r2, [pc, #24]	; (8001184 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3304      	adds	r3, #4
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ffce 	bl	8001114 <_ZN3ros4TimeC1Ev>
    {
    }
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	0802bbec 	.word	0x0802bbec

08001188 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6859      	ldr	r1, [r3, #4]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	b2ca      	uxtb	r2, r1
 80011a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	0a19      	lsrs	r1, r3, #8
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	3301      	adds	r3, #1
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	4413      	add	r3, r2
 80011b2:	b2ca      	uxtb	r2, r1
 80011b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	0c19      	lsrs	r1, r3, #16
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3302      	adds	r3, #2
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	b2ca      	uxtb	r2, r1
 80011c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	0e19      	lsrs	r1, r3, #24
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	3303      	adds	r3, #3
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	4413      	add	r3, r2
 80011d6:	b2ca      	uxtb	r2, r1
 80011d8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	3304      	adds	r3, #4
 80011de:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6899      	ldr	r1, [r3, #8]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	683a      	ldr	r2, [r7, #0]
 80011e8:	4413      	add	r3, r2
 80011ea:	b2ca      	uxtb	r2, r1
 80011ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	0a19      	lsrs	r1, r3, #8
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3301      	adds	r3, #1
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	b2ca      	uxtb	r2, r1
 80011fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	0c19      	lsrs	r1, r3, #16
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	3302      	adds	r3, #2
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	4413      	add	r3, r2
 800120e:	b2ca      	uxtb	r2, r1
 8001210:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	0e19      	lsrs	r1, r3, #24
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3303      	adds	r3, #3
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	4413      	add	r3, r2
 8001220:	b2ca      	uxtb	r2, r1
 8001222:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	3304      	adds	r3, #4
 8001228:	60fb      	str	r3, [r7, #12]
      return offset;
 800122a:	68fb      	ldr	r3, [r7, #12]
    }
 800122c:	4618      	mov	r0, r3
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	3301      	adds	r3, #1
 800125c:	6839      	ldr	r1, [r7, #0]
 800125e:	440b      	add	r3, r1
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	431a      	orrs	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	3302      	adds	r3, #2
 8001272:	6839      	ldr	r1, [r7, #0]
 8001274:	440b      	add	r3, r1
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	041b      	lsls	r3, r3, #16
 800127a:	431a      	orrs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	3303      	adds	r3, #3
 8001288:	6839      	ldr	r1, [r7, #0]
 800128a:	440b      	add	r3, r1
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	061b      	lsls	r3, r3, #24
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	3304      	adds	r3, #4
 800129a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	683a      	ldr	r2, [r7, #0]
 80012a0:	4413      	add	r3, r2
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	3301      	adds	r3, #1
 80012b2:	6839      	ldr	r1, [r7, #0]
 80012b4:	440b      	add	r3, r1
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	431a      	orrs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3302      	adds	r3, #2
 80012c8:	6839      	ldr	r1, [r7, #0]
 80012ca:	440b      	add	r3, r1
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	041b      	lsls	r3, r3, #16
 80012d0:	431a      	orrs	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3303      	adds	r3, #3
 80012de:	6839      	ldr	r1, [r7, #0]
 80012e0:	440b      	add	r3, r1
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	061b      	lsls	r3, r3, #24
 80012e6:	431a      	orrs	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	3304      	adds	r3, #4
 80012f0:	60fb      	str	r3, [r7, #12]
     return offset;
 80012f2:	68fb      	ldr	r3, [r7, #12]
    }
 80012f4:	4618      	mov	r0, r3
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800130a:	4618      	mov	r0, r3
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	08027788 	.word	0x08027788

0800131c <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	08027798 	.word	0x08027798

08001338 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff fef8 	bl	8001138 <_ZN3ros3MsgC1Ev>
 8001348:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	809a      	strh	r2, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a09      	ldr	r2, [pc, #36]	; (800137c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a07      	ldr	r2, [pc, #28]	; (800137c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a06      	ldr	r2, [pc, #24]	; (800137c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001364:	611a      	str	r2, [r3, #16]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
    {
    }
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4618      	mov	r0, r3
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	0802bbd4 	.word	0x0802bbd4
 800137c:	080277bc 	.word	0x080277bc

08001380 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	8899      	ldrh	r1, [r3, #4]
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	4413      	add	r3, r2
 8001398:	b2ca      	uxtb	r2, r1
 800139a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	889b      	ldrh	r3, [r3, #4]
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	b299      	uxth	r1, r3
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	3301      	adds	r3, #1
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	b2ca      	uxtb	r2, r1
 80013ae:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	3302      	adds	r3, #2
 80013b4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7fe ff08 	bl	80001d0 <strlen>
 80013c0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	69b9      	ldr	r1, [r7, #24]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f003 fc45 	bl	8004c5a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	3304      	adds	r3, #4
 80013d4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	18d0      	adds	r0, r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4619      	mov	r1, r3
 80013e4:	f025 fa1d 	bl	8026822 <memcpy>
      offset += length_topic_name;
 80013e8:	69fa      	ldr	r2, [r7, #28]
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	4413      	add	r3, r2
 80013ee:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7fe feeb 	bl	80001d0 <strlen>
 80013fa:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	4413      	add	r3, r2
 8001402:	6979      	ldr	r1, [r7, #20]
 8001404:	4618      	mov	r0, r3
 8001406:	f003 fc28 	bl	8004c5a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3304      	adds	r3, #4
 800140e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	18d0      	adds	r0, r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	4619      	mov	r1, r3
 800141e:	f025 fa00 	bl	8026822 <memcpy>
      offset += length_message_type;
 8001422:	69fa      	ldr	r2, [r7, #28]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	4413      	add	r3, r2
 8001428:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	4618      	mov	r0, r3
 8001430:	f7fe fece 	bl	80001d0 <strlen>
 8001434:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	4413      	add	r3, r2
 800143c:	6939      	ldr	r1, [r7, #16]
 800143e:	4618      	mov	r0, r3
 8001440:	f003 fc0b 	bl	8004c5a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	3304      	adds	r3, #4
 8001448:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	18d0      	adds	r0, r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4619      	mov	r1, r3
 8001458:	f025 f9e3 	bl	8026822 <memcpy>
      offset += length_md5sum;
 800145c:	69fa      	ldr	r2, [r7, #28]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4413      	add	r3, r2
 8001462:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800146a:	68f9      	ldr	r1, [r7, #12]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	4413      	add	r3, r2
 8001472:	b2ca      	uxtb	r2, r1
 8001474:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	0a19      	lsrs	r1, r3, #8
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3301      	adds	r3, #1
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	4413      	add	r3, r2
 8001482:	b2ca      	uxtb	r2, r1
 8001484:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	0c19      	lsrs	r1, r3, #16
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3302      	adds	r3, #2
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	4413      	add	r3, r2
 8001492:	b2ca      	uxtb	r2, r1
 8001494:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	0e19      	lsrs	r1, r3, #24
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3303      	adds	r3, #3
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	4413      	add	r3, r2
 80014a2:	b2ca      	uxtb	r2, r1
 80014a4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3304      	adds	r3, #4
 80014aa:	61fb      	str	r3, [r7, #28]
      return offset;
 80014ac:	69fb      	ldr	r3, [r7, #28]
    }
 80014ae:	4618      	mov	r0, r3
 80014b0:	3720      	adds	r7, #32
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b08a      	sub	sp, #40	; 0x28
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	4413      	add	r3, r2
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	889b      	ldrh	r3, [r3, #4]
 80014d6:	b21a      	sxth	r2, r3
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	3301      	adds	r3, #1
 80014dc:	6839      	ldr	r1, [r7, #0]
 80014de:	440b      	add	r3, r1
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	021b      	lsls	r3, r3, #8
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	4313      	orrs	r3, r2
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	3302      	adds	r3, #2
 80014f4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	441a      	add	r2, r3
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4611      	mov	r1, r2
 8001502:	4618      	mov	r0, r3
 8001504:	f003 fbc7 	bl	8004c96 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	3304      	adds	r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	4413      	add	r3, r2
 8001518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800151a:	429a      	cmp	r2, r3
 800151c:	d20c      	bcs.n	8001538 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	441a      	add	r2, r3
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	3b01      	subs	r3, #1
 8001528:	6839      	ldr	r1, [r7, #0]
 800152a:	440b      	add	r3, r1
 800152c:	7812      	ldrb	r2, [r2, #0]
 800152e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	3301      	adds	r3, #1
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
 8001536:	e7ec      	b.n	8001512 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	4413      	add	r3, r2
 800153e:	3b01      	subs	r3, #1
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	4413      	add	r3, r2
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	3b01      	subs	r3, #1
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	441a      	add	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	4413      	add	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	441a      	add	r2, r3
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f003 fb94 	bl	8004c96 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	3304      	adds	r3, #4
 8001572:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	623b      	str	r3, [r7, #32]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4413      	add	r3, r2
 800157e:	6a3a      	ldr	r2, [r7, #32]
 8001580:	429a      	cmp	r2, r3
 8001582:	d20c      	bcs.n	800159e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	6a3b      	ldr	r3, [r7, #32]
 8001588:	441a      	add	r2, r3
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	3b01      	subs	r3, #1
 800158e:	6839      	ldr	r1, [r7, #0]
 8001590:	440b      	add	r3, r1
 8001592:	7812      	ldrb	r2, [r2, #0]
 8001594:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	3301      	adds	r3, #1
 800159a:	623b      	str	r3, [r7, #32]
 800159c:	e7ec      	b.n	8001578 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4413      	add	r3, r2
 80015a4:	3b01      	subs	r3, #1
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	4413      	add	r3, r2
 80015aa:	2200      	movs	r2, #0
 80015ac:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	441a      	add	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4413      	add	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	441a      	add	r2, r3
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	4611      	mov	r1, r2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 fb61 	bl	8004c96 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	3304      	adds	r3, #4
 80015d8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	61fb      	str	r3, [r7, #28]
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4413      	add	r3, r2
 80015e4:	69fa      	ldr	r2, [r7, #28]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d20c      	bcs.n	8001604 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	441a      	add	r2, r3
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	6839      	ldr	r1, [r7, #0]
 80015f6:	440b      	add	r3, r1
 80015f8:	7812      	ldrb	r2, [r2, #0]
 80015fa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	3301      	adds	r3, #1
 8001600:	61fb      	str	r3, [r7, #28]
 8001602:	e7ec      	b.n	80015de <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4413      	add	r3, r2
 800160a:	3b01      	subs	r3, #1
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	4413      	add	r3, r2
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	3b01      	subs	r3, #1
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	441a      	add	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4413      	add	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	6839      	ldr	r1, [r7, #0]
 8001632:	440a      	add	r2, r1
 8001634:	7812      	ldrb	r2, [r2, #0]
 8001636:	4313      	orrs	r3, r2
 8001638:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	3301      	adds	r3, #1
 8001640:	6839      	ldr	r1, [r7, #0]
 8001642:	440b      	add	r3, r1
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	4313      	orrs	r3, r2
 800164a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	3302      	adds	r3, #2
 8001652:	6839      	ldr	r1, [r7, #0]
 8001654:	440b      	add	r3, r1
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	041b      	lsls	r3, r3, #16
 800165a:	4313      	orrs	r3, r2
 800165c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	3303      	adds	r3, #3
 8001664:	6839      	ldr	r1, [r7, #0]
 8001666:	440b      	add	r3, r1
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	061b      	lsls	r3, r3, #24
 800166c:	4313      	orrs	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001670:	68ba      	ldr	r2, [r7, #8]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	3304      	adds	r3, #4
 800167a:	61bb      	str	r3, [r7, #24]
     return offset;
 800167c:	69bb      	ldr	r3, [r7, #24]
    }
 800167e:	4618      	mov	r0, r3
 8001680:	3728      	adds	r7, #40	; 0x28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	080277c0 	.word	0x080277c0

080016a4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	4b03      	ldr	r3, [pc, #12]	; (80016bc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	080277dc 	.word	0x080277dc

080016c0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fd34 	bl	8001138 <_ZN3ros3MsgC1Ev>
 80016d0:	4a06      	ldr	r2, [pc, #24]	; (80016ec <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	711a      	strb	r2, [r3, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80016e0:	609a      	str	r2, [r3, #8]
    {
    }
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	0802bbbc 	.word	0x0802bbbc
 80016f0:	080277bc 	.word	0x080277bc

080016f4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	4413      	add	r3, r2
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	7912      	ldrb	r2, [r2, #4]
 800170c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	3301      	adds	r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe fd59 	bl	80001d0 <strlen>
 800171e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	4413      	add	r3, r2
 8001726:	68b9      	ldr	r1, [r7, #8]
 8001728:	4618      	mov	r0, r3
 800172a:	f003 fa96 	bl	8004c5a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	3304      	adds	r3, #4
 8001732:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	18d0      	adds	r0, r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	4619      	mov	r1, r3
 8001742:	f025 f86e 	bl	8026822 <memcpy>
      offset += length_msg;
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	4413      	add	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
      return offset;
 800174e:	68fb      	ldr	r3, [r7, #12]
    }
 8001750:	4618      	mov	r0, r3
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	4413      	add	r3, r2
 800176c:	781a      	ldrb	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	3301      	adds	r3, #1
 8001776:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	441a      	add	r2, r3
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f003 fa86 	bl	8004c96 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	3304      	adds	r3, #4
 800178e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	4413      	add	r3, r2
 800179a:	697a      	ldr	r2, [r7, #20]
 800179c:	429a      	cmp	r2, r3
 800179e:	d20c      	bcs.n	80017ba <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	441a      	add	r2, r3
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	6839      	ldr	r1, [r7, #0]
 80017ac:	440b      	add	r3, r1
 80017ae:	7812      	ldrb	r2, [r2, #0]
 80017b0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	e7ec      	b.n	8001794 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4413      	add	r3, r2
 80017c0:	3b01      	subs	r3, #1
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	4413      	add	r3, r2
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	3b01      	subs	r3, #1
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	441a      	add	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4413      	add	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
     return offset;
 80017de:	693b      	ldr	r3, [r7, #16]
    }
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	08027800 	.word	0x08027800

08001804 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	08027814 	.word	0x08027814

08001820 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fc84 	bl	8001138 <_ZN3ros3MsgC1Ev>
 8001830:	4a0c      	ldr	r2, [pc, #48]	; (8001864 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	619a      	str	r2, [r3, #24]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	61da      	str	r2, [r3, #28]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	0802bba4 	.word	0x0802bba4

08001868 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6859      	ldr	r1, [r3, #4]
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	4413      	add	r3, r2
 8001880:	b2ca      	uxtb	r2, r1
 8001882:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	0a19      	lsrs	r1, r3, #8
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	3301      	adds	r3, #1
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	4413      	add	r3, r2
 8001892:	b2ca      	uxtb	r2, r1
 8001894:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	0c19      	lsrs	r1, r3, #16
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	3302      	adds	r3, #2
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	4413      	add	r3, r2
 80018a4:	b2ca      	uxtb	r2, r1
 80018a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	0e19      	lsrs	r1, r3, #24
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	3303      	adds	r3, #3
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	4413      	add	r3, r2
 80018b6:	b2ca      	uxtb	r2, r1
 80018b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	3304      	adds	r3, #4
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	6a3a      	ldr	r2, [r7, #32]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d22b      	bcs.n	8001926 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80018dc:	6939      	ldr	r1, [r7, #16]
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	b2ca      	uxtb	r2, r1
 80018e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	0a19      	lsrs	r1, r3, #8
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	3301      	adds	r3, #1
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	b2ca      	uxtb	r2, r1
 80018f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	0c19      	lsrs	r1, r3, #16
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	3302      	adds	r3, #2
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	4413      	add	r3, r2
 8001904:	b2ca      	uxtb	r2, r1
 8001906:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	0e19      	lsrs	r1, r3, #24
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	3303      	adds	r3, #3
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	4413      	add	r3, r2
 8001914:	b2ca      	uxtb	r2, r1
 8001916:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	3304      	adds	r3, #4
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	3301      	adds	r3, #1
 8001922:	623b      	str	r3, [r7, #32]
 8001924:	e7ce      	b.n	80018c4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6919      	ldr	r1, [r3, #16]
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	4413      	add	r3, r2
 8001930:	b2ca      	uxtb	r2, r1
 8001932:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	0a19      	lsrs	r1, r3, #8
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	3301      	adds	r3, #1
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	4413      	add	r3, r2
 8001942:	b2ca      	uxtb	r2, r1
 8001944:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	0c19      	lsrs	r1, r3, #16
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	3302      	adds	r3, #2
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	4413      	add	r3, r2
 8001954:	b2ca      	uxtb	r2, r1
 8001956:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	0e19      	lsrs	r1, r3, #24
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	3303      	adds	r3, #3
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	4413      	add	r3, r2
 8001966:	b2ca      	uxtb	r2, r1
 8001968:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	3304      	adds	r3, #4
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	429a      	cmp	r2, r3
 800197c:	d22b      	bcs.n	80019d6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699a      	ldr	r2, [r3, #24]
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800198c:	68f9      	ldr	r1, [r7, #12]
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	4413      	add	r3, r2
 8001994:	b2ca      	uxtb	r2, r1
 8001996:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	0a19      	lsrs	r1, r3, #8
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	3301      	adds	r3, #1
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	b2ca      	uxtb	r2, r1
 80019a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	0c19      	lsrs	r1, r3, #16
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	3302      	adds	r3, #2
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	b2ca      	uxtb	r2, r1
 80019b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	0e19      	lsrs	r1, r3, #24
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	3303      	adds	r3, #3
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	b2ca      	uxtb	r2, r1
 80019c6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	3304      	adds	r3, #4
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3301      	adds	r3, #1
 80019d2:	61fb      	str	r3, [r7, #28]
 80019d4:	e7ce      	b.n	8001974 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69d9      	ldr	r1, [r3, #28]
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	b2ca      	uxtb	r2, r1
 80019e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	0a19      	lsrs	r1, r3, #8
 80019ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ec:	3301      	adds	r3, #1
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	4413      	add	r3, r2
 80019f2:	b2ca      	uxtb	r2, r1
 80019f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	0c19      	lsrs	r1, r3, #16
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	3302      	adds	r3, #2
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	b2ca      	uxtb	r2, r1
 8001a06:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	0e19      	lsrs	r1, r3, #24
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	3303      	adds	r3, #3
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	4413      	add	r3, r2
 8001a16:	b2ca      	uxtb	r2, r1
 8001a18:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001a20:	2300      	movs	r3, #0
 8001a22:	61bb      	str	r3, [r7, #24]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d228      	bcs.n	8001a80 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fbc8 	bl	80001d0 <strlen>
 8001a40:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	4413      	add	r3, r2
 8001a48:	6979      	ldr	r1, [r7, #20]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f003 f905 	bl	8004c5a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	3304      	adds	r3, #4
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	18d0      	adds	r0, r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f024 fed9 	bl	8026822 <memcpy>
      offset += length_stringsi;
 8001a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	4413      	add	r3, r2
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	e7d1      	b.n	8001a24 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001a82:	4618      	mov	r0, r3
 8001a84:	3728      	adds	r7, #40	; 0x28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b08e      	sub	sp, #56	; 0x38
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	021b      	lsls	r3, r3, #8
 8001aae:	6a3a      	ldr	r2, [r7, #32]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	041b      	lsls	r3, r3, #16
 8001ac0:	6a3a      	ldr	r2, [r7, #32]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac8:	3303      	adds	r3, #3
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	4413      	add	r3, r2
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	061b      	lsls	r3, r3, #24
 8001ad2:	6a3a      	ldr	r2, [r7, #32]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ada:	3304      	adds	r3, #4
 8001adc:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	6a3a      	ldr	r2, [r7, #32]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d90a      	bls.n	8001afe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4619      	mov	r1, r3
 8001af2:	4610      	mov	r0, r2
 8001af4:	f024 ff9c 	bl	8026a30 <realloc>
 8001af8:	4602      	mov	r2, r0
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a3a      	ldr	r2, [r7, #32]
 8001b02:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001b04:	2300      	movs	r3, #0
 8001b06:	633b      	str	r3, [r7, #48]	; 0x30
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d236      	bcs.n	8001b80 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b1a:	6839      	ldr	r1, [r7, #0]
 8001b1c:	440a      	add	r2, r1
 8001b1e:	7812      	ldrb	r2, [r2, #0]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b28:	3301      	adds	r3, #1
 8001b2a:	6839      	ldr	r1, [r7, #0]
 8001b2c:	440b      	add	r3, r1
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	4313      	orrs	r3, r2
 8001b34:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	6839      	ldr	r1, [r7, #0]
 8001b3e:	440b      	add	r3, r1
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	041b      	lsls	r3, r3, #16
 8001b44:	4313      	orrs	r3, r2
 8001b46:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4c:	3303      	adds	r3, #3
 8001b4e:	6839      	ldr	r1, [r7, #0]
 8001b50:	440b      	add	r3, r1
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	061b      	lsls	r3, r3, #24
 8001b56:	4313      	orrs	r3, r2
 8001b58:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b62:	3304      	adds	r3, #4
 8001b64:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	3208      	adds	r2, #8
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b7e:	e7c3      	b.n	8001b08 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	4413      	add	r3, r2
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	4413      	add	r3, r2
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b9e:	3302      	adds	r3, #2
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	041b      	lsls	r3, r3, #16
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb0:	3303      	adds	r3, #3
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	061b      	lsls	r3, r3, #24
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	69fa      	ldr	r2, [r7, #28]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d90a      	bls.n	8001be6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	699a      	ldr	r2, [r3, #24]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4610      	mov	r0, r2
 8001bdc:	f024 ff28 	bl	8026a30 <realloc>
 8001be0:	4602      	mov	r2, r0
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69fa      	ldr	r2, [r7, #28]
 8001bea:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001bec:	2300      	movs	r3, #0
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d236      	bcs.n	8001c68 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c02:	6839      	ldr	r1, [r7, #0]
 8001c04:	440a      	add	r2, r1
 8001c06:	7812      	ldrb	r2, [r2, #0]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c10:	3301      	adds	r3, #1
 8001c12:	6839      	ldr	r1, [r7, #0]
 8001c14:	440b      	add	r3, r1
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	021b      	lsls	r3, r3, #8
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c22:	3302      	adds	r3, #2
 8001c24:	6839      	ldr	r1, [r7, #0]
 8001c26:	440b      	add	r3, r1
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	041b      	lsls	r3, r3, #16
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c34:	3303      	adds	r3, #3
 8001c36:	6839      	ldr	r1, [r7, #0]
 8001c38:	440b      	add	r3, r1
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	061b      	lsls	r3, r3, #24
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699a      	ldr	r2, [r3, #24]
 8001c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	3214      	adds	r2, #20
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c62:	3301      	adds	r3, #1
 8001c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c66:	e7c3      	b.n	8001bf0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c74:	3301      	adds	r3, #1
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	4413      	add	r3, r2
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	021b      	lsls	r3, r3, #8
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c86:	3302      	adds	r3, #2
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	041b      	lsls	r3, r3, #16
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c98:	3303      	adds	r3, #3
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	061b      	lsls	r3, r3, #24
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001caa:	3304      	adds	r3, #4
 8001cac:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d90a      	bls.n	8001cce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	f024 feb4 	bl	8026a30 <realloc>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d23f      	bcs.n	8001d62 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	441a      	add	r2, r3
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	4611      	mov	r1, r2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f002 ffd1 	bl	8004c96 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8001cfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d20c      	bcs.n	8001d24 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	441a      	add	r2, r3
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	3b01      	subs	r3, #1
 8001d14:	6839      	ldr	r1, [r7, #0]
 8001d16:	440b      	add	r3, r1
 8001d18:	7812      	ldrb	r2, [r2, #0]
 8001d1a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	3301      	adds	r3, #1
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
 8001d22:	e7ec      	b.n	8001cfe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001d24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4413      	add	r3, r2
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d36:	3b01      	subs	r3, #1
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	441a      	add	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001d40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4413      	add	r3, r2
 8001d46:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	4413      	add	r3, r2
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	3220      	adds	r2, #32
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d60:	e7ba      	b.n	8001cd8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001d64:	4618      	mov	r0, r3
 8001d66:	3738      	adds	r7, #56	; 0x38
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	0802b9c8 	.word	0x0802b9c8

08001d88 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	4b03      	ldr	r3, [pc, #12]	; (8001da0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	08027838 	.word	0x08027838

08001da4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	611a      	str	r2, [r3, #16]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68d8      	ldr	r0, [r3, #12]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6891      	ldr	r1, [r2, #8]
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	4798      	blx	r3
 8001df0:	4603      	mov	r3, r0
  };
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
  }
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
      rind(0), twind(0), tfind(0){
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
    }
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <_ZN13STM32Hardware4initEv>:

    void init(){
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

    }
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <_ZN13STM32Hardware12read_stm32hwEv>:

    void reset_rbuf(void){

    }

    int read_stm32hw(){
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
    	uint8_t c = -1;
 8001e5c:	23ff      	movs	r3, #255	; 0xff
 8001e5e:	73fb      	strb	r3, [r7, #15]
		socket_client.socket_receive(&c, (uint16_t)1, &rdmaInd);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e66:	f107 010f 	add.w	r1, r7, #15
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4807      	ldr	r0, [pc, #28]	; (8001e8c <_ZN13STM32Hardware12read_stm32hwEv+0x38>)
 8001e6e:	f004 fd41 	bl	80068f4 <_ZN12SocketClient14socket_receiveEPhtPm>
		if(rdmaInd > 0){
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <_ZN13STM32Hardware12read_stm32hwEv+0x2c>
			return c;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	e001      	b.n	8001e84 <_ZN13STM32Hardware12read_stm32hwEv+0x30>
		} else{
			return -1;
 8001e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		}
    }
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20010768 	.word	0x20010768

08001e90 <_ZN13STM32Hardware13write_stm32hwEPht>:


    void write_stm32hw(uint8_t* data, uint16_t length) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	80fb      	strh	r3, [r7, #6]
    	socket_client.socket_send(data, length);
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	68b9      	ldr	r1, [r7, #8]
 8001ea4:	4803      	ldr	r0, [pc, #12]	; (8001eb4 <_ZN13STM32Hardware13write_stm32hwEPht+0x24>)
 8001ea6:	f004 fd83 	bl	80069b0 <_ZN12SocketClient11socket_sendEPht>
    }
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20010768 	.word	0x20010768

08001eb8 <_ZN13STM32Hardware4timeEv>:

    unsigned long time()
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
    {
//    	return HAL_GetTick();
    	return osKernelSysTick();
 8001ec0:	f00d fabe 	bl	800f440 <osKernelSysTick>
 8001ec4:	4603      	mov	r3, r0
    }
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <_ZN15WheelSubscriber14wheel_callbackEf>:



public:

	void wheel_callback(float data){
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	ed87 0a00 	vstr	s0, [r7]
		target_vel = std::round(data / max_lin_speed * MAX_PWD);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	ed93 7a00 	vldr	s14, [r3]
 8001ee2:	edd7 6a00 	vldr	s13, [r7]
 8001ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eea:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001f20 <_ZN15WheelSubscriber14wheel_callbackEf+0x50>
 8001eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef6:	f7ff f831 	bl	8000f5c <_ZSt5roundf>
 8001efa:	eef0 7a40 	vmov.f32	s15, s0
 8001efe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f02:	ee17 3a90 	vmov	r3, s15
 8001f06:	b21a      	sxth	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	829a      	strh	r2, [r3, #20]
		fit_limits(&target_vel);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3314      	adds	r3, #20
 8001f10:	4619      	mov	r1, r3
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f9b4 	bl	8002280 <_ZN15WheelSubscriber10fit_limitsEPs>
	}
 8001f18:	bf00      	nop
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	437f0000 	.word	0x437f0000

08001f24 <_ZN15WheelSubscriber9set_speedEs>:

	void set_speed(int16_t cur_vel){
 8001f24:	b5b0      	push	{r4, r5, r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	807b      	strh	r3, [r7, #2]
		uint8_t speed = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	73fb      	strb	r3, [r7, #15]
		uint8_t speed_rev = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	73bb      	strb	r3, [r7, #14]

		err_cur = target_vel - cur_vel;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe faec 	bl	8000524 <__aeabi_i2d>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	e9c1 2308 	strd	r2, r3, [r1, #32]

		/***** P step regulator ******/
		impact = 1;
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	4b7c      	ldr	r3, [pc, #496]	; (8002150 <_ZN15WheelSubscriber9set_speedEs+0x22c>)
 8001f5e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		if (err_cur < 0){
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	f7fe fdb4 	bl	8000adc <__aeabi_dcmplt>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00e      	beq.n	8001f98 <_ZN15WheelSubscriber9set_speedEs+0x74>
			err_cur = -err_cur;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001f80:	4614      	mov	r4, r2
 8001f82:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	e9c3 4508 	strd	r4, r5, [r3, #32]
			impact = -1;
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	4c70      	ldr	r4, [pc, #448]	; (8002154 <_ZN15WheelSubscriber9set_speedEs+0x230>)
 8001f94:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
		}
		if (err_cur > SPEED_DELTA_L)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	4b6d      	ldr	r3, [pc, #436]	; (8002158 <_ZN15WheelSubscriber9set_speedEs+0x234>)
 8001fa4:	f7fe fdb8 	bl	8000b18 <__aeabi_dcmpgt>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00d      	beq.n	8001fca <_ZN15WheelSubscriber9set_speedEs+0xa6>
		{
			impact *= PWD_STEP_L;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	4b68      	ldr	r3, [pc, #416]	; (800215c <_ZN15WheelSubscriber9set_speedEs+0x238>)
 8001fba:	f7fe fb1d 	bl	80005f8 <__aeabi_dmul>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	460c      	mov	r4, r1
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8001fc8:	e03a      	b.n	8002040 <_ZN15WheelSubscriber9set_speedEs+0x11c>
		} else
		{
			if (err_cur > SPEED_DELTA_M)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001fd0:	f04f 0200 	mov.w	r2, #0
 8001fd4:	4b62      	ldr	r3, [pc, #392]	; (8002160 <_ZN15WheelSubscriber9set_speedEs+0x23c>)
 8001fd6:	f7fe fd9f 	bl	8000b18 <__aeabi_dcmpgt>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00d      	beq.n	8001ffc <_ZN15WheelSubscriber9set_speedEs+0xd8>
			{
			   impact *= PWD_STEP_M;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	4b5e      	ldr	r3, [pc, #376]	; (8002164 <_ZN15WheelSubscriber9set_speedEs+0x240>)
 8001fec:	f7fe fb04 	bl	80005f8 <__aeabi_dmul>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	460c      	mov	r4, r1
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8001ffa:	e021      	b.n	8002040 <_ZN15WheelSubscriber9set_speedEs+0x11c>
			} else
			{
				if (err_cur > SPEED_DELTA_S)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800200a:	f7fe fd85 	bl	8000b18 <__aeabi_dcmpgt>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d006      	beq.n	8002022 <_ZN15WheelSubscriber9set_speedEs+0xfe>
				{
				   impact *= PWD_STEP_S;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8002020:	e00e      	b.n	8002040 <_ZN15WheelSubscriber9set_speedEs+0x11c>
				} else
				{
					impact *= err_cur;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800202e:	461a      	mov	r2, r3
 8002030:	4623      	mov	r3, r4
 8002032:	f7fe fae1 	bl	80005f8 <__aeabi_dmul>
 8002036:	4603      	mov	r3, r0
 8002038:	460c      	mov	r4, r1
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
//		integral_part = integral_part + Ki * err_cur;
//		impact += integral_part;
//		impact += Kd * (err_cur - err_prev);
		/**************************/

		cur_pwd += std::round(impact);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa6c 	bl	8000524 <__aeabi_i2d>
 800204c:	4604      	mov	r4, r0
 800204e:	460d      	mov	r5, r1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8002056:	eeb0 0a47 	vmov.f32	s0, s14
 800205a:	eef0 0a67 	vmov.f32	s1, s15
 800205e:	f022 faff 	bl	8024660 <round>
 8002062:	ec53 2b10 	vmov	r2, r3, d0
 8002066:	4620      	mov	r0, r4
 8002068:	4629      	mov	r1, r5
 800206a:	f7fe f90f 	bl	800028c <__adddf3>
 800206e:	4603      	mov	r3, r0
 8002070:	460c      	mov	r4, r1
 8002072:	4618      	mov	r0, r3
 8002074:	4621      	mov	r1, r4
 8002076:	f7fe fd59 	bl	8000b2c <__aeabi_d2iz>
 800207a:	4603      	mov	r3, r0
 800207c:	b21a      	sxth	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	82da      	strh	r2, [r3, #22]
		fit_limits(&cur_pwd);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3316      	adds	r3, #22
 8002086:	4619      	mov	r1, r3
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f8f9 	bl	8002280 <_ZN15WheelSubscriber10fit_limitsEPs>

		if(cur_pwd > 0){
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002094:	2b00      	cmp	r3, #0
 8002096:	dd04      	ble.n	80020a2 <_ZN15WheelSubscriber9set_speedEs+0x17e>
			speed = cur_pwd;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	73fb      	strb	r3, [r7, #15]
		}
		if(cur_pwd < 0){
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	da06      	bge.n	80020ba <_ZN15WheelSubscriber9set_speedEs+0x196>
			speed_rev = (-1) * cur_pwd;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	425b      	negs	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	73bb      	strb	r3, [r7, #14]
		}

		__HAL_TIM_SetCompare(htim, Channel, speed);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d105      	bne.n	80020ce <_ZN15WheelSubscriber9set_speedEs+0x1aa>
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	635a      	str	r2, [r3, #52]	; 0x34
 80020cc:	e018      	b.n	8002100 <_ZN15WheelSubscriber9set_speedEs+0x1dc>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d105      	bne.n	80020e2 <_ZN15WheelSubscriber9set_speedEs+0x1be>
 80020d6:	7bfa      	ldrb	r2, [r7, #15]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	639a      	str	r2, [r3, #56]	; 0x38
 80020e0:	e00e      	b.n	8002100 <_ZN15WheelSubscriber9set_speedEs+0x1dc>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d105      	bne.n	80020f6 <_ZN15WheelSubscriber9set_speedEs+0x1d2>
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80020f4:	e004      	b.n	8002100 <_ZN15WheelSubscriber9set_speedEs+0x1dc>
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SetCompare(htim, Channel_rev, speed_rev);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d105      	bne.n	8002114 <_ZN15WheelSubscriber9set_speedEs+0x1f0>
 8002108:	7bba      	ldrb	r2, [r7, #14]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	635a      	str	r2, [r3, #52]	; 0x34

	}
 8002112:	e018      	b.n	8002146 <_ZN15WheelSubscriber9set_speedEs+0x222>
		__HAL_TIM_SetCompare(htim, Channel_rev, speed_rev);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	2b04      	cmp	r3, #4
 800211a:	d105      	bne.n	8002128 <_ZN15WheelSubscriber9set_speedEs+0x204>
 800211c:	7bba      	ldrb	r2, [r7, #14]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	639a      	str	r2, [r3, #56]	; 0x38
	}
 8002126:	e00e      	b.n	8002146 <_ZN15WheelSubscriber9set_speedEs+0x222>
		__HAL_TIM_SetCompare(htim, Channel_rev, speed_rev);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	2b08      	cmp	r3, #8
 800212e:	d105      	bne.n	800213c <_ZN15WheelSubscriber9set_speedEs+0x218>
 8002130:	7bba      	ldrb	r2, [r7, #14]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 800213a:	e004      	b.n	8002146 <_ZN15WheelSubscriber9set_speedEs+0x222>
		__HAL_TIM_SetCompare(htim, Channel_rev, speed_rev);
 800213c:	7bba      	ldrb	r2, [r7, #14]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	641a      	str	r2, [r3, #64]	; 0x40
	}
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bdb0      	pop	{r4, r5, r7, pc}
 800214e:	bf00      	nop
 8002150:	3ff00000 	.word	0x3ff00000
 8002154:	bff00000 	.word	0xbff00000
 8002158:	40440000 	.word	0x40440000
 800215c:	40240000 	.word	0x40240000
 8002160:	402a0000 	.word	0x402a0000
 8002164:	40140000 	.word	0x40140000

08002168 <_ZN15WheelSubscriberC1Ev>:


	WheelSubscriber(){
 8002168:	b490      	push	{r4, r7}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
		target_vel = 0;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	829a      	strh	r2, [r3, #20]
		cur_pwd = 0;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	82da      	strh	r2, [r3, #22]

		err_cur = 0;
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	f04f 0400 	mov.w	r4, #0
 8002186:	e9c2 3408 	strd	r3, r4, [r2, #32]
		err_prev = 0;
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	f04f 0400 	mov.w	r4, #0
 8002194:	e9c2 3406 	strd	r3, r4, [r2, #24]
		integral_part = 0;
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	f04f 0400 	mov.w	r4, #0
 80021a2:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

		Kp = KP_DEFAULT;
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	4c0b      	ldr	r4, [pc, #44]	; (80021dc <_ZN15WheelSubscriberC1Ev+0x74>)
 80021ae:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		Ki = KI_DEAFAULT;
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	f04f 0400 	mov.w	r4, #0
 80021bc:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
		Kd = KD_DEFAULT;
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	f04f 0400 	mov.w	r4, #0
 80021ca:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	}
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc90      	pop	{r4, r7}
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	3ff00000 	.word	0x3ff00000

080021e0 <_ZN15WheelSubscriber8set_pinsEP12GPIO_TypeDeftS1_t>:

	void set_pins(GPIO_TypeDef* gpio_ren, uint16_t pin_ren,GPIO_TypeDef* gpio_len, uint16_t pin_len){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	4613      	mov	r3, r2
 80021ee:	80fb      	strh	r3, [r7, #6]
		HAL_GPIO_WritePin(gpio_ren, pin_ren, GPIO_PIN_SET);
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	2201      	movs	r2, #1
 80021f4:	4619      	mov	r1, r3
 80021f6:	68b8      	ldr	r0, [r7, #8]
 80021f8:	f007 fde4 	bl	8009dc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpio_len, pin_len, GPIO_PIN_SET);
 80021fc:	8b3b      	ldrh	r3, [r7, #24]
 80021fe:	2201      	movs	r2, #1
 8002200:	4619      	mov	r1, r3
 8002202:	6838      	ldr	r0, [r7, #0]
 8002204:	f007 fdde 	bl	8009dc4 <HAL_GPIO_WritePin>
	}
 8002208:	bf00      	nop
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <_ZN15WheelSubscriber10set_timersEP17TIM_HandleTypeDefmm>:

	void set_timers(TIM_HandleTypeDef *main_htim, uint32_t main_channel, uint32_t main_channel_rev){
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
 800221c:	603b      	str	r3, [r7, #0]
		htim = main_htim;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	68ba      	ldr	r2, [r7, #8]
 8002222:	609a      	str	r2, [r3, #8]
		Channel = main_channel;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	60da      	str	r2, [r3, #12]
		Channel_rev = main_channel_rev;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	611a      	str	r2, [r3, #16]
		HAL_TIM_PWM_Start(htim, Channel);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4619      	mov	r1, r3
 800223a:	4610      	mov	r0, r2
 800223c:	f00a fe28 	bl	800ce90 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(htim, Channel_rev);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	4619      	mov	r1, r3
 800224a:	4610      	mov	r0, r2
 800224c:	f00a fe20 	bl	800ce90 <HAL_TIM_PWM_Start>
	}
 8002250:	bf00      	nop
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <_ZN15WheelSubscriber16set_robot_paramsEfh>:

	void set_robot_params(float max_lin, uint8_t pwd)
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	ed87 0a02 	vstr	s0, [r7, #8]
 8002264:	460b      	mov	r3, r1
 8002266:	71fb      	strb	r3, [r7, #7]
	{
		max_lin_speed = max_lin;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	601a      	str	r2, [r3, #0]
		max_pwd_allowed = pwd;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	79fa      	ldrb	r2, [r7, #7]
 8002272:	711a      	strb	r2, [r3, #4]
	}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <_ZN15WheelSubscriber10fit_limitsEPs>:

	void fit_limits(int16_t *val)
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
	{
		if(*val > max_pwd_allowed){
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002290:	461a      	mov	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	791b      	ldrb	r3, [r3, #4]
 8002296:	429a      	cmp	r2, r3
 8002298:	dd04      	ble.n	80022a4 <_ZN15WheelSubscriber10fit_limitsEPs+0x24>
			*val = max_pwd_allowed;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	791b      	ldrb	r3, [r3, #4]
 800229e:	b21a      	sxth	r2, r3
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	801a      	strh	r2, [r3, #0]
		}
		if(*val < -max_pwd_allowed){
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022aa:	461a      	mov	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	791b      	ldrb	r3, [r3, #4]
 80022b0:	425b      	negs	r3, r3
 80022b2:	429a      	cmp	r2, r3
 80022b4:	da07      	bge.n	80022c6 <_ZN15WheelSubscriber10fit_limitsEPs+0x46>
			*val = -max_pwd_allowed;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	791b      	ldrb	r3, [r3, #4]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	425b      	negs	r3, r3
 80022be:	b29b      	uxth	r3, r3
 80022c0:	b21a      	sxth	r2, r3
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	801a      	strh	r2, [r3, #0]
		}
	}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <_ZN14WheelPublisherC1Ev>:
	float cur_speed; // Speed in m/s
	float tick_per_sek;
	int64_t distance_tick;

public:
	WheelPublisher(){
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	611a      	str	r2, [r3, #16]
	}
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <_ZN14WheelPublisher4initEP17TIM_HandleTypeDef>:

	void init(TIM_HandleTypeDef *htim){
 80022ee:	b590      	push	{r4, r7, lr}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	6039      	str	r1, [r7, #0]
		WheelPublisher::semaphore = xSemaphoreCreateMutex();
 80022f8:	2001      	movs	r0, #1
 80022fa:	f00d fe3c 	bl	800ff76 <xQueueCreateMutex>
 80022fe:	4602      	mov	r2, r0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	60da      	str	r2, [r3, #12]

		prev_tick = 0;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	829a      	strh	r2, [r3, #20]
		delta_tick = 0;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	831a      	strh	r2, [r3, #24]

		prev_time = 0;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	61da      	str	r2, [r3, #28]
		cur_time = 0;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	621a      	str	r2, [r3, #32]
		delta_time = 0;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	625a      	str	r2, [r3, #36]	; 0x24
		prev_distance_time = 0;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	629a      	str	r2, [r3, #40]	; 0x28

		cur_speed = 0.0;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	62da      	str	r2, [r3, #44]	; 0x2c
		distance_tick = 0;
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	f04f 0400 	mov.w	r4, #0
 800233a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

		encoder_htim = htim;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	611a      	str	r2, [r3, #16]
		HAL_TIM_Encoder_Start(encoder_htim, TIM_CHANNEL_ALL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	213c      	movs	r1, #60	; 0x3c
 800234a:	4618      	mov	r0, r3
 800234c:	f00a fe70 	bl	800d030 <HAL_TIM_Encoder_Start>
		cur_tick = __HAL_TIM_GET_COUNTER(encoder_htim);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	b29a      	uxth	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	82da      	strh	r2, [r3, #22]
		prev_tick = cur_tick;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	8ada      	ldrh	r2, [r3, #22]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	829a      	strh	r2, [r3, #20]
	}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	bd90      	pop	{r4, r7, pc}

0800236e <_ZN14WheelPublisher16set_robot_paramsEfff>:

	void set_robot_params(float radius, float lin_speed, float rad){
 800236e:	b480      	push	{r7}
 8002370:	b085      	sub	sp, #20
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	ed87 0a02 	vstr	s0, [r7, #8]
 800237a:	edc7 0a01 	vstr	s1, [r7, #4]
 800237e:	ed87 1a00 	vstr	s2, [r7]
		wheel_radius = radius;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	601a      	str	r2, [r3, #0]
		max_lin_speed = lin_speed;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	605a      	str	r2, [r3, #4]
		rad_per_tick = rad;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	609a      	str	r2, [r3, #8]
	}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <_ZN14WheelPublisher14tick_calculateEv>:

	void tick_calculate(){
 80023a0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
			cur_tick = __HAL_TIM_GET_COUNTER(encoder_htim);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	82da      	strh	r2, [r3, #22]
			cur_time = HAL_GetTick();
 80023b8:	f006 f99e 	bl	80086f8 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	621a      	str	r2, [r3, #32]
			delta_time = cur_time - prev_time;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1a      	ldr	r2, [r3, #32]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	1ad2      	subs	r2, r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24
			if(__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_htim) == 0){
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0310 	and.w	r3, r3, #16
 80023dc:	2b10      	cmp	r3, #16
 80023de:	bf14      	ite	ne
 80023e0:	2301      	movne	r3, #1
 80023e2:	2300      	moveq	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 80a6 	beq.w	8002538 <_ZN14WheelPublisher14tick_calculateEv+0x198>
				delta_tick = cur_tick - prev_tick;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	8ada      	ldrh	r2, [r3, #22]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	8a9b      	ldrh	r3, [r3, #20]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	831a      	strh	r2, [r3, #24]
				distance_tick += delta_tick;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	8b1b      	ldrh	r3, [r3, #24]
 8002406:	b29d      	uxth	r5, r3
 8002408:	f04f 0600 	mov.w	r6, #0
 800240c:	186b      	adds	r3, r5, r1
 800240e:	eb46 0402 	adc.w	r4, r6, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				tick_per_sek = ((float)delta_tick / 4.0)  /  ((float)delta_time / 1000.0);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	8b1b      	ldrh	r3, [r3, #24]
 800241c:	ee07 3a90 	vmov	s15, r3
 8002420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002424:	ee17 0a90 	vmov	r0, s15
 8002428:	f7fe f88e 	bl	8000548 <__aeabi_f2d>
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	4b9f      	ldr	r3, [pc, #636]	; (80026b0 <_ZN14WheelPublisher14tick_calculateEv+0x310>)
 8002432:	f7fe fa0b 	bl	800084c <__aeabi_ddiv>
 8002436:	4603      	mov	r3, r0
 8002438:	460c      	mov	r4, r1
 800243a:	4625      	mov	r5, r4
 800243c:	461c      	mov	r4, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800244a:	ee17 0a90 	vmov	r0, s15
 800244e:	f7fe f87b 	bl	8000548 <__aeabi_f2d>
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	4b97      	ldr	r3, [pc, #604]	; (80026b4 <_ZN14WheelPublisher14tick_calculateEv+0x314>)
 8002458:	f7fe f9f8 	bl	800084c <__aeabi_ddiv>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4620      	mov	r0, r4
 8002462:	4629      	mov	r1, r5
 8002464:	f7fe f9f2 	bl	800084c <__aeabi_ddiv>
 8002468:	4603      	mov	r3, r0
 800246a:	460c      	mov	r4, r1
 800246c:	4618      	mov	r0, r3
 800246e:	4621      	mov	r1, r4
 8002470:	f7fe fb84 	bl	8000b7c <__aeabi_d2f>
 8002474:	4602      	mov	r2, r0
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	631a      	str	r2, [r3, #48]	; 0x30
				if( xSemaphoreTake( semaphore, portMAX_DELAY) == pdTRUE )
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002482:	4618      	mov	r0, r3
 8002484:	f00e f89e 	bl	80105c4 <xQueueSemaphoreTake>
 8002488:	4603      	mov	r3, r0
 800248a:	2b01      	cmp	r3, #1
 800248c:	bf0c      	ite	eq
 800248e:	2301      	moveq	r3, #1
 8002490:	2300      	movne	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80fd 	beq.w	8002694 <_ZN14WheelPublisher14tick_calculateEv+0x2f4>
					{
					cur_speed = ((float)delta_tick / 4.0) * (rad_per_tick * wheel_radius)  /  ((float)delta_time / 1000.0);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	8b1b      	ldrh	r3, [r3, #24]
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a6:	ee17 0a90 	vmov	r0, s15
 80024aa:	f7fe f84d 	bl	8000548 <__aeabi_f2d>
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	4b7f      	ldr	r3, [pc, #508]	; (80026b0 <_ZN14WheelPublisher14tick_calculateEv+0x310>)
 80024b4:	f7fe f9ca 	bl	800084c <__aeabi_ddiv>
 80024b8:	4603      	mov	r3, r0
 80024ba:	460c      	mov	r4, r1
 80024bc:	4625      	mov	r5, r4
 80024be:	461c      	mov	r4, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	ed93 7a02 	vldr	s14, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	edd3 7a00 	vldr	s15, [r3]
 80024cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d0:	ee17 0a90 	vmov	r0, s15
 80024d4:	f7fe f838 	bl	8000548 <__aeabi_f2d>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4620      	mov	r0, r4
 80024de:	4629      	mov	r1, r5
 80024e0:	f7fe f88a 	bl	80005f8 <__aeabi_dmul>
 80024e4:	4603      	mov	r3, r0
 80024e6:	460c      	mov	r4, r1
 80024e8:	4625      	mov	r5, r4
 80024ea:	461c      	mov	r4, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024f8:	ee17 0a90 	vmov	r0, s15
 80024fc:	f7fe f824 	bl	8000548 <__aeabi_f2d>
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	4b6b      	ldr	r3, [pc, #428]	; (80026b4 <_ZN14WheelPublisher14tick_calculateEv+0x314>)
 8002506:	f7fe f9a1 	bl	800084c <__aeabi_ddiv>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4620      	mov	r0, r4
 8002510:	4629      	mov	r1, r5
 8002512:	f7fe f99b 	bl	800084c <__aeabi_ddiv>
 8002516:	4603      	mov	r3, r0
 8002518:	460c      	mov	r4, r1
 800251a:	4618      	mov	r0, r3
 800251c:	4621      	mov	r1, r4
 800251e:	f7fe fb2d 	bl	8000b7c <__aeabi_d2f>
 8002522:	4602      	mov	r2, r0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	62da      	str	r2, [r3, #44]	; 0x2c
						xSemaphoreGive( semaphore );
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68d8      	ldr	r0, [r3, #12]
 800252c:	2300      	movs	r3, #0
 800252e:	2200      	movs	r2, #0
 8002530:	2100      	movs	r1, #0
 8002532:	f00d fd53 	bl	800ffdc <xQueueGenericSend>
 8002536:	e0ad      	b.n	8002694 <_ZN14WheelPublisher14tick_calculateEv+0x2f4>
					}

			} else {
				delta_tick = prev_tick - cur_tick;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	8a9a      	ldrh	r2, [r3, #20]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	8adb      	ldrh	r3, [r3, #22]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	b29a      	uxth	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	831a      	strh	r2, [r3, #24]
				distance_tick -= delta_tick;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	8b1b      	ldrh	r3, [r3, #24]
 8002552:	fa1f fb83 	uxth.w	fp, r3
 8002556:	f04f 0c00 	mov.w	ip, #0
 800255a:	460b      	mov	r3, r1
 800255c:	4614      	mov	r4, r2
 800255e:	ebb3 030b 	subs.w	r3, r3, fp
 8002562:	eb64 040c 	sbc.w	r4, r4, ip
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				tick_per_sek = (-1) * ((float)delta_tick / 4.0)   /  ((float)delta_time / 1000.0);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	8b1b      	ldrh	r3, [r3, #24]
 8002570:	ee07 3a90 	vmov	s15, r3
 8002574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002578:	ee17 0a90 	vmov	r0, s15
 800257c:	f7fd ffe4 	bl	8000548 <__aeabi_f2d>
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	4b4a      	ldr	r3, [pc, #296]	; (80026b0 <_ZN14WheelPublisher14tick_calculateEv+0x310>)
 8002586:	f7fe f961 	bl	800084c <__aeabi_ddiv>
 800258a:	4603      	mov	r3, r0
 800258c:	460c      	mov	r4, r1
 800258e:	4698      	mov	r8, r3
 8002590:	f084 4900 	eor.w	r9, r4, #2147483648	; 0x80000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	ee07 3a90 	vmov	s15, r3
 800259c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025a0:	ee17 0a90 	vmov	r0, s15
 80025a4:	f7fd ffd0 	bl	8000548 <__aeabi_f2d>
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	4b41      	ldr	r3, [pc, #260]	; (80026b4 <_ZN14WheelPublisher14tick_calculateEv+0x314>)
 80025ae:	f7fe f94d 	bl	800084c <__aeabi_ddiv>
 80025b2:	4603      	mov	r3, r0
 80025b4:	460c      	mov	r4, r1
 80025b6:	461a      	mov	r2, r3
 80025b8:	4623      	mov	r3, r4
 80025ba:	4640      	mov	r0, r8
 80025bc:	4649      	mov	r1, r9
 80025be:	f7fe f945 	bl	800084c <__aeabi_ddiv>
 80025c2:	4603      	mov	r3, r0
 80025c4:	460c      	mov	r4, r1
 80025c6:	4618      	mov	r0, r3
 80025c8:	4621      	mov	r1, r4
 80025ca:	f7fe fad7 	bl	8000b7c <__aeabi_d2f>
 80025ce:	4602      	mov	r2, r0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
				if( xSemaphoreTake( semaphore, portMAX_DELAY) == pdTRUE )
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025dc:	4618      	mov	r0, r3
 80025de:	f00d fff1 	bl	80105c4 <xQueueSemaphoreTake>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	bf0c      	ite	eq
 80025e8:	2301      	moveq	r3, #1
 80025ea:	2300      	movne	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d050      	beq.n	8002694 <_ZN14WheelPublisher14tick_calculateEv+0x2f4>
					{
					cur_speed = (-1) * ((float)delta_tick / 4.0) * (rad_per_tick * wheel_radius)  /  ((float)delta_time / 1000.0);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	8b1b      	ldrh	r3, [r3, #24]
 80025f6:	ee07 3a90 	vmov	s15, r3
 80025fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025fe:	ee17 0a90 	vmov	r0, s15
 8002602:	f7fd ffa1 	bl	8000548 <__aeabi_f2d>
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <_ZN14WheelPublisher14tick_calculateEv+0x310>)
 800260c:	f7fe f91e 	bl	800084c <__aeabi_ddiv>
 8002610:	4603      	mov	r3, r0
 8002612:	460c      	mov	r4, r1
 8002614:	461d      	mov	r5, r3
 8002616:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	edd3 7a00 	vldr	s15, [r3]
 8002626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262a:	ee17 0a90 	vmov	r0, s15
 800262e:	f7fd ff8b 	bl	8000548 <__aeabi_f2d>
 8002632:	4603      	mov	r3, r0
 8002634:	460c      	mov	r4, r1
 8002636:	461a      	mov	r2, r3
 8002638:	4623      	mov	r3, r4
 800263a:	4628      	mov	r0, r5
 800263c:	4631      	mov	r1, r6
 800263e:	f7fd ffdb 	bl	80005f8 <__aeabi_dmul>
 8002642:	4603      	mov	r3, r0
 8002644:	460c      	mov	r4, r1
 8002646:	4625      	mov	r5, r4
 8002648:	461c      	mov	r4, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	ee07 3a90 	vmov	s15, r3
 8002652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002656:	ee17 0a90 	vmov	r0, s15
 800265a:	f7fd ff75 	bl	8000548 <__aeabi_f2d>
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <_ZN14WheelPublisher14tick_calculateEv+0x314>)
 8002664:	f7fe f8f2 	bl	800084c <__aeabi_ddiv>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4620      	mov	r0, r4
 800266e:	4629      	mov	r1, r5
 8002670:	f7fe f8ec 	bl	800084c <__aeabi_ddiv>
 8002674:	4603      	mov	r3, r0
 8002676:	460c      	mov	r4, r1
 8002678:	4618      	mov	r0, r3
 800267a:	4621      	mov	r1, r4
 800267c:	f7fe fa7e 	bl	8000b7c <__aeabi_d2f>
 8002680:	4602      	mov	r2, r0
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	62da      	str	r2, [r3, #44]	; 0x2c
						xSemaphoreGive( semaphore );
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68d8      	ldr	r0, [r3, #12]
 800268a:	2300      	movs	r3, #0
 800268c:	2200      	movs	r2, #0
 800268e:	2100      	movs	r1, #0
 8002690:	f00d fca4 	bl	800ffdc <xQueueGenericSend>
					}

			}
			prev_tick = cur_tick;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	8ada      	ldrh	r2, [r3, #22]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	829a      	strh	r2, [r3, #20]
			prev_time = cur_time;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1a      	ldr	r2, [r3, #32]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	61da      	str	r2, [r3, #28]
	}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 80026ae:	bf00      	nop
 80026b0:	40100000 	.word	0x40100000
 80026b4:	408f4000 	.word	0x408f4000

080026b8 <_ZN14WheelPublisher9get_speedEv>:


	int16_t get_speed(){
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
		// speed in %
//		return cur_speed / MAX_LIN_SPEED;
		int16_t ret = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	81fb      	strh	r3, [r7, #14]
		if( xSemaphoreTake( semaphore, portMAX_DELAY) == pdTRUE )
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026cc:	4618      	mov	r0, r3
 80026ce:	f00d ff79 	bl	80105c4 <xQueueSemaphoreTake>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	bf0c      	ite	eq
 80026d8:	2301      	moveq	r3, #1
 80026da:	2300      	movne	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d01d      	beq.n	800271e <_ZN14WheelPublisher9get_speedEv+0x66>
		{
			ret = std::round(cur_speed / max_lin_speed * MAX_PWD);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80026ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026f2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800272c <_ZN14WheelPublisher9get_speedEv+0x74>
 80026f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026fa:	eeb0 0a67 	vmov.f32	s0, s15
 80026fe:	f7fe fc2d 	bl	8000f5c <_ZSt5roundf>
 8002702:	eef0 7a40 	vmov.f32	s15, s0
 8002706:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800270a:	ee17 3a90 	vmov	r3, s15
 800270e:	81fb      	strh	r3, [r7, #14]
			xSemaphoreGive( semaphore );
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68d8      	ldr	r0, [r3, #12]
 8002714:	2300      	movs	r3, #0
 8002716:	2200      	movs	r2, #0
 8002718:	2100      	movs	r1, #0
 800271a:	f00d fc5f 	bl	800ffdc <xQueueGenericSend>
		}
		return ret;
 800271e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
//		return cur_speed;
	}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	437f0000 	.word	0x437f0000

08002730 <_ZN14WheelPublisher12get_distanceEv>:
	float get_tick_per_sek(){
		// speed in %
		return tick_per_sek;
	}

	float get_distance(){
 8002730:	b490      	push	{r4, r7}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
		// distance in rad
		int32_t ret_dist = distance_tick;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800273e:	60fb      	str	r3, [r7, #12]
		distance_tick = 0;
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	f04f 0400 	mov.w	r4, #0
 800274a:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		return (float)ret_dist * rad_per_tick / 4.0;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	ee07 3a90 	vmov	s15, r3
 8002754:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	edd3 7a02 	vldr	s15, [r3, #8]
 800275e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002762:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002766:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800276a:	eef0 7a66 	vmov.f32	s15, s13
	}
 800276e:	eeb0 0a67 	vmov.f32	s0, s15
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bc90      	pop	{r4, r7}
 8002778:	4770      	bx	lr

0800277a <_ZN14WheelPublisher17get_distance_timeEv>:

	double  get_distance_time(){
 800277a:	b590      	push	{r4, r7, lr}
 800277c:	b085      	sub	sp, #20
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
		int16_t ret_time = cur_time - prev_distance_time;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	b29a      	uxth	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278c:	b29b      	uxth	r3, r3
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	b29b      	uxth	r3, r3
 8002792:	81fb      	strh	r3, [r7, #14]
		prev_distance_time = cur_time;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a1a      	ldr	r2, [r3, #32]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	629a      	str	r2, [r3, #40]	; 0x28
		return (double)ret_time;
 800279c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fd febf 	bl	8000524 <__aeabi_i2d>
 80027a6:	4603      	mov	r3, r0
 80027a8:	460c      	mov	r4, r1
 80027aa:	ec44 3b17 	vmov	d7, r3, r4
	}
 80027ae:	eeb0 0a47 	vmov.f32	s0, s14
 80027b2:	eef0 0a67 	vmov.f32	s1, s15
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd90      	pop	{r4, r7, pc}

080027bc <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Vector3():
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe fcb6 	bl	8001138 <_ZN3ros3MsgC1Ev>
 80027cc:	4a09      	ldr	r2, [pc, #36]	; (80027f4 <_ZN13geometry_msgs7Vector3C1Ev+0x38>)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	60da      	str	r2, [r3, #12]
    {
    }
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4618      	mov	r0, r3
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	0802bb60 	.word	0x0802bb60

080027f8 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	441a      	add	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002812:	eeb0 0a67 	vmov.f32	s0, s15
 8002816:	4610      	mov	r0, r2
 8002818:	f7fe fbb0 	bl	8000f7c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4413      	add	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	441a      	add	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002830:	eeb0 0a67 	vmov.f32	s0, s15
 8002834:	4610      	mov	r0, r2
 8002836:	f7fe fba1 	bl	8000f7c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800283a:	4602      	mov	r2, r0
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4413      	add	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	441a      	add	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	edd3 7a03 	vldr	s15, [r3, #12]
 800284e:	eeb0 0a67 	vmov.f32	s0, s15
 8002852:	4610      	mov	r0, r2
 8002854:	f7fe fb92 	bl	8000f7c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8002858:	4602      	mov	r2, r0
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4413      	add	r3, r2
 800285e:	60fb      	str	r3, [r7, #12]
      return offset;
 8002860:	68fb      	ldr	r3, [r7, #12]
    }
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800286a:	b580      	push	{r7, lr}
 800286c:	b084      	sub	sp, #16
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	441a      	add	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3304      	adds	r3, #4
 8002882:	4619      	mov	r1, r3
 8002884:	4610      	mov	r0, r2
 8002886:	f7fe fbe5 	bl	8001054 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800288a:	4602      	mov	r2, r0
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4413      	add	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	441a      	add	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3308      	adds	r3, #8
 800289c:	4619      	mov	r1, r3
 800289e:	4610      	mov	r0, r2
 80028a0:	f7fe fbd8 	bl	8001054 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80028a4:	4602      	mov	r2, r0
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4413      	add	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	441a      	add	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	330c      	adds	r3, #12
 80028b6:	4619      	mov	r1, r3
 80028b8:	4610      	mov	r0, r2
 80028ba:	f7fe fbcb 	bl	8001054 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80028be:	4602      	mov	r2, r0
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4413      	add	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
     return offset;
 80028c6:	68fb      	ldr	r3, [r7, #12]
    }
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	4b03      	ldr	r3, [pc, #12]	; (80028e8 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 80028da:	4618      	mov	r0, r3
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	0802785c 	.word	0x0802785c

080028ec <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	08027874 	.word	0x08027874

08002908 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe fc10 	bl	8001138 <_ZN3ros3MsgC1Ev>
 8002918:	4a08      	ldr	r2, [pc, #32]	; (800293c <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3304      	adds	r3, #4
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ff4a 	bl	80027bc <_ZN13geometry_msgs7Vector3C1Ev>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3314      	adds	r3, #20
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff ff45 	bl	80027bc <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	0802bb48 	.word	0x0802bb48

08002940 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	1d18      	adds	r0, r3, #4
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	4413      	add	r3, r2
 8002958:	4619      	mov	r1, r3
 800295a:	f7ff ff4d 	bl	80027f8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800295e:	4602      	mov	r2, r0
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4413      	add	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f103 0014 	add.w	r0, r3, #20
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	4413      	add	r3, r2
 8002972:	4619      	mov	r1, r3
 8002974:	f7ff ff40 	bl	80027f8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002978:	4602      	mov	r2, r0
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4413      	add	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
      return offset;
 8002980:	68fb      	ldr	r3, [r7, #12]
    }
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800298a:	b580      	push	{r7, lr}
 800298c:	b084      	sub	sp, #16
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	1d18      	adds	r0, r3, #4
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	4413      	add	r3, r2
 80029a2:	4619      	mov	r1, r3
 80029a4:	f7ff ff61 	bl	800286a <_ZN13geometry_msgs7Vector311deserializeEPh>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4413      	add	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f103 0014 	add.w	r0, r3, #20
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	4413      	add	r3, r2
 80029bc:	4619      	mov	r1, r3
 80029be:	f7ff ff54 	bl	800286a <_ZN13geometry_msgs7Vector311deserializeEPh>
 80029c2:	4602      	mov	r2, r0
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4413      	add	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]
     return offset;
 80029ca:	68fb      	ldr	r3, [r7, #12]
    }
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	4b03      	ldr	r3, [pc, #12]	; (80029ec <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	08027898 	.word	0x08027898

080029f0 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	080278ac 	.word	0x080278ac

08002a0c <_ZN16CmdVelSubscriber9constrainEfff>:

	WheelSubscriber *left_wheel;
	WheelSubscriber *right_wheel;


    float constrain(float vel, float low, float high)
 8002a0c:	b480      	push	{r7}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	ed87 0a02 	vstr	s0, [r7, #8]
 8002a18:	edc7 0a01 	vstr	s1, [r7, #4]
 8002a1c:	ed87 1a00 	vstr	s2, [r7]
    {
    	float ret = vel;
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	617b      	str	r3, [r7, #20]
        if (ret < low){
 8002a24:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a28:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a34:	d501      	bpl.n	8002a3a <_ZN16CmdVelSubscriber9constrainEfff+0x2e>
        	ret = low;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	617b      	str	r3, [r7, #20]
        }
        if (ret > high){
 8002a3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a3e:	edd7 7a00 	vldr	s15, [r7]
 8002a42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a4a:	dd01      	ble.n	8002a50 <_ZN16CmdVelSubscriber9constrainEfff+0x44>
        	ret = high;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	617b      	str	r3, [r7, #20]
        }
        return ret;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	ee07 3a90 	vmov	s15, r3
    }
 8002a56:	eeb0 0a67 	vmov.f32	s0, s15
 8002a5a:	371c      	adds	r7, #28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <_ZN16CmdVelSubscriber27check_linear_limit_velocityEf>:
    float check_linear_limit_velocity(float vel)
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	ed87 0a00 	vstr	s0, [r7]
    {
    	float ret = constrain(vel, -max_lin_speed, max_lin_speed);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002a76:	eef1 7a67 	vneg.f32	s15, s15
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002a80:	eeb0 1a47 	vmov.f32	s2, s14
 8002a84:	eef0 0a67 	vmov.f32	s1, s15
 8002a88:	ed97 0a00 	vldr	s0, [r7]
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7ff ffbd 	bl	8002a0c <_ZN16CmdVelSubscriber9constrainEfff>
 8002a92:	ed87 0a03 	vstr	s0, [r7, #12]
        return ret;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	ee07 3a90 	vmov	s15, r3
    }
 8002a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <_ZN16CmdVelSubscriber28check_angular_limit_velocityEf>:
    float check_angular_limit_velocity(float vel){
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	ed87 0a00 	vstr	s0, [r7]
    	float ret = constrain(vel, -max_ang_vel, max_ang_vel);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002ab8:	eef1 7a67 	vneg.f32	s15, s15
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8002ac2:	eeb0 1a47 	vmov.f32	s2, s14
 8002ac6:	eef0 0a67 	vmov.f32	s1, s15
 8002aca:	ed97 0a00 	vldr	s0, [r7]
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff ff9c 	bl	8002a0c <_ZN16CmdVelSubscriber9constrainEfff>
 8002ad4:	ed87 0a03 	vstr	s0, [r7, #12]
        return ret;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	ee07 3a90 	vmov	s15, r3
    }
 8002ade:	eeb0 0a67 	vmov.f32	s0, s15
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <_ZN16CmdVelSubscriber3maxEff>:

    float max(float a, float b){
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	ed87 0a02 	vstr	s0, [r7, #8]
 8002af4:	edc7 0a01 	vstr	s1, [r7, #4]
    	if (a > b){
 8002af8:	ed97 7a02 	vldr	s14, [r7, #8]
 8002afc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b08:	dd01      	ble.n	8002b0e <_ZN16CmdVelSubscriber3maxEff+0x26>
    		return a;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	e000      	b.n	8002b10 <_ZN16CmdVelSubscriber3maxEff+0x28>
    	} else {
    		return b;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	ee07 3a90 	vmov	s15, r3
    	}
    }
 8002b14:	eeb0 0a67 	vmov.f32	s0, s15
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <_ZN16CmdVelSubscriber3minEff>:
    float min(float a, float b){
 8002b22:	b480      	push	{r7}
 8002b24:	b085      	sub	sp, #20
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	60f8      	str	r0, [r7, #12]
 8002b2a:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b2e:	edc7 0a01 	vstr	s1, [r7, #4]
    	if (a < b){
 8002b32:	ed97 7a02 	vldr	s14, [r7, #8]
 8002b36:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b42:	d501      	bpl.n	8002b48 <_ZN16CmdVelSubscriber3minEff+0x26>
    		return a;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	e000      	b.n	8002b4a <_ZN16CmdVelSubscriber3minEff+0x28>
    	} else {
    		return b;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	ee07 3a90 	vmov	s15, r3
    	}
    }
 8002b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <_ZN16CmdVelSubscriber13adjust_speedsEv>:
    void adjust_speeds()
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	ed2d 8b02 	vpush	{d8}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
    {
    	if ((left_linear > max_lin_speed)or(right_linear > max_lin_speed)){
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002b74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7c:	dc0a      	bgt.n	8002b94 <_ZN16CmdVelSubscriber13adjust_speedsEv+0x38>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002b8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b92:	dd29      	ble.n	8002be8 <_ZN16CmdVelSubscriber13adjust_speedsEv+0x8c>
            float factor = max_lin_speed / max(left_linear, right_linear);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8002ba6:	eef0 0a47 	vmov.f32	s1, s14
 8002baa:	eeb0 0a67 	vmov.f32	s0, s15
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff ff9a 	bl	8002ae8 <_ZN16CmdVelSubscriber3maxEff>
 8002bb4:	eeb0 7a40 	vmov.f32	s14, s0
 8002bb8:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002bbc:	edc7 7a03 	vstr	s15, [r7, #12]
            left_linear *= factor;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8002bc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			right_linear *= factor;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8002bda:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    	}
    	if ((left_linear < -max_lin_speed)or(right_linear < -max_lin_speed)){
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002bf4:	eef1 7a67 	vneg.f32	s15, s15
 8002bf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c00:	d40d      	bmi.n	8002c1e <_ZN16CmdVelSubscriber13adjust_speedsEv+0xc2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002c0e:	eef1 7a67 	vneg.f32	s15, s15
 8002c12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1a:	d400      	bmi.n	8002c1e <_ZN16CmdVelSubscriber13adjust_speedsEv+0xc2>
			float factor = max_lin_speed / min(left_linear, right_linear);
			left_linear *= factor;
			right_linear *= factor;
		}
    }
 8002c1c:	e029      	b.n	8002c72 <_ZN16CmdVelSubscriber13adjust_speedsEv+0x116>
			float factor = max_lin_speed / min(left_linear, right_linear);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	ed93 8a11 	vldr	s16, [r3, #68]	; 0x44
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8002c30:	eef0 0a47 	vmov.f32	s1, s14
 8002c34:	eeb0 0a67 	vmov.f32	s0, s15
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f7ff ff72 	bl	8002b22 <_ZN16CmdVelSubscriber3minEff>
 8002c3e:	eeb0 7a40 	vmov.f32	s14, s0
 8002c42:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002c46:	edc7 7a02 	vstr	s15, [r7, #8]
			left_linear *= factor;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8002c50:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			right_linear *= factor;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8002c64:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    }
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	ecbd 8b02 	vpop	{d8}
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <_ZN16CmdVelSubscriber16calculate_speedsEv>:
    void calculate_speeds(){
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
		left_linear = (2 * linear + wheel_separation * angular) / 2;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002c8c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002c9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ca0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002ca8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		right_linear = (2 * linear - wheel_separation * angular) / 2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002cb8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002cc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ccc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cd0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002cd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		adjust_speeds();
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff ff3c 	bl	8002b5c <_ZN16CmdVelSubscriber13adjust_speedsEv>
    }
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <_ZN16CmdVelSubscriber15cmdvel_callbackERKN13geometry_msgs5TwistE>:
public:

	void cmdvel_callback(const geometry_msgs::Twist& msg){
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
		last_time = HAL_GetTick();
 8002cf6:	f005 fcff 	bl	80086f8 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	661a      	str	r2, [r3, #96]	; 0x60
		linear = check_linear_limit_velocity(msg.linear.x);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d06:	eeb0 0a67 	vmov.f32	s0, s15
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7ff feaa 	bl	8002a64 <_ZN16CmdVelSubscriber27check_linear_limit_velocityEf>
 8002d10:	eef0 7a40 	vmov.f32	s15, s0
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		angular = check_angular_limit_velocity(msg.angular.z);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002d20:	eeb0 0a67 	vmov.f32	s0, s15
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff febe 	bl	8002aa6 <_ZN16CmdVelSubscriber28check_angular_limit_velocityEf>
 8002d2a:	eef0 7a40 	vmov.f32	s15, s0
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		calculate_speeds();
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff ffa2 	bl	8002c7e <_ZN16CmdVelSubscriber16calculate_speedsEv>
		left_wheel->wheel_callback(left_linear);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002d44:	eeb0 0a67 	vmov.f32	s0, s15
 8002d48:	4610      	mov	r0, r2
 8002d4a:	f7ff f8c1 	bl	8001ed0 <_ZN15WheelSubscriber14wheel_callbackEf>
		right_wheel->wheel_callback(right_linear);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002d58:	eeb0 0a67 	vmov.f32	s0, s15
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	f7ff f8b7 	bl	8001ed0 <_ZN15WheelSubscriber14wheel_callbackEf>

	}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <_ZN16CmdVelSubscriber13check_timeoutEv>:

	void check_timeout(){
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
		cur_time = HAL_GetTick();
 8002d74:	f005 fcc0 	bl	80086f8 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	65da      	str	r2, [r3, #92]	; 0x5c
		delta_time = cur_time - last_time;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d86:	1ad2      	subs	r2, r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	665a      	str	r2, [r3, #100]	; 0x64
		if(delta_time >  CMDVEL_TIMEOUT){
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d90d      	bls.n	8002db4 <_ZN16CmdVelSubscriber13check_timeoutEv+0x48>
			left_wheel->wheel_callback(0.0);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d9c:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8002dbc <_ZN16CmdVelSubscriber13check_timeoutEv+0x50>
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff f895 	bl	8001ed0 <_ZN15WheelSubscriber14wheel_callbackEf>
			right_wheel->wheel_callback(0.0);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002daa:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002dbc <_ZN16CmdVelSubscriber13check_timeoutEv+0x50>
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff f88e 	bl	8001ed0 <_ZN15WheelSubscriber14wheel_callbackEf>
		}

	}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	00000000 	.word	0x00000000

08002dc0 <_ZN16CmdVelSubscriberC1Ev>:
	CmdVelSubscriber():sub("",&CmdVelSubscriber::cmdvel_callback, this){
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <_ZN16CmdVelSubscriberC1Ev+0x30>)
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	f107 0308 	add.w	r3, r7, #8
 8002dde:	cb0c      	ldmia	r3, {r2, r3}
 8002de0:	4904      	ldr	r1, [pc, #16]	; (8002df4 <_ZN16CmdVelSubscriberC1Ev+0x34>)
 8002de2:	f001 ff8d 	bl	8004d00 <_ZN3ros10SubscriberIN13geometry_msgs5TwistE16CmdVelSubscriberEC1EPKcMS3_FvRKS2_EPS3_i>

	}
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	08002ced 	.word	0x08002ced
 8002df4:	080277bc 	.word	0x080277bc

08002df8 <_ZN16CmdVelSubscriber4initEPN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEEP15WheelSubscriberS6_Pc>:


	void init(ros::NodeHandle* nh, WheelSubscriber *wheel, WheelSubscriber *wheel2, char *topic_name){
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
		sub.topic_ = topic_name;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	609a      	str	r2, [r3, #8]
		(*nh).subscribe(sub);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	68b8      	ldr	r0, [r7, #8]
 8002e12:	f001 ffa1 	bl	8004d58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistE16CmdVelSubscriberEEEEbRT_>
		left_wheel = wheel;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	669a      	str	r2, [r3, #104]	; 0x68
		right_wheel = wheel2;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	66da      	str	r2, [r3, #108]	; 0x6c
		cur_time = HAL_GetTick();
 8002e22:	f005 fc69 	bl	80086f8 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	65da      	str	r2, [r3, #92]	; 0x5c
		last_time = cur_time;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	661a      	str	r2, [r3, #96]	; 0x60
	}
 8002e34:	bf00      	nop
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <_ZN16CmdVelSubscriber16set_robot_paramsEfff>:

	void set_robot_params(float separation, float max_lin, float max_ang){
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	ed87 0a02 	vstr	s0, [r7, #8]
 8002e48:	edc7 0a01 	vstr	s1, [r7, #4]
 8002e4c:	ed87 1a00 	vstr	s2, [r7]
			wheel_separation = separation;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40
			max_lin_speed = max_lin;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	645a      	str	r2, [r3, #68]	; 0x44
			max_ang_vel = max_ang;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	649a      	str	r2, [r3, #72]	; 0x48
		}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe f95c 	bl	8001138 <_ZN3ros3MsgC1Ev>
 8002e80:	4a09      	ldr	r2, [pc, #36]	; (8002ea8 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3308      	adds	r3, #8
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fe f93f 	bl	8001114 <_ZN3ros4TimeC1Ev>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a04      	ldr	r2, [pc, #16]	; (8002eac <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 8002e9a:	611a      	str	r2, [r3, #16]
    {
    }
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	0802bb04 	.word	0x0802bb04
 8002eac:	080277bc 	.word	0x080277bc

08002eb0 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6859      	ldr	r1, [r3, #4]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	b2ca      	uxtb	r2, r1
 8002eca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	0a19      	lsrs	r1, r3, #8
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	4413      	add	r3, r2
 8002eda:	b2ca      	uxtb	r2, r1
 8002edc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	0c19      	lsrs	r1, r3, #16
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	3302      	adds	r3, #2
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	4413      	add	r3, r2
 8002eec:	b2ca      	uxtb	r2, r1
 8002eee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	0e19      	lsrs	r1, r3, #24
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3303      	adds	r3, #3
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	4413      	add	r3, r2
 8002efe:	b2ca      	uxtb	r2, r1
 8002f00:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3304      	adds	r3, #4
 8002f06:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6899      	ldr	r1, [r3, #8]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	4413      	add	r3, r2
 8002f12:	b2ca      	uxtb	r2, r1
 8002f14:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	0a19      	lsrs	r1, r3, #8
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	4413      	add	r3, r2
 8002f24:	b2ca      	uxtb	r2, r1
 8002f26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	0c19      	lsrs	r1, r3, #16
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	3302      	adds	r3, #2
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	4413      	add	r3, r2
 8002f36:	b2ca      	uxtb	r2, r1
 8002f38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	0e19      	lsrs	r1, r3, #24
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	3303      	adds	r3, #3
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	4413      	add	r3, r2
 8002f48:	b2ca      	uxtb	r2, r1
 8002f4a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	3304      	adds	r3, #4
 8002f50:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68d9      	ldr	r1, [r3, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	b2ca      	uxtb	r2, r1
 8002f5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	0a19      	lsrs	r1, r3, #8
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	b2ca      	uxtb	r2, r1
 8002f70:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	0c19      	lsrs	r1, r3, #16
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	3302      	adds	r3, #2
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	4413      	add	r3, r2
 8002f80:	b2ca      	uxtb	r2, r1
 8002f82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	0e19      	lsrs	r1, r3, #24
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	3303      	adds	r3, #3
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	4413      	add	r3, r2
 8002f92:	b2ca      	uxtb	r2, r1
 8002f94:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	3304      	adds	r3, #4
 8002f9a:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fd f915 	bl	80001d0 <strlen>
 8002fa6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	4413      	add	r3, r2
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f001 fe52 	bl	8004c5a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	3304      	adds	r3, #4
 8002fba:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	18d0      	adds	r0, r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f023 fc2a 	bl	8026822 <memcpy>
      offset += length_frame_id;
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]
      return offset;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
    }
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	3301      	adds	r3, #1
 8003004:	6839      	ldr	r1, [r7, #0]
 8003006:	440b      	add	r3, r1
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	3302      	adds	r3, #2
 800301a:	6839      	ldr	r1, [r7, #0]
 800301c:	440b      	add	r3, r1
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	041b      	lsls	r3, r3, #16
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	3303      	adds	r3, #3
 8003030:	6839      	ldr	r1, [r7, #0]
 8003032:	440b      	add	r3, r1
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	061b      	lsls	r3, r3, #24
 8003038:	431a      	orrs	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	3304      	adds	r3, #4
 8003042:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	4413      	add	r3, r2
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	461a      	mov	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	3301      	adds	r3, #1
 800305a:	6839      	ldr	r1, [r7, #0]
 800305c:	440b      	add	r3, r1
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	021b      	lsls	r3, r3, #8
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	3302      	adds	r3, #2
 8003070:	6839      	ldr	r1, [r7, #0]
 8003072:	440b      	add	r3, r1
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	041b      	lsls	r3, r3, #16
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	3303      	adds	r3, #3
 8003086:	6839      	ldr	r1, [r7, #0]
 8003088:	440b      	add	r3, r1
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	061b      	lsls	r3, r3, #24
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	3304      	adds	r3, #4
 8003098:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	4413      	add	r3, r2
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	3301      	adds	r3, #1
 80030b0:	6839      	ldr	r1, [r7, #0]
 80030b2:	440b      	add	r3, r1
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	021b      	lsls	r3, r3, #8
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	3302      	adds	r3, #2
 80030c6:	6839      	ldr	r1, [r7, #0]
 80030c8:	440b      	add	r3, r1
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	041b      	lsls	r3, r3, #16
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	3303      	adds	r3, #3
 80030dc:	6839      	ldr	r1, [r7, #0]
 80030de:	440b      	add	r3, r1
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	061b      	lsls	r3, r3, #24
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	3304      	adds	r3, #4
 80030ee:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	441a      	add	r2, r3
 80030f6:	f107 030c 	add.w	r3, r7, #12
 80030fa:	4611      	mov	r1, r2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f001 fdca 	bl	8004c96 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	3304      	adds	r3, #4
 8003106:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4413      	add	r3, r2
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	429a      	cmp	r2, r3
 8003116:	d20c      	bcs.n	8003132 <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	441a      	add	r2, r3
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	3b01      	subs	r3, #1
 8003122:	6839      	ldr	r1, [r7, #0]
 8003124:	440b      	add	r3, r1
 8003126:	7812      	ldrb	r2, [r2, #0]
 8003128:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	3301      	adds	r3, #1
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	e7ec      	b.n	800310c <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	4413      	add	r3, r2
 8003138:	3b01      	subs	r3, #1
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	4413      	add	r3, r2
 800313e:	2200      	movs	r2, #0
 8003140:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	3b01      	subs	r3, #1
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	441a      	add	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
     return offset;
 8003156:	693b      	ldr	r3, [r7, #16]
    }
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <_ZN8std_msgs6Header7getTypeEv>:

    const char * getType(){ return "std_msgs/Header"; };
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	4b03      	ldr	r3, [pc, #12]	; (8003178 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	080278d0 	.word	0x080278d0

0800317c <_ZN8std_msgs6Header6getMD5Ev>:
    const char * getMD5(){ return "2176decaecbce78abc3b96ef049fabed"; };
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	4b03      	ldr	r3, [pc, #12]	; (8003194 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	080278e0 	.word	0x080278e0

08003198 <_ZN13geometry_msgs5PointC1Ev>:
      typedef float _y_type;
      _y_type y;
      typedef float _z_type;
      _z_type z;

    Point():
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fd ffc8 	bl	8001138 <_ZN3ros3MsgC1Ev>
 80031a8:	4a09      	ldr	r2, [pc, #36]	; (80031d0 <_ZN13geometry_msgs5PointC1Ev+0x38>)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	60da      	str	r2, [r3, #12]
    {
    }
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4618      	mov	r0, r3
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	0802baec 	.word	0x0802baec

080031d4 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	441a      	add	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80031ee:	eeb0 0a67 	vmov.f32	s0, s15
 80031f2:	4610      	mov	r0, r2
 80031f4:	f7fd fec2 	bl	8000f7c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4413      	add	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	441a      	add	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	edd3 7a02 	vldr	s15, [r3, #8]
 800320c:	eeb0 0a67 	vmov.f32	s0, s15
 8003210:	4610      	mov	r0, r2
 8003212:	f7fd feb3 	bl	8000f7c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003216:	4602      	mov	r2, r0
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4413      	add	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	441a      	add	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	edd3 7a03 	vldr	s15, [r3, #12]
 800322a:	eeb0 0a67 	vmov.f32	s0, s15
 800322e:	4610      	mov	r0, r2
 8003230:	f7fd fea4 	bl	8000f7c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003234:	4602      	mov	r2, r0
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4413      	add	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
      return offset;
 800323c:	68fb      	ldr	r3, [r7, #12]
    }
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	441a      	add	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	3304      	adds	r3, #4
 800325e:	4619      	mov	r1, r3
 8003260:	4610      	mov	r0, r2
 8003262:	f7fd fef7 	bl	8001054 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003266:	4602      	mov	r2, r0
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	441a      	add	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3308      	adds	r3, #8
 8003278:	4619      	mov	r1, r3
 800327a:	4610      	mov	r0, r2
 800327c:	f7fd feea 	bl	8001054 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003280:	4602      	mov	r2, r0
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4413      	add	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	441a      	add	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	330c      	adds	r3, #12
 8003292:	4619      	mov	r1, r3
 8003294:	4610      	mov	r0, r2
 8003296:	f7fd fedd 	bl	8001054 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800329a:	4602      	mov	r2, r0
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4413      	add	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
     return offset;
 80032a2:	68fb      	ldr	r3, [r7, #12]
    }
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 80032b6:	4618      	mov	r0, r3
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	08027904 	.word	0x08027904

080032c8 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	4b03      	ldr	r3, [pc, #12]	; (80032e0 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 80032d2:	4618      	mov	r0, r3
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	08027874 	.word	0x08027874

080032e4 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef float _z_type;
      _z_type z;
      typedef float _w_type;
      _w_type w;

    Quaternion():
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fd ff22 	bl	8001138 <_ZN3ros3MsgC1Ev>
 80032f4:	4a0b      	ldr	r2, [pc, #44]	; (8003324 <_ZN13geometry_msgs10QuaternionC1Ev+0x40>)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	60da      	str	r2, [r3, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	611a      	str	r2, [r3, #16]
    {
    }
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4618      	mov	r0, r3
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	0802bad4 	.word	0x0802bad4

08003328 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->x);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	441a      	add	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003342:	eeb0 0a67 	vmov.f32	s0, s15
 8003346:	4610      	mov	r0, r2
 8003348:	f7fd fe18 	bl	8000f7c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800334c:	4602      	mov	r2, r0
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4413      	add	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->y);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	441a      	add	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003360:	eeb0 0a67 	vmov.f32	s0, s15
 8003364:	4610      	mov	r0, r2
 8003366:	f7fd fe09 	bl	8000f7c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800336a:	4602      	mov	r2, r0
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4413      	add	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->z);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	441a      	add	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	edd3 7a03 	vldr	s15, [r3, #12]
 800337e:	eeb0 0a67 	vmov.f32	s0, s15
 8003382:	4610      	mov	r0, r2
 8003384:	f7fd fdfa 	bl	8000f7c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003388:	4602      	mov	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4413      	add	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]
      offset += serializeAvrFloat64(outbuffer + offset, this->w);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	441a      	add	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	edd3 7a04 	vldr	s15, [r3, #16]
 800339c:	eeb0 0a67 	vmov.f32	s0, s15
 80033a0:	4610      	mov	r0, r2
 80033a2:	f7fd fdeb 	bl	8000f7c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 80033a6:	4602      	mov	r2, r0
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4413      	add	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
      return offset;
 80033ae:	68fb      	ldr	r3, [r7, #12]
    }
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->x));
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	441a      	add	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3304      	adds	r3, #4
 80033d0:	4619      	mov	r1, r3
 80033d2:	4610      	mov	r0, r2
 80033d4:	f7fd fe3e 	bl	8001054 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80033d8:	4602      	mov	r2, r0
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	4413      	add	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->y));
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	441a      	add	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3308      	adds	r3, #8
 80033ea:	4619      	mov	r1, r3
 80033ec:	4610      	mov	r0, r2
 80033ee:	f7fd fe31 	bl	8001054 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80033f2:	4602      	mov	r2, r0
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4413      	add	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->z));
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	441a      	add	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	330c      	adds	r3, #12
 8003404:	4619      	mov	r1, r3
 8003406:	4610      	mov	r0, r2
 8003408:	f7fd fe24 	bl	8001054 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800340c:	4602      	mov	r2, r0
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4413      	add	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->w));
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	441a      	add	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3310      	adds	r3, #16
 800341e:	4619      	mov	r1, r3
 8003420:	4610      	mov	r0, r2
 8003422:	f7fd fe17 	bl	8001054 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 8003426:	4602      	mov	r2, r0
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
     return offset;
 800342e:	68fb      	ldr	r3, [r7, #12]
    }
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Quaternion"; };
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	4b03      	ldr	r3, [pc, #12]	; (8003450 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 8003442:	4618      	mov	r0, r3
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	08027918 	.word	0x08027918

08003454 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    const char * getMD5(){ return "a779879fadf0160734f906b8c19c7004"; };
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	4b03      	ldr	r3, [pc, #12]	; (800346c <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 800345e:	4618      	mov	r0, r3
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	08027934 	.word	0x08027934

08003470 <_ZN13geometry_msgs4PoseC1Ev>:
      typedef geometry_msgs::Point _position_type;
      _position_type position;
      typedef geometry_msgs::Quaternion _orientation_type;
      _orientation_type orientation;

    Pose():
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
      position(),
      orientation()
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd fe5c 	bl	8001138 <_ZN3ros3MsgC1Ev>
 8003480:	4a08      	ldr	r2, [pc, #32]	; (80034a4 <_ZN13geometry_msgs4PoseC1Ev+0x34>)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3304      	adds	r3, #4
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff fe84 	bl	8003198 <_ZN13geometry_msgs5PointC1Ev>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3314      	adds	r3, #20
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff ff25 	bl	80032e4 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4618      	mov	r0, r3
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	0802babc 	.word	0x0802babc

080034a8 <_ZNK13geometry_msgs4Pose9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
      offset += this->position.serialize(outbuffer + offset);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	1d18      	adds	r0, r3, #4
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	4413      	add	r3, r2
 80034c0:	4619      	mov	r1, r3
 80034c2:	f7ff fe87 	bl	80031d4 <_ZNK13geometry_msgs5Point9serializeEPh>
 80034c6:	4602      	mov	r2, r0
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4413      	add	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.serialize(outbuffer + offset);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f103 0014 	add.w	r0, r3, #20
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	4413      	add	r3, r2
 80034da:	4619      	mov	r1, r3
 80034dc:	f7ff ff24 	bl	8003328 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4413      	add	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
      return offset;
 80034e8:	68fb      	ldr	r3, [r7, #12]
    }
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <_ZN13geometry_msgs4Pose11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]
      offset += this->position.deserialize(inbuffer + offset);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	1d18      	adds	r0, r3, #4
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	4413      	add	r3, r2
 800350a:	4619      	mov	r1, r3
 800350c:	f7ff fe9b 	bl	8003246 <_ZN13geometry_msgs5Point11deserializeEPh>
 8003510:	4602      	mov	r2, r0
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4413      	add	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.deserialize(inbuffer + offset);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f103 0014 	add.w	r0, r3, #20
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	4413      	add	r3, r2
 8003524:	4619      	mov	r1, r3
 8003526:	f7ff ff47 	bl	80033b8 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 800352a:	4602      	mov	r2, r0
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4413      	add	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
     return offset;
 8003532:	68fb      	ldr	r3, [r7, #12]
    }
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <_ZN13geometry_msgs4Pose7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Pose"; };
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	4b03      	ldr	r3, [pc, #12]	; (8003554 <_ZN13geometry_msgs4Pose7getTypeEv+0x18>)
 8003546:	4618      	mov	r0, r3
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	08027958 	.word	0x08027958

08003558 <_ZN13geometry_msgs4Pose6getMD5Ev>:
    const char * getMD5(){ return "e45d45a5a1ce597b249e23fb30fc871f"; };
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	4b03      	ldr	r3, [pc, #12]	; (8003570 <_ZN13geometry_msgs4Pose6getMD5Ev+0x18>)
 8003562:	4618      	mov	r0, r3
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	0802796c 	.word	0x0802796c

08003574 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Pose _pose_type;
      _pose_type pose;
      float covariance[36];

    PoseWithCovariance():
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
      pose(),
      covariance()
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4618      	mov	r0, r3
 8003580:	f7fd fdda 	bl	8001138 <_ZN3ros3MsgC1Ev>
 8003584:	4a0c      	ldr	r2, [pc, #48]	; (80035b8 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x44>)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3304      	adds	r3, #4
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff ff6e 	bl	8003470 <_ZN13geometry_msgs4PoseC1Ev>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800359a:	2323      	movs	r3, #35	; 0x23
 800359c:	2b00      	cmp	r3, #0
 800359e:	db05      	blt.n	80035ac <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x38>
 80035a0:	f04f 0100 	mov.w	r1, #0
 80035a4:	6011      	str	r1, [r2, #0]
 80035a6:	3204      	adds	r2, #4
 80035a8:	3b01      	subs	r3, #1
 80035aa:	e7f7      	b.n	800359c <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x28>
    {
    }
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	0802baa4 	.word	0x0802baa4

080035bc <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	1d18      	adds	r0, r3, #4
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	4413      	add	r3, r2
 80035d4:	4619      	mov	r1, r3
 80035d6:	f7ff ff67 	bl	80034a8 <_ZNK13geometry_msgs4Pose9serializeEPh>
 80035da:	4602      	mov	r2, r0
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4413      	add	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 80035e2:	2300      	movs	r3, #0
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b23      	cmp	r3, #35	; 0x23
 80035ea:	d817      	bhi.n	800361c <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x60>
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	18d1      	adds	r1, r2, r3
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	330a      	adds	r3, #10
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	3304      	adds	r3, #4
 80035fe:	edd3 7a00 	vldr	s15, [r3]
 8003602:	eeb0 0a67 	vmov.f32	s0, s15
 8003606:	4608      	mov	r0, r1
 8003608:	f7fd fcb8 	bl	8000f7c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 800360c:	4602      	mov	r2, r0
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4413      	add	r3, r2
 8003612:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	3301      	adds	r3, #1
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	e7e4      	b.n	80035e6 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x2a>
      }
      return offset;
 800361c:	68fb      	ldr	r3, [r7, #12]
    }
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003626:	b580      	push	{r7, lr}
 8003628:	b084      	sub	sp, #16
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]
      offset += this->pose.deserialize(inbuffer + offset);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	1d18      	adds	r0, r3, #4
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	4413      	add	r3, r2
 800363e:	4619      	mov	r1, r3
 8003640:	f7ff ff57 	bl	80034f2 <_ZN13geometry_msgs4Pose11deserializeEPh>
 8003644:	4602      	mov	r2, r0
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4413      	add	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 800364c:	2300      	movs	r3, #0
 800364e:	60bb      	str	r3, [r7, #8]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b23      	cmp	r3, #35	; 0x23
 8003654:	d813      	bhi.n	800367e <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x58>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	18d0      	adds	r0, r2, r3
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	330a      	adds	r3, #10
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	4413      	add	r3, r2
 8003666:	3304      	adds	r3, #4
 8003668:	4619      	mov	r1, r3
 800366a:	f7fd fcf3 	bl	8001054 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 800366e:	4602      	mov	r2, r0
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4413      	add	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	3301      	adds	r3, #1
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	e7e8      	b.n	8003650 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x2a>
      }
     return offset;
 800367e:	68fb      	ldr	r3, [r7, #12]
    }
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv>:

    const char * getType(){ return "geometry_msgs/PoseWithCovariance"; };
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	4b03      	ldr	r3, [pc, #12]	; (80036a0 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv+0x18>)
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	08027990 	.word	0x08027990

080036a4 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "c23e848cf1b7533a8d7c259073a97e6f"; };
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev+0x18>)
 80036ae:	4618      	mov	r0, r3
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	080279b4 	.word	0x080279b4

080036c0 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Twist _twist_type;
      _twist_type twist;
      float covariance[36];

    TwistWithCovariance():
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
      twist(),
      covariance()
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fd fd34 	bl	8001138 <_ZN3ros3MsgC1Ev>
 80036d0:	4a0c      	ldr	r2, [pc, #48]	; (8003704 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x44>)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3304      	adds	r3, #4
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff f914 	bl	8002908 <_ZN13geometry_msgs5TwistC1Ev>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80036e6:	2323      	movs	r3, #35	; 0x23
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	db05      	blt.n	80036f8 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x38>
 80036ec:	f04f 0100 	mov.w	r1, #0
 80036f0:	6011      	str	r1, [r2, #0]
 80036f2:	3204      	adds	r2, #4
 80036f4:	3b01      	subs	r3, #1
 80036f6:	e7f7      	b.n	80036e8 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x28>
    {
    }
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4618      	mov	r0, r3
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	0802ba8c 	.word	0x0802ba8c

08003708 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	1d18      	adds	r0, r3, #4
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	4413      	add	r3, r2
 8003720:	4619      	mov	r1, r3
 8003722:	f7ff f90d 	bl	8002940 <_ZNK13geometry_msgs5Twist9serializeEPh>
 8003726:	4602      	mov	r2, r0
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4413      	add	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 800372e:	2300      	movs	r3, #0
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b23      	cmp	r3, #35	; 0x23
 8003736:	d816      	bhi.n	8003766 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x5e>
      offset += serializeAvrFloat64(outbuffer + offset, this->covariance[i]);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	18d1      	adds	r1, r2, r3
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	330a      	adds	r3, #10
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	edd3 7a00 	vldr	s15, [r3]
 800374c:	eeb0 0a67 	vmov.f32	s0, s15
 8003750:	4608      	mov	r0, r1
 8003752:	f7fd fc13 	bl	8000f7c <_ZN3ros3Msg19serializeAvrFloat64EPhf>
 8003756:	4602      	mov	r2, r0
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4413      	add	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	3301      	adds	r3, #1
 8003762:	60bb      	str	r3, [r7, #8]
 8003764:	e7e5      	b.n	8003732 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x2a>
      }
      return offset;
 8003766:	68fb      	ldr	r3, [r7, #12]
    }
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
      offset += this->twist.deserialize(inbuffer + offset);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	1d18      	adds	r0, r3, #4
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	4413      	add	r3, r2
 8003788:	4619      	mov	r1, r3
 800378a:	f7ff f8fe 	bl	800298a <_ZN13geometry_msgs5Twist11deserializeEPh>
 800378e:	4602      	mov	r2, r0
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4413      	add	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 8003796:	2300      	movs	r3, #0
 8003798:	60bb      	str	r3, [r7, #8]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b23      	cmp	r3, #35	; 0x23
 800379e:	d812      	bhi.n	80037c6 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x56>
      offset += deserializeAvrFloat64(inbuffer + offset, &(this->covariance[i]));
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	18d0      	adds	r0, r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	330a      	adds	r3, #10
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	4413      	add	r3, r2
 80037b0:	4619      	mov	r1, r3
 80037b2:	f7fd fc4f 	bl	8001054 <_ZN3ros3Msg21deserializeAvrFloat64EPKhPf>
 80037b6:	4602      	mov	r2, r0
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4413      	add	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 36; i++){
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	3301      	adds	r3, #1
 80037c2:	60bb      	str	r3, [r7, #8]
 80037c4:	e7e9      	b.n	800379a <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x2a>
      }
     return offset;
 80037c6:	68fb      	ldr	r3, [r7, #12]
    }
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv>:

    const char * getType(){ return "geometry_msgs/TwistWithCovariance"; };
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	4b03      	ldr	r3, [pc, #12]	; (80037e8 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv+0x18>)
 80037da:	4618      	mov	r0, r3
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	080279d8 	.word	0x080279d8

080037ec <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev>:
    const char * getMD5(){ return "1fe8a28e6890a4cc3ae4c3ca5c7d82e6"; };
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	4b03      	ldr	r3, [pc, #12]	; (8003804 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev+0x18>)
 80037f6:	4618      	mov	r0, r3
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	080279fc 	.word	0x080279fc

08003808 <_ZN8nav_msgs8OdometryC1Ev>:
      typedef geometry_msgs::PoseWithCovariance _pose_type;
      _pose_type pose;
      typedef geometry_msgs::TwistWithCovariance _twist_type;
      _twist_type twist;

    Odometry():
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      pose(),
      twist()
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4618      	mov	r0, r3
 8003814:	f7fd fc90 	bl	8001138 <_ZN3ros3MsgC1Ev>
 8003818:	4a0c      	ldr	r2, [pc, #48]	; (800384c <_ZN8nav_msgs8OdometryC1Ev+0x44>)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3304      	adds	r3, #4
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fb24 	bl	8002e70 <_ZN8std_msgs6HeaderC1Ev>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a09      	ldr	r2, [pc, #36]	; (8003850 <_ZN8nav_msgs8OdometryC1Ev+0x48>)
 800382c:	619a      	str	r2, [r3, #24]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	331c      	adds	r3, #28
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fe9e 	bl	8003574 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	33d8      	adds	r3, #216	; 0xd8
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff ff3f 	bl	80036c0 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>
    {
    }
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4618      	mov	r0, r3
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	0802ba74 	.word	0x0802ba74
 8003850:	080277bc 	.word	0x080277bc

08003854 <_ZNK8nav_msgs8Odometry9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	1d18      	adds	r0, r3, #4
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	4413      	add	r3, r2
 800386c:	4619      	mov	r1, r3
 800386e:	f7ff fb1f 	bl	8002eb0 <_ZNK8std_msgs6Header9serializeEPh>
 8003872:	4602      	mov	r2, r0
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4413      	add	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	4618      	mov	r0, r3
 8003880:	f7fc fca6 	bl	80001d0 <strlen>
 8003884:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	4413      	add	r3, r2
 800388c:	68b9      	ldr	r1, [r7, #8]
 800388e:	4618      	mov	r0, r3
 8003890:	f001 f9e3 	bl	8004c5a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	3304      	adds	r3, #4
 8003898:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	18d0      	adds	r0, r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	4619      	mov	r1, r3
 80038a8:	f022 ffbb 	bl	8026822 <memcpy>
      offset += length_child_frame_id;
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	4413      	add	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f103 001c 	add.w	r0, r3, #28
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	4413      	add	r3, r2
 80038c0:	4619      	mov	r1, r3
 80038c2:	f7ff fe7b 	bl	80035bc <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>
 80038c6:	4602      	mov	r2, r0
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4413      	add	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	4413      	add	r3, r2
 80038da:	4619      	mov	r1, r3
 80038dc:	f7ff ff14 	bl	8003708 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4413      	add	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
      return offset;
 80038e8:	68fb      	ldr	r3, [r7, #12]
    }
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <_ZN8nav_msgs8Odometry11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b086      	sub	sp, #24
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80038fc:	2300      	movs	r3, #0
 80038fe:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	1d18      	adds	r0, r3, #4
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	4413      	add	r3, r2
 800390a:	4619      	mov	r1, r3
 800390c:	f7ff fb68 	bl	8002fe0 <_ZN8std_msgs6Header11deserializeEPh>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4413      	add	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	441a      	add	r2, r3
 800391e:	f107 030c 	add.w	r3, r7, #12
 8003922:	4611      	mov	r1, r2
 8003924:	4618      	mov	r0, r3
 8003926:	f001 f9b6 	bl	8004c96 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	3304      	adds	r3, #4
 800392e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4413      	add	r3, r2
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	429a      	cmp	r2, r3
 800393e:	d20c      	bcs.n	800395a <_ZN8nav_msgs8Odometry11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	441a      	add	r2, r3
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	3b01      	subs	r3, #1
 800394a:	6839      	ldr	r1, [r7, #0]
 800394c:	440b      	add	r3, r1
 800394e:	7812      	ldrb	r2, [r2, #0]
 8003950:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	3301      	adds	r3, #1
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	e7ec      	b.n	8003934 <_ZN8nav_msgs8Odometry11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	4413      	add	r3, r2
 8003960:	3b01      	subs	r3, #1
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	4413      	add	r3, r2
 8003966:	2200      	movs	r2, #0
 8003968:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	3b01      	subs	r3, #1
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	441a      	add	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4413      	add	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
      offset += this->pose.deserialize(inbuffer + offset);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f103 001c 	add.w	r0, r3, #28
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	4413      	add	r3, r2
 800398a:	4619      	mov	r1, r3
 800398c:	f7ff fe4b 	bl	8003626 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4413      	add	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
      offset += this->twist.deserialize(inbuffer + offset);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f103 00d8 	add.w	r0, r3, #216	; 0xd8
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	4413      	add	r3, r2
 80039a4:	4619      	mov	r1, r3
 80039a6:	f7ff fee3 	bl	8003770 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4413      	add	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
     return offset;
 80039b2:	693b      	ldr	r3, [r7, #16]
    }
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <_ZN8nav_msgs8Odometry7getTypeEv>:

    const char * getType(){ return "nav_msgs/Odometry"; };
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	4b03      	ldr	r3, [pc, #12]	; (80039d4 <_ZN8nav_msgs8Odometry7getTypeEv+0x18>)
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	08027a20 	.word	0x08027a20

080039d8 <_ZN8nav_msgs8Odometry6getMD5Ev>:
    const char * getMD5(){ return "cd5e73d190d741a2f92e81eda573aca7"; };
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	4b03      	ldr	r3, [pc, #12]	; (80039f0 <_ZN8nav_msgs8Odometry6getMD5Ev+0x18>)
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	08027a34 	.word	0x08027a34

080039f4 <_ZN13geometry_msgs9TransformC1Ev>:
      typedef geometry_msgs::Vector3 _translation_type;
      _translation_type translation;
      typedef geometry_msgs::Quaternion _rotation_type;
      _rotation_type rotation;

    Transform():
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
      translation(),
      rotation()
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fd fb9a 	bl	8001138 <_ZN3ros3MsgC1Ev>
 8003a04:	4a08      	ldr	r2, [pc, #32]	; (8003a28 <_ZN13geometry_msgs9TransformC1Ev+0x34>)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe fed4 	bl	80027bc <_ZN13geometry_msgs7Vector3C1Ev>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3314      	adds	r3, #20
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7ff fc63 	bl	80032e4 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4618      	mov	r0, r3
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	0802ba5c 	.word	0x0802ba5c

08003a2c <_ZNK13geometry_msgs9Transform9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
      offset += this->translation.serialize(outbuffer + offset);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	1d18      	adds	r0, r3, #4
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	4413      	add	r3, r2
 8003a44:	4619      	mov	r1, r3
 8003a46:	f7fe fed7 	bl	80027f8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4413      	add	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.serialize(outbuffer + offset);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f103 0014 	add.w	r0, r3, #20
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	4619      	mov	r1, r3
 8003a60:	f7ff fc62 	bl	8003328 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8003a64:	4602      	mov	r2, r0
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4413      	add	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
      return offset;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
    }
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <_ZN13geometry_msgs9Transform11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]
      offset += this->translation.deserialize(inbuffer + offset);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	1d18      	adds	r0, r3, #4
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	4619      	mov	r1, r3
 8003a90:	f7fe feeb 	bl	800286a <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4413      	add	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]
      offset += this->rotation.deserialize(inbuffer + offset);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f103 0014 	add.w	r0, r3, #20
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f7ff fc85 	bl	80033b8 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
     return offset;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
    }
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <_ZN13geometry_msgs9Transform7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Transform"; };
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	4b03      	ldr	r3, [pc, #12]	; (8003ad8 <_ZN13geometry_msgs9Transform7getTypeEv+0x18>)
 8003aca:	4618      	mov	r0, r3
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	08027a58 	.word	0x08027a58

08003adc <_ZN13geometry_msgs9Transform6getMD5Ev>:
    const char * getMD5(){ return "ac9eff44abf714214112b05d54a3cf9b"; };
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	4b03      	ldr	r3, [pc, #12]	; (8003af4 <_ZN13geometry_msgs9Transform6getMD5Ev+0x18>)
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	08027a70 	.word	0x08027a70

08003af8 <_ZN13geometry_msgs16TransformStampedC1Ev>:
      typedef const char* _child_frame_id_type;
      _child_frame_id_type child_frame_id;
      typedef geometry_msgs::Transform _transform_type;
      _transform_type transform;

    TransformStamped():
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      transform()
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7fd fb18 	bl	8001138 <_ZN3ros3MsgC1Ev>
 8003b08:	4a0a      	ldr	r2, [pc, #40]	; (8003b34 <_ZN13geometry_msgs16TransformStampedC1Ev+0x3c>)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3304      	adds	r3, #4
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff f9ac 	bl	8002e70 <_ZN8std_msgs6HeaderC1Ev>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a07      	ldr	r2, [pc, #28]	; (8003b38 <_ZN13geometry_msgs16TransformStampedC1Ev+0x40>)
 8003b1c:	619a      	str	r2, [r3, #24]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	331c      	adds	r3, #28
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff ff66 	bl	80039f4 <_ZN13geometry_msgs9TransformC1Ev>
    {
    }
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	0802ba44 	.word	0x0802ba44
 8003b38:	080277bc 	.word	0x080277bc

08003b3c <_ZNK13geometry_msgs16TransformStamped9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	1d18      	adds	r0, r3, #4
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	4413      	add	r3, r2
 8003b54:	4619      	mov	r1, r3
 8003b56:	f7ff f9ab 	bl	8002eb0 <_ZNK8std_msgs6Header9serializeEPh>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4413      	add	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fc fb32 	bl	80001d0 <strlen>
 8003b6c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	4413      	add	r3, r2
 8003b74:	68b9      	ldr	r1, [r7, #8]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f001 f86f 	bl	8004c5a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	18d0      	adds	r0, r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	4619      	mov	r1, r3
 8003b90:	f022 fe47 	bl	8026822 <memcpy>
      offset += length_child_frame_id;
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	4413      	add	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
      offset += this->transform.serialize(outbuffer + offset);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f103 001c 	add.w	r0, r3, #28
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	4619      	mov	r1, r3
 8003baa:	f7ff ff3f 	bl	8003a2c <_ZNK13geometry_msgs9Transform9serializeEPh>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
      return offset;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
    }
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	1d18      	adds	r0, r3, #4
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	4619      	mov	r1, r3
 8003bda:	f7ff fa01 	bl	8002fe0 <_ZN8std_msgs6Header11deserializeEPh>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4413      	add	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	441a      	add	r2, r3
 8003bec:	f107 030c 	add.w	r3, r7, #12
 8003bf0:	4611      	mov	r1, r2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f001 f84f 	bl	8004c96 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d20c      	bcs.n	8003c28 <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	441a      	add	r2, r3
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	6839      	ldr	r1, [r7, #0]
 8003c1a:	440b      	add	r3, r1
 8003c1c:	7812      	ldrb	r2, [r2, #0]
 8003c1e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	3301      	adds	r3, #1
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	e7ec      	b.n	8003c02 <_ZN13geometry_msgs16TransformStamped11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	4413      	add	r3, r2
 8003c34:	2200      	movs	r2, #0
 8003c36:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	441a      	add	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	4413      	add	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
      offset += this->transform.deserialize(inbuffer + offset);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f103 001c 	add.w	r0, r3, #28
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	4413      	add	r3, r2
 8003c58:	4619      	mov	r1, r3
 8003c5a:	f7ff ff0c 	bl	8003a76 <_ZN13geometry_msgs9Transform11deserializeEPh>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4413      	add	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
     return offset;
 8003c66:	693b      	ldr	r3, [r7, #16]
    }
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <_ZN13geometry_msgs16TransformStamped7getTypeEv>:

    const char * getType(){ return "geometry_msgs/TransformStamped"; };
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	4b03      	ldr	r3, [pc, #12]	; (8003c88 <_ZN13geometry_msgs16TransformStamped7getTypeEv+0x18>)
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	08027a94 	.word	0x08027a94

08003c8c <_ZN13geometry_msgs16TransformStamped6getMD5Ev>:
    const char * getMD5(){ return "b5764a33bfeb3588febc2682852579b0"; };
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	4b03      	ldr	r3, [pc, #12]	; (8003ca4 <_ZN13geometry_msgs16TransformStamped6getMD5Ev+0x18>)
 8003c96:	4618      	mov	r0, r3
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	08027ab4 	.word	0x08027ab4

08003ca8 <_ZN2tfL23createQuaternionFromYawEd>:

namespace tf
{

static inline geometry_msgs::Quaternion createQuaternionFromYaw(double yaw)
{
 8003ca8:	b590      	push	{r4, r7, lr}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	e9c7 2300 	strd	r2, r3, [r7]
  geometry_msgs::Quaternion q;
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f7ff fb15 	bl	80032e4 <_ZN13geometry_msgs10QuaternionC1Ev>
  q.x = 0;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	605a      	str	r2, [r3, #4]
  q.y = 0;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	609a      	str	r2, [r3, #8]
  q.z = sin(yaw * 0.5);
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	4b1b      	ldr	r3, [pc, #108]	; (8003d3c <_ZN2tfL23createQuaternionFromYawEd+0x94>)
 8003cd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003cd4:	f7fc fc90 	bl	80005f8 <__aeabi_dmul>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	460c      	mov	r4, r1
 8003cdc:	ec44 3b17 	vmov	d7, r3, r4
 8003ce0:	eeb0 0a47 	vmov.f32	s0, s14
 8003ce4:	eef0 0a67 	vmov.f32	s1, s15
 8003ce8:	f020 fd06 	bl	80246f8 <sin>
 8003cec:	ec54 3b10 	vmov	r3, r4, d0
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	f7fc ff42 	bl	8000b7c <__aeabi_d2f>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	60da      	str	r2, [r3, #12]
  q.w = cos(yaw * 0.5);
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	4b0e      	ldr	r3, [pc, #56]	; (8003d3c <_ZN2tfL23createQuaternionFromYawEd+0x94>)
 8003d04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d08:	f7fc fc76 	bl	80005f8 <__aeabi_dmul>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	460c      	mov	r4, r1
 8003d10:	ec44 3b17 	vmov	d7, r3, r4
 8003d14:	eeb0 0a47 	vmov.f32	s0, s14
 8003d18:	eef0 0a67 	vmov.f32	s1, s15
 8003d1c:	f020 fc5c 	bl	80245d8 <cos>
 8003d20:	ec54 3b10 	vmov	r3, r4, d0
 8003d24:	4618      	mov	r0, r3
 8003d26:	4621      	mov	r1, r4
 8003d28:	f7fc ff28 	bl	8000b7c <__aeabi_d2f>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	611a      	str	r2, [r3, #16]
  return q;
 8003d32:	bf00      	nop
}
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	3714      	adds	r7, #20
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd90      	pop	{r4, r7, pc}
 8003d3c:	3fe00000 	.word	0x3fe00000

08003d40 <_ZN2tf9tfMessageC1Ev>:
      uint32_t transforms_length;
      typedef geometry_msgs::TransformStamped _transforms_type;
      _transforms_type st_transforms;
      _transforms_type * transforms;

    tfMessage():
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
      transforms_length(0), transforms(NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fd f9f4 	bl	8001138 <_ZN3ros3MsgC1Ev>
 8003d50:	4a09      	ldr	r2, [pc, #36]	; (8003d78 <_ZN2tf9tfMessageC1Ev+0x38>)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	605a      	str	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3308      	adds	r3, #8
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff fec9 	bl	8003af8 <_ZN13geometry_msgs16TransformStampedC1Ev>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	64da      	str	r2, [r3, #76]	; 0x4c
    {
    }
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	0802ba2c 	.word	0x0802ba2c

08003d7c <_ZNK2tf9tfMessage9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->transforms_length >> (8 * 0)) & 0xFF;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6859      	ldr	r1, [r3, #4]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	4413      	add	r3, r2
 8003d94:	b2ca      	uxtb	r2, r1
 8003d96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->transforms_length >> (8 * 1)) & 0xFF;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	0a19      	lsrs	r1, r3, #8
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	3301      	adds	r3, #1
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	4413      	add	r3, r2
 8003da6:	b2ca      	uxtb	r2, r1
 8003da8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->transforms_length >> (8 * 2)) & 0xFF;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	0c19      	lsrs	r1, r3, #16
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	3302      	adds	r3, #2
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	4413      	add	r3, r2
 8003db8:	b2ca      	uxtb	r2, r1
 8003dba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->transforms_length >> (8 * 3)) & 0xFF;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	0e19      	lsrs	r1, r3, #24
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	3303      	adds	r3, #3
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	4413      	add	r3, r2
 8003dca:	b2ca      	uxtb	r2, r1
 8003dcc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->transforms_length);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d223      	bcs.n	8003e2a <_ZNK2tf9tfMessage9serializeEPh+0xae>
      offset += this->transforms[i].serialize(outbuffer + offset);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	4613      	mov	r3, r2
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	18c8      	adds	r0, r1, r3
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	4613      	mov	r3, r2
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	4613      	mov	r3, r2
 8003e04:	011b      	lsls	r3, r3, #4
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	6839      	ldr	r1, [r7, #0]
 8003e14:	440a      	add	r2, r1
 8003e16:	4611      	mov	r1, r2
 8003e18:	4798      	blx	r3
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < transforms_length; i++){
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	3301      	adds	r3, #1
 8003e26:	60bb      	str	r3, [r7, #8]
 8003e28:	e7d6      	b.n	8003dd8 <_ZNK2tf9tfMessage9serializeEPh+0x5c>
      }
      return offset;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
    }
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <_ZN2tf9tfMessage11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	617b      	str	r3, [r7, #20]
      uint32_t transforms_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	4413      	add	r3, r2
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	4413      	add	r3, r2
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	021b      	lsls	r3, r3, #8
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	3302      	adds	r3, #2
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	4413      	add	r3, r2
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	041b      	lsls	r3, r3, #16
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]
      transforms_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	3303      	adds	r3, #3
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	4413      	add	r3, r2
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	061b      	lsls	r3, r3, #24
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->transforms_length);
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	3304      	adds	r3, #4
 8003e86:	617b      	str	r3, [r7, #20]
      if(transforms_lengthT > transforms_length)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d90c      	bls.n	8003eac <_ZN2tf9tfMessage11deserializeEPh+0x78>
        this->transforms = (geometry_msgs::TransformStamped*)realloc(this->transforms, transforms_lengthT * sizeof(geometry_msgs::TransformStamped));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	f022 fdc5 	bl	8026a30 <realloc>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	64da      	str	r2, [r3, #76]	; 0x4c
      transforms_length = transforms_lengthT;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < transforms_length; i++){
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d21e      	bcs.n	8003efe <_ZN2tf9tfMessage11deserializeEPh+0xca>
      offset += this->st_transforms.deserialize(inbuffer + offset);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f103 0008 	add.w	r0, r3, #8
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	4413      	add	r3, r2
 8003ecc:	4619      	mov	r1, r3
 8003ece:	f7ff fe77 	bl	8003bc0 <_ZN13geometry_msgs16TransformStamped11deserializeEPh>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]
        memcpy( &(this->transforms[i]), &(this->st_transforms), sizeof(geometry_msgs::TransformStamped));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	18c8      	adds	r0, r1, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3308      	adds	r3, #8
 8003eee:	2244      	movs	r2, #68	; 0x44
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	f022 fc96 	bl	8026822 <memcpy>
      for( uint32_t i = 0; i < transforms_length; i++){
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	e7db      	b.n	8003eb6 <_ZN2tf9tfMessage11deserializeEPh+0x82>
      }
     return offset;
 8003efe:	697b      	ldr	r3, [r7, #20]
    }
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <_ZN2tf9tfMessage7getTypeEv>:

    const char * getType(){ return "tf/tfMessage"; };
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	4b03      	ldr	r3, [pc, #12]	; (8003f20 <_ZN2tf9tfMessage7getTypeEv+0x18>)
 8003f12:	4618      	mov	r0, r3
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	08027ad8 	.word	0x08027ad8

08003f24 <_ZN2tf9tfMessage6getMD5Ev>:
    const char * getMD5(){ return "94810edda583a504dfda3829e70d7eec"; };
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	4b03      	ldr	r3, [pc, #12]	; (8003f3c <_ZN2tf9tfMessage6getMD5Ev+0x18>)
 8003f2e:	4618      	mov	r0, r3
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	08027ae8 	.word	0x08027ae8

08003f40 <_ZN2tf20TransformBroadcasterC1Ev>:
{

class TransformBroadcaster
{
public:
  TransformBroadcaster() : publisher_("/tf", &internal_msg) {}
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fef8 	bl	8003d40 <_ZN2tf9tfMessageC1Ev>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	2300      	movs	r3, #0
 8003f5a:	4904      	ldr	r1, [pc, #16]	; (8003f6c <_ZN2tf20TransformBroadcasterC1Ev+0x2c>)
 8003f5c:	f7fd ff22 	bl	8001da4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	08027b0c 	.word	0x08027b0c

08003f70 <_ZN2tf20TransformBroadcaster4initERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEE>:

  void init(ros::NodeHandle &nh)
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  {
    nh.advertise(publisher_);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3350      	adds	r3, #80	; 0x50
 8003f7e:	4619      	mov	r1, r3
 8003f80:	6838      	ldr	r0, [r7, #0]
 8003f82:	f000 ff14 	bl	8004dae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
  }
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <_ZN2tf20TransformBroadcaster13sendTransformERN13geometry_msgs16TransformStampedE>:

  void sendTransform(geometry_msgs::TransformStamped &transform)
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	6039      	str	r1, [r7, #0]
  {
    internal_msg.transforms_length = 1;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	605a      	str	r2, [r3, #4]
    internal_msg.transforms = &transform;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	64da      	str	r2, [r3, #76]	; 0x4c
    publisher_.publish(&internal_msg);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3350      	adds	r3, #80	; 0x50
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	4611      	mov	r1, r2
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fd ff10 	bl	8001dd2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  }
 8003fb2:	bf00      	nop
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
	...

08003fbc <_ZN13geometry_msgs25PoseWithCovarianceStampedC1Ev>:
      typedef std_msgs::Header _header_type;
      _header_type header;
      typedef geometry_msgs::PoseWithCovariance _pose_type;
      _pose_type pose;

    PoseWithCovarianceStamped():
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
      header(),
      pose()
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fd f8b6 	bl	8001138 <_ZN3ros3MsgC1Ev>
 8003fcc:	4a08      	ldr	r2, [pc, #32]	; (8003ff0 <_ZN13geometry_msgs25PoseWithCovarianceStampedC1Ev+0x34>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fe ff4a 	bl	8002e70 <_ZN8std_msgs6HeaderC1Ev>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3318      	adds	r3, #24
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff fac7 	bl	8003574 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>
    {
    }
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	0802ba14 	.word	0x0802ba14

08003ff4 <_ZNK13geometry_msgs25PoseWithCovarianceStamped9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	1d18      	adds	r0, r3, #4
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	4413      	add	r3, r2
 800400c:	4619      	mov	r1, r3
 800400e:	f7fe ff4f 	bl	8002eb0 <_ZNK8std_msgs6Header9serializeEPh>
 8004012:	4602      	mov	r2, r0
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f103 0018 	add.w	r0, r3, #24
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	4413      	add	r3, r2
 8004026:	4619      	mov	r1, r3
 8004028:	f7ff fac8 	bl	80035bc <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>
 800402c:	4602      	mov	r2, r0
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4413      	add	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]
      return offset;
 8004034:	68fb      	ldr	r3, [r7, #12]
    }
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <_ZN13geometry_msgs25PoseWithCovarianceStamped11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
 8004046:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]
      offset += this->header.deserialize(inbuffer + offset);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	1d18      	adds	r0, r3, #4
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	4413      	add	r3, r2
 8004056:	4619      	mov	r1, r3
 8004058:	f7fe ffc2 	bl	8002fe0 <_ZN8std_msgs6Header11deserializeEPh>
 800405c:	4602      	mov	r2, r0
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	4413      	add	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]
      offset += this->pose.deserialize(inbuffer + offset);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f103 0018 	add.w	r0, r3, #24
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	4413      	add	r3, r2
 8004070:	4619      	mov	r1, r3
 8004072:	f7ff fad8 	bl	8003626 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>
 8004076:	4602      	mov	r2, r0
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4413      	add	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]
     return offset;
 800407e:	68fb      	ldr	r3, [r7, #12]
    }
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <_ZN13geometry_msgs25PoseWithCovarianceStamped7getTypeEv>:

    const char * getType(){ return "geometry_msgs/PoseWithCovarianceStamped"; };
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	4b03      	ldr	r3, [pc, #12]	; (80040a0 <_ZN13geometry_msgs25PoseWithCovarianceStamped7getTypeEv+0x18>)
 8004092:	4618      	mov	r0, r3
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	08027b10 	.word	0x08027b10

080040a4 <_ZN13geometry_msgs25PoseWithCovarianceStamped6getMD5Ev>:
    const char * getMD5(){ return "953b798c0f514ff060a53a3498ce6246"; };
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	4b03      	ldr	r3, [pc, #12]	; (80040bc <_ZN13geometry_msgs25PoseWithCovarianceStamped6getMD5Ev+0x18>)
 80040ae:	4618      	mov	r0, r3
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	08027b38 	.word	0x08027b38

080040c0 <_ZN17OdometryPublisherC1Ev>:
	ros::Time cur_time;

	float theta;

public:
	OdometryPublisher():pub("",&odom),sub("/initialpose",&OdometryPublisher::on_initial_pose, this){
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3310      	adds	r3, #16
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff fb9b 	bl	8003808 <_ZN8nav_msgs8OdometryC1Ev>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f103 0210 	add.w	r2, r3, #16
 80040de:	2300      	movs	r3, #0
 80040e0:	491c      	ldr	r1, [pc, #112]	; (8004154 <_ZN17OdometryPublisherC1Ev+0x94>)
 80040e2:	f7fd fe5f 	bl	8001da4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff ff27 	bl	8003f40 <_ZN2tf20TransformBroadcasterC1Ev>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff fcfd 	bl	8003af8 <_ZN13geometry_msgs16TransformStampedC1Ev>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f503 7017 	add.w	r0, r3, #604	; 0x25c
 8004104:	4b14      	ldr	r3, [pc, #80]	; (8004158 <_ZN17OdometryPublisherC1Ev+0x98>)
 8004106:	60bb      	str	r3, [r7, #8]
 8004108:	2300      	movs	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	2301      	movs	r3, #1
 800410e:	9301      	str	r3, [sp, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	f107 0308 	add.w	r3, r7, #8
 8004118:	cb0c      	ldmia	r3, {r2, r3}
 800411a:	4910      	ldr	r1, [pc, #64]	; (800415c <_ZN17OdometryPublisherC1Ev+0x9c>)
 800411c:	f000 fe78 	bl	8004e10 <_ZN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedE17OdometryPublisherEC1EPKcMS3_FvRKS2_EPS3_i>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8004136:	4618      	mov	r0, r3
 8004138:	f7fc ffec 	bl	8001114 <_ZN3ros4TimeC1Ev>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f503 7357 	add.w	r3, r3, #860	; 0x35c
 8004142:	4618      	mov	r0, r3
 8004144:	f7fc ffe6 	bl	8001114 <_ZN3ros4TimeC1Ev>

	}
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	080277bc 	.word	0x080277bc
 8004158:	08004747 	.word	0x08004747
 800415c:	08027b5c 	.word	0x08027b5c

08004160 <_ZN17OdometryPublisher4initEPN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEEP14WheelPublisherS6_PcS7_S7_>:


	void init(ros::NodeHandle* n, WheelPublisher *leftWheel, WheelPublisher *rightWheel,  char *topic_name,  char *base_frame,  char *odom_frame){
 8004160:	b590      	push	{r4, r7, lr}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	6178      	str	r0, [r7, #20]
 8004168:	6139      	str	r1, [r7, #16]
 800416a:	60fa      	str	r2, [r7, #12]
 800416c:	60bb      	str	r3, [r7, #8]
		    OdometryPublisher::pose_set  = xSemaphoreCreateMutex();
 800416e:	2001      	movs	r0, #1
 8004170:	f00b ff01 	bl	800ff76 <xQueueCreateMutex>
 8004174:	4602      	mov	r2, r0
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	609a      	str	r2, [r3, #8]
			nh = n;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	60da      	str	r2, [r3, #12]
			pub.topic_ = topic_name;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004184:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
			(*nh).advertise(pub);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	68da      	ldr	r2, [r3, #12]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004192:	4619      	mov	r1, r3
 8004194:	4610      	mov	r0, r2
 8004196:	f000 fe0a 	bl	8004dae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>
			nh->subscribe(sub);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80041a4:	4619      	mov	r1, r3
 80041a6:	4610      	mov	r0, r2
 80041a8:	f000 fe60 	bl	8004e6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedE17OdometryPublisherEEEEbRT_>

			encoder1 = leftWheel;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
			encoder2 = rightWheel;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350

			cur_time = nh->now();
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	697c      	ldr	r4, [r7, #20]
 80041c2:	463b      	mov	r3, r7
 80041c4:	4611      	mov	r1, r2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fe7c 	bl	8004ec4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3nowEv>
 80041cc:	f504 7357 	add.w	r3, r4, #860	; 0x35c
 80041d0:	463a      	mov	r2, r7
 80041d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041d6:	e883 0003 	stmia.w	r3, {r0, r1}
			last_time = cur_time;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80041e2:	f502 7257 	add.w	r2, r2, #860	; 0x35c
 80041e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041ea:	e883 0003 	stmia.w	r3, {r0, r1}

			theta = 0;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364

			odom.header.frame_id = odom_frame;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041fc:	625a      	str	r2, [r3, #36]	; 0x24
			odom.child_frame_id = base_frame;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004202:	629a      	str	r2, [r3, #40]	; 0x28

			tf_broadcaster.init(*nh);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f503 72da 	add.w	r2, r3, #436	; 0x1b4
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	4619      	mov	r1, r3
 8004210:	4610      	mov	r0, r2
 8004212:	f7ff fead 	bl	8003f70 <_ZN2tf20TransformBroadcaster4initERN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEE>
			transform.header.frame_id =odom_frame ;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800421a:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			transform.child_frame_id = base_frame;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004222:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		}
 8004226:	bf00      	nop
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	bd90      	pop	{r4, r7, pc}

0800422e <_ZN17OdometryPublisher16set_robot_paramsEff>:
	void set_robot_params(float radius, float separation){
 800422e:	b480      	push	{r7}
 8004230:	b085      	sub	sp, #20
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	ed87 0a02 	vstr	s0, [r7, #8]
 800423a:	edc7 0a01 	vstr	s1, [r7, #4]
		wheel_radius = radius;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	601a      	str	r2, [r3, #0]
		wheel_separetion = separation;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	605a      	str	r2, [r3, #4]
	}
 800424a:	bf00      	nop
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <_ZN3ros3MsgaSERKS0_>:
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	6039      	str	r1, [r7, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4618      	mov	r0, r3
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <_ZN13geometry_msgs10QuaternionaSERKS0_>:
  class Quaternion : public ros::Msg
 800426e:	b580      	push	{r7, lr}
 8004270:	b082      	sub	sp, #8
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	6039      	str	r1, [r7, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	4611      	mov	r1, r2
 800427e:	4618      	mov	r0, r3
 8004280:	f7ff ffe9 	bl	8004256 <_ZN3ros3MsgaSERKS0_>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	605a      	str	r2, [r3, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	609a      	str	r2, [r3, #8]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	60da      	str	r2, [r3, #12]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	611a      	str	r2, [r3, #16]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
	...

080042b0 <_ZN17OdometryPublisher8set_poseEv>:

	void set_pose(){
 80042b0:	b5b0      	push	{r4, r5, r7, lr}
 80042b2:	ed2d 8b02 	vpush	{d8}
 80042b6:	b096      	sub	sp, #88	; 0x58
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
		if( xSemaphoreTake( pose_set, portMAX_DELAY) == pdTRUE )
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042c4:	4618      	mov	r0, r3
 80042c6:	f00c f97d 	bl	80105c4 <xQueueSemaphoreTake>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	bf0c      	ite	eq
 80042d0:	2301      	moveq	r3, #1
 80042d2:	2300      	movne	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 8202 	beq.w	80046e0 <_ZN17OdometryPublisher8set_poseEv+0x430>
		{

		float left_travel = encoder1->get_distance() * wheel_radius;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fe fa24 	bl	8002730 <_ZN14WheelPublisher12get_distanceEv>
 80042e8:	eeb0 7a40 	vmov.f32	s14, s0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	edd3 7a00 	vldr	s15, [r3]
 80042f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042f6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		float right_travel = encoder2->get_distance() * wheel_radius;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8004300:	4618      	mov	r0, r3
 8004302:	f7fe fa15 	bl	8002730 <_ZN14WheelPublisher12get_distanceEv>
 8004306:	eeb0 7a40 	vmov.f32	s14, s0
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	edd3 7a00 	vldr	s15, [r3]
 8004310:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004314:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

//		double delta_time = cur_time.toSec() - last_time.toSec();
		double delta_time = (encoder1->get_distance_time() + encoder2->get_distance_time()) / 2000.0;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 800431e:	4618      	mov	r0, r3
 8004320:	f7fe fa2b 	bl	800277a <_ZN14WheelPublisher17get_distance_timeEv>
 8004324:	ec55 4b10 	vmov	r4, r5, d0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 800432e:	4618      	mov	r0, r3
 8004330:	f7fe fa23 	bl	800277a <_ZN14WheelPublisher17get_distance_timeEv>
 8004334:	ec53 2b10 	vmov	r2, r3, d0
 8004338:	4620      	mov	r0, r4
 800433a:	4629      	mov	r1, r5
 800433c:	f7fb ffa6 	bl	800028c <__adddf3>
 8004340:	4603      	mov	r3, r0
 8004342:	460c      	mov	r4, r1
 8004344:	4618      	mov	r0, r3
 8004346:	4621      	mov	r1, r4
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	4b92      	ldr	r3, [pc, #584]	; (8004598 <_ZN17OdometryPublisher8set_poseEv+0x2e8>)
 800434e:	f7fc fa7d 	bl	800084c <__aeabi_ddiv>
 8004352:	4603      	mov	r3, r0
 8004354:	460c      	mov	r4, r1
 8004356:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

		float pose_x =   odom.pose.pose.position.x;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	637b      	str	r3, [r7, #52]	; 0x34
		float pose_y =   odom.pose.pose.position.y;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004364:	633b      	str	r3, [r7, #48]	; 0x30

		float x_vel = 0;
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	657b      	str	r3, [r7, #84]	; 0x54
		float theta_vel = 0;
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	653b      	str	r3, [r7, #80]	; 0x50


        float delta_travel = (right_travel + left_travel) / 2.0;
 8004372:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004376:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800437a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800437e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004382:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004386:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        float delta_theta = (right_travel - left_travel) / wheel_separetion;
 800438a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800438e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004392:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	ed93 7a01 	vldr	s14, [r3, #4]
 800439c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043a0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

        float delta_x = 0;
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	64fb      	str	r3, [r7, #76]	; 0x4c
        float delta_y = 0;
 80043aa:	f04f 0300 	mov.w	r3, #0
 80043ae:	64bb      	str	r3, [r7, #72]	; 0x48

        if (right_travel == left_travel)
 80043b0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80043b4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80043b8:	eeb4 7a67 	vcmp.f32	s14, s15
 80043bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c0:	d11e      	bne.n	8004400 <_ZN17OdometryPublisher8set_poseEv+0x150>
        {
            delta_x = left_travel * cos(theta);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	edd3 7ad9 	vldr	s15, [r3, #868]	; 0x364
 80043c8:	eeb0 0a67 	vmov.f32	s0, s15
 80043cc:	f7fc fda6 	bl	8000f1c <_ZSt3cosf>
 80043d0:	eeb0 7a40 	vmov.f32	s14, s0
 80043d4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80043d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043dc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            delta_y = left_travel * sin(theta);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	edd3 7ad9 	vldr	s15, [r3, #868]	; 0x364
 80043e6:	eeb0 0a67 	vmov.f32	s0, s15
 80043ea:	f7fc fda7 	bl	8000f3c <_ZSt3sinf>
 80043ee:	eeb0 7a40 	vmov.f32	s14, s0
 80043f2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80043f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80043fa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
 80043fe:	e087      	b.n	8004510 <_ZN17OdometryPublisher8set_poseEv+0x260>
        }
        else
        {

            float radius = (delta_theta == 0)? 0 : delta_travel / delta_theta;
 8004400:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8004404:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800440c:	d006      	beq.n	800441c <_ZN17OdometryPublisher8set_poseEv+0x16c>
 800440e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8004412:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800441a:	e001      	b.n	8004420 <_ZN17OdometryPublisher8set_poseEv+0x170>
 800441c:	eddf 7a5f 	vldr	s15, [pc, #380]	; 800459c <_ZN17OdometryPublisher8set_poseEv+0x2ec>
 8004420:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

            float icc_x = pose_x - radius * sin(theta);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	edd3 7ad9 	vldr	s15, [r3, #868]	; 0x364
 800442a:	eeb0 0a67 	vmov.f32	s0, s15
 800442e:	f7fc fd85 	bl	8000f3c <_ZSt3sinf>
 8004432:	eeb0 7a40 	vmov.f32	s14, s0
 8004436:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800443a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004442:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004446:	edc7 7a08 	vstr	s15, [r7, #32]
            float icc_y = pose_y + radius * cos(theta);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	edd3 7ad9 	vldr	s15, [r3, #868]	; 0x364
 8004450:	eeb0 0a67 	vmov.f32	s0, s15
 8004454:	f7fc fd62 	bl	8000f1c <_ZSt3cosf>
 8004458:	eeb0 7a40 	vmov.f32	s14, s0
 800445c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004464:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8004468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800446c:	edc7 7a07 	vstr	s15, [r7, #28]

            delta_x = cos(delta_theta) * (pose_x - icc_x) - sin(delta_theta) * (pose_y - icc_y) + icc_x - pose_x;
 8004470:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004474:	f7fc fd52 	bl	8000f1c <_ZSt3cosf>
 8004478:	eef0 6a40 	vmov.f32	s13, s0
 800447c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004480:	edd7 7a08 	vldr	s15, [r7, #32]
 8004484:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004488:	ee26 8aa7 	vmul.f32	s16, s13, s15
 800448c:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8004490:	f7fc fd54 	bl	8000f3c <_ZSt3sinf>
 8004494:	eef0 6a40 	vmov.f32	s13, s0
 8004498:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800449c:	edd7 7a07 	vldr	s15, [r7, #28]
 80044a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044a8:	ee38 7a67 	vsub.f32	s14, s16, s15
 80044ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80044b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044b4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80044b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044bc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            delta_y = sin(delta_theta) * (pose_x - icc_x) + cos(delta_theta) * (pose_y - icc_y) + icc_y - pose_y;
 80044c0:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80044c4:	f7fc fd3a 	bl	8000f3c <_ZSt3sinf>
 80044c8:	eef0 6a40 	vmov.f32	s13, s0
 80044cc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80044d0:	edd7 7a08 	vldr	s15, [r7, #32]
 80044d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044d8:	ee26 8aa7 	vmul.f32	s16, s13, s15
 80044dc:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 80044e0:	f7fc fd1c 	bl	8000f1c <_ZSt3cosf>
 80044e4:	eef0 6a40 	vmov.f32	s13, s0
 80044e8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80044ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80044f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044f8:	ee38 7a27 	vadd.f32	s14, s16, s15
 80044fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8004500:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004504:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800450c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        }
        pose_x += delta_x;
 8004510:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004514:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800451c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        pose_y += delta_y;
 8004520:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8004524:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800452c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        theta += delta_theta;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	ed93 7ad9 	vldr	s14, [r3, #868]	; 0x364
 8004536:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800453a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	edc3 7ad9 	vstr	s15, [r3, #868]	; 0x364
        while (theta > 2.0 * PI){
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 800454a:	4618      	mov	r0, r3
 800454c:	f7fb fffc 	bl	8000548 <__aeabi_f2d>
 8004550:	a30f      	add	r3, pc, #60	; (adr r3, 8004590 <_ZN17OdometryPublisher8set_poseEv+0x2e0>)
 8004552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004556:	f7fc fadf 	bl	8000b18 <__aeabi_dcmpgt>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d01f      	beq.n	80045a0 <_ZN17OdometryPublisher8set_poseEv+0x2f0>
        	theta -= 2.0 * PI;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 8004566:	4618      	mov	r0, r3
 8004568:	f7fb ffee 	bl	8000548 <__aeabi_f2d>
 800456c:	a308      	add	r3, pc, #32	; (adr r3, 8004590 <_ZN17OdometryPublisher8set_poseEv+0x2e0>)
 800456e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004572:	f7fb fe89 	bl	8000288 <__aeabi_dsub>
 8004576:	4603      	mov	r3, r0
 8004578:	460c      	mov	r4, r1
 800457a:	4618      	mov	r0, r3
 800457c:	4621      	mov	r1, r4
 800457e:	f7fc fafd 	bl	8000b7c <__aeabi_d2f>
 8004582:	4602      	mov	r2, r0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
        while (theta > 2.0 * PI){
 800458a:	e7db      	b.n	8004544 <_ZN17OdometryPublisher8set_poseEv+0x294>
 800458c:	f3af 8000 	nop.w
 8004590:	51eb851f 	.word	0x51eb851f
 8004594:	40191eb8 	.word	0x40191eb8
 8004598:	409f4000 	.word	0x409f4000
 800459c:	00000000 	.word	0x00000000
        }

		if (delta_time > 0){
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	f04f 0300 	mov.w	r3, #0
 80045a8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80045ac:	f7fc fab4 	bl	8000b18 <__aeabi_dcmpgt>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d01d      	beq.n	80045f2 <_ZN17OdometryPublisher8set_poseEv+0x342>
			x_vel = delta_travel / delta_time;
 80045b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80045b8:	f7fb ffc6 	bl	8000548 <__aeabi_f2d>
 80045bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045c0:	f7fc f944 	bl	800084c <__aeabi_ddiv>
 80045c4:	4603      	mov	r3, r0
 80045c6:	460c      	mov	r4, r1
 80045c8:	4618      	mov	r0, r3
 80045ca:	4621      	mov	r1, r4
 80045cc:	f7fc fad6 	bl	8000b7c <__aeabi_d2f>
 80045d0:	4603      	mov	r3, r0
 80045d2:	657b      	str	r3, [r7, #84]	; 0x54
			theta_vel = delta_theta / delta_time;
 80045d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045d6:	f7fb ffb7 	bl	8000548 <__aeabi_f2d>
 80045da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045de:	f7fc f935 	bl	800084c <__aeabi_ddiv>
 80045e2:	4603      	mov	r3, r0
 80045e4:	460c      	mov	r4, r1
 80045e6:	4618      	mov	r0, r3
 80045e8:	4621      	mov	r1, r4
 80045ea:	f7fc fac7 	bl	8000b7c <__aeabi_d2f>
 80045ee:	4603      	mov	r3, r0
 80045f0:	653b      	str	r3, [r7, #80]	; 0x50
		}

		geometry_msgs::Quaternion q = tf::createQuaternionFromYaw(theta);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8d3 3364 	ldr.w	r3, [r3, #868]	; 0x364
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fb ffa5 	bl	8000548 <__aeabi_f2d>
 80045fe:	4603      	mov	r3, r0
 8004600:	460c      	mov	r4, r1
 8004602:	f107 0108 	add.w	r1, r7, #8
 8004606:	461a      	mov	r2, r3
 8004608:	4623      	mov	r3, r4
 800460a:	4608      	mov	r0, r1
 800460c:	f7ff fb4c 	bl	8003ca8 <_ZN2tfL23createQuaternionFromYawEd>

		transform.header.stamp = cur_time;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8004618:	f502 7257 	add.w	r2, r2, #860	; 0x35c
 800461c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004620:	e883 0003 	stmia.w	r3, {r0, r1}
		transform.transform.translation.x = pose_x;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004628:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
		transform.transform.translation.y = pose_y;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004630:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		transform.transform.translation.z = 0;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
		transform.transform.rotation = q;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8004644:	f107 0208 	add.w	r2, r7, #8
 8004648:	4611      	mov	r1, r2
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff fe0f 	bl	800426e <_ZN13geometry_msgs10QuaternionaSERKS0_>
		tf_broadcaster.sendTransform(transform);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f503 72da 	add.w	r2, r3, #436	; 0x1b4
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800465c:	4619      	mov	r1, r3
 800465e:	4610      	mov	r0, r2
 8004660:	f7ff fc95 	bl	8003f8e <_ZN2tf20TransformBroadcaster13sendTransformERN13geometry_msgs16TransformStampedE>
		if(pose_x == 0 && pose_y == 0){
 8004664:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004668:	eef5 7a40 	vcmp.f32	s15, #0.0
 800466c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004670:	d110      	bne.n	8004694 <_ZN17OdometryPublisher8set_poseEv+0x3e4>
 8004672:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004676:	eef5 7a40 	vcmp.f32	s15, #0.0
 800467a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800467e:	d109      	bne.n	8004694 <_ZN17OdometryPublisher8set_poseEv+0x3e4>
			tf_broadcaster.sendTransform(transform);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f503 72da 	add.w	r2, r3, #436	; 0x1b4
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800468c:	4619      	mov	r1, r3
 800468e:	4610      	mov	r0, r2
 8004690:	f7ff fc7d 	bl	8003f8e <_ZN2tf20TransformBroadcaster13sendTransformERN13geometry_msgs16TransformStampedE>
		}


		odom.header.stamp = cur_time;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	331c      	adds	r3, #28
 800469a:	f502 7257 	add.w	r2, r2, #860	; 0x35c
 800469e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046a2:	e883 0003 	stmia.w	r3, {r0, r1}

		 odom.pose.pose.position.x = pose_x;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046aa:	639a      	str	r2, [r3, #56]	; 0x38
		 odom.pose.pose.position.y = pose_y;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046b0:	63da      	str	r2, [r3, #60]	; 0x3c
		 odom.pose.pose.orientation = q;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3344      	adds	r3, #68	; 0x44
 80046b6:	f107 0208 	add.w	r2, r7, #8
 80046ba:	4611      	mov	r1, r2
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff fdd6 	bl	800426e <_ZN13geometry_msgs10QuaternionaSERKS0_>
		 odom.twist.twist.linear.x = x_vel;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80046c6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
		 odom.twist.twist.angular.z = theta_vel;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80046ce:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

		 xSemaphoreGive( pose_set );
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6898      	ldr	r0, [r3, #8]
 80046d6:	2300      	movs	r3, #0
 80046d8:	2200      	movs	r2, #0
 80046da:	2100      	movs	r1, #0
 80046dc:	f00b fc7e 	bl	800ffdc <xQueueGenericSend>
		}

	}
 80046e0:	bf00      	nop
 80046e2:	3758      	adds	r7, #88	; 0x58
 80046e4:	46bd      	mov	sp, r7
 80046e6:	ecbd 8b02 	vpop	{d8}
 80046ea:	bdb0      	pop	{r4, r5, r7, pc}

080046ec <_ZN17OdometryPublisher7publishEv>:

	void publish(){
 80046ec:	b590      	push	{r4, r7, lr}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
		cur_time = nh->now();
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	68fc      	ldr	r4, [r7, #12]
 80046fa:	463b      	mov	r3, r7
 80046fc:	4611      	mov	r1, r2
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fbe0 	bl	8004ec4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3nowEv>
 8004704:	f504 7357 	add.w	r3, r4, #860	; 0x35c
 8004708:	463a      	mov	r2, r7
 800470a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800470e:	e883 0003 	stmia.w	r3, {r0, r1}
		set_pose();
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f7ff fdcc 	bl	80042b0 <_ZN17OdometryPublisher8set_poseEv>
		last_time = cur_time;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8004720:	f502 7257 	add.w	r2, r2, #860	; 0x35c
 8004724:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004728:	e883 0003 	stmia.w	r3, {r0, r1}
		pub.publish(&odom);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	3310      	adds	r3, #16
 8004736:	4619      	mov	r1, r3
 8004738:	4610      	mov	r0, r2
 800473a:	f7fd fb4a 	bl	8001dd2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

	}
 800473e:	bf00      	nop
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	bd90      	pop	{r4, r7, pc}

08004746 <_ZN17OdometryPublisher15on_initial_poseERKN13geometry_msgs25PoseWithCovarianceStampedE>:

	void on_initial_pose(const geometry_msgs::PoseWithCovarianceStamped& msg)
 8004746:	b590      	push	{r4, r7, lr}
 8004748:	b087      	sub	sp, #28
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
 800474e:	6039      	str	r1, [r7, #0]
	{
		if( xSemaphoreTake( pose_set, portMAX_DELAY) == pdTRUE )
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004758:	4618      	mov	r0, r3
 800475a:	f00b ff33 	bl	80105c4 <xQueueSemaphoreTake>
 800475e:	4603      	mov	r3, r0
 8004760:	2b01      	cmp	r3, #1
 8004762:	bf0c      	ite	eq
 8004764:	2301      	moveq	r3, #1
 8004766:	2300      	movne	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d05a      	beq.n	8004824 <_ZN17OdometryPublisher15on_initial_poseERKN13geometry_msgs25PoseWithCovarianceStampedE+0xde>
		{
	    // yaw (z-axis rotation)
	    double siny_cosp = 2 * (msg.pose.pose.orientation.w * msg.pose.pose.orientation.z + msg.pose.pose.orientation.x * msg.pose.pose.orientation.y);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800477a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800478a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800478e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004792:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004796:	ee17 0a90 	vmov	r0, s15
 800479a:	f7fb fed5 	bl	8000548 <__aeabi_f2d>
 800479e:	4603      	mov	r3, r0
 80047a0:	460c      	mov	r4, r1
 80047a2:	e9c7 3404 	strd	r3, r4, [r7, #16]
	    double cosy_cosp = 1 - 2 * (msg.pose.pose.orientation.y * msg.pose.pose.orientation.y + msg.pose.pose.orientation.z * msg.pose.pose.orientation.z);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80047b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80047c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80047ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047d6:	ee17 0a90 	vmov	r0, s15
 80047da:	f7fb feb5 	bl	8000548 <__aeabi_f2d>
 80047de:	4603      	mov	r3, r0
 80047e0:	460c      	mov	r4, r1
 80047e2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	    theta = std::atan2(siny_cosp, cosy_cosp);
 80047e6:	ed97 1b02 	vldr	d1, [r7, #8]
 80047ea:	ed97 0b04 	vldr	d0, [r7, #16]
 80047ee:	f020 f873 	bl	80248d8 <atan2>
 80047f2:	ec54 3b10 	vmov	r3, r4, d0
 80047f6:	4618      	mov	r0, r3
 80047f8:	4621      	mov	r1, r4
 80047fa:	f7fc f9bf 	bl	8000b7c <__aeabi_d2f>
 80047fe:	4602      	mov	r2, r0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
	    odom.pose.pose.position.x = msg.pose.pose.position.x;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	639a      	str	r2, [r3, #56]	; 0x38
	    odom.pose.pose.position.y = msg.pose.pose.position.y;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	63da      	str	r2, [r3, #60]	; 0x3c

	    xSemaphoreGive( pose_set );
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6898      	ldr	r0, [r3, #8]
 800481a:	2300      	movs	r3, #0
 800481c:	2200      	movs	r2, #0
 800481e:	2100      	movs	r1, #0
 8004820:	f00b fbdc 	bl	800ffdc <xQueueGenericSend>
		}
	}
 8004824:	bf00      	nop
 8004826:	371c      	adds	r7, #28
 8004828:	46bd      	mov	sp, r7
 800482a:	bd90      	pop	{r4, r7, pc}

0800482c <_ZN9RosHelperC1Ev>:
#include "SetUpHelper.h"
#include "RosHelper.h"

SetUpHelper *RosHelper::settings = nullptr;

RosHelper::RosHelper(): wheel(), wheel2() , encoder(), encoder2(), cmd_vel(), odom(){
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	4a19      	ldr	r2, [pc, #100]	; (800489c <_ZN9RosHelperC1Ev+0x70>)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3304      	adds	r3, #4
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fb86 	bl	8004f50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800484a:	4618      	mov	r0, r3
 800484c:	f7fd fc8c 	bl	8002168 <_ZN15WheelSubscriberC1Ev>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8004856:	3310      	adds	r3, #16
 8004858:	4618      	mov	r0, r3
 800485a:	f7fd fc85 	bl	8002168 <_ZN15WheelSubscriberC1Ev>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 8004864:	4618      	mov	r0, r3
 8004866:	f7fd fd34 	bl	80022d2 <_ZN14WheelPublisherC1Ev>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8004870:	4618      	mov	r0, r3
 8004872:	f7fd fd2e 	bl	80022d2 <_ZN14WheelPublisherC1Ev>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 800487c:	4618      	mov	r0, r3
 800487e:	f7fe fa9f 	bl	8002dc0 <_ZN16CmdVelSubscriberC1Ev>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8004888:	3310      	adds	r3, #16
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff fc18 	bl	80040c0 <_ZN17OdometryPublisherC1Ev>
	// TODO Auto-generated constructor stub

}
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	0802b9ec 	.word	0x0802b9ec

080048a0 <_ZN9RosHelperD1Ev>:


RosHelper::~RosHelper() {
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	4a04      	ldr	r2, [pc, #16]	; (80048bc <_ZN9RosHelperD1Ev+0x1c>)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4618      	mov	r0, r3
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	0802b9ec 	.word	0x0802b9ec

080048c0 <_ZN9RosHelperD0Ev>:
RosHelper::~RosHelper() {
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
}
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff ffe9 	bl	80048a0 <_ZN9RosHelperD1Ev>
 80048ce:	f241 6138 	movw	r1, #5688	; 0x1638
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f01f fe69 	bl	80245aa <_ZdlPvj>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper>:

void RosHelper::setupRos(TIM_HandleTypeDef *main_htim,  TIM_HandleTypeDef *main_htim2, TIM_HandleTypeDef *encoder_htim, TIM_HandleTypeDef *encoder_htim2, SetUpHelper *main_settings)
{
 80048e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048e6:	b089      	sub	sp, #36	; 0x24
 80048e8:	af04      	add	r7, sp, #16
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
	nh.initNode();
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	3304      	adds	r3, #4
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fbb6 	bl	8005068 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>
	settings = main_settings;
 80048fc:	4a85      	ldr	r2, [pc, #532]	; (8004b14 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x230>)
 80048fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004900:	6013      	str	r3, [r2, #0]

	//===Right wheel===
	wheel.set_pins(GPIO_REN1, PIN_REN1, GPIO_LEN1, PIN_LEN1);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f503 508a 	add.w	r0, r3, #4416	; 0x1140
 8004908:	f44f 7380 	mov.w	r3, #256	; 0x100
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	4b82      	ldr	r3, [pc, #520]	; (8004b18 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x234>)
 8004910:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004914:	4980      	ldr	r1, [pc, #512]	; (8004b18 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x234>)
 8004916:	f7fd fc63 	bl	80021e0 <_ZN15WheelSubscriber8set_pinsEP12GPIO_TypeDeftS1_t>
	wheel.set_timers(main_htim, CHANNEL1, CHANNEL_REV1);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f503 508a 	add.w	r0, r3, #4416	; 0x1140
 8004920:	230c      	movs	r3, #12
 8004922:	2208      	movs	r2, #8
 8004924:	68b9      	ldr	r1, [r7, #8]
 8004926:	f7fd fc73 	bl	8002210 <_ZN15WheelSubscriber10set_timersEP17TIM_HandleTypeDefmm>
	wheel.set_robot_params(settings->MAX_LIN_SPEED, settings->MAX_PWD_ALLOWED);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f503 528a 	add.w	r2, r3, #4416	; 0x1140
 8004930:	4b78      	ldr	r3, [pc, #480]	; (8004b14 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x230>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8004938:	edd3 7a00 	vldr	s15, [r3]
 800493c:	4b75      	ldr	r3, [pc, #468]	; (8004b14 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x230>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f893 3458 	ldrb.w	r3, [r3, #1112]	; 0x458
 8004944:	4619      	mov	r1, r3
 8004946:	eeb0 0a67 	vmov.f32	s0, s15
 800494a:	4610      	mov	r0, r2
 800494c:	f7fd fc84 	bl	8002258 <_ZN15WheelSubscriber16set_robot_paramsEfh>

	//===Left wheel===
	wheel2.set_pins(GPIO_REN2, PIN_REN2, GPIO_LEN2, PIN_LEN2);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f503 508c 	add.w	r0, r3, #4480	; 0x1180
 8004956:	3010      	adds	r0, #16
 8004958:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	4b6f      	ldr	r3, [pc, #444]	; (8004b1c <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x238>)
 8004960:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004964:	496d      	ldr	r1, [pc, #436]	; (8004b1c <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x238>)
 8004966:	f7fd fc3b 	bl	80021e0 <_ZN15WheelSubscriber8set_pinsEP12GPIO_TypeDeftS1_t>
	wheel2.set_timers(main_htim2, CHANNEL2, CHANNEL_REV2);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f503 508c 	add.w	r0, r3, #4480	; 0x1180
 8004970:	3010      	adds	r0, #16
 8004972:	2308      	movs	r3, #8
 8004974:	2204      	movs	r2, #4
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	f7fd fc4a 	bl	8002210 <_ZN15WheelSubscriber10set_timersEP17TIM_HandleTypeDefmm>
	wheel2.set_robot_params(settings->MAX_LIN_SPEED, settings->MAX_PWD_ALLOWED);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8004982:	3310      	adds	r3, #16
 8004984:	4a63      	ldr	r2, [pc, #396]	; (8004b14 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x230>)
 8004986:	6812      	ldr	r2, [r2, #0]
 8004988:	f502 628a 	add.w	r2, r2, #1104	; 0x450
 800498c:	edd2 7a00 	vldr	s15, [r2]
 8004990:	4a60      	ldr	r2, [pc, #384]	; (8004b14 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x230>)
 8004992:	6812      	ldr	r2, [r2, #0]
 8004994:	f892 2458 	ldrb.w	r2, [r2, #1112]	; 0x458
 8004998:	4611      	mov	r1, r2
 800499a:	eeb0 0a67 	vmov.f32	s0, s15
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fd fc5a 	bl	8002258 <_ZN15WheelSubscriber16set_robot_paramsEfh>

	//===Right encoder===
	encoder.init(encoder_htim);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 80049aa:	6839      	ldr	r1, [r7, #0]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fd fc9e 	bl	80022ee <_ZN14WheelPublisher4initEP17TIM_HandleTypeDef>
	encoder.set_robot_params(settings->WHEEL_RADIUS, settings->MAX_LIN_SPEED, settings->RAD_PER_TICK);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f503 528f 	add.w	r2, r3, #4576	; 0x11e0
 80049b8:	4b56      	ldr	r3, [pc, #344]	; (8004b14 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x230>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 80049c0:	edd3 7a00 	vldr	s15, [r3]
 80049c4:	4b53      	ldr	r3, [pc, #332]	; (8004b14 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x230>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80049cc:	ed93 7a00 	vldr	s14, [r3]
 80049d0:	4b50      	ldr	r3, [pc, #320]	; (8004b14 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x230>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 80049d8:	edd3 6a00 	vldr	s13, [r3]
 80049dc:	eeb0 1a66 	vmov.f32	s2, s13
 80049e0:	eef0 0a47 	vmov.f32	s1, s14
 80049e4:	eeb0 0a67 	vmov.f32	s0, s15
 80049e8:	4610      	mov	r0, r2
 80049ea:	f7fd fcc0 	bl	800236e <_ZN14WheelPublisher16set_robot_paramsEfff>

	//===Left encoder===
	encoder2.init(encoder_htim2);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 80049f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fd fc79 	bl	80022ee <_ZN14WheelPublisher4initEP17TIM_HandleTypeDef>
	encoder2.set_robot_params(settings->WHEEL_RADIUS, settings->MAX_LIN_SPEED, settings->RAD_PER_TICK);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f503 5291 	add.w	r2, r3, #4640	; 0x1220
 8004a02:	4b44      	ldr	r3, [pc, #272]	; (8004b14 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x230>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 8004a0a:	edd3 7a00 	vldr	s15, [r3]
 8004a0e:	4b41      	ldr	r3, [pc, #260]	; (8004b14 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x230>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8004a16:	ed93 7a00 	vldr	s14, [r3]
 8004a1a:	4b3e      	ldr	r3, [pc, #248]	; (8004b14 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x230>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 8004a22:	edd3 6a00 	vldr	s13, [r3]
 8004a26:	eeb0 1a66 	vmov.f32	s2, s13
 8004a2a:	eef0 0a47 	vmov.f32	s1, s14
 8004a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8004a32:	4610      	mov	r0, r2
 8004a34:	f7fd fc9b 	bl	800236e <_ZN14WheelPublisher16set_robot_paramsEfff>

	cmd_vel.init(&nh, &wheel2, &wheel, settings->CMD_VEL_TOPIC);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f503 5093 	add.w	r0, r3, #4704	; 0x1260
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	1d19      	adds	r1, r3, #4
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f503 528c 	add.w	r2, r3, #4480	; 0x1180
 8004a48:	3210      	adds	r2, #16
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f503 548a 	add.w	r4, r3, #4416	; 0x1140
 8004a50:	4b30      	ldr	r3, [pc, #192]	; (8004b14 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x230>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	4623      	mov	r3, r4
 8004a5c:	f7fe f9cc 	bl	8002df8 <_ZN16CmdVelSubscriber4initEPN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEEP15WheelSubscriberS6_Pc>
	cmd_vel.set_robot_params(settings->WHEEL_SEPARATION, settings->MAX_LIN_SPEED, settings->MAX_ANG_VEL);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f503 5293 	add.w	r2, r3, #4704	; 0x1260
 8004a66:	4b2b      	ldr	r3, [pc, #172]	; (8004b14 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x230>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f203 434c 	addw	r3, r3, #1100	; 0x44c
 8004a6e:	edd3 7a00 	vldr	s15, [r3]
 8004a72:	4b28      	ldr	r3, [pc, #160]	; (8004b14 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x230>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 8004a7a:	ed93 7a00 	vldr	s14, [r3]
 8004a7e:	4b25      	ldr	r3, [pc, #148]	; (8004b14 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x230>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f203 4354 	addw	r3, r3, #1108	; 0x454
 8004a86:	edd3 6a00 	vldr	s13, [r3]
 8004a8a:	eeb0 1a66 	vmov.f32	s2, s13
 8004a8e:	eef0 0a47 	vmov.f32	s1, s14
 8004a92:	eeb0 0a67 	vmov.f32	s0, s15
 8004a96:	4610      	mov	r0, r2
 8004a98:	f7fe f9d0 	bl	8002e3c <_ZN16CmdVelSubscriber16set_robot_paramsEfff>

	odom.init(&nh, &encoder2, &encoder, settings->ODOM_TOPIC, settings->BASE_FRAME, settings->ODOM_FRAME);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f503 5096 	add.w	r0, r3, #4800	; 0x12c0
 8004aa2:	3010      	adds	r0, #16
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	1d1c      	adds	r4, r3, #4
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f503 5591 	add.w	r5, r3, #4640	; 0x1220
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f503 568f 	add.w	r6, r3, #4576	; 0x11e0
 8004ab4:	4b17      	ldr	r3, [pc, #92]	; (8004b14 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x230>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f203 535f 	addw	r3, r3, #1375	; 0x55f
 8004abc:	4a15      	ldr	r2, [pc, #84]	; (8004b14 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x230>)
 8004abe:	6812      	ldr	r2, [r2, #0]
 8004ac0:	f202 625e 	addw	r2, r2, #1630	; 0x65e
 8004ac4:	4913      	ldr	r1, [pc, #76]	; (8004b14 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x230>)
 8004ac6:	6809      	ldr	r1, [r1, #0]
 8004ac8:	f201 715d 	addw	r1, r1, #1885	; 0x75d
 8004acc:	9102      	str	r1, [sp, #8]
 8004ace:	9201      	str	r2, [sp, #4]
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	4633      	mov	r3, r6
 8004ad4:	462a      	mov	r2, r5
 8004ad6:	4621      	mov	r1, r4
 8004ad8:	f7ff fb42 	bl	8004160 <_ZN17OdometryPublisher4initEPN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEEP14WheelPublisherS6_PcS7_S7_>
	odom.set_robot_params(settings->WHEEL_RADIUS, settings->WHEEL_SEPARATION);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8004ae2:	3310      	adds	r3, #16
 8004ae4:	4a0b      	ldr	r2, [pc, #44]	; (8004b14 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x230>)
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	f502 6289 	add.w	r2, r2, #1096	; 0x448
 8004aec:	edd2 7a00 	vldr	s15, [r2]
 8004af0:	4a08      	ldr	r2, [pc, #32]	; (8004b14 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper+0x230>)
 8004af2:	6812      	ldr	r2, [r2, #0]
 8004af4:	f202 424c 	addw	r2, r2, #1100	; 0x44c
 8004af8:	ed92 7a00 	vldr	s14, [r2]
 8004afc:	eef0 0a47 	vmov.f32	s1, s14
 8004b00:	eeb0 0a67 	vmov.f32	s0, s15
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff fb92 	bl	800422e <_ZN17OdometryPublisher16set_robot_paramsEff>
}
 8004b0a:	bf00      	nop
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b12:	bf00      	nop
 8004b14:	200080a4 	.word	0x200080a4
 8004b18:	40020000 	.word	0x40020000
 8004b1c:	40020c00 	.word	0x40020c00

08004b20 <_ZN9RosHelper7rosLoopEv>:

void RosHelper::rosLoop(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
	if( xSemaphoreTake( SocketClient::error_semaphore, portMAX_DELAY) == pdTRUE )
 8004b28:	4b1a      	ldr	r3, [pc, #104]	; (8004b94 <_ZN9RosHelper7rosLoopEv+0x74>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b30:	4618      	mov	r0, r3
 8004b32:	f00b fd47 	bl	80105c4 <xQueueSemaphoreTake>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	bf0c      	ite	eq
 8004b3c:	2301      	moveq	r3, #1
 8004b3e:	2300      	movne	r3, #0
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d01e      	beq.n	8004b84 <_ZN9RosHelper7rosLoopEv+0x64>
	{
		if (SocketClient::is_connected)
 8004b46:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <_ZN9RosHelper7rosLoopEv+0x78>)
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d013      	beq.n	8004b76 <_ZN9RosHelper7rosLoopEv+0x56>
		{
			xSemaphoreGive( SocketClient::error_semaphore );
 8004b4e:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <_ZN9RosHelper7rosLoopEv+0x74>)
 8004b50:	6818      	ldr	r0, [r3, #0]
 8004b52:	2300      	movs	r3, #0
 8004b54:	2200      	movs	r2, #0
 8004b56:	2100      	movs	r1, #0
 8004b58:	f00b fa40 	bl	800ffdc <xQueueGenericSend>
			odom.publish();
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f503 5396 	add.w	r3, r3, #4800	; 0x12c0
 8004b62:	3310      	adds	r3, #16
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff fdc1 	bl	80046ec <_ZN17OdometryPublisher7publishEv>
			nh.spinOnce();
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fa9f 	bl	80050b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>
 8004b74:	e006      	b.n	8004b84 <_ZN9RosHelper7rosLoopEv+0x64>
		}else {
			xSemaphoreGive( SocketClient::error_semaphore );
 8004b76:	4b07      	ldr	r3, [pc, #28]	; (8004b94 <_ZN9RosHelper7rosLoopEv+0x74>)
 8004b78:	6818      	ldr	r0, [r3, #0]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2100      	movs	r1, #0
 8004b80:	f00b fa2c 	bl	800ffdc <xQueueGenericSend>
		}
	}

	osDelay(ROS_SPINONCE_DELAY);
 8004b84:	2028      	movs	r0, #40	; 0x28
 8004b86:	f00a fcb7 	bl	800f4f8 <osDelay>
}
 8004b8a:	bf00      	nop
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	200080b4 	.word	0x200080b4
 8004b98:	200080b8 	.word	0x200080b8

08004b9c <_ZN9RosHelper7RosTaskEv>:

void RosHelper::RosTask(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		rosLoop();
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff ffbb 	bl	8004b20 <_ZN9RosHelper7rosLoopEv>
 8004baa:	e7fb      	b.n	8004ba4 <_ZN9RosHelper7RosTaskEv+0x8>

08004bac <_ZN9RosHelper12setSpeedTaskEv>:
	}
}

void RosHelper::setSpeedTask(void)
{
 8004bac:	b590      	push	{r4, r7, lr}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		wheel.set_speed(encoder.get_speed());
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f503 548a 	add.w	r4, r3, #4416	; 0x1140
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fd fd79 	bl	80026b8 <_ZN14WheelPublisher9get_speedEv>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4619      	mov	r1, r3
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f7fd f9aa 	bl	8001f24 <_ZN15WheelSubscriber9set_speedEs>
		osDelay(SET_SPEED_DELAY);
 8004bd0:	2064      	movs	r0, #100	; 0x64
 8004bd2:	f00a fc91 	bl	800f4f8 <osDelay>
		wheel.set_speed(encoder.get_speed());
 8004bd6:	e7ed      	b.n	8004bb4 <_ZN9RosHelper12setSpeedTaskEv+0x8>

08004bd8 <_ZN9RosHelper13setSpeedTask2Ev>:
	}
}

void RosHelper::setSpeedTask2(void)
{
 8004bd8:	b590      	push	{r4, r7, lr}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		wheel2.set_speed(encoder2.get_speed());
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f503 548c 	add.w	r4, r3, #4480	; 0x1180
 8004be6:	3410      	adds	r4, #16
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fd fd62 	bl	80026b8 <_ZN14WheelPublisher9get_speedEv>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f7fd f993 	bl	8001f24 <_ZN15WheelSubscriber9set_speedEs>
		osDelay(SET_SPEED_DELAY);
 8004bfe:	2064      	movs	r0, #100	; 0x64
 8004c00:	f00a fc7a 	bl	800f4f8 <osDelay>
		wheel2.set_speed(encoder2.get_speed());
 8004c04:	e7ec      	b.n	8004be0 <_ZN9RosHelper13setSpeedTask2Ev+0x8>

08004c06 <_ZN9RosHelper11encoderTaskEv>:
	}
}

void RosHelper::encoderTask(void)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b082      	sub	sp, #8
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		encoder.tick_calculate();
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f503 538f 	add.w	r3, r3, #4576	; 0x11e0
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fd fbc3 	bl	80023a0 <_ZN14WheelPublisher14tick_calculateEv>
		osDelay(GET_TICK_DELAY);
 8004c1a:	2064      	movs	r0, #100	; 0x64
 8004c1c:	f00a fc6c 	bl	800f4f8 <osDelay>
		encoder.tick_calculate();
 8004c20:	e7f5      	b.n	8004c0e <_ZN9RosHelper11encoderTaskEv+0x8>

08004c22 <_ZN9RosHelper12encoderTask2Ev>:
	}
}

void RosHelper::encoderTask2(void)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b082      	sub	sp, #8
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		encoder2.tick_calculate();
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7fd fbb5 	bl	80023a0 <_ZN14WheelPublisher14tick_calculateEv>
		osDelay(GET_TICK_DELAY);
 8004c36:	2064      	movs	r0, #100	; 0x64
 8004c38:	f00a fc5e 	bl	800f4f8 <osDelay>
		encoder2.tick_calculate();
 8004c3c:	e7f5      	b.n	8004c2a <_ZN9RosHelper12encoderTask2Ev+0x8>

08004c3e <_ZN9RosHelper17cmdvelTimeoutTaskEv>:
	}
}

void RosHelper::cmdvelTimeoutTask(){
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b082      	sub	sp, #8
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
	for(;;){
		cmd_vel.check_timeout();
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f503 5393 	add.w	r3, r3, #4704	; 0x1260
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fe f88d 	bl	8002d6c <_ZN16CmdVelSubscriber13check_timeoutEv>
		osDelay(CMDVEL_TIMEOUT_DELAY);
 8004c52:	2064      	movs	r0, #100	; 0x64
 8004c54:	f00a fc50 	bl	800f4f8 <osDelay>
		cmd_vel.check_timeout();
 8004c58:	e7f5      	b.n	8004c46 <_ZN9RosHelper17cmdvelTimeoutTaskEv+0x8>

08004c5a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004c5a:	b480      	push	{r7}
 8004c5c:	b085      	sub	sp, #20
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004c64:	2300      	movs	r3, #0
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d80d      	bhi.n	8004c8a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	fa22 f103 	lsr.w	r1, r2, r3
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	b2ca      	uxtb	r2, r1
 8004c80:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3301      	adds	r3, #1
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	e7ee      	b.n	8004c68 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8004c8a:	bf00      	nop
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004c96:	b480      	push	{r7}
 8004c98:	b085      	sub	sp, #20
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d811      	bhi.n	8004cd4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6839      	ldr	r1, [r7, #0]
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	440a      	add	r2, r1
 8004cba:	7812      	ldrb	r2, [r2, #0]
 8004cbc:	4611      	mov	r1, r2
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	00d2      	lsls	r2, r2, #3
 8004cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	e7ea      	b.n	8004caa <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8004cd4:	bf00      	nop
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	4a04      	ldr	r2, [pc, #16]	; (8004cfc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	0802bb78 	.word	0x0802bb78

08004d00 <_ZN3ros10SubscriberIN13geometry_msgs5TwistE16CmdVelSubscriberEC1EPKcMS3_FvRKS2_EPS3_i>:
{
public:
  typedef void(ObjT::*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, ObjT* obj, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	4639      	mov	r1, r7
 8004d0c:	e881 000c 	stmia.w	r1, {r2, r3}
    cb_(cb),
    obj_(obj),
    endpoint_(endpoint)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff ffe4 	bl	8004ce0 <_ZN3ros11Subscriber_C1Ev>
 8004d18:	4a0e      	ldr	r2, [pc, #56]	; (8004d54 <_ZN3ros10SubscriberIN13geometry_msgs5TwistE16CmdVelSubscriberEC1EPKcMS3_FvRKS2_EPS3_i+0x54>)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	330c      	adds	r3, #12
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fd fdf0 	bl	8002908 <_ZN13geometry_msgs5TwistC1Ev>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	3330      	adds	r3, #48	; 0x30
 8004d2c:	463a      	mov	r2, r7
 8004d2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004d32:	e883 0003 	stmia.w	r3, {r0, r1}
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	639a      	str	r2, [r3, #56]	; 0x38
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	69fa      	ldr	r2, [r7, #28]
 8004d40:	63da      	str	r2, [r3, #60]	; 0x3c
  {
    topic_ = topic_name;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	609a      	str	r2, [r3, #8]
  };
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	0802bb30 	.word	0x0802bb30

08004d58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistE16CmdVelSubscriberEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004d62:	2300      	movs	r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2b18      	cmp	r3, #24
 8004d6a:	dc19      	bgt.n	8004da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistE16CmdVelSubscriberEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10d      	bne.n	8004d98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistE16CmdVelSubscriberEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004d7c:	6839      	ldr	r1, [r7, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	605a      	str	r2, [r3, #4]
        return true;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e004      	b.n	8004da2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistE16CmdVelSubscriberEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	e7e2      	b.n	8004d66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistE16CmdVelSubscriberEEEEbRT_+0xe>
      }
    }
    return false;
 8004da0:	2300      	movs	r3, #0
  }
 8004da2:	4618      	mov	r0, r3
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8004dae:	b480      	push	{r7}
 8004db0:	b085      	sub	sp, #20
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
 8004db6:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b18      	cmp	r3, #24
 8004dc0:	dc1e      	bgt.n	8004e00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d111      	bne.n	8004df8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	60da      	str	r2, [r3, #12]
        return true;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e004      	b.n	8004e02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	e7dd      	b.n	8004dbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8004e00:	2300      	movs	r3, #0
  }
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
	...

08004e10 <_ZN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedE17OdometryPublisherEC1EPKcMS3_FvRKS2_EPS3_i>:
  Subscriber(const char * topic_name, CallbackT cb, ObjT* obj, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	4639      	mov	r1, r7
 8004e1c:	e881 000c 	stmia.w	r1, {r2, r3}
    endpoint_(endpoint)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff ff5c 	bl	8004ce0 <_ZN3ros11Subscriber_C1Ev>
 8004e28:	4a0f      	ldr	r2, [pc, #60]	; (8004e68 <_ZN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedE17OdometryPublisherEC1EPKcMS3_FvRKS2_EPS3_i+0x58>)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	330c      	adds	r3, #12
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff f8c2 	bl	8003fbc <_ZN13geometry_msgs25PoseWithCovarianceStampedC1Ev>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	33e0      	adds	r3, #224	; 0xe0
 8004e3c:	463a      	mov	r2, r7
 8004e3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e42:	e883 0003 	stmia.w	r3, {r0, r1}
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	69fa      	ldr	r2, [r7, #28]
 8004e52:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    topic_ = topic_name;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	609a      	str	r2, [r3, #8]
  };
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	0802b9fc 	.word	0x0802b9fc

08004e6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedE17OdometryPublisherEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004e76:	2300      	movs	r3, #0
 8004e78:	60fb      	str	r3, [r7, #12]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b18      	cmp	r3, #24
 8004e7e:	dc19      	bgt.n	8004eb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedE17OdometryPublisherEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10d      	bne.n	8004eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedE17OdometryPublisherEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004e90:	6839      	ldr	r1, [r7, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004e9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	605a      	str	r2, [r3, #4]
        return true;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e004      	b.n	8004eb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedE17OdometryPublisherEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	e7e2      	b.n	8004e7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9subscribeINS_10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedE17OdometryPublisherEEEEbRT_+0xe>
    return false;
 8004eb4:	2300      	movs	r3, #0
  }
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
	...

08004ec4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3nowEv>:
  Time now()
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	3304      	adds	r3, #4
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fc fff0 	bl	8001eb8 <_ZN13STM32Hardware4timeEv>
 8004ed8:	60f8      	str	r0, [r7, #12]
    Time current_time;
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fc f91a 	bl	8001114 <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4a11      	ldr	r2, [pc, #68]	; (8004f28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3nowEv+0x64>)
 8004ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee8:	099a      	lsrs	r2, r3, #6
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	f8d3 3818 	ldr.w	r3, [r3, #2072]	; 0x818
 8004ef0:	441a      	add	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3nowEv+0x64>)
 8004efa:	fba3 1302 	umull	r1, r3, r3, r2
 8004efe:	099b      	lsrs	r3, r3, #6
 8004f00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004f04:	fb01 f303 	mul.w	r3, r1, r3
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	4a08      	ldr	r2, [pc, #32]	; (8004f2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3nowEv+0x68>)
 8004f0c:	fb02 f203 	mul.w	r2, r2, r3
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8004f16:	441a      	add	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	605a      	str	r2, [r3, #4]
    return current_time;
 8004f1c:	bf00      	nop
  }
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	10624dd3 	.word	0x10624dd3
 8004f2c:	000f4240 	.word	0x000f4240

08004f30 <_ZN3ros15NodeHandleBase_C1Ev>:
class NodeHandleBase_
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	4a04      	ldr	r2, [pc, #16]	; (8004f4c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4618      	mov	r0, r3
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	0802bb90 	.word	0x0802bb90

08004f50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:
  NodeHandle_() : configured_(false)
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7ff ffe8 	bl	8004f30 <_ZN3ros15NodeHandleBase_C1Ev>
 8004f60:	4a40      	ldr	r2, [pc, #256]	; (8005064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x114>)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fc ff51 	bl	8001e12 <_ZN13STM32HardwareC1Ev>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004f76:	2200      	movs	r2, #0
 8004f78:	701a      	strb	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004f80:	3314      	adds	r3, #20
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fc fc4c 	bl	8001820 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004f88:	2300      	movs	r3, #0
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2b18      	cmp	r3, #24
 8004f90:	d80b      	bhi.n	8004faa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5a>
      publishers[i] = 0;
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	e7f0      	b.n	8004f8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x3c>
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004faa:	2300      	movs	r3, #0
 8004fac:	613b      	str	r3, [r7, #16]
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b18      	cmp	r3, #24
 8004fb2:	d80a      	bhi.n	8004fca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7a>
      subscribers[i] = 0;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	613b      	str	r3, [r7, #16]
 8004fc8:	e7f1      	b.n	8004fae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5e>
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd4:	d20a      	bcs.n	8004fec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9c>
      message_in[i] = 0;
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	60fb      	str	r3, [r7, #12]
 8004fea:	e7f0      	b.n	8004fce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7e>
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004fec:	2300      	movs	r3, #0
 8004fee:	60bb      	str	r3, [r7, #8]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff6:	d20a      	bcs.n	800500e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xbe>
      message_out[i] = 0;
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8005002:	2200      	movs	r2, #0
 8005004:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	3301      	adds	r3, #1
 800500a:	60bb      	str	r3, [r7, #8]
 800500c:	e7f0      	b.n	8004ff0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xa0>
    req_param_resp.ints_length = 0;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005014:	3318      	adds	r3, #24
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
    req_param_resp.ints = NULL;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]
    req_param_resp.floats_length = 0;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800502a:	3304      	adds	r3, #4
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]
    req_param_resp.floats = NULL;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005036:	330c      	adds	r3, #12
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
    req_param_resp.ints_length = 0;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005042:	3318      	adds	r3, #24
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]
    req_param_resp.ints = NULL;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]
    spin_timeout_ = 0;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  }
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	0802bb1c 	.word	0x0802bb1c

08005068 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8initNodeEv>:
  void initNode()
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
    hardware_.init();
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3304      	adds	r3, #4
 8005074:	4618      	mov	r0, r3
 8005076:	f7fc fee3 	bl	8001e40 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005080:	330c      	adds	r3, #12
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
    bytes_ = 0;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800508c:	3310      	adds	r3, #16
 800508e:	2200      	movs	r2, #0
 8005090:	601a      	str	r2, [r3, #0]
    index_ = 0;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005098:	3318      	adds	r3, #24
 800509a:	2200      	movs	r2, #0
 800509c:	601a      	str	r2, [r3, #0]
    topic_ = 0;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80050a4:	3314      	adds	r3, #20
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
  };
 80050aa:	bf00      	nop
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  virtual int spinOnce()
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b084      	sub	sp, #16
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	3304      	adds	r3, #4
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fc fefa 	bl	8001eb8 <_ZN13STM32Hardware4timeEv>
 80050c4:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80050cc:	3308      	adds	r3, #8
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80050d8:	4293      	cmp	r3, r2
 80050da:	d904      	bls.n	80050e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x34>
      configured_ = false;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80050e2:	2200      	movs	r2, #0
 80050e4:	701a      	strb	r2, [r3, #0]
    if (mode_ != MODE_FIRST_FF)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80050ec:	330c      	adds	r3, #12
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00d      	beq.n	8005110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
      if (c_time > last_msg_timeout_time)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80050fa:	330c      	adds	r3, #12
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	429a      	cmp	r2, r3
 8005102:	d905      	bls.n	8005110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800510a:	330c      	adds	r3, #12
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]
      if (spin_timeout_ > 0)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 8005116:	2b00      	cmp	r3, #0
 8005118:	d014      	beq.n	8005144 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x92>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	3304      	adds	r3, #4
 800511e:	4618      	mov	r0, r3
 8005120:	f7fc feca 	bl	8001eb8 <_ZN13STM32Hardware4timeEv>
 8005124:	4602      	mov	r2, r0
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	1ad2      	subs	r2, r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 8005130:	429a      	cmp	r2, r3
 8005132:	bf8c      	ite	hi
 8005134:	2301      	movhi	r3, #1
 8005136:	2300      	movls	r3, #0
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d002      	beq.n	8005144 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x92>
          return SPIN_TIMEOUT;
 800513e:	f06f 0301 	mvn.w	r3, #1
 8005142:	e213      	b.n	800556c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4ba>
      int data = hardware_.read_stm32hw();
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3304      	adds	r3, #4
 8005148:	4618      	mov	r0, r3
 800514a:	f7fc fe83 	bl	8001e54 <_ZN13STM32Hardware12read_stm32hwEv>
 800514e:	60b8      	str	r0, [r7, #8]
      if (data < 0){
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	f2c0 81ee 	blt.w	8005534 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x482>
      checksum_ += data;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800515e:	331c      	adds	r3, #28
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	441a      	add	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800516c:	331c      	adds	r3, #28
 800516e:	601a      	str	r2, [r3, #0]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005176:	330c      	adds	r3, #12
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b07      	cmp	r3, #7
 800517c:	d12a      	bne.n	80051d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x122>
        message_in[index_++] = data;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005184:	3318      	adds	r3, #24
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	1c51      	adds	r1, r2, #1
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005190:	3318      	adds	r3, #24
 8005192:	6019      	str	r1, [r3, #0]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	b2d9      	uxtb	r1, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4413      	add	r3, r2
 800519c:	460a      	mov	r2, r1
 800519e:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
        bytes_--;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80051a8:	3310      	adds	r3, #16
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	1e5a      	subs	r2, r3, #1
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80051b4:	3310      	adds	r3, #16
 80051b6:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80051be:	3310      	adds	r3, #16
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1a4      	bne.n	8005110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80051cc:	330c      	adds	r3, #12
 80051ce:	2208      	movs	r2, #8
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	e79d      	b.n	8005110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_FIRST_FF)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80051da:	330c      	adds	r3, #12
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d130      	bne.n	8005244 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x192>
        if (data == 0xff)
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2bff      	cmp	r3, #255	; 0xff
 80051e6:	d113      	bne.n	8005210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x15e>
          mode_++;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80051ee:	330c      	adds	r3, #12
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80051fa:	330c      	adds	r3, #12
 80051fc:	601a      	str	r2, [r3, #0]
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f103 0214 	add.w	r2, r3, #20
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800520a:	330c      	adds	r3, #12
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	e77f      	b.n	8005110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3304      	adds	r3, #4
 8005214:	4618      	mov	r0, r3
 8005216:	f7fc fe4f 	bl	8001eb8 <_ZN13STM32Hardware4timeEv>
 800521a:	4602      	mov	r2, r0
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	f241 3288 	movw	r2, #5000	; 0x1388
 8005224:	4293      	cmp	r3, r2
 8005226:	bf8c      	ite	hi
 8005228:	2301      	movhi	r3, #1
 800522a:	2300      	movls	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	f43f af6e 	beq.w	8005110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
          configured_ = false;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800523a:	2200      	movs	r2, #0
 800523c:	701a      	strb	r2, [r3, #0]
          return SPIN_TIMEOUT;
 800523e:	f06f 0301 	mvn.w	r3, #1
 8005242:	e193      	b.n	800556c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4ba>
      else if (mode_ == MODE_PROTOCOL_VER)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800524a:	330c      	adds	r3, #12
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d122      	bne.n	8005298 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1e6>
        if (data == PROTOCOL_VER)
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2bfe      	cmp	r3, #254	; 0xfe
 8005256:	d10b      	bne.n	8005270 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1be>
          mode_++;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800525e:	330c      	adds	r3, #12
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800526a:	330c      	adds	r3, #12
 800526c:	601a      	str	r2, [r3, #0]
 800526e:	e74f      	b.n	8005110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005276:	330c      	adds	r3, #12
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]
          if (configured_ == false)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	f083 0301 	eor.w	r3, r3, #1
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	f43f af40 	beq.w	8005110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 f96f 	bl	8005574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 8005296:	e73b      	b.n	8005110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800529e:	330c      	adds	r3, #12
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d11d      	bne.n	80052e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x230>
        bytes_ = data;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80052ac:	3310      	adds	r3, #16
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	601a      	str	r2, [r3, #0]
        index_ = 0;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80052b8:	3318      	adds	r3, #24
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]
        mode_++;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80052c4:	330c      	adds	r3, #12
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80052d0:	330c      	adds	r3, #12
 80052d2:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte for calculating size checksum */
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80052da:	331c      	adds	r3, #28
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	e716      	b.n	8005110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80052e8:	330c      	adds	r3, #12
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b03      	cmp	r3, #3
 80052ee:	d118      	bne.n	8005322 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x270>
        bytes_ += data << 8;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80052f6:	3310      	adds	r3, #16
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	021b      	lsls	r3, r3, #8
 80052fe:	441a      	add	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005306:	3310      	adds	r3, #16
 8005308:	601a      	str	r2, [r3, #0]
        mode_++;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005310:	330c      	adds	r3, #12
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800531c:	330c      	adds	r3, #12
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	e6f6      	b.n	8005110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005328:	330c      	adds	r3, #12
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b04      	cmp	r3, #4
 800532e:	d11e      	bne.n	800536e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2bc>
        if ((checksum_ % 256) == 255)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005336:	331c      	adds	r3, #28
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	425a      	negs	r2, r3
 800533c:	b2db      	uxtb	r3, r3
 800533e:	b2d2      	uxtb	r2, r2
 8005340:	bf58      	it	pl
 8005342:	4253      	negpl	r3, r2
 8005344:	2bff      	cmp	r3, #255	; 0xff
 8005346:	d10b      	bne.n	8005360 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2ae>
          mode_++;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800534e:	330c      	adds	r3, #12
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800535a:	330c      	adds	r3, #12
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	e6d7      	b.n	8005110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005366:	330c      	adds	r3, #12
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	e6d0      	b.n	8005110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005374:	330c      	adds	r3, #12
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b05      	cmp	r3, #5
 800537a:	d117      	bne.n	80053ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2fa>
        topic_ = data;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005382:	3314      	adds	r3, #20
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	601a      	str	r2, [r3, #0]
        mode_++;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800538e:	330c      	adds	r3, #12
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800539a:	330c      	adds	r3, #12
 800539c:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte included in checksum */
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80053a4:	331c      	adds	r3, #28
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	e6b1      	b.n	8005110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80053b2:	330c      	adds	r3, #12
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b06      	cmp	r3, #6
 80053b8:	d121      	bne.n	80053fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x34c>
        topic_ += data << 8;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80053c0:	3314      	adds	r3, #20
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	441a      	add	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80053d0:	3314      	adds	r3, #20
 80053d2:	601a      	str	r2, [r3, #0]
        mode_ = MODE_MESSAGE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80053da:	330c      	adds	r3, #12
 80053dc:	2207      	movs	r2, #7
 80053de:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80053e6:	3310      	adds	r3, #16
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f47f ae90 	bne.w	8005110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
          mode_ = MODE_MSG_CHECKSUM;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80053f6:	330c      	adds	r3, #12
 80053f8:	2208      	movs	r2, #8
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	e688      	b.n	8005110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005404:	330c      	adds	r3, #12
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b08      	cmp	r3, #8
 800540a:	f47f ae81 	bne.w	8005110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005414:	330c      	adds	r3, #12
 8005416:	2200      	movs	r2, #0
 8005418:	601a      	str	r2, [r3, #0]
        if ((checksum_ % 256) == 255)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005420:	331c      	adds	r3, #28
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	425a      	negs	r2, r3
 8005426:	b2db      	uxtb	r3, r3
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	bf58      	it	pl
 800542c:	4253      	negpl	r3, r2
 800542e:	2bff      	cmp	r3, #255	; 0xff
 8005430:	f47f ae6e 	bne.w	8005110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 800543a:	3314      	adds	r3, #20
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d114      	bne.n	800546c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3ba>
            requestSyncTime();
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f896 	bl	8005574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f8b1 	bl	80055b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005454:	3304      	adds	r3, #4
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	601a      	str	r2, [r3, #0]
            last_sync_receive_time = c_time;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005460:	3308      	adds	r3, #8
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	601a      	str	r2, [r3, #0]
            return SPIN_ERR;
 8005466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800546a:	e07f      	b.n	800556c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4ba>
          else if (topic_ == TopicInfo::ID_TIME)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005472:	3314      	adds	r3, #20
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2b0a      	cmp	r3, #10
 8005478:	d107      	bne.n	800548a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3d8>
            syncTime(message_in);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8005480:	4619      	mov	r1, r3
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f974 	bl	8005770 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 8005488:	e642      	b.n	8005110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005490:	3314      	adds	r3, #20
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b06      	cmp	r3, #6
 8005496:	d111      	bne.n	80054bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x40a>
            req_param_resp.deserialize(message_in);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800549e:	3314      	adds	r3, #20
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	f602 0224 	addw	r2, r2, #2084	; 0x824
 80054a6:	4611      	mov	r1, r2
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fc faee 	bl	8001a8a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80054b4:	3310      	adds	r3, #16
 80054b6:	2201      	movs	r2, #1
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	e629      	b.n	8005110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80054c2:	3314      	adds	r3, #20
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b0b      	cmp	r3, #11
 80054c8:	d105      	bne.n	80054d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x424>
            configured_ = false;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80054d0:	2200      	movs	r2, #0
 80054d2:	701a      	strb	r2, [r3, #0]
 80054d4:	e61c      	b.n	8005110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
            if (subscribers[topic_ - 100])
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80054dc:	3314      	adds	r3, #20
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80054ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f43f ae0e 	beq.w	8005110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
              subscribers[topic_ - 100]->callback(message_in);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 80054fa:	3314      	adds	r3, #20
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8005508:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f503 5387 	add.w	r3, r3, #4320	; 0x10e0
 8005512:	3314      	adds	r3, #20
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8005520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	f602 0224 	addw	r2, r2, #2084	; 0x824
 800552e:	4611      	mov	r1, r2
 8005530:	4798      	blx	r3
    while (true)
 8005532:	e5ed      	b.n	8005110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x5e>
    	  break;
 8005534:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d013      	beq.n	800556a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4b8>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005548:	3304      	adds	r3, #4
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005554:	4293      	cmp	r3, r2
 8005556:	d908      	bls.n	800556a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4b8>
      requestSyncTime();
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f80b 	bl	8005574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005564:	3304      	adds	r3, #4
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	601a      	str	r2, [r3, #0]
    return SPIN_OK;
 800556a:	2300      	movs	r3, #0
  }
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:
  void requestSyncTime()
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800557c:	f107 030c 	add.w	r3, r7, #12
 8005580:	4618      	mov	r0, r3
 8005582:	f7fb fde9 	bl	8001158 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f107 020c 	add.w	r2, r7, #12
 8005590:	210a      	movs	r1, #10
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	4798      	blx	r3
    rt_time = hardware_.time();
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	3304      	adds	r3, #4
 800559a:	4618      	mov	r0, r3
 800559c:	f7fc fc8c 	bl	8001eb8 <_ZN13STM32Hardware4timeEv>
 80055a0:	4602      	mov	r2, r0
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  }
 80055a8:	bf00      	nop
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80055b0:	b590      	push	{r4, r7, lr}
 80055b2:	b08b      	sub	sp, #44	; 0x2c
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80055b8:	f107 030c 	add.w	r3, r7, #12
 80055bc:	4618      	mov	r0, r3
 80055be:	f7fb febb 	bl	8001338 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80055c2:	2300      	movs	r3, #0
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	2b18      	cmp	r3, #24
 80055ca:	dc63      	bgt.n	8005694 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d056      	beq.n	800568c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	4413      	add	r3, r2
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	6859      	ldr	r1, [r3, #4]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3308      	adds	r3, #8
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4608      	mov	r0, r1
 800562c:	4798      	blx	r3
 800562e:	4603      	mov	r3, r0
 8005630:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	6859      	ldr	r1, [r3, #4]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	330c      	adds	r3, #12
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4608      	mov	r0, r1
 800565a:	4798      	blx	r3
 800565c:	4603      	mov	r3, r0
 800565e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8005660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005664:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681c      	ldr	r4, [r3, #0]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	4618      	mov	r0, r3
 800567c:	f7fc fbbd 	bl	8001dfa <_ZN3ros9Publisher15getEndpointTypeEv>
 8005680:	4601      	mov	r1, r0
 8005682:	f107 030c 	add.w	r3, r7, #12
 8005686:	461a      	mov	r2, r3
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	3301      	adds	r3, #1
 8005690:	627b      	str	r3, [r7, #36]	; 0x24
 8005692:	e798      	b.n	80055c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005694:	2300      	movs	r3, #0
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	2b18      	cmp	r3, #24
 800569c:	dc5f      	bgt.n	800575e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a2:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80056a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d053      	beq.n	8005756 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056b2:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80056b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	b29b      	uxth	r3, r3
 80056be:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c4:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80056c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d4:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80056d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e0:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80056e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3308      	adds	r3, #8
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4608      	mov	r0, r1
 80056f0:	4798      	blx	r3
 80056f2:	4603      	mov	r3, r0
 80056f4:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fa:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80056fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005706:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800570a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	330c      	adds	r3, #12
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4608      	mov	r0, r1
 8005716:	4798      	blx	r3
 8005718:	4603      	mov	r3, r0
 800571a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800571c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005720:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681c      	ldr	r4, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572c:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8005730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005738:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800573c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3304      	adds	r3, #4
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4608      	mov	r0, r1
 8005748:	4798      	blx	r3
 800574a:	4601      	mov	r1, r0
 800574c:	f107 030c 	add.w	r3, r7, #12
 8005750:	461a      	mov	r2, r3
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	3301      	adds	r3, #1
 800575a:	627b      	str	r3, [r7, #36]	; 0x24
 800575c:	e79c      	b.n	8005698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005764:	2201      	movs	r2, #1
 8005766:	701a      	strb	r2, [r3, #0]
  }
 8005768:	bf00      	nop
 800576a:	372c      	adds	r7, #44	; 0x2c
 800576c:	46bd      	mov	sp, r7
 800576e:	bd90      	pop	{r4, r7, pc}

08005770 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800577a:	f107 0308 	add.w	r3, r7, #8
 800577e:	4618      	mov	r0, r3
 8005780:	f7fb fcea 	bl	8001158 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	3304      	adds	r3, #4
 8005788:	4618      	mov	r0, r3
 800578a:	f7fc fb95 	bl	8001eb8 <_ZN13STM32Hardware4timeEv>
 800578e:	4602      	mov	r2, r0
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800579a:	f107 0308 	add.w	r3, r7, #8
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7fb fd49 	bl	8001238 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	4916      	ldr	r1, [pc, #88]	; (8005804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 80057ac:	fba1 1303 	umull	r1, r3, r1, r3
 80057b0:	099b      	lsrs	r3, r3, #6
 80057b2:	4413      	add	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80057b6:	6939      	ldr	r1, [r7, #16]
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	4b12      	ldr	r3, [pc, #72]	; (8005804 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 80057bc:	fba3 0302 	umull	r0, r3, r3, r2
 80057c0:	099b      	lsrs	r3, r3, #6
 80057c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80057c6:	fb00 f303 	mul.w	r3, r0, r3
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	4a0e      	ldr	r2, [pc, #56]	; (8005808 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 80057ce:	fb02 f303 	mul.w	r3, r2, r3
 80057d2:	440b      	add	r3, r1
 80057d4:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80057d6:	f107 0308 	add.w	r3, r7, #8
 80057da:	3304      	adds	r3, #4
 80057dc:	4619      	mov	r1, r3
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f8a8 	bl	8005934 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3304      	adds	r3, #4
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fc fb65 	bl	8001eb8 <_ZN13STM32Hardware4timeEv>
 80057ee:	4602      	mov	r2, r0
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80057f6:	3308      	adds	r3, #8
 80057f8:	601a      	str	r2, [r3, #0]
  }
 80057fa:	bf00      	nop
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	10624dd3 	.word	0x10624dd3
 8005808:	000f4240 	.word	0x000f4240

0800580c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b63      	cmp	r3, #99	; 0x63
 800581c:	dd0a      	ble.n	8005834 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x28>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	f083 0301 	eor.w	r3, r3, #1
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x28>
      return 0;
 8005830:	2300      	movs	r3, #0
 8005832:	e078      	b.n	8005926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	f602 4224 	addw	r2, r2, #3108	; 0xc24
 8005840:	3207      	adds	r2, #7
 8005842:	4611      	mov	r1, r2
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	4798      	blx	r3
 8005848:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	22ff      	movs	r2, #255	; 0xff
 800584e:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24
    message_out[1] = PROTOCOL_VER;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	22fe      	movs	r2, #254	; 0xfe
 8005856:	f883 2c25 	strb.w	r2, [r3, #3109]	; 0xc25
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	b2da      	uxtb	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f883 2c26 	strb.w	r2, [r3, #3110]	; 0xc26
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	b29b      	uxth	r3, r3
 8005868:	121b      	asrs	r3, r3, #8
 800586a:	b2da      	uxtb	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f883 2c27 	strb.w	r2, [r3, #3111]	; 0xc27
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f893 2c26 	ldrb.w	r2, [r3, #3110]	; 0xc26
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f893 3c27 	ldrb.w	r3, [r3, #3111]	; 0xc27
 800587e:	4413      	add	r3, r2
 8005880:	b2db      	uxtb	r3, r3
 8005882:	43db      	mvns	r3, r3
 8005884:	b2da      	uxtb	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	b2da      	uxtb	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f883 2c29 	strb.w	r2, [r3, #3113]	; 0xc29
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	b21b      	sxth	r3, r3
 800589a:	121b      	asrs	r3, r3, #8
 800589c:	b2da      	uxtb	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f883 2c2a 	strb.w	r2, [r3, #3114]	; 0xc2a

    /* calculate checksum */
    int chk = 0;
 80058a4:	2300      	movs	r3, #0
 80058a6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80058a8:	2305      	movs	r3, #5
 80058aa:	61bb      	str	r3, [r7, #24]
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	3307      	adds	r3, #7
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	da0d      	bge.n	80058d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xc6>
      chk += message_out[i];
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	4413      	add	r3, r2
 80058bc:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	4413      	add	r3, r2
 80058c8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	3301      	adds	r3, #1
 80058ce:	61bb      	str	r3, [r7, #24]
 80058d0:	e7ec      	b.n	80058ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa0>
    l += 7;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	3307      	adds	r3, #7
 80058d6:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	425a      	negs	r2, r3
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	bf58      	it	pl
 80058e2:	4253      	negpl	r3, r2
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	1c59      	adds	r1, r3, #1
 80058ea:	6179      	str	r1, [r7, #20]
 80058ec:	43d2      	mvns	r2, r2
 80058ee:	b2d1      	uxtb	r1, r2
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	460a      	mov	r2, r1
 80058f6:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24

    if (l <= OUTPUT_SIZE)
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005900:	dc0b      	bgt.n	800591a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write_stm32hw(message_out, l);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	1d18      	adds	r0, r3, #4
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	b292      	uxth	r2, r2
 8005910:	4619      	mov	r1, r3
 8005912:	f7fc fabd 	bl	8001e90 <_ZN13STM32Hardware13write_stm32hwEPht>
      return l;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	e005      	b.n	8005926 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800591a:	4905      	ldr	r1, [pc, #20]	; (8005930 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x124>)
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 f83f 	bl	80059a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8005922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8005926:	4618      	mov	r0, r3
 8005928:	3720      	adds	r7, #32
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	08027b6c 	.word	0x08027b6c

08005934 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	3304      	adds	r3, #4
 8005942:	4618      	mov	r0, r3
 8005944:	f7fc fab8 	bl	8001eb8 <_ZN13STM32Hardware4timeEv>
 8005948:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4910      	ldr	r1, [pc, #64]	; (8005994 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x60>)
 8005952:	fba1 1303 	umull	r1, r3, r1, r3
 8005956:	099b      	lsrs	r3, r3, #6
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	1e5a      	subs	r2, r3, #1
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6859      	ldr	r1, [r3, #4]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x60>)
 800596a:	fba3 0302 	umull	r0, r3, r3, r2
 800596e:	099b      	lsrs	r3, r3, #6
 8005970:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005974:	fb00 f303 	mul.w	r3, r0, r3
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	4a07      	ldr	r2, [pc, #28]	; (8005998 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x64>)
 800597c:	fb02 f303 	mul.w	r3, r2, r3
 8005980:	1aca      	subs	r2, r1, r3
 8005982:	4b06      	ldr	r3, [pc, #24]	; (800599c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x68>)
 8005984:	4413      	add	r3, r2
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	f8c2 381c 	str.w	r3, [r2, #2076]	; 0x81c
  }
 800598c:	bf00      	nop
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	10624dd3 	.word	0x10624dd3
 8005998:	000f4240 	.word	0x000f4240
 800599c:	3b9aca00 	.word	0x3b9aca00

080059a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	2103      	movs	r1, #3
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f804 	bl	80059bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 80059b4:	bf00      	nop
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 80059bc:	b580      	push	{r7, lr}
 80059be:	b088      	sub	sp, #32
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	460b      	mov	r3, r1
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80059ca:	f107 0314 	add.w	r3, r7, #20
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fb fe76 	bl	80016c0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80059d4:	7afb      	ldrb	r3, [r7, #11]
 80059d6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f107 0214 	add.w	r2, r7, #20
 80059e6:	2107      	movs	r1, #7
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	4798      	blx	r3
  }
 80059ec:	bf00      	nop
 80059ee:	3720      	adds	r7, #32
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <_ZN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedE17OdometryPublisherE8callbackEPh>:

  virtual void callback(unsigned char* data)
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	330c      	adds	r3, #12
 8005a02:	6839      	ldr	r1, [r7, #0]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fe fb1a 	bl	800403e <_ZN13geometry_msgs25PoseWithCovarianceStamped11deserializeEPh>
    (obj_->*cb_)(msg);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 8005a16:	1052      	asrs	r2, r2, #1
 8005a18:	1898      	adds	r0, r3, r2
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d103      	bne.n	8005a30 <_ZN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedE17OdometryPublisherE8callbackEPh+0x3c>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a2e:	e00d      	b.n	8005a4c <_ZN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedE17OdometryPublisherE8callbackEPh+0x58>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 8005a3c:	1052      	asrs	r2, r2, #1
 8005a3e:	4413      	add	r3, r2
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
 8005a48:	4413      	add	r3, r2
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	320c      	adds	r2, #12
 8005a50:	4611      	mov	r1, r2
 8005a52:	4798      	blx	r3
  }
 8005a54:	bf00      	nop
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <_ZN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedE17OdometryPublisherE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
  }
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <_ZN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedE17OdometryPublisherE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b082      	sub	sp, #8
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	330c      	adds	r3, #12
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe fb00 	bl	8004088 <_ZN13geometry_msgs25PoseWithCovarianceStamped7getTypeEv>
 8005a88:	4603      	mov	r3, r0
  }
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <_ZN3ros10SubscriberIN13geometry_msgs25PoseWithCovarianceStampedE17OdometryPublisherE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b082      	sub	sp, #8
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	330c      	adds	r3, #12
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fe fb00 	bl	80040a4 <_ZN13geometry_msgs25PoseWithCovarianceStamped6getMD5Ev>
 8005aa4:	4603      	mov	r3, r0
  }
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
    return configured_;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005abc:	781b      	ldrb	r3, [r3, #0]
  };
 8005abe:	4618      	mov	r0, r3
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <_ZN3ros10SubscriberIN13geometry_msgs5TwistE16CmdVelSubscriberE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b082      	sub	sp, #8
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
 8005ad2:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	330c      	adds	r3, #12
 8005ad8:	6839      	ldr	r1, [r7, #0]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fc ff55 	bl	800298a <_ZN13geometry_msgs5Twist11deserializeEPh>
    (obj_->*cb_)(msg);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005ae8:	1052      	asrs	r2, r2, #1
 8005aea:	1898      	adds	r0, r3, r2
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d102      	bne.n	8005afe <_ZN3ros10SubscriberIN13geometry_msgs5TwistE16CmdVelSubscriberE8callbackEPh+0x34>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afc:	e00a      	b.n	8005b14 <_ZN3ros10SubscriberIN13geometry_msgs5TwistE16CmdVelSubscriberE8callbackEPh+0x4a>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b06:	1052      	asrs	r2, r2, #1
 8005b08:	4413      	add	r3, r2
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b10:	4413      	add	r3, r2
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	320c      	adds	r2, #12
 8005b18:	4611      	mov	r1, r2
 8005b1a:	4798      	blx	r3
  }
 8005b1c:	bf00      	nop
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <_ZN3ros10SubscriberIN13geometry_msgs5TwistE16CmdVelSubscriberE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  }
 8005b30:	4618      	mov	r0, r3
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <_ZN3ros10SubscriberIN13geometry_msgs5TwistE16CmdVelSubscriberE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	330c      	adds	r3, #12
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7fc ff43 	bl	80029d4 <_ZN13geometry_msgs5Twist7getTypeEv>
 8005b4e:	4603      	mov	r3, r0
  }
 8005b50:	4618      	mov	r0, r3
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <_ZN3ros10SubscriberIN13geometry_msgs5TwistE16CmdVelSubscriberE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	330c      	adds	r3, #12
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fc ff43 	bl	80029f0 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8005b6a:	4603      	mov	r3, r0
  }
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <_ZN11SetUpHelperC1Ev>:

I2C_HandleTypeDef *SetUpHelper::mem_out = nullptr;
SemaphoreHandle_t SetUpHelper::semaphore;
bool SetUpHelper::is_default = false;
bool SetUpHelper::reset_config = false;
SetUpHelper::SetUpHelper() {
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	4a04      	ldr	r2, [pc, #16]	; (8005b90 <_ZN11SetUpHelperC1Ev+0x1c>)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	0802bc1c 	.word	0x0802bc1c

08005b94 <_ZN11SetUpHelperD1Ev>:

SetUpHelper::~SetUpHelper() {
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	4a04      	ldr	r2, [pc, #16]	; (8005bb0 <_ZN11SetUpHelperD1Ev+0x1c>)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	0802bc1c 	.word	0x0802bc1c

08005bb4 <_ZN11SetUpHelperD0Ev>:
SetUpHelper::~SetUpHelper() {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
}
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff ffe9 	bl	8005b94 <_ZN11SetUpHelperD1Ev>
 8005bc2:	f640 015c 	movw	r1, #2140	; 0x85c
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f01e fcef 	bl	80245aa <_ZdlPvj>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
	...

08005bd8 <_ZN11SetUpHelper11memory_initEP19__I2C_HandleTypeDef>:

void SetUpHelper::memory_init(I2C_HandleTypeDef *main_hi2c1)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
	SetUpHelper::mem_out = main_hi2c1;
 8005be2:	4a0d      	ldr	r2, [pc, #52]	; (8005c18 <_ZN11SetUpHelper11memory_initEP19__I2C_HandleTypeDef+0x40>)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	6013      	str	r3, [r2, #0]
	SetUpHelper::semaphore = xSemaphoreCreateMutex();
 8005be8:	2001      	movs	r0, #1
 8005bea:	f00a f9c4 	bl	800ff76 <xQueueCreateMutex>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	4b0a      	ldr	r3, [pc, #40]	; (8005c1c <_ZN11SetUpHelper11memory_initEP19__I2C_HandleTypeDef+0x44>)
 8005bf2:	601a      	str	r2, [r3, #0]
	set_default(false);
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fa84 	bl	8006104 <_ZN11SetUpHelper11set_defaultEb>
	osDelay(100);
 8005bfc:	2064      	movs	r0, #100	; 0x64
 8005bfe:	f009 fc7b 	bl	800f4f8 <osDelay>

	read_all();
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fb42 	bl	800628c <_ZN11SetUpHelper8read_allEv>
	osDelay(100);
 8005c08:	2064      	movs	r0, #100	; 0x64
 8005c0a:	f009 fc75 	bl	800f4f8 <osDelay>
}
 8005c0e:	bf00      	nop
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	200080a8 	.word	0x200080a8
 8005c1c:	200080ac 	.word	0x200080ac

08005c20 <_ZN11SetUpHelper18wait_for_readinessEv>:

void SetUpHelper::wait_for_readiness()
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	for(;;)
	{
		status = HAL_I2C_IsDeviceReady(SetUpHelper::mem_out, DEVICE_ADDRESS, 1, HAL_MAX_DELAY);
 8005c28:	4b10      	ldr	r3, [pc, #64]	; (8005c6c <_ZN11SetUpHelper18wait_for_readinessEv+0x4c>)
 8005c2a:	6818      	ldr	r0, [r3, #0]
 8005c2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c30:	2201      	movs	r2, #1
 8005c32:	21a0      	movs	r1, #160	; 0xa0
 8005c34:	f004 fd76 	bl	800a724 <HAL_I2C_IsDeviceReady>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	73fb      	strb	r3, [r7, #15]
		if(status == HAL_OK)
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d106      	bne.n	8005c50 <_ZN11SetUpHelper18wait_for_readinessEv+0x30>
		{
			HAL_GPIO_WritePin(GPIO_EEPROM_LED, PIN_EEPROM_LED, GPIO_PIN_SET);
 8005c42:	2201      	movs	r2, #1
 8005c44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c48:	4809      	ldr	r0, [pc, #36]	; (8005c70 <_ZN11SetUpHelper18wait_for_readinessEv+0x50>)
 8005c4a:	f004 f8bb 	bl	8009dc4 <HAL_GPIO_WritePin>
			break;
 8005c4e:	e009      	b.n	8005c64 <_ZN11SetUpHelper18wait_for_readinessEv+0x44>
		} else
		{
			HAL_GPIO_WritePin(GPIO_EEPROM_LED, PIN_EEPROM_LED, GPIO_PIN_RESET);
 8005c50:	2200      	movs	r2, #0
 8005c52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c56:	4806      	ldr	r0, [pc, #24]	; (8005c70 <_ZN11SetUpHelper18wait_for_readinessEv+0x50>)
 8005c58:	f004 f8b4 	bl	8009dc4 <HAL_GPIO_WritePin>
		}
		osDelay(10);
 8005c5c:	200a      	movs	r0, #10
 8005c5e:	f009 fc4b 	bl	800f4f8 <osDelay>
		status = HAL_I2C_IsDeviceReady(SetUpHelper::mem_out, DEVICE_ADDRESS, 1, HAL_MAX_DELAY);
 8005c62:	e7e1      	b.n	8005c28 <_ZN11SetUpHelper18wait_for_readinessEv+0x8>
	}
}
 8005c64:	bf00      	nop
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	200080a8 	.word	0x200080a8
 8005c70:	40020c00 	.word	0x40020c00

08005c74 <_ZN11SetUpHelper19set_default_networkEv>:

void SetUpHelper::set_default_network()
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
	uint8_t ip[] = DEFAULT_ROBOT_IP_ADRESS;
 8005c7c:	4b1c      	ldr	r3, [pc, #112]	; (8005cf0 <_ZN11SetUpHelper19set_default_networkEv+0x7c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	617b      	str	r3, [r7, #20]
	uint8_t mask[] = DEFAULT_NETWORK_MASK;
 8005c82:	4b1c      	ldr	r3, [pc, #112]	; (8005cf4 <_ZN11SetUpHelper19set_default_networkEv+0x80>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	613b      	str	r3, [r7, #16]
	uint8_t gw[] = DEFAULT_GATEAWAY;
 8005c88:	4b1b      	ldr	r3, [pc, #108]	; (8005cf8 <_ZN11SetUpHelper19set_default_networkEv+0x84>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	60fb      	str	r3, [r7, #12]
	uint8_t sn_ip[] = DEFAULT_ROS_SERIALNODE_IP_ADRESS;
 8005c8e:	4b1b      	ldr	r3, [pc, #108]	; (8005cfc <_ZN11SetUpHelper19set_default_networkEv+0x88>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60bb      	str	r3, [r7, #8]

	PUT_IP(LOCAL_IP_OFFSET, ip);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3304      	adds	r3, #4
 8005c98:	3306      	adds	r3, #6
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	601a      	str	r2, [r3, #0]
	PUT_IP(NETWORK_MASK_OFFSET, mask);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	330a      	adds	r3, #10
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	601a      	str	r2, [r3, #0]
	PUT_IP(GATEAWAY_OFFSET, gw);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3304      	adds	r3, #4
 8005cac:	330e      	adds	r3, #14
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	601a      	str	r2, [r3, #0]
	PUT_NUM(ROS_CLIENT_PORT_OFFSET, DEFAULT_ROS_CLIENT_PORT);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2288      	movs	r2, #136	; 0x88
 8005cb6:	75da      	strb	r2, [r3, #23]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	222a      	movs	r2, #42	; 0x2a
 8005cbc:	761a      	strb	r2, [r3, #24]
	PUT_NUM(SET_UP_SERVER_PORT_OFFSET, DEFAULT_SETUP_SERVER_PORT);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	22f7      	movs	r2, #247	; 0xf7
 8005cc2:	765a      	strb	r2, [r3, #25]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	222c      	movs	r2, #44	; 0x2c
 8005cc8:	769a      	strb	r2, [r3, #26]
	PUT_IP(SERIALNODE_IP_OFFSET, sn_ip);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	3317      	adds	r3, #23
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	601a      	str	r2, [r3, #0]
	PUT_NUM(SERIALNODE_PORT_OFFSET, DEFAULT_ROS_SERIALNODE_PORT);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2293      	movs	r2, #147	; 0x93
 8005cd8:	77da      	strb	r2, [r3, #31]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	222c      	movs	r2, #44	; 0x2c
 8005cde:	f883 2020 	strb.w	r2, [r3, #32]
}
 8005ce2:	bf00      	nop
 8005ce4:	371c      	adds	r7, #28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	08027ba8 	.word	0x08027ba8
 8005cf4:	08027bac 	.word	0x08027bac
 8005cf8:	08027bb0 	.word	0x08027bb0
 8005cfc:	08027bb4 	.word	0x08027bb4

08005d00 <_ZN11SetUpHelper26set_default_robot_geometryEv>:

void SetUpHelper::set_default_robot_geometry()
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
	uint16_t radius = std::round(DEFAULT_RADIUS * 1000.0);
 8005d08:	2364      	movs	r3, #100	; 0x64
 8005d0a:	82fb      	strh	r3, [r7, #22]
	uint16_t separation = std::round(DEFAULT_WHEEL_SEPARATION * 1000.0);
 8005d0c:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8005d10:	82bb      	strh	r3, [r7, #20]
	uint16_t vel = std::round(DEFAULT_MAX_LIN_SPEED * 1000.0);
 8005d12:	f240 736c 	movw	r3, #1900	; 0x76c
 8005d16:	827b      	strh	r3, [r7, #18]
	uint16_t max_ang_vel = std::round(DEFAULT_ANG_VEL_MAX * 1000.0);
 8005d18:	f640 63d8 	movw	r3, #3800	; 0xed8
 8005d1c:	823b      	strh	r3, [r7, #16]
	uint16_t rad = std::round(DEFAULT_RAD_PER_TICK * 100000.0);
 8005d1e:	f240 63d1 	movw	r3, #1745	; 0x6d1
 8005d22:	81fb      	strh	r3, [r7, #14]
	uint16_t pwd = DEFAULT_MAX_PWD_ALLOWED;
 8005d24:	23ff      	movs	r3, #255	; 0xff
 8005d26:	81bb      	strh	r3, [r7, #12]

	PUT_NUM(WHEEL_RADIUS_OFFSET, radius);
 8005d28:	8afb      	ldrh	r3, [r7, #22]
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005d32:	8afb      	ldrh	r3, [r7, #22]
 8005d34:	121b      	asrs	r3, r3, #8
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	PUT_NUM(WHEEL_SEPARATION_OFFSET, separation);
 8005d3e:	8abb      	ldrh	r3, [r7, #20]
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8005d48:	8abb      	ldrh	r3, [r7, #20]
 8005d4a:	121b      	asrs	r3, r3, #8
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	PUT_NUM(MAX_LIN_VEL_OFFSET, vel);
 8005d54:	8a7b      	ldrh	r3, [r7, #18]
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8005d5e:	8a7b      	ldrh	r3, [r7, #18]
 8005d60:	121b      	asrs	r3, r3, #8
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	PUT_NUM(MAX_ANG_VEL_OFFSET, max_ang_vel);
 8005d6a:	8a3b      	ldrh	r3, [r7, #16]
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8005d74:	8a3b      	ldrh	r3, [r7, #16]
 8005d76:	121b      	asrs	r3, r3, #8
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	PUT_NUM(RAD_PER_TICK_OFFSET, rad);
 8005d80:	89fb      	ldrh	r3, [r7, #14]
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005d8a:	89fb      	ldrh	r3, [r7, #14]
 8005d8c:	121b      	asrs	r3, r3, #8
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	PUT_NUM(MAX_PWD_ALLOWED_OFFSET, pwd);
 8005d96:	89bb      	ldrh	r3, [r7, #12]
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8005da0:	89bb      	ldrh	r3, [r7, #12]
 8005da2:	121b      	asrs	r3, r3, #8
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 8005dac:	bf00      	nop
 8005dae:	371c      	adds	r7, #28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <_ZN11SetUpHelper23set_default_topics_nameEv>:

void SetUpHelper::set_default_topics_name()
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08e      	sub	sp, #56	; 0x38
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
	uint16_t offset = TOPICS_OFFSET;
 8005dc0:	2328      	movs	r3, #40	; 0x28
 8005dc2:	86fb      	strh	r3, [r7, #54]	; 0x36

	char cmd_vel[] = DEFAULT_CMDVEL_TOPIC;
 8005dc4:	4a56      	ldr	r2, [pc, #344]	; (8005f20 <_ZN11SetUpHelper23set_default_topics_nameEv+0x168>)
 8005dc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005dca:	ca07      	ldmia	r2, {r0, r1, r2}
 8005dcc:	c303      	stmia	r3!, {r0, r1}
 8005dce:	701a      	strb	r2, [r3, #0]
	char odom[] = DEFAULT_ODOMETRY_TOPIC;
 8005dd0:	4a54      	ldr	r2, [pc, #336]	; (8005f24 <_ZN11SetUpHelper23set_default_topics_nameEv+0x16c>)
 8005dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005dda:	6018      	str	r0, [r3, #0]
 8005ddc:	3304      	adds	r3, #4
 8005dde:	8019      	strh	r1, [r3, #0]
	char base_frame[] = DEFAULT_BASE_FRAME;
 8005de0:	4a51      	ldr	r2, [pc, #324]	; (8005f28 <_ZN11SetUpHelper23set_default_topics_nameEv+0x170>)
 8005de2:	f107 0318 	add.w	r3, r7, #24
 8005de6:	ca07      	ldmia	r2, {r0, r1, r2}
 8005de8:	c303      	stmia	r3!, {r0, r1}
 8005dea:	801a      	strh	r2, [r3, #0]
	char odom_frame[] = DEFAULT_ODOMETRY_FRAME;
 8005dec:	4a4f      	ldr	r2, [pc, #316]	; (8005f2c <_ZN11SetUpHelper23set_default_topics_nameEv+0x174>)
 8005dee:	f107 0310 	add.w	r3, r7, #16
 8005df2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005df6:	6018      	str	r0, [r3, #0]
 8005df8:	3304      	adds	r3, #4
 8005dfa:	7019      	strb	r1, [r3, #0]

	uint8_t topic_size = strlen(cmd_vel);
 8005dfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fa f9e5 	bl	80001d0 <strlen>
 8005e06:	4603      	mov	r3, r0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	73fb      	strb	r3, [r7, #15]
	PUT_TOPIC(offset, cmd_vel, topic_size);
 8005e0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e0e:	4619      	mov	r1, r3
 8005e10:	7bfa      	ldrb	r2, [r7, #15]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	440b      	add	r3, r1
 8005e16:	711a      	strb	r2, [r3, #4]
 8005e18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3304      	adds	r3, #4
 8005e24:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005e26:	4413      	add	r3, r2
 8005e28:	7bfa      	ldrb	r2, [r7, #15]
 8005e2a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f020 fcf7 	bl	8026822 <memcpy>
 8005e34:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	4413      	add	r3, r2
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	86fb      	strh	r3, [r7, #54]	; 0x36

	topic_size = strlen(odom);
 8005e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fa f9c3 	bl	80001d0 <strlen>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	73fb      	strb	r3, [r7, #15]
	PUT_TOPIC(offset, odom, topic_size);
 8005e50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e52:	4619      	mov	r1, r3
 8005e54:	7bfa      	ldrb	r2, [r7, #15]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	440b      	add	r3, r1
 8005e5a:	711a      	strb	r2, [r3, #4]
 8005e5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e5e:	3301      	adds	r3, #1
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3304      	adds	r3, #4
 8005e68:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005e6a:	4413      	add	r3, r2
 8005e6c:	7bfa      	ldrb	r2, [r7, #15]
 8005e6e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005e72:	4618      	mov	r0, r3
 8005e74:	f020 fcd5 	bl	8026822 <memcpy>
 8005e78:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	4413      	add	r3, r2
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	86fb      	strh	r3, [r7, #54]	; 0x36

	topic_size = strlen(base_frame);
 8005e84:	f107 0318 	add.w	r3, r7, #24
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7fa f9a1 	bl	80001d0 <strlen>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	73fb      	strb	r3, [r7, #15]
	PUT_TOPIC(offset, base_frame, topic_size);
 8005e94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e96:	4619      	mov	r1, r3
 8005e98:	7bfa      	ldrb	r2, [r7, #15]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	440b      	add	r3, r1
 8005e9e:	711a      	strb	r2, [r3, #4]
 8005ea0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3304      	adds	r3, #4
 8005eac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005eae:	4413      	add	r3, r2
 8005eb0:	7bfa      	ldrb	r2, [r7, #15]
 8005eb2:	f107 0118 	add.w	r1, r7, #24
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f020 fcb3 	bl	8026822 <memcpy>
 8005ebc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	4413      	add	r3, r2
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	86fb      	strh	r3, [r7, #54]	; 0x36

	topic_size = strlen(odom_frame);
 8005ec8:	f107 0310 	add.w	r3, r7, #16
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7fa f97f 	bl	80001d0 <strlen>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	73fb      	strb	r3, [r7, #15]
	PUT_TOPIC(offset, odom_frame, topic_size);
 8005ed8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005eda:	4619      	mov	r1, r3
 8005edc:	7bfa      	ldrb	r2, [r7, #15]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	440b      	add	r3, r1
 8005ee2:	711a      	strb	r2, [r3, #4]
 8005ee4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005ef2:	4413      	add	r3, r2
 8005ef4:	7bfa      	ldrb	r2, [r7, #15]
 8005ef6:	f107 0110 	add.w	r1, r7, #16
 8005efa:	4618      	mov	r0, r3
 8005efc:	f020 fc91 	bl	8026822 <memcpy>
 8005f00:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	4413      	add	r3, r2
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	86fb      	strh	r3, [r7, #54]	; 0x36

	 msg_length = offset + 1;
 8005f0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f0e:	3301      	adds	r3, #1
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8a3 242e 	strh.w	r2, [r3, #1070]	; 0x42e
}
 8005f18:	bf00      	nop
 8005f1a:	3738      	adds	r7, #56	; 0x38
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	08027bb8 	.word	0x08027bb8
 8005f24:	08027bc4 	.word	0x08027bc4
 8005f28:	08027bcc 	.word	0x08027bcc
 8005f2c:	08027bd8 	.word	0x08027bd8

08005f30 <_ZN11SetUpHelper13calc_checksumEv>:

void SetUpHelper::calc_checksum() {
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint16_t c = 0;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	81fb      	strh	r3, [r7, #14]
  for(uint16_t i = 0; i < (msg_length - 1); i++) {
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	81bb      	strh	r3, [r7, #12]
 8005f40:	89ba      	ldrh	r2, [r7, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8b3 342e 	ldrh.w	r3, [r3, #1070]	; 0x42e
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	da0e      	bge.n	8005f6c <_ZN11SetUpHelper13calc_checksumEv+0x3c>
    c += message_out[i];
 8005f4e:	89bb      	ldrh	r3, [r7, #12]
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	4413      	add	r3, r2
 8005f54:	791b      	ldrb	r3, [r3, #4]
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	89fb      	ldrh	r3, [r7, #14]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	81fb      	strh	r3, [r7, #14]
    c %= 256;
 8005f5e:	89fb      	ldrh	r3, [r7, #14]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	81fb      	strh	r3, [r7, #14]
  for(uint16_t i = 0; i < (msg_length - 1); i++) {
 8005f64:	89bb      	ldrh	r3, [r7, #12]
 8005f66:	3301      	adds	r3, #1
 8005f68:	81bb      	strh	r3, [r7, #12]
 8005f6a:	e7e9      	b.n	8005f40 <_ZN11SetUpHelper13calc_checksumEv+0x10>
  }
  message_out[msg_length - 1] = 255 - c;
 8005f6c:	89fb      	ldrh	r3, [r7, #14]
 8005f6e:	b2da      	uxtb	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8b3 342e 	ldrh.w	r3, [r3, #1070]	; 0x42e
 8005f76:	3b01      	subs	r3, #1
 8005f78:	43d2      	mvns	r2, r2
 8005f7a:	b2d1      	uxtb	r1, r2
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	4413      	add	r3, r2
 8005f80:	460a      	mov	r2, r1
 8005f82:	711a      	strb	r2, [r3, #4]
}
 8005f84:	bf00      	nop
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <_ZN11SetUpHelper14check_checksumEPht>:
bool SetUpHelper::check_checksum(uint8_t *buff, uint16_t size) {
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	80fb      	strh	r3, [r7, #6]
  uint16_t c = 0;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	82fb      	strh	r3, [r7, #22]
  for(uint16_t i = 0; i < size; i++) {
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	82bb      	strh	r3, [r7, #20]
 8005fa6:	8aba      	ldrh	r2, [r7, #20]
 8005fa8:	88fb      	ldrh	r3, [r7, #6]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d20e      	bcs.n	8005fcc <_ZN11SetUpHelper14check_checksumEPht+0x3c>
    c += buff[i];
 8005fae:	8abb      	ldrh	r3, [r7, #20]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	8afb      	ldrh	r3, [r7, #22]
 8005fba:	4413      	add	r3, r2
 8005fbc:	82fb      	strh	r3, [r7, #22]
    c %= 256;
 8005fbe:	8afb      	ldrh	r3, [r7, #22]
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	82fb      	strh	r3, [r7, #22]
  for(uint16_t i = 0; i < size; i++) {
 8005fc4:	8abb      	ldrh	r3, [r7, #20]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	82bb      	strh	r3, [r7, #20]
 8005fca:	e7ec      	b.n	8005fa6 <_ZN11SetUpHelper14check_checksumEPht+0x16>
  }
  return (c == 255);
 8005fcc:	8afb      	ldrh	r3, [r7, #22]
 8005fce:	2bff      	cmp	r3, #255	; 0xff
 8005fd0:	bf0c      	ite	eq
 8005fd2:	2301      	moveq	r3, #1
 8005fd4:	2300      	movne	r3, #0
 8005fd6:	b2db      	uxtb	r3, r3
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	371c      	adds	r7, #28
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <_ZN11SetUpHelper12memory_writeEv>:

void SetUpHelper::memory_write()
{
 8005fe4:	b590      	push	{r4, r7, lr}
 8005fe6:	b089      	sub	sp, #36	; 0x24
 8005fe8:	af04      	add	r7, sp, #16
 8005fea:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint16_t offset = 0;
 8005fec:	2300      	movs	r3, #0
 8005fee:	81fb      	strh	r3, [r7, #14]
	uint16_t bytes_left = msg_length - offset;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8b3 242e 	ldrh.w	r2, [r3, #1070]	; 0x42e
 8005ff6:	89fb      	ldrh	r3, [r7, #14]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	81bb      	strh	r3, [r7, #12]
	uint8_t size = 0;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	72fb      	strb	r3, [r7, #11]
	while(bytes_left > 0)
 8006000:	89bb      	ldrh	r3, [r7, #12]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d02e      	beq.n	8006064 <_ZN11SetUpHelper12memory_writeEv+0x80>
	{
		size = (bytes_left > 64)? 64 : bytes_left;
 8006006:	89bb      	ldrh	r3, [r7, #12]
 8006008:	2b40      	cmp	r3, #64	; 0x40
 800600a:	bf28      	it	cs
 800600c:	2340      	movcs	r3, #64	; 0x40
 800600e:	b29b      	uxth	r3, r3
 8006010:	72fb      	strb	r3, [r7, #11]
		status = HAL_I2C_Mem_Write(mem_out, DEVICE_ADDRESS, DEFAULT_ADDRESS + offset, I2C_MEMADD_SIZE_16BIT, message_out + offset, size, HAL_MAX_DELAY);
 8006012:	4b16      	ldr	r3, [pc, #88]	; (800606c <_ZN11SetUpHelper12memory_writeEv+0x88>)
 8006014:	6818      	ldr	r0, [r3, #0]
 8006016:	89fb      	ldrh	r3, [r7, #14]
 8006018:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800601c:	b29c      	uxth	r4, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	1d1a      	adds	r2, r3, #4
 8006022:	89fb      	ldrh	r3, [r7, #14]
 8006024:	4413      	add	r3, r2
 8006026:	7afa      	ldrb	r2, [r7, #11]
 8006028:	b292      	uxth	r2, r2
 800602a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800602e:	9102      	str	r1, [sp, #8]
 8006030:	9201      	str	r2, [sp, #4]
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	2310      	movs	r3, #16
 8006036:	4622      	mov	r2, r4
 8006038:	21a0      	movs	r1, #160	; 0xa0
 800603a:	f004 f853 	bl	800a0e4 <HAL_I2C_Mem_Write>
 800603e:	4603      	mov	r3, r0
 8006040:	72bb      	strb	r3, [r7, #10]
		osDelay(1);
 8006042:	2001      	movs	r0, #1
 8006044:	f009 fa58 	bl	800f4f8 <osDelay>
		wait_for_readiness();
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f7ff fde9 	bl	8005c20 <_ZN11SetUpHelper18wait_for_readinessEv>
		offset += size;
 800604e:	7afb      	ldrb	r3, [r7, #11]
 8006050:	b29a      	uxth	r2, r3
 8006052:	89fb      	ldrh	r3, [r7, #14]
 8006054:	4413      	add	r3, r2
 8006056:	81fb      	strh	r3, [r7, #14]
		bytes_left -= size;
 8006058:	7afb      	ldrb	r3, [r7, #11]
 800605a:	b29b      	uxth	r3, r3
 800605c:	89ba      	ldrh	r2, [r7, #12]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	81bb      	strh	r3, [r7, #12]
	while(bytes_left > 0)
 8006062:	e7cd      	b.n	8006000 <_ZN11SetUpHelper12memory_writeEv+0x1c>

	}
}
 8006064:	bf00      	nop
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	bd90      	pop	{r4, r7, pc}
 800606c:	200080a8 	.word	0x200080a8

08006070 <_ZN11SetUpHelper11memory_readEt>:

HAL_StatusTypeDef SetUpHelper::memory_read(uint16_t read_size)
{
 8006070:	b590      	push	{r4, r7, lr}
 8006072:	b089      	sub	sp, #36	; 0x24
 8006074:	af04      	add	r7, sp, #16
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef status;
	uint16_t offset = 0;
 800607c:	2300      	movs	r3, #0
 800607e:	81fb      	strh	r3, [r7, #14]
	uint16_t bytes_left = read_size - offset;
 8006080:	887a      	ldrh	r2, [r7, #2]
 8006082:	89fb      	ldrh	r3, [r7, #14]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	81bb      	strh	r3, [r7, #12]
	uint8_t size = 0;
 8006088:	2300      	movs	r3, #0
 800608a:	72fb      	strb	r3, [r7, #11]
	while(bytes_left > 0)
 800608c:	89bb      	ldrh	r3, [r7, #12]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d030      	beq.n	80060f4 <_ZN11SetUpHelper11memory_readEt+0x84>
	{
		size = (bytes_left > 64)? 64 : bytes_left;
 8006092:	89bb      	ldrh	r3, [r7, #12]
 8006094:	2b40      	cmp	r3, #64	; 0x40
 8006096:	bf28      	it	cs
 8006098:	2340      	movcs	r3, #64	; 0x40
 800609a:	b29b      	uxth	r3, r3
 800609c:	72fb      	strb	r3, [r7, #11]
		wait_for_readiness();
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7ff fdbe 	bl	8005c20 <_ZN11SetUpHelper18wait_for_readinessEv>
		status = HAL_I2C_Mem_Read(mem_out, DEVICE_ADDRESS, DEFAULT_ADDRESS + offset, I2C_MEMADD_SIZE_16BIT, message_out + offset, size, HAL_MAX_DELAY);
 80060a4:	4b16      	ldr	r3, [pc, #88]	; (8006100 <_ZN11SetUpHelper11memory_readEt+0x90>)
 80060a6:	6818      	ldr	r0, [r3, #0]
 80060a8:	89fb      	ldrh	r3, [r7, #14]
 80060aa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80060ae:	b29c      	uxth	r4, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	1d1a      	adds	r2, r3, #4
 80060b4:	89fb      	ldrh	r3, [r7, #14]
 80060b6:	4413      	add	r3, r2
 80060b8:	7afa      	ldrb	r2, [r7, #11]
 80060ba:	b292      	uxth	r2, r2
 80060bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80060c0:	9102      	str	r1, [sp, #8]
 80060c2:	9201      	str	r2, [sp, #4]
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	2310      	movs	r3, #16
 80060c8:	4622      	mov	r2, r4
 80060ca:	21a0      	movs	r1, #160	; 0xa0
 80060cc:	f004 f904 	bl	800a2d8 <HAL_I2C_Mem_Read>
 80060d0:	4603      	mov	r3, r0
 80060d2:	72bb      	strb	r3, [r7, #10]
		if (status != HAL_OK){
 80060d4:	7abb      	ldrb	r3, [r7, #10]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <_ZN11SetUpHelper11memory_readEt+0x6e>
			return status;
 80060da:	7abb      	ldrb	r3, [r7, #10]
 80060dc:	e00b      	b.n	80060f6 <_ZN11SetUpHelper11memory_readEt+0x86>
		}
		offset += size;
 80060de:	7afb      	ldrb	r3, [r7, #11]
 80060e0:	b29a      	uxth	r2, r3
 80060e2:	89fb      	ldrh	r3, [r7, #14]
 80060e4:	4413      	add	r3, r2
 80060e6:	81fb      	strh	r3, [r7, #14]
		bytes_left -= size;
 80060e8:	7afb      	ldrb	r3, [r7, #11]
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	89ba      	ldrh	r2, [r7, #12]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	81bb      	strh	r3, [r7, #12]
	while(bytes_left > 0)
 80060f2:	e7cb      	b.n	800608c <_ZN11SetUpHelper11memory_readEt+0x1c>
	}
	return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd90      	pop	{r4, r7, pc}
 80060fe:	bf00      	nop
 8006100:	200080a8 	.word	0x200080a8

08006104 <_ZN11SetUpHelper11set_defaultEb>:

void SetUpHelper::set_default(bool force)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	460b      	mov	r3, r1
 800610e:	70fb      	strb	r3, [r7, #3]
	if(!SetUpHelper::mem_out){
 8006110:	4b2f      	ldr	r3, [pc, #188]	; (80061d0 <_ZN11SetUpHelper11set_defaultEb+0xcc>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d057      	beq.n	80061c8 <_ZN11SetUpHelper11set_defaultEb+0xc4>
		return;
	}
	if( xSemaphoreTake( SetUpHelper::semaphore, portMAX_DELAY) == pdTRUE )
 8006118:	4b2e      	ldr	r3, [pc, #184]	; (80061d4 <_ZN11SetUpHelper11set_defaultEb+0xd0>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006120:	4618      	mov	r0, r3
 8006122:	f00a fa4f 	bl	80105c4 <xQueueSemaphoreTake>
 8006126:	4603      	mov	r3, r0
 8006128:	2b01      	cmp	r3, #1
 800612a:	bf0c      	ite	eq
 800612c:	2301      	moveq	r3, #1
 800612e:	2300      	movne	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d049      	beq.n	80061ca <_ZN11SetUpHelper11set_defaultEb+0xc6>
	{
		if((force || !is_set())&&!is_default)
 8006136:	78fb      	ldrb	r3, [r7, #3]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d108      	bne.n	800614e <_ZN11SetUpHelper11set_defaultEb+0x4a>
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f84f 	bl	80061e0 <_ZN11SetUpHelper6is_setEv>
 8006142:	4603      	mov	r3, r0
 8006144:	f083 0301 	eor.w	r3, r3, #1
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d008      	beq.n	8006160 <_ZN11SetUpHelper11set_defaultEb+0x5c>
 800614e:	4b22      	ldr	r3, [pc, #136]	; (80061d8 <_ZN11SetUpHelper11set_defaultEb+0xd4>)
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	f083 0301 	eor.w	r3, r3, #1
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <_ZN11SetUpHelper11set_defaultEb+0x5c>
 800615c:	2301      	movs	r3, #1
 800615e:	e000      	b.n	8006162 <_ZN11SetUpHelper11set_defaultEb+0x5e>
 8006160:	2300      	movs	r3, #0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d028      	beq.n	80061b8 <_ZN11SetUpHelper11set_defaultEb+0xb4>
		{
			uint16_t offset = SET_FLAG_OFFSET;
 8006166:	2300      	movs	r3, #0
 8006168:	81fb      	strh	r3, [r7, #14]
			const char set_flag[] = "set";
 800616a:	4b1c      	ldr	r3, [pc, #112]	; (80061dc <_ZN11SetUpHelper11set_defaultEb+0xd8>)
 800616c:	60bb      	str	r3, [r7, #8]
			memcpy(message_out + offset, set_flag, sizeof(set_flag));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	1d1a      	adds	r2, r3, #4
 8006172:	89fb      	ldrh	r3, [r7, #14]
 8006174:	4413      	add	r3, r2
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	601a      	str	r2, [r3, #0]

			set_default_network();
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7ff fd7a 	bl	8005c74 <_ZN11SetUpHelper19set_default_networkEv>
			set_default_robot_geometry();
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7ff fdbd 	bl	8005d00 <_ZN11SetUpHelper26set_default_robot_geometryEv>
			set_default_topics_name();
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7ff fe16 	bl	8005db8 <_ZN11SetUpHelper23set_default_topics_nameEv>

			PUT_NUM(MSG_SIZE_OFFSET, msg_length);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8b3 342e 	ldrh.w	r3, [r3, #1070]	; 0x42e
 8006192:	b2da      	uxtb	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	721a      	strb	r2, [r3, #8]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8b3 342e 	ldrh.w	r3, [r3, #1070]	; 0x42e
 800619e:	121b      	asrs	r3, r3, #8
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	725a      	strb	r2, [r3, #9]

			calc_checksum();
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7ff fec2 	bl	8005f30 <_ZN11SetUpHelper13calc_checksumEv>
			memory_write();
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7ff ff19 	bl	8005fe4 <_ZN11SetUpHelper12memory_writeEv>
			is_default = true;
 80061b2:	4b09      	ldr	r3, [pc, #36]	; (80061d8 <_ZN11SetUpHelper11set_defaultEb+0xd4>)
 80061b4:	2201      	movs	r2, #1
 80061b6:	701a      	strb	r2, [r3, #0]
		}
		xSemaphoreGive( SetUpHelper::semaphore );
 80061b8:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <_ZN11SetUpHelper11set_defaultEb+0xd0>)
 80061ba:	6818      	ldr	r0, [r3, #0]
 80061bc:	2300      	movs	r3, #0
 80061be:	2200      	movs	r2, #0
 80061c0:	2100      	movs	r1, #0
 80061c2:	f009 ff0b 	bl	800ffdc <xQueueGenericSend>
 80061c6:	e000      	b.n	80061ca <_ZN11SetUpHelper11set_defaultEb+0xc6>
		return;
 80061c8:	bf00      	nop
	}

}
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	200080a8 	.word	0x200080a8
 80061d4:	200080ac 	.word	0x200080ac
 80061d8:	200080b0 	.word	0x200080b0
 80061dc:	00746573 	.word	0x00746573

080061e0 <_ZN11SetUpHelper6is_setEv>:

bool SetUpHelper::is_set()
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af04      	add	r7, sp, #16
 80061e6:	6078      	str	r0, [r7, #4]
	const char set_flag[] = SET_STR;
 80061e8:	4b13      	ldr	r3, [pc, #76]	; (8006238 <_ZN11SetUpHelper6is_setEv+0x58>)
 80061ea:	60fb      	str	r3, [r7, #12]
	char rmsg[sizeof(set_flag)];
	wait_for_readiness();
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7ff fd17 	bl	8005c20 <_ZN11SetUpHelper18wait_for_readinessEv>
	HAL_I2C_Mem_Read(SetUpHelper::mem_out, DEVICE_ADDRESS, DEFAULT_ADDRESS + SET_FLAG_OFFSET, I2C_MEMADD_SIZE_16BIT, (uint8_t*)rmsg, sizeof(rmsg), HAL_MAX_DELAY);
 80061f2:	4b12      	ldr	r3, [pc, #72]	; (800623c <_ZN11SetUpHelper6is_setEv+0x5c>)
 80061f4:	6818      	ldr	r0, [r3, #0]
 80061f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061fa:	9302      	str	r3, [sp, #8]
 80061fc:	2304      	movs	r3, #4
 80061fe:	9301      	str	r3, [sp, #4]
 8006200:	f107 0308 	add.w	r3, r7, #8
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	2310      	movs	r3, #16
 8006208:	f44f 7280 	mov.w	r2, #256	; 0x100
 800620c:	21a0      	movs	r1, #160	; 0xa0
 800620e:	f004 f863 	bl	800a2d8 <HAL_I2C_Mem_Read>
	return memcmp(rmsg, set_flag, sizeof(rmsg)) == 0;
 8006212:	f107 010c 	add.w	r1, r7, #12
 8006216:	f107 0308 	add.w	r3, r7, #8
 800621a:	2204      	movs	r2, #4
 800621c:	4618      	mov	r0, r3
 800621e:	f020 faf1 	bl	8026804 <memcmp>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	bf0c      	ite	eq
 8006228:	2301      	moveq	r3, #1
 800622a:	2300      	movne	r3, #0
 800622c:	b2db      	uxtb	r3, r3
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	00746573 	.word	0x00746573
 800623c:	200080a8 	.word	0x200080a8

08006240 <_ZN11SetUpHelper13read_mem_sizeEv>:

uint16_t SetUpHelper::read_mem_size()
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b088      	sub	sp, #32
 8006244:	af04      	add	r7, sp, #16
 8006246:	6078      	str	r0, [r7, #4]
	uint8_t rmsg[NUM_SIZE];
	wait_for_readiness();
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7ff fce9 	bl	8005c20 <_ZN11SetUpHelper18wait_for_readinessEv>
	HAL_I2C_Mem_Read(SetUpHelper::mem_out, DEVICE_ADDRESS, DEFAULT_ADDRESS + MSG_SIZE_OFFSET, I2C_MEMADD_SIZE_16BIT, rmsg, sizeof(rmsg), HAL_MAX_DELAY);
 800624e:	4b0e      	ldr	r3, [pc, #56]	; (8006288 <_ZN11SetUpHelper13read_mem_sizeEv+0x48>)
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006256:	9302      	str	r3, [sp, #8]
 8006258:	2302      	movs	r3, #2
 800625a:	9301      	str	r3, [sp, #4]
 800625c:	f107 030c 	add.w	r3, r7, #12
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	2310      	movs	r3, #16
 8006264:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006268:	21a0      	movs	r1, #160	; 0xa0
 800626a:	f004 f835 	bl	800a2d8 <HAL_I2C_Mem_Read>
	return (rmsg[1] << 8) | rmsg[0];
 800626e:	7b7b      	ldrb	r3, [r7, #13]
 8006270:	021b      	lsls	r3, r3, #8
 8006272:	b21a      	sxth	r2, r3
 8006274:	7b3b      	ldrb	r3, [r7, #12]
 8006276:	b21b      	sxth	r3, r3
 8006278:	4313      	orrs	r3, r2
 800627a:	b21b      	sxth	r3, r3
 800627c:	b29b      	uxth	r3, r3
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	200080a8 	.word	0x200080a8

0800628c <_ZN11SetUpHelper8read_allEv>:

void SetUpHelper::read_all()
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
	if( xSemaphoreTake( SetUpHelper::semaphore, portMAX_DELAY) == pdTRUE )
 8006294:	4b18      	ldr	r3, [pc, #96]	; (80062f8 <_ZN11SetUpHelper8read_allEv+0x6c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800629c:	4618      	mov	r0, r3
 800629e:	f00a f991 	bl	80105c4 <xQueueSemaphoreTake>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	bf0c      	ite	eq
 80062a8:	2301      	moveq	r3, #1
 80062aa:	2300      	movne	r3, #0
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d01e      	beq.n	80062f0 <_ZN11SetUpHelper8read_allEv+0x64>
	{
		if(is_set())
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7ff ff94 	bl	80061e0 <_ZN11SetUpHelper6is_setEv>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d011      	beq.n	80062e2 <_ZN11SetUpHelper8read_allEv+0x56>
		{
			uint16_t mem_size = read_mem_size();
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff ffbe 	bl	8006240 <_ZN11SetUpHelper13read_mem_sizeEv>
 80062c4:	4603      	mov	r3, r0
 80062c6:	81fb      	strh	r3, [r7, #14]
			HAL_StatusTypeDef status = memory_read(mem_size);
 80062c8:	89fb      	ldrh	r3, [r7, #14]
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7ff fecf 	bl	8006070 <_ZN11SetUpHelper11memory_readEt>
 80062d2:	4603      	mov	r3, r0
 80062d4:	737b      	strb	r3, [r7, #13]
			if (status == HAL_OK){
 80062d6:	7b7b      	ldrb	r3, [r7, #13]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d102      	bne.n	80062e2 <_ZN11SetUpHelper8read_allEv+0x56>
				extract_variables();
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f80d 	bl	80062fc <_ZN11SetUpHelper17extract_variablesEv>
			}
		}
		xSemaphoreGive( SetUpHelper::semaphore );
 80062e2:	4b05      	ldr	r3, [pc, #20]	; (80062f8 <_ZN11SetUpHelper8read_allEv+0x6c>)
 80062e4:	6818      	ldr	r0, [r3, #0]
 80062e6:	2300      	movs	r3, #0
 80062e8:	2200      	movs	r2, #0
 80062ea:	2100      	movs	r1, #0
 80062ec:	f009 fe76 	bl	800ffdc <xQueueGenericSend>
	}
}
 80062f0:	bf00      	nop
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	200080ac 	.word	0x200080ac

080062fc <_ZN11SetUpHelper17extract_variablesEv>:

void SetUpHelper::extract_variables()
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
	uint16_t offset = MSG_SIZE_OFFSET;
 8006304:	2304      	movs	r3, #4
 8006306:	817b      	strh	r3, [r7, #10]
	uint16_t msg_size =  (message_out[offset + 1] << 8) | message_out[offset];
 8006308:	897b      	ldrh	r3, [r7, #10]
 800630a:	3301      	adds	r3, #1
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	4413      	add	r3, r2
 8006310:	791b      	ldrb	r3, [r3, #4]
 8006312:	021b      	lsls	r3, r3, #8
 8006314:	b21a      	sxth	r2, r3
 8006316:	897b      	ldrh	r3, [r7, #10]
 8006318:	4619      	mov	r1, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	440b      	add	r3, r1
 800631e:	791b      	ldrb	r3, [r3, #4]
 8006320:	b21b      	sxth	r3, r3
 8006322:	4313      	orrs	r3, r2
 8006324:	b21b      	sxth	r3, r3
 8006326:	82fb      	strh	r3, [r7, #22]
	if(msg_size < MIN_SETIING_SIZE || msg_size > MAX_SETTING_SIZE || !check_checksum(message_out, msg_size))
 8006328:	8afb      	ldrh	r3, [r7, #22]
 800632a:	2b2c      	cmp	r3, #44	; 0x2c
 800632c:	d911      	bls.n	8006352 <_ZN11SetUpHelper17extract_variablesEv+0x56>
 800632e:	8afb      	ldrh	r3, [r7, #22]
 8006330:	f240 4229 	movw	r2, #1065	; 0x429
 8006334:	4293      	cmp	r3, r2
 8006336:	d80c      	bhi.n	8006352 <_ZN11SetUpHelper17extract_variablesEv+0x56>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3304      	adds	r3, #4
 800633c:	8afa      	ldrh	r2, [r7, #22]
 800633e:	4619      	mov	r1, r3
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f7ff fe25 	bl	8005f90 <_ZN11SetUpHelper14check_checksumEPht>
 8006346:	4603      	mov	r3, r0
 8006348:	f083 0301 	eor.w	r3, r3, #1
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <_ZN11SetUpHelper17extract_variablesEv+0x5a>
 8006352:	2301      	movs	r3, #1
 8006354:	e000      	b.n	8006358 <_ZN11SetUpHelper17extract_variablesEv+0x5c>
 8006356:	2300      	movs	r3, #0
 8006358:	2b00      	cmp	r3, #0
 800635a:	f040 8188 	bne.w	800666e <_ZN11SetUpHelper17extract_variablesEv+0x372>
	{
		return;
	}
	msg_length = msg_size;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	8afa      	ldrh	r2, [r7, #22]
 8006362:	f8a3 242e 	strh.w	r2, [r3, #1070]	; 0x42e

	GET_IP(LOCAL_IP_OFFSET, LOCAL_IP_ADDRESS);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	3204      	adds	r2, #4
 8006370:	3206      	adds	r2, #6
 8006372:	6812      	ldr	r2, [r2, #0]
 8006374:	601a      	str	r2, [r3, #0]
	GET_IP(NETWORK_MASK_OFFSET, NETWORK_MASK);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f203 4334 	addw	r3, r3, #1076	; 0x434
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	3204      	adds	r2, #4
 8006380:	320a      	adds	r2, #10
 8006382:	6812      	ldr	r2, [r2, #0]
 8006384:	601a      	str	r2, [r3, #0]
	GET_IP(GATEAWAY_OFFSET, GATEAWAY);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	3204      	adds	r2, #4
 8006390:	320e      	adds	r2, #14
 8006392:	6812      	ldr	r2, [r2, #0]
 8006394:	601a      	str	r2, [r3, #0]

	USE_DHCP = GET_DHCP_CONFIG(DHCP_CONFIG_OFFSET);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	7d9b      	ldrb	r3, [r3, #22]
 800639a:	2b00      	cmp	r3, #0
 800639c:	bf14      	ite	ne
 800639e:	2301      	movne	r3, #1
 80063a0:	2300      	moveq	r3, #0
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446

	ROS_CLIENT_PORT = GET_NUM(ROS_CLIENT_PORT_OFFSET);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	7e1b      	ldrb	r3, [r3, #24]
 80063ae:	021b      	lsls	r3, r3, #8
 80063b0:	b21a      	sxth	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	7ddb      	ldrb	r3, [r3, #23]
 80063b6:	b21b      	sxth	r3, r3
 80063b8:	4313      	orrs	r3, r2
 80063ba:	b21b      	sxth	r3, r3
 80063bc:	b29a      	uxth	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8a3 243c 	strh.w	r2, [r3, #1084]	; 0x43c
	SET_UP_SERVER_PORT = GET_NUM(SET_UP_SERVER_PORT_OFFSET);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	7e9b      	ldrb	r3, [r3, #26]
 80063c8:	021b      	lsls	r3, r3, #8
 80063ca:	b21a      	sxth	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	7e5b      	ldrb	r3, [r3, #25]
 80063d0:	b21b      	sxth	r3, r3
 80063d2:	4313      	orrs	r3, r2
 80063d4:	b21b      	sxth	r3, r3
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8a3 243e 	strh.w	r2, [r3, #1086]	; 0x43e

	GET_IP(SERIALNODE_IP_OFFSET, SERIALNODE_IP);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	3204      	adds	r2, #4
 80063e8:	3217      	adds	r2, #23
 80063ea:	6812      	ldr	r2, [r2, #0]
 80063ec:	601a      	str	r2, [r3, #0]
	SERIALNODE_PORT = GET_NUM(SERIALNODE_PORT_OFFSET);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063f4:	021b      	lsls	r3, r3, #8
 80063f6:	b21a      	sxth	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	7fdb      	ldrb	r3, [r3, #31]
 80063fc:	b21b      	sxth	r3, r3
 80063fe:	4313      	orrs	r3, r2
 8006400:	b21b      	sxth	r3, r3
 8006402:	b29a      	uxth	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8a3 2444 	strh.w	r2, [r3, #1092]	; 0x444

	uint16_t radius_mm =  GET_NUM(WHEEL_RADIUS_OFFSET);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006410:	021b      	lsls	r3, r3, #8
 8006412:	b21a      	sxth	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800641a:	b21b      	sxth	r3, r3
 800641c:	4313      	orrs	r3, r2
 800641e:	b21b      	sxth	r3, r3
 8006420:	82bb      	strh	r3, [r7, #20]
	WHEEL_RADIUS = (float)radius_mm / 1000.0f;
 8006422:	8abb      	ldrh	r3, [r7, #20]
 8006424:	ee07 3a90 	vmov	s15, r3
 8006428:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800642c:	eddf 6a92 	vldr	s13, [pc, #584]	; 8006678 <_ZN11SetUpHelper17extract_variablesEv+0x37c>
 8006430:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800643a:	edc3 7a00 	vstr	s15, [r3]

	uint16_t separation_mm =  GET_NUM(WHEEL_SEPARATION_OFFSET);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006444:	021b      	lsls	r3, r3, #8
 8006446:	b21a      	sxth	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800644e:	b21b      	sxth	r3, r3
 8006450:	4313      	orrs	r3, r2
 8006452:	b21b      	sxth	r3, r3
 8006454:	827b      	strh	r3, [r7, #18]
	WHEEL_SEPARATION = (float)separation_mm / 1000.0f;
 8006456:	8a7b      	ldrh	r3, [r7, #18]
 8006458:	ee07 3a90 	vmov	s15, r3
 800645c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006460:	eddf 6a85 	vldr	s13, [pc, #532]	; 8006678 <_ZN11SetUpHelper17extract_variablesEv+0x37c>
 8006464:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f203 434c 	addw	r3, r3, #1100	; 0x44c
 800646e:	edc3 7a00 	vstr	s15, [r3]

	uint16_t lin_vel_mm =  GET_NUM(MAX_LIN_VEL_OFFSET);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006478:	021b      	lsls	r3, r3, #8
 800647a:	b21a      	sxth	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006482:	b21b      	sxth	r3, r3
 8006484:	4313      	orrs	r3, r2
 8006486:	b21b      	sxth	r3, r3
 8006488:	823b      	strh	r3, [r7, #16]
	MAX_LIN_SPEED = (float)lin_vel_mm / 1000.0f;
 800648a:	8a3b      	ldrh	r3, [r7, #16]
 800648c:	ee07 3a90 	vmov	s15, r3
 8006490:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006494:	eddf 6a78 	vldr	s13, [pc, #480]	; 8006678 <_ZN11SetUpHelper17extract_variablesEv+0x37c>
 8006498:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f503 638a 	add.w	r3, r3, #1104	; 0x450
 80064a2:	edc3 7a00 	vstr	s15, [r3]

	uint16_t ang_vel_mr =  GET_NUM(MAX_ANG_VEL_OFFSET);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064ac:	021b      	lsls	r3, r3, #8
 80064ae:	b21a      	sxth	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80064b6:	b21b      	sxth	r3, r3
 80064b8:	4313      	orrs	r3, r2
 80064ba:	b21b      	sxth	r3, r3
 80064bc:	81fb      	strh	r3, [r7, #14]
	MAX_ANG_VEL = (float)ang_vel_mr / 1000.0f;
 80064be:	89fb      	ldrh	r3, [r7, #14]
 80064c0:	ee07 3a90 	vmov	s15, r3
 80064c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064c8:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8006678 <_ZN11SetUpHelper17extract_variablesEv+0x37c>
 80064cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f203 4354 	addw	r3, r3, #1108	; 0x454
 80064d6:	edc3 7a00 	vstr	s15, [r3]

	uint16_t rad_int = GET_NUM(RAD_PER_TICK_OFFSET);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80064e0:	021b      	lsls	r3, r3, #8
 80064e2:	b21a      	sxth	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80064ea:	b21b      	sxth	r3, r3
 80064ec:	4313      	orrs	r3, r2
 80064ee:	b21b      	sxth	r3, r3
 80064f0:	81bb      	strh	r3, [r7, #12]
	RAD_PER_TICK = (float)rad_int / 100000.0f;
 80064f2:	89bb      	ldrh	r3, [r7, #12]
 80064f4:	ee07 3a90 	vmov	s15, r3
 80064f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064fc:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800667c <_ZN11SetUpHelper17extract_variablesEv+0x380>
 8006500:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f203 435c 	addw	r3, r3, #1116	; 0x45c
 800650a:	edc3 7a00 	vstr	s15, [r3]

	MAX_PWD_ALLOWED = GET_NUM(MAX_PWD_ALLOWED_OFFSET);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006514:	021b      	lsls	r3, r3, #8
 8006516:	b25a      	sxtb	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800651e:	b25b      	sxtb	r3, r3
 8006520:	4313      	orrs	r3, r2
 8006522:	b25b      	sxtb	r3, r3
 8006524:	b2da      	uxtb	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458

	offset = TOPICS_OFFSET;
 800652c:	2328      	movs	r3, #40	; 0x28
 800652e:	817b      	strh	r3, [r7, #10]
	char null_char[]  = {'\0'};
 8006530:	2300      	movs	r3, #0
 8006532:	723b      	strb	r3, [r7, #8]

	GET_TOPIC(offset, CMD_VEL_TOPIC, null_char );
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f503 608c 	add.w	r0, r3, #1120	; 0x460
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	1d1a      	adds	r2, r3, #4
 800653e:	897b      	ldrh	r3, [r7, #10]
 8006540:	3301      	adds	r3, #1
 8006542:	18d1      	adds	r1, r2, r3
 8006544:	897b      	ldrh	r3, [r7, #10]
 8006546:	461a      	mov	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4413      	add	r3, r2
 800654c:	791b      	ldrb	r3, [r3, #4]
 800654e:	461a      	mov	r2, r3
 8006550:	f020 f967 	bl	8026822 <memcpy>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 800655a:	897a      	ldrh	r2, [r7, #10]
 800655c:	4611      	mov	r1, r2
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	440a      	add	r2, r1
 8006562:	7912      	ldrb	r2, [r2, #4]
 8006564:	4413      	add	r3, r2
 8006566:	7a3a      	ldrb	r2, [r7, #8]
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	897b      	ldrh	r3, [r7, #10]
 800656c:	461a      	mov	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4413      	add	r3, r2
 8006572:	791b      	ldrb	r3, [r3, #4]
 8006574:	b29a      	uxth	r2, r3
 8006576:	897b      	ldrh	r3, [r7, #10]
 8006578:	4413      	add	r3, r2
 800657a:	b29b      	uxth	r3, r3
 800657c:	3301      	adds	r3, #1
 800657e:	b29b      	uxth	r3, r3
 8006580:	817b      	strh	r3, [r7, #10]
	GET_TOPIC(offset, ODOM_TOPIC, null_char );
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f203 505f 	addw	r0, r3, #1375	; 0x55f
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	1d1a      	adds	r2, r3, #4
 800658c:	897b      	ldrh	r3, [r7, #10]
 800658e:	3301      	adds	r3, #1
 8006590:	18d1      	adds	r1, r2, r3
 8006592:	897b      	ldrh	r3, [r7, #10]
 8006594:	461a      	mov	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4413      	add	r3, r2
 800659a:	791b      	ldrb	r3, [r3, #4]
 800659c:	461a      	mov	r2, r3
 800659e:	f020 f940 	bl	8026822 <memcpy>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f203 535f 	addw	r3, r3, #1375	; 0x55f
 80065a8:	897a      	ldrh	r2, [r7, #10]
 80065aa:	4611      	mov	r1, r2
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	440a      	add	r2, r1
 80065b0:	7912      	ldrb	r2, [r2, #4]
 80065b2:	4413      	add	r3, r2
 80065b4:	7a3a      	ldrb	r2, [r7, #8]
 80065b6:	701a      	strb	r2, [r3, #0]
 80065b8:	897b      	ldrh	r3, [r7, #10]
 80065ba:	461a      	mov	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4413      	add	r3, r2
 80065c0:	791b      	ldrb	r3, [r3, #4]
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	897b      	ldrh	r3, [r7, #10]
 80065c6:	4413      	add	r3, r2
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	3301      	adds	r3, #1
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	817b      	strh	r3, [r7, #10]
	GET_TOPIC(offset, BASE_FRAME, null_char );
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f203 605e 	addw	r0, r3, #1630	; 0x65e
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	1d1a      	adds	r2, r3, #4
 80065da:	897b      	ldrh	r3, [r7, #10]
 80065dc:	3301      	adds	r3, #1
 80065de:	18d1      	adds	r1, r2, r3
 80065e0:	897b      	ldrh	r3, [r7, #10]
 80065e2:	461a      	mov	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4413      	add	r3, r2
 80065e8:	791b      	ldrb	r3, [r3, #4]
 80065ea:	461a      	mov	r2, r3
 80065ec:	f020 f919 	bl	8026822 <memcpy>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f203 635e 	addw	r3, r3, #1630	; 0x65e
 80065f6:	897a      	ldrh	r2, [r7, #10]
 80065f8:	4611      	mov	r1, r2
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	440a      	add	r2, r1
 80065fe:	7912      	ldrb	r2, [r2, #4]
 8006600:	4413      	add	r3, r2
 8006602:	7a3a      	ldrb	r2, [r7, #8]
 8006604:	701a      	strb	r2, [r3, #0]
 8006606:	897b      	ldrh	r3, [r7, #10]
 8006608:	461a      	mov	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4413      	add	r3, r2
 800660e:	791b      	ldrb	r3, [r3, #4]
 8006610:	b29a      	uxth	r2, r3
 8006612:	897b      	ldrh	r3, [r7, #10]
 8006614:	4413      	add	r3, r2
 8006616:	b29b      	uxth	r3, r3
 8006618:	3301      	adds	r3, #1
 800661a:	b29b      	uxth	r3, r3
 800661c:	817b      	strh	r3, [r7, #10]
	GET_TOPIC(offset, ODOM_FRAME, null_char );
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f203 705d 	addw	r0, r3, #1885	; 0x75d
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	1d1a      	adds	r2, r3, #4
 8006628:	897b      	ldrh	r3, [r7, #10]
 800662a:	3301      	adds	r3, #1
 800662c:	18d1      	adds	r1, r2, r3
 800662e:	897b      	ldrh	r3, [r7, #10]
 8006630:	461a      	mov	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4413      	add	r3, r2
 8006636:	791b      	ldrb	r3, [r3, #4]
 8006638:	461a      	mov	r2, r3
 800663a:	f020 f8f2 	bl	8026822 <memcpy>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f203 735d 	addw	r3, r3, #1885	; 0x75d
 8006644:	897a      	ldrh	r2, [r7, #10]
 8006646:	4611      	mov	r1, r2
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	440a      	add	r2, r1
 800664c:	7912      	ldrb	r2, [r2, #4]
 800664e:	4413      	add	r3, r2
 8006650:	7a3a      	ldrb	r2, [r7, #8]
 8006652:	701a      	strb	r2, [r3, #0]
 8006654:	897b      	ldrh	r3, [r7, #10]
 8006656:	461a      	mov	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4413      	add	r3, r2
 800665c:	791b      	ldrb	r3, [r3, #4]
 800665e:	b29a      	uxth	r2, r3
 8006660:	897b      	ldrh	r3, [r7, #10]
 8006662:	4413      	add	r3, r2
 8006664:	b29b      	uxth	r3, r3
 8006666:	3301      	adds	r3, #1
 8006668:	b29b      	uxth	r3, r3
 800666a:	817b      	strh	r3, [r7, #10]
 800666c:	e000      	b.n	8006670 <_ZN11SetUpHelper17extract_variablesEv+0x374>
		return;
 800666e:	bf00      	nop

}
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	447a0000 	.word	0x447a0000
 800667c:	47c35000 	.word	0x47c35000

08006680 <_ZN11SetUpHelper15get_curr_memoryEPh>:

void SetUpHelper::get_curr_memory(uint8_t *buff)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
	if( xSemaphoreTake( SetUpHelper::semaphore, portMAX_DELAY) == pdTRUE )
 800668a:	4b11      	ldr	r3, [pc, #68]	; (80066d0 <_ZN11SetUpHelper15get_curr_memoryEPh+0x50>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006692:	4618      	mov	r0, r3
 8006694:	f009 ff96 	bl	80105c4 <xQueueSemaphoreTake>
 8006698:	4603      	mov	r3, r0
 800669a:	2b01      	cmp	r3, #1
 800669c:	bf0c      	ite	eq
 800669e:	2301      	moveq	r3, #1
 80066a0:	2300      	movne	r3, #0
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00f      	beq.n	80066c8 <_ZN11SetUpHelper15get_curr_memoryEPh+0x48>
		{
			memcpy(buff, message_out, msg_length);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	1d19      	adds	r1, r3, #4
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8b3 342e 	ldrh.w	r3, [r3, #1070]	; 0x42e
 80066b2:	461a      	mov	r2, r3
 80066b4:	6838      	ldr	r0, [r7, #0]
 80066b6:	f020 f8b4 	bl	8026822 <memcpy>
			xSemaphoreGive( SetUpHelper::semaphore );
 80066ba:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <_ZN11SetUpHelper15get_curr_memoryEPh+0x50>)
 80066bc:	6818      	ldr	r0, [r3, #0]
 80066be:	2300      	movs	r3, #0
 80066c0:	2200      	movs	r2, #0
 80066c2:	2100      	movs	r1, #0
 80066c4:	f009 fc8a 	bl	800ffdc <xQueueGenericSend>
		}
}
 80066c8:	bf00      	nop
 80066ca:	3708      	adds	r7, #8
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	200080ac 	.word	0x200080ac

080066d4 <_ZN11SetUpHelper3setEPh>:

bool SetUpHelper::set(uint8_t *buff){
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
	bool ret = false;
 80066de:	2300      	movs	r3, #0
 80066e0:	75fb      	strb	r3, [r7, #23]
	if( xSemaphoreTake( SetUpHelper::semaphore, portMAX_DELAY) == pdTRUE )
 80066e2:	4b34      	ldr	r3, [pc, #208]	; (80067b4 <_ZN11SetUpHelper3setEPh+0xe0>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80066ea:	4618      	mov	r0, r3
 80066ec:	f009 ff6a 	bl	80105c4 <xQueueSemaphoreTake>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	bf0c      	ite	eq
 80066f6:	2301      	moveq	r3, #1
 80066f8:	2300      	movne	r3, #0
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d053      	beq.n	80067a8 <_ZN11SetUpHelper3setEPh+0xd4>
	{
		uint16_t offset = SET_FLAG_OFFSET;
 8006700:	2300      	movs	r3, #0
 8006702:	82bb      	strh	r3, [r7, #20]
		const char set_flag[] = "set";
 8006704:	4b2c      	ldr	r3, [pc, #176]	; (80067b8 <_ZN11SetUpHelper3setEPh+0xe4>)
 8006706:	60fb      	str	r3, [r7, #12]
		memcpy(message_out + offset, set_flag, sizeof(set_flag));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	1d1a      	adds	r2, r3, #4
 800670c:	8abb      	ldrh	r3, [r7, #20]
 800670e:	4413      	add	r3, r2
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	601a      	str	r2, [r3, #0]

		offset = sizeof(set_flag);
 8006714:	2304      	movs	r3, #4
 8006716:	82bb      	strh	r3, [r7, #20]
		uint16_t buff_size =  (buff[offset + 1] << 8) | buff[offset];
 8006718:	8abb      	ldrh	r3, [r7, #20]
 800671a:	3301      	adds	r3, #1
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	4413      	add	r3, r2
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	021b      	lsls	r3, r3, #8
 8006724:	b21a      	sxth	r2, r3
 8006726:	8abb      	ldrh	r3, [r7, #20]
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	440b      	add	r3, r1
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	b21b      	sxth	r3, r3
 8006730:	4313      	orrs	r3, r2
 8006732:	b21b      	sxth	r3, r3
 8006734:	827b      	strh	r3, [r7, #18]
		if((buff_size >= MIN_SETIING_SIZE) && (buff_size <= MAX_SETTING_SIZE) && check_checksum(buff, buff_size))
 8006736:	8a7b      	ldrh	r3, [r7, #18]
 8006738:	2b2c      	cmp	r3, #44	; 0x2c
 800673a:	d90f      	bls.n	800675c <_ZN11SetUpHelper3setEPh+0x88>
 800673c:	8a7b      	ldrh	r3, [r7, #18]
 800673e:	f240 4229 	movw	r2, #1065	; 0x429
 8006742:	4293      	cmp	r3, r2
 8006744:	d80a      	bhi.n	800675c <_ZN11SetUpHelper3setEPh+0x88>
 8006746:	8a7b      	ldrh	r3, [r7, #18]
 8006748:	461a      	mov	r2, r3
 800674a:	6839      	ldr	r1, [r7, #0]
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff fc1f 	bl	8005f90 <_ZN11SetUpHelper14check_checksumEPht>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <_ZN11SetUpHelper3setEPh+0x88>
 8006758:	2301      	movs	r3, #1
 800675a:	e000      	b.n	800675e <_ZN11SetUpHelper3setEPh+0x8a>
 800675c:	2300      	movs	r3, #0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d01b      	beq.n	800679a <_ZN11SetUpHelper3setEPh+0xc6>
		{
			msg_length = buff_size;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	8a7a      	ldrh	r2, [r7, #18]
 8006766:	f8a3 242e 	strh.w	r2, [r3, #1070]	; 0x42e
			memcpy(message_out + offset, buff + offset, buff_size - offset);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	1d1a      	adds	r2, r3, #4
 800676e:	8abb      	ldrh	r3, [r7, #20]
 8006770:	18d0      	adds	r0, r2, r3
 8006772:	8abb      	ldrh	r3, [r7, #20]
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	18d1      	adds	r1, r2, r3
 8006778:	8a7a      	ldrh	r2, [r7, #18]
 800677a:	8abb      	ldrh	r3, [r7, #20]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	461a      	mov	r2, r3
 8006780:	f020 f84f 	bl	8026822 <memcpy>
			calc_checksum();
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff fbd3 	bl	8005f30 <_ZN11SetUpHelper13calc_checksumEv>
			memory_write();
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7ff fc2a 	bl	8005fe4 <_ZN11SetUpHelper12memory_writeEv>
			is_default = false;
 8006790:	4b0a      	ldr	r3, [pc, #40]	; (80067bc <_ZN11SetUpHelper3setEPh+0xe8>)
 8006792:	2200      	movs	r2, #0
 8006794:	701a      	strb	r2, [r3, #0]
			ret = true;
 8006796:	2301      	movs	r3, #1
 8006798:	75fb      	strb	r3, [r7, #23]
		}

		xSemaphoreGive( SetUpHelper::semaphore );
 800679a:	4b06      	ldr	r3, [pc, #24]	; (80067b4 <_ZN11SetUpHelper3setEPh+0xe0>)
 800679c:	6818      	ldr	r0, [r3, #0]
 800679e:	2300      	movs	r3, #0
 80067a0:	2200      	movs	r2, #0
 80067a2:	2100      	movs	r1, #0
 80067a4:	f009 fc1a 	bl	800ffdc <xQueueGenericSend>
	}
	return ret;
 80067a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3718      	adds	r7, #24
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	200080ac 	.word	0x200080ac
 80067b8:	00746573 	.word	0x00746573
 80067bc:	200080b0 	.word	0x200080b0

080067c0 <_ZN11SetUpHelper16set_default_taskEv>:

void SetUpHelper::set_default_task()
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if(reset_config)
 80067c8:	4b07      	ldr	r3, [pc, #28]	; (80067e8 <_ZN11SetUpHelper16set_default_taskEv+0x28>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d006      	beq.n	80067de <_ZN11SetUpHelper16set_default_taskEv+0x1e>
		{
			set_default(true);
 80067d0:	2101      	movs	r1, #1
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff fc96 	bl	8006104 <_ZN11SetUpHelper11set_defaultEb>
			reset_config = false;
 80067d8:	4b03      	ldr	r3, [pc, #12]	; (80067e8 <_ZN11SetUpHelper16set_default_taskEv+0x28>)
 80067da:	2200      	movs	r2, #0
 80067dc:	701a      	strb	r2, [r3, #0]
		}
		osDelay(500);
 80067de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80067e2:	f008 fe89 	bl	800f4f8 <osDelay>
		if(reset_config)
 80067e6:	e7ef      	b.n	80067c8 <_ZN11SetUpHelper16set_default_taskEv+0x8>
 80067e8:	200080b1 	.word	0x200080b1

080067ec <_ZN12SocketClientC1Ev>:
#include "SocketClient.h"

SemaphoreHandle_t SocketClient::error_semaphore;
bool SocketClient::is_connected = false;

SocketClient::SocketClient( )
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	4a04      	ldr	r2, [pc, #16]	; (8006808 <_ZN12SocketClientC1Ev+0x1c>)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub
}
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4618      	mov	r0, r3
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	0802bc2c 	.word	0x0802bc2c

0800680c <_ZN12SocketClient4initEtPht>:

void SocketClient::init(uint16_t ros_local_port, uint8_t *remote_ip, uint16_t ros_serialnode_port)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	607a      	str	r2, [r7, #4]
 8006816:	461a      	mov	r2, r3
 8006818:	460b      	mov	r3, r1
 800681a:	817b      	strh	r3, [r7, #10]
 800681c:	4613      	mov	r3, r2
 800681e:	813b      	strh	r3, [r7, #8]
	SocketClient::error_semaphore = xSemaphoreCreateMutex();
 8006820:	2001      	movs	r0, #1
 8006822:	f009 fba8 	bl	800ff76 <xQueueCreateMutex>
 8006826:	4602      	mov	r2, r0
 8006828:	4b21      	ldr	r3, [pc, #132]	; (80068b0 <_ZN12SocketClient4initEtPht+0xa4>)
 800682a:	601a      	str	r2, [r3, #0]

	memset(&localhost, 0, sizeof(struct sockaddr_in));
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	3314      	adds	r3, #20
 8006830:	2210      	movs	r2, #16
 8006832:	2100      	movs	r1, #0
 8006834:	4618      	mov	r0, r3
 8006836:	f01f ffff 	bl	8026838 <memset>
	localhost.sin_family = AF_INET;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2202      	movs	r2, #2
 800683e:	755a      	strb	r2, [r3, #21]
	localhost.sin_port = htons(ros_local_port);
 8006840:	897b      	ldrh	r3, [r7, #10]
 8006842:	4618      	mov	r0, r3
 8006844:	f010 fb96 	bl	8016f74 <lwip_htons>
 8006848:	4603      	mov	r3, r0
 800684a:	461a      	mov	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	82da      	strh	r2, [r3, #22]
	localhost.sin_addr.s_addr = INADDR_ANY;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	619a      	str	r2, [r3, #24]

	memset(&remotehost, 0, sizeof(struct sockaddr_in));
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	3324      	adds	r3, #36	; 0x24
 800685a:	2210      	movs	r2, #16
 800685c:	2100      	movs	r1, #0
 800685e:	4618      	mov	r0, r3
 8006860:	f01f ffea 	bl	8026838 <memset>
	remotehost.sin_family = AF_INET;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2202      	movs	r2, #2
 8006868:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	remotehost.sin_port = htons(ros_serialnode_port);
 800686c:	893b      	ldrh	r3, [r7, #8]
 800686e:	4618      	mov	r0, r3
 8006870:	f010 fb80 	bl	8016f74 <lwip_htons>
 8006874:	4603      	mov	r3, r0
 8006876:	461a      	mov	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	84da      	strh	r2, [r3, #38]	; 0x26
	ip4_addr_set_u32((ip4_addr_t*)&remotehost.sin_addr, remote_ip[0] | (remote_ip[1] << 8) | (remote_ip[2] << 16) | (remote_ip[3] << 24));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	781b      	ldrb	r3, [r3, #0]
 8006880:	461a      	mov	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	3301      	adds	r3, #1
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	021b      	lsls	r3, r3, #8
 800688a:	431a      	orrs	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3302      	adds	r3, #2
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	041b      	lsls	r3, r3, #16
 8006894:	431a      	orrs	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	3303      	adds	r3, #3
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	061b      	lsls	r3, r3, #24
 800689e:	431a      	orrs	r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3328      	adds	r3, #40	; 0x28
 80068a4:	601a      	str	r2, [r3, #0]
}
 80068a6:	bf00      	nop
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	200080b4 	.word	0x200080b4

080068b4 <_ZN12SocketClientD1Ev>:

SocketClient::~SocketClient() {
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	4a04      	ldr	r2, [pc, #16]	; (80068d0 <_ZN12SocketClientD1Ev+0x1c>)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4618      	mov	r0, r3
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	0802bc2c 	.word	0x0802bc2c

080068d4 <_ZN12SocketClientD0Ev>:
SocketClient::~SocketClient() {
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
}
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7ff ffe9 	bl	80068b4 <_ZN12SocketClientD1Ev>
 80068e2:	213c      	movs	r1, #60	; 0x3c
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f01d fe60 	bl	80245aa <_ZdlPvj>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4618      	mov	r0, r3
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <_ZN12SocketClient14socket_receiveEPhtPm>:

void SocketClient::socket_receive(uint8_t *pData, uint16_t size, uint32_t* rdmaInd)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	603b      	str	r3, [r7, #0]
 8006900:	4613      	mov	r3, r2
 8006902:	80fb      	strh	r3, [r7, #6]
	osDelay(10);
 8006904:	200a      	movs	r0, #10
 8006906:	f008 fdf7 	bl	800f4f8 <osDelay>
	if( xSemaphoreTake( SocketClient::error_semaphore, portMAX_DELAY) == pdTRUE )
 800690a:	4b27      	ldr	r3, [pc, #156]	; (80069a8 <_ZN12SocketClient14socket_receiveEPhtPm+0xb4>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006912:	4618      	mov	r0, r3
 8006914:	f009 fe56 	bl	80105c4 <xQueueSemaphoreTake>
 8006918:	4603      	mov	r3, r0
 800691a:	2b01      	cmp	r3, #1
 800691c:	bf0c      	ite	eq
 800691e:	2301      	moveq	r3, #1
 8006920:	2300      	movne	r3, #0
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	d016      	beq.n	8006956 <_ZN12SocketClient14socket_receiveEPhtPm+0x62>
	{
		recv_data = (SocketClient::is_connected) ? recv(sock, pData, size, 0) : 0;
 8006928:	4b20      	ldr	r3, [pc, #128]	; (80069ac <_ZN12SocketClient14socket_receiveEPhtPm+0xb8>)
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d008      	beq.n	8006942 <_ZN12SocketClient14socket_receiveEPhtPm+0x4e>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6858      	ldr	r0, [r3, #4]
 8006934:	88fa      	ldrh	r2, [r7, #6]
 8006936:	2300      	movs	r3, #0
 8006938:	68b9      	ldr	r1, [r7, #8]
 800693a:	f00f fdad 	bl	8016498 <lwip_recv>
 800693e:	4602      	mov	r2, r0
 8006940:	e000      	b.n	8006944 <_ZN12SocketClient14socket_receiveEPhtPm+0x50>
 8006942:	2200      	movs	r2, #0
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	609a      	str	r2, [r3, #8]
		xSemaphoreGive( SocketClient::error_semaphore );
 8006948:	4b17      	ldr	r3, [pc, #92]	; (80069a8 <_ZN12SocketClient14socket_receiveEPhtPm+0xb4>)
 800694a:	6818      	ldr	r0, [r3, #0]
 800694c:	2300      	movs	r3, #0
 800694e:	2200      	movs	r2, #0
 8006950:	2100      	movs	r1, #0
 8006952:	f009 fb43 	bl	800ffdc <xQueueGenericSend>
	}
	*rdmaInd = (recv_data > 0) ? recv_data : 0;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800695e:	461a      	mov	r2, r3
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	601a      	str	r2, [r3, #0]

	if( check_errno(recv_data) == ERROR_STATUS){
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	4619      	mov	r1, r3
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 f95c 	bl	8006c28 <_ZN12SocketClient11check_errnoEi>
 8006970:	4603      	mov	r3, r0
 8006972:	2b02      	cmp	r3, #2
 8006974:	bf0c      	ite	eq
 8006976:	2301      	moveq	r3, #1
 8006978:	2300      	movne	r3, #0
 800697a:	b2db      	uxtb	r3, r3
 800697c:	2b00      	cmp	r3, #0
 800697e:	d005      	beq.n	800698c <_ZN12SocketClient14socket_receiveEPhtPm+0x98>
		++err_count;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	611a      	str	r2, [r3, #16]
		if (err_count > 0){
			--err_count;
		}
	}

}
 800698a:	e008      	b.n	800699e <_ZN12SocketClient14socket_receiveEPhtPm+0xaa>
		if (err_count > 0){
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	dd04      	ble.n	800699e <_ZN12SocketClient14socket_receiveEPhtPm+0xaa>
			--err_count;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	1e5a      	subs	r2, r3, #1
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	611a      	str	r2, [r3, #16]
}
 800699e:	bf00      	nop
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	200080b4 	.word	0x200080b4
 80069ac:	200080b8 	.word	0x200080b8

080069b0 <_ZN12SocketClient11socket_sendEPht>:

void SocketClient::socket_send(uint8_t *pData, uint16_t len)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	4613      	mov	r3, r2
 80069bc:	80fb      	strh	r3, [r7, #6]
	if( xSemaphoreTake( SocketClient::error_semaphore, portMAX_DELAY) == pdTRUE )
 80069be:	4b23      	ldr	r3, [pc, #140]	; (8006a4c <_ZN12SocketClient11socket_sendEPht+0x9c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80069c6:	4618      	mov	r0, r3
 80069c8:	f009 fdfc 	bl	80105c4 <xQueueSemaphoreTake>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	bf0c      	ite	eq
 80069d2:	2301      	moveq	r3, #1
 80069d4:	2300      	movne	r3, #0
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d016      	beq.n	8006a0a <_ZN12SocketClient11socket_sendEPht+0x5a>
	{
		send_data = (SocketClient::is_connected) ? write(sock,(void *) pData, len) : 0;
 80069dc:	4b1c      	ldr	r3, [pc, #112]	; (8006a50 <_ZN12SocketClient11socket_sendEPht+0xa0>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d008      	beq.n	80069f6 <_ZN12SocketClient11socket_sendEPht+0x46>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	88fa      	ldrh	r2, [r7, #6]
 80069ea:	68b9      	ldr	r1, [r7, #8]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f00f fed1 	bl	8016794 <lwip_write>
 80069f2:	4602      	mov	r2, r0
 80069f4:	e000      	b.n	80069f8 <_ZN12SocketClient11socket_sendEPht+0x48>
 80069f6:	2200      	movs	r2, #0
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	60da      	str	r2, [r3, #12]
		xSemaphoreGive( SocketClient::error_semaphore );
 80069fc:	4b13      	ldr	r3, [pc, #76]	; (8006a4c <_ZN12SocketClient11socket_sendEPht+0x9c>)
 80069fe:	6818      	ldr	r0, [r3, #0]
 8006a00:	2300      	movs	r3, #0
 8006a02:	2200      	movs	r2, #0
 8006a04:	2100      	movs	r1, #0
 8006a06:	f009 fae9 	bl	800ffdc <xQueueGenericSend>
	}
	if( check_errno(send_data) == ERROR_STATUS){
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	4619      	mov	r1, r3
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 f909 	bl	8006c28 <_ZN12SocketClient11check_errnoEi>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	bf0c      	ite	eq
 8006a1c:	2301      	moveq	r3, #1
 8006a1e:	2300      	movne	r3, #0
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d005      	beq.n	8006a32 <_ZN12SocketClient11socket_sendEPht+0x82>
			++err_count;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	1c5a      	adds	r2, r3, #1
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	611a      	str	r2, [r3, #16]
		} else {
			if (err_count > 0){
				--err_count;
			}
		}
}
 8006a30:	e008      	b.n	8006a44 <_ZN12SocketClient11socket_sendEPht+0x94>
			if (err_count > 0){
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	dd04      	ble.n	8006a44 <_ZN12SocketClient11socket_sendEPht+0x94>
				--err_count;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	1e5a      	subs	r2, r3, #1
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	611a      	str	r2, [r3, #16]
}
 8006a44:	bf00      	nop
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	200080b4 	.word	0x200080b4
 8006a50:	200080b8 	.word	0x200080b8

08006a54 <_ZN12SocketClient16SocketClientTaskEv>:

void SocketClient::SocketClientTask()
{
 8006a54:	b590      	push	{r4, r7, lr}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if( xSemaphoreTake( SocketClient::error_semaphore, portMAX_DELAY) == pdTRUE )
 8006a5c:	4b6f      	ldr	r3, [pc, #444]	; (8006c1c <_ZN12SocketClient16SocketClientTaskEv+0x1c8>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006a64:	4618      	mov	r0, r3
 8006a66:	f009 fdad 	bl	80105c4 <xQueueSemaphoreTake>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	bf0c      	ite	eq
 8006a70:	2301      	moveq	r3, #1
 8006a72:	2300      	movne	r3, #0
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00e      	beq.n	8006a98 <_ZN12SocketClient16SocketClientTaskEv+0x44>
		{
			sock = socket(AF_INET,SOCK_STREAM, 0);
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	2002      	movs	r0, #2
 8006a80:	f00f fe30 	bl	80166e4 <lwip_socket>
 8006a84:	4602      	mov	r2, r0
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	605a      	str	r2, [r3, #4]
			xSemaphoreGive( SocketClient::error_semaphore );
 8006a8a:	4b64      	ldr	r3, [pc, #400]	; (8006c1c <_ZN12SocketClient16SocketClientTaskEv+0x1c8>)
 8006a8c:	6818      	ldr	r0, [r3, #0]
 8006a8e:	2300      	movs	r3, #0
 8006a90:	2200      	movs	r2, #0
 8006a92:	2100      	movs	r1, #0
 8006a94:	f009 faa2 	bl	800ffdc <xQueueGenericSend>
		}

		if (sock >= 0)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f2c0 80b9 	blt.w	8006c14 <_ZN12SocketClient16SocketClientTaskEv+0x1c0>
		{
			err_count = 0;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	611a      	str	r2, [r3, #16]
			osDelay(10);
 8006aa8:	200a      	movs	r0, #10
 8006aaa:	f008 fd25 	bl	800f4f8 <osDelay>
			if( xSemaphoreTake( SocketClient::error_semaphore, portMAX_DELAY) == pdTRUE )
 8006aae:	4b5b      	ldr	r3, [pc, #364]	; (8006c1c <_ZN12SocketClient16SocketClientTaskEv+0x1c8>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f009 fd84 	bl	80105c4 <xQueueSemaphoreTake>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	bf0c      	ite	eq
 8006ac2:	2301      	moveq	r3, #1
 8006ac4:	2300      	movne	r3, #0
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d026      	beq.n	8006b1a <_ZN12SocketClient16SocketClientTaskEv+0xc6>
			{
				lwip_fcntl(sock, F_SETFL, (lwip_fcntl(sock, F_GETFL, 0)| O_NONBLOCK));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685c      	ldr	r4, [r3, #4]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2103      	movs	r1, #3
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f00f ffef 	bl	8016abc <lwip_fcntl>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	f043 0301 	orr.w	r3, r3, #1
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	2104      	movs	r1, #4
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f00f ffe7 	bl	8016abc <lwip_fcntl>
				osDelay(10);
 8006aee:	200a      	movs	r0, #10
 8006af0:	f008 fd02 	bl	800f4f8 <osDelay>
				connect(sock, (struct sockaddr *)&remotehost,sizeof(struct sockaddr_in));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6858      	ldr	r0, [r3, #4]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3324      	adds	r3, #36	; 0x24
 8006afc:	2210      	movs	r2, #16
 8006afe:	4619      	mov	r1, r3
 8006b00:	f00f f8de 	bl	8015cc0 <lwip_connect>
				osDelay(400);
 8006b04:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8006b08:	f008 fcf6 	bl	800f4f8 <osDelay>
				xSemaphoreGive( SocketClient::error_semaphore );
 8006b0c:	4b43      	ldr	r3, [pc, #268]	; (8006c1c <_ZN12SocketClient16SocketClientTaskEv+0x1c8>)
 8006b0e:	6818      	ldr	r0, [r3, #0]
 8006b10:	2300      	movs	r3, #0
 8006b12:	2200      	movs	r2, #0
 8006b14:	2100      	movs	r1, #0
 8006b16:	f009 fa61 	bl	800ffdc <xQueueGenericSend>
			}
			if (check_errno() == OK_STATUS)
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f896 	bl	8006c4c <_ZN12SocketClient11check_errnoEv>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	bf0c      	ite	eq
 8006b26:	2301      	moveq	r3, #1
 8006b28:	2300      	movne	r3, #0
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d052      	beq.n	8006bd6 <_ZN12SocketClient16SocketClientTaskEv+0x182>
			{
				osDelay(500);
 8006b30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b34:	f008 fce0 	bl	800f4f8 <osDelay>
				if( xSemaphoreTake( SocketClient::error_semaphore, portMAX_DELAY) == pdTRUE )
 8006b38:	4b38      	ldr	r3, [pc, #224]	; (8006c1c <_ZN12SocketClient16SocketClientTaskEv+0x1c8>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006b40:	4618      	mov	r0, r3
 8006b42:	f009 fd3f 	bl	80105c4 <xQueueSemaphoreTake>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	bf0c      	ite	eq
 8006b4c:	2301      	moveq	r3, #1
 8006b4e:	2300      	movne	r3, #0
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00d      	beq.n	8006b72 <_ZN12SocketClient16SocketClientTaskEv+0x11e>
				{
					SocketClient::is_connected = true;
 8006b56:	4b32      	ldr	r3, [pc, #200]	; (8006c20 <_ZN12SocketClient16SocketClientTaskEv+0x1cc>)
 8006b58:	2201      	movs	r2, #1
 8006b5a:	701a      	strb	r2, [r3, #0]
					osDelay(500);
 8006b5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b60:	f008 fcca 	bl	800f4f8 <osDelay>
					xSemaphoreGive( SocketClient::error_semaphore );
 8006b64:	4b2d      	ldr	r3, [pc, #180]	; (8006c1c <_ZN12SocketClient16SocketClientTaskEv+0x1c8>)
 8006b66:	6818      	ldr	r0, [r3, #0]
 8006b68:	2300      	movs	r3, #0
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	f009 fa35 	bl	800ffdc <xQueueGenericSend>
				}
				osDelay(100);
 8006b72:	2064      	movs	r0, #100	; 0x64
 8006b74:	f008 fcc0 	bl	800f4f8 <osDelay>
				for(;;){
					if(err_count > MAX_ERROR_COUNT){
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	2b64      	cmp	r3, #100	; 0x64
 8006b7e:	dd1f      	ble.n	8006bc0 <_ZN12SocketClient16SocketClientTaskEv+0x16c>
						HAL_GPIO_WritePin(GPIO_LWIP_LED, PIN_LWIP_LED, GPIO_PIN_RESET);
 8006b80:	2200      	movs	r2, #0
 8006b82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b86:	4827      	ldr	r0, [pc, #156]	; (8006c24 <_ZN12SocketClient16SocketClientTaskEv+0x1d0>)
 8006b88:	f003 f91c 	bl	8009dc4 <HAL_GPIO_WritePin>
						if( xSemaphoreTake( SocketClient::error_semaphore, portMAX_DELAY) == pdTRUE )
 8006b8c:	4b23      	ldr	r3, [pc, #140]	; (8006c1c <_ZN12SocketClient16SocketClientTaskEv+0x1c8>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006b94:	4618      	mov	r0, r3
 8006b96:	f009 fd15 	bl	80105c4 <xQueueSemaphoreTake>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	bf0c      	ite	eq
 8006ba0:	2301      	moveq	r3, #1
 8006ba2:	2300      	movne	r3, #0
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d014      	beq.n	8006bd4 <_ZN12SocketClient16SocketClientTaskEv+0x180>
						{
							SocketClient::is_connected = false;
 8006baa:	4b1d      	ldr	r3, [pc, #116]	; (8006c20 <_ZN12SocketClient16SocketClientTaskEv+0x1cc>)
 8006bac:	2200      	movs	r2, #0
 8006bae:	701a      	strb	r2, [r3, #0]
							xSemaphoreGive( SocketClient::error_semaphore );
 8006bb0:	4b1a      	ldr	r3, [pc, #104]	; (8006c1c <_ZN12SocketClient16SocketClientTaskEv+0x1c8>)
 8006bb2:	6818      	ldr	r0, [r3, #0]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	2100      	movs	r1, #0
 8006bba:	f009 fa0f 	bl	800ffdc <xQueueGenericSend>
						}
						break;
 8006bbe:	e009      	b.n	8006bd4 <_ZN12SocketClient16SocketClientTaskEv+0x180>
					} else
					{
						HAL_GPIO_WritePin(GPIO_LWIP_LED, PIN_LWIP_LED, GPIO_PIN_SET);
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006bc6:	4817      	ldr	r0, [pc, #92]	; (8006c24 <_ZN12SocketClient16SocketClientTaskEv+0x1d0>)
 8006bc8:	f003 f8fc 	bl	8009dc4 <HAL_GPIO_WritePin>
					}
					osDelay(10);
 8006bcc:	200a      	movs	r0, #10
 8006bce:	f008 fc93 	bl	800f4f8 <osDelay>
					if(err_count > MAX_ERROR_COUNT){
 8006bd2:	e7d1      	b.n	8006b78 <_ZN12SocketClient16SocketClientTaskEv+0x124>
						break;
 8006bd4:	bf00      	nop
				}
			}
			if( xSemaphoreTake( SocketClient::error_semaphore, portMAX_DELAY) == pdTRUE )
 8006bd6:	4b11      	ldr	r3, [pc, #68]	; (8006c1c <_ZN12SocketClient16SocketClientTaskEv+0x1c8>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006bde:	4618      	mov	r0, r3
 8006be0:	f009 fcf0 	bl	80105c4 <xQueueSemaphoreTake>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	bf0c      	ite	eq
 8006bea:	2301      	moveq	r3, #1
 8006bec:	2300      	movne	r3, #0
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00f      	beq.n	8006c14 <_ZN12SocketClient16SocketClientTaskEv+0x1c0>
			{
				close(sock);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f00f f80b 	bl	8015c14 <lwip_close>
				osDelay(500);
 8006bfe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006c02:	f008 fc79 	bl	800f4f8 <osDelay>
				xSemaphoreGive( SocketClient::error_semaphore );
 8006c06:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <_ZN12SocketClient16SocketClientTaskEv+0x1c8>)
 8006c08:	6818      	ldr	r0, [r3, #0]
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	2100      	movs	r1, #0
 8006c10:	f009 f9e4 	bl	800ffdc <xQueueGenericSend>
			}
		}
		osDelay(100);
 8006c14:	2064      	movs	r0, #100	; 0x64
 8006c16:	f008 fc6f 	bl	800f4f8 <osDelay>
		if( xSemaphoreTake( SocketClient::error_semaphore, portMAX_DELAY) == pdTRUE )
 8006c1a:	e71f      	b.n	8006a5c <_ZN12SocketClient16SocketClientTaskEv+0x8>
 8006c1c:	200080b4 	.word	0x200080b4
 8006c20:	200080b8 	.word	0x200080b8
 8006c24:	40020c00 	.word	0x40020c00

08006c28 <_ZN12SocketClient11check_errnoEi>:
	}
}
uint8_t SocketClient::check_errno(int bytes){
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
	if (bytes < 0){
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	da01      	bge.n	8006c3c <_ZN12SocketClient11check_errnoEi+0x14>
		return ERROR_STATUS;
 8006c38:	2302      	movs	r3, #2
 8006c3a:	e003      	b.n	8006c44 <_ZN12SocketClient11check_errnoEi+0x1c>
	}
	return check_errno();
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f805 	bl	8006c4c <_ZN12SocketClient11check_errnoEv>
 8006c42:	4603      	mov	r3, r0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <_ZN12SocketClient11check_errnoEv>:
uint8_t SocketClient::check_errno()
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
	if(errno == EINPROGRESS || errno == 0)
 8006c54:	4b10      	ldr	r3, [pc, #64]	; (8006c98 <_ZN12SocketClient11check_errnoEv+0x4c>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b73      	cmp	r3, #115	; 0x73
 8006c5a:	d003      	beq.n	8006c64 <_ZN12SocketClient11check_errnoEv+0x18>
 8006c5c:	4b0e      	ldr	r3, [pc, #56]	; (8006c98 <_ZN12SocketClient11check_errnoEv+0x4c>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <_ZN12SocketClient11check_errnoEv+0x1c>
	{
		return OK_STATUS;
 8006c64:	2300      	movs	r3, #0
 8006c66:	e010      	b.n	8006c8a <_ZN12SocketClient11check_errnoEv+0x3e>
	}
	if(errno == EAGAIN)
 8006c68:	4b0b      	ldr	r3, [pc, #44]	; (8006c98 <_ZN12SocketClient11check_errnoEv+0x4c>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b0b      	cmp	r3, #11
 8006c6e:	d101      	bne.n	8006c74 <_ZN12SocketClient11check_errnoEv+0x28>
	{
		return WARNING_STATUS;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e00a      	b.n	8006c8a <_ZN12SocketClient11check_errnoEv+0x3e>
	}
	if(errno == ECONNRESET || errno == EHOSTUNREACH)
 8006c74:	4b08      	ldr	r3, [pc, #32]	; (8006c98 <_ZN12SocketClient11check_errnoEv+0x4c>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b68      	cmp	r3, #104	; 0x68
 8006c7a:	d003      	beq.n	8006c84 <_ZN12SocketClient11check_errnoEv+0x38>
 8006c7c:	4b06      	ldr	r3, [pc, #24]	; (8006c98 <_ZN12SocketClient11check_errnoEv+0x4c>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b71      	cmp	r3, #113	; 0x71
 8006c82:	d101      	bne.n	8006c88 <_ZN12SocketClient11check_errnoEv+0x3c>
	{
		return ERROR_STATUS;
 8006c84:	2302      	movs	r3, #2
 8006c86:	e000      	b.n	8006c8a <_ZN12SocketClient11check_errnoEv+0x3e>
	}
	return UNKNOWN_STATUS;
 8006c88:	2303      	movs	r3, #3
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	2001a038 	.word	0x2001a038

08006c9c <_ZN12SocketServerC1Ev>:
#include "SetUpHelper.h"
#include "SocketServer.h"

SetUpHelper *SocketServer::settings = nullptr;

SocketServer::SocketServer()
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	4a0c      	ldr	r2, [pc, #48]	; (8006cd8 <_ZN12SocketServerC1Ev+0x3c>)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a0b      	ldr	r2, [pc, #44]	; (8006cdc <_ZN12SocketServerC1Ev+0x40>)
 8006cae:	3304      	adds	r3, #4
 8006cb0:	6812      	ldr	r2, [r2, #0]
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	8019      	strh	r1, [r3, #0]
 8006cb6:	3302      	adds	r3, #2
 8006cb8:	0c12      	lsrs	r2, r2, #16
 8006cba:	701a      	strb	r2, [r3, #0]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a08      	ldr	r2, [pc, #32]	; (8006ce0 <_ZN12SocketServerC1Ev+0x44>)
 8006cc0:	3307      	adds	r3, #7
 8006cc2:	8811      	ldrh	r1, [r2, #0]
 8006cc4:	7892      	ldrb	r2, [r2, #2]
 8006cc6:	8019      	strh	r1, [r3, #0]
 8006cc8:	709a      	strb	r2, [r3, #2]
{

}
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	0802bc3c 	.word	0x0802bc3c
 8006cdc:	08027be0 	.word	0x08027be0
 8006ce0:	08027be4 	.word	0x08027be4

08006ce4 <_ZN12SocketServer4initEP11SetUpHelper>:


void SocketServer::init(SetUpHelper *main_settings)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
	settings = main_settings;
 8006cee:	4a13      	ldr	r2, [pc, #76]	; (8006d3c <_ZN12SocketServer4initEP11SetUpHelper+0x58>)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	6013      	str	r3, [r2, #0]
	memset(&localhost, 0, sizeof(struct sockaddr_in));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f503 6307 	add.w	r3, r3, #2160	; 0x870
 8006cfa:	2210      	movs	r2, #16
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f01f fd9a 	bl	8026838 <memset>
	localhost.sin_family = AF_INET;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 2871 	strb.w	r2, [r3, #2161]	; 0x871
	localhost.sin_port = htons(settings->SET_UP_SERVER_PORT);
 8006d0c:	4b0b      	ldr	r3, [pc, #44]	; (8006d3c <_ZN12SocketServer4initEP11SetUpHelper+0x58>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f8b3 343e 	ldrh.w	r3, [r3, #1086]	; 0x43e
 8006d14:	4618      	mov	r0, r3
 8006d16:	f010 f92d 	bl	8016f74 <lwip_htons>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8a3 2872 	strh.w	r2, [r3, #2162]	; 0x872
	localhost.sin_addr.s_addr = INADDR_ANY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f8c3 2874 	str.w	r2, [r3, #2164]	; 0x874
	osDelay(100);
 8006d2c:	2064      	movs	r0, #100	; 0x64
 8006d2e:	f008 fbe3 	bl	800f4f8 <osDelay>
}
 8006d32:	bf00      	nop
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	200080bc 	.word	0x200080bc

08006d40 <_ZN12SocketServerD1Ev>:

SocketServer::~SocketServer() {
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	4a04      	ldr	r2, [pc, #16]	; (8006d5c <_ZN12SocketServerD1Ev+0x1c>)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4618      	mov	r0, r3
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	0802bc3c 	.word	0x0802bc3c

08006d60 <_ZN12SocketServerD0Ev>:
SocketServer::~SocketServer() {
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
}
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7ff ffe9 	bl	8006d40 <_ZN12SocketServerD1Ev>
 8006d6e:	f640 0194 	movw	r1, #2196	; 0x894
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f01d fc19 	bl	80245aa <_ZdlPvj>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <_ZN12SocketServer14socket_receiveEPhtPm>:

void SocketServer::socket_receive(uint8_t *pData, uint16_t size, uint32_t* rdmaInd)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	60b9      	str	r1, [r7, #8]
 8006d8c:	603b      	str	r3, [r7, #0]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	80fb      	strh	r3, [r7, #6]

	recv_data = recv(remote_sock, pData, size, 0);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6918      	ldr	r0, [r3, #16]
 8006d96:	88fa      	ldrh	r2, [r7, #6]
 8006d98:	2300      	movs	r3, #0
 8006d9a:	68b9      	ldr	r1, [r7, #8]
 8006d9c:	f00f fb7c 	bl	8016498 <lwip_recv>
 8006da0:	4602      	mov	r2, r0
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	615a      	str	r2, [r3, #20]
	*rdmaInd = (recv_data > 0)? recv_data : 0;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006dae:	461a      	mov	r2, r3
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	601a      	str	r2, [r3, #0]
}
 8006db4:	bf00      	nop
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <_ZN12SocketServer11socket_sendEPht>:

void SocketServer::socket_send(uint8_t *pData, uint16_t len)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	80fb      	strh	r3, [r7, #6]
	send_data = write(remote_sock,(void *) pData, len);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	88fa      	ldrh	r2, [r7, #6]
 8006dd0:	68b9      	ldr	r1, [r7, #8]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f00f fcde 	bl	8016794 <lwip_write>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	619a      	str	r2, [r3, #24]

}
 8006dde:	bf00      	nop
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <_ZN12SocketServer12start_serverEv>:

void SocketServer::start_server()
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if ((local_sock = socket(AF_INET,SOCK_STREAM, 0)) >= 0)
 8006dee:	2200      	movs	r2, #0
 8006df0:	2101      	movs	r1, #1
 8006df2:	2002      	movs	r0, #2
 8006df4:	f00f fc76 	bl	80166e4 <lwip_socket>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	60da      	str	r2, [r3, #12]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	43db      	mvns	r3, r3
 8006e04:	0fdb      	lsrs	r3, r3, #31
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d0f0      	beq.n	8006dee <_ZN12SocketServer12start_serverEv+0x8>
		{
			osDelay(100);
 8006e0c:	2064      	movs	r0, #100	; 0x64
 8006e0e:	f008 fb73 	bl	800f4f8 <osDelay>
			if (bind(local_sock, (struct sockaddr *)&localhost, sizeof(struct sockaddr_in)) ==  0)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68d8      	ldr	r0, [r3, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f503 6307 	add.w	r3, r3, #2160	; 0x870
 8006e1c:	2210      	movs	r2, #16
 8006e1e:	4619      	mov	r1, r3
 8006e20:	f00e fe8a 	bl	8015b38 <lwip_bind>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	bf0c      	ite	eq
 8006e2a:	2301      	moveq	r3, #1
 8006e2c:	2300      	movne	r3, #0
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d0dc      	beq.n	8006dee <_ZN12SocketServer12start_serverEv+0x8>
			{
				listen(local_sock, 1);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	2101      	movs	r1, #1
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f00e ffc0 	bl	8015dc0 <lwip_listen>
				break;
 8006e40:	bf00      	nop
			}
		}
	}
}
 8006e42:	bf00      	nop
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <_ZN12SocketServer16SocketServerTaskEv>:

void SocketServer::SocketServerTask()
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
	uint32_t rdmaInd;
	for(;;)
	{
		start_server();
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7ff ffc6 	bl	8006de6 <_ZN12SocketServer12start_serverEv>

		for(;;)
		{
			remote_sock = accept(local_sock, (struct sockaddr *)&remotehost, (socklen_t *)&sockaddrsize);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68d8      	ldr	r0, [r3, #12]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f503 6108 	add.w	r1, r3, #2176	; 0x880
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f503 6309 	add.w	r3, r3, #2192	; 0x890
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	f00e fd46 	bl	80158fc <lwip_accept>
 8006e70:	4602      	mov	r2, r0
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	611a      	str	r2, [r3, #16]
			if(remote_sock >= 0)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	db4f      	blt.n	8006f1e <_ZN12SocketServer16SocketServerTaskEv+0xd2>
			{
				socket_receive(recv_buffer, MAX_SETTING_SIZE,&rdmaInd);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f203 4145 	addw	r1, r3, #1093	; 0x445
 8006e84:	f107 030c 	add.w	r3, r7, #12
 8006e88:	f240 4229 	movw	r2, #1065	; 0x429
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7ff ff78 	bl	8006d82 <_ZN12SocketServer14socket_receiveEPhtPm>
				if(recv_buffer[0] == 255 && recv_buffer[1] == 255)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 3445 	ldrb.w	r3, [r3, #1093]	; 0x445
 8006e98:	2bff      	cmp	r3, #255	; 0xff
 8006e9a:	d118      	bne.n	8006ece <_ZN12SocketServer16SocketServerTaskEv+0x82>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 3446 	ldrb.w	r3, [r3, #1094]	; 0x446
 8006ea2:	2bff      	cmp	r3, #255	; 0xff
 8006ea4:	d113      	bne.n	8006ece <_ZN12SocketServer16SocketServerTaskEv+0x82>
				{
					settings->get_curr_memory(send_buffer);
 8006ea6:	4b21      	ldr	r3, [pc, #132]	; (8006f2c <_ZN12SocketServer16SocketServerTaskEv+0xe0>)
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	331c      	adds	r3, #28
 8006eae:	4619      	mov	r1, r3
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	f7ff fbe5 	bl	8006680 <_ZN11SetUpHelper15get_curr_memoryEPh>
					socket_send(send_buffer, settings->msg_length);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f103 011c 	add.w	r1, r3, #28
 8006ebc:	4b1b      	ldr	r3, [pc, #108]	; (8006f2c <_ZN12SocketServer16SocketServerTaskEv+0xe0>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f8b3 342e 	ldrh.w	r3, [r3, #1070]	; 0x42e
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7ff ff78 	bl	8006dbc <_ZN12SocketServer11socket_sendEPht>
 8006ecc:	e024      	b.n	8006f18 <_ZN12SocketServer16SocketServerTaskEv+0xcc>
				} else
				{
					if(recv_buffer[0] == 255 && recv_buffer[1] == 254)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 3445 	ldrb.w	r3, [r3, #1093]	; 0x445
 8006ed4:	2bff      	cmp	r3, #255	; 0xff
 8006ed6:	d11f      	bne.n	8006f18 <_ZN12SocketServer16SocketServerTaskEv+0xcc>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 3446 	ldrb.w	r3, [r3, #1094]	; 0x446
 8006ede:	2bfe      	cmp	r3, #254	; 0xfe
 8006ee0:	d11a      	bne.n	8006f18 <_ZN12SocketServer16SocketServerTaskEv+0xcc>
					{
						if (settings->set(recv_buffer)){
 8006ee2:	4b12      	ldr	r3, [pc, #72]	; (8006f2c <_ZN12SocketServer16SocketServerTaskEv+0xe0>)
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f203 4345 	addw	r3, r3, #1093	; 0x445
 8006eec:	4619      	mov	r1, r3
 8006eee:	4610      	mov	r0, r2
 8006ef0:	f7ff fbf0 	bl	80066d4 <_ZN11SetUpHelper3setEPh>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d007      	beq.n	8006f0a <_ZN12SocketServer16SocketServerTaskEv+0xbe>
							socket_send(ok_status, STAUS_SIZE);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	3304      	adds	r3, #4
 8006efe:	2203      	movs	r2, #3
 8006f00:	4619      	mov	r1, r3
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7ff ff5a 	bl	8006dbc <_ZN12SocketServer11socket_sendEPht>
 8006f08:	e006      	b.n	8006f18 <_ZN12SocketServer16SocketServerTaskEv+0xcc>
						} else
						{
							socket_send(err_status, STAUS_SIZE);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	3307      	adds	r3, #7
 8006f0e:	2203      	movs	r2, #3
 8006f10:	4619      	mov	r1, r3
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f7ff ff52 	bl	8006dbc <_ZN12SocketServer11socket_sendEPht>
						}
					}
				}

				osDelay(100);
 8006f18:	2064      	movs	r0, #100	; 0x64
 8006f1a:	f008 faed 	bl	800f4f8 <osDelay>
			}
			close(remote_sock);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f00e fe76 	bl	8015c14 <lwip_close>
			remote_sock = accept(local_sock, (struct sockaddr *)&remotehost, (socklen_t *)&sockaddrsize);
 8006f28:	e797      	b.n	8006e5a <_ZN12SocketServer16SocketServerTaskEv+0xe>
 8006f2a:	bf00      	nop
 8006f2c:	200080bc 	.word	0x200080bc

08006f30 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4a07      	ldr	r2, [pc, #28]	; (8006f5c <vApplicationGetIdleTaskMemory+0x2c>)
 8006f40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	4a06      	ldr	r2, [pc, #24]	; (8006f60 <vApplicationGetIdleTaskMemory+0x30>)
 8006f46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2280      	movs	r2, #128	; 0x80
 8006f4c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8006f4e:	bf00      	nop
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	200080c0 	.word	0x200080c0
 8006f60:	20008114 	.word	0x20008114

08006f64 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4a07      	ldr	r2, [pc, #28]	; (8006f90 <vApplicationGetTimerTaskMemory+0x2c>)
 8006f74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	4a06      	ldr	r2, [pc, #24]	; (8006f94 <vApplicationGetTimerTaskMemory+0x30>)
 8006f7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f82:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8006f84:	bf00      	nop
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	20008314 	.word	0x20008314
 8006f94:	20008368 	.word	0x20008368

08006f98 <LWIP_Init>:
bool dhcp_setup_time_up;
/**
  * LwIP initialization function
  */

void LWIP_Init(bool use_dhcp) {
 8006f98:	b5b0      	push	{r4, r5, r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	71fb      	strb	r3, [r7, #7]
	if (!use_dhcp) {
 8006fa2:	79fb      	ldrb	r3, [r7, #7]
 8006fa4:	f083 0301 	eor.w	r3, r3, #1
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00e      	beq.n	8006fcc <LWIP_Init+0x34>
		LWIP_Init_static_routing(get_local_ip_ptr(), get_network_mask_ptr(), get_gateaway_ptr());
 8006fae:	f000 fed1 	bl	8007d54 <get_local_ip_ptr>
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	f000 fed8 	bl	8007d68 <get_network_mask_ptr>
 8006fb8:	4605      	mov	r5, r0
 8006fba:	f000 fedf 	bl	8007d7c <get_gateaway_ptr>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	4629      	mov	r1, r5
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f000 f833 	bl	8007030 <LWIP_Init_static_routing>

			LWIP_Init_static_routing((uint8_t*) ip, (uint8_t*) mask, (uint8_t*) gw);
		}

	}
}
 8006fca:	e024      	b.n	8007016 <LWIP_Init+0x7e>
		bool success = LWIP_Init_dynamic_routing();
 8006fcc:	f000 f846 	bl	800705c <LWIP_Init_dynamic_routing>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	75fb      	strb	r3, [r7, #23]
		if (!success) {
 8006fd4:	7dfb      	ldrb	r3, [r7, #23]
 8006fd6:	f083 0301 	eor.w	r3, r3, #1
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d01a      	beq.n	8007016 <LWIP_Init+0x7e>
			dhcp_release(&gnetif);
 8006fe0:	480f      	ldr	r0, [pc, #60]	; (8007020 <LWIP_Init+0x88>)
 8006fe2:	f019 ffc7 	bl	8020f74 <dhcp_release>
			dhcp_stop(&gnetif);
 8006fe6:	480e      	ldr	r0, [pc, #56]	; (8007020 <LWIP_Init+0x88>)
 8006fe8:	f019 ffd0 	bl	8020f8c <dhcp_stop>
			netif_remove(&gnetif);
 8006fec:	480c      	ldr	r0, [pc, #48]	; (8007020 <LWIP_Init+0x88>)
 8006fee:	f010 ff1f 	bl	8017e30 <netif_remove>
			uint8_t ip[] = DEFAULT_ROBOT_IP_ADRESS;
 8006ff2:	4b0c      	ldr	r3, [pc, #48]	; (8007024 <LWIP_Init+0x8c>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	613b      	str	r3, [r7, #16]
			uint8_t mask[] = DEFAULT_NETWORK_MASK;
 8006ff8:	4b0b      	ldr	r3, [pc, #44]	; (8007028 <LWIP_Init+0x90>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	60fb      	str	r3, [r7, #12]
			uint8_t gw[] = DEFAULT_GATEAWAY;
 8006ffe:	4b0b      	ldr	r3, [pc, #44]	; (800702c <LWIP_Init+0x94>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	60bb      	str	r3, [r7, #8]
			LWIP_Init_static_routing((uint8_t*) ip, (uint8_t*) mask, (uint8_t*) gw);
 8007004:	f107 0208 	add.w	r2, r7, #8
 8007008:	f107 010c 	add.w	r1, r7, #12
 800700c:	f107 0310 	add.w	r3, r7, #16
 8007010:	4618      	mov	r0, r3
 8007012:	f000 f80d 	bl	8007030 <LWIP_Init_static_routing>
}
 8007016:	bf00      	nop
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bdb0      	pop	{r4, r5, r7, pc}
 800701e:	bf00      	nop
 8007020:	2001331c 	.word	0x2001331c
 8007024:	08027be8 	.word	0x08027be8
 8007028:	08027bec 	.word	0x08027bec
 800702c:	08027bf0 	.word	0x08027bf0

08007030 <LWIP_Init_static_routing>:
void LWIP_Init_static_routing(uint8_t *local_ip, uint8_t *network_mask, uint8_t *gateaway)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
	tcpip_init( NULL, NULL );
 800703c:	2100      	movs	r1, #0
 800703e:	2000      	movs	r0, #0
 8007040:	f00f ff4e 	bl	8016ee0 <tcpip_init>
	setup_static_routing(local_ip, network_mask, gateaway);
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	68b9      	ldr	r1, [r7, #8]
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f000 f861 	bl	8007110 <setup_static_routing>
	setup_network_interface();
 800704e:	f000 f955 	bl	80072fc <setup_network_interface>
}
 8007052:	bf00      	nop
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
	...

0800705c <LWIP_Init_dynamic_routing>:

bool LWIP_Init_dynamic_routing(void)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	af00      	add	r7, sp, #0
	tcpip_init( NULL, NULL );
 8007060:	2100      	movs	r1, #0
 8007062:	2000      	movs	r0, #0
 8007064:	f00f ff3c 	bl	8016ee0 <tcpip_init>
	ipaddr.addr = 0;
 8007068:	4b1b      	ldr	r3, [pc, #108]	; (80070d8 <LWIP_Init_dynamic_routing+0x7c>)
 800706a:	2200      	movs	r2, #0
 800706c:	601a      	str	r2, [r3, #0]
	netmask.addr = 0;
 800706e:	4b1b      	ldr	r3, [pc, #108]	; (80070dc <LWIP_Init_dynamic_routing+0x80>)
 8007070:	2200      	movs	r2, #0
 8007072:	601a      	str	r2, [r3, #0]
	gw.addr = 0;
 8007074:	4b1a      	ldr	r3, [pc, #104]	; (80070e0 <LWIP_Init_dynamic_routing+0x84>)
 8007076:	2200      	movs	r2, #0
 8007078:	601a      	str	r2, [r3, #0]

	setup_network_interface();
 800707a:	f000 f93f 	bl	80072fc <setup_network_interface>

	dhcp_setup_time_up = 0;
 800707e:	4b19      	ldr	r3, [pc, #100]	; (80070e4 <LWIP_Init_dynamic_routing+0x88>)
 8007080:	2200      	movs	r2, #0
 8007082:	701a      	strb	r2, [r3, #0]
	dhcp_start(&gnetif);
 8007084:	4818      	ldr	r0, [pc, #96]	; (80070e8 <LWIP_Init_dynamic_routing+0x8c>)
 8007086:	f019 fa51 	bl	802052c <dhcp_start>

	osTimerStart(dhcp_setup_timerHandle, DHCP_SETUP_TIMEOUT);
 800708a:	4b18      	ldr	r3, [pc, #96]	; (80070ec <LWIP_Init_dynamic_routing+0x90>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f241 3188 	movw	r1, #5000	; 0x1388
 8007092:	4618      	mov	r0, r3
 8007094:	f008 fa78 	bl	800f588 <osTimerStart>

	while(!gnetif.ip_addr.addr && !dhcp_setup_time_up) {
 8007098:	e002      	b.n	80070a0 <LWIP_Init_dynamic_routing+0x44>
	  osDelay(1);
 800709a:	2001      	movs	r0, #1
 800709c:	f008 fa2c 	bl	800f4f8 <osDelay>
	while(!gnetif.ip_addr.addr && !dhcp_setup_time_up) {
 80070a0:	4b11      	ldr	r3, [pc, #68]	; (80070e8 <LWIP_Init_dynamic_routing+0x8c>)
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d106      	bne.n	80070b6 <LWIP_Init_dynamic_routing+0x5a>
 80070a8:	4b0e      	ldr	r3, [pc, #56]	; (80070e4 <LWIP_Init_dynamic_routing+0x88>)
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	f083 0301 	eor.w	r3, r3, #1
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1f1      	bne.n	800709a <LWIP_Init_dynamic_routing+0x3e>
	}

	if (!dhcp_setup_time_up) {
 80070b6:	4b0b      	ldr	r3, [pc, #44]	; (80070e4 <LWIP_Init_dynamic_routing+0x88>)
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	f083 0301 	eor.w	r3, r3, #1
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d006      	beq.n	80070d2 <LWIP_Init_dynamic_routing+0x76>
	  osTimerStop(dhcp_setup_timerHandle);
 80070c4:	4b09      	ldr	r3, [pc, #36]	; (80070ec <LWIP_Init_dynamic_routing+0x90>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f008 faa3 	bl	800f614 <osTimerStop>
	  return true;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e000      	b.n	80070d4 <LWIP_Init_dynamic_routing+0x78>
	}
	return false;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	20013350 	.word	0x20013350
 80070dc:	2001335c 	.word	0x2001335c
 80070e0:	20013360 	.word	0x20013360
 80070e4:	20013314 	.word	0x20013314
 80070e8:	2001331c 	.word	0x2001331c
 80070ec:	2001347c 	.word	0x2001347c

080070f0 <finish_dhcp_setup>:

void finish_dhcp_setup(void const * argument) {
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
	dhcp_setup_time_up = 1;
 80070f8:	4b04      	ldr	r3, [pc, #16]	; (800710c <finish_dhcp_setup+0x1c>)
 80070fa:	2201      	movs	r2, #1
 80070fc:	701a      	strb	r2, [r3, #0]
}
 80070fe:	bf00      	nop
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	20013314 	.word	0x20013314

08007110 <setup_static_routing>:

void setup_static_routing(uint8_t *local_ip, uint8_t *network_mask, uint8_t *gateaway) {
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
	  memcpy(IP_ADDRESS, local_ip, IP_SIZE);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	461a      	mov	r2, r3
 8007122:	4b70      	ldr	r3, [pc, #448]	; (80072e4 <setup_static_routing+0x1d4>)
 8007124:	601a      	str	r2, [r3, #0]
	  memcpy(NETMASK_ADDRESS, network_mask, IP_SIZE);
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	4b6e      	ldr	r3, [pc, #440]	; (80072e8 <setup_static_routing+0x1d8>)
 800712e:	601a      	str	r2, [r3, #0]
	  memcpy(GATEWAY_ADDRESS, gateaway, IP_SIZE);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	461a      	mov	r2, r3
 8007136:	4b6d      	ldr	r3, [pc, #436]	; (80072ec <setup_static_routing+0x1dc>)
 8007138:	601a      	str	r2, [r3, #0]
	  /* IP addresses initialization without DHCP (IPv4) */
	  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800713a:	4b6a      	ldr	r3, [pc, #424]	; (80072e4 <setup_static_routing+0x1d4>)
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	061a      	lsls	r2, r3, #24
 8007140:	4b68      	ldr	r3, [pc, #416]	; (80072e4 <setup_static_routing+0x1d4>)
 8007142:	785b      	ldrb	r3, [r3, #1]
 8007144:	041b      	lsls	r3, r3, #16
 8007146:	431a      	orrs	r2, r3
 8007148:	4b66      	ldr	r3, [pc, #408]	; (80072e4 <setup_static_routing+0x1d4>)
 800714a:	789b      	ldrb	r3, [r3, #2]
 800714c:	021b      	lsls	r3, r3, #8
 800714e:	4313      	orrs	r3, r2
 8007150:	4a64      	ldr	r2, [pc, #400]	; (80072e4 <setup_static_routing+0x1d4>)
 8007152:	78d2      	ldrb	r2, [r2, #3]
 8007154:	4313      	orrs	r3, r2
 8007156:	061a      	lsls	r2, r3, #24
 8007158:	4b62      	ldr	r3, [pc, #392]	; (80072e4 <setup_static_routing+0x1d4>)
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	0619      	lsls	r1, r3, #24
 800715e:	4b61      	ldr	r3, [pc, #388]	; (80072e4 <setup_static_routing+0x1d4>)
 8007160:	785b      	ldrb	r3, [r3, #1]
 8007162:	041b      	lsls	r3, r3, #16
 8007164:	4319      	orrs	r1, r3
 8007166:	4b5f      	ldr	r3, [pc, #380]	; (80072e4 <setup_static_routing+0x1d4>)
 8007168:	789b      	ldrb	r3, [r3, #2]
 800716a:	021b      	lsls	r3, r3, #8
 800716c:	430b      	orrs	r3, r1
 800716e:	495d      	ldr	r1, [pc, #372]	; (80072e4 <setup_static_routing+0x1d4>)
 8007170:	78c9      	ldrb	r1, [r1, #3]
 8007172:	430b      	orrs	r3, r1
 8007174:	021b      	lsls	r3, r3, #8
 8007176:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800717a:	431a      	orrs	r2, r3
 800717c:	4b59      	ldr	r3, [pc, #356]	; (80072e4 <setup_static_routing+0x1d4>)
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	0619      	lsls	r1, r3, #24
 8007182:	4b58      	ldr	r3, [pc, #352]	; (80072e4 <setup_static_routing+0x1d4>)
 8007184:	785b      	ldrb	r3, [r3, #1]
 8007186:	041b      	lsls	r3, r3, #16
 8007188:	4319      	orrs	r1, r3
 800718a:	4b56      	ldr	r3, [pc, #344]	; (80072e4 <setup_static_routing+0x1d4>)
 800718c:	789b      	ldrb	r3, [r3, #2]
 800718e:	021b      	lsls	r3, r3, #8
 8007190:	430b      	orrs	r3, r1
 8007192:	4954      	ldr	r1, [pc, #336]	; (80072e4 <setup_static_routing+0x1d4>)
 8007194:	78c9      	ldrb	r1, [r1, #3]
 8007196:	430b      	orrs	r3, r1
 8007198:	0a1b      	lsrs	r3, r3, #8
 800719a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800719e:	431a      	orrs	r2, r3
 80071a0:	4b50      	ldr	r3, [pc, #320]	; (80072e4 <setup_static_routing+0x1d4>)
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	0619      	lsls	r1, r3, #24
 80071a6:	4b4f      	ldr	r3, [pc, #316]	; (80072e4 <setup_static_routing+0x1d4>)
 80071a8:	785b      	ldrb	r3, [r3, #1]
 80071aa:	041b      	lsls	r3, r3, #16
 80071ac:	4319      	orrs	r1, r3
 80071ae:	4b4d      	ldr	r3, [pc, #308]	; (80072e4 <setup_static_routing+0x1d4>)
 80071b0:	789b      	ldrb	r3, [r3, #2]
 80071b2:	021b      	lsls	r3, r3, #8
 80071b4:	430b      	orrs	r3, r1
 80071b6:	494b      	ldr	r1, [pc, #300]	; (80072e4 <setup_static_routing+0x1d4>)
 80071b8:	78c9      	ldrb	r1, [r1, #3]
 80071ba:	430b      	orrs	r3, r1
 80071bc:	0e1b      	lsrs	r3, r3, #24
 80071be:	4313      	orrs	r3, r2
 80071c0:	4a4b      	ldr	r2, [pc, #300]	; (80072f0 <setup_static_routing+0x1e0>)
 80071c2:	6013      	str	r3, [r2, #0]
	  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80071c4:	4b48      	ldr	r3, [pc, #288]	; (80072e8 <setup_static_routing+0x1d8>)
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	061a      	lsls	r2, r3, #24
 80071ca:	4b47      	ldr	r3, [pc, #284]	; (80072e8 <setup_static_routing+0x1d8>)
 80071cc:	785b      	ldrb	r3, [r3, #1]
 80071ce:	041b      	lsls	r3, r3, #16
 80071d0:	431a      	orrs	r2, r3
 80071d2:	4b45      	ldr	r3, [pc, #276]	; (80072e8 <setup_static_routing+0x1d8>)
 80071d4:	789b      	ldrb	r3, [r3, #2]
 80071d6:	021b      	lsls	r3, r3, #8
 80071d8:	4313      	orrs	r3, r2
 80071da:	4a43      	ldr	r2, [pc, #268]	; (80072e8 <setup_static_routing+0x1d8>)
 80071dc:	78d2      	ldrb	r2, [r2, #3]
 80071de:	4313      	orrs	r3, r2
 80071e0:	061a      	lsls	r2, r3, #24
 80071e2:	4b41      	ldr	r3, [pc, #260]	; (80072e8 <setup_static_routing+0x1d8>)
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	0619      	lsls	r1, r3, #24
 80071e8:	4b3f      	ldr	r3, [pc, #252]	; (80072e8 <setup_static_routing+0x1d8>)
 80071ea:	785b      	ldrb	r3, [r3, #1]
 80071ec:	041b      	lsls	r3, r3, #16
 80071ee:	4319      	orrs	r1, r3
 80071f0:	4b3d      	ldr	r3, [pc, #244]	; (80072e8 <setup_static_routing+0x1d8>)
 80071f2:	789b      	ldrb	r3, [r3, #2]
 80071f4:	021b      	lsls	r3, r3, #8
 80071f6:	430b      	orrs	r3, r1
 80071f8:	493b      	ldr	r1, [pc, #236]	; (80072e8 <setup_static_routing+0x1d8>)
 80071fa:	78c9      	ldrb	r1, [r1, #3]
 80071fc:	430b      	orrs	r3, r1
 80071fe:	021b      	lsls	r3, r3, #8
 8007200:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007204:	431a      	orrs	r2, r3
 8007206:	4b38      	ldr	r3, [pc, #224]	; (80072e8 <setup_static_routing+0x1d8>)
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	0619      	lsls	r1, r3, #24
 800720c:	4b36      	ldr	r3, [pc, #216]	; (80072e8 <setup_static_routing+0x1d8>)
 800720e:	785b      	ldrb	r3, [r3, #1]
 8007210:	041b      	lsls	r3, r3, #16
 8007212:	4319      	orrs	r1, r3
 8007214:	4b34      	ldr	r3, [pc, #208]	; (80072e8 <setup_static_routing+0x1d8>)
 8007216:	789b      	ldrb	r3, [r3, #2]
 8007218:	021b      	lsls	r3, r3, #8
 800721a:	430b      	orrs	r3, r1
 800721c:	4932      	ldr	r1, [pc, #200]	; (80072e8 <setup_static_routing+0x1d8>)
 800721e:	78c9      	ldrb	r1, [r1, #3]
 8007220:	430b      	orrs	r3, r1
 8007222:	0a1b      	lsrs	r3, r3, #8
 8007224:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007228:	431a      	orrs	r2, r3
 800722a:	4b2f      	ldr	r3, [pc, #188]	; (80072e8 <setup_static_routing+0x1d8>)
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	0619      	lsls	r1, r3, #24
 8007230:	4b2d      	ldr	r3, [pc, #180]	; (80072e8 <setup_static_routing+0x1d8>)
 8007232:	785b      	ldrb	r3, [r3, #1]
 8007234:	041b      	lsls	r3, r3, #16
 8007236:	4319      	orrs	r1, r3
 8007238:	4b2b      	ldr	r3, [pc, #172]	; (80072e8 <setup_static_routing+0x1d8>)
 800723a:	789b      	ldrb	r3, [r3, #2]
 800723c:	021b      	lsls	r3, r3, #8
 800723e:	430b      	orrs	r3, r1
 8007240:	4929      	ldr	r1, [pc, #164]	; (80072e8 <setup_static_routing+0x1d8>)
 8007242:	78c9      	ldrb	r1, [r1, #3]
 8007244:	430b      	orrs	r3, r1
 8007246:	0e1b      	lsrs	r3, r3, #24
 8007248:	4313      	orrs	r3, r2
 800724a:	4a2a      	ldr	r2, [pc, #168]	; (80072f4 <setup_static_routing+0x1e4>)
 800724c:	6013      	str	r3, [r2, #0]
	  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800724e:	4b27      	ldr	r3, [pc, #156]	; (80072ec <setup_static_routing+0x1dc>)
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	061a      	lsls	r2, r3, #24
 8007254:	4b25      	ldr	r3, [pc, #148]	; (80072ec <setup_static_routing+0x1dc>)
 8007256:	785b      	ldrb	r3, [r3, #1]
 8007258:	041b      	lsls	r3, r3, #16
 800725a:	431a      	orrs	r2, r3
 800725c:	4b23      	ldr	r3, [pc, #140]	; (80072ec <setup_static_routing+0x1dc>)
 800725e:	789b      	ldrb	r3, [r3, #2]
 8007260:	021b      	lsls	r3, r3, #8
 8007262:	4313      	orrs	r3, r2
 8007264:	4a21      	ldr	r2, [pc, #132]	; (80072ec <setup_static_routing+0x1dc>)
 8007266:	78d2      	ldrb	r2, [r2, #3]
 8007268:	4313      	orrs	r3, r2
 800726a:	061a      	lsls	r2, r3, #24
 800726c:	4b1f      	ldr	r3, [pc, #124]	; (80072ec <setup_static_routing+0x1dc>)
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	0619      	lsls	r1, r3, #24
 8007272:	4b1e      	ldr	r3, [pc, #120]	; (80072ec <setup_static_routing+0x1dc>)
 8007274:	785b      	ldrb	r3, [r3, #1]
 8007276:	041b      	lsls	r3, r3, #16
 8007278:	4319      	orrs	r1, r3
 800727a:	4b1c      	ldr	r3, [pc, #112]	; (80072ec <setup_static_routing+0x1dc>)
 800727c:	789b      	ldrb	r3, [r3, #2]
 800727e:	021b      	lsls	r3, r3, #8
 8007280:	430b      	orrs	r3, r1
 8007282:	491a      	ldr	r1, [pc, #104]	; (80072ec <setup_static_routing+0x1dc>)
 8007284:	78c9      	ldrb	r1, [r1, #3]
 8007286:	430b      	orrs	r3, r1
 8007288:	021b      	lsls	r3, r3, #8
 800728a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800728e:	431a      	orrs	r2, r3
 8007290:	4b16      	ldr	r3, [pc, #88]	; (80072ec <setup_static_routing+0x1dc>)
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	0619      	lsls	r1, r3, #24
 8007296:	4b15      	ldr	r3, [pc, #84]	; (80072ec <setup_static_routing+0x1dc>)
 8007298:	785b      	ldrb	r3, [r3, #1]
 800729a:	041b      	lsls	r3, r3, #16
 800729c:	4319      	orrs	r1, r3
 800729e:	4b13      	ldr	r3, [pc, #76]	; (80072ec <setup_static_routing+0x1dc>)
 80072a0:	789b      	ldrb	r3, [r3, #2]
 80072a2:	021b      	lsls	r3, r3, #8
 80072a4:	430b      	orrs	r3, r1
 80072a6:	4911      	ldr	r1, [pc, #68]	; (80072ec <setup_static_routing+0x1dc>)
 80072a8:	78c9      	ldrb	r1, [r1, #3]
 80072aa:	430b      	orrs	r3, r1
 80072ac:	0a1b      	lsrs	r3, r3, #8
 80072ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80072b2:	431a      	orrs	r2, r3
 80072b4:	4b0d      	ldr	r3, [pc, #52]	; (80072ec <setup_static_routing+0x1dc>)
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	0619      	lsls	r1, r3, #24
 80072ba:	4b0c      	ldr	r3, [pc, #48]	; (80072ec <setup_static_routing+0x1dc>)
 80072bc:	785b      	ldrb	r3, [r3, #1]
 80072be:	041b      	lsls	r3, r3, #16
 80072c0:	4319      	orrs	r1, r3
 80072c2:	4b0a      	ldr	r3, [pc, #40]	; (80072ec <setup_static_routing+0x1dc>)
 80072c4:	789b      	ldrb	r3, [r3, #2]
 80072c6:	021b      	lsls	r3, r3, #8
 80072c8:	430b      	orrs	r3, r1
 80072ca:	4908      	ldr	r1, [pc, #32]	; (80072ec <setup_static_routing+0x1dc>)
 80072cc:	78c9      	ldrb	r1, [r1, #3]
 80072ce:	430b      	orrs	r3, r1
 80072d0:	0e1b      	lsrs	r3, r3, #24
 80072d2:	4313      	orrs	r3, r2
 80072d4:	4a08      	ldr	r2, [pc, #32]	; (80072f8 <setup_static_routing+0x1e8>)
 80072d6:	6013      	str	r3, [r2, #0]
}
 80072d8:	bf00      	nop
 80072da:	3714      	adds	r7, #20
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	20013358 	.word	0x20013358
 80072e8:	20013354 	.word	0x20013354
 80072ec:	20013318 	.word	0x20013318
 80072f0:	20013350 	.word	0x20013350
 80072f4:	2001335c 	.word	0x2001335c
 80072f8:	20013360 	.word	0x20013360

080072fc <setup_network_interface>:

void setup_network_interface() {
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af04      	add	r7, sp, #16
	  /* add the network interface (IPv4/IPv6) with RTOS */
	  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007302:	4b11      	ldr	r3, [pc, #68]	; (8007348 <setup_network_interface+0x4c>)
 8007304:	9302      	str	r3, [sp, #8]
 8007306:	4b11      	ldr	r3, [pc, #68]	; (800734c <setup_network_interface+0x50>)
 8007308:	9301      	str	r3, [sp, #4]
 800730a:	2300      	movs	r3, #0
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	4b10      	ldr	r3, [pc, #64]	; (8007350 <setup_network_interface+0x54>)
 8007310:	4a10      	ldr	r2, [pc, #64]	; (8007354 <setup_network_interface+0x58>)
 8007312:	4911      	ldr	r1, [pc, #68]	; (8007358 <setup_network_interface+0x5c>)
 8007314:	4811      	ldr	r0, [pc, #68]	; (800735c <setup_network_interface+0x60>)
 8007316:	f010 fbd5 	bl	8017ac4 <netif_add>
	  /* Registers the default network interface */
	  netif_set_default(&gnetif);
 800731a:	4810      	ldr	r0, [pc, #64]	; (800735c <setup_network_interface+0x60>)
 800731c:	f010 fdd6 	bl	8017ecc <netif_set_default>

	  if (netif_is_link_up(&gnetif))
 8007320:	4b0e      	ldr	r3, [pc, #56]	; (800735c <setup_network_interface+0x60>)
 8007322:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007326:	089b      	lsrs	r3, r3, #2
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <setup_network_interface+0x3e>
	  {
		/* When the netif is fully configured this function must be called */
		netif_set_up(&gnetif);
 8007332:	480a      	ldr	r0, [pc, #40]	; (800735c <setup_network_interface+0x60>)
 8007334:	f010 fdda 	bl	8017eec <netif_set_up>
	  else
	  {
		/* When the netif link is down this function must be called */
		netif_set_down(&gnetif);
	  }
}
 8007338:	e002      	b.n	8007340 <setup_network_interface+0x44>
		netif_set_down(&gnetif);
 800733a:	4808      	ldr	r0, [pc, #32]	; (800735c <setup_network_interface+0x60>)
 800733c:	f010 fe42 	bl	8017fc4 <netif_set_down>
}
 8007340:	bf00      	nop
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	08016df1 	.word	0x08016df1
 800734c:	0800f2a5 	.word	0x0800f2a5
 8007350:	20013360 	.word	0x20013360
 8007354:	2001335c 	.word	0x2001335c
 8007358:	20013350 	.word	0x20013350
 800735c:	2001331c 	.word	0x2001331c

08007360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007360:	b5b0      	push	{r4, r5, r7, lr}
 8007362:	b08a      	sub	sp, #40	; 0x28
 8007364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	memory_setup();
 8007366:	f000 fc21 	bl	8007bac <memory_setup>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800736a:	f001 f98f 	bl	800868c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800736e:	f000 f83d 	bl	80073ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007372:	f000 fae5 	bl	8007940 <MX_GPIO_Init>
  MX_RTC_Init();
 8007376:	f000 f8e9 	bl	800754c <MX_RTC_Init>
  MX_TIM1_Init();
 800737a:	f000 f92d 	bl	80075d8 <MX_TIM1_Init>
  MX_TIM8_Init();
 800737e:	f000 fa87 	bl	8007890 <MX_TIM8_Init>
  MX_TIM3_Init();
 8007382:	f000 f981 	bl	8007688 <MX_TIM3_Init>
  MX_TIM4_Init();
 8007386:	f000 fa01 	bl	800778c <MX_TIM4_Init>
  MX_I2C1_Init();
 800738a:	f000 f8b1 	bl	80074f0 <MX_I2C1_Init>
  MX_SDIO_SD_Init();
 800738e:	f000 f903 	bl	8007598 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8007392:	f007 fa27 	bl	800e7e4 <MX_FATFS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8007396:	4b11      	ldr	r3, [pc, #68]	; (80073dc <main+0x7c>)
 8007398:	f107 040c 	add.w	r4, r7, #12
 800739c:	461d      	mov	r5, r3
 800739e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80073a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80073aa:	f107 030c 	add.w	r3, r7, #12
 80073ae:	2100      	movs	r1, #0
 80073b0:	4618      	mov	r0, r3
 80073b2:	f008 f855 	bl	800f460 <osThreadCreate>
 80073b6:	4602      	mov	r2, r0
 80073b8:	4b09      	ldr	r3, [pc, #36]	; (80073e0 <main+0x80>)
 80073ba:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osTimerDef(dhcp_setup_timer, finish_dhcp_setup);
 80073bc:	4b09      	ldr	r3, [pc, #36]	; (80073e4 <main+0x84>)
 80073be:	607b      	str	r3, [r7, #4]
 80073c0:	2300      	movs	r3, #0
 80073c2:	60bb      	str	r3, [r7, #8]
  dhcp_setup_timerHandle = osTimerCreate(osTimer(dhcp_setup_timer), osTimerOnce, NULL);
 80073c4:	1d3b      	adds	r3, r7, #4
 80073c6:	2200      	movs	r2, #0
 80073c8:	2100      	movs	r1, #0
 80073ca:	4618      	mov	r0, r3
 80073cc:	f008 f8a8 	bl	800f520 <osTimerCreate>
 80073d0:	4602      	mov	r2, r0
 80073d2:	4b05      	ldr	r3, [pc, #20]	; (80073e8 <main+0x88>)
 80073d4:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80073d6:	f008 f820 	bl	800f41a <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80073da:	e7fe      	b.n	80073da <main+0x7a>
 80073dc:	08027c00 	.word	0x08027c00
 80073e0:	20013364 	.word	0x20013364
 80073e4:	080070f1 	.word	0x080070f1
 80073e8:	2001347c 	.word	0x2001347c

080073ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b098      	sub	sp, #96	; 0x60
 80073f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80073f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80073f6:	2230      	movs	r2, #48	; 0x30
 80073f8:	2100      	movs	r1, #0
 80073fa:	4618      	mov	r0, r3
 80073fc:	f01f fa1c 	bl	8026838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007400:	f107 031c 	add.w	r3, r7, #28
 8007404:	2200      	movs	r2, #0
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	605a      	str	r2, [r3, #4]
 800740a:	609a      	str	r2, [r3, #8]
 800740c:	60da      	str	r2, [r3, #12]
 800740e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007410:	f107 030c 	add.w	r3, r7, #12
 8007414:	2200      	movs	r2, #0
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	605a      	str	r2, [r3, #4]
 800741a:	609a      	str	r2, [r3, #8]
 800741c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800741e:	2300      	movs	r3, #0
 8007420:	60bb      	str	r3, [r7, #8]
 8007422:	4b31      	ldr	r3, [pc, #196]	; (80074e8 <SystemClock_Config+0xfc>)
 8007424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007426:	4a30      	ldr	r2, [pc, #192]	; (80074e8 <SystemClock_Config+0xfc>)
 8007428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800742c:	6413      	str	r3, [r2, #64]	; 0x40
 800742e:	4b2e      	ldr	r3, [pc, #184]	; (80074e8 <SystemClock_Config+0xfc>)
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007436:	60bb      	str	r3, [r7, #8]
 8007438:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800743a:	2300      	movs	r3, #0
 800743c:	607b      	str	r3, [r7, #4]
 800743e:	4b2b      	ldr	r3, [pc, #172]	; (80074ec <SystemClock_Config+0x100>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a2a      	ldr	r2, [pc, #168]	; (80074ec <SystemClock_Config+0x100>)
 8007444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	4b28      	ldr	r3, [pc, #160]	; (80074ec <SystemClock_Config+0x100>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007452:	607b      	str	r3, [r7, #4]
 8007454:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8007456:	230a      	movs	r3, #10
 8007458:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800745a:	2301      	movs	r3, #1
 800745c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800745e:	2310      	movs	r3, #16
 8007460:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007462:	2301      	movs	r3, #1
 8007464:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007466:	2302      	movs	r3, #2
 8007468:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800746a:	2300      	movs	r3, #0
 800746c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800746e:	2308      	movs	r3, #8
 8007470:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007472:	23a8      	movs	r3, #168	; 0xa8
 8007474:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007476:	2302      	movs	r3, #2
 8007478:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800747a:	2307      	movs	r3, #7
 800747c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800747e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007482:	4618      	mov	r0, r3
 8007484:	f003 fdd4 	bl	800b030 <HAL_RCC_OscConfig>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d001      	beq.n	8007492 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800748e:	f000 fb86 	bl	8007b9e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007492:	230f      	movs	r3, #15
 8007494:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007496:	2302      	movs	r3, #2
 8007498:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800749a:	2300      	movs	r3, #0
 800749c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800749e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80074a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80074a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80074aa:	f107 031c 	add.w	r3, r7, #28
 80074ae:	2105      	movs	r1, #5
 80074b0:	4618      	mov	r0, r3
 80074b2:	f004 f82d 	bl	800b510 <HAL_RCC_ClockConfig>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d001      	beq.n	80074c0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80074bc:	f000 fb6f 	bl	8007b9e <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80074c0:	2302      	movs	r3, #2
 80074c2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80074c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074c8:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80074ca:	f107 030c 	add.w	r3, r7, #12
 80074ce:	4618      	mov	r0, r3
 80074d0:	f004 fa2e 	bl	800b930 <HAL_RCCEx_PeriphCLKConfig>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80074da:	f000 fb60 	bl	8007b9e <Error_Handler>
  }
}
 80074de:	bf00      	nop
 80074e0:	3760      	adds	r7, #96	; 0x60
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	40023800 	.word	0x40023800
 80074ec:	40007000 	.word	0x40007000

080074f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80074f4:	4b12      	ldr	r3, [pc, #72]	; (8007540 <MX_I2C1_Init+0x50>)
 80074f6:	4a13      	ldr	r2, [pc, #76]	; (8007544 <MX_I2C1_Init+0x54>)
 80074f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80074fa:	4b11      	ldr	r3, [pc, #68]	; (8007540 <MX_I2C1_Init+0x50>)
 80074fc:	4a12      	ldr	r2, [pc, #72]	; (8007548 <MX_I2C1_Init+0x58>)
 80074fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007500:	4b0f      	ldr	r3, [pc, #60]	; (8007540 <MX_I2C1_Init+0x50>)
 8007502:	2200      	movs	r2, #0
 8007504:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007506:	4b0e      	ldr	r3, [pc, #56]	; (8007540 <MX_I2C1_Init+0x50>)
 8007508:	2200      	movs	r2, #0
 800750a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800750c:	4b0c      	ldr	r3, [pc, #48]	; (8007540 <MX_I2C1_Init+0x50>)
 800750e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007512:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007514:	4b0a      	ldr	r3, [pc, #40]	; (8007540 <MX_I2C1_Init+0x50>)
 8007516:	2200      	movs	r2, #0
 8007518:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800751a:	4b09      	ldr	r3, [pc, #36]	; (8007540 <MX_I2C1_Init+0x50>)
 800751c:	2200      	movs	r2, #0
 800751e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007520:	4b07      	ldr	r3, [pc, #28]	; (8007540 <MX_I2C1_Init+0x50>)
 8007522:	2200      	movs	r2, #0
 8007524:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007526:	4b06      	ldr	r3, [pc, #24]	; (8007540 <MX_I2C1_Init+0x50>)
 8007528:	2200      	movs	r2, #0
 800752a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800752c:	4804      	ldr	r0, [pc, #16]	; (8007540 <MX_I2C1_Init+0x50>)
 800752e:	f002 fca1 	bl	8009e74 <HAL_I2C_Init>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007538:	f000 fb31 	bl	8007b9e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800753c:	bf00      	nop
 800753e:	bd80      	pop	{r7, pc}
 8007540:	200133e8 	.word	0x200133e8
 8007544:	40005400 	.word	0x40005400
 8007548:	000186a0 	.word	0x000186a0

0800754c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8007550:	4b0f      	ldr	r3, [pc, #60]	; (8007590 <MX_RTC_Init+0x44>)
 8007552:	4a10      	ldr	r2, [pc, #64]	; (8007594 <MX_RTC_Init+0x48>)
 8007554:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007556:	4b0e      	ldr	r3, [pc, #56]	; (8007590 <MX_RTC_Init+0x44>)
 8007558:	2200      	movs	r2, #0
 800755a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800755c:	4b0c      	ldr	r3, [pc, #48]	; (8007590 <MX_RTC_Init+0x44>)
 800755e:	227f      	movs	r2, #127	; 0x7f
 8007560:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8007562:	4b0b      	ldr	r3, [pc, #44]	; (8007590 <MX_RTC_Init+0x44>)
 8007564:	22ff      	movs	r2, #255	; 0xff
 8007566:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007568:	4b09      	ldr	r3, [pc, #36]	; (8007590 <MX_RTC_Init+0x44>)
 800756a:	2200      	movs	r2, #0
 800756c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800756e:	4b08      	ldr	r3, [pc, #32]	; (8007590 <MX_RTC_Init+0x44>)
 8007570:	2200      	movs	r2, #0
 8007572:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007574:	4b06      	ldr	r3, [pc, #24]	; (8007590 <MX_RTC_Init+0x44>)
 8007576:	2200      	movs	r2, #0
 8007578:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800757a:	4805      	ldr	r0, [pc, #20]	; (8007590 <MX_RTC_Init+0x44>)
 800757c:	f004 faba 	bl	800baf4 <HAL_RTC_Init>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8007586:	f000 fb0a 	bl	8007b9e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800758a:	bf00      	nop
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	20013480 	.word	0x20013480
 8007594:	40002800 	.word	0x40002800

08007598 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8007598:	b480      	push	{r7}
 800759a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800759c:	4b0c      	ldr	r3, [pc, #48]	; (80075d0 <MX_SDIO_SD_Init+0x38>)
 800759e:	4a0d      	ldr	r2, [pc, #52]	; (80075d4 <MX_SDIO_SD_Init+0x3c>)
 80075a0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80075a2:	4b0b      	ldr	r3, [pc, #44]	; (80075d0 <MX_SDIO_SD_Init+0x38>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80075a8:	4b09      	ldr	r3, [pc, #36]	; (80075d0 <MX_SDIO_SD_Init+0x38>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80075ae:	4b08      	ldr	r3, [pc, #32]	; (80075d0 <MX_SDIO_SD_Init+0x38>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80075b4:	4b06      	ldr	r3, [pc, #24]	; (80075d0 <MX_SDIO_SD_Init+0x38>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80075ba:	4b05      	ldr	r3, [pc, #20]	; (80075d0 <MX_SDIO_SD_Init+0x38>)
 80075bc:	2200      	movs	r2, #0
 80075be:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80075c0:	4b03      	ldr	r3, [pc, #12]	; (80075d0 <MX_SDIO_SD_Init+0x38>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80075c6:	bf00      	nop
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	200134e0 	.word	0x200134e0
 80075d4:	40012c00 	.word	0x40012c00

080075d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08c      	sub	sp, #48	; 0x30
 80075dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80075de:	f107 030c 	add.w	r3, r7, #12
 80075e2:	2224      	movs	r2, #36	; 0x24
 80075e4:	2100      	movs	r1, #0
 80075e6:	4618      	mov	r0, r3
 80075e8:	f01f f926 	bl	8026838 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80075ec:	1d3b      	adds	r3, r7, #4
 80075ee:	2200      	movs	r2, #0
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80075f4:	4b22      	ldr	r3, [pc, #136]	; (8007680 <MX_TIM1_Init+0xa8>)
 80075f6:	4a23      	ldr	r2, [pc, #140]	; (8007684 <MX_TIM1_Init+0xac>)
 80075f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80075fa:	4b21      	ldr	r3, [pc, #132]	; (8007680 <MX_TIM1_Init+0xa8>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007600:	4b1f      	ldr	r3, [pc, #124]	; (8007680 <MX_TIM1_Init+0xa8>)
 8007602:	2200      	movs	r2, #0
 8007604:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8007606:	4b1e      	ldr	r3, [pc, #120]	; (8007680 <MX_TIM1_Init+0xa8>)
 8007608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800760c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800760e:	4b1c      	ldr	r3, [pc, #112]	; (8007680 <MX_TIM1_Init+0xa8>)
 8007610:	2200      	movs	r2, #0
 8007612:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007614:	4b1a      	ldr	r3, [pc, #104]	; (8007680 <MX_TIM1_Init+0xa8>)
 8007616:	2200      	movs	r2, #0
 8007618:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800761a:	4b19      	ldr	r3, [pc, #100]	; (8007680 <MX_TIM1_Init+0xa8>)
 800761c:	2200      	movs	r2, #0
 800761e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007620:	2303      	movs	r3, #3
 8007622:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007624:	2300      	movs	r3, #0
 8007626:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007628:	2301      	movs	r3, #1
 800762a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800762c:	2300      	movs	r3, #0
 800762e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8007630:	2300      	movs	r3, #0
 8007632:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8007634:	2302      	movs	r3, #2
 8007636:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007638:	2301      	movs	r3, #1
 800763a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800763c:	2300      	movs	r3, #0
 800763e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8007640:	2300      	movs	r3, #0
 8007642:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8007644:	f107 030c 	add.w	r3, r7, #12
 8007648:	4619      	mov	r1, r3
 800764a:	480d      	ldr	r0, [pc, #52]	; (8007680 <MX_TIM1_Init+0xa8>)
 800764c:	f005 fc5e 	bl	800cf0c <HAL_TIM_Encoder_Init>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8007656:	f000 faa2 	bl	8007b9e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800765a:	2300      	movs	r3, #0
 800765c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800765e:	2300      	movs	r3, #0
 8007660:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007662:	1d3b      	adds	r3, r7, #4
 8007664:	4619      	mov	r1, r3
 8007666:	4806      	ldr	r0, [pc, #24]	; (8007680 <MX_TIM1_Init+0xa8>)
 8007668:	f006 fad8 	bl	800dc1c <HAL_TIMEx_MasterConfigSynchronization>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8007672:	f000 fa94 	bl	8007b9e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007676:	bf00      	nop
 8007678:	3730      	adds	r7, #48	; 0x30
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	200134a0 	.word	0x200134a0
 8007684:	40010000 	.word	0x40010000

08007688 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b08e      	sub	sp, #56	; 0x38
 800768c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800768e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	605a      	str	r2, [r3, #4]
 8007698:	609a      	str	r2, [r3, #8]
 800769a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800769c:	f107 0320 	add.w	r3, r7, #32
 80076a0:	2200      	movs	r2, #0
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80076a6:	1d3b      	adds	r3, r7, #4
 80076a8:	2200      	movs	r2, #0
 80076aa:	601a      	str	r2, [r3, #0]
 80076ac:	605a      	str	r2, [r3, #4]
 80076ae:	609a      	str	r2, [r3, #8]
 80076b0:	60da      	str	r2, [r3, #12]
 80076b2:	611a      	str	r2, [r3, #16]
 80076b4:	615a      	str	r2, [r3, #20]
 80076b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80076b8:	4b32      	ldr	r3, [pc, #200]	; (8007784 <MX_TIM3_Init+0xfc>)
 80076ba:	4a33      	ldr	r2, [pc, #204]	; (8007788 <MX_TIM3_Init+0x100>)
 80076bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 40;
 80076be:	4b31      	ldr	r3, [pc, #196]	; (8007784 <MX_TIM3_Init+0xfc>)
 80076c0:	2228      	movs	r2, #40	; 0x28
 80076c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80076c4:	4b2f      	ldr	r3, [pc, #188]	; (8007784 <MX_TIM3_Init+0xfc>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 256;
 80076ca:	4b2e      	ldr	r3, [pc, #184]	; (8007784 <MX_TIM3_Init+0xfc>)
 80076cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80076d2:	4b2c      	ldr	r3, [pc, #176]	; (8007784 <MX_TIM3_Init+0xfc>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80076d8:	4b2a      	ldr	r3, [pc, #168]	; (8007784 <MX_TIM3_Init+0xfc>)
 80076da:	2200      	movs	r2, #0
 80076dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80076de:	4829      	ldr	r0, [pc, #164]	; (8007784 <MX_TIM3_Init+0xfc>)
 80076e0:	f005 fb52 	bl	800cd88 <HAL_TIM_Base_Init>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80076ea:	f000 fa58 	bl	8007b9e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80076ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80076f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80076f8:	4619      	mov	r1, r3
 80076fa:	4822      	ldr	r0, [pc, #136]	; (8007784 <MX_TIM3_Init+0xfc>)
 80076fc:	f005 fe9e 	bl	800d43c <HAL_TIM_ConfigClockSource>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d001      	beq.n	800770a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8007706:	f000 fa4a 	bl	8007b9e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800770a:	481e      	ldr	r0, [pc, #120]	; (8007784 <MX_TIM3_Init+0xfc>)
 800770c:	f005 fb8b 	bl	800ce26 <HAL_TIM_PWM_Init>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8007716:	f000 fa42 	bl	8007b9e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800771a:	2300      	movs	r3, #0
 800771c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800771e:	2300      	movs	r3, #0
 8007720:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007722:	f107 0320 	add.w	r3, r7, #32
 8007726:	4619      	mov	r1, r3
 8007728:	4816      	ldr	r0, [pc, #88]	; (8007784 <MX_TIM3_Init+0xfc>)
 800772a:	f006 fa77 	bl	800dc1c <HAL_TIMEx_MasterConfigSynchronization>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8007734:	f000 fa33 	bl	8007b9e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007738:	2360      	movs	r3, #96	; 0x60
 800773a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800773c:	2300      	movs	r3, #0
 800773e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007740:	2300      	movs	r3, #0
 8007742:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007744:	2300      	movs	r3, #0
 8007746:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007748:	1d3b      	adds	r3, r7, #4
 800774a:	2208      	movs	r2, #8
 800774c:	4619      	mov	r1, r3
 800774e:	480d      	ldr	r0, [pc, #52]	; (8007784 <MX_TIM3_Init+0xfc>)
 8007750:	f005 fdae 	bl	800d2b0 <HAL_TIM_PWM_ConfigChannel>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800775a:	f000 fa20 	bl	8007b9e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800775e:	1d3b      	adds	r3, r7, #4
 8007760:	220c      	movs	r2, #12
 8007762:	4619      	mov	r1, r3
 8007764:	4807      	ldr	r0, [pc, #28]	; (8007784 <MX_TIM3_Init+0xfc>)
 8007766:	f005 fda3 	bl	800d2b0 <HAL_TIM_PWM_ConfigChannel>
 800776a:	4603      	mov	r3, r0
 800776c:	2b00      	cmp	r3, #0
 800776e:	d001      	beq.n	8007774 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8007770:	f000 fa15 	bl	8007b9e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8007774:	4803      	ldr	r0, [pc, #12]	; (8007784 <MX_TIM3_Init+0xfc>)
 8007776:	f000 fd97 	bl	80082a8 <HAL_TIM_MspPostInit>

}
 800777a:	bf00      	nop
 800777c:	3738      	adds	r7, #56	; 0x38
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	2001343c 	.word	0x2001343c
 8007788:	40000400 	.word	0x40000400

0800778c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b08e      	sub	sp, #56	; 0x38
 8007790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007792:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007796:	2200      	movs	r2, #0
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	605a      	str	r2, [r3, #4]
 800779c:	609a      	str	r2, [r3, #8]
 800779e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077a0:	f107 0320 	add.w	r3, r7, #32
 80077a4:	2200      	movs	r2, #0
 80077a6:	601a      	str	r2, [r3, #0]
 80077a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80077aa:	1d3b      	adds	r3, r7, #4
 80077ac:	2200      	movs	r2, #0
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	605a      	str	r2, [r3, #4]
 80077b2:	609a      	str	r2, [r3, #8]
 80077b4:	60da      	str	r2, [r3, #12]
 80077b6:	611a      	str	r2, [r3, #16]
 80077b8:	615a      	str	r2, [r3, #20]
 80077ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80077bc:	4b32      	ldr	r3, [pc, #200]	; (8007888 <MX_TIM4_Init+0xfc>)
 80077be:	4a33      	ldr	r2, [pc, #204]	; (800788c <MX_TIM4_Init+0x100>)
 80077c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 40;
 80077c2:	4b31      	ldr	r3, [pc, #196]	; (8007888 <MX_TIM4_Init+0xfc>)
 80077c4:	2228      	movs	r2, #40	; 0x28
 80077c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077c8:	4b2f      	ldr	r3, [pc, #188]	; (8007888 <MX_TIM4_Init+0xfc>)
 80077ca:	2200      	movs	r2, #0
 80077cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 256;
 80077ce:	4b2e      	ldr	r3, [pc, #184]	; (8007888 <MX_TIM4_Init+0xfc>)
 80077d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80077d6:	4b2c      	ldr	r3, [pc, #176]	; (8007888 <MX_TIM4_Init+0xfc>)
 80077d8:	2200      	movs	r2, #0
 80077da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80077dc:	4b2a      	ldr	r3, [pc, #168]	; (8007888 <MX_TIM4_Init+0xfc>)
 80077de:	2200      	movs	r2, #0
 80077e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80077e2:	4829      	ldr	r0, [pc, #164]	; (8007888 <MX_TIM4_Init+0xfc>)
 80077e4:	f005 fad0 	bl	800cd88 <HAL_TIM_Base_Init>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80077ee:	f000 f9d6 	bl	8007b9e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80077f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80077f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80077fc:	4619      	mov	r1, r3
 80077fe:	4822      	ldr	r0, [pc, #136]	; (8007888 <MX_TIM4_Init+0xfc>)
 8007800:	f005 fe1c 	bl	800d43c <HAL_TIM_ConfigClockSource>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800780a:	f000 f9c8 	bl	8007b9e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800780e:	481e      	ldr	r0, [pc, #120]	; (8007888 <MX_TIM4_Init+0xfc>)
 8007810:	f005 fb09 	bl	800ce26 <HAL_TIM_PWM_Init>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800781a:	f000 f9c0 	bl	8007b9e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800781e:	2300      	movs	r3, #0
 8007820:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007822:	2300      	movs	r3, #0
 8007824:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007826:	f107 0320 	add.w	r3, r7, #32
 800782a:	4619      	mov	r1, r3
 800782c:	4816      	ldr	r0, [pc, #88]	; (8007888 <MX_TIM4_Init+0xfc>)
 800782e:	f006 f9f5 	bl	800dc1c <HAL_TIMEx_MasterConfigSynchronization>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d001      	beq.n	800783c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8007838:	f000 f9b1 	bl	8007b9e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800783c:	2360      	movs	r3, #96	; 0x60
 800783e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007840:	2300      	movs	r3, #0
 8007842:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007848:	2300      	movs	r3, #0
 800784a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800784c:	1d3b      	adds	r3, r7, #4
 800784e:	2204      	movs	r2, #4
 8007850:	4619      	mov	r1, r3
 8007852:	480d      	ldr	r0, [pc, #52]	; (8007888 <MX_TIM4_Init+0xfc>)
 8007854:	f005 fd2c 	bl	800d2b0 <HAL_TIM_PWM_ConfigChannel>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800785e:	f000 f99e 	bl	8007b9e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007862:	1d3b      	adds	r3, r7, #4
 8007864:	2208      	movs	r2, #8
 8007866:	4619      	mov	r1, r3
 8007868:	4807      	ldr	r0, [pc, #28]	; (8007888 <MX_TIM4_Init+0xfc>)
 800786a:	f005 fd21 	bl	800d2b0 <HAL_TIM_PWM_ConfigChannel>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d001      	beq.n	8007878 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8007874:	f000 f993 	bl	8007b9e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8007878:	4803      	ldr	r0, [pc, #12]	; (8007888 <MX_TIM4_Init+0xfc>)
 800787a:	f000 fd15 	bl	80082a8 <HAL_TIM_MspPostInit>

}
 800787e:	bf00      	nop
 8007880:	3738      	adds	r7, #56	; 0x38
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	200133a8 	.word	0x200133a8
 800788c:	40000800 	.word	0x40000800

08007890 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08c      	sub	sp, #48	; 0x30
 8007894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8007896:	f107 030c 	add.w	r3, r7, #12
 800789a:	2224      	movs	r2, #36	; 0x24
 800789c:	2100      	movs	r1, #0
 800789e:	4618      	mov	r0, r3
 80078a0:	f01e ffca 	bl	8026838 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80078a4:	1d3b      	adds	r3, r7, #4
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80078ac:	4b22      	ldr	r3, [pc, #136]	; (8007938 <MX_TIM8_Init+0xa8>)
 80078ae:	4a23      	ldr	r2, [pc, #140]	; (800793c <MX_TIM8_Init+0xac>)
 80078b0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80078b2:	4b21      	ldr	r3, [pc, #132]	; (8007938 <MX_TIM8_Init+0xa8>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078b8:	4b1f      	ldr	r3, [pc, #124]	; (8007938 <MX_TIM8_Init+0xa8>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80078be:	4b1e      	ldr	r3, [pc, #120]	; (8007938 <MX_TIM8_Init+0xa8>)
 80078c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078c4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078c6:	4b1c      	ldr	r3, [pc, #112]	; (8007938 <MX_TIM8_Init+0xa8>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80078cc:	4b1a      	ldr	r3, [pc, #104]	; (8007938 <MX_TIM8_Init+0xa8>)
 80078ce:	2200      	movs	r2, #0
 80078d0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078d2:	4b19      	ldr	r3, [pc, #100]	; (8007938 <MX_TIM8_Init+0xa8>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80078d8:	2303      	movs	r3, #3
 80078da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80078dc:	2300      	movs	r3, #0
 80078de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80078e0:	2301      	movs	r3, #1
 80078e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80078e4:	2300      	movs	r3, #0
 80078e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80078e8:	2300      	movs	r3, #0
 80078ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80078ec:	2302      	movs	r3, #2
 80078ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80078f0:	2301      	movs	r3, #1
 80078f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80078f4:	2300      	movs	r3, #0
 80078f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80078f8:	230f      	movs	r3, #15
 80078fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80078fc:	f107 030c 	add.w	r3, r7, #12
 8007900:	4619      	mov	r1, r3
 8007902:	480d      	ldr	r0, [pc, #52]	; (8007938 <MX_TIM8_Init+0xa8>)
 8007904:	f005 fb02 	bl	800cf0c <HAL_TIM_Encoder_Init>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800790e:	f000 f946 	bl	8007b9e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007912:	2300      	movs	r3, #0
 8007914:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007916:	2300      	movs	r3, #0
 8007918:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800791a:	1d3b      	adds	r3, r7, #4
 800791c:	4619      	mov	r1, r3
 800791e:	4806      	ldr	r0, [pc, #24]	; (8007938 <MX_TIM8_Init+0xa8>)
 8007920:	f006 f97c 	bl	800dc1c <HAL_TIMEx_MasterConfigSynchronization>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d001      	beq.n	800792e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800792a:	f000 f938 	bl	8007b9e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800792e:	bf00      	nop
 8007930:	3730      	adds	r7, #48	; 0x30
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	20013368 	.word	0x20013368
 800793c:	40010400 	.word	0x40010400

08007940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b08c      	sub	sp, #48	; 0x30
 8007944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007946:	f107 031c 	add.w	r3, r7, #28
 800794a:	2200      	movs	r2, #0
 800794c:	601a      	str	r2, [r3, #0]
 800794e:	605a      	str	r2, [r3, #4]
 8007950:	609a      	str	r2, [r3, #8]
 8007952:	60da      	str	r2, [r3, #12]
 8007954:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007956:	2300      	movs	r3, #0
 8007958:	61bb      	str	r3, [r7, #24]
 800795a:	4b6f      	ldr	r3, [pc, #444]	; (8007b18 <MX_GPIO_Init+0x1d8>)
 800795c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795e:	4a6e      	ldr	r2, [pc, #440]	; (8007b18 <MX_GPIO_Init+0x1d8>)
 8007960:	f043 0310 	orr.w	r3, r3, #16
 8007964:	6313      	str	r3, [r2, #48]	; 0x30
 8007966:	4b6c      	ldr	r3, [pc, #432]	; (8007b18 <MX_GPIO_Init+0x1d8>)
 8007968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796a:	f003 0310 	and.w	r3, r3, #16
 800796e:	61bb      	str	r3, [r7, #24]
 8007970:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007972:	2300      	movs	r3, #0
 8007974:	617b      	str	r3, [r7, #20]
 8007976:	4b68      	ldr	r3, [pc, #416]	; (8007b18 <MX_GPIO_Init+0x1d8>)
 8007978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797a:	4a67      	ldr	r2, [pc, #412]	; (8007b18 <MX_GPIO_Init+0x1d8>)
 800797c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007980:	6313      	str	r3, [r2, #48]	; 0x30
 8007982:	4b65      	ldr	r3, [pc, #404]	; (8007b18 <MX_GPIO_Init+0x1d8>)
 8007984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800798a:	617b      	str	r3, [r7, #20]
 800798c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800798e:	2300      	movs	r3, #0
 8007990:	613b      	str	r3, [r7, #16]
 8007992:	4b61      	ldr	r3, [pc, #388]	; (8007b18 <MX_GPIO_Init+0x1d8>)
 8007994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007996:	4a60      	ldr	r2, [pc, #384]	; (8007b18 <MX_GPIO_Init+0x1d8>)
 8007998:	f043 0304 	orr.w	r3, r3, #4
 800799c:	6313      	str	r3, [r2, #48]	; 0x30
 800799e:	4b5e      	ldr	r3, [pc, #376]	; (8007b18 <MX_GPIO_Init+0x1d8>)
 80079a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a2:	f003 0304 	and.w	r3, r3, #4
 80079a6:	613b      	str	r3, [r7, #16]
 80079a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80079aa:	2300      	movs	r3, #0
 80079ac:	60fb      	str	r3, [r7, #12]
 80079ae:	4b5a      	ldr	r3, [pc, #360]	; (8007b18 <MX_GPIO_Init+0x1d8>)
 80079b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b2:	4a59      	ldr	r2, [pc, #356]	; (8007b18 <MX_GPIO_Init+0x1d8>)
 80079b4:	f043 0301 	orr.w	r3, r3, #1
 80079b8:	6313      	str	r3, [r2, #48]	; 0x30
 80079ba:	4b57      	ldr	r3, [pc, #348]	; (8007b18 <MX_GPIO_Init+0x1d8>)
 80079bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80079c6:	2300      	movs	r3, #0
 80079c8:	60bb      	str	r3, [r7, #8]
 80079ca:	4b53      	ldr	r3, [pc, #332]	; (8007b18 <MX_GPIO_Init+0x1d8>)
 80079cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ce:	4a52      	ldr	r2, [pc, #328]	; (8007b18 <MX_GPIO_Init+0x1d8>)
 80079d0:	f043 0302 	orr.w	r3, r3, #2
 80079d4:	6313      	str	r3, [r2, #48]	; 0x30
 80079d6:	4b50      	ldr	r3, [pc, #320]	; (8007b18 <MX_GPIO_Init+0x1d8>)
 80079d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079da:	f003 0302 	and.w	r3, r3, #2
 80079de:	60bb      	str	r3, [r7, #8]
 80079e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80079e2:	2300      	movs	r3, #0
 80079e4:	607b      	str	r3, [r7, #4]
 80079e6:	4b4c      	ldr	r3, [pc, #304]	; (8007b18 <MX_GPIO_Init+0x1d8>)
 80079e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ea:	4a4b      	ldr	r2, [pc, #300]	; (8007b18 <MX_GPIO_Init+0x1d8>)
 80079ec:	f043 0308 	orr.w	r3, r3, #8
 80079f0:	6313      	str	r3, [r2, #48]	; 0x30
 80079f2:	4b49      	ldr	r3, [pc, #292]	; (8007b18 <MX_GPIO_Init+0x1d8>)
 80079f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f6:	f003 0308 	and.w	r3, r3, #8
 80079fa:	607b      	str	r3, [r7, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80079fe:	2200      	movs	r2, #0
 8007a00:	2108      	movs	r1, #8
 8007a02:	4846      	ldr	r0, [pc, #280]	; (8007b1c <MX_GPIO_Init+0x1dc>)
 8007a04:	f002 f9de 	bl	8009dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8007a08:	2201      	movs	r2, #1
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	4844      	ldr	r0, [pc, #272]	; (8007b20 <MX_GPIO_Init+0x1e0>)
 8007a0e:	f002 f9d9 	bl	8009dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LWIP_LED_Pin|EEPROM_LED_Pin|GPIO_PIN_11|GPIO_PIN_12 
 8007a12:	2200      	movs	r2, #0
 8007a14:	f649 6110 	movw	r1, #40464	; 0x9e10
 8007a18:	4842      	ldr	r0, [pc, #264]	; (8007b24 <MX_GPIO_Init+0x1e4>)
 8007a1a:	f002 f9d3 	bl	8009dc4 <HAL_GPIO_WritePin>
                          |USR_LED_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8007a24:	4840      	ldr	r0, [pc, #256]	; (8007b28 <MX_GPIO_Init+0x1e8>)
 8007a26:	f002 f9cd 	bl	8009dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8007a2a:	2308      	movs	r3, #8
 8007a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a32:	2300      	movs	r3, #0
 8007a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a36:	2300      	movs	r3, #0
 8007a38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8007a3a:	f107 031c 	add.w	r3, r7, #28
 8007a3e:	4619      	mov	r1, r3
 8007a40:	4836      	ldr	r0, [pc, #216]	; (8007b1c <MX_GPIO_Init+0x1dc>)
 8007a42:	f002 f80d 	bl	8009a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8007a46:	2301      	movs	r3, #1
 8007a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a52:	2300      	movs	r3, #0
 8007a54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8007a56:	f107 031c 	add.w	r3, r7, #28
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	4830      	ldr	r0, [pc, #192]	; (8007b20 <MX_GPIO_Init+0x1e0>)
 8007a5e:	f001 ffff 	bl	8009a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BTN_Pin */
  GPIO_InitStruct.Pin = BLUE_BTN_Pin;
 8007a62:	2301      	movs	r3, #1
 8007a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007a66:	4b31      	ldr	r3, [pc, #196]	; (8007b2c <MX_GPIO_Init+0x1ec>)
 8007a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BLUE_BTN_GPIO_Port, &GPIO_InitStruct);
 8007a6e:	f107 031c 	add.w	r3, r7, #28
 8007a72:	4619      	mov	r1, r3
 8007a74:	482c      	ldr	r0, [pc, #176]	; (8007b28 <MX_GPIO_Init+0x1e8>)
 8007a76:	f001 fff3 	bl	8009a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8007a7a:	2304      	movs	r3, #4
 8007a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a82:	2300      	movs	r3, #0
 8007a84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8007a86:	f107 031c 	add.w	r3, r7, #28
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4828      	ldr	r0, [pc, #160]	; (8007b30 <MX_GPIO_Init+0x1f0>)
 8007a8e:	f001 ffe7 	bl	8009a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LWIP_LED_Pin EEPROM_LED_Pin PD11 PD12 
                           USR_LED_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = LWIP_LED_Pin|EEPROM_LED_Pin|GPIO_PIN_11|GPIO_PIN_12 
 8007a92:	f649 6310 	movw	r3, #40464	; 0x9e10
 8007a96:	61fb      	str	r3, [r7, #28]
                          |USR_LED_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007aa4:	f107 031c 	add.w	r3, r7, #28
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	481e      	ldr	r0, [pc, #120]	; (8007b24 <MX_GPIO_Init+0x1e4>)
 8007aac:	f001 ffd8 	bl	8009a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8007ab0:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8007ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aba:	2300      	movs	r3, #0
 8007abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ac2:	f107 031c 	add.w	r3, r7, #28
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	4817      	ldr	r0, [pc, #92]	; (8007b28 <MX_GPIO_Init+0x1e8>)
 8007aca:	f001 ffc9 	bl	8009a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|OTG_FS_OverCurrent_Pin;
 8007ace:	2321      	movs	r3, #33	; 0x21
 8007ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007ada:	f107 031c 	add.w	r3, r7, #28
 8007ade:	4619      	mov	r1, r3
 8007ae0:	4810      	ldr	r0, [pc, #64]	; (8007b24 <MX_GPIO_Init+0x1e4>)
 8007ae2:	f001 ffbd 	bl	8009a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007aea:	4b12      	ldr	r3, [pc, #72]	; (8007b34 <MX_GPIO_Init+0x1f4>)
 8007aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aee:	2300      	movs	r3, #0
 8007af0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8007af2:	f107 031c 	add.w	r3, r7, #28
 8007af6:	4619      	mov	r1, r3
 8007af8:	4808      	ldr	r0, [pc, #32]	; (8007b1c <MX_GPIO_Init+0x1dc>)
 8007afa:	f001 ffb1 	bl	8009a60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8007afe:	2200      	movs	r2, #0
 8007b00:	2105      	movs	r1, #5
 8007b02:	2006      	movs	r0, #6
 8007b04:	f000 fede 	bl	80088c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8007b08:	2006      	movs	r0, #6
 8007b0a:	f000 fef7 	bl	80088fc <HAL_NVIC_EnableIRQ>

}
 8007b0e:	bf00      	nop
 8007b10:	3730      	adds	r7, #48	; 0x30
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	40023800 	.word	0x40023800
 8007b1c:	40021000 	.word	0x40021000
 8007b20:	40020800 	.word	0x40020800
 8007b24:	40020c00 	.word	0x40020c00
 8007b28:	40020000 	.word	0x40020000
 8007b2c:	10110000 	.word	0x10110000
 8007b30:	40020400 	.word	0x40020400
 8007b34:	10120000 	.word	0x10120000

08007b38 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
//  MX_LWIP_Init();
  /* USER CODE BEGIN 5 */
  external_memory_init(&hi2c1);
 8007b40:	480a      	ldr	r0, [pc, #40]	; (8007b6c <StartDefaultTask+0x34>)
 8007b42:	f000 f849 	bl	8007bd8 <external_memory_init>
  osDelay(100);
 8007b46:	2064      	movs	r0, #100	; 0x64
 8007b48:	f007 fcd6 	bl	800f4f8 <osDelay>
  LWIP_Init(is_use_dhcp());
 8007b4c:	f000 f920 	bl	8007d90 <is_use_dhcp>
 8007b50:	4603      	mov	r3, r0
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7ff fa20 	bl	8006f98 <LWIP_Init>
  threds_setup(&htim3, &htim4, &htim8, &htim1) ;
 8007b58:	4b05      	ldr	r3, [pc, #20]	; (8007b70 <StartDefaultTask+0x38>)
 8007b5a:	4a06      	ldr	r2, [pc, #24]	; (8007b74 <StartDefaultTask+0x3c>)
 8007b5c:	4906      	ldr	r1, [pc, #24]	; (8007b78 <StartDefaultTask+0x40>)
 8007b5e:	4807      	ldr	r0, [pc, #28]	; (8007b7c <StartDefaultTask+0x44>)
 8007b60:	f000 f848 	bl	8007bf4 <threds_setup>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8007b64:	2001      	movs	r0, #1
 8007b66:	f007 fcc7 	bl	800f4f8 <osDelay>
 8007b6a:	e7fb      	b.n	8007b64 <StartDefaultTask+0x2c>
 8007b6c:	200133e8 	.word	0x200133e8
 8007b70:	200134a0 	.word	0x200134a0
 8007b74:	20013368 	.word	0x20013368
 8007b78:	200133a8 	.word	0x200133a8
 8007b7c:	2001343c 	.word	0x2001343c

08007b80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b90:	d101      	bne.n	8007b96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8007b92:	f000 fd9d 	bl	80086d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007b96:	bf00      	nop
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007ba2:	bf00      	nop
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <memory_setup>:
RosHelper ros_helper;
SetUpHelper settings;

/***** CALL IN 'USER CODE BEGIN(END) 1' *****/
void memory_setup()
{
 8007bac:	b5b0      	push	{r4, r5, r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
	  HeapRegion_t xHeapRegions[] =
 8007bb2:	4b08      	ldr	r3, [pc, #32]	; (8007bd4 <memory_setup+0x28>)
 8007bb4:	463c      	mov	r4, r7
 8007bb6:	461d      	mov	r5, r3
 8007bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bbc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007bc0:	e884 0003 	stmia.w	r4, {r0, r1}
	  {
	      {  heap_sram1, sizeof(heap_sram1) },
		  {  heap_sram2, sizeof(heap_sram2) },
	      { NULL, 0 }
	  };
	  vPortDefineHeapRegions( xHeapRegions );
 8007bc4:	463b      	mov	r3, r7
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f00b f820 	bl	8012c0c <vPortDefineHeapRegions>
}
 8007bcc:	bf00      	nop
 8007bce:	3718      	adds	r7, #24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8007bd4:	08027c1c 	.word	0x08027c1c

08007bd8 <external_memory_init>:
 * before LWIP_Init() call external_memory_init() to load settings from external memory
 *
 * after LWIP_Init() call threads_setup() to run ROS
 * */
void external_memory_init(I2C_HandleTypeDef *main_hi2c1)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
	settings.memory_init(main_hi2c1);
 8007be0:	6879      	ldr	r1, [r7, #4]
 8007be2:	4803      	ldr	r0, [pc, #12]	; (8007bf0 <external_memory_init+0x18>)
 8007be4:	f7fd fff8 	bl	8005bd8 <_ZN11SetUpHelper11memory_initEP19__I2C_HandleTypeDef>
}
 8007be8:	bf00      	nop
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	20012670 	.word	0x20012670

08007bf4 <threds_setup>:

void threds_setup(TIM_HandleTypeDef *main_htim,  TIM_HandleTypeDef *main_htim2, TIM_HandleTypeDef *encoder_htim, TIM_HandleTypeDef *encoder_htim2)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af02      	add	r7, sp, #8
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
 8007c00:	603b      	str	r3, [r7, #0]
	socket_client.init(settings.ROS_CLIENT_PORT, settings.SERIALNODE_IP, settings.SERIALNODE_PORT);
 8007c02:	4b3b      	ldr	r3, [pc, #236]	; (8007cf0 <threds_setup+0xfc>)
 8007c04:	f8b3 143c 	ldrh.w	r1, [r3, #1084]	; 0x43c
 8007c08:	4b39      	ldr	r3, [pc, #228]	; (8007cf0 <threds_setup+0xfc>)
 8007c0a:	f8b3 3444 	ldrh.w	r3, [r3, #1092]	; 0x444
 8007c0e:	4a39      	ldr	r2, [pc, #228]	; (8007cf4 <threds_setup+0x100>)
 8007c10:	4839      	ldr	r0, [pc, #228]	; (8007cf8 <threds_setup+0x104>)
 8007c12:	f7fe fdfb 	bl	800680c <_ZN12SocketClient4initEtPht>
	socket_server.init(&settings);
 8007c16:	4936      	ldr	r1, [pc, #216]	; (8007cf0 <threds_setup+0xfc>)
 8007c18:	4838      	ldr	r0, [pc, #224]	; (8007cfc <threds_setup+0x108>)
 8007c1a:	f7ff f863 	bl	8006ce4 <_ZN12SocketServer4initEP11SetUpHelper>
	ros_helper.setupRos(main_htim, main_htim2, encoder_htim, encoder_htim2, &settings);
 8007c1e:	4b34      	ldr	r3, [pc, #208]	; (8007cf0 <threds_setup+0xfc>)
 8007c20:	9301      	str	r3, [sp, #4]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	9300      	str	r3, [sp, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	68f9      	ldr	r1, [r7, #12]
 8007c2c:	4834      	ldr	r0, [pc, #208]	; (8007d00 <threds_setup+0x10c>)
 8007c2e:	f7fc fe59 	bl	80048e4 <_ZN9RosHelper8setupRosEP17TIM_HandleTypeDefS1_S1_S1_P11SetUpHelper>

	//****** Client Task **********
	sys_thread_new("client_thread", StartSocetClientTask, 0, DEFAULT_THREAD_STACKSIZE * 2, osPriorityNormal);
 8007c32:	2300      	movs	r3, #0
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	4931      	ldr	r1, [pc, #196]	; (8007d04 <threds_setup+0x110>)
 8007c3e:	4832      	ldr	r0, [pc, #200]	; (8007d08 <threds_setup+0x114>)
 8007c40:	f01c fc6c 	bl	802451c <sys_thread_new>
	osDelay(500);
 8007c44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007c48:	f007 fc56 	bl	800f4f8 <osDelay>
	sys_thread_new("server_thread", StartSocetServerTask, 0, DEFAULT_THREAD_STACKSIZE * 2, osPriorityNormal);
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c54:	2200      	movs	r2, #0
 8007c56:	492d      	ldr	r1, [pc, #180]	; (8007d0c <threds_setup+0x118>)
 8007c58:	482d      	ldr	r0, [pc, #180]	; (8007d10 <threds_setup+0x11c>)
 8007c5a:	f01c fc5f 	bl	802451c <sys_thread_new>
	sys_thread_new("ros_thread", StartRosTask, 0, 256, osPriorityNormal);
 8007c5e:	2300      	movs	r3, #0
 8007c60:	9300      	str	r3, [sp, #0]
 8007c62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c66:	2200      	movs	r2, #0
 8007c68:	492a      	ldr	r1, [pc, #168]	; (8007d14 <threds_setup+0x120>)
 8007c6a:	482b      	ldr	r0, [pc, #172]	; (8007d18 <threds_setup+0x124>)
 8007c6c:	f01c fc56 	bl	802451c <sys_thread_new>
	sys_thread_new("wheel1_thread", StartSetSpeedTask, 0, 256, osPriorityNormal);
 8007c70:	2300      	movs	r3, #0
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c78:	2200      	movs	r2, #0
 8007c7a:	4928      	ldr	r1, [pc, #160]	; (8007d1c <threds_setup+0x128>)
 8007c7c:	4828      	ldr	r0, [pc, #160]	; (8007d20 <threds_setup+0x12c>)
 8007c7e:	f01c fc4d 	bl	802451c <sys_thread_new>
	sys_thread_new("wheel2_thread", StartSetSpeedTask2, 0, 256, osPriorityNormal);
 8007c82:	2300      	movs	r3, #0
 8007c84:	9300      	str	r3, [sp, #0]
 8007c86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	4925      	ldr	r1, [pc, #148]	; (8007d24 <threds_setup+0x130>)
 8007c8e:	4826      	ldr	r0, [pc, #152]	; (8007d28 <threds_setup+0x134>)
 8007c90:	f01c fc44 	bl	802451c <sys_thread_new>
	sys_thread_new("encoder1_thread", StartEncoderTask, 0, 256, osPriorityNormal);
 8007c94:	2300      	movs	r3, #0
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	4923      	ldr	r1, [pc, #140]	; (8007d2c <threds_setup+0x138>)
 8007ca0:	4823      	ldr	r0, [pc, #140]	; (8007d30 <threds_setup+0x13c>)
 8007ca2:	f01c fc3b 	bl	802451c <sys_thread_new>
	sys_thread_new("encoder2_thread", StartEncoderTask2, 0, 256, osPriorityNormal);
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	9300      	str	r3, [sp, #0]
 8007caa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cae:	2200      	movs	r2, #0
 8007cb0:	4920      	ldr	r1, [pc, #128]	; (8007d34 <threds_setup+0x140>)
 8007cb2:	4821      	ldr	r0, [pc, #132]	; (8007d38 <threds_setup+0x144>)
 8007cb4:	f01c fc32 	bl	802451c <sys_thread_new>
	sys_thread_new("cmdvel_timeout_thread", StartCmdvelTimeoutRask, 0, 128, osPriorityNormal);
 8007cb8:	2300      	movs	r3, #0
 8007cba:	9300      	str	r3, [sp, #0]
 8007cbc:	2380      	movs	r3, #128	; 0x80
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	491e      	ldr	r1, [pc, #120]	; (8007d3c <threds_setup+0x148>)
 8007cc2:	481f      	ldr	r0, [pc, #124]	; (8007d40 <threds_setup+0x14c>)
 8007cc4:	f01c fc2a 	bl	802451c <sys_thread_new>
	sys_thread_new("set_default_listener", StartSetDefaultListenerRask, 0, 128, osPriorityNormal);
 8007cc8:	2300      	movs	r3, #0
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	2380      	movs	r3, #128	; 0x80
 8007cce:	2200      	movs	r2, #0
 8007cd0:	491c      	ldr	r1, [pc, #112]	; (8007d44 <threds_setup+0x150>)
 8007cd2:	481d      	ldr	r0, [pc, #116]	; (8007d48 <threds_setup+0x154>)
 8007cd4:	f01c fc22 	bl	802451c <sys_thread_new>
	sys_thread_new("hard_fault_handle", StartHardFaultHanlerTaskRask, 0, 128, osPriorityNormal);
 8007cd8:	2300      	movs	r3, #0
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	2380      	movs	r3, #128	; 0x80
 8007cde:	2200      	movs	r2, #0
 8007ce0:	491a      	ldr	r1, [pc, #104]	; (8007d4c <threds_setup+0x158>)
 8007ce2:	481b      	ldr	r0, [pc, #108]	; (8007d50 <threds_setup+0x15c>)
 8007ce4:	f01c fc1a 	bl	802451c <sys_thread_new>
}
 8007ce8:	bf00      	nop
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	20012670 	.word	0x20012670
 8007cf4:	20012ab0 	.word	0x20012ab0
 8007cf8:	20010768 	.word	0x20010768
 8007cfc:	200107a4 	.word	0x200107a4
 8007d00:	20011038 	.word	0x20011038
 8007d04:	08007da9 	.word	0x08007da9
 8007d08:	08027c34 	.word	0x08027c34
 8007d0c:	08007dc5 	.word	0x08007dc5
 8007d10:	08027c44 	.word	0x08027c44
 8007d14:	08007de1 	.word	0x08007de1
 8007d18:	08027c54 	.word	0x08027c54
 8007d1c:	08007dfd 	.word	0x08007dfd
 8007d20:	08027c60 	.word	0x08027c60
 8007d24:	08007e19 	.word	0x08007e19
 8007d28:	08027c70 	.word	0x08027c70
 8007d2c:	08007e35 	.word	0x08007e35
 8007d30:	08027c80 	.word	0x08027c80
 8007d34:	08007e51 	.word	0x08007e51
 8007d38:	08027c90 	.word	0x08027c90
 8007d3c:	08007e6d 	.word	0x08007e6d
 8007d40:	08027ca0 	.word	0x08027ca0
 8007d44:	08007ea9 	.word	0x08007ea9
 8007d48:	08027cb8 	.word	0x08027cb8
 8007d4c:	08007e89 	.word	0x08007e89
 8007d50:	08027cd0 	.word	0x08027cd0

08007d54 <get_local_ip_ptr>:
	settings.reset_config = true;
}
/***************************************************************************/

uint8_t* get_local_ip_ptr()
{
 8007d54:	b480      	push	{r7}
 8007d56:	af00      	add	r7, sp, #0
	return settings.LOCAL_IP_ADDRESS;
 8007d58:	4b02      	ldr	r3, [pc, #8]	; (8007d64 <get_local_ip_ptr+0x10>)
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	20012aa0 	.word	0x20012aa0

08007d68 <get_network_mask_ptr>:

uint8_t* get_network_mask_ptr()
{
 8007d68:	b480      	push	{r7}
 8007d6a:	af00      	add	r7, sp, #0
	return settings.NETWORK_MASK;
 8007d6c:	4b02      	ldr	r3, [pc, #8]	; (8007d78 <get_network_mask_ptr+0x10>)
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr
 8007d78:	20012aa4 	.word	0x20012aa4

08007d7c <get_gateaway_ptr>:

uint8_t* get_gateaway_ptr()
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	af00      	add	r7, sp, #0
	return settings.GATEAWAY;
 8007d80:	4b02      	ldr	r3, [pc, #8]	; (8007d8c <get_gateaway_ptr+0x10>)
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	20012aa8 	.word	0x20012aa8

08007d90 <is_use_dhcp>:

bool is_use_dhcp() {
 8007d90:	b480      	push	{r7}
 8007d92:	af00      	add	r7, sp, #0
	return settings.USE_DHCP;
 8007d94:	4b03      	ldr	r3, [pc, #12]	; (8007da4 <is_use_dhcp+0x14>)
 8007d96:	f893 3446 	ldrb.w	r3, [r3, #1094]	; 0x446
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	20012670 	.word	0x20012670

08007da8 <_Z20StartSocetClientTaskPv>:
void StartSocetClientTask(void *arg)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
	socket_client.SocketClientTask();
 8007db0:	4803      	ldr	r0, [pc, #12]	; (8007dc0 <_Z20StartSocetClientTaskPv+0x18>)
 8007db2:	f7fe fe4f 	bl	8006a54 <_ZN12SocketClient16SocketClientTaskEv>
}
 8007db6:	bf00      	nop
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20010768 	.word	0x20010768

08007dc4 <_Z20StartSocetServerTaskPv>:

void StartSocetServerTask(void *arg)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
	socket_server.SocketServerTask();
 8007dcc:	4803      	ldr	r0, [pc, #12]	; (8007ddc <_Z20StartSocetServerTaskPv+0x18>)
 8007dce:	f7ff f83d 	bl	8006e4c <_ZN12SocketServer16SocketServerTaskEv>
}
 8007dd2:	bf00      	nop
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	200107a4 	.word	0x200107a4

08007de0 <_Z12StartRosTaskPv>:

void StartRosTask(void *arg)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
	ros_helper.RosTask();
 8007de8:	4803      	ldr	r0, [pc, #12]	; (8007df8 <_Z12StartRosTaskPv+0x18>)
 8007dea:	f7fc fed7 	bl	8004b9c <_ZN9RosHelper7RosTaskEv>
}
 8007dee:	bf00      	nop
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	20011038 	.word	0x20011038

08007dfc <_Z17StartSetSpeedTaskPv>:

void StartSetSpeedTask(void *arg)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
	ros_helper.setSpeedTask();
 8007e04:	4803      	ldr	r0, [pc, #12]	; (8007e14 <_Z17StartSetSpeedTaskPv+0x18>)
 8007e06:	f7fc fed1 	bl	8004bac <_ZN9RosHelper12setSpeedTaskEv>
}
 8007e0a:	bf00      	nop
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	20011038 	.word	0x20011038

08007e18 <_Z18StartSetSpeedTask2Pv>:
void StartSetSpeedTask2(void *arg)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
	ros_helper.setSpeedTask2();
 8007e20:	4803      	ldr	r0, [pc, #12]	; (8007e30 <_Z18StartSetSpeedTask2Pv+0x18>)
 8007e22:	f7fc fed9 	bl	8004bd8 <_ZN9RosHelper13setSpeedTask2Ev>
}
 8007e26:	bf00      	nop
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20011038 	.word	0x20011038

08007e34 <_Z16StartEncoderTaskPv>:

void StartEncoderTask(void *arg)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
	ros_helper.encoderTask();
 8007e3c:	4803      	ldr	r0, [pc, #12]	; (8007e4c <_Z16StartEncoderTaskPv+0x18>)
 8007e3e:	f7fc fee2 	bl	8004c06 <_ZN9RosHelper11encoderTaskEv>
}
 8007e42:	bf00      	nop
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	20011038 	.word	0x20011038

08007e50 <_Z17StartEncoderTask2Pv>:

void StartEncoderTask2(void *arg)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
	ros_helper.encoderTask2();
 8007e58:	4803      	ldr	r0, [pc, #12]	; (8007e68 <_Z17StartEncoderTask2Pv+0x18>)
 8007e5a:	f7fc fee2 	bl	8004c22 <_ZN9RosHelper12encoderTask2Ev>
}
 8007e5e:	bf00      	nop
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	20011038 	.word	0x20011038

08007e6c <_Z22StartCmdvelTimeoutRaskPv>:

void StartCmdvelTimeoutRask(void *arg)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
	ros_helper.cmdvelTimeoutTask();
 8007e74:	4803      	ldr	r0, [pc, #12]	; (8007e84 <_Z22StartCmdvelTimeoutRaskPv+0x18>)
 8007e76:	f7fc fee2 	bl	8004c3e <_ZN9RosHelper17cmdvelTimeoutTaskEv>
}
 8007e7a:	bf00      	nop
 8007e7c:	3708      	adds	r7, #8
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	20011038 	.word	0x20011038

08007e88 <_Z28StartHardFaultHanlerTaskRaskPv>:

void StartHardFaultHanlerTaskRask(void *arg)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
	for(;;){
			 HAL_GPIO_TogglePin(GPIO_HARDFAULT_LED, PIN_HARDFAULT_LED);
 8007e90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e94:	4803      	ldr	r0, [pc, #12]	; (8007ea4 <_Z28StartHardFaultHanlerTaskRaskPv+0x1c>)
 8007e96:	f001 ffae 	bl	8009df6 <HAL_GPIO_TogglePin>
			 osDelay(750);
 8007e9a:	f240 20ee 	movw	r0, #750	; 0x2ee
 8007e9e:	f007 fb2b 	bl	800f4f8 <osDelay>
			 HAL_GPIO_TogglePin(GPIO_HARDFAULT_LED, PIN_HARDFAULT_LED);
 8007ea2:	e7f5      	b.n	8007e90 <_Z28StartHardFaultHanlerTaskRaskPv+0x8>
 8007ea4:	40020c00 	.word	0x40020c00

08007ea8 <_Z27StartSetDefaultListenerRaskPv>:
	}
}

void StartSetDefaultListenerRask(void *arg)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b082      	sub	sp, #8
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
	settings.set_default_task();
 8007eb0:	4803      	ldr	r0, [pc, #12]	; (8007ec0 <_Z27StartSetDefaultListenerRaskPv+0x18>)
 8007eb2:	f7fe fc85 	bl	80067c0 <_ZN11SetUpHelper16set_default_taskEv>
}
 8007eb6:	bf00      	nop
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	20012670 	.word	0x20012670

08007ec4 <_Z41__static_initialization_and_destruction_0ii>:
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d110      	bne.n	8007ef6 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d10b      	bne.n	8007ef6 <_Z41__static_initialization_and_destruction_0ii+0x32>
SocketClient socket_client;
 8007ede:	4812      	ldr	r0, [pc, #72]	; (8007f28 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8007ee0:	f7fe fc84 	bl	80067ec <_ZN12SocketClientC1Ev>
SocketServer socket_server;
 8007ee4:	4811      	ldr	r0, [pc, #68]	; (8007f2c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8007ee6:	f7fe fed9 	bl	8006c9c <_ZN12SocketServerC1Ev>
RosHelper ros_helper;
 8007eea:	4811      	ldr	r0, [pc, #68]	; (8007f30 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8007eec:	f7fc fc9e 	bl	800482c <_ZN9RosHelperC1Ev>
SetUpHelper settings;
 8007ef0:	4810      	ldr	r0, [pc, #64]	; (8007f34 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8007ef2:	f7fd fe3f 	bl	8005b74 <_ZN11SetUpHelperC1Ev>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d110      	bne.n	8007f1e <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d10b      	bne.n	8007f1e <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8007f06:	480b      	ldr	r0, [pc, #44]	; (8007f34 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8007f08:	f7fd fe44 	bl	8005b94 <_ZN11SetUpHelperD1Ev>
RosHelper ros_helper;
 8007f0c:	4808      	ldr	r0, [pc, #32]	; (8007f30 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8007f0e:	f7fc fcc7 	bl	80048a0 <_ZN9RosHelperD1Ev>
SocketServer socket_server;
 8007f12:	4806      	ldr	r0, [pc, #24]	; (8007f2c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8007f14:	f7fe ff14 	bl	8006d40 <_ZN12SocketServerD1Ev>
SocketClient socket_client;
 8007f18:	4803      	ldr	r0, [pc, #12]	; (8007f28 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8007f1a:	f7fe fccb 	bl	80068b4 <_ZN12SocketClientD1Ev>
}
 8007f1e:	bf00      	nop
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20010768 	.word	0x20010768
 8007f2c:	200107a4 	.word	0x200107a4
 8007f30:	20011038 	.word	0x20011038
 8007f34:	20012670 	.word	0x20012670

08007f38 <_GLOBAL__sub_I_heap_sram2>:
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007f40:	2001      	movs	r0, #1
 8007f42:	f7ff ffbf 	bl	8007ec4 <_Z41__static_initialization_and_destruction_0ii>
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <_GLOBAL__sub_D_heap_sram2>:
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007f50:	2000      	movs	r0, #0
 8007f52:	f7ff ffb7 	bl	8007ec4 <_Z41__static_initialization_and_destruction_0ii>
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f5e:	2300      	movs	r3, #0
 8007f60:	607b      	str	r3, [r7, #4]
 8007f62:	4b12      	ldr	r3, [pc, #72]	; (8007fac <HAL_MspInit+0x54>)
 8007f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f66:	4a11      	ldr	r2, [pc, #68]	; (8007fac <HAL_MspInit+0x54>)
 8007f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8007f6e:	4b0f      	ldr	r3, [pc, #60]	; (8007fac <HAL_MspInit+0x54>)
 8007f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f76:	607b      	str	r3, [r7, #4]
 8007f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	603b      	str	r3, [r7, #0]
 8007f7e:	4b0b      	ldr	r3, [pc, #44]	; (8007fac <HAL_MspInit+0x54>)
 8007f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f82:	4a0a      	ldr	r2, [pc, #40]	; (8007fac <HAL_MspInit+0x54>)
 8007f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f88:	6413      	str	r3, [r2, #64]	; 0x40
 8007f8a:	4b08      	ldr	r3, [pc, #32]	; (8007fac <HAL_MspInit+0x54>)
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f92:	603b      	str	r3, [r7, #0]
 8007f94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007f96:	2200      	movs	r2, #0
 8007f98:	210f      	movs	r1, #15
 8007f9a:	f06f 0001 	mvn.w	r0, #1
 8007f9e:	f000 fc91 	bl	80088c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007fa2:	bf00      	nop
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	40023800 	.word	0x40023800

08007fb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b08a      	sub	sp, #40	; 0x28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fb8:	f107 0314 	add.w	r3, r7, #20
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	601a      	str	r2, [r3, #0]
 8007fc0:	605a      	str	r2, [r3, #4]
 8007fc2:	609a      	str	r2, [r3, #8]
 8007fc4:	60da      	str	r2, [r3, #12]
 8007fc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a19      	ldr	r2, [pc, #100]	; (8008034 <HAL_I2C_MspInit+0x84>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d12b      	bne.n	800802a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	613b      	str	r3, [r7, #16]
 8007fd6:	4b18      	ldr	r3, [pc, #96]	; (8008038 <HAL_I2C_MspInit+0x88>)
 8007fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fda:	4a17      	ldr	r2, [pc, #92]	; (8008038 <HAL_I2C_MspInit+0x88>)
 8007fdc:	f043 0302 	orr.w	r3, r3, #2
 8007fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8007fe2:	4b15      	ldr	r3, [pc, #84]	; (8008038 <HAL_I2C_MspInit+0x88>)
 8007fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe6:	f003 0302 	and.w	r3, r3, #2
 8007fea:	613b      	str	r3, [r7, #16]
 8007fec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007fee:	23c0      	movs	r3, #192	; 0xc0
 8007ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007ff2:	2312      	movs	r3, #18
 8007ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007ffe:	2304      	movs	r3, #4
 8008000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008002:	f107 0314 	add.w	r3, r7, #20
 8008006:	4619      	mov	r1, r3
 8008008:	480c      	ldr	r0, [pc, #48]	; (800803c <HAL_I2C_MspInit+0x8c>)
 800800a:	f001 fd29 	bl	8009a60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800800e:	2300      	movs	r3, #0
 8008010:	60fb      	str	r3, [r7, #12]
 8008012:	4b09      	ldr	r3, [pc, #36]	; (8008038 <HAL_I2C_MspInit+0x88>)
 8008014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008016:	4a08      	ldr	r2, [pc, #32]	; (8008038 <HAL_I2C_MspInit+0x88>)
 8008018:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800801c:	6413      	str	r3, [r2, #64]	; 0x40
 800801e:	4b06      	ldr	r3, [pc, #24]	; (8008038 <HAL_I2C_MspInit+0x88>)
 8008020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008022:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008026:	60fb      	str	r3, [r7, #12]
 8008028:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800802a:	bf00      	nop
 800802c:	3728      	adds	r7, #40	; 0x28
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	40005400 	.word	0x40005400
 8008038:	40023800 	.word	0x40023800
 800803c:	40020400 	.word	0x40020400

08008040 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a05      	ldr	r2, [pc, #20]	; (8008064 <HAL_RTC_MspInit+0x24>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d102      	bne.n	8008058 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008052:	4b05      	ldr	r3, [pc, #20]	; (8008068 <HAL_RTC_MspInit+0x28>)
 8008054:	2201      	movs	r2, #1
 8008056:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr
 8008064:	40002800 	.word	0x40002800
 8008068:	42470e3c 	.word	0x42470e3c

0800806c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08a      	sub	sp, #40	; 0x28
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008074:	f107 0314 	add.w	r3, r7, #20
 8008078:	2200      	movs	r2, #0
 800807a:	601a      	str	r2, [r3, #0]
 800807c:	605a      	str	r2, [r3, #4]
 800807e:	609a      	str	r2, [r3, #8]
 8008080:	60da      	str	r2, [r3, #12]
 8008082:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a28      	ldr	r2, [pc, #160]	; (800812c <HAL_SD_MspInit+0xc0>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d14a      	bne.n	8008124 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800808e:	2300      	movs	r3, #0
 8008090:	613b      	str	r3, [r7, #16]
 8008092:	4b27      	ldr	r3, [pc, #156]	; (8008130 <HAL_SD_MspInit+0xc4>)
 8008094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008096:	4a26      	ldr	r2, [pc, #152]	; (8008130 <HAL_SD_MspInit+0xc4>)
 8008098:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800809c:	6453      	str	r3, [r2, #68]	; 0x44
 800809e:	4b24      	ldr	r3, [pc, #144]	; (8008130 <HAL_SD_MspInit+0xc4>)
 80080a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080a6:	613b      	str	r3, [r7, #16]
 80080a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80080aa:	2300      	movs	r3, #0
 80080ac:	60fb      	str	r3, [r7, #12]
 80080ae:	4b20      	ldr	r3, [pc, #128]	; (8008130 <HAL_SD_MspInit+0xc4>)
 80080b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b2:	4a1f      	ldr	r2, [pc, #124]	; (8008130 <HAL_SD_MspInit+0xc4>)
 80080b4:	f043 0304 	orr.w	r3, r3, #4
 80080b8:	6313      	str	r3, [r2, #48]	; 0x30
 80080ba:	4b1d      	ldr	r3, [pc, #116]	; (8008130 <HAL_SD_MspInit+0xc4>)
 80080bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080be:	f003 0304 	and.w	r3, r3, #4
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80080c6:	2300      	movs	r3, #0
 80080c8:	60bb      	str	r3, [r7, #8]
 80080ca:	4b19      	ldr	r3, [pc, #100]	; (8008130 <HAL_SD_MspInit+0xc4>)
 80080cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ce:	4a18      	ldr	r2, [pc, #96]	; (8008130 <HAL_SD_MspInit+0xc4>)
 80080d0:	f043 0308 	orr.w	r3, r3, #8
 80080d4:	6313      	str	r3, [r2, #48]	; 0x30
 80080d6:	4b16      	ldr	r3, [pc, #88]	; (8008130 <HAL_SD_MspInit+0xc4>)
 80080d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080da:	f003 0308 	and.w	r3, r3, #8
 80080de:	60bb      	str	r3, [r7, #8]
 80080e0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80080e2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80080e6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080e8:	2302      	movs	r3, #2
 80080ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080ec:	2300      	movs	r3, #0
 80080ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080f0:	2303      	movs	r3, #3
 80080f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80080f4:	230c      	movs	r3, #12
 80080f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080f8:	f107 0314 	add.w	r3, r7, #20
 80080fc:	4619      	mov	r1, r3
 80080fe:	480d      	ldr	r0, [pc, #52]	; (8008134 <HAL_SD_MspInit+0xc8>)
 8008100:	f001 fcae 	bl	8009a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008104:	2304      	movs	r3, #4
 8008106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008108:	2302      	movs	r3, #2
 800810a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800810c:	2300      	movs	r3, #0
 800810e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008110:	2303      	movs	r3, #3
 8008112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8008114:	230c      	movs	r3, #12
 8008116:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008118:	f107 0314 	add.w	r3, r7, #20
 800811c:	4619      	mov	r1, r3
 800811e:	4806      	ldr	r0, [pc, #24]	; (8008138 <HAL_SD_MspInit+0xcc>)
 8008120:	f001 fc9e 	bl	8009a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8008124:	bf00      	nop
 8008126:	3728      	adds	r7, #40	; 0x28
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	40012c00 	.word	0x40012c00
 8008130:	40023800 	.word	0x40023800
 8008134:	40020800 	.word	0x40020800
 8008138:	40020c00 	.word	0x40020c00

0800813c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b08c      	sub	sp, #48	; 0x30
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008144:	f107 031c 	add.w	r3, r7, #28
 8008148:	2200      	movs	r2, #0
 800814a:	601a      	str	r2, [r3, #0]
 800814c:	605a      	str	r2, [r3, #4]
 800814e:	609a      	str	r2, [r3, #8]
 8008150:	60da      	str	r2, [r3, #12]
 8008152:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a32      	ldr	r2, [pc, #200]	; (8008224 <HAL_TIM_Encoder_MspInit+0xe8>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d12d      	bne.n	80081ba <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800815e:	2300      	movs	r3, #0
 8008160:	61bb      	str	r3, [r7, #24]
 8008162:	4b31      	ldr	r3, [pc, #196]	; (8008228 <HAL_TIM_Encoder_MspInit+0xec>)
 8008164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008166:	4a30      	ldr	r2, [pc, #192]	; (8008228 <HAL_TIM_Encoder_MspInit+0xec>)
 8008168:	f043 0301 	orr.w	r3, r3, #1
 800816c:	6453      	str	r3, [r2, #68]	; 0x44
 800816e:	4b2e      	ldr	r3, [pc, #184]	; (8008228 <HAL_TIM_Encoder_MspInit+0xec>)
 8008170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	61bb      	str	r3, [r7, #24]
 8008178:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800817a:	2300      	movs	r3, #0
 800817c:	617b      	str	r3, [r7, #20]
 800817e:	4b2a      	ldr	r3, [pc, #168]	; (8008228 <HAL_TIM_Encoder_MspInit+0xec>)
 8008180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008182:	4a29      	ldr	r2, [pc, #164]	; (8008228 <HAL_TIM_Encoder_MspInit+0xec>)
 8008184:	f043 0310 	orr.w	r3, r3, #16
 8008188:	6313      	str	r3, [r2, #48]	; 0x30
 800818a:	4b27      	ldr	r3, [pc, #156]	; (8008228 <HAL_TIM_Encoder_MspInit+0xec>)
 800818c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818e:	f003 0310 	and.w	r3, r3, #16
 8008192:	617b      	str	r3, [r7, #20]
 8008194:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8008196:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800819a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800819c:	2302      	movs	r3, #2
 800819e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081a0:	2300      	movs	r3, #0
 80081a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081a4:	2300      	movs	r3, #0
 80081a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80081a8:	2301      	movs	r3, #1
 80081aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80081ac:	f107 031c 	add.w	r3, r7, #28
 80081b0:	4619      	mov	r1, r3
 80081b2:	481e      	ldr	r0, [pc, #120]	; (800822c <HAL_TIM_Encoder_MspInit+0xf0>)
 80081b4:	f001 fc54 	bl	8009a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80081b8:	e030      	b.n	800821c <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM8)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a1c      	ldr	r2, [pc, #112]	; (8008230 <HAL_TIM_Encoder_MspInit+0xf4>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d12b      	bne.n	800821c <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80081c4:	2300      	movs	r3, #0
 80081c6:	613b      	str	r3, [r7, #16]
 80081c8:	4b17      	ldr	r3, [pc, #92]	; (8008228 <HAL_TIM_Encoder_MspInit+0xec>)
 80081ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081cc:	4a16      	ldr	r2, [pc, #88]	; (8008228 <HAL_TIM_Encoder_MspInit+0xec>)
 80081ce:	f043 0302 	orr.w	r3, r3, #2
 80081d2:	6453      	str	r3, [r2, #68]	; 0x44
 80081d4:	4b14      	ldr	r3, [pc, #80]	; (8008228 <HAL_TIM_Encoder_MspInit+0xec>)
 80081d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d8:	f003 0302 	and.w	r3, r3, #2
 80081dc:	613b      	str	r3, [r7, #16]
 80081de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80081e0:	2300      	movs	r3, #0
 80081e2:	60fb      	str	r3, [r7, #12]
 80081e4:	4b10      	ldr	r3, [pc, #64]	; (8008228 <HAL_TIM_Encoder_MspInit+0xec>)
 80081e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e8:	4a0f      	ldr	r2, [pc, #60]	; (8008228 <HAL_TIM_Encoder_MspInit+0xec>)
 80081ea:	f043 0304 	orr.w	r3, r3, #4
 80081ee:	6313      	str	r3, [r2, #48]	; 0x30
 80081f0:	4b0d      	ldr	r3, [pc, #52]	; (8008228 <HAL_TIM_Encoder_MspInit+0xec>)
 80081f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	60fb      	str	r3, [r7, #12]
 80081fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80081fc:	23c0      	movs	r3, #192	; 0xc0
 80081fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008200:	2302      	movs	r3, #2
 8008202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008204:	2300      	movs	r3, #0
 8008206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008208:	2300      	movs	r3, #0
 800820a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800820c:	2303      	movs	r3, #3
 800820e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008210:	f107 031c 	add.w	r3, r7, #28
 8008214:	4619      	mov	r1, r3
 8008216:	4807      	ldr	r0, [pc, #28]	; (8008234 <HAL_TIM_Encoder_MspInit+0xf8>)
 8008218:	f001 fc22 	bl	8009a60 <HAL_GPIO_Init>
}
 800821c:	bf00      	nop
 800821e:	3730      	adds	r7, #48	; 0x30
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	40010000 	.word	0x40010000
 8008228:	40023800 	.word	0x40023800
 800822c:	40021000 	.word	0x40021000
 8008230:	40010400 	.word	0x40010400
 8008234:	40020800 	.word	0x40020800

08008238 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a15      	ldr	r2, [pc, #84]	; (800829c <HAL_TIM_Base_MspInit+0x64>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d10e      	bne.n	8008268 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800824a:	2300      	movs	r3, #0
 800824c:	60fb      	str	r3, [r7, #12]
 800824e:	4b14      	ldr	r3, [pc, #80]	; (80082a0 <HAL_TIM_Base_MspInit+0x68>)
 8008250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008252:	4a13      	ldr	r2, [pc, #76]	; (80082a0 <HAL_TIM_Base_MspInit+0x68>)
 8008254:	f043 0302 	orr.w	r3, r3, #2
 8008258:	6413      	str	r3, [r2, #64]	; 0x40
 800825a:	4b11      	ldr	r3, [pc, #68]	; (80082a0 <HAL_TIM_Base_MspInit+0x68>)
 800825c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825e:	f003 0302 	and.w	r3, r3, #2
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8008266:	e012      	b.n	800828e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a0d      	ldr	r2, [pc, #52]	; (80082a4 <HAL_TIM_Base_MspInit+0x6c>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d10d      	bne.n	800828e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008272:	2300      	movs	r3, #0
 8008274:	60bb      	str	r3, [r7, #8]
 8008276:	4b0a      	ldr	r3, [pc, #40]	; (80082a0 <HAL_TIM_Base_MspInit+0x68>)
 8008278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827a:	4a09      	ldr	r2, [pc, #36]	; (80082a0 <HAL_TIM_Base_MspInit+0x68>)
 800827c:	f043 0304 	orr.w	r3, r3, #4
 8008280:	6413      	str	r3, [r2, #64]	; 0x40
 8008282:	4b07      	ldr	r3, [pc, #28]	; (80082a0 <HAL_TIM_Base_MspInit+0x68>)
 8008284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008286:	f003 0304 	and.w	r3, r3, #4
 800828a:	60bb      	str	r3, [r7, #8]
 800828c:	68bb      	ldr	r3, [r7, #8]
}
 800828e:	bf00      	nop
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	40000400 	.word	0x40000400
 80082a0:	40023800 	.word	0x40023800
 80082a4:	40000800 	.word	0x40000800

080082a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08a      	sub	sp, #40	; 0x28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082b0:	f107 0314 	add.w	r3, r7, #20
 80082b4:	2200      	movs	r2, #0
 80082b6:	601a      	str	r2, [r3, #0]
 80082b8:	605a      	str	r2, [r3, #4]
 80082ba:	609a      	str	r2, [r3, #8]
 80082bc:	60da      	str	r2, [r3, #12]
 80082be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a24      	ldr	r2, [pc, #144]	; (8008358 <HAL_TIM_MspPostInit+0xb0>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d11e      	bne.n	8008308 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082ca:	2300      	movs	r3, #0
 80082cc:	613b      	str	r3, [r7, #16]
 80082ce:	4b23      	ldr	r3, [pc, #140]	; (800835c <HAL_TIM_MspPostInit+0xb4>)
 80082d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d2:	4a22      	ldr	r2, [pc, #136]	; (800835c <HAL_TIM_MspPostInit+0xb4>)
 80082d4:	f043 0302 	orr.w	r3, r3, #2
 80082d8:	6313      	str	r3, [r2, #48]	; 0x30
 80082da:	4b20      	ldr	r3, [pc, #128]	; (800835c <HAL_TIM_MspPostInit+0xb4>)
 80082dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082de:	f003 0302 	and.w	r3, r3, #2
 80082e2:	613b      	str	r3, [r7, #16]
 80082e4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80082e6:	2303      	movs	r3, #3
 80082e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082ea:	2302      	movs	r3, #2
 80082ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ee:	2300      	movs	r3, #0
 80082f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082f2:	2300      	movs	r3, #0
 80082f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80082f6:	2302      	movs	r3, #2
 80082f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082fa:	f107 0314 	add.w	r3, r7, #20
 80082fe:	4619      	mov	r1, r3
 8008300:	4817      	ldr	r0, [pc, #92]	; (8008360 <HAL_TIM_MspPostInit+0xb8>)
 8008302:	f001 fbad 	bl	8009a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8008306:	e023      	b.n	8008350 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a15      	ldr	r2, [pc, #84]	; (8008364 <HAL_TIM_MspPostInit+0xbc>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d11e      	bne.n	8008350 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008312:	2300      	movs	r3, #0
 8008314:	60fb      	str	r3, [r7, #12]
 8008316:	4b11      	ldr	r3, [pc, #68]	; (800835c <HAL_TIM_MspPostInit+0xb4>)
 8008318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831a:	4a10      	ldr	r2, [pc, #64]	; (800835c <HAL_TIM_MspPostInit+0xb4>)
 800831c:	f043 0308 	orr.w	r3, r3, #8
 8008320:	6313      	str	r3, [r2, #48]	; 0x30
 8008322:	4b0e      	ldr	r3, [pc, #56]	; (800835c <HAL_TIM_MspPostInit+0xb4>)
 8008324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008326:	f003 0308 	and.w	r3, r3, #8
 800832a:	60fb      	str	r3, [r7, #12]
 800832c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800832e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8008332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008334:	2302      	movs	r3, #2
 8008336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008338:	2300      	movs	r3, #0
 800833a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800833c:	2300      	movs	r3, #0
 800833e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008340:	2302      	movs	r3, #2
 8008342:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008344:	f107 0314 	add.w	r3, r7, #20
 8008348:	4619      	mov	r1, r3
 800834a:	4807      	ldr	r0, [pc, #28]	; (8008368 <HAL_TIM_MspPostInit+0xc0>)
 800834c:	f001 fb88 	bl	8009a60 <HAL_GPIO_Init>
}
 8008350:	bf00      	nop
 8008352:	3728      	adds	r7, #40	; 0x28
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	40000400 	.word	0x40000400
 800835c:	40023800 	.word	0x40023800
 8008360:	40020400 	.word	0x40020400
 8008364:	40000800 	.word	0x40000800
 8008368:	40020c00 	.word	0x40020c00

0800836c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b08c      	sub	sp, #48	; 0x30
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008374:	2300      	movs	r3, #0
 8008376:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8008378:	2300      	movs	r3, #0
 800837a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 800837c:	2200      	movs	r2, #0
 800837e:	6879      	ldr	r1, [r7, #4]
 8008380:	201c      	movs	r0, #28
 8008382:	f000 fa9f 	bl	80088c4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8008386:	201c      	movs	r0, #28
 8008388:	f000 fab8 	bl	80088fc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800838c:	2300      	movs	r3, #0
 800838e:	60fb      	str	r3, [r7, #12]
 8008390:	4b20      	ldr	r3, [pc, #128]	; (8008414 <HAL_InitTick+0xa8>)
 8008392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008394:	4a1f      	ldr	r2, [pc, #124]	; (8008414 <HAL_InitTick+0xa8>)
 8008396:	f043 0301 	orr.w	r3, r3, #1
 800839a:	6413      	str	r3, [r2, #64]	; 0x40
 800839c:	4b1d      	ldr	r3, [pc, #116]	; (8008414 <HAL_InitTick+0xa8>)
 800839e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a0:	f003 0301 	and.w	r3, r3, #1
 80083a4:	60fb      	str	r3, [r7, #12]
 80083a6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80083a8:	f107 0210 	add.w	r2, r7, #16
 80083ac:	f107 0314 	add.w	r3, r7, #20
 80083b0:	4611      	mov	r1, r2
 80083b2:	4618      	mov	r0, r3
 80083b4:	f003 fa8a 	bl	800b8cc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80083b8:	f003 fa74 	bl	800b8a4 <HAL_RCC_GetPCLK1Freq>
 80083bc:	4603      	mov	r3, r0
 80083be:	005b      	lsls	r3, r3, #1
 80083c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80083c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c4:	4a14      	ldr	r2, [pc, #80]	; (8008418 <HAL_InitTick+0xac>)
 80083c6:	fba2 2303 	umull	r2, r3, r2, r3
 80083ca:	0c9b      	lsrs	r3, r3, #18
 80083cc:	3b01      	subs	r3, #1
 80083ce:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80083d0:	4b12      	ldr	r3, [pc, #72]	; (800841c <HAL_InitTick+0xb0>)
 80083d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80083d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 80083d8:	4b10      	ldr	r3, [pc, #64]	; (800841c <HAL_InitTick+0xb0>)
 80083da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80083de:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80083e0:	4a0e      	ldr	r2, [pc, #56]	; (800841c <HAL_InitTick+0xb0>)
 80083e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80083e6:	4b0d      	ldr	r3, [pc, #52]	; (800841c <HAL_InitTick+0xb0>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083ec:	4b0b      	ldr	r3, [pc, #44]	; (800841c <HAL_InitTick+0xb0>)
 80083ee:	2200      	movs	r2, #0
 80083f0:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80083f2:	480a      	ldr	r0, [pc, #40]	; (800841c <HAL_InitTick+0xb0>)
 80083f4:	f004 fcc8 	bl	800cd88 <HAL_TIM_Base_Init>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d104      	bne.n	8008408 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80083fe:	4807      	ldr	r0, [pc, #28]	; (800841c <HAL_InitTick+0xb0>)
 8008400:	f004 fced 	bl	800cdde <HAL_TIM_Base_Start_IT>
 8008404:	4603      	mov	r3, r0
 8008406:	e000      	b.n	800840a <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
}
 800840a:	4618      	mov	r0, r3
 800840c:	3730      	adds	r7, #48	; 0x30
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	40023800 	.word	0x40023800
 8008418:	431bde83 	.word	0x431bde83
 800841c:	20013564 	.word	0x20013564

08008420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008420:	b480      	push	{r7}
 8008422:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008424:	bf00      	nop
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800842e:	b480      	push	{r7}
 8008430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008432:	e7fe      	b.n	8008432 <HardFault_Handler+0x4>

08008434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008434:	b480      	push	{r7}
 8008436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008438:	e7fe      	b.n	8008438 <MemManage_Handler+0x4>

0800843a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800843a:	b480      	push	{r7}
 800843c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800843e:	e7fe      	b.n	800843e <BusFault_Handler+0x4>

08008440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008440:	b480      	push	{r7}
 8008442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008444:	e7fe      	b.n	8008444 <UsageFault_Handler+0x4>

08008446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008446:	b480      	push	{r7}
 8008448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800844a:	bf00      	nop
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8008458:	2001      	movs	r0, #1
 800845a:	f001 fce7 	bl	8009e2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800845e:	bf00      	nop
 8008460:	bd80      	pop	{r7, pc}
	...

08008464 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008468:	4802      	ldr	r0, [pc, #8]	; (8008474 <TIM2_IRQHandler+0x10>)
 800846a:	f004 fe18 	bl	800d09e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800846e:	bf00      	nop
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	20013564 	.word	0x20013564

08008478 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800847c:	4802      	ldr	r0, [pc, #8]	; (8008488 <ETH_IRQHandler+0x10>)
 800847e:	f000 fec3 	bl	8009208 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8008482:	bf00      	nop
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	200152e4 	.word	0x200152e4

0800848c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800848c:	b480      	push	{r7}
 800848e:	af00      	add	r7, sp, #0
	return 1;
 8008490:	2301      	movs	r3, #1
}
 8008492:	4618      	mov	r0, r3
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <_kill>:

int _kill(int pid, int sig)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80084a6:	4b05      	ldr	r3, [pc, #20]	; (80084bc <_kill+0x20>)
 80084a8:	2216      	movs	r2, #22
 80084aa:	601a      	str	r2, [r3, #0]
	return -1;
 80084ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	2001a038 	.word	0x2001a038

080084c0 <_exit>:

void _exit (int status)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80084c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f7ff ffe5 	bl	800849c <_kill>
	while (1) {}		/* Make sure we hang here */
 80084d2:	e7fe      	b.n	80084d2 <_exit+0x12>

080084d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80084e0:	2300      	movs	r3, #0
 80084e2:	617b      	str	r3, [r7, #20]
 80084e4:	e00a      	b.n	80084fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80084e6:	f3af 8000 	nop.w
 80084ea:	4601      	mov	r1, r0
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	1c5a      	adds	r2, r3, #1
 80084f0:	60ba      	str	r2, [r7, #8]
 80084f2:	b2ca      	uxtb	r2, r1
 80084f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	3301      	adds	r3, #1
 80084fa:	617b      	str	r3, [r7, #20]
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	429a      	cmp	r2, r3
 8008502:	dbf0      	blt.n	80084e6 <_read+0x12>
	}

return len;
 8008504:	687b      	ldr	r3, [r7, #4]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3718      	adds	r7, #24
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b086      	sub	sp, #24
 8008512:	af00      	add	r7, sp, #0
 8008514:	60f8      	str	r0, [r7, #12]
 8008516:	60b9      	str	r1, [r7, #8]
 8008518:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800851a:	2300      	movs	r3, #0
 800851c:	617b      	str	r3, [r7, #20]
 800851e:	e009      	b.n	8008534 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	1c5a      	adds	r2, r3, #1
 8008524:	60ba      	str	r2, [r7, #8]
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	4618      	mov	r0, r3
 800852a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	3301      	adds	r3, #1
 8008532:	617b      	str	r3, [r7, #20]
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	429a      	cmp	r2, r3
 800853a:	dbf1      	blt.n	8008520 <_write+0x12>
	}
	return len;
 800853c:	687b      	ldr	r3, [r7, #4]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3718      	adds	r7, #24
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <_close>:

int _close(int file)
{
 8008546:	b480      	push	{r7}
 8008548:	b083      	sub	sp, #12
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
	return -1;
 800854e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008552:	4618      	mov	r0, r3
 8008554:	370c      	adds	r7, #12
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr

0800855e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800855e:	b480      	push	{r7}
 8008560:	b083      	sub	sp, #12
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
 8008566:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800856e:	605a      	str	r2, [r3, #4]
	return 0;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <_isatty>:

int _isatty(int file)
{
 800857e:	b480      	push	{r7}
 8008580:	b083      	sub	sp, #12
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
	return 1;
 8008586:	2301      	movs	r3, #1
}
 8008588:	4618      	mov	r0, r3
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	607a      	str	r2, [r7, #4]
	return 0;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
	...

080085b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80085b8:	4b11      	ldr	r3, [pc, #68]	; (8008600 <_sbrk+0x50>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d102      	bne.n	80085c6 <_sbrk+0x16>
		heap_end = &end;
 80085c0:	4b0f      	ldr	r3, [pc, #60]	; (8008600 <_sbrk+0x50>)
 80085c2:	4a10      	ldr	r2, [pc, #64]	; (8008604 <_sbrk+0x54>)
 80085c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80085c6:	4b0e      	ldr	r3, [pc, #56]	; (8008600 <_sbrk+0x50>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80085cc:	4b0c      	ldr	r3, [pc, #48]	; (8008600 <_sbrk+0x50>)
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4413      	add	r3, r2
 80085d4:	466a      	mov	r2, sp
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d905      	bls.n	80085e6 <_sbrk+0x36>
	{
		errno = ENOMEM;
 80085da:	4b0b      	ldr	r3, [pc, #44]	; (8008608 <_sbrk+0x58>)
 80085dc:	220c      	movs	r2, #12
 80085de:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80085e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085e4:	e006      	b.n	80085f4 <_sbrk+0x44>
	}

	heap_end += incr;
 80085e6:	4b06      	ldr	r3, [pc, #24]	; (8008600 <_sbrk+0x50>)
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4413      	add	r3, r2
 80085ee:	4a04      	ldr	r2, [pc, #16]	; (8008600 <_sbrk+0x50>)
 80085f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80085f2:	68fb      	ldr	r3, [r7, #12]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	20012ecc 	.word	0x20012ecc
 8008604:	2001a040 	.word	0x2001a040
 8008608:	2001a038 	.word	0x2001a038

0800860c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800860c:	b480      	push	{r7}
 800860e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008610:	4b08      	ldr	r3, [pc, #32]	; (8008634 <SystemInit+0x28>)
 8008612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008616:	4a07      	ldr	r2, [pc, #28]	; (8008634 <SystemInit+0x28>)
 8008618:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800861c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008620:	4b04      	ldr	r3, [pc, #16]	; (8008634 <SystemInit+0x28>)
 8008622:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008626:	609a      	str	r2, [r3, #8]
#endif
}
 8008628:	bf00      	nop
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	e000ed00 	.word	0xe000ed00

08008638 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008638:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008670 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800863c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800863e:	e003      	b.n	8008648 <LoopCopyDataInit>

08008640 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008640:	4b0c      	ldr	r3, [pc, #48]	; (8008674 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008642:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008644:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008646:	3104      	adds	r1, #4

08008648 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008648:	480b      	ldr	r0, [pc, #44]	; (8008678 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800864a:	4b0c      	ldr	r3, [pc, #48]	; (800867c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800864c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800864e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008650:	d3f6      	bcc.n	8008640 <CopyDataInit>
  ldr  r2, =_sbss
 8008652:	4a0b      	ldr	r2, [pc, #44]	; (8008680 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008654:	e002      	b.n	800865c <LoopFillZerobss>

08008656 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008656:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008658:	f842 3b04 	str.w	r3, [r2], #4

0800865c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800865c:	4b09      	ldr	r3, [pc, #36]	; (8008684 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800865e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008660:	d3f9      	bcc.n	8008656 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008662:	f7ff ffd3 	bl	800860c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008666:	f01e f899 	bl	802679c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800866a:	f7fe fe79 	bl	8007360 <main>
  bx  lr    
 800866e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008670:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008674:	0802c490 	.word	0x0802c490
  ldr  r0, =_sdata
 8008678:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800867c:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8008680:	20008088 	.word	0x20008088
  ldr  r3, = _ebss
 8008684:	2001a040 	.word	0x2001a040

08008688 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008688:	e7fe      	b.n	8008688 <ADC_IRQHandler>
	...

0800868c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008690:	4b0e      	ldr	r3, [pc, #56]	; (80086cc <HAL_Init+0x40>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a0d      	ldr	r2, [pc, #52]	; (80086cc <HAL_Init+0x40>)
 8008696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800869a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800869c:	4b0b      	ldr	r3, [pc, #44]	; (80086cc <HAL_Init+0x40>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a0a      	ldr	r2, [pc, #40]	; (80086cc <HAL_Init+0x40>)
 80086a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80086a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80086a8:	4b08      	ldr	r3, [pc, #32]	; (80086cc <HAL_Init+0x40>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a07      	ldr	r2, [pc, #28]	; (80086cc <HAL_Init+0x40>)
 80086ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80086b4:	2003      	movs	r0, #3
 80086b6:	f000 f8fa 	bl	80088ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80086ba:	2000      	movs	r0, #0
 80086bc:	f7ff fe56 	bl	800836c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80086c0:	f7ff fc4a 	bl	8007f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	40023c00 	.word	0x40023c00

080086d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80086d0:	b480      	push	{r7}
 80086d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80086d4:	4b06      	ldr	r3, [pc, #24]	; (80086f0 <HAL_IncTick+0x20>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	461a      	mov	r2, r3
 80086da:	4b06      	ldr	r3, [pc, #24]	; (80086f4 <HAL_IncTick+0x24>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4413      	add	r3, r2
 80086e0:	4a04      	ldr	r2, [pc, #16]	; (80086f4 <HAL_IncTick+0x24>)
 80086e2:	6013      	str	r3, [r2, #0]
}
 80086e4:	bf00      	nop
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	20000008 	.word	0x20000008
 80086f4:	200135a4 	.word	0x200135a4

080086f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80086f8:	b480      	push	{r7}
 80086fa:	af00      	add	r7, sp, #0
  return uwTick;
 80086fc:	4b03      	ldr	r3, [pc, #12]	; (800870c <HAL_GetTick+0x14>)
 80086fe:	681b      	ldr	r3, [r3, #0]
}
 8008700:	4618      	mov	r0, r3
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	200135a4 	.word	0x200135a4

08008710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008718:	f7ff ffee 	bl	80086f8 <HAL_GetTick>
 800871c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008728:	d005      	beq.n	8008736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800872a:	4b09      	ldr	r3, [pc, #36]	; (8008750 <HAL_Delay+0x40>)
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	461a      	mov	r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	4413      	add	r3, r2
 8008734:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008736:	bf00      	nop
 8008738:	f7ff ffde 	bl	80086f8 <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	429a      	cmp	r2, r3
 8008746:	d8f7      	bhi.n	8008738 <HAL_Delay+0x28>
  {
  }
}
 8008748:	bf00      	nop
 800874a:	3710      	adds	r7, #16
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	20000008 	.word	0x20000008

08008754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f003 0307 	and.w	r3, r3, #7
 8008762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008764:	4b0c      	ldr	r3, [pc, #48]	; (8008798 <__NVIC_SetPriorityGrouping+0x44>)
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008770:	4013      	ands	r3, r2
 8008772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800877c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008786:	4a04      	ldr	r2, [pc, #16]	; (8008798 <__NVIC_SetPriorityGrouping+0x44>)
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	60d3      	str	r3, [r2, #12]
}
 800878c:	bf00      	nop
 800878e:	3714      	adds	r7, #20
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	e000ed00 	.word	0xe000ed00

0800879c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800879c:	b480      	push	{r7}
 800879e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80087a0:	4b04      	ldr	r3, [pc, #16]	; (80087b4 <__NVIC_GetPriorityGrouping+0x18>)
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	0a1b      	lsrs	r3, r3, #8
 80087a6:	f003 0307 	and.w	r3, r3, #7
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr
 80087b4:	e000ed00 	.word	0xe000ed00

080087b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	4603      	mov	r3, r0
 80087c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	db0b      	blt.n	80087e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80087ca:	79fb      	ldrb	r3, [r7, #7]
 80087cc:	f003 021f 	and.w	r2, r3, #31
 80087d0:	4907      	ldr	r1, [pc, #28]	; (80087f0 <__NVIC_EnableIRQ+0x38>)
 80087d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087d6:	095b      	lsrs	r3, r3, #5
 80087d8:	2001      	movs	r0, #1
 80087da:	fa00 f202 	lsl.w	r2, r0, r2
 80087de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80087e2:	bf00      	nop
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	e000e100 	.word	0xe000e100

080087f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	4603      	mov	r3, r0
 80087fc:	6039      	str	r1, [r7, #0]
 80087fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008804:	2b00      	cmp	r3, #0
 8008806:	db0a      	blt.n	800881e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	b2da      	uxtb	r2, r3
 800880c:	490c      	ldr	r1, [pc, #48]	; (8008840 <__NVIC_SetPriority+0x4c>)
 800880e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008812:	0112      	lsls	r2, r2, #4
 8008814:	b2d2      	uxtb	r2, r2
 8008816:	440b      	add	r3, r1
 8008818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800881c:	e00a      	b.n	8008834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	b2da      	uxtb	r2, r3
 8008822:	4908      	ldr	r1, [pc, #32]	; (8008844 <__NVIC_SetPriority+0x50>)
 8008824:	79fb      	ldrb	r3, [r7, #7]
 8008826:	f003 030f 	and.w	r3, r3, #15
 800882a:	3b04      	subs	r3, #4
 800882c:	0112      	lsls	r2, r2, #4
 800882e:	b2d2      	uxtb	r2, r2
 8008830:	440b      	add	r3, r1
 8008832:	761a      	strb	r2, [r3, #24]
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	e000e100 	.word	0xe000e100
 8008844:	e000ed00 	.word	0xe000ed00

08008848 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008848:	b480      	push	{r7}
 800884a:	b089      	sub	sp, #36	; 0x24
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	f1c3 0307 	rsb	r3, r3, #7
 8008862:	2b04      	cmp	r3, #4
 8008864:	bf28      	it	cs
 8008866:	2304      	movcs	r3, #4
 8008868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	3304      	adds	r3, #4
 800886e:	2b06      	cmp	r3, #6
 8008870:	d902      	bls.n	8008878 <NVIC_EncodePriority+0x30>
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	3b03      	subs	r3, #3
 8008876:	e000      	b.n	800887a <NVIC_EncodePriority+0x32>
 8008878:	2300      	movs	r3, #0
 800887a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800887c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	fa02 f303 	lsl.w	r3, r2, r3
 8008886:	43da      	mvns	r2, r3
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	401a      	ands	r2, r3
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008890:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	fa01 f303 	lsl.w	r3, r1, r3
 800889a:	43d9      	mvns	r1, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80088a0:	4313      	orrs	r3, r2
         );
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	3724      	adds	r7, #36	; 0x24
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b082      	sub	sp, #8
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7ff ff4c 	bl	8008754 <__NVIC_SetPriorityGrouping>
}
 80088bc:	bf00      	nop
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	4603      	mov	r3, r0
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
 80088d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80088d2:	2300      	movs	r3, #0
 80088d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80088d6:	f7ff ff61 	bl	800879c <__NVIC_GetPriorityGrouping>
 80088da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	68b9      	ldr	r1, [r7, #8]
 80088e0:	6978      	ldr	r0, [r7, #20]
 80088e2:	f7ff ffb1 	bl	8008848 <NVIC_EncodePriority>
 80088e6:	4602      	mov	r2, r0
 80088e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088ec:	4611      	mov	r1, r2
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7ff ff80 	bl	80087f4 <__NVIC_SetPriority>
}
 80088f4:	bf00      	nop
 80088f6:	3718      	adds	r7, #24
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	4603      	mov	r3, r0
 8008904:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800890a:	4618      	mov	r0, r3
 800890c:	f7ff ff54 	bl	80087b8 <__NVIC_EnableIRQ>
}
 8008910:	bf00      	nop
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	60b9      	str	r1, [r7, #8]
 8008922:	607a      	str	r2, [r7, #4]
 8008924:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008926:	2300      	movs	r3, #0
 8008928:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800892e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008936:	2b01      	cmp	r3, #1
 8008938:	d101      	bne.n	800893e <HAL_DMA_Start_IT+0x26>
 800893a:	2302      	movs	r3, #2
 800893c:	e040      	b.n	80089c0 <HAL_DMA_Start_IT+0xa8>
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2201      	movs	r2, #1
 8008942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800894c:	b2db      	uxtb	r3, r3
 800894e:	2b01      	cmp	r3, #1
 8008950:	d12f      	bne.n	80089b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2202      	movs	r2, #2
 8008956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	68b9      	ldr	r1, [r7, #8]
 8008966:	68f8      	ldr	r0, [r7, #12]
 8008968:	f000 f83a 	bl	80089e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008970:	223f      	movs	r2, #63	; 0x3f
 8008972:	409a      	lsls	r2, r3
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f042 0216 	orr.w	r2, r2, #22
 8008986:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898c:	2b00      	cmp	r3, #0
 800898e:	d007      	beq.n	80089a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f042 0208 	orr.w	r2, r2, #8
 800899e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f042 0201 	orr.w	r2, r2, #1
 80089ae:	601a      	str	r2, [r3, #0]
 80089b0:	e005      	b.n	80089be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80089ba:	2302      	movs	r3, #2
 80089bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80089be:	7dfb      	ldrb	r3, [r7, #23]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3718      	adds	r7, #24
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
 80089ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80089fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	683a      	ldr	r2, [r7, #0]
 8008a04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	2b40      	cmp	r3, #64	; 0x40
 8008a0c:	d108      	bne.n	8008a20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008a1e:	e007      	b.n	8008a30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	60da      	str	r2, [r3, #12]
}
 8008a30:	bf00      	nop
 8008a32:	3714      	adds	r7, #20
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b088      	sub	sp, #32
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8008a44:	2300      	movs	r3, #0
 8008a46:	61fb      	str	r3, [r7, #28]
 8008a48:	2300      	movs	r3, #0
 8008a4a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8008a4c:	4baa      	ldr	r3, [pc, #680]	; (8008cf8 <HAL_ETH_Init+0x2bc>)
 8008a4e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8008a50:	2300      	movs	r3, #0
 8008a52:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8008a54:	2300      	movs	r3, #0
 8008a56:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d101      	bne.n	8008a62 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e185      	b.n	8008d6e <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d106      	bne.n	8008a7c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f006 f904 	bl	800ec84 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	60bb      	str	r3, [r7, #8]
 8008a80:	4b9e      	ldr	r3, [pc, #632]	; (8008cfc <HAL_ETH_Init+0x2c0>)
 8008a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a84:	4a9d      	ldr	r2, [pc, #628]	; (8008cfc <HAL_ETH_Init+0x2c0>)
 8008a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a8a:	6453      	str	r3, [r2, #68]	; 0x44
 8008a8c:	4b9b      	ldr	r3, [pc, #620]	; (8008cfc <HAL_ETH_Init+0x2c0>)
 8008a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a94:	60bb      	str	r3, [r7, #8]
 8008a96:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8008a98:	4b99      	ldr	r3, [pc, #612]	; (8008d00 <HAL_ETH_Init+0x2c4>)
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	4a98      	ldr	r2, [pc, #608]	; (8008d00 <HAL_ETH_Init+0x2c4>)
 8008a9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008aa2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8008aa4:	4b96      	ldr	r3, [pc, #600]	; (8008d00 <HAL_ETH_Init+0x2c4>)
 8008aa6:	685a      	ldr	r2, [r3, #4]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a1b      	ldr	r3, [r3, #32]
 8008aac:	4994      	ldr	r1, [pc, #592]	; (8008d00 <HAL_ETH_Init+0x2c4>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f042 0201 	orr.w	r2, r2, #1
 8008ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ac8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8008aca:	f7ff fe15 	bl	80086f8 <HAL_GetTick>
 8008ace:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8008ad0:	e011      	b.n	8008af6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8008ad2:	f7ff fe11 	bl	80086f8 <HAL_GetTick>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008ae0:	d909      	bls.n	8008af6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2203      	movs	r2, #3
 8008ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e13b      	b.n	8008d6e <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0301 	and.w	r3, r3, #1
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1e4      	bne.n	8008ad2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	f023 031c 	bic.w	r3, r3, #28
 8008b16:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8008b18:	f002 feb8 	bl	800b88c <HAL_RCC_GetHCLKFreq>
 8008b1c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	4a78      	ldr	r2, [pc, #480]	; (8008d04 <HAL_ETH_Init+0x2c8>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d908      	bls.n	8008b38 <HAL_ETH_Init+0xfc>
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	4a77      	ldr	r2, [pc, #476]	; (8008d08 <HAL_ETH_Init+0x2cc>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d804      	bhi.n	8008b38 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	f043 0308 	orr.w	r3, r3, #8
 8008b34:	61fb      	str	r3, [r7, #28]
 8008b36:	e027      	b.n	8008b88 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	4a73      	ldr	r2, [pc, #460]	; (8008d08 <HAL_ETH_Init+0x2cc>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d908      	bls.n	8008b52 <HAL_ETH_Init+0x116>
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	4a72      	ldr	r2, [pc, #456]	; (8008d0c <HAL_ETH_Init+0x2d0>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d804      	bhi.n	8008b52 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	f043 030c 	orr.w	r3, r3, #12
 8008b4e:	61fb      	str	r3, [r7, #28]
 8008b50:	e01a      	b.n	8008b88 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	4a6d      	ldr	r2, [pc, #436]	; (8008d0c <HAL_ETH_Init+0x2d0>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d903      	bls.n	8008b62 <HAL_ETH_Init+0x126>
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	4a6c      	ldr	r2, [pc, #432]	; (8008d10 <HAL_ETH_Init+0x2d4>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d911      	bls.n	8008b86 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	4a6a      	ldr	r2, [pc, #424]	; (8008d10 <HAL_ETH_Init+0x2d4>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d908      	bls.n	8008b7c <HAL_ETH_Init+0x140>
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	4a69      	ldr	r2, [pc, #420]	; (8008d14 <HAL_ETH_Init+0x2d8>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d804      	bhi.n	8008b7c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	f043 0304 	orr.w	r3, r3, #4
 8008b78:	61fb      	str	r3, [r7, #28]
 8008b7a:	e005      	b.n	8008b88 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	f043 0310 	orr.w	r3, r3, #16
 8008b82:	61fb      	str	r3, [r7, #28]
 8008b84:	e000      	b.n	8008b88 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8008b86:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	69fa      	ldr	r2, [r7, #28]
 8008b8e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8008b90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008b94:	2100      	movs	r1, #0
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fc19 	bl	80093ce <HAL_ETH_WritePHYRegister>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00b      	beq.n	8008bba <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8008ba6:	6939      	ldr	r1, [r7, #16]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fca5 	bl	80094f8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e0d9      	b.n	8008d6e <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8008bba:	20ff      	movs	r0, #255	; 0xff
 8008bbc:	f7ff fda8 	bl	8008710 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f000 80a7 	beq.w	8008d18 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008bca:	f7ff fd95 	bl	80086f8 <HAL_GetTick>
 8008bce:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8008bd0:	f107 030c 	add.w	r3, r7, #12
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 fb90 	bl	80092fe <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8008bde:	f7ff fd8b 	bl	80086f8 <HAL_GetTick>
 8008be2:	4602      	mov	r2, r0
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	1ad3      	subs	r3, r2, r3
 8008be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d90f      	bls.n	8008c10 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8008bf4:	6939      	ldr	r1, [r7, #16]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 fc7e 	bl	80094f8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	e0ae      	b.n	8008d6e <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f003 0304 	and.w	r3, r3, #4
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d0da      	beq.n	8008bd0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8008c1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008c1e:	2100      	movs	r1, #0
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fbd4 	bl	80093ce <HAL_ETH_WritePHYRegister>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00b      	beq.n	8008c44 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8008c30:	6939      	ldr	r1, [r7, #16]
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 fc60 	bl	80094f8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8008c40:	2301      	movs	r3, #1
 8008c42:	e094      	b.n	8008d6e <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8008c44:	f7ff fd58 	bl	80086f8 <HAL_GetTick>
 8008c48:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8008c4a:	f107 030c 	add.w	r3, r7, #12
 8008c4e:	461a      	mov	r2, r3
 8008c50:	2101      	movs	r1, #1
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fb53 	bl	80092fe <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8008c58:	f7ff fd4e 	bl	80086f8 <HAL_GetTick>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	1ad3      	subs	r3, r2, r3
 8008c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d90f      	bls.n	8008c8a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8008c6e:	6939      	ldr	r1, [r7, #16]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fc41 	bl	80094f8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8008c86:	2303      	movs	r3, #3
 8008c88:	e071      	b.n	8008d6e <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f003 0320 	and.w	r3, r3, #32
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d0da      	beq.n	8008c4a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8008c94:	f107 030c 	add.w	r3, r7, #12
 8008c98:	461a      	mov	r2, r3
 8008c9a:	211f      	movs	r1, #31
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fb2e 	bl	80092fe <HAL_ETH_ReadPHYRegister>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00b      	beq.n	8008cc0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8008cac:	6939      	ldr	r1, [r7, #16]
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fc22 	bl	80094f8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e056      	b.n	8008d6e <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f003 0310 	and.w	r3, r3, #16
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d004      	beq.n	8008cd4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cd0:	60da      	str	r2, [r3, #12]
 8008cd2:	e002      	b.n	8008cda <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f003 0304 	and.w	r3, r3, #4
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d003      	beq.n	8008cec <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	609a      	str	r2, [r3, #8]
 8008cea:	e037      	b.n	8008d5c <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008cf2:	609a      	str	r2, [r3, #8]
 8008cf4:	e032      	b.n	8008d5c <HAL_ETH_Init+0x320>
 8008cf6:	bf00      	nop
 8008cf8:	03938700 	.word	0x03938700
 8008cfc:	40023800 	.word	0x40023800
 8008d00:	40013800 	.word	0x40013800
 8008d04:	01312cff 	.word	0x01312cff
 8008d08:	02160ebf 	.word	0x02160ebf
 8008d0c:	039386ff 	.word	0x039386ff
 8008d10:	05f5e0ff 	.word	0x05f5e0ff
 8008d14:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	08db      	lsrs	r3, r3, #3
 8008d1e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	085b      	lsrs	r3, r3, #1
 8008d26:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	461a      	mov	r2, r3
 8008d2e:	2100      	movs	r1, #0
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fb4c 	bl	80093ce <HAL_ETH_WritePHYRegister>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00b      	beq.n	8008d54 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8008d40:	6939      	ldr	r1, [r7, #16]
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 fbd8 	bl	80094f8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e00c      	b.n	8008d6e <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8008d54:	f640 70ff 	movw	r0, #4095	; 0xfff
 8008d58:	f7ff fcda 	bl	8008710 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8008d5c:	6939      	ldr	r1, [r7, #16]
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fbca 	bl	80094f8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3720      	adds	r7, #32
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop

08008d78 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b087      	sub	sp, #28
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
 8008d84:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8008d86:	2300      	movs	r3, #0
 8008d88:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d101      	bne.n	8008d98 <HAL_ETH_DMATxDescListInit+0x20>
 8008d94:	2302      	movs	r3, #2
 8008d96:	e052      	b.n	8008e3e <HAL_ETH_DMATxDescListInit+0xc6>
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2202      	movs	r2, #2
 8008da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8008dae:	2300      	movs	r3, #0
 8008db0:	617b      	str	r3, [r7, #20]
 8008db2:	e030      	b.n	8008e16 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	015b      	lsls	r3, r3, #5
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	4413      	add	r3, r2
 8008dbc:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008dc4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008dcc:	fb02 f303 	mul.w	r3, r2, r3
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	69db      	ldr	r3, [r3, #28]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d105      	bne.n	8008dee <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	3b01      	subs	r3, #1
 8008df2:	697a      	ldr	r2, [r7, #20]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d208      	bcs.n	8008e0a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	015b      	lsls	r3, r3, #5
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	4413      	add	r3, r2
 8008e02:	461a      	mov	r2, r3
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	60da      	str	r2, [r3, #12]
 8008e08:	e002      	b.n	8008e10 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	3301      	adds	r3, #1
 8008e14:	617b      	str	r3, [r7, #20]
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d3ca      	bcc.n	8008db4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68ba      	ldr	r2, [r7, #8]
 8008e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e28:	3310      	adds	r3, #16
 8008e2a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	371c      	adds	r7, #28
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr

08008e4a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8008e4a:	b480      	push	{r7}
 8008e4c:	b087      	sub	sp, #28
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	60f8      	str	r0, [r7, #12]
 8008e52:	60b9      	str	r1, [r7, #8]
 8008e54:	607a      	str	r2, [r7, #4]
 8008e56:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d101      	bne.n	8008e6a <HAL_ETH_DMARxDescListInit+0x20>
 8008e66:	2302      	movs	r3, #2
 8008e68:	e056      	b.n	8008f18 <HAL_ETH_DMARxDescListInit+0xce>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2202      	movs	r2, #2
 8008e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	68ba      	ldr	r2, [r7, #8]
 8008e7e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8008e80:	2300      	movs	r3, #0
 8008e82:	617b      	str	r3, [r7, #20]
 8008e84:	e034      	b.n	8008ef0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	015b      	lsls	r3, r3, #5
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008e96:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8008e9e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008ea6:	fb02 f303 	mul.w	r3, r2, r3
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	4413      	add	r3, r2
 8008eae:	461a      	mov	r2, r3
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d105      	bne.n	8008ec8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	697a      	ldr	r2, [r7, #20]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d208      	bcs.n	8008ee4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	015b      	lsls	r3, r3, #5
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	4413      	add	r3, r2
 8008edc:	461a      	mov	r2, r3
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	60da      	str	r2, [r3, #12]
 8008ee2:	e002      	b.n	8008eea <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	3301      	adds	r3, #1
 8008eee:	617b      	str	r3, [r7, #20]
 8008ef0:	697a      	ldr	r2, [r7, #20]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d3c6      	bcc.n	8008e86 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f02:	330c      	adds	r3, #12
 8008f04:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	371c      	adds	r7, #28
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b087      	sub	sp, #28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	617b      	str	r3, [r7, #20]
 8008f32:	2300      	movs	r3, #0
 8008f34:	60fb      	str	r3, [r7, #12]
 8008f36:	2300      	movs	r3, #0
 8008f38:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d101      	bne.n	8008f48 <HAL_ETH_TransmitFrame+0x24>
 8008f44:	2302      	movs	r3, #2
 8008f46:	e0cd      	b.n	80090e4 <HAL_ETH_TransmitFrame+0x1c0>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2202      	movs	r2, #2
 8008f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d109      	bne.n	8008f72 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e0b8      	b.n	80090e4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	da09      	bge.n	8008f90 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2212      	movs	r2, #18
 8008f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e0a9      	b.n	80090e4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d915      	bls.n	8008fc6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	4a54      	ldr	r2, [pc, #336]	; (80090f0 <HAL_ETH_TransmitFrame+0x1cc>)
 8008f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa2:	0a9b      	lsrs	r3, r3, #10
 8008fa4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8008fa6:	683a      	ldr	r2, [r7, #0]
 8008fa8:	4b51      	ldr	r3, [pc, #324]	; (80090f0 <HAL_ETH_TransmitFrame+0x1cc>)
 8008faa:	fba3 1302 	umull	r1, r3, r3, r2
 8008fae:	0a9b      	lsrs	r3, r3, #10
 8008fb0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8008fb4:	fb01 f303 	mul.w	r3, r1, r3
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d005      	beq.n	8008fca <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	617b      	str	r3, [r7, #20]
 8008fc4:	e001      	b.n	8008fca <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d11c      	bne.n	800900a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fda:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8008fde:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe4:	683a      	ldr	r2, [r7, #0]
 8008fe6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8008fea:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008ffa:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	461a      	mov	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	62da      	str	r2, [r3, #44]	; 0x2c
 8009008:	e04b      	b.n	80090a2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800900a:	2300      	movs	r3, #0
 800900c:	613b      	str	r3, [r7, #16]
 800900e:	e044      	b.n	800909a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800901a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800901e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d107      	bne.n	8009036 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009030:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009034:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800903e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	3b01      	subs	r3, #1
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	429a      	cmp	r2, r3
 8009048:	d116      	bne.n	8009078 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009054:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8009058:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	4a25      	ldr	r2, [pc, #148]	; (80090f4 <HAL_ETH_TransmitFrame+0x1d0>)
 800905e:	fb02 f203 	mul.w	r2, r2, r3
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	4413      	add	r3, r2
 8009066:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800906a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8009076:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009082:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009086:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	461a      	mov	r2, r3
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	3301      	adds	r3, #1
 8009098:	613b      	str	r3, [r7, #16]
 800909a:	693a      	ldr	r2, [r7, #16]
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d3b6      	bcc.n	8009010 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090aa:	3314      	adds	r3, #20
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 0304 	and.w	r3, r3, #4
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00d      	beq.n	80090d2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090be:	3314      	adds	r3, #20
 80090c0:	2204      	movs	r2, #4
 80090c2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090cc:	3304      	adds	r3, #4
 80090ce:	2200      	movs	r2, #0
 80090d0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2201      	movs	r2, #1
 80090d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	371c      	adds	r7, #28
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr
 80090f0:	ac02b00b 	.word	0xac02b00b
 80090f4:	fffffa0c 	.word	0xfffffa0c

080090f8 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8009100:	2300      	movs	r3, #0
 8009102:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800910a:	2b01      	cmp	r3, #1
 800910c:	d101      	bne.n	8009112 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800910e:	2302      	movs	r3, #2
 8009110:	e074      	b.n	80091fc <HAL_ETH_GetReceivedFrame_IT+0x104>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2201      	movs	r2, #1
 8009116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2202      	movs	r2, #2
 800911e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8009122:	e05a      	b.n	80091da <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	3301      	adds	r3, #1
 8009128:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009138:	d10d      	bne.n	8009156 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2201      	movs	r2, #1
 8009146:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	461a      	mov	r2, r3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	629a      	str	r2, [r3, #40]	; 0x28
 8009154:	e041      	b.n	80091da <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10b      	bne.n	800917c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009168:	1c5a      	adds	r2, r3, #1
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	461a      	mov	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	629a      	str	r2, [r3, #40]	; 0x28
 800917a:	e02e      	b.n	80091da <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009188:	1c5a      	adds	r2, r3, #1
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009192:	2b01      	cmp	r3, #1
 8009194:	d103      	bne.n	800919e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	0c1b      	lsrs	r3, r3, #16
 80091a6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80091aa:	1f1a      	subs	r2, r3, #4
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b4:	689a      	ldr	r2, [r3, #8]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	461a      	mov	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80091d6:	2300      	movs	r3, #0
 80091d8:	e010      	b.n	80091fc <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	db02      	blt.n	80091ea <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2b03      	cmp	r3, #3
 80091e8:	d99c      	bls.n	8009124 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3714      	adds	r7, #20
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009218:	3314      	adds	r3, #20
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009220:	2b40      	cmp	r3, #64	; 0x40
 8009222:	d112      	bne.n	800924a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f005 fddb 	bl	800ede0 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009232:	3314      	adds	r3, #20
 8009234:	2240      	movs	r2, #64	; 0x40
 8009236:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009248:	e01b      	b.n	8009282 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009252:	3314      	adds	r3, #20
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 0301 	and.w	r3, r3, #1
 800925a:	2b01      	cmp	r3, #1
 800925c:	d111      	bne.n	8009282 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 f839 	bl	80092d6 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800926c:	3314      	adds	r3, #20
 800926e:	2201      	movs	r2, #1
 8009270:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2201      	movs	r2, #1
 8009276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800928a:	3314      	adds	r3, #20
 800928c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009290:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800929a:	3314      	adds	r3, #20
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092a6:	d112      	bne.n	80092ce <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f81e 	bl	80092ea <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092b6:	3314      	adds	r3, #20
 80092b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80092bc:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2201      	movs	r2, #1
 80092c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80092ce:	bf00      	nop
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80092d6:	b480      	push	{r7}
 80092d8:	b083      	sub	sp, #12
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80092de:	bf00      	nop
 80092e0:	370c      	adds	r7, #12
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr

080092ea <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80092ea:	b480      	push	{r7}
 80092ec:	b083      	sub	sp, #12
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80092f2:	bf00      	nop
 80092f4:	370c      	adds	r7, #12
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b086      	sub	sp, #24
 8009302:	af00      	add	r7, sp, #0
 8009304:	60f8      	str	r0, [r7, #12]
 8009306:	460b      	mov	r3, r1
 8009308:	607a      	str	r2, [r7, #4]
 800930a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800930c:	2300      	movs	r3, #0
 800930e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8009310:	2300      	movs	r3, #0
 8009312:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b82      	cmp	r3, #130	; 0x82
 800931e:	d101      	bne.n	8009324 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8009320:	2302      	movs	r3, #2
 8009322:	e050      	b.n	80093c6 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2282      	movs	r2, #130	; 0x82
 8009328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	f003 031c 	and.w	r3, r3, #28
 800933a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	8a1b      	ldrh	r3, [r3, #16]
 8009340:	02db      	lsls	r3, r3, #11
 8009342:	b29b      	uxth	r3, r3
 8009344:	697a      	ldr	r2, [r7, #20]
 8009346:	4313      	orrs	r3, r2
 8009348:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800934a:	897b      	ldrh	r3, [r7, #10]
 800934c:	019b      	lsls	r3, r3, #6
 800934e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8009352:	697a      	ldr	r2, [r7, #20]
 8009354:	4313      	orrs	r3, r2
 8009356:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	f023 0302 	bic.w	r3, r3, #2
 800935e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	f043 0301 	orr.w	r3, r3, #1
 8009366:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	697a      	ldr	r2, [r7, #20]
 800936e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8009370:	f7ff f9c2 	bl	80086f8 <HAL_GetTick>
 8009374:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009376:	e015      	b.n	80093a4 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8009378:	f7ff f9be 	bl	80086f8 <HAL_GetTick>
 800937c:	4602      	mov	r2, r0
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009386:	d309      	bcc.n	800939c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8009398:	2303      	movs	r3, #3
 800939a:	e014      	b.n	80093c6 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	691b      	ldr	r3, [r3, #16]
 80093a2:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	f003 0301 	and.w	r3, r3, #1
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1e4      	bne.n	8009378 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	695b      	ldr	r3, [r3, #20]
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	461a      	mov	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3718      	adds	r7, #24
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b086      	sub	sp, #24
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	60f8      	str	r0, [r7, #12]
 80093d6:	460b      	mov	r3, r1
 80093d8:	607a      	str	r2, [r7, #4]
 80093da:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80093dc:	2300      	movs	r3, #0
 80093de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80093e0:	2300      	movs	r3, #0
 80093e2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093ea:	b2db      	uxtb	r3, r3
 80093ec:	2b42      	cmp	r3, #66	; 0x42
 80093ee:	d101      	bne.n	80093f4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80093f0:	2302      	movs	r3, #2
 80093f2:	e04e      	b.n	8009492 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2242      	movs	r2, #66	; 0x42
 80093f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	f003 031c 	and.w	r3, r3, #28
 800940a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	8a1b      	ldrh	r3, [r3, #16]
 8009410:	02db      	lsls	r3, r3, #11
 8009412:	b29b      	uxth	r3, r3
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	4313      	orrs	r3, r2
 8009418:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800941a:	897b      	ldrh	r3, [r7, #10]
 800941c:	019b      	lsls	r3, r3, #6
 800941e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8009422:	697a      	ldr	r2, [r7, #20]
 8009424:	4313      	orrs	r3, r2
 8009426:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	f043 0302 	orr.w	r3, r3, #2
 800942e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	f043 0301 	orr.w	r3, r3, #1
 8009436:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	b29a      	uxth	r2, r3
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	697a      	ldr	r2, [r7, #20]
 8009448:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800944a:	f7ff f955 	bl	80086f8 <HAL_GetTick>
 800944e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009450:	e015      	b.n	800947e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8009452:	f7ff f951 	bl	80086f8 <HAL_GetTick>
 8009456:	4602      	mov	r2, r0
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	1ad3      	subs	r3, r2, r3
 800945c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009460:	d309      	bcc.n	8009476 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2201      	movs	r2, #1
 8009466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2200      	movs	r2, #0
 800946e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8009472:	2303      	movs	r3, #3
 8009474:	e00d      	b.n	8009492 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	2b00      	cmp	r3, #0
 8009486:	d1e4      	bne.n	8009452 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3718      	adds	r7, #24
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800949a:	b580      	push	{r7, lr}
 800949c:	b082      	sub	sp, #8
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d101      	bne.n	80094b0 <HAL_ETH_Start+0x16>
 80094ac:	2302      	movs	r3, #2
 80094ae:	e01f      	b.n	80094f0 <HAL_ETH_Start+0x56>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2202      	movs	r2, #2
 80094bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 fa1b 	bl	80098fc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 fa35 	bl	8009936 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 fa7f 	bl	80099d0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 fa4c 	bl	8009970 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fa61 	bl	80099a0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b0b0      	sub	sp, #192	; 0xc0
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8009502:	2300      	movs	r3, #0
 8009504:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d007      	beq.n	800951e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009514:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800951c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800951e:	2300      	movs	r3, #0
 8009520:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8009522:	2300      	movs	r3, #0
 8009524:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8009526:	2300      	movs	r3, #0
 8009528:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800952a:	2300      	movs	r3, #0
 800952c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800952e:	2300      	movs	r3, #0
 8009530:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8009532:	2300      	movs	r3, #0
 8009534:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	69db      	ldr	r3, [r3, #28]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d103      	bne.n	8009546 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800953e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009542:	663b      	str	r3, [r7, #96]	; 0x60
 8009544:	e001      	b.n	800954a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8009546:	2300      	movs	r3, #0
 8009548:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800954a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800954e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8009550:	2300      	movs	r3, #0
 8009552:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8009554:	2300      	movs	r3, #0
 8009556:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8009558:	2300      	movs	r3, #0
 800955a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800955c:	2300      	movs	r3, #0
 800955e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8009560:	2300      	movs	r3, #0
 8009562:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8009564:	2340      	movs	r3, #64	; 0x40
 8009566:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8009568:	2300      	movs	r3, #0
 800956a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800956e:	2300      	movs	r3, #0
 8009570:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8009574:	2300      	movs	r3, #0
 8009576:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800957a:	2300      	movs	r3, #0
 800957c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8009580:	2300      	movs	r3, #0
 8009582:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8009586:	2300      	movs	r3, #0
 8009588:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800958c:	2300      	movs	r3, #0
 800958e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8009592:	2300      	movs	r3, #0
 8009594:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8009598:	2380      	movs	r3, #128	; 0x80
 800959a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800959e:	2300      	movs	r3, #0
 80095a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80095a4:	2300      	movs	r3, #0
 80095a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80095aa:	2300      	movs	r3, #0
 80095ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80095b0:	2300      	movs	r3, #0
 80095b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80095b6:	2300      	movs	r3, #0
 80095b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80095bc:	2300      	movs	r3, #0
 80095be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80095cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80095d0:	4bac      	ldr	r3, [pc, #688]	; (8009884 <ETH_MACDMAConfig+0x38c>)
 80095d2:	4013      	ands	r3, r2
 80095d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80095d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80095da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80095dc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80095de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80095e0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80095e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80095e4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80095ea:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80095ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80095ee:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80095f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80095f2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80095f8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80095fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80095fc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80095fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8009600:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8009602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8009604:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8009606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8009608:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800960a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800960c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800960e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009612:	4313      	orrs	r3, r2
 8009614:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009620:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800962c:	2001      	movs	r0, #1
 800962e:	f7ff f86f 	bl	8008710 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800963a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800963c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800963e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009640:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8009642:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8009644:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8009646:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800964a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800964c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8009650:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8009652:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8009656:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8009658:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800965c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8009660:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8009668:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800966a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	685b      	ldr	r3, [r3, #4]
 8009672:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009676:	2001      	movs	r0, #1
 8009678:	f7ff f84a 	bl	8008710 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009684:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800968e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009698:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80096a4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80096a8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80096ac:	4013      	ands	r3, r2
 80096ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80096b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096b6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80096b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80096bc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80096be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80096c2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80096c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80096c8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80096ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80096ce:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80096d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80096d4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80096d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80096da:	4313      	orrs	r3, r2
 80096dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80096e8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80096f4:	2001      	movs	r0, #1
 80096f6:	f7ff f80b 	bl	8008710 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009702:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8009704:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8009708:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	430a      	orrs	r2, r1
 8009712:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	69db      	ldr	r3, [r3, #28]
 800971a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800971e:	2001      	movs	r0, #1
 8009720:	f7fe fff6 	bl	8008710 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800972c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800972e:	2300      	movs	r3, #0
 8009730:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8009732:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009736:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8009738:	2300      	movs	r3, #0
 800973a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800973c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009740:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8009742:	2300      	movs	r3, #0
 8009744:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8009746:	2300      	movs	r3, #0
 8009748:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800974a:	2300      	movs	r3, #0
 800974c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800974e:	2300      	movs	r3, #0
 8009750:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8009752:	2304      	movs	r3, #4
 8009754:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8009756:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800975a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800975c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009760:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8009762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009766:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8009768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800976c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800976e:	2380      	movs	r3, #128	; 0x80
 8009770:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8009772:	2300      	movs	r3, #0
 8009774:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8009776:	2300      	movs	r3, #0
 8009778:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009782:	3318      	adds	r3, #24
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800978a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800978e:	4b3e      	ldr	r3, [pc, #248]	; (8009888 <ETH_MACDMAConfig+0x390>)
 8009790:	4013      	ands	r3, r2
 8009792:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8009796:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8009798:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800979a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800979c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800979e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80097a0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80097a2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80097a4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80097a6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80097a8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80097aa:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80097ac:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80097ae:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80097b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80097b2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80097b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80097b6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80097b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80097bc:	4313      	orrs	r3, r2
 80097be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097ca:	3318      	adds	r3, #24
 80097cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80097d0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097da:	3318      	adds	r3, #24
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80097e2:	2001      	movs	r0, #1
 80097e4:	f7fe ff94 	bl	8008710 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097f0:	3318      	adds	r3, #24
 80097f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80097f6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80097f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80097fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80097fc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80097fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8009800:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8009802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8009804:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8009806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8009808:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800980a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800980c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800980e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8009810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8009812:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800981c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009820:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8009830:	2001      	movs	r0, #1
 8009832:	f7fe ff6d 	bl	8008710 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800983e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009842:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	2b01      	cmp	r3, #1
 800984a:	d10f      	bne.n	800986c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009854:	331c      	adds	r3, #28
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009868:	331c      	adds	r3, #28
 800986a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	695b      	ldr	r3, [r3, #20]
 8009870:	461a      	mov	r2, r3
 8009872:	2100      	movs	r1, #0
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 f809 	bl	800988c <ETH_MACAddressConfig>
}
 800987a:	bf00      	nop
 800987c:	37c0      	adds	r7, #192	; 0xc0
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	ff20810f 	.word	0xff20810f
 8009888:	f8de3f23 	.word	0xf8de3f23

0800988c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800988c:	b480      	push	{r7}
 800988e:	b087      	sub	sp, #28
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	3305      	adds	r3, #5
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	021b      	lsls	r3, r3, #8
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	3204      	adds	r2, #4
 80098a4:	7812      	ldrb	r2, [r2, #0]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	4b11      	ldr	r3, [pc, #68]	; (80098f4 <ETH_MACAddressConfig+0x68>)
 80098ae:	4413      	add	r3, r2
 80098b0:	461a      	mov	r2, r3
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	3303      	adds	r3, #3
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	061a      	lsls	r2, r3, #24
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	3302      	adds	r3, #2
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	041b      	lsls	r3, r3, #16
 80098c6:	431a      	orrs	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	3301      	adds	r3, #1
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	021b      	lsls	r3, r3, #8
 80098d0:	4313      	orrs	r3, r2
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	7812      	ldrb	r2, [r2, #0]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	4b06      	ldr	r3, [pc, #24]	; (80098f8 <ETH_MACAddressConfig+0x6c>)
 80098de:	4413      	add	r3, r2
 80098e0:	461a      	mov	r2, r3
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	6013      	str	r3, [r2, #0]
}
 80098e6:	bf00      	nop
 80098e8:	371c      	adds	r7, #28
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	40028040 	.word	0x40028040
 80098f8:	40028044 	.word	0x40028044

080098fc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b084      	sub	sp, #16
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8009904:	2300      	movs	r3, #0
 8009906:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f042 0208 	orr.w	r2, r2, #8
 8009916:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8009920:	2001      	movs	r0, #1
 8009922:	f000 f87f 	bl	8009a24 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	601a      	str	r2, [r3, #0]
}
 800992e:	bf00      	nop
 8009930:	3710      	adds	r7, #16
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8009936:	b580      	push	{r7, lr}
 8009938:	b084      	sub	sp, #16
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800993e:	2300      	movs	r3, #0
 8009940:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f042 0204 	orr.w	r2, r2, #4
 8009950:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800995a:	2001      	movs	r0, #1
 800995c:	f000 f862 	bl	8009a24 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	601a      	str	r2, [r3, #0]
}
 8009968:	bf00      	nop
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009980:	3318      	adds	r3, #24
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800998c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009990:	3318      	adds	r3, #24
 8009992:	601a      	str	r2, [r3, #0]
}
 8009994:	bf00      	nop
 8009996:	370c      	adds	r7, #12
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099b0:	3318      	adds	r3, #24
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f042 0202 	orr.w	r2, r2, #2
 80099bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099c0:	3318      	adds	r3, #24
 80099c2:	601a      	str	r2, [r3, #0]
}
 80099c4:	bf00      	nop
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80099d8:	2300      	movs	r3, #0
 80099da:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099e4:	3318      	adds	r3, #24
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80099f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099f4:	3318      	adds	r3, #24
 80099f6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a00:	3318      	adds	r3, #24
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8009a06:	2001      	movs	r0, #1
 8009a08:	f000 f80c 	bl	8009a24 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a16:	3318      	adds	r3, #24
 8009a18:	601a      	str	r2, [r3, #0]
}
 8009a1a:	bf00      	nop
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
	...

08009a24 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b085      	sub	sp, #20
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009a2c:	4b0a      	ldr	r3, [pc, #40]	; (8009a58 <ETH_Delay+0x34>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a0a      	ldr	r2, [pc, #40]	; (8009a5c <ETH_Delay+0x38>)
 8009a32:	fba2 2303 	umull	r2, r3, r2, r3
 8009a36:	0a5b      	lsrs	r3, r3, #9
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	fb02 f303 	mul.w	r3, r2, r3
 8009a3e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8009a40:	bf00      	nop
  } 
  while (Delay --);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	1e5a      	subs	r2, r3, #1
 8009a46:	60fa      	str	r2, [r7, #12]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1f9      	bne.n	8009a40 <ETH_Delay+0x1c>
}
 8009a4c:	bf00      	nop
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr
 8009a58:	20000000 	.word	0x20000000
 8009a5c:	10624dd3 	.word	0x10624dd3

08009a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b089      	sub	sp, #36	; 0x24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009a72:	2300      	movs	r3, #0
 8009a74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009a76:	2300      	movs	r3, #0
 8009a78:	61fb      	str	r3, [r7, #28]
 8009a7a:	e16b      	b.n	8009d54 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	fa02 f303 	lsl.w	r3, r2, r3
 8009a84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	697a      	ldr	r2, [r7, #20]
 8009a8c:	4013      	ands	r3, r2
 8009a8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009a90:	693a      	ldr	r2, [r7, #16]
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	f040 815a 	bne.w	8009d4e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d00b      	beq.n	8009aba <HAL_GPIO_Init+0x5a>
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	d007      	beq.n	8009aba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009aae:	2b11      	cmp	r3, #17
 8009ab0:	d003      	beq.n	8009aba <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	2b12      	cmp	r3, #18
 8009ab8:	d130      	bne.n	8009b1c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	005b      	lsls	r3, r3, #1
 8009ac4:	2203      	movs	r2, #3
 8009ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8009aca:	43db      	mvns	r3, r3
 8009acc:	69ba      	ldr	r2, [r7, #24]
 8009ace:	4013      	ands	r3, r2
 8009ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	68da      	ldr	r2, [r3, #12]
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	005b      	lsls	r3, r3, #1
 8009ada:	fa02 f303 	lsl.w	r3, r2, r3
 8009ade:	69ba      	ldr	r2, [r7, #24]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	69ba      	ldr	r2, [r7, #24]
 8009ae8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009af0:	2201      	movs	r2, #1
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	fa02 f303 	lsl.w	r3, r2, r3
 8009af8:	43db      	mvns	r3, r3
 8009afa:	69ba      	ldr	r2, [r7, #24]
 8009afc:	4013      	ands	r3, r2
 8009afe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	091b      	lsrs	r3, r3, #4
 8009b06:	f003 0201 	and.w	r2, r3, #1
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b10:	69ba      	ldr	r2, [r7, #24]
 8009b12:	4313      	orrs	r3, r2
 8009b14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	69ba      	ldr	r2, [r7, #24]
 8009b1a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	005b      	lsls	r3, r3, #1
 8009b26:	2203      	movs	r2, #3
 8009b28:	fa02 f303 	lsl.w	r3, r2, r3
 8009b2c:	43db      	mvns	r3, r3
 8009b2e:	69ba      	ldr	r2, [r7, #24]
 8009b30:	4013      	ands	r3, r2
 8009b32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	689a      	ldr	r2, [r3, #8]
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	005b      	lsls	r3, r3, #1
 8009b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b40:	69ba      	ldr	r2, [r7, #24]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	69ba      	ldr	r2, [r7, #24]
 8009b4a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d003      	beq.n	8009b5c <HAL_GPIO_Init+0xfc>
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	2b12      	cmp	r3, #18
 8009b5a:	d123      	bne.n	8009ba4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	08da      	lsrs	r2, r3, #3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	3208      	adds	r2, #8
 8009b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	f003 0307 	and.w	r3, r3, #7
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	220f      	movs	r2, #15
 8009b74:	fa02 f303 	lsl.w	r3, r2, r3
 8009b78:	43db      	mvns	r3, r3
 8009b7a:	69ba      	ldr	r2, [r7, #24]
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	691a      	ldr	r2, [r3, #16]
 8009b84:	69fb      	ldr	r3, [r7, #28]
 8009b86:	f003 0307 	and.w	r3, r3, #7
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b90:	69ba      	ldr	r2, [r7, #24]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009b96:	69fb      	ldr	r3, [r7, #28]
 8009b98:	08da      	lsrs	r2, r3, #3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	3208      	adds	r2, #8
 8009b9e:	69b9      	ldr	r1, [r7, #24]
 8009ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	005b      	lsls	r3, r3, #1
 8009bae:	2203      	movs	r2, #3
 8009bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8009bb4:	43db      	mvns	r3, r3
 8009bb6:	69ba      	ldr	r2, [r7, #24]
 8009bb8:	4013      	ands	r3, r2
 8009bba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	f003 0203 	and.w	r2, r3, #3
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	005b      	lsls	r3, r3, #1
 8009bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8009bcc:	69ba      	ldr	r2, [r7, #24]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	69ba      	ldr	r2, [r7, #24]
 8009bd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f000 80b4 	beq.w	8009d4e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009be6:	2300      	movs	r3, #0
 8009be8:	60fb      	str	r3, [r7, #12]
 8009bea:	4b5f      	ldr	r3, [pc, #380]	; (8009d68 <HAL_GPIO_Init+0x308>)
 8009bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bee:	4a5e      	ldr	r2, [pc, #376]	; (8009d68 <HAL_GPIO_Init+0x308>)
 8009bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8009bf6:	4b5c      	ldr	r3, [pc, #368]	; (8009d68 <HAL_GPIO_Init+0x308>)
 8009bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bfe:	60fb      	str	r3, [r7, #12]
 8009c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009c02:	4a5a      	ldr	r2, [pc, #360]	; (8009d6c <HAL_GPIO_Init+0x30c>)
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	089b      	lsrs	r3, r3, #2
 8009c08:	3302      	adds	r3, #2
 8009c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	f003 0303 	and.w	r3, r3, #3
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	220f      	movs	r2, #15
 8009c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c1e:	43db      	mvns	r3, r3
 8009c20:	69ba      	ldr	r2, [r7, #24]
 8009c22:	4013      	ands	r3, r2
 8009c24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4a51      	ldr	r2, [pc, #324]	; (8009d70 <HAL_GPIO_Init+0x310>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d02b      	beq.n	8009c86 <HAL_GPIO_Init+0x226>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a50      	ldr	r2, [pc, #320]	; (8009d74 <HAL_GPIO_Init+0x314>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d025      	beq.n	8009c82 <HAL_GPIO_Init+0x222>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a4f      	ldr	r2, [pc, #316]	; (8009d78 <HAL_GPIO_Init+0x318>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d01f      	beq.n	8009c7e <HAL_GPIO_Init+0x21e>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a4e      	ldr	r2, [pc, #312]	; (8009d7c <HAL_GPIO_Init+0x31c>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d019      	beq.n	8009c7a <HAL_GPIO_Init+0x21a>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a4d      	ldr	r2, [pc, #308]	; (8009d80 <HAL_GPIO_Init+0x320>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d013      	beq.n	8009c76 <HAL_GPIO_Init+0x216>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a4c      	ldr	r2, [pc, #304]	; (8009d84 <HAL_GPIO_Init+0x324>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d00d      	beq.n	8009c72 <HAL_GPIO_Init+0x212>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a4b      	ldr	r2, [pc, #300]	; (8009d88 <HAL_GPIO_Init+0x328>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d007      	beq.n	8009c6e <HAL_GPIO_Init+0x20e>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a4a      	ldr	r2, [pc, #296]	; (8009d8c <HAL_GPIO_Init+0x32c>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d101      	bne.n	8009c6a <HAL_GPIO_Init+0x20a>
 8009c66:	2307      	movs	r3, #7
 8009c68:	e00e      	b.n	8009c88 <HAL_GPIO_Init+0x228>
 8009c6a:	2308      	movs	r3, #8
 8009c6c:	e00c      	b.n	8009c88 <HAL_GPIO_Init+0x228>
 8009c6e:	2306      	movs	r3, #6
 8009c70:	e00a      	b.n	8009c88 <HAL_GPIO_Init+0x228>
 8009c72:	2305      	movs	r3, #5
 8009c74:	e008      	b.n	8009c88 <HAL_GPIO_Init+0x228>
 8009c76:	2304      	movs	r3, #4
 8009c78:	e006      	b.n	8009c88 <HAL_GPIO_Init+0x228>
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e004      	b.n	8009c88 <HAL_GPIO_Init+0x228>
 8009c7e:	2302      	movs	r3, #2
 8009c80:	e002      	b.n	8009c88 <HAL_GPIO_Init+0x228>
 8009c82:	2301      	movs	r3, #1
 8009c84:	e000      	b.n	8009c88 <HAL_GPIO_Init+0x228>
 8009c86:	2300      	movs	r3, #0
 8009c88:	69fa      	ldr	r2, [r7, #28]
 8009c8a:	f002 0203 	and.w	r2, r2, #3
 8009c8e:	0092      	lsls	r2, r2, #2
 8009c90:	4093      	lsls	r3, r2
 8009c92:	69ba      	ldr	r2, [r7, #24]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009c98:	4934      	ldr	r1, [pc, #208]	; (8009d6c <HAL_GPIO_Init+0x30c>)
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	089b      	lsrs	r3, r3, #2
 8009c9e:	3302      	adds	r3, #2
 8009ca0:	69ba      	ldr	r2, [r7, #24]
 8009ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009ca6:	4b3a      	ldr	r3, [pc, #232]	; (8009d90 <HAL_GPIO_Init+0x330>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	43db      	mvns	r3, r3
 8009cb0:	69ba      	ldr	r2, [r7, #24]
 8009cb2:	4013      	ands	r3, r2
 8009cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d003      	beq.n	8009cca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009cc2:	69ba      	ldr	r2, [r7, #24]
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009cca:	4a31      	ldr	r2, [pc, #196]	; (8009d90 <HAL_GPIO_Init+0x330>)
 8009ccc:	69bb      	ldr	r3, [r7, #24]
 8009cce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009cd0:	4b2f      	ldr	r3, [pc, #188]	; (8009d90 <HAL_GPIO_Init+0x330>)
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	43db      	mvns	r3, r3
 8009cda:	69ba      	ldr	r2, [r7, #24]
 8009cdc:	4013      	ands	r3, r2
 8009cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d003      	beq.n	8009cf4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009cec:	69ba      	ldr	r2, [r7, #24]
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009cf4:	4a26      	ldr	r2, [pc, #152]	; (8009d90 <HAL_GPIO_Init+0x330>)
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009cfa:	4b25      	ldr	r3, [pc, #148]	; (8009d90 <HAL_GPIO_Init+0x330>)
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	43db      	mvns	r3, r3
 8009d04:	69ba      	ldr	r2, [r7, #24]
 8009d06:	4013      	ands	r3, r2
 8009d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d003      	beq.n	8009d1e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009d16:	69ba      	ldr	r2, [r7, #24]
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009d1e:	4a1c      	ldr	r2, [pc, #112]	; (8009d90 <HAL_GPIO_Init+0x330>)
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009d24:	4b1a      	ldr	r3, [pc, #104]	; (8009d90 <HAL_GPIO_Init+0x330>)
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	43db      	mvns	r3, r3
 8009d2e:	69ba      	ldr	r2, [r7, #24]
 8009d30:	4013      	ands	r3, r2
 8009d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d003      	beq.n	8009d48 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009d40:	69ba      	ldr	r2, [r7, #24]
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009d48:	4a11      	ldr	r2, [pc, #68]	; (8009d90 <HAL_GPIO_Init+0x330>)
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	3301      	adds	r3, #1
 8009d52:	61fb      	str	r3, [r7, #28]
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	2b0f      	cmp	r3, #15
 8009d58:	f67f ae90 	bls.w	8009a7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009d5c:	bf00      	nop
 8009d5e:	3724      	adds	r7, #36	; 0x24
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr
 8009d68:	40023800 	.word	0x40023800
 8009d6c:	40013800 	.word	0x40013800
 8009d70:	40020000 	.word	0x40020000
 8009d74:	40020400 	.word	0x40020400
 8009d78:	40020800 	.word	0x40020800
 8009d7c:	40020c00 	.word	0x40020c00
 8009d80:	40021000 	.word	0x40021000
 8009d84:	40021400 	.word	0x40021400
 8009d88:	40021800 	.word	0x40021800
 8009d8c:	40021c00 	.word	0x40021c00
 8009d90:	40013c00 	.word	0x40013c00

08009d94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	691a      	ldr	r2, [r3, #16]
 8009da4:	887b      	ldrh	r3, [r7, #2]
 8009da6:	4013      	ands	r3, r2
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d002      	beq.n	8009db2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009dac:	2301      	movs	r3, #1
 8009dae:	73fb      	strb	r3, [r7, #15]
 8009db0:	e001      	b.n	8009db6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009db2:	2300      	movs	r3, #0
 8009db4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3714      	adds	r7, #20
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	807b      	strh	r3, [r7, #2]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009dd4:	787b      	ldrb	r3, [r7, #1]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d003      	beq.n	8009de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009dda:	887a      	ldrh	r2, [r7, #2]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009de0:	e003      	b.n	8009dea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009de2:	887b      	ldrh	r3, [r7, #2]
 8009de4:	041a      	lsls	r2, r3, #16
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	619a      	str	r2, [r3, #24]
}
 8009dea:	bf00      	nop
 8009dec:	370c      	adds	r7, #12
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009df6:	b480      	push	{r7}
 8009df8:	b083      	sub	sp, #12
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
 8009dfe:	460b      	mov	r3, r1
 8009e00:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	695a      	ldr	r2, [r3, #20]
 8009e06:	887b      	ldrh	r3, [r7, #2]
 8009e08:	401a      	ands	r2, r3
 8009e0a:	887b      	ldrh	r3, [r7, #2]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d104      	bne.n	8009e1a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009e10:	887b      	ldrh	r3, [r7, #2]
 8009e12:	041a      	lsls	r2, r3, #16
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8009e18:	e002      	b.n	8009e20 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8009e1a:	887a      	ldrh	r2, [r7, #2]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	619a      	str	r2, [r3, #24]
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	4603      	mov	r3, r0
 8009e34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009e36:	4b08      	ldr	r3, [pc, #32]	; (8009e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009e38:	695a      	ldr	r2, [r3, #20]
 8009e3a:	88fb      	ldrh	r3, [r7, #6]
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d006      	beq.n	8009e50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009e42:	4a05      	ldr	r2, [pc, #20]	; (8009e58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009e44:	88fb      	ldrh	r3, [r7, #6]
 8009e46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009e48:	88fb      	ldrh	r3, [r7, #6]
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f000 f806 	bl	8009e5c <HAL_GPIO_EXTI_Callback>
  }
}
 8009e50:	bf00      	nop
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	40013c00 	.word	0x40013c00

08009e5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	4603      	mov	r3, r0
 8009e64:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009e66:	bf00      	nop
 8009e68:	370c      	adds	r7, #12
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
	...

08009e74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d101      	bne.n	8009e86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	e11f      	b.n	800a0c6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d106      	bne.n	8009ea0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f7fe f888 	bl	8007fb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2224      	movs	r2, #36	; 0x24
 8009ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f022 0201 	bic.w	r2, r2, #1
 8009eb6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ec6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009ed6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009ed8:	f001 fce4 	bl	800b8a4 <HAL_RCC_GetPCLK1Freq>
 8009edc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	4a7b      	ldr	r2, [pc, #492]	; (800a0d0 <HAL_I2C_Init+0x25c>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d807      	bhi.n	8009ef8 <HAL_I2C_Init+0x84>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	4a7a      	ldr	r2, [pc, #488]	; (800a0d4 <HAL_I2C_Init+0x260>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	bf94      	ite	ls
 8009ef0:	2301      	movls	r3, #1
 8009ef2:	2300      	movhi	r3, #0
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	e006      	b.n	8009f06 <HAL_I2C_Init+0x92>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	4a77      	ldr	r2, [pc, #476]	; (800a0d8 <HAL_I2C_Init+0x264>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	bf94      	ite	ls
 8009f00:	2301      	movls	r3, #1
 8009f02:	2300      	movhi	r3, #0
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d001      	beq.n	8009f0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e0db      	b.n	800a0c6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	4a72      	ldr	r2, [pc, #456]	; (800a0dc <HAL_I2C_Init+0x268>)
 8009f12:	fba2 2303 	umull	r2, r3, r2, r3
 8009f16:	0c9b      	lsrs	r3, r3, #18
 8009f18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	430a      	orrs	r2, r1
 8009f2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	6a1b      	ldr	r3, [r3, #32]
 8009f34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	4a64      	ldr	r2, [pc, #400]	; (800a0d0 <HAL_I2C_Init+0x25c>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d802      	bhi.n	8009f48 <HAL_I2C_Init+0xd4>
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	3301      	adds	r3, #1
 8009f46:	e009      	b.n	8009f5c <HAL_I2C_Init+0xe8>
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009f4e:	fb02 f303 	mul.w	r3, r2, r3
 8009f52:	4a63      	ldr	r2, [pc, #396]	; (800a0e0 <HAL_I2C_Init+0x26c>)
 8009f54:	fba2 2303 	umull	r2, r3, r2, r3
 8009f58:	099b      	lsrs	r3, r3, #6
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	6812      	ldr	r2, [r2, #0]
 8009f60:	430b      	orrs	r3, r1
 8009f62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	69db      	ldr	r3, [r3, #28]
 8009f6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009f6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	4956      	ldr	r1, [pc, #344]	; (800a0d0 <HAL_I2C_Init+0x25c>)
 8009f78:	428b      	cmp	r3, r1
 8009f7a:	d80d      	bhi.n	8009f98 <HAL_I2C_Init+0x124>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	1e59      	subs	r1, r3, #1
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	005b      	lsls	r3, r3, #1
 8009f86:	fbb1 f3f3 	udiv	r3, r1, r3
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f90:	2b04      	cmp	r3, #4
 8009f92:	bf38      	it	cc
 8009f94:	2304      	movcc	r3, #4
 8009f96:	e04f      	b.n	800a038 <HAL_I2C_Init+0x1c4>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d111      	bne.n	8009fc4 <HAL_I2C_Init+0x150>
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	1e58      	subs	r0, r3, #1
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6859      	ldr	r1, [r3, #4]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	005b      	lsls	r3, r3, #1
 8009fac:	440b      	add	r3, r1
 8009fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	bf0c      	ite	eq
 8009fbc:	2301      	moveq	r3, #1
 8009fbe:	2300      	movne	r3, #0
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	e012      	b.n	8009fea <HAL_I2C_Init+0x176>
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	1e58      	subs	r0, r3, #1
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6859      	ldr	r1, [r3, #4]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	009b      	lsls	r3, r3, #2
 8009fd0:	440b      	add	r3, r1
 8009fd2:	0099      	lsls	r1, r3, #2
 8009fd4:	440b      	add	r3, r1
 8009fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8009fda:	3301      	adds	r3, #1
 8009fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	bf0c      	ite	eq
 8009fe4:	2301      	moveq	r3, #1
 8009fe6:	2300      	movne	r3, #0
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d001      	beq.n	8009ff2 <HAL_I2C_Init+0x17e>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e022      	b.n	800a038 <HAL_I2C_Init+0x1c4>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d10e      	bne.n	800a018 <HAL_I2C_Init+0x1a4>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	1e58      	subs	r0, r3, #1
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6859      	ldr	r1, [r3, #4]
 800a002:	460b      	mov	r3, r1
 800a004:	005b      	lsls	r3, r3, #1
 800a006:	440b      	add	r3, r1
 800a008:	fbb0 f3f3 	udiv	r3, r0, r3
 800a00c:	3301      	adds	r3, #1
 800a00e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a012:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a016:	e00f      	b.n	800a038 <HAL_I2C_Init+0x1c4>
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	1e58      	subs	r0, r3, #1
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6859      	ldr	r1, [r3, #4]
 800a020:	460b      	mov	r3, r1
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	440b      	add	r3, r1
 800a026:	0099      	lsls	r1, r3, #2
 800a028:	440b      	add	r3, r1
 800a02a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a02e:	3301      	adds	r3, #1
 800a030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a034:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a038:	6879      	ldr	r1, [r7, #4]
 800a03a:	6809      	ldr	r1, [r1, #0]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	69da      	ldr	r2, [r3, #28]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a1b      	ldr	r3, [r3, #32]
 800a052:	431a      	orrs	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	430a      	orrs	r2, r1
 800a05a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a066:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	6911      	ldr	r1, [r2, #16]
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	68d2      	ldr	r2, [r2, #12]
 800a072:	4311      	orrs	r1, r2
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	6812      	ldr	r2, [r2, #0]
 800a078:	430b      	orrs	r3, r1
 800a07a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	695a      	ldr	r2, [r3, #20]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	699b      	ldr	r3, [r3, #24]
 800a08e:	431a      	orrs	r2, r3
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	430a      	orrs	r2, r1
 800a096:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f042 0201 	orr.w	r2, r2, #1
 800a0a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2220      	movs	r2, #32
 800a0b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	000186a0 	.word	0x000186a0
 800a0d4:	001e847f 	.word	0x001e847f
 800a0d8:	003d08ff 	.word	0x003d08ff
 800a0dc:	431bde83 	.word	0x431bde83
 800a0e0:	10624dd3 	.word	0x10624dd3

0800a0e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b088      	sub	sp, #32
 800a0e8:	af02      	add	r7, sp, #8
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	4608      	mov	r0, r1
 800a0ee:	4611      	mov	r1, r2
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	817b      	strh	r3, [r7, #10]
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	813b      	strh	r3, [r7, #8]
 800a0fa:	4613      	mov	r3, r2
 800a0fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a0fe:	f7fe fafb 	bl	80086f8 <HAL_GetTick>
 800a102:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	2b20      	cmp	r3, #32
 800a10e:	f040 80d9 	bne.w	800a2c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	2319      	movs	r3, #25
 800a118:	2201      	movs	r2, #1
 800a11a:	496d      	ldr	r1, [pc, #436]	; (800a2d0 <HAL_I2C_Mem_Write+0x1ec>)
 800a11c:	68f8      	ldr	r0, [r7, #12]
 800a11e:	f000 fda9 	bl	800ac74 <I2C_WaitOnFlagUntilTimeout>
 800a122:	4603      	mov	r3, r0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d001      	beq.n	800a12c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a128:	2302      	movs	r3, #2
 800a12a:	e0cc      	b.n	800a2c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a132:	2b01      	cmp	r3, #1
 800a134:	d101      	bne.n	800a13a <HAL_I2C_Mem_Write+0x56>
 800a136:	2302      	movs	r3, #2
 800a138:	e0c5      	b.n	800a2c6 <HAL_I2C_Mem_Write+0x1e2>
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f003 0301 	and.w	r3, r3, #1
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	d007      	beq.n	800a160 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f042 0201 	orr.w	r2, r2, #1
 800a15e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a16e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2221      	movs	r2, #33	; 0x21
 800a174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2240      	movs	r2, #64	; 0x40
 800a17c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2200      	movs	r2, #0
 800a184:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	6a3a      	ldr	r2, [r7, #32]
 800a18a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a190:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a196:	b29a      	uxth	r2, r3
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	4a4d      	ldr	r2, [pc, #308]	; (800a2d4 <HAL_I2C_Mem_Write+0x1f0>)
 800a1a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a1a2:	88f8      	ldrh	r0, [r7, #6]
 800a1a4:	893a      	ldrh	r2, [r7, #8]
 800a1a6:	8979      	ldrh	r1, [r7, #10]
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	9301      	str	r3, [sp, #4]
 800a1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	68f8      	ldr	r0, [r7, #12]
 800a1b4:	f000 fbe4 	bl	800a980 <I2C_RequestMemoryWrite>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d052      	beq.n	800a264 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e081      	b.n	800a2c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a1c2:	697a      	ldr	r2, [r7, #20]
 800a1c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f000 fe2a 	bl	800ae20 <I2C_WaitOnTXEFlagUntilTimeout>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00d      	beq.n	800a1ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d6:	2b04      	cmp	r3, #4
 800a1d8:	d107      	bne.n	800a1ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e06b      	b.n	800a2c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f2:	781a      	ldrb	r2, [r3, #0]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1fe:	1c5a      	adds	r2, r3, #1
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a208:	3b01      	subs	r3, #1
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a214:	b29b      	uxth	r3, r3
 800a216:	3b01      	subs	r3, #1
 800a218:	b29a      	uxth	r2, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	695b      	ldr	r3, [r3, #20]
 800a224:	f003 0304 	and.w	r3, r3, #4
 800a228:	2b04      	cmp	r3, #4
 800a22a:	d11b      	bne.n	800a264 <HAL_I2C_Mem_Write+0x180>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a230:	2b00      	cmp	r3, #0
 800a232:	d017      	beq.n	800a264 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a238:	781a      	ldrb	r2, [r3, #0]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a244:	1c5a      	adds	r2, r3, #1
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a24e:	3b01      	subs	r3, #1
 800a250:	b29a      	uxth	r2, r3
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a25a:	b29b      	uxth	r3, r3
 800a25c:	3b01      	subs	r3, #1
 800a25e:	b29a      	uxth	r2, r3
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d1aa      	bne.n	800a1c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a26c:	697a      	ldr	r2, [r7, #20]
 800a26e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f000 fe16 	bl	800aea2 <I2C_WaitOnBTFFlagUntilTimeout>
 800a276:	4603      	mov	r3, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00d      	beq.n	800a298 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a280:	2b04      	cmp	r3, #4
 800a282:	d107      	bne.n	800a294 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a292:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	e016      	b.n	800a2c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2220      	movs	r2, #32
 800a2ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	e000      	b.n	800a2c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a2c4:	2302      	movs	r3, #2
  }
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3718      	adds	r7, #24
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	00100002 	.word	0x00100002
 800a2d4:	ffff0000 	.word	0xffff0000

0800a2d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b08c      	sub	sp, #48	; 0x30
 800a2dc:	af02      	add	r7, sp, #8
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	4608      	mov	r0, r1
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	817b      	strh	r3, [r7, #10]
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	813b      	strh	r3, [r7, #8]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a2f2:	f7fe fa01 	bl	80086f8 <HAL_GetTick>
 800a2f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	2b20      	cmp	r3, #32
 800a302:	f040 8208 	bne.w	800a716 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	2319      	movs	r3, #25
 800a30c:	2201      	movs	r2, #1
 800a30e:	497b      	ldr	r1, [pc, #492]	; (800a4fc <HAL_I2C_Mem_Read+0x224>)
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	f000 fcaf 	bl	800ac74 <I2C_WaitOnFlagUntilTimeout>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d001      	beq.n	800a320 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a31c:	2302      	movs	r3, #2
 800a31e:	e1fb      	b.n	800a718 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a326:	2b01      	cmp	r3, #1
 800a328:	d101      	bne.n	800a32e <HAL_I2C_Mem_Read+0x56>
 800a32a:	2302      	movs	r3, #2
 800a32c:	e1f4      	b.n	800a718 <HAL_I2C_Mem_Read+0x440>
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2201      	movs	r2, #1
 800a332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 0301 	and.w	r3, r3, #1
 800a340:	2b01      	cmp	r3, #1
 800a342:	d007      	beq.n	800a354 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f042 0201 	orr.w	r2, r2, #1
 800a352:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a362:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2222      	movs	r2, #34	; 0x22
 800a368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2240      	movs	r2, #64	; 0x40
 800a370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2200      	movs	r2, #0
 800a378:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a37e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a384:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a38a:	b29a      	uxth	r2, r3
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	4a5b      	ldr	r2, [pc, #364]	; (800a500 <HAL_I2C_Mem_Read+0x228>)
 800a394:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a396:	88f8      	ldrh	r0, [r7, #6]
 800a398:	893a      	ldrh	r2, [r7, #8]
 800a39a:	8979      	ldrh	r1, [r7, #10]
 800a39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39e:	9301      	str	r3, [sp, #4]
 800a3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	68f8      	ldr	r0, [r7, #12]
 800a3a8:	f000 fb7e 	bl	800aaa8 <I2C_RequestMemoryRead>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d001      	beq.n	800a3b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e1b0      	b.n	800a718 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d113      	bne.n	800a3e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3be:	2300      	movs	r3, #0
 800a3c0:	623b      	str	r3, [r7, #32]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	695b      	ldr	r3, [r3, #20]
 800a3c8:	623b      	str	r3, [r7, #32]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	699b      	ldr	r3, [r3, #24]
 800a3d0:	623b      	str	r3, [r7, #32]
 800a3d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3e2:	601a      	str	r2, [r3, #0]
 800a3e4:	e184      	b.n	800a6f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d11b      	bne.n	800a426 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3fe:	2300      	movs	r3, #0
 800a400:	61fb      	str	r3, [r7, #28]
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	695b      	ldr	r3, [r3, #20]
 800a408:	61fb      	str	r3, [r7, #28]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	699b      	ldr	r3, [r3, #24]
 800a410:	61fb      	str	r3, [r7, #28]
 800a412:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	e164      	b.n	800a6f0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a42a:	2b02      	cmp	r3, #2
 800a42c:	d11b      	bne.n	800a466 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a43c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a44c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a44e:	2300      	movs	r3, #0
 800a450:	61bb      	str	r3, [r7, #24]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	695b      	ldr	r3, [r3, #20]
 800a458:	61bb      	str	r3, [r7, #24]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	699b      	ldr	r3, [r3, #24]
 800a460:	61bb      	str	r3, [r7, #24]
 800a462:	69bb      	ldr	r3, [r7, #24]
 800a464:	e144      	b.n	800a6f0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a466:	2300      	movs	r3, #0
 800a468:	617b      	str	r3, [r7, #20]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	695b      	ldr	r3, [r3, #20]
 800a470:	617b      	str	r3, [r7, #20]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	699b      	ldr	r3, [r3, #24]
 800a478:	617b      	str	r3, [r7, #20]
 800a47a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a47c:	e138      	b.n	800a6f0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a482:	2b03      	cmp	r3, #3
 800a484:	f200 80f1 	bhi.w	800a66a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d123      	bne.n	800a4d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a492:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f000 fd45 	bl	800af24 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d001      	beq.n	800a4a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e139      	b.n	800a718 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	691a      	ldr	r2, [r3, #16]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ae:	b2d2      	uxtb	r2, r2
 800a4b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b6:	1c5a      	adds	r2, r3, #1
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	b29a      	uxth	r2, r3
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a4d6:	e10b      	b.n	800a6f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d14e      	bne.n	800a57e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	4906      	ldr	r1, [pc, #24]	; (800a504 <HAL_I2C_Mem_Read+0x22c>)
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f000 fbc2 	bl	800ac74 <I2C_WaitOnFlagUntilTimeout>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d008      	beq.n	800a508 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e10e      	b.n	800a718 <HAL_I2C_Mem_Read+0x440>
 800a4fa:	bf00      	nop
 800a4fc:	00100002 	.word	0x00100002
 800a500:	ffff0000 	.word	0xffff0000
 800a504:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a516:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	691a      	ldr	r2, [r3, #16]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a522:	b2d2      	uxtb	r2, r2
 800a524:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52a:	1c5a      	adds	r2, r3, #1
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a534:	3b01      	subs	r3, #1
 800a536:	b29a      	uxth	r2, r3
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a540:	b29b      	uxth	r3, r3
 800a542:	3b01      	subs	r3, #1
 800a544:	b29a      	uxth	r2, r3
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	691a      	ldr	r2, [r3, #16]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a554:	b2d2      	uxtb	r2, r2
 800a556:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55c:	1c5a      	adds	r2, r3, #1
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a566:	3b01      	subs	r3, #1
 800a568:	b29a      	uxth	r2, r3
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a572:	b29b      	uxth	r3, r3
 800a574:	3b01      	subs	r3, #1
 800a576:	b29a      	uxth	r2, r3
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a57c:	e0b8      	b.n	800a6f0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a580:	9300      	str	r3, [sp, #0]
 800a582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a584:	2200      	movs	r2, #0
 800a586:	4966      	ldr	r1, [pc, #408]	; (800a720 <HAL_I2C_Mem_Read+0x448>)
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f000 fb73 	bl	800ac74 <I2C_WaitOnFlagUntilTimeout>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b00      	cmp	r3, #0
 800a592:	d001      	beq.n	800a598 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a594:	2301      	movs	r3, #1
 800a596:	e0bf      	b.n	800a718 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a5a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	691a      	ldr	r2, [r3, #16]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b2:	b2d2      	uxtb	r2, r2
 800a5b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ba:	1c5a      	adds	r2, r3, #1
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	3b01      	subs	r3, #1
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5dc:	9300      	str	r3, [sp, #0]
 800a5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	494f      	ldr	r1, [pc, #316]	; (800a720 <HAL_I2C_Mem_Read+0x448>)
 800a5e4:	68f8      	ldr	r0, [r7, #12]
 800a5e6:	f000 fb45 	bl	800ac74 <I2C_WaitOnFlagUntilTimeout>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d001      	beq.n	800a5f4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e091      	b.n	800a718 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a602:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	691a      	ldr	r2, [r3, #16]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60e:	b2d2      	uxtb	r2, r2
 800a610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a616:	1c5a      	adds	r2, r3, #1
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a620:	3b01      	subs	r3, #1
 800a622:	b29a      	uxth	r2, r3
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	3b01      	subs	r3, #1
 800a630:	b29a      	uxth	r2, r3
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	691a      	ldr	r2, [r3, #16]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a640:	b2d2      	uxtb	r2, r2
 800a642:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a648:	1c5a      	adds	r2, r3, #1
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a652:	3b01      	subs	r3, #1
 800a654:	b29a      	uxth	r2, r3
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a65e:	b29b      	uxth	r3, r3
 800a660:	3b01      	subs	r3, #1
 800a662:	b29a      	uxth	r2, r3
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a668:	e042      	b.n	800a6f0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a66a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a66c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f000 fc58 	bl	800af24 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a674:	4603      	mov	r3, r0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d001      	beq.n	800a67e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e04c      	b.n	800a718 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	691a      	ldr	r2, [r3, #16]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a688:	b2d2      	uxtb	r2, r2
 800a68a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a690:	1c5a      	adds	r2, r3, #1
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a69a:	3b01      	subs	r3, #1
 800a69c:	b29a      	uxth	r2, r3
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	695b      	ldr	r3, [r3, #20]
 800a6b6:	f003 0304 	and.w	r3, r3, #4
 800a6ba:	2b04      	cmp	r3, #4
 800a6bc:	d118      	bne.n	800a6f0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	691a      	ldr	r2, [r3, #16]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c8:	b2d2      	uxtb	r2, r2
 800a6ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d0:	1c5a      	adds	r2, r3, #1
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f47f aec2 	bne.w	800a47e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2220      	movs	r2, #32
 800a6fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a712:	2300      	movs	r3, #0
 800a714:	e000      	b.n	800a718 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a716:	2302      	movs	r3, #2
  }
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3728      	adds	r7, #40	; 0x28
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	00010004 	.word	0x00010004

0800a724 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b08a      	sub	sp, #40	; 0x28
 800a728:	af02      	add	r7, sp, #8
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	607a      	str	r2, [r7, #4]
 800a72e:	603b      	str	r3, [r7, #0]
 800a730:	460b      	mov	r3, r1
 800a732:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800a734:	f7fd ffe0 	bl	80086f8 <HAL_GetTick>
 800a738:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800a73a:	2301      	movs	r3, #1
 800a73c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a744:	b2db      	uxtb	r3, r3
 800a746:	2b20      	cmp	r3, #32
 800a748:	f040 8110 	bne.w	800a96c <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	2319      	movs	r3, #25
 800a752:	2201      	movs	r2, #1
 800a754:	4988      	ldr	r1, [pc, #544]	; (800a978 <HAL_I2C_IsDeviceReady+0x254>)
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	f000 fa8c 	bl	800ac74 <I2C_WaitOnFlagUntilTimeout>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800a762:	2302      	movs	r3, #2
 800a764:	e103      	b.n	800a96e <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d101      	bne.n	800a774 <HAL_I2C_IsDeviceReady+0x50>
 800a770:	2302      	movs	r3, #2
 800a772:	e0fc      	b.n	800a96e <HAL_I2C_IsDeviceReady+0x24a>
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2201      	movs	r2, #1
 800a778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f003 0301 	and.w	r3, r3, #1
 800a786:	2b01      	cmp	r3, #1
 800a788:	d007      	beq.n	800a79a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f042 0201 	orr.w	r2, r2, #1
 800a798:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a7a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2224      	movs	r2, #36	; 0x24
 800a7ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	4a70      	ldr	r2, [pc, #448]	; (800a97c <HAL_I2C_IsDeviceReady+0x258>)
 800a7bc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7cc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800a7ce:	69fb      	ldr	r3, [r7, #28]
 800a7d0:	9300      	str	r3, [sp, #0]
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f000 fa4a 	bl	800ac74 <I2C_WaitOnFlagUntilTimeout>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00c      	beq.n	800a800 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d003      	beq.n	800a7fc <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7fa:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	e0b6      	b.n	800a96e <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a800:	897b      	ldrh	r3, [r7, #10]
 800a802:	b2db      	uxtb	r3, r3
 800a804:	461a      	mov	r2, r3
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a80e:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800a810:	f7fd ff72 	bl	80086f8 <HAL_GetTick>
 800a814:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	695b      	ldr	r3, [r3, #20]
 800a81c:	f003 0302 	and.w	r3, r3, #2
 800a820:	2b02      	cmp	r3, #2
 800a822:	bf0c      	ite	eq
 800a824:	2301      	moveq	r3, #1
 800a826:	2300      	movne	r3, #0
 800a828:	b2db      	uxtb	r3, r3
 800a82a:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	695b      	ldr	r3, [r3, #20]
 800a832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a83a:	bf0c      	ite	eq
 800a83c:	2301      	moveq	r3, #1
 800a83e:	2300      	movne	r3, #0
 800a840:	b2db      	uxtb	r3, r3
 800a842:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a844:	e025      	b.n	800a892 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a846:	f7fd ff57 	bl	80086f8 <HAL_GetTick>
 800a84a:	4602      	mov	r2, r0
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	1ad3      	subs	r3, r2, r3
 800a850:	683a      	ldr	r2, [r7, #0]
 800a852:	429a      	cmp	r2, r3
 800a854:	d302      	bcc.n	800a85c <HAL_I2C_IsDeviceReady+0x138>
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d103      	bne.n	800a864 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	22a0      	movs	r2, #160	; 0xa0
 800a860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	695b      	ldr	r3, [r3, #20]
 800a86a:	f003 0302 	and.w	r3, r3, #2
 800a86e:	2b02      	cmp	r3, #2
 800a870:	bf0c      	ite	eq
 800a872:	2301      	moveq	r3, #1
 800a874:	2300      	movne	r3, #0
 800a876:	b2db      	uxtb	r3, r3
 800a878:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	695b      	ldr	r3, [r3, #20]
 800a880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a888:	bf0c      	ite	eq
 800a88a:	2301      	moveq	r3, #1
 800a88c:	2300      	movne	r3, #0
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	2ba0      	cmp	r3, #160	; 0xa0
 800a89c:	d005      	beq.n	800a8aa <HAL_I2C_IsDeviceReady+0x186>
 800a89e:	7dfb      	ldrb	r3, [r7, #23]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d102      	bne.n	800a8aa <HAL_I2C_IsDeviceReady+0x186>
 800a8a4:	7dbb      	ldrb	r3, [r7, #22]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d0cd      	beq.n	800a846 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2220      	movs	r2, #32
 800a8ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	695b      	ldr	r3, [r3, #20]
 800a8b8:	f003 0302 	and.w	r3, r3, #2
 800a8bc:	2b02      	cmp	r3, #2
 800a8be:	d129      	bne.n	800a914 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8ce:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	613b      	str	r3, [r7, #16]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	695b      	ldr	r3, [r3, #20]
 800a8da:	613b      	str	r3, [r7, #16]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	699b      	ldr	r3, [r3, #24]
 800a8e2:	613b      	str	r3, [r7, #16]
 800a8e4:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	9300      	str	r3, [sp, #0]
 800a8ea:	2319      	movs	r3, #25
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	4922      	ldr	r1, [pc, #136]	; (800a978 <HAL_I2C_IsDeviceReady+0x254>)
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f000 f9bf 	bl	800ac74 <I2C_WaitOnFlagUntilTimeout>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d001      	beq.n	800a900 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e036      	b.n	800a96e <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2220      	movs	r2, #32
 800a904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800a910:	2300      	movs	r3, #0
 800a912:	e02c      	b.n	800a96e <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a922:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a92c:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	9300      	str	r3, [sp, #0]
 800a932:	2319      	movs	r3, #25
 800a934:	2201      	movs	r2, #1
 800a936:	4910      	ldr	r1, [pc, #64]	; (800a978 <HAL_I2C_IsDeviceReady+0x254>)
 800a938:	68f8      	ldr	r0, [r7, #12]
 800a93a:	f000 f99b 	bl	800ac74 <I2C_WaitOnFlagUntilTimeout>
 800a93e:	4603      	mov	r3, r0
 800a940:	2b00      	cmp	r3, #0
 800a942:	d001      	beq.n	800a948 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	e012      	b.n	800a96e <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	3301      	adds	r3, #1
 800a94c:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800a94e:	69ba      	ldr	r2, [r7, #24]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	429a      	cmp	r2, r3
 800a954:	f4ff af33 	bcc.w	800a7be <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2220      	movs	r2, #32
 800a95c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	2200      	movs	r2, #0
 800a964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	e000      	b.n	800a96e <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 800a96c:	2302      	movs	r3, #2
  }
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3720      	adds	r7, #32
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	00100002 	.word	0x00100002
 800a97c:	ffff0000 	.word	0xffff0000

0800a980 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b088      	sub	sp, #32
 800a984:	af02      	add	r7, sp, #8
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	4608      	mov	r0, r1
 800a98a:	4611      	mov	r1, r2
 800a98c:	461a      	mov	r2, r3
 800a98e:	4603      	mov	r3, r0
 800a990:	817b      	strh	r3, [r7, #10]
 800a992:	460b      	mov	r3, r1
 800a994:	813b      	strh	r3, [r7, #8]
 800a996:	4613      	mov	r3, r2
 800a998:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	6a3b      	ldr	r3, [r7, #32]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a9b6:	68f8      	ldr	r0, [r7, #12]
 800a9b8:	f000 f95c 	bl	800ac74 <I2C_WaitOnFlagUntilTimeout>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00c      	beq.n	800a9dc <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d003      	beq.n	800a9d8 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a9d8:	2303      	movs	r3, #3
 800a9da:	e05f      	b.n	800aa9c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a9dc:	897b      	ldrh	r3, [r7, #10]
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a9ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ee:	6a3a      	ldr	r2, [r7, #32]
 800a9f0:	492c      	ldr	r1, [pc, #176]	; (800aaa4 <I2C_RequestMemoryWrite+0x124>)
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f000 f995 	bl	800ad22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d001      	beq.n	800aa02 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e04c      	b.n	800aa9c <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa02:	2300      	movs	r3, #0
 800aa04:	617b      	str	r3, [r7, #20]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	695b      	ldr	r3, [r3, #20]
 800aa0c:	617b      	str	r3, [r7, #20]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	699b      	ldr	r3, [r3, #24]
 800aa14:	617b      	str	r3, [r7, #20]
 800aa16:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa1a:	6a39      	ldr	r1, [r7, #32]
 800aa1c:	68f8      	ldr	r0, [r7, #12]
 800aa1e:	f000 f9ff 	bl	800ae20 <I2C_WaitOnTXEFlagUntilTimeout>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00d      	beq.n	800aa44 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa2c:	2b04      	cmp	r3, #4
 800aa2e:	d107      	bne.n	800aa40 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa3e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aa40:	2301      	movs	r3, #1
 800aa42:	e02b      	b.n	800aa9c <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aa44:	88fb      	ldrh	r3, [r7, #6]
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d105      	bne.n	800aa56 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aa4a:	893b      	ldrh	r3, [r7, #8]
 800aa4c:	b2da      	uxtb	r2, r3
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	611a      	str	r2, [r3, #16]
 800aa54:	e021      	b.n	800aa9a <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800aa56:	893b      	ldrh	r3, [r7, #8]
 800aa58:	0a1b      	lsrs	r3, r3, #8
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	b2da      	uxtb	r2, r3
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa66:	6a39      	ldr	r1, [r7, #32]
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f000 f9d9 	bl	800ae20 <I2C_WaitOnTXEFlagUntilTimeout>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d00d      	beq.n	800aa90 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa78:	2b04      	cmp	r3, #4
 800aa7a:	d107      	bne.n	800aa8c <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e005      	b.n	800aa9c <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aa90:	893b      	ldrh	r3, [r7, #8]
 800aa92:	b2da      	uxtb	r2, r3
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3718      	adds	r7, #24
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	00010002 	.word	0x00010002

0800aaa8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b088      	sub	sp, #32
 800aaac:	af02      	add	r7, sp, #8
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	4608      	mov	r0, r1
 800aab2:	4611      	mov	r1, r2
 800aab4:	461a      	mov	r2, r3
 800aab6:	4603      	mov	r3, r0
 800aab8:	817b      	strh	r3, [r7, #10]
 800aaba:	460b      	mov	r3, r1
 800aabc:	813b      	strh	r3, [r7, #8]
 800aabe:	4613      	mov	r3, r2
 800aac0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aad0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aae0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae4:	9300      	str	r3, [sp, #0]
 800aae6:	6a3b      	ldr	r3, [r7, #32]
 800aae8:	2200      	movs	r2, #0
 800aaea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aaee:	68f8      	ldr	r0, [r7, #12]
 800aaf0:	f000 f8c0 	bl	800ac74 <I2C_WaitOnFlagUntilTimeout>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00c      	beq.n	800ab14 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d003      	beq.n	800ab10 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ab10:	2303      	movs	r3, #3
 800ab12:	e0a9      	b.n	800ac68 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ab14:	897b      	ldrh	r3, [r7, #10]
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	461a      	mov	r2, r3
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ab22:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ab24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab26:	6a3a      	ldr	r2, [r7, #32]
 800ab28:	4951      	ldr	r1, [pc, #324]	; (800ac70 <I2C_RequestMemoryRead+0x1c8>)
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f000 f8f9 	bl	800ad22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab30:	4603      	mov	r3, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d001      	beq.n	800ab3a <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800ab36:	2301      	movs	r3, #1
 800ab38:	e096      	b.n	800ac68 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	617b      	str	r3, [r7, #20]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	695b      	ldr	r3, [r3, #20]
 800ab44:	617b      	str	r3, [r7, #20]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	699b      	ldr	r3, [r3, #24]
 800ab4c:	617b      	str	r3, [r7, #20]
 800ab4e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab52:	6a39      	ldr	r1, [r7, #32]
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f000 f963 	bl	800ae20 <I2C_WaitOnTXEFlagUntilTimeout>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00d      	beq.n	800ab7c <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab64:	2b04      	cmp	r3, #4
 800ab66:	d107      	bne.n	800ab78 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	e075      	b.n	800ac68 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ab7c:	88fb      	ldrh	r3, [r7, #6]
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d105      	bne.n	800ab8e <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ab82:	893b      	ldrh	r3, [r7, #8]
 800ab84:	b2da      	uxtb	r2, r3
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	611a      	str	r2, [r3, #16]
 800ab8c:	e021      	b.n	800abd2 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ab8e:	893b      	ldrh	r3, [r7, #8]
 800ab90:	0a1b      	lsrs	r3, r3, #8
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	b2da      	uxtb	r2, r3
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab9e:	6a39      	ldr	r1, [r7, #32]
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f000 f93d 	bl	800ae20 <I2C_WaitOnTXEFlagUntilTimeout>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00d      	beq.n	800abc8 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb0:	2b04      	cmp	r3, #4
 800abb2:	d107      	bne.n	800abc4 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800abc4:	2301      	movs	r3, #1
 800abc6:	e04f      	b.n	800ac68 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800abc8:	893b      	ldrh	r3, [r7, #8]
 800abca:	b2da      	uxtb	r2, r3
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800abd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abd4:	6a39      	ldr	r1, [r7, #32]
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	f000 f922 	bl	800ae20 <I2C_WaitOnTXEFlagUntilTimeout>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00d      	beq.n	800abfe <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe6:	2b04      	cmp	r3, #4
 800abe8:	d107      	bne.n	800abfa <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abf8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800abfa:	2301      	movs	r3, #1
 800abfc:	e034      	b.n	800ac68 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	6a3b      	ldr	r3, [r7, #32]
 800ac14:	2200      	movs	r2, #0
 800ac16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ac1a:	68f8      	ldr	r0, [r7, #12]
 800ac1c:	f000 f82a 	bl	800ac74 <I2C_WaitOnFlagUntilTimeout>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00c      	beq.n	800ac40 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d003      	beq.n	800ac3c <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ac3c:	2303      	movs	r3, #3
 800ac3e:	e013      	b.n	800ac68 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ac40:	897b      	ldrh	r3, [r7, #10]
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	f043 0301 	orr.w	r3, r3, #1
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ac50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac52:	6a3a      	ldr	r2, [r7, #32]
 800ac54:	4906      	ldr	r1, [pc, #24]	; (800ac70 <I2C_RequestMemoryRead+0x1c8>)
 800ac56:	68f8      	ldr	r0, [r7, #12]
 800ac58:	f000 f863 	bl	800ad22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d001      	beq.n	800ac66 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e000      	b.n	800ac68 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800ac66:	2300      	movs	r3, #0
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3718      	adds	r7, #24
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	00010002 	.word	0x00010002

0800ac74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	60b9      	str	r1, [r7, #8]
 800ac7e:	603b      	str	r3, [r7, #0]
 800ac80:	4613      	mov	r3, r2
 800ac82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ac84:	e025      	b.n	800acd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac8c:	d021      	beq.n	800acd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac8e:	f7fd fd33 	bl	80086f8 <HAL_GetTick>
 800ac92:	4602      	mov	r2, r0
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	1ad3      	subs	r3, r2, r3
 800ac98:	683a      	ldr	r2, [r7, #0]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d302      	bcc.n	800aca4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d116      	bne.n	800acd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2200      	movs	r2, #0
 800aca8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2220      	movs	r2, #32
 800acae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acbe:	f043 0220 	orr.w	r2, r3, #32
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2200      	movs	r2, #0
 800acca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800acce:	2301      	movs	r3, #1
 800acd0:	e023      	b.n	800ad1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	0c1b      	lsrs	r3, r3, #16
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d10d      	bne.n	800acf8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	695b      	ldr	r3, [r3, #20]
 800ace2:	43da      	mvns	r2, r3
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	4013      	ands	r3, r2
 800ace8:	b29b      	uxth	r3, r3
 800acea:	2b00      	cmp	r3, #0
 800acec:	bf0c      	ite	eq
 800acee:	2301      	moveq	r3, #1
 800acf0:	2300      	movne	r3, #0
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	461a      	mov	r2, r3
 800acf6:	e00c      	b.n	800ad12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	699b      	ldr	r3, [r3, #24]
 800acfe:	43da      	mvns	r2, r3
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	4013      	ands	r3, r2
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	bf0c      	ite	eq
 800ad0a:	2301      	moveq	r3, #1
 800ad0c:	2300      	movne	r3, #0
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	461a      	mov	r2, r3
 800ad12:	79fb      	ldrb	r3, [r7, #7]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d0b6      	beq.n	800ac86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ad18:	2300      	movs	r3, #0
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b084      	sub	sp, #16
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	60f8      	str	r0, [r7, #12]
 800ad2a:	60b9      	str	r1, [r7, #8]
 800ad2c:	607a      	str	r2, [r7, #4]
 800ad2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ad30:	e051      	b.n	800add6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	695b      	ldr	r3, [r3, #20]
 800ad38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad40:	d123      	bne.n	800ad8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ad5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2220      	movs	r2, #32
 800ad66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad76:	f043 0204 	orr.w	r2, r3, #4
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2200      	movs	r2, #0
 800ad82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e046      	b.n	800ae18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad90:	d021      	beq.n	800add6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad92:	f7fd fcb1 	bl	80086f8 <HAL_GetTick>
 800ad96:	4602      	mov	r2, r0
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	1ad3      	subs	r3, r2, r3
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d302      	bcc.n	800ada8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d116      	bne.n	800add6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2200      	movs	r2, #0
 800adac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2220      	movs	r2, #32
 800adb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2200      	movs	r2, #0
 800adba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc2:	f043 0220 	orr.w	r2, r3, #32
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2200      	movs	r2, #0
 800adce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	e020      	b.n	800ae18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	0c1b      	lsrs	r3, r3, #16
 800adda:	b2db      	uxtb	r3, r3
 800addc:	2b01      	cmp	r3, #1
 800adde:	d10c      	bne.n	800adfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	695b      	ldr	r3, [r3, #20]
 800ade6:	43da      	mvns	r2, r3
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	4013      	ands	r3, r2
 800adec:	b29b      	uxth	r3, r3
 800adee:	2b00      	cmp	r3, #0
 800adf0:	bf14      	ite	ne
 800adf2:	2301      	movne	r3, #1
 800adf4:	2300      	moveq	r3, #0
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	e00b      	b.n	800ae12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	699b      	ldr	r3, [r3, #24]
 800ae00:	43da      	mvns	r2, r3
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	4013      	ands	r3, r2
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	bf14      	ite	ne
 800ae0c:	2301      	movne	r3, #1
 800ae0e:	2300      	moveq	r3, #0
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d18d      	bne.n	800ad32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ae16:	2300      	movs	r3, #0
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3710      	adds	r7, #16
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b084      	sub	sp, #16
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	60f8      	str	r0, [r7, #12]
 800ae28:	60b9      	str	r1, [r7, #8]
 800ae2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ae2c:	e02d      	b.n	800ae8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f000 f8ce 	bl	800afd0 <I2C_IsAcknowledgeFailed>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d001      	beq.n	800ae3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e02d      	b.n	800ae9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae44:	d021      	beq.n	800ae8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae46:	f7fd fc57 	bl	80086f8 <HAL_GetTick>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	1ad3      	subs	r3, r2, r3
 800ae50:	68ba      	ldr	r2, [r7, #8]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d302      	bcc.n	800ae5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d116      	bne.n	800ae8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2220      	movs	r2, #32
 800ae66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae76:	f043 0220 	orr.w	r2, r3, #32
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	e007      	b.n	800ae9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	695b      	ldr	r3, [r3, #20]
 800ae90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae94:	2b80      	cmp	r3, #128	; 0x80
 800ae96:	d1ca      	bne.n	800ae2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b084      	sub	sp, #16
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	60f8      	str	r0, [r7, #12]
 800aeaa:	60b9      	str	r1, [r7, #8]
 800aeac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800aeae:	e02d      	b.n	800af0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aeb0:	68f8      	ldr	r0, [r7, #12]
 800aeb2:	f000 f88d 	bl	800afd0 <I2C_IsAcknowledgeFailed>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d001      	beq.n	800aec0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	e02d      	b.n	800af1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aec6:	d021      	beq.n	800af0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aec8:	f7fd fc16 	bl	80086f8 <HAL_GetTick>
 800aecc:	4602      	mov	r2, r0
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	1ad3      	subs	r3, r2, r3
 800aed2:	68ba      	ldr	r2, [r7, #8]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d302      	bcc.n	800aede <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d116      	bne.n	800af0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2220      	movs	r2, #32
 800aee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2200      	movs	r2, #0
 800aef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef8:	f043 0220 	orr.w	r2, r3, #32
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2200      	movs	r2, #0
 800af04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800af08:	2301      	movs	r3, #1
 800af0a:	e007      	b.n	800af1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	695b      	ldr	r3, [r3, #20]
 800af12:	f003 0304 	and.w	r3, r3, #4
 800af16:	2b04      	cmp	r3, #4
 800af18:	d1ca      	bne.n	800aeb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800af1a:	2300      	movs	r3, #0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3710      	adds	r7, #16
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800af30:	e042      	b.n	800afb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	695b      	ldr	r3, [r3, #20]
 800af38:	f003 0310 	and.w	r3, r3, #16
 800af3c:	2b10      	cmp	r3, #16
 800af3e:	d119      	bne.n	800af74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f06f 0210 	mvn.w	r2, #16
 800af48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2200      	movs	r2, #0
 800af4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2220      	movs	r2, #32
 800af54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	e029      	b.n	800afc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af74:	f7fd fbc0 	bl	80086f8 <HAL_GetTick>
 800af78:	4602      	mov	r2, r0
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	1ad3      	subs	r3, r2, r3
 800af7e:	68ba      	ldr	r2, [r7, #8]
 800af80:	429a      	cmp	r2, r3
 800af82:	d302      	bcc.n	800af8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d116      	bne.n	800afb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2200      	movs	r2, #0
 800af8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2220      	movs	r2, #32
 800af94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa4:	f043 0220 	orr.w	r2, r3, #32
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	e007      	b.n	800afc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	695b      	ldr	r3, [r3, #20]
 800afbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afc2:	2b40      	cmp	r3, #64	; 0x40
 800afc4:	d1b5      	bne.n	800af32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800afc6:	2300      	movs	r3, #0
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3710      	adds	r7, #16
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b083      	sub	sp, #12
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	695b      	ldr	r3, [r3, #20]
 800afde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afe6:	d11b      	bne.n	800b020 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800aff0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2200      	movs	r2, #0
 800aff6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2220      	movs	r2, #32
 800affc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b00c:	f043 0204 	orr.w	r2, r3, #4
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b01c:	2301      	movs	r3, #1
 800b01e:	e000      	b.n	800b022 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b020:	2300      	movs	r3, #0
}
 800b022:	4618      	mov	r0, r3
 800b024:	370c      	adds	r7, #12
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
	...

0800b030 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b086      	sub	sp, #24
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d101      	bne.n	800b042 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b03e:	2301      	movs	r3, #1
 800b040:	e25b      	b.n	800b4fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f003 0301 	and.w	r3, r3, #1
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d075      	beq.n	800b13a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b04e:	4ba3      	ldr	r3, [pc, #652]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	f003 030c 	and.w	r3, r3, #12
 800b056:	2b04      	cmp	r3, #4
 800b058:	d00c      	beq.n	800b074 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b05a:	4ba0      	ldr	r3, [pc, #640]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800b062:	2b08      	cmp	r3, #8
 800b064:	d112      	bne.n	800b08c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b066:	4b9d      	ldr	r3, [pc, #628]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b06e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b072:	d10b      	bne.n	800b08c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b074:	4b99      	ldr	r3, [pc, #612]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d05b      	beq.n	800b138 <HAL_RCC_OscConfig+0x108>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d157      	bne.n	800b138 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	e236      	b.n	800b4fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b094:	d106      	bne.n	800b0a4 <HAL_RCC_OscConfig+0x74>
 800b096:	4b91      	ldr	r3, [pc, #580]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4a90      	ldr	r2, [pc, #576]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b09c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0a0:	6013      	str	r3, [r2, #0]
 800b0a2:	e01d      	b.n	800b0e0 <HAL_RCC_OscConfig+0xb0>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b0ac:	d10c      	bne.n	800b0c8 <HAL_RCC_OscConfig+0x98>
 800b0ae:	4b8b      	ldr	r3, [pc, #556]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4a8a      	ldr	r2, [pc, #552]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b0b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b0b8:	6013      	str	r3, [r2, #0]
 800b0ba:	4b88      	ldr	r3, [pc, #544]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a87      	ldr	r2, [pc, #540]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b0c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0c4:	6013      	str	r3, [r2, #0]
 800b0c6:	e00b      	b.n	800b0e0 <HAL_RCC_OscConfig+0xb0>
 800b0c8:	4b84      	ldr	r3, [pc, #528]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a83      	ldr	r2, [pc, #524]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b0ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b0d2:	6013      	str	r3, [r2, #0]
 800b0d4:	4b81      	ldr	r3, [pc, #516]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a80      	ldr	r2, [pc, #512]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b0da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b0de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d013      	beq.n	800b110 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b0e8:	f7fd fb06 	bl	80086f8 <HAL_GetTick>
 800b0ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b0ee:	e008      	b.n	800b102 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b0f0:	f7fd fb02 	bl	80086f8 <HAL_GetTick>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	2b64      	cmp	r3, #100	; 0x64
 800b0fc:	d901      	bls.n	800b102 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b0fe:	2303      	movs	r3, #3
 800b100:	e1fb      	b.n	800b4fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b102:	4b76      	ldr	r3, [pc, #472]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d0f0      	beq.n	800b0f0 <HAL_RCC_OscConfig+0xc0>
 800b10e:	e014      	b.n	800b13a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b110:	f7fd faf2 	bl	80086f8 <HAL_GetTick>
 800b114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b116:	e008      	b.n	800b12a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b118:	f7fd faee 	bl	80086f8 <HAL_GetTick>
 800b11c:	4602      	mov	r2, r0
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	2b64      	cmp	r3, #100	; 0x64
 800b124:	d901      	bls.n	800b12a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b126:	2303      	movs	r3, #3
 800b128:	e1e7      	b.n	800b4fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b12a:	4b6c      	ldr	r3, [pc, #432]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b132:	2b00      	cmp	r3, #0
 800b134:	d1f0      	bne.n	800b118 <HAL_RCC_OscConfig+0xe8>
 800b136:	e000      	b.n	800b13a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b138:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f003 0302 	and.w	r3, r3, #2
 800b142:	2b00      	cmp	r3, #0
 800b144:	d063      	beq.n	800b20e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b146:	4b65      	ldr	r3, [pc, #404]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	f003 030c 	and.w	r3, r3, #12
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00b      	beq.n	800b16a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b152:	4b62      	ldr	r3, [pc, #392]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b15a:	2b08      	cmp	r3, #8
 800b15c:	d11c      	bne.n	800b198 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b15e:	4b5f      	ldr	r3, [pc, #380]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b166:	2b00      	cmp	r3, #0
 800b168:	d116      	bne.n	800b198 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b16a:	4b5c      	ldr	r3, [pc, #368]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f003 0302 	and.w	r3, r3, #2
 800b172:	2b00      	cmp	r3, #0
 800b174:	d005      	beq.n	800b182 <HAL_RCC_OscConfig+0x152>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d001      	beq.n	800b182 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	e1bb      	b.n	800b4fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b182:	4b56      	ldr	r3, [pc, #344]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	691b      	ldr	r3, [r3, #16]
 800b18e:	00db      	lsls	r3, r3, #3
 800b190:	4952      	ldr	r1, [pc, #328]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b192:	4313      	orrs	r3, r2
 800b194:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b196:	e03a      	b.n	800b20e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d020      	beq.n	800b1e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b1a0:	4b4f      	ldr	r3, [pc, #316]	; (800b2e0 <HAL_RCC_OscConfig+0x2b0>)
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1a6:	f7fd faa7 	bl	80086f8 <HAL_GetTick>
 800b1aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b1ac:	e008      	b.n	800b1c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b1ae:	f7fd faa3 	bl	80086f8 <HAL_GetTick>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	1ad3      	subs	r3, r2, r3
 800b1b8:	2b02      	cmp	r3, #2
 800b1ba:	d901      	bls.n	800b1c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b1bc:	2303      	movs	r3, #3
 800b1be:	e19c      	b.n	800b4fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b1c0:	4b46      	ldr	r3, [pc, #280]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f003 0302 	and.w	r3, r3, #2
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d0f0      	beq.n	800b1ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b1cc:	4b43      	ldr	r3, [pc, #268]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	691b      	ldr	r3, [r3, #16]
 800b1d8:	00db      	lsls	r3, r3, #3
 800b1da:	4940      	ldr	r1, [pc, #256]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	600b      	str	r3, [r1, #0]
 800b1e0:	e015      	b.n	800b20e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b1e2:	4b3f      	ldr	r3, [pc, #252]	; (800b2e0 <HAL_RCC_OscConfig+0x2b0>)
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1e8:	f7fd fa86 	bl	80086f8 <HAL_GetTick>
 800b1ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b1ee:	e008      	b.n	800b202 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b1f0:	f7fd fa82 	bl	80086f8 <HAL_GetTick>
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	1ad3      	subs	r3, r2, r3
 800b1fa:	2b02      	cmp	r3, #2
 800b1fc:	d901      	bls.n	800b202 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b1fe:	2303      	movs	r3, #3
 800b200:	e17b      	b.n	800b4fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b202:	4b36      	ldr	r3, [pc, #216]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f003 0302 	and.w	r3, r3, #2
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d1f0      	bne.n	800b1f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f003 0308 	and.w	r3, r3, #8
 800b216:	2b00      	cmp	r3, #0
 800b218:	d030      	beq.n	800b27c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	695b      	ldr	r3, [r3, #20]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d016      	beq.n	800b250 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b222:	4b30      	ldr	r3, [pc, #192]	; (800b2e4 <HAL_RCC_OscConfig+0x2b4>)
 800b224:	2201      	movs	r2, #1
 800b226:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b228:	f7fd fa66 	bl	80086f8 <HAL_GetTick>
 800b22c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b22e:	e008      	b.n	800b242 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b230:	f7fd fa62 	bl	80086f8 <HAL_GetTick>
 800b234:	4602      	mov	r2, r0
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	2b02      	cmp	r3, #2
 800b23c:	d901      	bls.n	800b242 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b23e:	2303      	movs	r3, #3
 800b240:	e15b      	b.n	800b4fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b242:	4b26      	ldr	r3, [pc, #152]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b246:	f003 0302 	and.w	r3, r3, #2
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d0f0      	beq.n	800b230 <HAL_RCC_OscConfig+0x200>
 800b24e:	e015      	b.n	800b27c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b250:	4b24      	ldr	r3, [pc, #144]	; (800b2e4 <HAL_RCC_OscConfig+0x2b4>)
 800b252:	2200      	movs	r2, #0
 800b254:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b256:	f7fd fa4f 	bl	80086f8 <HAL_GetTick>
 800b25a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b25c:	e008      	b.n	800b270 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b25e:	f7fd fa4b 	bl	80086f8 <HAL_GetTick>
 800b262:	4602      	mov	r2, r0
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	1ad3      	subs	r3, r2, r3
 800b268:	2b02      	cmp	r3, #2
 800b26a:	d901      	bls.n	800b270 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b26c:	2303      	movs	r3, #3
 800b26e:	e144      	b.n	800b4fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b270:	4b1a      	ldr	r3, [pc, #104]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b274:	f003 0302 	and.w	r3, r3, #2
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d1f0      	bne.n	800b25e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f003 0304 	and.w	r3, r3, #4
 800b284:	2b00      	cmp	r3, #0
 800b286:	f000 80a0 	beq.w	800b3ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b28a:	2300      	movs	r3, #0
 800b28c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b28e:	4b13      	ldr	r3, [pc, #76]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b296:	2b00      	cmp	r3, #0
 800b298:	d10f      	bne.n	800b2ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b29a:	2300      	movs	r3, #0
 800b29c:	60bb      	str	r3, [r7, #8]
 800b29e:	4b0f      	ldr	r3, [pc, #60]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a2:	4a0e      	ldr	r2, [pc, #56]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b2a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2a8:	6413      	str	r3, [r2, #64]	; 0x40
 800b2aa:	4b0c      	ldr	r3, [pc, #48]	; (800b2dc <HAL_RCC_OscConfig+0x2ac>)
 800b2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2b2:	60bb      	str	r3, [r7, #8]
 800b2b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b2ba:	4b0b      	ldr	r3, [pc, #44]	; (800b2e8 <HAL_RCC_OscConfig+0x2b8>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d121      	bne.n	800b30a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b2c6:	4b08      	ldr	r3, [pc, #32]	; (800b2e8 <HAL_RCC_OscConfig+0x2b8>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4a07      	ldr	r2, [pc, #28]	; (800b2e8 <HAL_RCC_OscConfig+0x2b8>)
 800b2cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b2d2:	f7fd fa11 	bl	80086f8 <HAL_GetTick>
 800b2d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b2d8:	e011      	b.n	800b2fe <HAL_RCC_OscConfig+0x2ce>
 800b2da:	bf00      	nop
 800b2dc:	40023800 	.word	0x40023800
 800b2e0:	42470000 	.word	0x42470000
 800b2e4:	42470e80 	.word	0x42470e80
 800b2e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b2ec:	f7fd fa04 	bl	80086f8 <HAL_GetTick>
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	1ad3      	subs	r3, r2, r3
 800b2f6:	2b02      	cmp	r3, #2
 800b2f8:	d901      	bls.n	800b2fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b2fa:	2303      	movs	r3, #3
 800b2fc:	e0fd      	b.n	800b4fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b2fe:	4b81      	ldr	r3, [pc, #516]	; (800b504 <HAL_RCC_OscConfig+0x4d4>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b306:	2b00      	cmp	r3, #0
 800b308:	d0f0      	beq.n	800b2ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	2b01      	cmp	r3, #1
 800b310:	d106      	bne.n	800b320 <HAL_RCC_OscConfig+0x2f0>
 800b312:	4b7d      	ldr	r3, [pc, #500]	; (800b508 <HAL_RCC_OscConfig+0x4d8>)
 800b314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b316:	4a7c      	ldr	r2, [pc, #496]	; (800b508 <HAL_RCC_OscConfig+0x4d8>)
 800b318:	f043 0301 	orr.w	r3, r3, #1
 800b31c:	6713      	str	r3, [r2, #112]	; 0x70
 800b31e:	e01c      	b.n	800b35a <HAL_RCC_OscConfig+0x32a>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	2b05      	cmp	r3, #5
 800b326:	d10c      	bne.n	800b342 <HAL_RCC_OscConfig+0x312>
 800b328:	4b77      	ldr	r3, [pc, #476]	; (800b508 <HAL_RCC_OscConfig+0x4d8>)
 800b32a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b32c:	4a76      	ldr	r2, [pc, #472]	; (800b508 <HAL_RCC_OscConfig+0x4d8>)
 800b32e:	f043 0304 	orr.w	r3, r3, #4
 800b332:	6713      	str	r3, [r2, #112]	; 0x70
 800b334:	4b74      	ldr	r3, [pc, #464]	; (800b508 <HAL_RCC_OscConfig+0x4d8>)
 800b336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b338:	4a73      	ldr	r2, [pc, #460]	; (800b508 <HAL_RCC_OscConfig+0x4d8>)
 800b33a:	f043 0301 	orr.w	r3, r3, #1
 800b33e:	6713      	str	r3, [r2, #112]	; 0x70
 800b340:	e00b      	b.n	800b35a <HAL_RCC_OscConfig+0x32a>
 800b342:	4b71      	ldr	r3, [pc, #452]	; (800b508 <HAL_RCC_OscConfig+0x4d8>)
 800b344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b346:	4a70      	ldr	r2, [pc, #448]	; (800b508 <HAL_RCC_OscConfig+0x4d8>)
 800b348:	f023 0301 	bic.w	r3, r3, #1
 800b34c:	6713      	str	r3, [r2, #112]	; 0x70
 800b34e:	4b6e      	ldr	r3, [pc, #440]	; (800b508 <HAL_RCC_OscConfig+0x4d8>)
 800b350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b352:	4a6d      	ldr	r2, [pc, #436]	; (800b508 <HAL_RCC_OscConfig+0x4d8>)
 800b354:	f023 0304 	bic.w	r3, r3, #4
 800b358:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d015      	beq.n	800b38e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b362:	f7fd f9c9 	bl	80086f8 <HAL_GetTick>
 800b366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b368:	e00a      	b.n	800b380 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b36a:	f7fd f9c5 	bl	80086f8 <HAL_GetTick>
 800b36e:	4602      	mov	r2, r0
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	1ad3      	subs	r3, r2, r3
 800b374:	f241 3288 	movw	r2, #5000	; 0x1388
 800b378:	4293      	cmp	r3, r2
 800b37a:	d901      	bls.n	800b380 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b37c:	2303      	movs	r3, #3
 800b37e:	e0bc      	b.n	800b4fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b380:	4b61      	ldr	r3, [pc, #388]	; (800b508 <HAL_RCC_OscConfig+0x4d8>)
 800b382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b384:	f003 0302 	and.w	r3, r3, #2
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d0ee      	beq.n	800b36a <HAL_RCC_OscConfig+0x33a>
 800b38c:	e014      	b.n	800b3b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b38e:	f7fd f9b3 	bl	80086f8 <HAL_GetTick>
 800b392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b394:	e00a      	b.n	800b3ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b396:	f7fd f9af 	bl	80086f8 <HAL_GetTick>
 800b39a:	4602      	mov	r2, r0
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	1ad3      	subs	r3, r2, r3
 800b3a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d901      	bls.n	800b3ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b3a8:	2303      	movs	r3, #3
 800b3aa:	e0a6      	b.n	800b4fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b3ac:	4b56      	ldr	r3, [pc, #344]	; (800b508 <HAL_RCC_OscConfig+0x4d8>)
 800b3ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3b0:	f003 0302 	and.w	r3, r3, #2
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d1ee      	bne.n	800b396 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b3b8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d105      	bne.n	800b3ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b3be:	4b52      	ldr	r3, [pc, #328]	; (800b508 <HAL_RCC_OscConfig+0x4d8>)
 800b3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c2:	4a51      	ldr	r2, [pc, #324]	; (800b508 <HAL_RCC_OscConfig+0x4d8>)
 800b3c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	699b      	ldr	r3, [r3, #24]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	f000 8092 	beq.w	800b4f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b3d4:	4b4c      	ldr	r3, [pc, #304]	; (800b508 <HAL_RCC_OscConfig+0x4d8>)
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	f003 030c 	and.w	r3, r3, #12
 800b3dc:	2b08      	cmp	r3, #8
 800b3de:	d05c      	beq.n	800b49a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	2b02      	cmp	r3, #2
 800b3e6:	d141      	bne.n	800b46c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b3e8:	4b48      	ldr	r3, [pc, #288]	; (800b50c <HAL_RCC_OscConfig+0x4dc>)
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b3ee:	f7fd f983 	bl	80086f8 <HAL_GetTick>
 800b3f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b3f4:	e008      	b.n	800b408 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b3f6:	f7fd f97f 	bl	80086f8 <HAL_GetTick>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	1ad3      	subs	r3, r2, r3
 800b400:	2b02      	cmp	r3, #2
 800b402:	d901      	bls.n	800b408 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b404:	2303      	movs	r3, #3
 800b406:	e078      	b.n	800b4fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b408:	4b3f      	ldr	r3, [pc, #252]	; (800b508 <HAL_RCC_OscConfig+0x4d8>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b410:	2b00      	cmp	r3, #0
 800b412:	d1f0      	bne.n	800b3f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	69da      	ldr	r2, [r3, #28]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6a1b      	ldr	r3, [r3, #32]
 800b41c:	431a      	orrs	r2, r3
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b422:	019b      	lsls	r3, r3, #6
 800b424:	431a      	orrs	r2, r3
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b42a:	085b      	lsrs	r3, r3, #1
 800b42c:	3b01      	subs	r3, #1
 800b42e:	041b      	lsls	r3, r3, #16
 800b430:	431a      	orrs	r2, r3
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b436:	061b      	lsls	r3, r3, #24
 800b438:	4933      	ldr	r1, [pc, #204]	; (800b508 <HAL_RCC_OscConfig+0x4d8>)
 800b43a:	4313      	orrs	r3, r2
 800b43c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b43e:	4b33      	ldr	r3, [pc, #204]	; (800b50c <HAL_RCC_OscConfig+0x4dc>)
 800b440:	2201      	movs	r2, #1
 800b442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b444:	f7fd f958 	bl	80086f8 <HAL_GetTick>
 800b448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b44a:	e008      	b.n	800b45e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b44c:	f7fd f954 	bl	80086f8 <HAL_GetTick>
 800b450:	4602      	mov	r2, r0
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	1ad3      	subs	r3, r2, r3
 800b456:	2b02      	cmp	r3, #2
 800b458:	d901      	bls.n	800b45e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b45a:	2303      	movs	r3, #3
 800b45c:	e04d      	b.n	800b4fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b45e:	4b2a      	ldr	r3, [pc, #168]	; (800b508 <HAL_RCC_OscConfig+0x4d8>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b466:	2b00      	cmp	r3, #0
 800b468:	d0f0      	beq.n	800b44c <HAL_RCC_OscConfig+0x41c>
 800b46a:	e045      	b.n	800b4f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b46c:	4b27      	ldr	r3, [pc, #156]	; (800b50c <HAL_RCC_OscConfig+0x4dc>)
 800b46e:	2200      	movs	r2, #0
 800b470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b472:	f7fd f941 	bl	80086f8 <HAL_GetTick>
 800b476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b478:	e008      	b.n	800b48c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b47a:	f7fd f93d 	bl	80086f8 <HAL_GetTick>
 800b47e:	4602      	mov	r2, r0
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	1ad3      	subs	r3, r2, r3
 800b484:	2b02      	cmp	r3, #2
 800b486:	d901      	bls.n	800b48c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b488:	2303      	movs	r3, #3
 800b48a:	e036      	b.n	800b4fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b48c:	4b1e      	ldr	r3, [pc, #120]	; (800b508 <HAL_RCC_OscConfig+0x4d8>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b494:	2b00      	cmp	r3, #0
 800b496:	d1f0      	bne.n	800b47a <HAL_RCC_OscConfig+0x44a>
 800b498:	e02e      	b.n	800b4f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	699b      	ldr	r3, [r3, #24]
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d101      	bne.n	800b4a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e029      	b.n	800b4fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b4a6:	4b18      	ldr	r3, [pc, #96]	; (800b508 <HAL_RCC_OscConfig+0x4d8>)
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	69db      	ldr	r3, [r3, #28]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d11c      	bne.n	800b4f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d115      	bne.n	800b4f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b4ce:	4013      	ands	r3, r2
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d10d      	bne.n	800b4f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d106      	bne.n	800b4f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d001      	beq.n	800b4f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	e000      	b.n	800b4fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800b4f8:	2300      	movs	r3, #0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3718      	adds	r7, #24
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	40007000 	.word	0x40007000
 800b508:	40023800 	.word	0x40023800
 800b50c:	42470060 	.word	0x42470060

0800b510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d101      	bne.n	800b524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b520:	2301      	movs	r3, #1
 800b522:	e0cc      	b.n	800b6be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b524:	4b68      	ldr	r3, [pc, #416]	; (800b6c8 <HAL_RCC_ClockConfig+0x1b8>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f003 030f 	and.w	r3, r3, #15
 800b52c:	683a      	ldr	r2, [r7, #0]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d90c      	bls.n	800b54c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b532:	4b65      	ldr	r3, [pc, #404]	; (800b6c8 <HAL_RCC_ClockConfig+0x1b8>)
 800b534:	683a      	ldr	r2, [r7, #0]
 800b536:	b2d2      	uxtb	r2, r2
 800b538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b53a:	4b63      	ldr	r3, [pc, #396]	; (800b6c8 <HAL_RCC_ClockConfig+0x1b8>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f003 030f 	and.w	r3, r3, #15
 800b542:	683a      	ldr	r2, [r7, #0]
 800b544:	429a      	cmp	r2, r3
 800b546:	d001      	beq.n	800b54c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b548:	2301      	movs	r3, #1
 800b54a:	e0b8      	b.n	800b6be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f003 0302 	and.w	r3, r3, #2
 800b554:	2b00      	cmp	r3, #0
 800b556:	d020      	beq.n	800b59a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f003 0304 	and.w	r3, r3, #4
 800b560:	2b00      	cmp	r3, #0
 800b562:	d005      	beq.n	800b570 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b564:	4b59      	ldr	r3, [pc, #356]	; (800b6cc <HAL_RCC_ClockConfig+0x1bc>)
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	4a58      	ldr	r2, [pc, #352]	; (800b6cc <HAL_RCC_ClockConfig+0x1bc>)
 800b56a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b56e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f003 0308 	and.w	r3, r3, #8
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d005      	beq.n	800b588 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b57c:	4b53      	ldr	r3, [pc, #332]	; (800b6cc <HAL_RCC_ClockConfig+0x1bc>)
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	4a52      	ldr	r2, [pc, #328]	; (800b6cc <HAL_RCC_ClockConfig+0x1bc>)
 800b582:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b586:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b588:	4b50      	ldr	r3, [pc, #320]	; (800b6cc <HAL_RCC_ClockConfig+0x1bc>)
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	689b      	ldr	r3, [r3, #8]
 800b594:	494d      	ldr	r1, [pc, #308]	; (800b6cc <HAL_RCC_ClockConfig+0x1bc>)
 800b596:	4313      	orrs	r3, r2
 800b598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f003 0301 	and.w	r3, r3, #1
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d044      	beq.n	800b630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	d107      	bne.n	800b5be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b5ae:	4b47      	ldr	r3, [pc, #284]	; (800b6cc <HAL_RCC_ClockConfig+0x1bc>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d119      	bne.n	800b5ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	e07f      	b.n	800b6be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	2b02      	cmp	r3, #2
 800b5c4:	d003      	beq.n	800b5ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b5ca:	2b03      	cmp	r3, #3
 800b5cc:	d107      	bne.n	800b5de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b5ce:	4b3f      	ldr	r3, [pc, #252]	; (800b6cc <HAL_RCC_ClockConfig+0x1bc>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d109      	bne.n	800b5ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e06f      	b.n	800b6be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b5de:	4b3b      	ldr	r3, [pc, #236]	; (800b6cc <HAL_RCC_ClockConfig+0x1bc>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f003 0302 	and.w	r3, r3, #2
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d101      	bne.n	800b5ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e067      	b.n	800b6be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b5ee:	4b37      	ldr	r3, [pc, #220]	; (800b6cc <HAL_RCC_ClockConfig+0x1bc>)
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	f023 0203 	bic.w	r2, r3, #3
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	4934      	ldr	r1, [pc, #208]	; (800b6cc <HAL_RCC_ClockConfig+0x1bc>)
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b600:	f7fd f87a 	bl	80086f8 <HAL_GetTick>
 800b604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b606:	e00a      	b.n	800b61e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b608:	f7fd f876 	bl	80086f8 <HAL_GetTick>
 800b60c:	4602      	mov	r2, r0
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	1ad3      	subs	r3, r2, r3
 800b612:	f241 3288 	movw	r2, #5000	; 0x1388
 800b616:	4293      	cmp	r3, r2
 800b618:	d901      	bls.n	800b61e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b61a:	2303      	movs	r3, #3
 800b61c:	e04f      	b.n	800b6be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b61e:	4b2b      	ldr	r3, [pc, #172]	; (800b6cc <HAL_RCC_ClockConfig+0x1bc>)
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	f003 020c 	and.w	r2, r3, #12
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	009b      	lsls	r3, r3, #2
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d1eb      	bne.n	800b608 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b630:	4b25      	ldr	r3, [pc, #148]	; (800b6c8 <HAL_RCC_ClockConfig+0x1b8>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f003 030f 	and.w	r3, r3, #15
 800b638:	683a      	ldr	r2, [r7, #0]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d20c      	bcs.n	800b658 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b63e:	4b22      	ldr	r3, [pc, #136]	; (800b6c8 <HAL_RCC_ClockConfig+0x1b8>)
 800b640:	683a      	ldr	r2, [r7, #0]
 800b642:	b2d2      	uxtb	r2, r2
 800b644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b646:	4b20      	ldr	r3, [pc, #128]	; (800b6c8 <HAL_RCC_ClockConfig+0x1b8>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f003 030f 	and.w	r3, r3, #15
 800b64e:	683a      	ldr	r2, [r7, #0]
 800b650:	429a      	cmp	r2, r3
 800b652:	d001      	beq.n	800b658 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b654:	2301      	movs	r3, #1
 800b656:	e032      	b.n	800b6be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f003 0304 	and.w	r3, r3, #4
 800b660:	2b00      	cmp	r3, #0
 800b662:	d008      	beq.n	800b676 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b664:	4b19      	ldr	r3, [pc, #100]	; (800b6cc <HAL_RCC_ClockConfig+0x1bc>)
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	68db      	ldr	r3, [r3, #12]
 800b670:	4916      	ldr	r1, [pc, #88]	; (800b6cc <HAL_RCC_ClockConfig+0x1bc>)
 800b672:	4313      	orrs	r3, r2
 800b674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f003 0308 	and.w	r3, r3, #8
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d009      	beq.n	800b696 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b682:	4b12      	ldr	r3, [pc, #72]	; (800b6cc <HAL_RCC_ClockConfig+0x1bc>)
 800b684:	689b      	ldr	r3, [r3, #8]
 800b686:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	691b      	ldr	r3, [r3, #16]
 800b68e:	00db      	lsls	r3, r3, #3
 800b690:	490e      	ldr	r1, [pc, #56]	; (800b6cc <HAL_RCC_ClockConfig+0x1bc>)
 800b692:	4313      	orrs	r3, r2
 800b694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b696:	f000 f821 	bl	800b6dc <HAL_RCC_GetSysClockFreq>
 800b69a:	4601      	mov	r1, r0
 800b69c:	4b0b      	ldr	r3, [pc, #44]	; (800b6cc <HAL_RCC_ClockConfig+0x1bc>)
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	091b      	lsrs	r3, r3, #4
 800b6a2:	f003 030f 	and.w	r3, r3, #15
 800b6a6:	4a0a      	ldr	r2, [pc, #40]	; (800b6d0 <HAL_RCC_ClockConfig+0x1c0>)
 800b6a8:	5cd3      	ldrb	r3, [r2, r3]
 800b6aa:	fa21 f303 	lsr.w	r3, r1, r3
 800b6ae:	4a09      	ldr	r2, [pc, #36]	; (800b6d4 <HAL_RCC_ClockConfig+0x1c4>)
 800b6b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b6b2:	4b09      	ldr	r3, [pc, #36]	; (800b6d8 <HAL_RCC_ClockConfig+0x1c8>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7fc fe58 	bl	800836c <HAL_InitTick>

  return HAL_OK;
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	40023c00 	.word	0x40023c00
 800b6cc:	40023800 	.word	0x40023800
 800b6d0:	0802bc44 	.word	0x0802bc44
 800b6d4:	20000000 	.word	0x20000000
 800b6d8:	20000004 	.word	0x20000004

0800b6dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b6dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6de:	b085      	sub	sp, #20
 800b6e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	607b      	str	r3, [r7, #4]
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	60fb      	str	r3, [r7, #12]
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b6f2:	4b63      	ldr	r3, [pc, #396]	; (800b880 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b6f4:	689b      	ldr	r3, [r3, #8]
 800b6f6:	f003 030c 	and.w	r3, r3, #12
 800b6fa:	2b04      	cmp	r3, #4
 800b6fc:	d007      	beq.n	800b70e <HAL_RCC_GetSysClockFreq+0x32>
 800b6fe:	2b08      	cmp	r3, #8
 800b700:	d008      	beq.n	800b714 <HAL_RCC_GetSysClockFreq+0x38>
 800b702:	2b00      	cmp	r3, #0
 800b704:	f040 80b4 	bne.w	800b870 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b708:	4b5e      	ldr	r3, [pc, #376]	; (800b884 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b70a:	60bb      	str	r3, [r7, #8]
       break;
 800b70c:	e0b3      	b.n	800b876 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b70e:	4b5e      	ldr	r3, [pc, #376]	; (800b888 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800b710:	60bb      	str	r3, [r7, #8]
      break;
 800b712:	e0b0      	b.n	800b876 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b714:	4b5a      	ldr	r3, [pc, #360]	; (800b880 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b71c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b71e:	4b58      	ldr	r3, [pc, #352]	; (800b880 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b726:	2b00      	cmp	r3, #0
 800b728:	d04a      	beq.n	800b7c0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b72a:	4b55      	ldr	r3, [pc, #340]	; (800b880 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	099b      	lsrs	r3, r3, #6
 800b730:	f04f 0400 	mov.w	r4, #0
 800b734:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b738:	f04f 0200 	mov.w	r2, #0
 800b73c:	ea03 0501 	and.w	r5, r3, r1
 800b740:	ea04 0602 	and.w	r6, r4, r2
 800b744:	4629      	mov	r1, r5
 800b746:	4632      	mov	r2, r6
 800b748:	f04f 0300 	mov.w	r3, #0
 800b74c:	f04f 0400 	mov.w	r4, #0
 800b750:	0154      	lsls	r4, r2, #5
 800b752:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b756:	014b      	lsls	r3, r1, #5
 800b758:	4619      	mov	r1, r3
 800b75a:	4622      	mov	r2, r4
 800b75c:	1b49      	subs	r1, r1, r5
 800b75e:	eb62 0206 	sbc.w	r2, r2, r6
 800b762:	f04f 0300 	mov.w	r3, #0
 800b766:	f04f 0400 	mov.w	r4, #0
 800b76a:	0194      	lsls	r4, r2, #6
 800b76c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b770:	018b      	lsls	r3, r1, #6
 800b772:	1a5b      	subs	r3, r3, r1
 800b774:	eb64 0402 	sbc.w	r4, r4, r2
 800b778:	f04f 0100 	mov.w	r1, #0
 800b77c:	f04f 0200 	mov.w	r2, #0
 800b780:	00e2      	lsls	r2, r4, #3
 800b782:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b786:	00d9      	lsls	r1, r3, #3
 800b788:	460b      	mov	r3, r1
 800b78a:	4614      	mov	r4, r2
 800b78c:	195b      	adds	r3, r3, r5
 800b78e:	eb44 0406 	adc.w	r4, r4, r6
 800b792:	f04f 0100 	mov.w	r1, #0
 800b796:	f04f 0200 	mov.w	r2, #0
 800b79a:	0262      	lsls	r2, r4, #9
 800b79c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b7a0:	0259      	lsls	r1, r3, #9
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	4614      	mov	r4, r2
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	4621      	mov	r1, r4
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f04f 0400 	mov.w	r4, #0
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	4623      	mov	r3, r4
 800b7b4:	f7f5 fa32 	bl	8000c1c <__aeabi_uldivmod>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	460c      	mov	r4, r1
 800b7bc:	60fb      	str	r3, [r7, #12]
 800b7be:	e049      	b.n	800b854 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b7c0:	4b2f      	ldr	r3, [pc, #188]	; (800b880 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	099b      	lsrs	r3, r3, #6
 800b7c6:	f04f 0400 	mov.w	r4, #0
 800b7ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b7ce:	f04f 0200 	mov.w	r2, #0
 800b7d2:	ea03 0501 	and.w	r5, r3, r1
 800b7d6:	ea04 0602 	and.w	r6, r4, r2
 800b7da:	4629      	mov	r1, r5
 800b7dc:	4632      	mov	r2, r6
 800b7de:	f04f 0300 	mov.w	r3, #0
 800b7e2:	f04f 0400 	mov.w	r4, #0
 800b7e6:	0154      	lsls	r4, r2, #5
 800b7e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b7ec:	014b      	lsls	r3, r1, #5
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	4622      	mov	r2, r4
 800b7f2:	1b49      	subs	r1, r1, r5
 800b7f4:	eb62 0206 	sbc.w	r2, r2, r6
 800b7f8:	f04f 0300 	mov.w	r3, #0
 800b7fc:	f04f 0400 	mov.w	r4, #0
 800b800:	0194      	lsls	r4, r2, #6
 800b802:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b806:	018b      	lsls	r3, r1, #6
 800b808:	1a5b      	subs	r3, r3, r1
 800b80a:	eb64 0402 	sbc.w	r4, r4, r2
 800b80e:	f04f 0100 	mov.w	r1, #0
 800b812:	f04f 0200 	mov.w	r2, #0
 800b816:	00e2      	lsls	r2, r4, #3
 800b818:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b81c:	00d9      	lsls	r1, r3, #3
 800b81e:	460b      	mov	r3, r1
 800b820:	4614      	mov	r4, r2
 800b822:	195b      	adds	r3, r3, r5
 800b824:	eb44 0406 	adc.w	r4, r4, r6
 800b828:	f04f 0100 	mov.w	r1, #0
 800b82c:	f04f 0200 	mov.w	r2, #0
 800b830:	02a2      	lsls	r2, r4, #10
 800b832:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b836:	0299      	lsls	r1, r3, #10
 800b838:	460b      	mov	r3, r1
 800b83a:	4614      	mov	r4, r2
 800b83c:	4618      	mov	r0, r3
 800b83e:	4621      	mov	r1, r4
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f04f 0400 	mov.w	r4, #0
 800b846:	461a      	mov	r2, r3
 800b848:	4623      	mov	r3, r4
 800b84a:	f7f5 f9e7 	bl	8000c1c <__aeabi_uldivmod>
 800b84e:	4603      	mov	r3, r0
 800b850:	460c      	mov	r4, r1
 800b852:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b854:	4b0a      	ldr	r3, [pc, #40]	; (800b880 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	0c1b      	lsrs	r3, r3, #16
 800b85a:	f003 0303 	and.w	r3, r3, #3
 800b85e:	3301      	adds	r3, #1
 800b860:	005b      	lsls	r3, r3, #1
 800b862:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	fbb2 f3f3 	udiv	r3, r2, r3
 800b86c:	60bb      	str	r3, [r7, #8]
      break;
 800b86e:	e002      	b.n	800b876 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b870:	4b04      	ldr	r3, [pc, #16]	; (800b884 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b872:	60bb      	str	r3, [r7, #8]
      break;
 800b874:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b876:	68bb      	ldr	r3, [r7, #8]
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3714      	adds	r7, #20
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b880:	40023800 	.word	0x40023800
 800b884:	00f42400 	.word	0x00f42400
 800b888:	007a1200 	.word	0x007a1200

0800b88c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b88c:	b480      	push	{r7}
 800b88e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b890:	4b03      	ldr	r3, [pc, #12]	; (800b8a0 <HAL_RCC_GetHCLKFreq+0x14>)
 800b892:	681b      	ldr	r3, [r3, #0]
}
 800b894:	4618      	mov	r0, r3
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	20000000 	.word	0x20000000

0800b8a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b8a8:	f7ff fff0 	bl	800b88c <HAL_RCC_GetHCLKFreq>
 800b8ac:	4601      	mov	r1, r0
 800b8ae:	4b05      	ldr	r3, [pc, #20]	; (800b8c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	0a9b      	lsrs	r3, r3, #10
 800b8b4:	f003 0307 	and.w	r3, r3, #7
 800b8b8:	4a03      	ldr	r2, [pc, #12]	; (800b8c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b8ba:	5cd3      	ldrb	r3, [r2, r3]
 800b8bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	40023800 	.word	0x40023800
 800b8c8:	0802bc54 	.word	0x0802bc54

0800b8cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	220f      	movs	r2, #15
 800b8da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b8dc:	4b12      	ldr	r3, [pc, #72]	; (800b928 <HAL_RCC_GetClockConfig+0x5c>)
 800b8de:	689b      	ldr	r3, [r3, #8]
 800b8e0:	f003 0203 	and.w	r2, r3, #3
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b8e8:	4b0f      	ldr	r3, [pc, #60]	; (800b928 <HAL_RCC_GetClockConfig+0x5c>)
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b8f4:	4b0c      	ldr	r3, [pc, #48]	; (800b928 <HAL_RCC_GetClockConfig+0x5c>)
 800b8f6:	689b      	ldr	r3, [r3, #8]
 800b8f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b900:	4b09      	ldr	r3, [pc, #36]	; (800b928 <HAL_RCC_GetClockConfig+0x5c>)
 800b902:	689b      	ldr	r3, [r3, #8]
 800b904:	08db      	lsrs	r3, r3, #3
 800b906:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b90e:	4b07      	ldr	r3, [pc, #28]	; (800b92c <HAL_RCC_GetClockConfig+0x60>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f003 020f 	and.w	r2, r3, #15
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	601a      	str	r2, [r3, #0]
}
 800b91a:	bf00      	nop
 800b91c:	370c      	adds	r7, #12
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr
 800b926:	bf00      	nop
 800b928:	40023800 	.word	0x40023800
 800b92c:	40023c00 	.word	0x40023c00

0800b930 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b086      	sub	sp, #24
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b938:	2300      	movs	r3, #0
 800b93a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800b93c:	2300      	movs	r3, #0
 800b93e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f003 0301 	and.w	r3, r3, #1
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d105      	bne.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b954:	2b00      	cmp	r3, #0
 800b956:	d035      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b958:	4b62      	ldr	r3, [pc, #392]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b95a:	2200      	movs	r2, #0
 800b95c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b95e:	f7fc fecb 	bl	80086f8 <HAL_GetTick>
 800b962:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b964:	e008      	b.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b966:	f7fc fec7 	bl	80086f8 <HAL_GetTick>
 800b96a:	4602      	mov	r2, r0
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	1ad3      	subs	r3, r2, r3
 800b970:	2b02      	cmp	r3, #2
 800b972:	d901      	bls.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b974:	2303      	movs	r3, #3
 800b976:	e0b0      	b.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b978:	4b5b      	ldr	r3, [pc, #364]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b980:	2b00      	cmp	r3, #0
 800b982:	d1f0      	bne.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	019a      	lsls	r2, r3, #6
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	689b      	ldr	r3, [r3, #8]
 800b98e:	071b      	lsls	r3, r3, #28
 800b990:	4955      	ldr	r1, [pc, #340]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b992:	4313      	orrs	r3, r2
 800b994:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b998:	4b52      	ldr	r3, [pc, #328]	; (800bae4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b99a:	2201      	movs	r2, #1
 800b99c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b99e:	f7fc feab 	bl	80086f8 <HAL_GetTick>
 800b9a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b9a4:	e008      	b.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b9a6:	f7fc fea7 	bl	80086f8 <HAL_GetTick>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	1ad3      	subs	r3, r2, r3
 800b9b0:	2b02      	cmp	r3, #2
 800b9b2:	d901      	bls.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b9b4:	2303      	movs	r3, #3
 800b9b6:	e090      	b.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b9b8:	4b4b      	ldr	r3, [pc, #300]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d0f0      	beq.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f003 0302 	and.w	r3, r3, #2
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f000 8083 	beq.w	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	60fb      	str	r3, [r7, #12]
 800b9d6:	4b44      	ldr	r3, [pc, #272]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9da:	4a43      	ldr	r2, [pc, #268]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b9dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9e0:	6413      	str	r3, [r2, #64]	; 0x40
 800b9e2:	4b41      	ldr	r3, [pc, #260]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9ea:	60fb      	str	r3, [r7, #12]
 800b9ec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b9ee:	4b3f      	ldr	r3, [pc, #252]	; (800baec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4a3e      	ldr	r2, [pc, #248]	; (800baec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b9f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b9fa:	f7fc fe7d 	bl	80086f8 <HAL_GetTick>
 800b9fe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ba00:	e008      	b.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ba02:	f7fc fe79 	bl	80086f8 <HAL_GetTick>
 800ba06:	4602      	mov	r2, r0
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	1ad3      	subs	r3, r2, r3
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d901      	bls.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800ba10:	2303      	movs	r3, #3
 800ba12:	e062      	b.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ba14:	4b35      	ldr	r3, [pc, #212]	; (800baec <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d0f0      	beq.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ba20:	4b31      	ldr	r3, [pc, #196]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ba22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba28:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d02f      	beq.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba38:	693a      	ldr	r2, [r7, #16]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	d028      	beq.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ba3e:	4b2a      	ldr	r3, [pc, #168]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ba40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba46:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ba48:	4b29      	ldr	r3, [pc, #164]	; (800baf0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ba4e:	4b28      	ldr	r3, [pc, #160]	; (800baf0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800ba50:	2200      	movs	r2, #0
 800ba52:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800ba54:	4a24      	ldr	r2, [pc, #144]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ba56:	693b      	ldr	r3, [r7, #16]
 800ba58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ba5a:	4b23      	ldr	r3, [pc, #140]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ba5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba5e:	f003 0301 	and.w	r3, r3, #1
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d114      	bne.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800ba66:	f7fc fe47 	bl	80086f8 <HAL_GetTick>
 800ba6a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba6c:	e00a      	b.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ba6e:	f7fc fe43 	bl	80086f8 <HAL_GetTick>
 800ba72:	4602      	mov	r2, r0
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	1ad3      	subs	r3, r2, r3
 800ba78:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d901      	bls.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800ba80:	2303      	movs	r3, #3
 800ba82:	e02a      	b.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba84:	4b18      	ldr	r3, [pc, #96]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ba86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba88:	f003 0302 	and.w	r3, r3, #2
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d0ee      	beq.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	68db      	ldr	r3, [r3, #12]
 800ba94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba9c:	d10d      	bne.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800ba9e:	4b12      	ldr	r3, [pc, #72]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800baae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bab2:	490d      	ldr	r1, [pc, #52]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bab4:	4313      	orrs	r3, r2
 800bab6:	608b      	str	r3, [r1, #8]
 800bab8:	e005      	b.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800baba:	4b0b      	ldr	r3, [pc, #44]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800babc:	689b      	ldr	r3, [r3, #8]
 800babe:	4a0a      	ldr	r2, [pc, #40]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bac0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bac4:	6093      	str	r3, [r2, #8]
 800bac6:	4b08      	ldr	r3, [pc, #32]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bac8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bad2:	4905      	ldr	r1, [pc, #20]	; (800bae8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800bad4:	4313      	orrs	r3, r2
 800bad6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800bad8:	2300      	movs	r3, #0
}
 800bada:	4618      	mov	r0, r3
 800badc:	3718      	adds	r7, #24
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	42470068 	.word	0x42470068
 800bae8:	40023800 	.word	0x40023800
 800baec:	40007000 	.word	0x40007000
 800baf0:	42470e40 	.word	0x42470e40

0800baf4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d101      	bne.n	800bb06 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800bb02:	2301      	movs	r3, #1
 800bb04:	e083      	b.n	800bc0e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	7f5b      	ldrb	r3, [r3, #29]
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d105      	bne.n	800bb1c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2200      	movs	r2, #0
 800bb14:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f7fc fa92 	bl	8008040 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2202      	movs	r2, #2
 800bb20:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	22ca      	movs	r2, #202	; 0xca
 800bb28:	625a      	str	r2, [r3, #36]	; 0x24
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2253      	movs	r2, #83	; 0x53
 800bb30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 f897 	bl	800bc66 <RTC_EnterInitMode>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d008      	beq.n	800bb50 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	22ff      	movs	r2, #255	; 0xff
 800bb44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2204      	movs	r2, #4
 800bb4a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e05e      	b.n	800bc0e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	689b      	ldr	r3, [r3, #8]
 800bb56:	687a      	ldr	r2, [r7, #4]
 800bb58:	6812      	ldr	r2, [r2, #0]
 800bb5a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb62:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	6899      	ldr	r1, [r3, #8]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	685a      	ldr	r2, [r3, #4]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	431a      	orrs	r2, r3
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	695b      	ldr	r3, [r3, #20]
 800bb78:	431a      	orrs	r2, r3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	430a      	orrs	r2, r1
 800bb80:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	68d2      	ldr	r2, [r2, #12]
 800bb8a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	6919      	ldr	r1, [r3, #16]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	689b      	ldr	r3, [r3, #8]
 800bb96:	041a      	lsls	r2, r3, #16
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	430a      	orrs	r2, r1
 800bb9e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	68da      	ldr	r2, [r3, #12]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bbae:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	689b      	ldr	r3, [r3, #8]
 800bbb6:	f003 0320 	and.w	r3, r3, #32
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d10e      	bne.n	800bbdc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 f829 	bl	800bc16 <HAL_RTC_WaitForSynchro>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d008      	beq.n	800bbdc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	22ff      	movs	r2, #255	; 0xff
 800bbd0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2204      	movs	r2, #4
 800bbd6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	e018      	b.n	800bc0e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bbea:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	699a      	ldr	r2, [r3, #24]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	430a      	orrs	r2, r1
 800bbfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	22ff      	movs	r2, #255	; 0xff
 800bc04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2201      	movs	r2, #1
 800bc0a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800bc0c:	2300      	movs	r3, #0
  }
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3708      	adds	r7, #8
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}

0800bc16 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800bc16:	b580      	push	{r7, lr}
 800bc18:	b084      	sub	sp, #16
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	68da      	ldr	r2, [r3, #12]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bc30:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bc32:	f7fc fd61 	bl	80086f8 <HAL_GetTick>
 800bc36:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800bc38:	e009      	b.n	800bc4e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800bc3a:	f7fc fd5d 	bl	80086f8 <HAL_GetTick>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	1ad3      	subs	r3, r2, r3
 800bc44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc48:	d901      	bls.n	800bc4e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800bc4a:	2303      	movs	r3, #3
 800bc4c:	e007      	b.n	800bc5e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	f003 0320 	and.w	r3, r3, #32
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d0ee      	beq.n	800bc3a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800bc5c:	2300      	movs	r3, #0
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3710      	adds	r7, #16
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}

0800bc66 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800bc66:	b580      	push	{r7, lr}
 800bc68:	b084      	sub	sp, #16
 800bc6a:	af00      	add	r7, sp, #0
 800bc6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d119      	bne.n	800bcb4 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc88:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bc8a:	f7fc fd35 	bl	80086f8 <HAL_GetTick>
 800bc8e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800bc90:	e009      	b.n	800bca6 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800bc92:	f7fc fd31 	bl	80086f8 <HAL_GetTick>
 800bc96:	4602      	mov	r2, r0
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	1ad3      	subs	r3, r2, r3
 800bc9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bca0:	d901      	bls.n	800bca6 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800bca2:	2303      	movs	r3, #3
 800bca4:	e007      	b.n	800bcb6 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	68db      	ldr	r3, [r3, #12]
 800bcac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d0ee      	beq.n	800bc92 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800bcb4:	2300      	movs	r3, #0
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3710      	adds	r7, #16
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}

0800bcbe <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b082      	sub	sp, #8
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d101      	bne.n	800bcd0 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bccc:	2301      	movs	r3, #1
 800bcce:	e022      	b.n	800bd16 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d105      	bne.n	800bce8 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2200      	movs	r2, #0
 800bce0:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f7fc f9c2 	bl	800806c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2203      	movs	r2, #3
 800bcec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 f815 	bl	800bd20 <HAL_SD_InitCard>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d001      	beq.n	800bd00 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	e00a      	b.n	800bd16 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2201      	movs	r2, #1
 800bd10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3708      	adds	r7, #8
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
	...

0800bd20 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bd20:	b5b0      	push	{r4, r5, r7, lr}
 800bd22:	b08e      	sub	sp, #56	; 0x38
 800bd24:	af04      	add	r7, sp, #16
 800bd26:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800bd30:	2300      	movs	r3, #0
 800bd32:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800bd34:	2300      	movs	r3, #0
 800bd36:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800bd3c:	2376      	movs	r3, #118	; 0x76
 800bd3e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681d      	ldr	r5, [r3, #0]
 800bd44:	466c      	mov	r4, sp
 800bd46:	f107 0314 	add.w	r3, r7, #20
 800bd4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bd4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bd52:	f107 0308 	add.w	r3, r7, #8
 800bd56:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd58:	4628      	mov	r0, r5
 800bd5a:	f001 ffef 	bl	800dd3c <SDIO_Init>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800bd64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d001      	beq.n	800bd70 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e031      	b.n	800bdd4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800bd70:	4b1a      	ldr	r3, [pc, #104]	; (800bddc <HAL_SD_InitCard+0xbc>)
 800bd72:	2200      	movs	r2, #0
 800bd74:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f002 f816 	bl	800ddac <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800bd80:	4b16      	ldr	r3, [pc, #88]	; (800bddc <HAL_SD_InitCard+0xbc>)
 800bd82:	2201      	movs	r2, #1
 800bd84:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 fde8 	bl	800c95c <SD_PowerON>
 800bd8c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd8e:	6a3b      	ldr	r3, [r7, #32]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d00b      	beq.n	800bdac <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2201      	movs	r2, #1
 800bd98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bda0:	6a3b      	ldr	r3, [r7, #32]
 800bda2:	431a      	orrs	r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e013      	b.n	800bdd4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 fd07 	bl	800c7c0 <SD_InitCard>
 800bdb2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bdb4:	6a3b      	ldr	r3, [r7, #32]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d00b      	beq.n	800bdd2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2201      	movs	r2, #1
 800bdbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdc6:	6a3b      	ldr	r3, [r7, #32]
 800bdc8:	431a      	orrs	r2, r3
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	e000      	b.n	800bdd4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800bdd2:	2300      	movs	r3, #0
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3728      	adds	r7, #40	; 0x28
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bdb0      	pop	{r4, r5, r7, pc}
 800bddc:	422580a0 	.word	0x422580a0

0800bde0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b08c      	sub	sp, #48	; 0x30
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	60b9      	str	r1, [r7, #8]
 800bdea:	607a      	str	r2, [r7, #4]
 800bdec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d107      	bne.n	800be08 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdfc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800be04:	2301      	movs	r3, #1
 800be06:	e0c9      	b.n	800bf9c <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	2b01      	cmp	r3, #1
 800be12:	f040 80c2 	bne.w	800bf9a <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2200      	movs	r2, #0
 800be1a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800be1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	441a      	add	r2, r3
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be26:	429a      	cmp	r2, r3
 800be28:	d907      	bls.n	800be3a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be2e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800be36:	2301      	movs	r3, #1
 800be38:	e0b0      	b.n	800bf9c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2203      	movs	r2, #3
 800be3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	2200      	movs	r2, #0
 800be48:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	6812      	ldr	r2, [r2, #0]
 800be54:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800be58:	f043 0302 	orr.w	r3, r3, #2
 800be5c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be62:	4a50      	ldr	r2, [pc, #320]	; (800bfa4 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800be64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be6a:	4a4f      	ldr	r2, [pc, #316]	; (800bfa8 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800be6c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be72:	2200      	movs	r2, #0
 800be74:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	3380      	adds	r3, #128	; 0x80
 800be80:	4619      	mov	r1, r3
 800be82:	68ba      	ldr	r2, [r7, #8]
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	025b      	lsls	r3, r3, #9
 800be88:	089b      	lsrs	r3, r3, #2
 800be8a:	f7fc fd45 	bl	8008918 <HAL_DMA_Start_IT>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d017      	beq.n	800bec4 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800bea2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4a40      	ldr	r2, [pc, #256]	; (800bfac <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800beaa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beb0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2201      	movs	r2, #1
 800bebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800bec0:	2301      	movs	r3, #1
 800bec2:	e06b      	b.n	800bf9c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800bec4:	4b3a      	ldr	r3, [pc, #232]	; (800bfb0 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800bec6:	2201      	movs	r2, #1
 800bec8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bece:	2b01      	cmp	r3, #1
 800bed0:	d002      	beq.n	800bed8 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800bed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed4:	025b      	lsls	r3, r3, #9
 800bed6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bee0:	4618      	mov	r0, r3
 800bee2:	f001 fff6 	bl	800ded2 <SDMMC_CmdBlockLength>
 800bee6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800bee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beea:	2b00      	cmp	r3, #0
 800beec:	d00f      	beq.n	800bf0e <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	4a2e      	ldr	r2, [pc, #184]	; (800bfac <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800bef4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800befa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befc:	431a      	orrs	r2, r3
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	2201      	movs	r2, #1
 800bf06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e046      	b.n	800bf9c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bf0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf12:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	025b      	lsls	r3, r3, #9
 800bf18:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800bf1a:	2390      	movs	r3, #144	; 0x90
 800bf1c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800bf1e:	2302      	movs	r3, #2
 800bf20:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800bf22:	2300      	movs	r3, #0
 800bf24:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800bf26:	2301      	movs	r3, #1
 800bf28:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	f107 0210 	add.w	r2, r7, #16
 800bf32:	4611      	mov	r1, r2
 800bf34:	4618      	mov	r0, r3
 800bf36:	f001 ffa0 	bl	800de7a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d90a      	bls.n	800bf56 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2282      	movs	r2, #130	; 0x82
 800bf44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f002 f804 	bl	800df5a <SDMMC_CmdReadMultiBlock>
 800bf52:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bf54:	e009      	b.n	800bf6a <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2281      	movs	r2, #129	; 0x81
 800bf5a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf62:	4618      	mov	r0, r3
 800bf64:	f001 ffd7 	bl	800df16 <SDMMC_CmdReadSingleBlock>
 800bf68:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800bf6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d012      	beq.n	800bf96 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	4a0d      	ldr	r2, [pc, #52]	; (800bfac <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800bf76:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf7e:	431a      	orrs	r2, r3
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2201      	movs	r2, #1
 800bf88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800bf92:	2301      	movs	r3, #1
 800bf94:	e002      	b.n	800bf9c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800bf96:	2300      	movs	r3, #0
 800bf98:	e000      	b.n	800bf9c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800bf9a:	2302      	movs	r3, #2
  }
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3730      	adds	r7, #48	; 0x30
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	0800c6ab 	.word	0x0800c6ab
 800bfa8:	0800c71d 	.word	0x0800c71d
 800bfac:	004005ff 	.word	0x004005ff
 800bfb0:	4225858c 	.word	0x4225858c

0800bfb4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b08c      	sub	sp, #48	; 0x30
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	60b9      	str	r1, [r7, #8]
 800bfbe:	607a      	str	r2, [r7, #4]
 800bfc0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d107      	bne.n	800bfdc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfd0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800bfd8:	2301      	movs	r3, #1
 800bfda:	e0ce      	b.n	800c17a <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	f040 80c7 	bne.w	800c178 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2200      	movs	r2, #0
 800bfee:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	441a      	add	r2, r3
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d907      	bls.n	800c00e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c002:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c00a:	2301      	movs	r3, #1
 800c00c:	e0b5      	b.n	800c17a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2203      	movs	r2, #3
 800c012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2200      	movs	r2, #0
 800c01c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c024:	68fa      	ldr	r2, [r7, #12]
 800c026:	6812      	ldr	r2, [r2, #0]
 800c028:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800c02c:	f043 0302 	orr.w	r3, r3, #2
 800c030:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c036:	4a53      	ldr	r2, [pc, #332]	; (800c184 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800c038:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c03e:	4a52      	ldr	r2, [pc, #328]	; (800c188 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800c040:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c046:	2200      	movs	r2, #0
 800c048:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d002      	beq.n	800c058 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800c052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c054:	025b      	lsls	r3, r3, #9
 800c056:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c060:	4618      	mov	r0, r3
 800c062:	f001 ff36 	bl	800ded2 <SDMMC_CmdBlockLength>
 800c066:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d00f      	beq.n	800c08e <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	4a46      	ldr	r2, [pc, #280]	; (800c18c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800c074:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07c:	431a      	orrs	r2, r3
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2201      	movs	r2, #1
 800c086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c08a:	2301      	movs	r3, #1
 800c08c:	e075      	b.n	800c17a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	2b01      	cmp	r3, #1
 800c092:	d90a      	bls.n	800c0aa <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	22a0      	movs	r2, #160	; 0xa0
 800c098:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f001 ff9e 	bl	800dfe2 <SDMMC_CmdWriteMultiBlock>
 800c0a6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c0a8:	e009      	b.n	800c0be <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2290      	movs	r2, #144	; 0x90
 800c0ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f001 ff71 	bl	800df9e <SDMMC_CmdWriteSingleBlock>
 800c0bc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d012      	beq.n	800c0ea <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4a30      	ldr	r2, [pc, #192]	; (800c18c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800c0ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d2:	431a      	orrs	r2, r3
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	e047      	b.n	800c17a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800c0ea:	4b29      	ldr	r3, [pc, #164]	; (800c190 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c0f4:	68b9      	ldr	r1, [r7, #8]
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	3380      	adds	r3, #128	; 0x80
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	025b      	lsls	r3, r3, #9
 800c102:	089b      	lsrs	r3, r3, #2
 800c104:	f7fc fc08 	bl	8008918 <HAL_DMA_Start_IT>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d01c      	beq.n	800c148 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c114:	68fa      	ldr	r2, [r7, #12]
 800c116:	6812      	ldr	r2, [r2, #0]
 800c118:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800c11c:	f023 0302 	bic.w	r3, r3, #2
 800c120:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4a19      	ldr	r2, [pc, #100]	; (800c18c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800c128:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c12e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2201      	movs	r2, #1
 800c13a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2200      	movs	r2, #0
 800c142:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c144:	2301      	movs	r3, #1
 800c146:	e018      	b.n	800c17a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c148:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c14c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	025b      	lsls	r3, r3, #9
 800c152:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c154:	2390      	movs	r3, #144	; 0x90
 800c156:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800c158:	2300      	movs	r3, #0
 800c15a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c15c:	2300      	movs	r3, #0
 800c15e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c160:	2301      	movs	r3, #1
 800c162:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f107 0210 	add.w	r2, r7, #16
 800c16c:	4611      	mov	r1, r2
 800c16e:	4618      	mov	r0, r3
 800c170:	f001 fe83 	bl	800de7a <SDIO_ConfigData>

      return HAL_OK;
 800c174:	2300      	movs	r3, #0
 800c176:	e000      	b.n	800c17a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 800c178:	2302      	movs	r3, #2
  }
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3730      	adds	r7, #48	; 0x30
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	0800c681 	.word	0x0800c681
 800c188:	0800c71d 	.word	0x0800c71d
 800c18c:	004005ff 	.word	0x004005ff
 800c190:	4225858c 	.word	0x4225858c

0800c194 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c19c:	bf00      	nop
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
 800c1b0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1b6:	0f9b      	lsrs	r3, r3, #30
 800c1b8:	b2da      	uxtb	r2, r3
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1c2:	0e9b      	lsrs	r3, r3, #26
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	f003 030f 	and.w	r3, r3, #15
 800c1ca:	b2da      	uxtb	r2, r3
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1d4:	0e1b      	lsrs	r3, r3, #24
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	f003 0303 	and.w	r3, r3, #3
 800c1dc:	b2da      	uxtb	r2, r3
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1e6:	0c1b      	lsrs	r3, r3, #16
 800c1e8:	b2da      	uxtb	r2, r3
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1f2:	0a1b      	lsrs	r3, r3, #8
 800c1f4:	b2da      	uxtb	r2, r3
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1fe:	b2da      	uxtb	r2, r3
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c208:	0d1b      	lsrs	r3, r3, #20
 800c20a:	b29a      	uxth	r2, r3
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c214:	0c1b      	lsrs	r3, r3, #16
 800c216:	b2db      	uxtb	r3, r3
 800c218:	f003 030f 	and.w	r3, r3, #15
 800c21c:	b2da      	uxtb	r2, r3
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c226:	0bdb      	lsrs	r3, r3, #15
 800c228:	b2db      	uxtb	r3, r3
 800c22a:	f003 0301 	and.w	r3, r3, #1
 800c22e:	b2da      	uxtb	r2, r3
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c238:	0b9b      	lsrs	r3, r3, #14
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	f003 0301 	and.w	r3, r3, #1
 800c240:	b2da      	uxtb	r2, r3
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c24a:	0b5b      	lsrs	r3, r3, #13
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	f003 0301 	and.w	r3, r3, #1
 800c252:	b2da      	uxtb	r2, r3
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c25c:	0b1b      	lsrs	r3, r3, #12
 800c25e:	b2db      	uxtb	r3, r3
 800c260:	f003 0301 	and.w	r3, r3, #1
 800c264:	b2da      	uxtb	r2, r3
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	2200      	movs	r2, #0
 800c26e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c274:	2b00      	cmp	r3, #0
 800c276:	d163      	bne.n	800c340 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c27c:	009a      	lsls	r2, r3, #2
 800c27e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c282:	4013      	ands	r3, r2
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800c288:	0f92      	lsrs	r2, r2, #30
 800c28a:	431a      	orrs	r2, r3
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c294:	0edb      	lsrs	r3, r3, #27
 800c296:	b2db      	uxtb	r3, r3
 800c298:	f003 0307 	and.w	r3, r3, #7
 800c29c:	b2da      	uxtb	r2, r3
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2a6:	0e1b      	lsrs	r3, r3, #24
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	f003 0307 	and.w	r3, r3, #7
 800c2ae:	b2da      	uxtb	r2, r3
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2b8:	0d5b      	lsrs	r3, r3, #21
 800c2ba:	b2db      	uxtb	r3, r3
 800c2bc:	f003 0307 	and.w	r3, r3, #7
 800c2c0:	b2da      	uxtb	r2, r3
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2ca:	0c9b      	lsrs	r3, r3, #18
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	f003 0307 	and.w	r3, r3, #7
 800c2d2:	b2da      	uxtb	r2, r3
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2dc:	0bdb      	lsrs	r3, r3, #15
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	f003 0307 	and.w	r3, r3, #7
 800c2e4:	b2da      	uxtb	r2, r3
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	691b      	ldr	r3, [r3, #16]
 800c2ee:	1c5a      	adds	r2, r3, #1
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	7e1b      	ldrb	r3, [r3, #24]
 800c2f8:	b2db      	uxtb	r3, r3
 800c2fa:	f003 0307 	and.w	r3, r3, #7
 800c2fe:	3302      	adds	r3, #2
 800c300:	2201      	movs	r2, #1
 800c302:	fa02 f303 	lsl.w	r3, r2, r3
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800c30a:	fb02 f203 	mul.w	r2, r2, r3
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	7a1b      	ldrb	r3, [r3, #8]
 800c316:	b2db      	uxtb	r3, r3
 800c318:	f003 030f 	and.w	r3, r3, #15
 800c31c:	2201      	movs	r2, #1
 800c31e:	409a      	lsls	r2, r3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800c32c:	0a52      	lsrs	r2, r2, #9
 800c32e:	fb02 f203 	mul.w	r2, r2, r3
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c33c:	661a      	str	r2, [r3, #96]	; 0x60
 800c33e:	e031      	b.n	800c3a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c344:	2b01      	cmp	r3, #1
 800c346:	d11d      	bne.n	800c384 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c34c:	041b      	lsls	r3, r3, #16
 800c34e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c356:	0c1b      	lsrs	r3, r3, #16
 800c358:	431a      	orrs	r2, r3
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	691b      	ldr	r3, [r3, #16]
 800c362:	3301      	adds	r3, #1
 800c364:	029a      	lsls	r2, r3, #10
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c378:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	661a      	str	r2, [r3, #96]	; 0x60
 800c382:	e00f      	b.n	800c3a4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4a58      	ldr	r2, [pc, #352]	; (800c4ec <HAL_SD_GetCardCSD+0x344>)
 800c38a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c390:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2201      	movs	r2, #1
 800c39c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	e09d      	b.n	800c4e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3a8:	0b9b      	lsrs	r3, r3, #14
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	f003 0301 	and.w	r3, r3, #1
 800c3b0:	b2da      	uxtb	r2, r3
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3ba:	09db      	lsrs	r3, r3, #7
 800c3bc:	b2db      	uxtb	r3, r3
 800c3be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3c2:	b2da      	uxtb	r2, r3
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3d2:	b2da      	uxtb	r2, r3
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3dc:	0fdb      	lsrs	r3, r3, #31
 800c3de:	b2da      	uxtb	r2, r3
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3e8:	0f5b      	lsrs	r3, r3, #29
 800c3ea:	b2db      	uxtb	r3, r3
 800c3ec:	f003 0303 	and.w	r3, r3, #3
 800c3f0:	b2da      	uxtb	r2, r3
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3fa:	0e9b      	lsrs	r3, r3, #26
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	f003 0307 	and.w	r3, r3, #7
 800c402:	b2da      	uxtb	r2, r3
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c40c:	0d9b      	lsrs	r3, r3, #22
 800c40e:	b2db      	uxtb	r3, r3
 800c410:	f003 030f 	and.w	r3, r3, #15
 800c414:	b2da      	uxtb	r2, r3
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c41e:	0d5b      	lsrs	r3, r3, #21
 800c420:	b2db      	uxtb	r3, r3
 800c422:	f003 0301 	and.w	r3, r3, #1
 800c426:	b2da      	uxtb	r2, r3
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	2200      	movs	r2, #0
 800c432:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c43a:	0c1b      	lsrs	r3, r3, #16
 800c43c:	b2db      	uxtb	r3, r3
 800c43e:	f003 0301 	and.w	r3, r3, #1
 800c442:	b2da      	uxtb	r2, r3
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c44e:	0bdb      	lsrs	r3, r3, #15
 800c450:	b2db      	uxtb	r3, r3
 800c452:	f003 0301 	and.w	r3, r3, #1
 800c456:	b2da      	uxtb	r2, r3
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c462:	0b9b      	lsrs	r3, r3, #14
 800c464:	b2db      	uxtb	r3, r3
 800c466:	f003 0301 	and.w	r3, r3, #1
 800c46a:	b2da      	uxtb	r2, r3
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c476:	0b5b      	lsrs	r3, r3, #13
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	f003 0301 	and.w	r3, r3, #1
 800c47e:	b2da      	uxtb	r2, r3
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c48a:	0b1b      	lsrs	r3, r3, #12
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	f003 0301 	and.w	r3, r3, #1
 800c492:	b2da      	uxtb	r2, r3
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c49e:	0a9b      	lsrs	r3, r3, #10
 800c4a0:	b2db      	uxtb	r3, r3
 800c4a2:	f003 0303 	and.w	r3, r3, #3
 800c4a6:	b2da      	uxtb	r2, r3
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4b2:	0a1b      	lsrs	r3, r3, #8
 800c4b4:	b2db      	uxtb	r3, r3
 800c4b6:	f003 0303 	and.w	r3, r3, #3
 800c4ba:	b2da      	uxtb	r2, r3
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4c6:	085b      	lsrs	r3, r3, #1
 800c4c8:	b2db      	uxtb	r3, r3
 800c4ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4ce:	b2da      	uxtb	r2, r3
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	2201      	movs	r2, #1
 800c4da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c4de:	2300      	movs	r3, #0
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	370c      	adds	r7, #12
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr
 800c4ec:	004005ff 	.word	0x004005ff

0800c4f0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c53a:	2300      	movs	r3, #0
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	370c      	adds	r7, #12
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr

0800c548 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c548:	b5b0      	push	{r4, r5, r7, lr}
 800c54a:	b08e      	sub	sp, #56	; 0x38
 800c54c:	af04      	add	r7, sp, #16
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2203      	movs	r2, #3
 800c556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c55e:	2b03      	cmp	r3, #3
 800c560:	d02e      	beq.n	800c5c0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c568:	d106      	bne.n	800c578 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c56e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	639a      	str	r2, [r3, #56]	; 0x38
 800c576:	e029      	b.n	800c5cc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c57e:	d10a      	bne.n	800c596 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 faa1 	bl	800cac8 <SD_WideBus_Enable>
 800c586:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58e:	431a      	orrs	r2, r3
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	639a      	str	r2, [r3, #56]	; 0x38
 800c594:	e01a      	b.n	800c5cc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d10a      	bne.n	800c5b2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 fade 	bl	800cb5e <SD_WideBus_Disable>
 800c5a2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5aa:	431a      	orrs	r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	639a      	str	r2, [r3, #56]	; 0x38
 800c5b0:	e00c      	b.n	800c5cc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	639a      	str	r2, [r3, #56]	; 0x38
 800c5be:	e005      	b.n	800c5cc <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d009      	beq.n	800c5e8 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4a18      	ldr	r2, [pc, #96]	; (800c63c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800c5da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	e024      	b.n	800c632 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	689b      	ldr	r3, [r3, #8]
 800c5f2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	68db      	ldr	r3, [r3, #12]
 800c5f8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	695b      	ldr	r3, [r3, #20]
 800c602:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	699b      	ldr	r3, [r3, #24]
 800c608:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681d      	ldr	r5, [r3, #0]
 800c60e:	466c      	mov	r4, sp
 800c610:	f107 0318 	add.w	r3, r7, #24
 800c614:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c618:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c61c:	f107 030c 	add.w	r3, r7, #12
 800c620:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c622:	4628      	mov	r0, r5
 800c624:	f001 fb8a 	bl	800dd3c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2201      	movs	r2, #1
 800c62c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c630:	2300      	movs	r3, #0
}
 800c632:	4618      	mov	r0, r3
 800c634:	3728      	adds	r7, #40	; 0x28
 800c636:	46bd      	mov	sp, r7
 800c638:	bdb0      	pop	{r4, r5, r7, pc}
 800c63a:	bf00      	nop
 800c63c:	004005ff 	.word	0x004005ff

0800c640 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b086      	sub	sp, #24
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c648:	2300      	movs	r3, #0
 800c64a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c64c:	f107 030c 	add.w	r3, r7, #12
 800c650:	4619      	mov	r1, r3
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 fa10 	bl	800ca78 <SD_SendStatus>
 800c658:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d005      	beq.n	800c66c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	431a      	orrs	r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	0a5b      	lsrs	r3, r3, #9
 800c670:	f003 030f 	and.w	r3, r3, #15
 800c674:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c676:	693b      	ldr	r3, [r7, #16]
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3718      	adds	r7, #24
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c680:	b480      	push	{r7}
 800c682:	b085      	sub	sp, #20
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c68c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c69c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800c69e:	bf00      	nop
 800c6a0:	3714      	adds	r7, #20
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr

0800c6aa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	b084      	sub	sp, #16
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6bc:	2b82      	cmp	r3, #130	; 0x82
 800c6be:	d111      	bne.n	800c6e4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f001 fcaf 	bl	800e028 <SDMMC_CmdStopTransfer>
 800c6ca:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d008      	beq.n	800c6e4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	431a      	orrs	r2, r3
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800c6de:	68f8      	ldr	r0, [r7, #12]
 800c6e0:	f7ff fd58 	bl	800c194 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f022 0208 	bic.w	r2, r2, #8
 800c6f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f240 523a 	movw	r2, #1338	; 0x53a
 800c6fc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2201      	movs	r2, #1
 800c702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2200      	movs	r2, #0
 800c70a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800c70c:	68f8      	ldr	r0, [r7, #12]
 800c70e:	f002 f8f3 	bl	800e8f8 <HAL_SD_RxCpltCallback>
#endif
}
 800c712:	bf00      	nop
 800c714:	3710      	adds	r7, #16
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
	...

0800c71c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b086      	sub	sp, #24
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c728:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f7fc f94c 	bl	80089c8 <HAL_DMA_GetError>
 800c730:	4603      	mov	r3, r0
 800c732:	2b02      	cmp	r3, #2
 800c734:	d03e      	beq.n	800c7b4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c73a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c73c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c744:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	2b01      	cmp	r3, #1
 800c74a:	d002      	beq.n	800c752 <SD_DMAError+0x36>
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d12d      	bne.n	800c7ae <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a19      	ldr	r2, [pc, #100]	; (800c7bc <SD_DMAError+0xa0>)
 800c758:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c768:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c76e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800c776:	6978      	ldr	r0, [r7, #20]
 800c778:	f7ff ff62 	bl	800c640 <HAL_SD_GetCardState>
 800c77c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	2b06      	cmp	r3, #6
 800c782:	d002      	beq.n	800c78a <SD_DMAError+0x6e>
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	2b05      	cmp	r3, #5
 800c788:	d10a      	bne.n	800c7a0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4618      	mov	r0, r3
 800c790:	f001 fc4a 	bl	800e028 <SDMMC_CmdStopTransfer>
 800c794:	4602      	mov	r2, r0
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c79a:	431a      	orrs	r2, r3
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800c7ae:	6978      	ldr	r0, [r7, #20]
 800c7b0:	f7ff fcf0 	bl	800c194 <HAL_SD_ErrorCallback>
#endif
  }
}
 800c7b4:	bf00      	nop
 800c7b6:	3718      	adds	r7, #24
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	004005ff 	.word	0x004005ff

0800c7c0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c7c0:	b5b0      	push	{r4, r5, r7, lr}
 800c7c2:	b094      	sub	sp, #80	; 0x50
 800c7c4:	af04      	add	r7, sp, #16
 800c7c6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f001 fafa 	bl	800ddca <SDIO_GetPowerState>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d102      	bne.n	800c7e2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c7dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c7e0:	e0b7      	b.n	800c952 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7e6:	2b03      	cmp	r3, #3
 800c7e8:	d02f      	beq.n	800c84a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f001 fd24 	bl	800e23c <SDMMC_CmdSendCID>
 800c7f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d001      	beq.n	800c800 <SD_InitCard+0x40>
    {
      return errorstate;
 800c7fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7fe:	e0a8      	b.n	800c952 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	2100      	movs	r1, #0
 800c806:	4618      	mov	r0, r3
 800c808:	f001 fb24 	bl	800de54 <SDIO_GetResponse>
 800c80c:	4602      	mov	r2, r0
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	2104      	movs	r1, #4
 800c818:	4618      	mov	r0, r3
 800c81a:	f001 fb1b 	bl	800de54 <SDIO_GetResponse>
 800c81e:	4602      	mov	r2, r0
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	2108      	movs	r1, #8
 800c82a:	4618      	mov	r0, r3
 800c82c:	f001 fb12 	bl	800de54 <SDIO_GetResponse>
 800c830:	4602      	mov	r2, r0
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	210c      	movs	r1, #12
 800c83c:	4618      	mov	r0, r3
 800c83e:	f001 fb09 	bl	800de54 <SDIO_GetResponse>
 800c842:	4602      	mov	r2, r0
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c84e:	2b03      	cmp	r3, #3
 800c850:	d00d      	beq.n	800c86e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f107 020e 	add.w	r2, r7, #14
 800c85a:	4611      	mov	r1, r2
 800c85c:	4618      	mov	r0, r3
 800c85e:	f001 fd2a 	bl	800e2b6 <SDMMC_CmdSetRelAdd>
 800c862:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c866:	2b00      	cmp	r3, #0
 800c868:	d001      	beq.n	800c86e <SD_InitCard+0xae>
    {
      return errorstate;
 800c86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c86c:	e071      	b.n	800c952 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c872:	2b03      	cmp	r3, #3
 800c874:	d036      	beq.n	800c8e4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c876:	89fb      	ldrh	r3, [r7, #14]
 800c878:	461a      	mov	r2, r3
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c886:	041b      	lsls	r3, r3, #16
 800c888:	4619      	mov	r1, r3
 800c88a:	4610      	mov	r0, r2
 800c88c:	f001 fcf4 	bl	800e278 <SDMMC_CmdSendCSD>
 800c890:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c894:	2b00      	cmp	r3, #0
 800c896:	d001      	beq.n	800c89c <SD_InitCard+0xdc>
    {
      return errorstate;
 800c898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c89a:	e05a      	b.n	800c952 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	2100      	movs	r1, #0
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f001 fad6 	bl	800de54 <SDIO_GetResponse>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	2104      	movs	r1, #4
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f001 facd 	bl	800de54 <SDIO_GetResponse>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	2108      	movs	r1, #8
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f001 fac4 	bl	800de54 <SDIO_GetResponse>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	210c      	movs	r1, #12
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f001 fabb 	bl	800de54 <SDIO_GetResponse>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	2104      	movs	r1, #4
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f001 fab2 	bl	800de54 <SDIO_GetResponse>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	0d1a      	lsrs	r2, r3, #20
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c8f8:	f107 0310 	add.w	r3, r7, #16
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f7ff fc52 	bl	800c1a8 <HAL_SD_GetCardCSD>
 800c904:	4603      	mov	r3, r0
 800c906:	2b00      	cmp	r3, #0
 800c908:	d002      	beq.n	800c910 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c90a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c90e:	e020      	b.n	800c952 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6819      	ldr	r1, [r3, #0]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c918:	041b      	lsls	r3, r3, #16
 800c91a:	f04f 0400 	mov.w	r4, #0
 800c91e:	461a      	mov	r2, r3
 800c920:	4623      	mov	r3, r4
 800c922:	4608      	mov	r0, r1
 800c924:	f001 fba2 	bl	800e06c <SDMMC_CmdSelDesel>
 800c928:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c92a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d001      	beq.n	800c934 <SD_InitCard+0x174>
  {
    return errorstate;
 800c930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c932:	e00e      	b.n	800c952 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681d      	ldr	r5, [r3, #0]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	466c      	mov	r4, sp
 800c93c:	f103 0210 	add.w	r2, r3, #16
 800c940:	ca07      	ldmia	r2, {r0, r1, r2}
 800c942:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c946:	3304      	adds	r3, #4
 800c948:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c94a:	4628      	mov	r0, r5
 800c94c:	f001 f9f6 	bl	800dd3c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c950:	2300      	movs	r3, #0
}
 800c952:	4618      	mov	r0, r3
 800c954:	3740      	adds	r7, #64	; 0x40
 800c956:	46bd      	mov	sp, r7
 800c958:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c95c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b086      	sub	sp, #24
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c964:	2300      	movs	r3, #0
 800c966:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c968:	2300      	movs	r3, #0
 800c96a:	617b      	str	r3, [r7, #20]
 800c96c:	2300      	movs	r3, #0
 800c96e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4618      	mov	r0, r3
 800c976:	f001 fb9c 	bl	800e0b2 <SDMMC_CmdGoIdleState>
 800c97a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d001      	beq.n	800c986 <SD_PowerON+0x2a>
  {
    return errorstate;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	e072      	b.n	800ca6c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4618      	mov	r0, r3
 800c98c:	f001 fbaf 	bl	800e0ee <SDMMC_CmdOperCond>
 800c990:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d00d      	beq.n	800c9b4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2200      	movs	r2, #0
 800c99c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f001 fb85 	bl	800e0b2 <SDMMC_CmdGoIdleState>
 800c9a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d004      	beq.n	800c9ba <SD_PowerON+0x5e>
    {
      return errorstate;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	e05b      	b.n	800ca6c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9be:	2b01      	cmp	r3, #1
 800c9c0:	d137      	bne.n	800ca32 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f001 fbaf 	bl	800e12c <SDMMC_CmdAppCommand>
 800c9ce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d02d      	beq.n	800ca32 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c9d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c9da:	e047      	b.n	800ca6c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f001 fba2 	bl	800e12c <SDMMC_CmdAppCommand>
 800c9e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d001      	beq.n	800c9f4 <SD_PowerON+0x98>
    {
      return errorstate;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	e03b      	b.n	800ca6c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	491e      	ldr	r1, [pc, #120]	; (800ca74 <SD_PowerON+0x118>)
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f001 fbb8 	bl	800e170 <SDMMC_CmdAppOperCommand>
 800ca00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d002      	beq.n	800ca0e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ca08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ca0c:	e02e      	b.n	800ca6c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2100      	movs	r1, #0
 800ca14:	4618      	mov	r0, r3
 800ca16:	f001 fa1d 	bl	800de54 <SDIO_GetResponse>
 800ca1a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	0fdb      	lsrs	r3, r3, #31
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d101      	bne.n	800ca28 <SD_PowerON+0xcc>
 800ca24:	2301      	movs	r3, #1
 800ca26:	e000      	b.n	800ca2a <SD_PowerON+0xce>
 800ca28:	2300      	movs	r3, #0
 800ca2a:	613b      	str	r3, [r7, #16]

    count++;
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d802      	bhi.n	800ca42 <SD_PowerON+0xe6>
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d0cc      	beq.n	800c9dc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d902      	bls.n	800ca52 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ca4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ca50:	e00c      	b.n	800ca6c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d003      	beq.n	800ca64 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	645a      	str	r2, [r3, #68]	; 0x44
 800ca62:	e002      	b.n	800ca6a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2200      	movs	r2, #0
 800ca68:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800ca6a:	2300      	movs	r3, #0
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3718      	adds	r7, #24
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	c1100000 	.word	0xc1100000

0800ca78 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b084      	sub	sp, #16
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d102      	bne.n	800ca8e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ca88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ca8c:	e018      	b.n	800cac0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca96:	041b      	lsls	r3, r3, #16
 800ca98:	4619      	mov	r1, r3
 800ca9a:	4610      	mov	r0, r2
 800ca9c:	f001 fc2c 	bl	800e2f8 <SDMMC_CmdSendStatus>
 800caa0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d001      	beq.n	800caac <SD_SendStatus+0x34>
  {
    return errorstate;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	e009      	b.n	800cac0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2100      	movs	r1, #0
 800cab2:	4618      	mov	r0, r3
 800cab4:	f001 f9ce 	bl	800de54 <SDIO_GetResponse>
 800cab8:	4602      	mov	r2, r0
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800cabe:	2300      	movs	r3, #0
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3710      	adds	r7, #16
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b086      	sub	sp, #24
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800cad0:	2300      	movs	r3, #0
 800cad2:	60fb      	str	r3, [r7, #12]
 800cad4:	2300      	movs	r3, #0
 800cad6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2100      	movs	r1, #0
 800cade:	4618      	mov	r0, r3
 800cae0:	f001 f9b8 	bl	800de54 <SDIO_GetResponse>
 800cae4:	4603      	mov	r3, r0
 800cae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800caea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800caee:	d102      	bne.n	800caf6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800caf0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800caf4:	e02f      	b.n	800cb56 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800caf6:	f107 030c 	add.w	r3, r7, #12
 800cafa:	4619      	mov	r1, r3
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f000 f879 	bl	800cbf4 <SD_FindSCR>
 800cb02:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d001      	beq.n	800cb0e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	e023      	b.n	800cb56 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d01c      	beq.n	800cb52 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb20:	041b      	lsls	r3, r3, #16
 800cb22:	4619      	mov	r1, r3
 800cb24:	4610      	mov	r0, r2
 800cb26:	f001 fb01 	bl	800e12c <SDMMC_CmdAppCommand>
 800cb2a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d001      	beq.n	800cb36 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	e00f      	b.n	800cb56 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	2102      	movs	r1, #2
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f001 fb3a 	bl	800e1b6 <SDMMC_CmdBusWidth>
 800cb42:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d001      	beq.n	800cb4e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	e003      	b.n	800cb56 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	e001      	b.n	800cb56 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cb52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3718      	adds	r7, #24
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b086      	sub	sp, #24
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800cb66:	2300      	movs	r3, #0
 800cb68:	60fb      	str	r3, [r7, #12]
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	2100      	movs	r1, #0
 800cb74:	4618      	mov	r0, r3
 800cb76:	f001 f96d 	bl	800de54 <SDIO_GetResponse>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb84:	d102      	bne.n	800cb8c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cb86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb8a:	e02f      	b.n	800cbec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800cb8c:	f107 030c 	add.w	r3, r7, #12
 800cb90:	4619      	mov	r1, r3
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 f82e 	bl	800cbf4 <SD_FindSCR>
 800cb98:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d001      	beq.n	800cba4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	e023      	b.n	800cbec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d01c      	beq.n	800cbe8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbb6:	041b      	lsls	r3, r3, #16
 800cbb8:	4619      	mov	r1, r3
 800cbba:	4610      	mov	r0, r2
 800cbbc:	f001 fab6 	bl	800e12c <SDMMC_CmdAppCommand>
 800cbc0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d001      	beq.n	800cbcc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	e00f      	b.n	800cbec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f001 faef 	bl	800e1b6 <SDMMC_CmdBusWidth>
 800cbd8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d001      	beq.n	800cbe4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	e003      	b.n	800cbec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	e001      	b.n	800cbec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cbe8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3718      	adds	r7, #24
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}

0800cbf4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800cbf4:	b590      	push	{r4, r7, lr}
 800cbf6:	b08f      	sub	sp, #60	; 0x3c
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cbfe:	f7fb fd7b 	bl	80086f8 <HAL_GetTick>
 800cc02:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800cc04:	2300      	movs	r3, #0
 800cc06:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800cc08:	2300      	movs	r3, #0
 800cc0a:	60bb      	str	r3, [r7, #8]
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2108      	movs	r1, #8
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f001 f959 	bl	800ded2 <SDMMC_CmdBlockLength>
 800cc20:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d001      	beq.n	800cc2c <SD_FindSCR+0x38>
  {
    return errorstate;
 800cc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc2a:	e0a9      	b.n	800cd80 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc34:	041b      	lsls	r3, r3, #16
 800cc36:	4619      	mov	r1, r3
 800cc38:	4610      	mov	r0, r2
 800cc3a:	f001 fa77 	bl	800e12c <SDMMC_CmdAppCommand>
 800cc3e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d001      	beq.n	800cc4a <SD_FindSCR+0x56>
  {
    return errorstate;
 800cc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc48:	e09a      	b.n	800cd80 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cc4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc4e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800cc50:	2308      	movs	r3, #8
 800cc52:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800cc54:	2330      	movs	r3, #48	; 0x30
 800cc56:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800cc58:	2302      	movs	r3, #2
 800cc5a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800cc60:	2301      	movs	r3, #1
 800cc62:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f107 0210 	add.w	r2, r7, #16
 800cc6c:	4611      	mov	r1, r2
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f001 f903 	bl	800de7a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f001 fabe 	bl	800e1fa <SDMMC_CmdSendSCR>
 800cc7e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d022      	beq.n	800cccc <SD_FindSCR+0xd8>
  {
    return errorstate;
 800cc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc88:	e07a      	b.n	800cd80 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d00e      	beq.n	800ccb6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6819      	ldr	r1, [r3, #0]
 800cc9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc9e:	009b      	lsls	r3, r3, #2
 800cca0:	f107 0208 	add.w	r2, r7, #8
 800cca4:	18d4      	adds	r4, r2, r3
 800cca6:	4608      	mov	r0, r1
 800cca8:	f001 f873 	bl	800dd92 <SDIO_ReadFIFO>
 800ccac:	4603      	mov	r3, r0
 800ccae:	6023      	str	r3, [r4, #0]
      index++;
 800ccb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ccb6:	f7fb fd1f 	bl	80086f8 <HAL_GetTick>
 800ccba:	4602      	mov	r2, r0
 800ccbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccbe:	1ad3      	subs	r3, r2, r3
 800ccc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccc4:	d102      	bne.n	800cccc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ccc6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ccca:	e059      	b.n	800cd80 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ccd2:	f240 432a 	movw	r3, #1066	; 0x42a
 800ccd6:	4013      	ands	r3, r2
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d0d6      	beq.n	800cc8a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cce2:	f003 0308 	and.w	r3, r3, #8
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d005      	beq.n	800ccf6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2208      	movs	r2, #8
 800ccf0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ccf2:	2308      	movs	r3, #8
 800ccf4:	e044      	b.n	800cd80 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccfc:	f003 0302 	and.w	r3, r3, #2
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d005      	beq.n	800cd10 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	2202      	movs	r2, #2
 800cd0a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cd0c:	2302      	movs	r3, #2
 800cd0e:	e037      	b.n	800cd80 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd16:	f003 0320 	and.w	r3, r3, #32
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d005      	beq.n	800cd2a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	2220      	movs	r2, #32
 800cd24:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800cd26:	2320      	movs	r3, #32
 800cd28:	e02a      	b.n	800cd80 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f240 523a 	movw	r2, #1338	; 0x53a
 800cd32:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	061a      	lsls	r2, r3, #24
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	021b      	lsls	r3, r3, #8
 800cd3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cd40:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	0a1b      	lsrs	r3, r3, #8
 800cd46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800cd4a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	0e1b      	lsrs	r3, r3, #24
 800cd50:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800cd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd54:	601a      	str	r2, [r3, #0]
    scr++;
 800cd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd58:	3304      	adds	r3, #4
 800cd5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	061a      	lsls	r2, r3, #24
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	021b      	lsls	r3, r3, #8
 800cd64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cd68:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	0a1b      	lsrs	r3, r3, #8
 800cd6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800cd72:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	0e1b      	lsrs	r3, r3, #24
 800cd78:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800cd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800cd7e:	2300      	movs	r3, #0
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	373c      	adds	r7, #60	; 0x3c
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd90      	pop	{r4, r7, pc}

0800cd88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d101      	bne.n	800cd9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cd96:	2301      	movs	r3, #1
 800cd98:	e01d      	b.n	800cdd6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d106      	bne.n	800cdb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f7fb fa42 	bl	8008238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2202      	movs	r2, #2
 800cdb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681a      	ldr	r2, [r3, #0]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	3304      	adds	r3, #4
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	4610      	mov	r0, r2
 800cdc8:	f000 fc18 	bl	800d5fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2201      	movs	r2, #1
 800cdd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cdd4:	2300      	movs	r3, #0
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3708      	adds	r7, #8
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}

0800cdde <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cdde:	b480      	push	{r7}
 800cde0:	b085      	sub	sp, #20
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	68da      	ldr	r2, [r3, #12]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f042 0201 	orr.w	r2, r2, #1
 800cdf4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	689b      	ldr	r3, [r3, #8]
 800cdfc:	f003 0307 	and.w	r3, r3, #7
 800ce00:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2b06      	cmp	r3, #6
 800ce06:	d007      	beq.n	800ce18 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	681a      	ldr	r2, [r3, #0]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f042 0201 	orr.w	r2, r2, #1
 800ce16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ce18:	2300      	movs	r3, #0
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3714      	adds	r7, #20
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce24:	4770      	bx	lr

0800ce26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ce26:	b580      	push	{r7, lr}
 800ce28:	b082      	sub	sp, #8
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d101      	bne.n	800ce38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ce34:	2301      	movs	r3, #1
 800ce36:	e01d      	b.n	800ce74 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce3e:	b2db      	uxtb	r3, r3
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d106      	bne.n	800ce52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f000 f815 	bl	800ce7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2202      	movs	r2, #2
 800ce56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681a      	ldr	r2, [r3, #0]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	3304      	adds	r3, #4
 800ce62:	4619      	mov	r1, r3
 800ce64:	4610      	mov	r0, r2
 800ce66:	f000 fbc9 	bl	800d5fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce72:	2300      	movs	r3, #0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ce84:	bf00      	nop
 800ce86:	370c      	adds	r7, #12
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr

0800ce90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	6839      	ldr	r1, [r7, #0]
 800cea2:	4618      	mov	r0, r3
 800cea4:	f000 fe94 	bl	800dbd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	4a15      	ldr	r2, [pc, #84]	; (800cf04 <HAL_TIM_PWM_Start+0x74>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d004      	beq.n	800cebc <HAL_TIM_PWM_Start+0x2c>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4a14      	ldr	r2, [pc, #80]	; (800cf08 <HAL_TIM_PWM_Start+0x78>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d101      	bne.n	800cec0 <HAL_TIM_PWM_Start+0x30>
 800cebc:	2301      	movs	r3, #1
 800cebe:	e000      	b.n	800cec2 <HAL_TIM_PWM_Start+0x32>
 800cec0:	2300      	movs	r3, #0
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d007      	beq.n	800ced6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ced4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	689b      	ldr	r3, [r3, #8]
 800cedc:	f003 0307 	and.w	r3, r3, #7
 800cee0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2b06      	cmp	r3, #6
 800cee6:	d007      	beq.n	800cef8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f042 0201 	orr.w	r2, r2, #1
 800cef6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cef8:	2300      	movs	r3, #0
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3710      	adds	r7, #16
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	40010000 	.word	0x40010000
 800cf08:	40010400 	.word	0x40010400

0800cf0c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b086      	sub	sp, #24
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d101      	bne.n	800cf20 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	e083      	b.n	800d028 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d106      	bne.n	800cf3a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f7fb f901 	bl	800813c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2202      	movs	r2, #2
 800cf3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	689b      	ldr	r3, [r3, #8]
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	6812      	ldr	r2, [r2, #0]
 800cf4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cf50:	f023 0307 	bic.w	r3, r3, #7
 800cf54:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	3304      	adds	r3, #4
 800cf5e:	4619      	mov	r1, r3
 800cf60:	4610      	mov	r0, r2
 800cf62:	f000 fb4b 	bl	800d5fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	699b      	ldr	r3, [r3, #24]
 800cf74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	6a1b      	ldr	r3, [r3, #32]
 800cf7c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	697a      	ldr	r2, [r7, #20]
 800cf84:	4313      	orrs	r3, r2
 800cf86:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf8e:	f023 0303 	bic.w	r3, r3, #3
 800cf92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	689a      	ldr	r2, [r3, #8]
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	699b      	ldr	r3, [r3, #24]
 800cf9c:	021b      	lsls	r3, r3, #8
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	693a      	ldr	r2, [r7, #16]
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800cfac:	f023 030c 	bic.w	r3, r3, #12
 800cfb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cfb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cfbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	68da      	ldr	r2, [r3, #12]
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	69db      	ldr	r3, [r3, #28]
 800cfc6:	021b      	lsls	r3, r3, #8
 800cfc8:	4313      	orrs	r3, r2
 800cfca:	693a      	ldr	r2, [r7, #16]
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	011a      	lsls	r2, r3, #4
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	6a1b      	ldr	r3, [r3, #32]
 800cfda:	031b      	lsls	r3, r3, #12
 800cfdc:	4313      	orrs	r3, r2
 800cfde:	693a      	ldr	r2, [r7, #16]
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800cfea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800cff2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	685a      	ldr	r2, [r3, #4]
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	695b      	ldr	r3, [r3, #20]
 800cffc:	011b      	lsls	r3, r3, #4
 800cffe:	4313      	orrs	r3, r2
 800d000:	68fa      	ldr	r2, [r7, #12]
 800d002:	4313      	orrs	r3, r2
 800d004:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	697a      	ldr	r2, [r7, #20]
 800d00c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	693a      	ldr	r2, [r7, #16]
 800d014:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	68fa      	ldr	r2, [r7, #12]
 800d01c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2201      	movs	r2, #1
 800d022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d026:	2300      	movs	r3, #0
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3718      	adds	r7, #24
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d002      	beq.n	800d046 <HAL_TIM_Encoder_Start+0x16>
 800d040:	2b04      	cmp	r3, #4
 800d042:	d008      	beq.n	800d056 <HAL_TIM_Encoder_Start+0x26>
 800d044:	e00f      	b.n	800d066 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	2201      	movs	r2, #1
 800d04c:	2100      	movs	r1, #0
 800d04e:	4618      	mov	r0, r3
 800d050:	f000 fdbe 	bl	800dbd0 <TIM_CCxChannelCmd>
      break;
 800d054:	e016      	b.n	800d084 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	2201      	movs	r2, #1
 800d05c:	2104      	movs	r1, #4
 800d05e:	4618      	mov	r0, r3
 800d060:	f000 fdb6 	bl	800dbd0 <TIM_CCxChannelCmd>
      break;
 800d064:	e00e      	b.n	800d084 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2201      	movs	r2, #1
 800d06c:	2100      	movs	r1, #0
 800d06e:	4618      	mov	r0, r3
 800d070:	f000 fdae 	bl	800dbd0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2201      	movs	r2, #1
 800d07a:	2104      	movs	r1, #4
 800d07c:	4618      	mov	r0, r3
 800d07e:	f000 fda7 	bl	800dbd0 <TIM_CCxChannelCmd>
      break;
 800d082:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f042 0201 	orr.w	r2, r2, #1
 800d092:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d094:	2300      	movs	r3, #0
}
 800d096:	4618      	mov	r0, r3
 800d098:	3708      	adds	r7, #8
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}

0800d09e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d09e:	b580      	push	{r7, lr}
 800d0a0:	b082      	sub	sp, #8
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	691b      	ldr	r3, [r3, #16]
 800d0ac:	f003 0302 	and.w	r3, r3, #2
 800d0b0:	2b02      	cmp	r3, #2
 800d0b2:	d122      	bne.n	800d0fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	68db      	ldr	r3, [r3, #12]
 800d0ba:	f003 0302 	and.w	r3, r3, #2
 800d0be:	2b02      	cmp	r3, #2
 800d0c0:	d11b      	bne.n	800d0fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f06f 0202 	mvn.w	r2, #2
 800d0ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	699b      	ldr	r3, [r3, #24]
 800d0d8:	f003 0303 	and.w	r3, r3, #3
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d003      	beq.n	800d0e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f000 fa6c 	bl	800d5be <HAL_TIM_IC_CaptureCallback>
 800d0e6:	e005      	b.n	800d0f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f000 fa5e 	bl	800d5aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f000 fa6f 	bl	800d5d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	691b      	ldr	r3, [r3, #16]
 800d100:	f003 0304 	and.w	r3, r3, #4
 800d104:	2b04      	cmp	r3, #4
 800d106:	d122      	bne.n	800d14e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	68db      	ldr	r3, [r3, #12]
 800d10e:	f003 0304 	and.w	r3, r3, #4
 800d112:	2b04      	cmp	r3, #4
 800d114:	d11b      	bne.n	800d14e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f06f 0204 	mvn.w	r2, #4
 800d11e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2202      	movs	r2, #2
 800d124:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	699b      	ldr	r3, [r3, #24]
 800d12c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d130:	2b00      	cmp	r3, #0
 800d132:	d003      	beq.n	800d13c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f000 fa42 	bl	800d5be <HAL_TIM_IC_CaptureCallback>
 800d13a:	e005      	b.n	800d148 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 fa34 	bl	800d5aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f000 fa45 	bl	800d5d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2200      	movs	r2, #0
 800d14c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	691b      	ldr	r3, [r3, #16]
 800d154:	f003 0308 	and.w	r3, r3, #8
 800d158:	2b08      	cmp	r3, #8
 800d15a:	d122      	bne.n	800d1a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	f003 0308 	and.w	r3, r3, #8
 800d166:	2b08      	cmp	r3, #8
 800d168:	d11b      	bne.n	800d1a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f06f 0208 	mvn.w	r2, #8
 800d172:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2204      	movs	r2, #4
 800d178:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	69db      	ldr	r3, [r3, #28]
 800d180:	f003 0303 	and.w	r3, r3, #3
 800d184:	2b00      	cmp	r3, #0
 800d186:	d003      	beq.n	800d190 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 fa18 	bl	800d5be <HAL_TIM_IC_CaptureCallback>
 800d18e:	e005      	b.n	800d19c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 fa0a 	bl	800d5aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f000 fa1b 	bl	800d5d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	691b      	ldr	r3, [r3, #16]
 800d1a8:	f003 0310 	and.w	r3, r3, #16
 800d1ac:	2b10      	cmp	r3, #16
 800d1ae:	d122      	bne.n	800d1f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	68db      	ldr	r3, [r3, #12]
 800d1b6:	f003 0310 	and.w	r3, r3, #16
 800d1ba:	2b10      	cmp	r3, #16
 800d1bc:	d11b      	bne.n	800d1f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	f06f 0210 	mvn.w	r2, #16
 800d1c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2208      	movs	r2, #8
 800d1cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	69db      	ldr	r3, [r3, #28]
 800d1d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d003      	beq.n	800d1e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f000 f9ee 	bl	800d5be <HAL_TIM_IC_CaptureCallback>
 800d1e2:	e005      	b.n	800d1f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f000 f9e0 	bl	800d5aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 f9f1 	bl	800d5d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	691b      	ldr	r3, [r3, #16]
 800d1fc:	f003 0301 	and.w	r3, r3, #1
 800d200:	2b01      	cmp	r3, #1
 800d202:	d10e      	bne.n	800d222 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	68db      	ldr	r3, [r3, #12]
 800d20a:	f003 0301 	and.w	r3, r3, #1
 800d20e:	2b01      	cmp	r3, #1
 800d210:	d107      	bne.n	800d222 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f06f 0201 	mvn.w	r2, #1
 800d21a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f7fa fcaf 	bl	8007b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	691b      	ldr	r3, [r3, #16]
 800d228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d22c:	2b80      	cmp	r3, #128	; 0x80
 800d22e:	d10e      	bne.n	800d24e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	68db      	ldr	r3, [r3, #12]
 800d236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d23a:	2b80      	cmp	r3, #128	; 0x80
 800d23c:	d107      	bne.n	800d24e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 fd6d 	bl	800dd28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	691b      	ldr	r3, [r3, #16]
 800d254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d258:	2b40      	cmp	r3, #64	; 0x40
 800d25a:	d10e      	bne.n	800d27a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	68db      	ldr	r3, [r3, #12]
 800d262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d266:	2b40      	cmp	r3, #64	; 0x40
 800d268:	d107      	bne.n	800d27a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f000 f9b6 	bl	800d5e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	691b      	ldr	r3, [r3, #16]
 800d280:	f003 0320 	and.w	r3, r3, #32
 800d284:	2b20      	cmp	r3, #32
 800d286:	d10e      	bne.n	800d2a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	68db      	ldr	r3, [r3, #12]
 800d28e:	f003 0320 	and.w	r3, r3, #32
 800d292:	2b20      	cmp	r3, #32
 800d294:	d107      	bne.n	800d2a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f06f 0220 	mvn.w	r2, #32
 800d29e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 fd37 	bl	800dd14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d2a6:	bf00      	nop
 800d2a8:	3708      	adds	r7, #8
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
	...

0800d2b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b084      	sub	sp, #16
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	60f8      	str	r0, [r7, #12]
 800d2b8:	60b9      	str	r1, [r7, #8]
 800d2ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2c2:	2b01      	cmp	r3, #1
 800d2c4:	d101      	bne.n	800d2ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d2c6:	2302      	movs	r3, #2
 800d2c8:	e0b4      	b.n	800d434 <HAL_TIM_PWM_ConfigChannel+0x184>
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2201      	movs	r2, #1
 800d2ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2202      	movs	r2, #2
 800d2d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2b0c      	cmp	r3, #12
 800d2de:	f200 809f 	bhi.w	800d420 <HAL_TIM_PWM_ConfigChannel+0x170>
 800d2e2:	a201      	add	r2, pc, #4	; (adr r2, 800d2e8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800d2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2e8:	0800d31d 	.word	0x0800d31d
 800d2ec:	0800d421 	.word	0x0800d421
 800d2f0:	0800d421 	.word	0x0800d421
 800d2f4:	0800d421 	.word	0x0800d421
 800d2f8:	0800d35d 	.word	0x0800d35d
 800d2fc:	0800d421 	.word	0x0800d421
 800d300:	0800d421 	.word	0x0800d421
 800d304:	0800d421 	.word	0x0800d421
 800d308:	0800d39f 	.word	0x0800d39f
 800d30c:	0800d421 	.word	0x0800d421
 800d310:	0800d421 	.word	0x0800d421
 800d314:	0800d421 	.word	0x0800d421
 800d318:	0800d3df 	.word	0x0800d3df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	68b9      	ldr	r1, [r7, #8]
 800d322:	4618      	mov	r0, r3
 800d324:	f000 fa0a 	bl	800d73c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	699a      	ldr	r2, [r3, #24]
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	f042 0208 	orr.w	r2, r2, #8
 800d336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	699a      	ldr	r2, [r3, #24]
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f022 0204 	bic.w	r2, r2, #4
 800d346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	6999      	ldr	r1, [r3, #24]
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	691a      	ldr	r2, [r3, #16]
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	430a      	orrs	r2, r1
 800d358:	619a      	str	r2, [r3, #24]
      break;
 800d35a:	e062      	b.n	800d422 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	68b9      	ldr	r1, [r7, #8]
 800d362:	4618      	mov	r0, r3
 800d364:	f000 fa5a 	bl	800d81c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	699a      	ldr	r2, [r3, #24]
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	699a      	ldr	r2, [r3, #24]
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	6999      	ldr	r1, [r3, #24]
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	691b      	ldr	r3, [r3, #16]
 800d392:	021a      	lsls	r2, r3, #8
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	430a      	orrs	r2, r1
 800d39a:	619a      	str	r2, [r3, #24]
      break;
 800d39c:	e041      	b.n	800d422 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	68b9      	ldr	r1, [r7, #8]
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f000 faaf 	bl	800d908 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	69da      	ldr	r2, [r3, #28]
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	f042 0208 	orr.w	r2, r2, #8
 800d3b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	69da      	ldr	r2, [r3, #28]
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f022 0204 	bic.w	r2, r2, #4
 800d3c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	69d9      	ldr	r1, [r3, #28]
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	691a      	ldr	r2, [r3, #16]
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	430a      	orrs	r2, r1
 800d3da:	61da      	str	r2, [r3, #28]
      break;
 800d3dc:	e021      	b.n	800d422 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	68b9      	ldr	r1, [r7, #8]
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f000 fb03 	bl	800d9f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	69da      	ldr	r2, [r3, #28]
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d3f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	69da      	ldr	r2, [r3, #28]
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	69d9      	ldr	r1, [r3, #28]
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	691b      	ldr	r3, [r3, #16]
 800d414:	021a      	lsls	r2, r3, #8
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	430a      	orrs	r2, r1
 800d41c:	61da      	str	r2, [r3, #28]
      break;
 800d41e:	e000      	b.n	800d422 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800d420:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2201      	movs	r2, #1
 800d426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2200      	movs	r2, #0
 800d42e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d432:	2300      	movs	r3, #0
}
 800d434:	4618      	mov	r0, r3
 800d436:	3710      	adds	r7, #16
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	d101      	bne.n	800d454 <HAL_TIM_ConfigClockSource+0x18>
 800d450:	2302      	movs	r3, #2
 800d452:	e0a6      	b.n	800d5a2 <HAL_TIM_ConfigClockSource+0x166>
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2201      	movs	r2, #1
 800d458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2202      	movs	r2, #2
 800d460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	689b      	ldr	r3, [r3, #8]
 800d46a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d472:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d47a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	68fa      	ldr	r2, [r7, #12]
 800d482:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	2b40      	cmp	r3, #64	; 0x40
 800d48a:	d067      	beq.n	800d55c <HAL_TIM_ConfigClockSource+0x120>
 800d48c:	2b40      	cmp	r3, #64	; 0x40
 800d48e:	d80b      	bhi.n	800d4a8 <HAL_TIM_ConfigClockSource+0x6c>
 800d490:	2b10      	cmp	r3, #16
 800d492:	d073      	beq.n	800d57c <HAL_TIM_ConfigClockSource+0x140>
 800d494:	2b10      	cmp	r3, #16
 800d496:	d802      	bhi.n	800d49e <HAL_TIM_ConfigClockSource+0x62>
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d06f      	beq.n	800d57c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800d49c:	e078      	b.n	800d590 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d49e:	2b20      	cmp	r3, #32
 800d4a0:	d06c      	beq.n	800d57c <HAL_TIM_ConfigClockSource+0x140>
 800d4a2:	2b30      	cmp	r3, #48	; 0x30
 800d4a4:	d06a      	beq.n	800d57c <HAL_TIM_ConfigClockSource+0x140>
      break;
 800d4a6:	e073      	b.n	800d590 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d4a8:	2b70      	cmp	r3, #112	; 0x70
 800d4aa:	d00d      	beq.n	800d4c8 <HAL_TIM_ConfigClockSource+0x8c>
 800d4ac:	2b70      	cmp	r3, #112	; 0x70
 800d4ae:	d804      	bhi.n	800d4ba <HAL_TIM_ConfigClockSource+0x7e>
 800d4b0:	2b50      	cmp	r3, #80	; 0x50
 800d4b2:	d033      	beq.n	800d51c <HAL_TIM_ConfigClockSource+0xe0>
 800d4b4:	2b60      	cmp	r3, #96	; 0x60
 800d4b6:	d041      	beq.n	800d53c <HAL_TIM_ConfigClockSource+0x100>
      break;
 800d4b8:	e06a      	b.n	800d590 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d4ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4be:	d066      	beq.n	800d58e <HAL_TIM_ConfigClockSource+0x152>
 800d4c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d4c4:	d017      	beq.n	800d4f6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800d4c6:	e063      	b.n	800d590 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6818      	ldr	r0, [r3, #0]
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	6899      	ldr	r1, [r3, #8]
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	685a      	ldr	r2, [r3, #4]
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	68db      	ldr	r3, [r3, #12]
 800d4d8:	f000 fb5a 	bl	800db90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	689b      	ldr	r3, [r3, #8]
 800d4e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d4ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	68fa      	ldr	r2, [r7, #12]
 800d4f2:	609a      	str	r2, [r3, #8]
      break;
 800d4f4:	e04c      	b.n	800d590 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6818      	ldr	r0, [r3, #0]
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	6899      	ldr	r1, [r3, #8]
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	685a      	ldr	r2, [r3, #4]
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	68db      	ldr	r3, [r3, #12]
 800d506:	f000 fb43 	bl	800db90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	689a      	ldr	r2, [r3, #8]
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d518:	609a      	str	r2, [r3, #8]
      break;
 800d51a:	e039      	b.n	800d590 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6818      	ldr	r0, [r3, #0]
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	6859      	ldr	r1, [r3, #4]
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	68db      	ldr	r3, [r3, #12]
 800d528:	461a      	mov	r2, r3
 800d52a:	f000 fab7 	bl	800da9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	2150      	movs	r1, #80	; 0x50
 800d534:	4618      	mov	r0, r3
 800d536:	f000 fb10 	bl	800db5a <TIM_ITRx_SetConfig>
      break;
 800d53a:	e029      	b.n	800d590 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6818      	ldr	r0, [r3, #0]
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	6859      	ldr	r1, [r3, #4]
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	68db      	ldr	r3, [r3, #12]
 800d548:	461a      	mov	r2, r3
 800d54a:	f000 fad6 	bl	800dafa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	2160      	movs	r1, #96	; 0x60
 800d554:	4618      	mov	r0, r3
 800d556:	f000 fb00 	bl	800db5a <TIM_ITRx_SetConfig>
      break;
 800d55a:	e019      	b.n	800d590 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6818      	ldr	r0, [r3, #0]
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	6859      	ldr	r1, [r3, #4]
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	68db      	ldr	r3, [r3, #12]
 800d568:	461a      	mov	r2, r3
 800d56a:	f000 fa97 	bl	800da9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	2140      	movs	r1, #64	; 0x40
 800d574:	4618      	mov	r0, r3
 800d576:	f000 faf0 	bl	800db5a <TIM_ITRx_SetConfig>
      break;
 800d57a:	e009      	b.n	800d590 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681a      	ldr	r2, [r3, #0]
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	4619      	mov	r1, r3
 800d586:	4610      	mov	r0, r2
 800d588:	f000 fae7 	bl	800db5a <TIM_ITRx_SetConfig>
      break;
 800d58c:	e000      	b.n	800d590 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800d58e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2201      	movs	r2, #1
 800d594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2200      	movs	r2, #0
 800d59c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d5a0:	2300      	movs	r3, #0
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3710      	adds	r7, #16
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}

0800d5aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d5aa:	b480      	push	{r7}
 800d5ac:	b083      	sub	sp, #12
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d5b2:	bf00      	nop
 800d5b4:	370c      	adds	r7, #12
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5bc:	4770      	bx	lr

0800d5be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d5be:	b480      	push	{r7}
 800d5c0:	b083      	sub	sp, #12
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d5c6:	bf00      	nop
 800d5c8:	370c      	adds	r7, #12
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr

0800d5d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d5d2:	b480      	push	{r7}
 800d5d4:	b083      	sub	sp, #12
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d5da:	bf00      	nop
 800d5dc:	370c      	adds	r7, #12
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e4:	4770      	bx	lr

0800d5e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d5e6:	b480      	push	{r7}
 800d5e8:	b083      	sub	sp, #12
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d5ee:	bf00      	nop
 800d5f0:	370c      	adds	r7, #12
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f8:	4770      	bx	lr
	...

0800d5fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b085      	sub	sp, #20
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	4a40      	ldr	r2, [pc, #256]	; (800d710 <TIM_Base_SetConfig+0x114>)
 800d610:	4293      	cmp	r3, r2
 800d612:	d013      	beq.n	800d63c <TIM_Base_SetConfig+0x40>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d61a:	d00f      	beq.n	800d63c <TIM_Base_SetConfig+0x40>
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	4a3d      	ldr	r2, [pc, #244]	; (800d714 <TIM_Base_SetConfig+0x118>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d00b      	beq.n	800d63c <TIM_Base_SetConfig+0x40>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	4a3c      	ldr	r2, [pc, #240]	; (800d718 <TIM_Base_SetConfig+0x11c>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d007      	beq.n	800d63c <TIM_Base_SetConfig+0x40>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	4a3b      	ldr	r2, [pc, #236]	; (800d71c <TIM_Base_SetConfig+0x120>)
 800d630:	4293      	cmp	r3, r2
 800d632:	d003      	beq.n	800d63c <TIM_Base_SetConfig+0x40>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	4a3a      	ldr	r2, [pc, #232]	; (800d720 <TIM_Base_SetConfig+0x124>)
 800d638:	4293      	cmp	r3, r2
 800d63a:	d108      	bne.n	800d64e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d642:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	685b      	ldr	r3, [r3, #4]
 800d648:	68fa      	ldr	r2, [r7, #12]
 800d64a:	4313      	orrs	r3, r2
 800d64c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	4a2f      	ldr	r2, [pc, #188]	; (800d710 <TIM_Base_SetConfig+0x114>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d02b      	beq.n	800d6ae <TIM_Base_SetConfig+0xb2>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d65c:	d027      	beq.n	800d6ae <TIM_Base_SetConfig+0xb2>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	4a2c      	ldr	r2, [pc, #176]	; (800d714 <TIM_Base_SetConfig+0x118>)
 800d662:	4293      	cmp	r3, r2
 800d664:	d023      	beq.n	800d6ae <TIM_Base_SetConfig+0xb2>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	4a2b      	ldr	r2, [pc, #172]	; (800d718 <TIM_Base_SetConfig+0x11c>)
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d01f      	beq.n	800d6ae <TIM_Base_SetConfig+0xb2>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	4a2a      	ldr	r2, [pc, #168]	; (800d71c <TIM_Base_SetConfig+0x120>)
 800d672:	4293      	cmp	r3, r2
 800d674:	d01b      	beq.n	800d6ae <TIM_Base_SetConfig+0xb2>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	4a29      	ldr	r2, [pc, #164]	; (800d720 <TIM_Base_SetConfig+0x124>)
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d017      	beq.n	800d6ae <TIM_Base_SetConfig+0xb2>
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	4a28      	ldr	r2, [pc, #160]	; (800d724 <TIM_Base_SetConfig+0x128>)
 800d682:	4293      	cmp	r3, r2
 800d684:	d013      	beq.n	800d6ae <TIM_Base_SetConfig+0xb2>
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	4a27      	ldr	r2, [pc, #156]	; (800d728 <TIM_Base_SetConfig+0x12c>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d00f      	beq.n	800d6ae <TIM_Base_SetConfig+0xb2>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	4a26      	ldr	r2, [pc, #152]	; (800d72c <TIM_Base_SetConfig+0x130>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d00b      	beq.n	800d6ae <TIM_Base_SetConfig+0xb2>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	4a25      	ldr	r2, [pc, #148]	; (800d730 <TIM_Base_SetConfig+0x134>)
 800d69a:	4293      	cmp	r3, r2
 800d69c:	d007      	beq.n	800d6ae <TIM_Base_SetConfig+0xb2>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	4a24      	ldr	r2, [pc, #144]	; (800d734 <TIM_Base_SetConfig+0x138>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d003      	beq.n	800d6ae <TIM_Base_SetConfig+0xb2>
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	4a23      	ldr	r2, [pc, #140]	; (800d738 <TIM_Base_SetConfig+0x13c>)
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d108      	bne.n	800d6c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d6b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	68db      	ldr	r3, [r3, #12]
 800d6ba:	68fa      	ldr	r2, [r7, #12]
 800d6bc:	4313      	orrs	r3, r2
 800d6be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	695b      	ldr	r3, [r3, #20]
 800d6ca:	4313      	orrs	r3, r2
 800d6cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	68fa      	ldr	r2, [r7, #12]
 800d6d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	689a      	ldr	r2, [r3, #8]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	681a      	ldr	r2, [r3, #0]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	4a0a      	ldr	r2, [pc, #40]	; (800d710 <TIM_Base_SetConfig+0x114>)
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d003      	beq.n	800d6f4 <TIM_Base_SetConfig+0xf8>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	4a0c      	ldr	r2, [pc, #48]	; (800d720 <TIM_Base_SetConfig+0x124>)
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d103      	bne.n	800d6fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	691a      	ldr	r2, [r3, #16]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2201      	movs	r2, #1
 800d700:	615a      	str	r2, [r3, #20]
}
 800d702:	bf00      	nop
 800d704:	3714      	adds	r7, #20
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr
 800d70e:	bf00      	nop
 800d710:	40010000 	.word	0x40010000
 800d714:	40000400 	.word	0x40000400
 800d718:	40000800 	.word	0x40000800
 800d71c:	40000c00 	.word	0x40000c00
 800d720:	40010400 	.word	0x40010400
 800d724:	40014000 	.word	0x40014000
 800d728:	40014400 	.word	0x40014400
 800d72c:	40014800 	.word	0x40014800
 800d730:	40001800 	.word	0x40001800
 800d734:	40001c00 	.word	0x40001c00
 800d738:	40002000 	.word	0x40002000

0800d73c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b087      	sub	sp, #28
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6a1b      	ldr	r3, [r3, #32]
 800d74a:	f023 0201 	bic.w	r2, r3, #1
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6a1b      	ldr	r3, [r3, #32]
 800d756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	699b      	ldr	r3, [r3, #24]
 800d762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d76a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f023 0303 	bic.w	r3, r3, #3
 800d772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	68fa      	ldr	r2, [r7, #12]
 800d77a:	4313      	orrs	r3, r2
 800d77c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	f023 0302 	bic.w	r3, r3, #2
 800d784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	689b      	ldr	r3, [r3, #8]
 800d78a:	697a      	ldr	r2, [r7, #20]
 800d78c:	4313      	orrs	r3, r2
 800d78e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	4a20      	ldr	r2, [pc, #128]	; (800d814 <TIM_OC1_SetConfig+0xd8>)
 800d794:	4293      	cmp	r3, r2
 800d796:	d003      	beq.n	800d7a0 <TIM_OC1_SetConfig+0x64>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	4a1f      	ldr	r2, [pc, #124]	; (800d818 <TIM_OC1_SetConfig+0xdc>)
 800d79c:	4293      	cmp	r3, r2
 800d79e:	d10c      	bne.n	800d7ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	f023 0308 	bic.w	r3, r3, #8
 800d7a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	68db      	ldr	r3, [r3, #12]
 800d7ac:	697a      	ldr	r2, [r7, #20]
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	f023 0304 	bic.w	r3, r3, #4
 800d7b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	4a15      	ldr	r2, [pc, #84]	; (800d814 <TIM_OC1_SetConfig+0xd8>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d003      	beq.n	800d7ca <TIM_OC1_SetConfig+0x8e>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	4a14      	ldr	r2, [pc, #80]	; (800d818 <TIM_OC1_SetConfig+0xdc>)
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	d111      	bne.n	800d7ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d7d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d7d2:	693b      	ldr	r3, [r7, #16]
 800d7d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d7d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	695b      	ldr	r3, [r3, #20]
 800d7de:	693a      	ldr	r2, [r7, #16]
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	699b      	ldr	r3, [r3, #24]
 800d7e8:	693a      	ldr	r2, [r7, #16]
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	693a      	ldr	r2, [r7, #16]
 800d7f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	68fa      	ldr	r2, [r7, #12]
 800d7f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	685a      	ldr	r2, [r3, #4]
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	697a      	ldr	r2, [r7, #20]
 800d806:	621a      	str	r2, [r3, #32]
}
 800d808:	bf00      	nop
 800d80a:	371c      	adds	r7, #28
 800d80c:	46bd      	mov	sp, r7
 800d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d812:	4770      	bx	lr
 800d814:	40010000 	.word	0x40010000
 800d818:	40010400 	.word	0x40010400

0800d81c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b087      	sub	sp, #28
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6a1b      	ldr	r3, [r3, #32]
 800d82a:	f023 0210 	bic.w	r2, r3, #16
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6a1b      	ldr	r3, [r3, #32]
 800d836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	699b      	ldr	r3, [r3, #24]
 800d842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d84a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	021b      	lsls	r3, r3, #8
 800d85a:	68fa      	ldr	r2, [r7, #12]
 800d85c:	4313      	orrs	r3, r2
 800d85e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	f023 0320 	bic.w	r3, r3, #32
 800d866:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	689b      	ldr	r3, [r3, #8]
 800d86c:	011b      	lsls	r3, r3, #4
 800d86e:	697a      	ldr	r2, [r7, #20]
 800d870:	4313      	orrs	r3, r2
 800d872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	4a22      	ldr	r2, [pc, #136]	; (800d900 <TIM_OC2_SetConfig+0xe4>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	d003      	beq.n	800d884 <TIM_OC2_SetConfig+0x68>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	4a21      	ldr	r2, [pc, #132]	; (800d904 <TIM_OC2_SetConfig+0xe8>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d10d      	bne.n	800d8a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d88a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	68db      	ldr	r3, [r3, #12]
 800d890:	011b      	lsls	r3, r3, #4
 800d892:	697a      	ldr	r2, [r7, #20]
 800d894:	4313      	orrs	r3, r2
 800d896:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d89e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	4a17      	ldr	r2, [pc, #92]	; (800d900 <TIM_OC2_SetConfig+0xe4>)
 800d8a4:	4293      	cmp	r3, r2
 800d8a6:	d003      	beq.n	800d8b0 <TIM_OC2_SetConfig+0x94>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	4a16      	ldr	r2, [pc, #88]	; (800d904 <TIM_OC2_SetConfig+0xe8>)
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	d113      	bne.n	800d8d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d8b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d8be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	695b      	ldr	r3, [r3, #20]
 800d8c4:	009b      	lsls	r3, r3, #2
 800d8c6:	693a      	ldr	r2, [r7, #16]
 800d8c8:	4313      	orrs	r3, r2
 800d8ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	699b      	ldr	r3, [r3, #24]
 800d8d0:	009b      	lsls	r3, r3, #2
 800d8d2:	693a      	ldr	r2, [r7, #16]
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	693a      	ldr	r2, [r7, #16]
 800d8dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	68fa      	ldr	r2, [r7, #12]
 800d8e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	685a      	ldr	r2, [r3, #4]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	697a      	ldr	r2, [r7, #20]
 800d8f0:	621a      	str	r2, [r3, #32]
}
 800d8f2:	bf00      	nop
 800d8f4:	371c      	adds	r7, #28
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr
 800d8fe:	bf00      	nop
 800d900:	40010000 	.word	0x40010000
 800d904:	40010400 	.word	0x40010400

0800d908 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d908:	b480      	push	{r7}
 800d90a:	b087      	sub	sp, #28
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6a1b      	ldr	r3, [r3, #32]
 800d916:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6a1b      	ldr	r3, [r3, #32]
 800d922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	685b      	ldr	r3, [r3, #4]
 800d928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	69db      	ldr	r3, [r3, #28]
 800d92e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f023 0303 	bic.w	r3, r3, #3
 800d93e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	68fa      	ldr	r2, [r7, #12]
 800d946:	4313      	orrs	r3, r2
 800d948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	689b      	ldr	r3, [r3, #8]
 800d956:	021b      	lsls	r3, r3, #8
 800d958:	697a      	ldr	r2, [r7, #20]
 800d95a:	4313      	orrs	r3, r2
 800d95c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	4a21      	ldr	r2, [pc, #132]	; (800d9e8 <TIM_OC3_SetConfig+0xe0>)
 800d962:	4293      	cmp	r3, r2
 800d964:	d003      	beq.n	800d96e <TIM_OC3_SetConfig+0x66>
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	4a20      	ldr	r2, [pc, #128]	; (800d9ec <TIM_OC3_SetConfig+0xe4>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d10d      	bne.n	800d98a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d974:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	68db      	ldr	r3, [r3, #12]
 800d97a:	021b      	lsls	r3, r3, #8
 800d97c:	697a      	ldr	r2, [r7, #20]
 800d97e:	4313      	orrs	r3, r2
 800d980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	4a16      	ldr	r2, [pc, #88]	; (800d9e8 <TIM_OC3_SetConfig+0xe0>)
 800d98e:	4293      	cmp	r3, r2
 800d990:	d003      	beq.n	800d99a <TIM_OC3_SetConfig+0x92>
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	4a15      	ldr	r2, [pc, #84]	; (800d9ec <TIM_OC3_SetConfig+0xe4>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d113      	bne.n	800d9c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d9a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d9a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	695b      	ldr	r3, [r3, #20]
 800d9ae:	011b      	lsls	r3, r3, #4
 800d9b0:	693a      	ldr	r2, [r7, #16]
 800d9b2:	4313      	orrs	r3, r2
 800d9b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	699b      	ldr	r3, [r3, #24]
 800d9ba:	011b      	lsls	r3, r3, #4
 800d9bc:	693a      	ldr	r2, [r7, #16]
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	693a      	ldr	r2, [r7, #16]
 800d9c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	68fa      	ldr	r2, [r7, #12]
 800d9cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	685a      	ldr	r2, [r3, #4]
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	697a      	ldr	r2, [r7, #20]
 800d9da:	621a      	str	r2, [r3, #32]
}
 800d9dc:	bf00      	nop
 800d9de:	371c      	adds	r7, #28
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e6:	4770      	bx	lr
 800d9e8:	40010000 	.word	0x40010000
 800d9ec:	40010400 	.word	0x40010400

0800d9f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b087      	sub	sp, #28
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6a1b      	ldr	r3, [r3, #32]
 800d9fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6a1b      	ldr	r3, [r3, #32]
 800da0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	685b      	ldr	r3, [r3, #4]
 800da10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	69db      	ldr	r3, [r3, #28]
 800da16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	021b      	lsls	r3, r3, #8
 800da2e:	68fa      	ldr	r2, [r7, #12]
 800da30:	4313      	orrs	r3, r2
 800da32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800da3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	689b      	ldr	r3, [r3, #8]
 800da40:	031b      	lsls	r3, r3, #12
 800da42:	693a      	ldr	r2, [r7, #16]
 800da44:	4313      	orrs	r3, r2
 800da46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	4a12      	ldr	r2, [pc, #72]	; (800da94 <TIM_OC4_SetConfig+0xa4>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d003      	beq.n	800da58 <TIM_OC4_SetConfig+0x68>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	4a11      	ldr	r2, [pc, #68]	; (800da98 <TIM_OC4_SetConfig+0xa8>)
 800da54:	4293      	cmp	r3, r2
 800da56:	d109      	bne.n	800da6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800da5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	695b      	ldr	r3, [r3, #20]
 800da64:	019b      	lsls	r3, r3, #6
 800da66:	697a      	ldr	r2, [r7, #20]
 800da68:	4313      	orrs	r3, r2
 800da6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	697a      	ldr	r2, [r7, #20]
 800da70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	68fa      	ldr	r2, [r7, #12]
 800da76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	685a      	ldr	r2, [r3, #4]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	693a      	ldr	r2, [r7, #16]
 800da84:	621a      	str	r2, [r3, #32]
}
 800da86:	bf00      	nop
 800da88:	371c      	adds	r7, #28
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr
 800da92:	bf00      	nop
 800da94:	40010000 	.word	0x40010000
 800da98:	40010400 	.word	0x40010400

0800da9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b087      	sub	sp, #28
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	60b9      	str	r1, [r7, #8]
 800daa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	6a1b      	ldr	r3, [r3, #32]
 800daac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	6a1b      	ldr	r3, [r3, #32]
 800dab2:	f023 0201 	bic.w	r2, r3, #1
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	699b      	ldr	r3, [r3, #24]
 800dabe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	011b      	lsls	r3, r3, #4
 800dacc:	693a      	ldr	r2, [r7, #16]
 800dace:	4313      	orrs	r3, r2
 800dad0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	f023 030a 	bic.w	r3, r3, #10
 800dad8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dada:	697a      	ldr	r2, [r7, #20]
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	4313      	orrs	r3, r2
 800dae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	693a      	ldr	r2, [r7, #16]
 800dae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	697a      	ldr	r2, [r7, #20]
 800daec:	621a      	str	r2, [r3, #32]
}
 800daee:	bf00      	nop
 800daf0:	371c      	adds	r7, #28
 800daf2:	46bd      	mov	sp, r7
 800daf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf8:	4770      	bx	lr

0800dafa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dafa:	b480      	push	{r7}
 800dafc:	b087      	sub	sp, #28
 800dafe:	af00      	add	r7, sp, #0
 800db00:	60f8      	str	r0, [r7, #12]
 800db02:	60b9      	str	r1, [r7, #8]
 800db04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	6a1b      	ldr	r3, [r3, #32]
 800db0a:	f023 0210 	bic.w	r2, r3, #16
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	699b      	ldr	r3, [r3, #24]
 800db16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	6a1b      	ldr	r3, [r3, #32]
 800db1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800db24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	031b      	lsls	r3, r3, #12
 800db2a:	697a      	ldr	r2, [r7, #20]
 800db2c:	4313      	orrs	r3, r2
 800db2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800db36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	011b      	lsls	r3, r3, #4
 800db3c:	693a      	ldr	r2, [r7, #16]
 800db3e:	4313      	orrs	r3, r2
 800db40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	697a      	ldr	r2, [r7, #20]
 800db46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	693a      	ldr	r2, [r7, #16]
 800db4c:	621a      	str	r2, [r3, #32]
}
 800db4e:	bf00      	nop
 800db50:	371c      	adds	r7, #28
 800db52:	46bd      	mov	sp, r7
 800db54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db58:	4770      	bx	lr

0800db5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800db5a:	b480      	push	{r7}
 800db5c:	b085      	sub	sp, #20
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
 800db62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	689b      	ldr	r3, [r3, #8]
 800db68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800db72:	683a      	ldr	r2, [r7, #0]
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	4313      	orrs	r3, r2
 800db78:	f043 0307 	orr.w	r3, r3, #7
 800db7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	609a      	str	r2, [r3, #8]
}
 800db84:	bf00      	nop
 800db86:	3714      	adds	r7, #20
 800db88:	46bd      	mov	sp, r7
 800db8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8e:	4770      	bx	lr

0800db90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800db90:	b480      	push	{r7}
 800db92:	b087      	sub	sp, #28
 800db94:	af00      	add	r7, sp, #0
 800db96:	60f8      	str	r0, [r7, #12]
 800db98:	60b9      	str	r1, [r7, #8]
 800db9a:	607a      	str	r2, [r7, #4]
 800db9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	689b      	ldr	r3, [r3, #8]
 800dba2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dbaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	021a      	lsls	r2, r3, #8
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	431a      	orrs	r2, r3
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	4313      	orrs	r3, r2
 800dbb8:	697a      	ldr	r2, [r7, #20]
 800dbba:	4313      	orrs	r3, r2
 800dbbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	697a      	ldr	r2, [r7, #20]
 800dbc2:	609a      	str	r2, [r3, #8]
}
 800dbc4:	bf00      	nop
 800dbc6:	371c      	adds	r7, #28
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr

0800dbd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b087      	sub	sp, #28
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	60f8      	str	r0, [r7, #12]
 800dbd8:	60b9      	str	r1, [r7, #8]
 800dbda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	f003 031f 	and.w	r3, r3, #31
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	fa02 f303 	lsl.w	r3, r2, r3
 800dbe8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	6a1a      	ldr	r2, [r3, #32]
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	43db      	mvns	r3, r3
 800dbf2:	401a      	ands	r2, r3
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	6a1a      	ldr	r2, [r3, #32]
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	f003 031f 	and.w	r3, r3, #31
 800dc02:	6879      	ldr	r1, [r7, #4]
 800dc04:	fa01 f303 	lsl.w	r3, r1, r3
 800dc08:	431a      	orrs	r2, r3
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	621a      	str	r2, [r3, #32]
}
 800dc0e:	bf00      	nop
 800dc10:	371c      	adds	r7, #28
 800dc12:	46bd      	mov	sp, r7
 800dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc18:	4770      	bx	lr
	...

0800dc1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dc1c:	b480      	push	{r7}
 800dc1e:	b085      	sub	sp, #20
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
 800dc24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	d101      	bne.n	800dc34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dc30:	2302      	movs	r3, #2
 800dc32:	e05a      	b.n	800dcea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2201      	movs	r2, #1
 800dc38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2202      	movs	r2, #2
 800dc40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	685b      	ldr	r3, [r3, #4]
 800dc4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	689b      	ldr	r3, [r3, #8]
 800dc52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	68fa      	ldr	r2, [r7, #12]
 800dc62:	4313      	orrs	r3, r2
 800dc64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	68fa      	ldr	r2, [r7, #12]
 800dc6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	4a21      	ldr	r2, [pc, #132]	; (800dcf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800dc74:	4293      	cmp	r3, r2
 800dc76:	d022      	beq.n	800dcbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc80:	d01d      	beq.n	800dcbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4a1d      	ldr	r2, [pc, #116]	; (800dcfc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d018      	beq.n	800dcbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	4a1b      	ldr	r2, [pc, #108]	; (800dd00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d013      	beq.n	800dcbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4a1a      	ldr	r2, [pc, #104]	; (800dd04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d00e      	beq.n	800dcbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4a18      	ldr	r2, [pc, #96]	; (800dd08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d009      	beq.n	800dcbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	4a17      	ldr	r2, [pc, #92]	; (800dd0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	d004      	beq.n	800dcbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	4a15      	ldr	r2, [pc, #84]	; (800dd10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d10c      	bne.n	800dcd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dcc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	68ba      	ldr	r2, [r7, #8]
 800dccc:	4313      	orrs	r3, r2
 800dcce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	68ba      	ldr	r2, [r7, #8]
 800dcd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2201      	movs	r2, #1
 800dcdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2200      	movs	r2, #0
 800dce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dce8:	2300      	movs	r3, #0
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3714      	adds	r7, #20
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr
 800dcf6:	bf00      	nop
 800dcf8:	40010000 	.word	0x40010000
 800dcfc:	40000400 	.word	0x40000400
 800dd00:	40000800 	.word	0x40000800
 800dd04:	40000c00 	.word	0x40000c00
 800dd08:	40010400 	.word	0x40010400
 800dd0c:	40014000 	.word	0x40014000
 800dd10:	40001800 	.word	0x40001800

0800dd14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b083      	sub	sp, #12
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dd1c:	bf00      	nop
 800dd1e:	370c      	adds	r7, #12
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr

0800dd28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b083      	sub	sp, #12
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dd30:	bf00      	nop
 800dd32:	370c      	adds	r7, #12
 800dd34:	46bd      	mov	sp, r7
 800dd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3a:	4770      	bx	lr

0800dd3c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800dd3c:	b084      	sub	sp, #16
 800dd3e:	b480      	push	{r7}
 800dd40:	b085      	sub	sp, #20
 800dd42:	af00      	add	r7, sp, #0
 800dd44:	6078      	str	r0, [r7, #4]
 800dd46:	f107 001c 	add.w	r0, r7, #28
 800dd4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800dd52:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800dd54:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800dd56:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800dd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800dd5a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800dd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800dd5e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800dd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800dd62:	431a      	orrs	r2, r3
             Init.ClockDiv
 800dd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800dd66:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800dd68:	68fa      	ldr	r2, [r7, #12]
 800dd6a:	4313      	orrs	r3, r2
 800dd6c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800dd76:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dd7a:	68fa      	ldr	r2, [r7, #12]
 800dd7c:	431a      	orrs	r2, r3
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800dd82:	2300      	movs	r3, #0
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3714      	adds	r7, #20
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	b004      	add	sp, #16
 800dd90:	4770      	bx	lr

0800dd92 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800dd92:	b480      	push	{r7}
 800dd94:	b083      	sub	sp, #12
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	370c      	adds	r7, #12
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr

0800ddac <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2203      	movs	r2, #3
 800ddb8:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ddba:	2002      	movs	r0, #2
 800ddbc:	f7fa fca8 	bl	8008710 <HAL_Delay>
  
  return HAL_OK;
 800ddc0:	2300      	movs	r3, #0
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3708      	adds	r7, #8
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}

0800ddca <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ddca:	b480      	push	{r7}
 800ddcc:	b083      	sub	sp, #12
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f003 0303 	and.w	r3, r3, #3
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	370c      	adds	r7, #12
 800ddde:	46bd      	mov	sp, r7
 800dde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde4:	4770      	bx	lr

0800dde6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800dde6:	b480      	push	{r7}
 800dde8:	b085      	sub	sp, #20
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	6078      	str	r0, [r7, #4]
 800ddee:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	681a      	ldr	r2, [r3, #0]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800de00:	683b      	ldr	r3, [r7, #0]
 800de02:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800de04:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800de0a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800de10:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800de12:	68fa      	ldr	r2, [r7, #12]
 800de14:	4313      	orrs	r3, r2
 800de16:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	68db      	ldr	r3, [r3, #12]
 800de1c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800de20:	f023 030f 	bic.w	r3, r3, #15
 800de24:	68fa      	ldr	r2, [r7, #12]
 800de26:	431a      	orrs	r2, r3
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800de2c:	2300      	movs	r3, #0
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3714      	adds	r7, #20
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr

0800de3a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800de3a:	b480      	push	{r7}
 800de3c:	b083      	sub	sp, #12
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	691b      	ldr	r3, [r3, #16]
 800de46:	b2db      	uxtb	r3, r3
}
 800de48:	4618      	mov	r0, r3
 800de4a:	370c      	adds	r7, #12
 800de4c:	46bd      	mov	sp, r7
 800de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de52:	4770      	bx	lr

0800de54 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800de54:	b480      	push	{r7}
 800de56:	b085      	sub	sp, #20
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	3314      	adds	r3, #20
 800de62:	461a      	mov	r2, r3
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	4413      	add	r3, r2
 800de68:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
}  
 800de6e:	4618      	mov	r0, r3
 800de70:	3714      	adds	r7, #20
 800de72:	46bd      	mov	sp, r7
 800de74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de78:	4770      	bx	lr

0800de7a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800de7a:	b480      	push	{r7}
 800de7c:	b085      	sub	sp, #20
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
 800de82:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800de84:	2300      	movs	r3, #0
 800de86:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	681a      	ldr	r2, [r3, #0]
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	685a      	ldr	r2, [r3, #4]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dea0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800dea6:	431a      	orrs	r2, r3
                       Data->DPSM);
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800deac:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800deae:	68fa      	ldr	r2, [r7, #12]
 800deb0:	4313      	orrs	r3, r2
 800deb2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deb8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	431a      	orrs	r2, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800dec4:	2300      	movs	r3, #0

}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3714      	adds	r7, #20
 800deca:	46bd      	mov	sp, r7
 800decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded0:	4770      	bx	lr

0800ded2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ded2:	b580      	push	{r7, lr}
 800ded4:	b088      	sub	sp, #32
 800ded6:	af00      	add	r7, sp, #0
 800ded8:	6078      	str	r0, [r7, #4]
 800deda:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800dee0:	2310      	movs	r3, #16
 800dee2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dee4:	2340      	movs	r3, #64	; 0x40
 800dee6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dee8:	2300      	movs	r3, #0
 800deea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800deec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800def0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800def2:	f107 0308 	add.w	r3, r7, #8
 800def6:	4619      	mov	r1, r3
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f7ff ff74 	bl	800dde6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800defe:	f241 3288 	movw	r2, #5000	; 0x1388
 800df02:	2110      	movs	r1, #16
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f000 fa41 	bl	800e38c <SDMMC_GetCmdResp1>
 800df0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df0c:	69fb      	ldr	r3, [r7, #28]
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3720      	adds	r7, #32
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}

0800df16 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800df16:	b580      	push	{r7, lr}
 800df18:	b088      	sub	sp, #32
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	6078      	str	r0, [r7, #4]
 800df1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800df24:	2311      	movs	r3, #17
 800df26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800df28:	2340      	movs	r3, #64	; 0x40
 800df2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800df2c:	2300      	movs	r3, #0
 800df2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800df30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800df36:	f107 0308 	add.w	r3, r7, #8
 800df3a:	4619      	mov	r1, r3
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f7ff ff52 	bl	800dde6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800df42:	f241 3288 	movw	r2, #5000	; 0x1388
 800df46:	2111      	movs	r1, #17
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f000 fa1f 	bl	800e38c <SDMMC_GetCmdResp1>
 800df4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df50:	69fb      	ldr	r3, [r7, #28]
}
 800df52:	4618      	mov	r0, r3
 800df54:	3720      	adds	r7, #32
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}

0800df5a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800df5a:	b580      	push	{r7, lr}
 800df5c:	b088      	sub	sp, #32
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
 800df62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800df68:	2312      	movs	r3, #18
 800df6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800df6c:	2340      	movs	r3, #64	; 0x40
 800df6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800df70:	2300      	movs	r3, #0
 800df72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800df74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800df7a:	f107 0308 	add.w	r3, r7, #8
 800df7e:	4619      	mov	r1, r3
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f7ff ff30 	bl	800dde6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800df86:	f241 3288 	movw	r2, #5000	; 0x1388
 800df8a:	2112      	movs	r1, #18
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f000 f9fd 	bl	800e38c <SDMMC_GetCmdResp1>
 800df92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df94:	69fb      	ldr	r3, [r7, #28]
}
 800df96:	4618      	mov	r0, r3
 800df98:	3720      	adds	r7, #32
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}

0800df9e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800df9e:	b580      	push	{r7, lr}
 800dfa0:	b088      	sub	sp, #32
 800dfa2:	af00      	add	r7, sp, #0
 800dfa4:	6078      	str	r0, [r7, #4]
 800dfa6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800dfac:	2318      	movs	r3, #24
 800dfae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dfb0:	2340      	movs	r3, #64	; 0x40
 800dfb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dfb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfbc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dfbe:	f107 0308 	add.w	r3, r7, #8
 800dfc2:	4619      	mov	r1, r3
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f7ff ff0e 	bl	800dde6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800dfca:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfce:	2118      	movs	r1, #24
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f000 f9db 	bl	800e38c <SDMMC_GetCmdResp1>
 800dfd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfd8:	69fb      	ldr	r3, [r7, #28]
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3720      	adds	r7, #32
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}

0800dfe2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800dfe2:	b580      	push	{r7, lr}
 800dfe4:	b088      	sub	sp, #32
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	6078      	str	r0, [r7, #4]
 800dfea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800dff0:	2319      	movs	r3, #25
 800dff2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dff4:	2340      	movs	r3, #64	; 0x40
 800dff6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dff8:	2300      	movs	r3, #0
 800dffa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e000:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e002:	f107 0308 	add.w	r3, r7, #8
 800e006:	4619      	mov	r1, r3
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f7ff feec 	bl	800dde6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e00e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e012:	2119      	movs	r1, #25
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f000 f9b9 	bl	800e38c <SDMMC_GetCmdResp1>
 800e01a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e01c:	69fb      	ldr	r3, [r7, #28]
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3720      	adds	r7, #32
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
	...

0800e028 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b088      	sub	sp, #32
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e030:	2300      	movs	r3, #0
 800e032:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e034:	230c      	movs	r3, #12
 800e036:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e038:	2340      	movs	r3, #64	; 0x40
 800e03a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e03c:	2300      	movs	r3, #0
 800e03e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e044:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e046:	f107 0308 	add.w	r3, r7, #8
 800e04a:	4619      	mov	r1, r3
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f7ff feca 	bl	800dde6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800e052:	4a05      	ldr	r2, [pc, #20]	; (800e068 <SDMMC_CmdStopTransfer+0x40>)
 800e054:	210c      	movs	r1, #12
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f000 f998 	bl	800e38c <SDMMC_GetCmdResp1>
 800e05c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e05e:	69fb      	ldr	r3, [r7, #28]
}
 800e060:	4618      	mov	r0, r3
 800e062:	3720      	adds	r7, #32
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}
 800e068:	05f5e100 	.word	0x05f5e100

0800e06c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b08a      	sub	sp, #40	; 0x28
 800e070:	af00      	add	r7, sp, #0
 800e072:	60f8      	str	r0, [r7, #12]
 800e074:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e07c:	2307      	movs	r3, #7
 800e07e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e080:	2340      	movs	r3, #64	; 0x40
 800e082:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e084:	2300      	movs	r3, #0
 800e086:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e08c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e08e:	f107 0310 	add.w	r3, r7, #16
 800e092:	4619      	mov	r1, r3
 800e094:	68f8      	ldr	r0, [r7, #12]
 800e096:	f7ff fea6 	bl	800dde6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e09a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e09e:	2107      	movs	r1, #7
 800e0a0:	68f8      	ldr	r0, [r7, #12]
 800e0a2:	f000 f973 	bl	800e38c <SDMMC_GetCmdResp1>
 800e0a6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3728      	adds	r7, #40	; 0x28
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}

0800e0b2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e0b2:	b580      	push	{r7, lr}
 800e0b4:	b088      	sub	sp, #32
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e0ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e0d0:	f107 0308 	add.w	r3, r7, #8
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f7ff fe85 	bl	800dde6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f000 f92d 	bl	800e33c <SDMMC_GetCmdError>
 800e0e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0e4:	69fb      	ldr	r3, [r7, #28]
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3720      	adds	r7, #32
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}

0800e0ee <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e0ee:	b580      	push	{r7, lr}
 800e0f0:	b088      	sub	sp, #32
 800e0f2:	af00      	add	r7, sp, #0
 800e0f4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e0f6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e0fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e0fc:	2308      	movs	r3, #8
 800e0fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e100:	2340      	movs	r3, #64	; 0x40
 800e102:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e104:	2300      	movs	r3, #0
 800e106:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e10c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e10e:	f107 0308 	add.w	r3, r7, #8
 800e112:	4619      	mov	r1, r3
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f7ff fe66 	bl	800dde6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f000 fb16 	bl	800e74c <SDMMC_GetCmdResp7>
 800e120:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e122:	69fb      	ldr	r3, [r7, #28]
}
 800e124:	4618      	mov	r0, r3
 800e126:	3720      	adds	r7, #32
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}

0800e12c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b088      	sub	sp, #32
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
 800e134:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e13a:	2337      	movs	r3, #55	; 0x37
 800e13c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e13e:	2340      	movs	r3, #64	; 0x40
 800e140:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e142:	2300      	movs	r3, #0
 800e144:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e14a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e14c:	f107 0308 	add.w	r3, r7, #8
 800e150:	4619      	mov	r1, r3
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f7ff fe47 	bl	800dde6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e158:	f241 3288 	movw	r2, #5000	; 0x1388
 800e15c:	2137      	movs	r1, #55	; 0x37
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 f914 	bl	800e38c <SDMMC_GetCmdResp1>
 800e164:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e166:	69fb      	ldr	r3, [r7, #28]
}
 800e168:	4618      	mov	r0, r3
 800e16a:	3720      	adds	r7, #32
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}

0800e170 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b088      	sub	sp, #32
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e180:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e184:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e186:	2329      	movs	r3, #41	; 0x29
 800e188:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e18a:	2340      	movs	r3, #64	; 0x40
 800e18c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e18e:	2300      	movs	r3, #0
 800e190:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e196:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e198:	f107 0308 	add.w	r3, r7, #8
 800e19c:	4619      	mov	r1, r3
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f7ff fe21 	bl	800dde6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f000 fa23 	bl	800e5f0 <SDMMC_GetCmdResp3>
 800e1aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1ac:	69fb      	ldr	r3, [r7, #28]
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3720      	adds	r7, #32
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}

0800e1b6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800e1b6:	b580      	push	{r7, lr}
 800e1b8:	b088      	sub	sp, #32
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	6078      	str	r0, [r7, #4]
 800e1be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e1c4:	2306      	movs	r3, #6
 800e1c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e1c8:	2340      	movs	r3, #64	; 0x40
 800e1ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e1d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e1d6:	f107 0308 	add.w	r3, r7, #8
 800e1da:	4619      	mov	r1, r3
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f7ff fe02 	bl	800dde6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800e1e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1e6:	2106      	movs	r1, #6
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f000 f8cf 	bl	800e38c <SDMMC_GetCmdResp1>
 800e1ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1f0:	69fb      	ldr	r3, [r7, #28]
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	3720      	adds	r7, #32
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}

0800e1fa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800e1fa:	b580      	push	{r7, lr}
 800e1fc:	b088      	sub	sp, #32
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e202:	2300      	movs	r3, #0
 800e204:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e206:	2333      	movs	r3, #51	; 0x33
 800e208:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e20a:	2340      	movs	r3, #64	; 0x40
 800e20c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e20e:	2300      	movs	r3, #0
 800e210:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e216:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e218:	f107 0308 	add.w	r3, r7, #8
 800e21c:	4619      	mov	r1, r3
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f7ff fde1 	bl	800dde6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800e224:	f241 3288 	movw	r2, #5000	; 0x1388
 800e228:	2133      	movs	r1, #51	; 0x33
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f000 f8ae 	bl	800e38c <SDMMC_GetCmdResp1>
 800e230:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e232:	69fb      	ldr	r3, [r7, #28]
}
 800e234:	4618      	mov	r0, r3
 800e236:	3720      	adds	r7, #32
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b088      	sub	sp, #32
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e244:	2300      	movs	r3, #0
 800e246:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e248:	2302      	movs	r3, #2
 800e24a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e24c:	23c0      	movs	r3, #192	; 0xc0
 800e24e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e250:	2300      	movs	r3, #0
 800e252:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e258:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e25a:	f107 0308 	add.w	r3, r7, #8
 800e25e:	4619      	mov	r1, r3
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f7ff fdc0 	bl	800dde6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f000 f97c 	bl	800e564 <SDMMC_GetCmdResp2>
 800e26c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e26e:	69fb      	ldr	r3, [r7, #28]
}
 800e270:	4618      	mov	r0, r3
 800e272:	3720      	adds	r7, #32
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}

0800e278 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b088      	sub	sp, #32
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e286:	2309      	movs	r3, #9
 800e288:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e28a:	23c0      	movs	r3, #192	; 0xc0
 800e28c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e28e:	2300      	movs	r3, #0
 800e290:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e296:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e298:	f107 0308 	add.w	r3, r7, #8
 800e29c:	4619      	mov	r1, r3
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f7ff fda1 	bl	800dde6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f000 f95d 	bl	800e564 <SDMMC_GetCmdResp2>
 800e2aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2ac:	69fb      	ldr	r3, [r7, #28]
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3720      	adds	r7, #32
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}

0800e2b6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e2b6:	b580      	push	{r7, lr}
 800e2b8:	b088      	sub	sp, #32
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	6078      	str	r0, [r7, #4]
 800e2be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e2c4:	2303      	movs	r3, #3
 800e2c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e2c8:	2340      	movs	r3, #64	; 0x40
 800e2ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e2d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e2d6:	f107 0308 	add.w	r3, r7, #8
 800e2da:	4619      	mov	r1, r3
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f7ff fd82 	bl	800dde6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e2e2:	683a      	ldr	r2, [r7, #0]
 800e2e4:	2103      	movs	r1, #3
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f000 f9bc 	bl	800e664 <SDMMC_GetCmdResp6>
 800e2ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2ee:	69fb      	ldr	r3, [r7, #28]
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3720      	adds	r7, #32
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b088      	sub	sp, #32
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e306:	230d      	movs	r3, #13
 800e308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e30a:	2340      	movs	r3, #64	; 0x40
 800e30c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e30e:	2300      	movs	r3, #0
 800e310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e316:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e318:	f107 0308 	add.w	r3, r7, #8
 800e31c:	4619      	mov	r1, r3
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f7ff fd61 	bl	800dde6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800e324:	f241 3288 	movw	r2, #5000	; 0x1388
 800e328:	210d      	movs	r1, #13
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f000 f82e 	bl	800e38c <SDMMC_GetCmdResp1>
 800e330:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e332:	69fb      	ldr	r3, [r7, #28]
}
 800e334:	4618      	mov	r0, r3
 800e336:	3720      	adds	r7, #32
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e33c:	b490      	push	{r4, r7}
 800e33e:	b082      	sub	sp, #8
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e344:	4b0f      	ldr	r3, [pc, #60]	; (800e384 <SDMMC_GetCmdError+0x48>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	4a0f      	ldr	r2, [pc, #60]	; (800e388 <SDMMC_GetCmdError+0x4c>)
 800e34a:	fba2 2303 	umull	r2, r3, r2, r3
 800e34e:	0a5b      	lsrs	r3, r3, #9
 800e350:	f241 3288 	movw	r2, #5000	; 0x1388
 800e354:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e358:	4623      	mov	r3, r4
 800e35a:	1e5c      	subs	r4, r3, #1
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d102      	bne.n	800e366 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e360:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e364:	e009      	b.n	800e37a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e36a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d0f2      	beq.n	800e358 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	22c5      	movs	r2, #197	; 0xc5
 800e376:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e378:	2300      	movs	r3, #0
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3708      	adds	r7, #8
 800e37e:	46bd      	mov	sp, r7
 800e380:	bc90      	pop	{r4, r7}
 800e382:	4770      	bx	lr
 800e384:	20000000 	.word	0x20000000
 800e388:	10624dd3 	.word	0x10624dd3

0800e38c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e38c:	b590      	push	{r4, r7, lr}
 800e38e:	b087      	sub	sp, #28
 800e390:	af00      	add	r7, sp, #0
 800e392:	60f8      	str	r0, [r7, #12]
 800e394:	460b      	mov	r3, r1
 800e396:	607a      	str	r2, [r7, #4]
 800e398:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e39a:	4b6f      	ldr	r3, [pc, #444]	; (800e558 <SDMMC_GetCmdResp1+0x1cc>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	4a6f      	ldr	r2, [pc, #444]	; (800e55c <SDMMC_GetCmdResp1+0x1d0>)
 800e3a0:	fba2 2303 	umull	r2, r3, r2, r3
 800e3a4:	0a5b      	lsrs	r3, r3, #9
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e3ac:	4623      	mov	r3, r4
 800e3ae:	1e5c      	subs	r4, r3, #1
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d102      	bne.n	800e3ba <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e3b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e3b8:	e0c9      	b.n	800e54e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3be:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d0f0      	beq.n	800e3ac <SDMMC_GetCmdResp1+0x20>
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d1eb      	bne.n	800e3ac <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3d8:	f003 0304 	and.w	r3, r3, #4
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d004      	beq.n	800e3ea <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	2204      	movs	r2, #4
 800e3e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e3e6:	2304      	movs	r3, #4
 800e3e8:	e0b1      	b.n	800e54e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ee:	f003 0301 	and.w	r3, r3, #1
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d004      	beq.n	800e400 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	e0a6      	b.n	800e54e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	22c5      	movs	r2, #197	; 0xc5
 800e404:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e406:	68f8      	ldr	r0, [r7, #12]
 800e408:	f7ff fd17 	bl	800de3a <SDIO_GetCommandResponse>
 800e40c:	4603      	mov	r3, r0
 800e40e:	461a      	mov	r2, r3
 800e410:	7afb      	ldrb	r3, [r7, #11]
 800e412:	4293      	cmp	r3, r2
 800e414:	d001      	beq.n	800e41a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e416:	2301      	movs	r3, #1
 800e418:	e099      	b.n	800e54e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e41a:	2100      	movs	r1, #0
 800e41c:	68f8      	ldr	r0, [r7, #12]
 800e41e:	f7ff fd19 	bl	800de54 <SDIO_GetResponse>
 800e422:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e424:	693a      	ldr	r2, [r7, #16]
 800e426:	4b4e      	ldr	r3, [pc, #312]	; (800e560 <SDMMC_GetCmdResp1+0x1d4>)
 800e428:	4013      	ands	r3, r2
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d101      	bne.n	800e432 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800e42e:	2300      	movs	r3, #0
 800e430:	e08d      	b.n	800e54e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	2b00      	cmp	r3, #0
 800e436:	da02      	bge.n	800e43e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e438:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e43c:	e087      	b.n	800e54e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e444:	2b00      	cmp	r3, #0
 800e446:	d001      	beq.n	800e44c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e448:	2340      	movs	r3, #64	; 0x40
 800e44a:	e080      	b.n	800e54e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e452:	2b00      	cmp	r3, #0
 800e454:	d001      	beq.n	800e45a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e456:	2380      	movs	r3, #128	; 0x80
 800e458:	e079      	b.n	800e54e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e45a:	693b      	ldr	r3, [r7, #16]
 800e45c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e460:	2b00      	cmp	r3, #0
 800e462:	d002      	beq.n	800e46a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e464:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e468:	e071      	b.n	800e54e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e470:	2b00      	cmp	r3, #0
 800e472:	d002      	beq.n	800e47a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e474:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e478:	e069      	b.n	800e54e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e480:	2b00      	cmp	r3, #0
 800e482:	d002      	beq.n	800e48a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e488:	e061      	b.n	800e54e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e48a:	693b      	ldr	r3, [r7, #16]
 800e48c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e490:	2b00      	cmp	r3, #0
 800e492:	d002      	beq.n	800e49a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e494:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e498:	e059      	b.n	800e54e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d002      	beq.n	800e4aa <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e4a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e4a8:	e051      	b.n	800e54e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d002      	beq.n	800e4ba <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e4b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e4b8:	e049      	b.n	800e54e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d002      	beq.n	800e4ca <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e4c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e4c8:	e041      	b.n	800e54e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d002      	beq.n	800e4da <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800e4d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e4d8:	e039      	b.n	800e54e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d002      	beq.n	800e4ea <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e4e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e4e8:	e031      	b.n	800e54e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d002      	beq.n	800e4fa <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e4f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e4f8:	e029      	b.n	800e54e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e500:	2b00      	cmp	r3, #0
 800e502:	d002      	beq.n	800e50a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e504:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e508:	e021      	b.n	800e54e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e50a:	693b      	ldr	r3, [r7, #16]
 800e50c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e510:	2b00      	cmp	r3, #0
 800e512:	d002      	beq.n	800e51a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e514:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e518:	e019      	b.n	800e54e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e520:	2b00      	cmp	r3, #0
 800e522:	d002      	beq.n	800e52a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e524:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e528:	e011      	b.n	800e54e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e530:	2b00      	cmp	r3, #0
 800e532:	d002      	beq.n	800e53a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e534:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e538:	e009      	b.n	800e54e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	f003 0308 	and.w	r3, r3, #8
 800e540:	2b00      	cmp	r3, #0
 800e542:	d002      	beq.n	800e54a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e544:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e548:	e001      	b.n	800e54e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e54a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e54e:	4618      	mov	r0, r3
 800e550:	371c      	adds	r7, #28
 800e552:	46bd      	mov	sp, r7
 800e554:	bd90      	pop	{r4, r7, pc}
 800e556:	bf00      	nop
 800e558:	20000000 	.word	0x20000000
 800e55c:	10624dd3 	.word	0x10624dd3
 800e560:	fdffe008 	.word	0xfdffe008

0800e564 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e564:	b490      	push	{r4, r7}
 800e566:	b084      	sub	sp, #16
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e56c:	4b1e      	ldr	r3, [pc, #120]	; (800e5e8 <SDMMC_GetCmdResp2+0x84>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4a1e      	ldr	r2, [pc, #120]	; (800e5ec <SDMMC_GetCmdResp2+0x88>)
 800e572:	fba2 2303 	umull	r2, r3, r2, r3
 800e576:	0a5b      	lsrs	r3, r3, #9
 800e578:	f241 3288 	movw	r2, #5000	; 0x1388
 800e57c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e580:	4623      	mov	r3, r4
 800e582:	1e5c      	subs	r4, r3, #1
 800e584:	2b00      	cmp	r3, #0
 800e586:	d102      	bne.n	800e58e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e588:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e58c:	e026      	b.n	800e5dc <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e592:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d0f0      	beq.n	800e580 <SDMMC_GetCmdResp2+0x1c>
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d1eb      	bne.n	800e580 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ac:	f003 0304 	and.w	r3, r3, #4
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d004      	beq.n	800e5be <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2204      	movs	r2, #4
 800e5b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e5ba:	2304      	movs	r3, #4
 800e5bc:	e00e      	b.n	800e5dc <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5c2:	f003 0301 	and.w	r3, r3, #1
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d004      	beq.n	800e5d4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	e003      	b.n	800e5dc <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	22c5      	movs	r2, #197	; 0xc5
 800e5d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e5da:	2300      	movs	r3, #0
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3710      	adds	r7, #16
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bc90      	pop	{r4, r7}
 800e5e4:	4770      	bx	lr
 800e5e6:	bf00      	nop
 800e5e8:	20000000 	.word	0x20000000
 800e5ec:	10624dd3 	.word	0x10624dd3

0800e5f0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e5f0:	b490      	push	{r4, r7}
 800e5f2:	b084      	sub	sp, #16
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e5f8:	4b18      	ldr	r3, [pc, #96]	; (800e65c <SDMMC_GetCmdResp3+0x6c>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	4a18      	ldr	r2, [pc, #96]	; (800e660 <SDMMC_GetCmdResp3+0x70>)
 800e5fe:	fba2 2303 	umull	r2, r3, r2, r3
 800e602:	0a5b      	lsrs	r3, r3, #9
 800e604:	f241 3288 	movw	r2, #5000	; 0x1388
 800e608:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e60c:	4623      	mov	r3, r4
 800e60e:	1e5c      	subs	r4, r3, #1
 800e610:	2b00      	cmp	r3, #0
 800e612:	d102      	bne.n	800e61a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e614:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e618:	e01b      	b.n	800e652 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e61e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e626:	2b00      	cmp	r3, #0
 800e628:	d0f0      	beq.n	800e60c <SDMMC_GetCmdResp3+0x1c>
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e630:	2b00      	cmp	r3, #0
 800e632:	d1eb      	bne.n	800e60c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e638:	f003 0304 	and.w	r3, r3, #4
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d004      	beq.n	800e64a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2204      	movs	r2, #4
 800e644:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e646:	2304      	movs	r3, #4
 800e648:	e003      	b.n	800e652 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	22c5      	movs	r2, #197	; 0xc5
 800e64e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e650:	2300      	movs	r3, #0
}
 800e652:	4618      	mov	r0, r3
 800e654:	3710      	adds	r7, #16
 800e656:	46bd      	mov	sp, r7
 800e658:	bc90      	pop	{r4, r7}
 800e65a:	4770      	bx	lr
 800e65c:	20000000 	.word	0x20000000
 800e660:	10624dd3 	.word	0x10624dd3

0800e664 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e664:	b590      	push	{r4, r7, lr}
 800e666:	b087      	sub	sp, #28
 800e668:	af00      	add	r7, sp, #0
 800e66a:	60f8      	str	r0, [r7, #12]
 800e66c:	460b      	mov	r3, r1
 800e66e:	607a      	str	r2, [r7, #4]
 800e670:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e672:	4b34      	ldr	r3, [pc, #208]	; (800e744 <SDMMC_GetCmdResp6+0xe0>)
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	4a34      	ldr	r2, [pc, #208]	; (800e748 <SDMMC_GetCmdResp6+0xe4>)
 800e678:	fba2 2303 	umull	r2, r3, r2, r3
 800e67c:	0a5b      	lsrs	r3, r3, #9
 800e67e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e682:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e686:	4623      	mov	r3, r4
 800e688:	1e5c      	subs	r4, r3, #1
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d102      	bne.n	800e694 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e68e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e692:	e052      	b.n	800e73a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e698:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d0f0      	beq.n	800e686 <SDMMC_GetCmdResp6+0x22>
 800e6a4:	697b      	ldr	r3, [r7, #20]
 800e6a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d1eb      	bne.n	800e686 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6b2:	f003 0304 	and.w	r3, r3, #4
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d004      	beq.n	800e6c4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	2204      	movs	r2, #4
 800e6be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e6c0:	2304      	movs	r3, #4
 800e6c2:	e03a      	b.n	800e73a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6c8:	f003 0301 	and.w	r3, r3, #1
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d004      	beq.n	800e6da <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	e02f      	b.n	800e73a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e6da:	68f8      	ldr	r0, [r7, #12]
 800e6dc:	f7ff fbad 	bl	800de3a <SDIO_GetCommandResponse>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	461a      	mov	r2, r3
 800e6e4:	7afb      	ldrb	r3, [r7, #11]
 800e6e6:	4293      	cmp	r3, r2
 800e6e8:	d001      	beq.n	800e6ee <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	e025      	b.n	800e73a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	22c5      	movs	r2, #197	; 0xc5
 800e6f2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e6f4:	2100      	movs	r1, #0
 800e6f6:	68f8      	ldr	r0, [r7, #12]
 800e6f8:	f7ff fbac 	bl	800de54 <SDIO_GetResponse>
 800e6fc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e704:	2b00      	cmp	r3, #0
 800e706:	d106      	bne.n	800e716 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	0c1b      	lsrs	r3, r3, #16
 800e70c:	b29a      	uxth	r2, r3
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e712:	2300      	movs	r3, #0
 800e714:	e011      	b.n	800e73a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d002      	beq.n	800e726 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e720:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e724:	e009      	b.n	800e73a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d002      	beq.n	800e736 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e734:	e001      	b.n	800e73a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e736:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	371c      	adds	r7, #28
 800e73e:	46bd      	mov	sp, r7
 800e740:	bd90      	pop	{r4, r7, pc}
 800e742:	bf00      	nop
 800e744:	20000000 	.word	0x20000000
 800e748:	10624dd3 	.word	0x10624dd3

0800e74c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e74c:	b490      	push	{r4, r7}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e754:	4b21      	ldr	r3, [pc, #132]	; (800e7dc <SDMMC_GetCmdResp7+0x90>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	4a21      	ldr	r2, [pc, #132]	; (800e7e0 <SDMMC_GetCmdResp7+0x94>)
 800e75a:	fba2 2303 	umull	r2, r3, r2, r3
 800e75e:	0a5b      	lsrs	r3, r3, #9
 800e760:	f241 3288 	movw	r2, #5000	; 0x1388
 800e764:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e768:	4623      	mov	r3, r4
 800e76a:	1e5c      	subs	r4, r3, #1
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d102      	bne.n	800e776 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e770:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e774:	e02c      	b.n	800e7d0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e77a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e782:	2b00      	cmp	r3, #0
 800e784:	d0f0      	beq.n	800e768 <SDMMC_GetCmdResp7+0x1c>
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d1eb      	bne.n	800e768 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e794:	f003 0304 	and.w	r3, r3, #4
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d004      	beq.n	800e7a6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2204      	movs	r2, #4
 800e7a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e7a2:	2304      	movs	r3, #4
 800e7a4:	e014      	b.n	800e7d0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7aa:	f003 0301 	and.w	r3, r3, #1
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d004      	beq.n	800e7bc <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2201      	movs	r2, #1
 800e7b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	e009      	b.n	800e7d0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d002      	beq.n	800e7ce <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2240      	movs	r2, #64	; 0x40
 800e7cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e7ce:	2300      	movs	r3, #0
  
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3710      	adds	r7, #16
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bc90      	pop	{r4, r7}
 800e7d8:	4770      	bx	lr
 800e7da:	bf00      	nop
 800e7dc:	20000000 	.word	0x20000000
 800e7e0:	10624dd3 	.word	0x10624dd3

0800e7e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e7e8:	4904      	ldr	r1, [pc, #16]	; (800e7fc <MX_FATFS_Init+0x18>)
 800e7ea:	4805      	ldr	r0, [pc, #20]	; (800e800 <MX_FATFS_Init+0x1c>)
 800e7ec:	f000 fddc 	bl	800f3a8 <FATFS_LinkDriver>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	4b03      	ldr	r3, [pc, #12]	; (800e804 <MX_FATFS_Init+0x20>)
 800e7f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800e7f8:	bf00      	nop
 800e7fa:	bd80      	pop	{r7, pc}
 800e7fc:	200135ac 	.word	0x200135ac
 800e800:	0802bc5c 	.word	0x0802bc5c
 800e804:	200135a8 	.word	0x200135a8

0800e808 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e80e:	2300      	movs	r3, #0
 800e810:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e812:	f000 f87b 	bl	800e90c <BSP_SD_IsDetected>
 800e816:	4603      	mov	r3, r0
 800e818:	2b01      	cmp	r3, #1
 800e81a:	d001      	beq.n	800e820 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e81c:	2301      	movs	r3, #1
 800e81e:	e012      	b.n	800e846 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e820:	480b      	ldr	r0, [pc, #44]	; (800e850 <BSP_SD_Init+0x48>)
 800e822:	f7fd fa4c 	bl	800bcbe <HAL_SD_Init>
 800e826:	4603      	mov	r3, r0
 800e828:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e82a:	79fb      	ldrb	r3, [r7, #7]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d109      	bne.n	800e844 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800e830:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e834:	4806      	ldr	r0, [pc, #24]	; (800e850 <BSP_SD_Init+0x48>)
 800e836:	f7fd fe87 	bl	800c548 <HAL_SD_ConfigWideBusOperation>
 800e83a:	4603      	mov	r3, r0
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d001      	beq.n	800e844 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e840:	2301      	movs	r3, #1
 800e842:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e844:	79fb      	ldrb	r3, [r7, #7]
}
 800e846:	4618      	mov	r0, r3
 800e848:	3708      	adds	r7, #8
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
 800e84e:	bf00      	nop
 800e850:	200134e0 	.word	0x200134e0

0800e854 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b086      	sub	sp, #24
 800e858:	af00      	add	r7, sp, #0
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	60b9      	str	r1, [r7, #8]
 800e85e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e860:	2300      	movs	r3, #0
 800e862:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	68ba      	ldr	r2, [r7, #8]
 800e868:	68f9      	ldr	r1, [r7, #12]
 800e86a:	4806      	ldr	r0, [pc, #24]	; (800e884 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e86c:	f7fd fab8 	bl	800bde0 <HAL_SD_ReadBlocks_DMA>
 800e870:	4603      	mov	r3, r0
 800e872:	2b00      	cmp	r3, #0
 800e874:	d001      	beq.n	800e87a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e876:	2301      	movs	r3, #1
 800e878:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800e87a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3718      	adds	r7, #24
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}
 800e884:	200134e0 	.word	0x200134e0

0800e888 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b086      	sub	sp, #24
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	60f8      	str	r0, [r7, #12]
 800e890:	60b9      	str	r1, [r7, #8]
 800e892:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e894:	2300      	movs	r3, #0
 800e896:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	68ba      	ldr	r2, [r7, #8]
 800e89c:	68f9      	ldr	r1, [r7, #12]
 800e89e:	4806      	ldr	r0, [pc, #24]	; (800e8b8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e8a0:	f7fd fb88 	bl	800bfb4 <HAL_SD_WriteBlocks_DMA>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d001      	beq.n	800e8ae <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800e8ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3718      	adds	r7, #24
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}
 800e8b8:	200134e0 	.word	0x200134e0

0800e8bc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e8c0:	4805      	ldr	r0, [pc, #20]	; (800e8d8 <BSP_SD_GetCardState+0x1c>)
 800e8c2:	f7fd febd 	bl	800c640 <HAL_SD_GetCardState>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	2b04      	cmp	r3, #4
 800e8ca:	bf14      	ite	ne
 800e8cc:	2301      	movne	r3, #1
 800e8ce:	2300      	moveq	r3, #0
 800e8d0:	b2db      	uxtb	r3, r3
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	bd80      	pop	{r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	200134e0 	.word	0x200134e0

0800e8dc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b082      	sub	sp, #8
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800e8e4:	6879      	ldr	r1, [r7, #4]
 800e8e6:	4803      	ldr	r0, [pc, #12]	; (800e8f4 <BSP_SD_GetCardInfo+0x18>)
 800e8e8:	f7fd fe02 	bl	800c4f0 <HAL_SD_GetCardInfo>
}
 800e8ec:	bf00      	nop
 800e8ee:	3708      	adds	r7, #8
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}
 800e8f4:	200134e0 	.word	0x200134e0

0800e8f8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b082      	sub	sp, #8
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e900:	f000 f9b2 	bl	800ec68 <BSP_SD_ReadCpltCallback>
}
 800e904:	bf00      	nop
 800e906:	3708      	adds	r7, #8
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}

0800e90c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e912:	2301      	movs	r3, #1
 800e914:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800e916:	f000 f80b 	bl	800e930 <BSP_PlatformIsDetected>
 800e91a:	4603      	mov	r3, r0
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d101      	bne.n	800e924 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e920:	2300      	movs	r3, #0
 800e922:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e924:	79fb      	ldrb	r3, [r7, #7]
 800e926:	b2db      	uxtb	r3, r3
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3708      	adds	r7, #8
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}

0800e930 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e936:	2301      	movs	r3, #1
 800e938:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e93a:	2101      	movs	r1, #1
 800e93c:	4806      	ldr	r0, [pc, #24]	; (800e958 <BSP_PlatformIsDetected+0x28>)
 800e93e:	f7fb fa29 	bl	8009d94 <HAL_GPIO_ReadPin>
 800e942:	4603      	mov	r3, r0
 800e944:	2b00      	cmp	r3, #0
 800e946:	d001      	beq.n	800e94c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800e948:	2300      	movs	r3, #0
 800e94a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800e94c:	79fb      	ldrb	r3, [r7, #7]
}  
 800e94e:	4618      	mov	r0, r3
 800e950:	3708      	adds	r7, #8
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
 800e956:	bf00      	nop
 800e958:	40020c00 	.word	0x40020c00

0800e95c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b084      	sub	sp, #16
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800e964:	f000 fd6c 	bl	800f440 <osKernelSysTick>
 800e968:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800e96a:	e006      	b.n	800e97a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e96c:	f7ff ffa6 	bl	800e8bc <BSP_SD_GetCardState>
 800e970:	4603      	mov	r3, r0
 800e972:	2b00      	cmp	r3, #0
 800e974:	d101      	bne.n	800e97a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e976:	2300      	movs	r3, #0
 800e978:	e009      	b.n	800e98e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800e97a:	f000 fd61 	bl	800f440 <osKernelSysTick>
 800e97e:	4602      	mov	r2, r0
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	1ad3      	subs	r3, r2, r3
 800e984:	687a      	ldr	r2, [r7, #4]
 800e986:	429a      	cmp	r2, r3
 800e988:	d8f0      	bhi.n	800e96c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e98a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3710      	adds	r7, #16
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
	...

0800e998 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	4603      	mov	r3, r0
 800e9a0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e9a2:	4b0b      	ldr	r3, [pc, #44]	; (800e9d0 <SD_CheckStatus+0x38>)
 800e9a4:	2201      	movs	r2, #1
 800e9a6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e9a8:	f7ff ff88 	bl	800e8bc <BSP_SD_GetCardState>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d107      	bne.n	800e9c2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e9b2:	4b07      	ldr	r3, [pc, #28]	; (800e9d0 <SD_CheckStatus+0x38>)
 800e9b4:	781b      	ldrb	r3, [r3, #0]
 800e9b6:	b2db      	uxtb	r3, r3
 800e9b8:	f023 0301 	bic.w	r3, r3, #1
 800e9bc:	b2da      	uxtb	r2, r3
 800e9be:	4b04      	ldr	r3, [pc, #16]	; (800e9d0 <SD_CheckStatus+0x38>)
 800e9c0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e9c2:	4b03      	ldr	r3, [pc, #12]	; (800e9d0 <SD_CheckStatus+0x38>)
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	b2db      	uxtb	r3, r3
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3708      	adds	r7, #8
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}
 800e9d0:	20000009 	.word	0x20000009

0800e9d4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e9d4:	b590      	push	{r4, r7, lr}
 800e9d6:	b087      	sub	sp, #28
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	4603      	mov	r3, r0
 800e9dc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800e9de:	4b20      	ldr	r3, [pc, #128]	; (800ea60 <SD_initialize+0x8c>)
 800e9e0:	2201      	movs	r2, #1
 800e9e2:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800e9e4:	f000 fd20 	bl	800f428 <osKernelRunning>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d030      	beq.n	800ea50 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800e9ee:	f7ff ff0b 	bl	800e808 <BSP_SD_Init>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d107      	bne.n	800ea08 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800e9f8:	79fb      	ldrb	r3, [r7, #7]
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7ff ffcc 	bl	800e998 <SD_CheckStatus>
 800ea00:	4603      	mov	r3, r0
 800ea02:	461a      	mov	r2, r3
 800ea04:	4b16      	ldr	r3, [pc, #88]	; (800ea60 <SD_initialize+0x8c>)
 800ea06:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800ea08:	4b15      	ldr	r3, [pc, #84]	; (800ea60 <SD_initialize+0x8c>)
 800ea0a:	781b      	ldrb	r3, [r3, #0]
 800ea0c:	b2db      	uxtb	r3, r3
 800ea0e:	2b01      	cmp	r3, #1
 800ea10:	d01e      	beq.n	800ea50 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800ea12:	4b14      	ldr	r3, [pc, #80]	; (800ea64 <SD_initialize+0x90>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d10e      	bne.n	800ea38 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800ea1a:	4b13      	ldr	r3, [pc, #76]	; (800ea68 <SD_initialize+0x94>)
 800ea1c:	f107 0408 	add.w	r4, r7, #8
 800ea20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ea22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800ea26:	f107 0308 	add.w	r3, r7, #8
 800ea2a:	2100      	movs	r1, #0
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f000 ff94 	bl	800f95a <osMessageCreate>
 800ea32:	4602      	mov	r2, r0
 800ea34:	4b0b      	ldr	r3, [pc, #44]	; (800ea64 <SD_initialize+0x90>)
 800ea36:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800ea38:	4b0a      	ldr	r3, [pc, #40]	; (800ea64 <SD_initialize+0x90>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d107      	bne.n	800ea50 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800ea40:	4b07      	ldr	r3, [pc, #28]	; (800ea60 <SD_initialize+0x8c>)
 800ea42:	781b      	ldrb	r3, [r3, #0]
 800ea44:	b2db      	uxtb	r3, r3
 800ea46:	f043 0301 	orr.w	r3, r3, #1
 800ea4a:	b2da      	uxtb	r2, r3
 800ea4c:	4b04      	ldr	r3, [pc, #16]	; (800ea60 <SD_initialize+0x8c>)
 800ea4e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800ea50:	4b03      	ldr	r3, [pc, #12]	; (800ea60 <SD_initialize+0x8c>)
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	b2db      	uxtb	r3, r3
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	371c      	adds	r7, #28
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd90      	pop	{r4, r7, pc}
 800ea5e:	bf00      	nop
 800ea60:	20000009 	.word	0x20000009
 800ea64:	20012ed0 	.word	0x20012ed0
 800ea68:	08027ce4 	.word	0x08027ce4

0800ea6c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b082      	sub	sp, #8
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	4603      	mov	r3, r0
 800ea74:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ea76:	79fb      	ldrb	r3, [r7, #7]
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7ff ff8d 	bl	800e998 <SD_CheckStatus>
 800ea7e:	4603      	mov	r3, r0
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3708      	adds	r7, #8
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}

0800ea88 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b08a      	sub	sp, #40	; 0x28
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	60b9      	str	r1, [r7, #8]
 800ea90:	607a      	str	r2, [r7, #4]
 800ea92:	603b      	str	r3, [r7, #0]
 800ea94:	4603      	mov	r3, r0
 800ea96:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ea98:	2301      	movs	r3, #1
 800ea9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ea9e:	f247 5030 	movw	r0, #30000	; 0x7530
 800eaa2:	f7ff ff5b 	bl	800e95c <SD_CheckStatusWithTimeout>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	da02      	bge.n	800eab2 <SD_read+0x2a>
  {
    return res;
 800eaac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eab0:	e032      	b.n	800eb18 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800eab2:	683a      	ldr	r2, [r7, #0]
 800eab4:	6879      	ldr	r1, [r7, #4]
 800eab6:	68b8      	ldr	r0, [r7, #8]
 800eab8:	f7ff fecc 	bl	800e854 <BSP_SD_ReadBlocks_DMA>
 800eabc:	4603      	mov	r3, r0
 800eabe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800eac2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d124      	bne.n	800eb14 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800eaca:	4b15      	ldr	r3, [pc, #84]	; (800eb20 <SD_read+0x98>)
 800eacc:	6819      	ldr	r1, [r3, #0]
 800eace:	f107 0314 	add.w	r3, r7, #20
 800ead2:	f247 5230 	movw	r2, #30000	; 0x7530
 800ead6:	4618      	mov	r0, r3
 800ead8:	f000 ffa8 	bl	800fa2c <osMessageGet>

    if (event.status == osEventMessage)
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	2b10      	cmp	r3, #16
 800eae0:	d118      	bne.n	800eb14 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800eae2:	69bb      	ldr	r3, [r7, #24]
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d115      	bne.n	800eb14 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800eae8:	f000 fcaa 	bl	800f440 <osKernelSysTick>
 800eaec:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800eaee:	e008      	b.n	800eb02 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eaf0:	f7ff fee4 	bl	800e8bc <BSP_SD_GetCardState>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d103      	bne.n	800eb02 <SD_read+0x7a>
              {
                res = RES_OK;
 800eafa:	2300      	movs	r3, #0
 800eafc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800eb00:	e008      	b.n	800eb14 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800eb02:	f000 fc9d 	bl	800f440 <osKernelSysTick>
 800eb06:	4602      	mov	r2, r0
 800eb08:	6a3b      	ldr	r3, [r7, #32]
 800eb0a:	1ad3      	subs	r3, r2, r3
 800eb0c:	f247 522f 	movw	r2, #29999	; 0x752f
 800eb10:	4293      	cmp	r3, r2
 800eb12:	d9ed      	bls.n	800eaf0 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800eb14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3728      	adds	r7, #40	; 0x28
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}
 800eb20:	20012ed0 	.word	0x20012ed0

0800eb24 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b08a      	sub	sp, #40	; 0x28
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	60b9      	str	r1, [r7, #8]
 800eb2c:	607a      	str	r2, [r7, #4]
 800eb2e:	603b      	str	r3, [r7, #0]
 800eb30:	4603      	mov	r3, r0
 800eb32:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800eb34:	2301      	movs	r3, #1
 800eb36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800eb3a:	f247 5030 	movw	r0, #30000	; 0x7530
 800eb3e:	f7ff ff0d 	bl	800e95c <SD_CheckStatusWithTimeout>
 800eb42:	4603      	mov	r3, r0
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	da02      	bge.n	800eb4e <SD_write+0x2a>
  {
    return res;
 800eb48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb4c:	e02e      	b.n	800ebac <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800eb4e:	683a      	ldr	r2, [r7, #0]
 800eb50:	6879      	ldr	r1, [r7, #4]
 800eb52:	68b8      	ldr	r0, [r7, #8]
 800eb54:	f7ff fe98 	bl	800e888 <BSP_SD_WriteBlocks_DMA>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d124      	bne.n	800eba8 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800eb5e:	4b15      	ldr	r3, [pc, #84]	; (800ebb4 <SD_write+0x90>)
 800eb60:	6819      	ldr	r1, [r3, #0]
 800eb62:	f107 0314 	add.w	r3, r7, #20
 800eb66:	f247 5230 	movw	r2, #30000	; 0x7530
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f000 ff5e 	bl	800fa2c <osMessageGet>

    if (event.status == osEventMessage)
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	2b10      	cmp	r3, #16
 800eb74:	d118      	bne.n	800eba8 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800eb76:	69bb      	ldr	r3, [r7, #24]
 800eb78:	2b02      	cmp	r3, #2
 800eb7a:	d115      	bne.n	800eba8 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800eb7c:	f000 fc60 	bl	800f440 <osKernelSysTick>
 800eb80:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800eb82:	e008      	b.n	800eb96 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eb84:	f7ff fe9a 	bl	800e8bc <BSP_SD_GetCardState>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d103      	bne.n	800eb96 <SD_write+0x72>
          {
            res = RES_OK;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800eb94:	e008      	b.n	800eba8 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800eb96:	f000 fc53 	bl	800f440 <osKernelSysTick>
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	6a3b      	ldr	r3, [r7, #32]
 800eb9e:	1ad3      	subs	r3, r2, r3
 800eba0:	f247 522f 	movw	r2, #29999	; 0x752f
 800eba4:	4293      	cmp	r3, r2
 800eba6:	d9ed      	bls.n	800eb84 <SD_write+0x60>
    }

  }
#endif

  return res;
 800eba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3728      	adds	r7, #40	; 0x28
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}
 800ebb4:	20012ed0 	.word	0x20012ed0

0800ebb8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b08c      	sub	sp, #48	; 0x30
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	603a      	str	r2, [r7, #0]
 800ebc2:	71fb      	strb	r3, [r7, #7]
 800ebc4:	460b      	mov	r3, r1
 800ebc6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ebc8:	2301      	movs	r3, #1
 800ebca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ebce:	4b25      	ldr	r3, [pc, #148]	; (800ec64 <SD_ioctl+0xac>)
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	b2db      	uxtb	r3, r3
 800ebd4:	f003 0301 	and.w	r3, r3, #1
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d001      	beq.n	800ebe0 <SD_ioctl+0x28>
 800ebdc:	2303      	movs	r3, #3
 800ebde:	e03c      	b.n	800ec5a <SD_ioctl+0xa2>

  switch (cmd)
 800ebe0:	79bb      	ldrb	r3, [r7, #6]
 800ebe2:	2b03      	cmp	r3, #3
 800ebe4:	d834      	bhi.n	800ec50 <SD_ioctl+0x98>
 800ebe6:	a201      	add	r2, pc, #4	; (adr r2, 800ebec <SD_ioctl+0x34>)
 800ebe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebec:	0800ebfd 	.word	0x0800ebfd
 800ebf0:	0800ec05 	.word	0x0800ec05
 800ebf4:	0800ec1d 	.word	0x0800ec1d
 800ebf8:	0800ec37 	.word	0x0800ec37
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ec02:	e028      	b.n	800ec56 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ec04:	f107 030c 	add.w	r3, r7, #12
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f7ff fe67 	bl	800e8dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ec0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ec14:	2300      	movs	r3, #0
 800ec16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ec1a:	e01c      	b.n	800ec56 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ec1c:	f107 030c 	add.w	r3, r7, #12
 800ec20:	4618      	mov	r0, r3
 800ec22:	f7ff fe5b 	bl	800e8dc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ec26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec28:	b29a      	uxth	r2, r3
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ec34:	e00f      	b.n	800ec56 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ec36:	f107 030c 	add.w	r3, r7, #12
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7ff fe4e 	bl	800e8dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ec40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec42:	0a5a      	lsrs	r2, r3, #9
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ec4e:	e002      	b.n	800ec56 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ec50:	2304      	movs	r3, #4
 800ec52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ec56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3730      	adds	r7, #48	; 0x30
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	20000009 	.word	0x20000009

0800ec68 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800ec6c:	4b04      	ldr	r3, [pc, #16]	; (800ec80 <BSP_SD_ReadCpltCallback+0x18>)
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	2200      	movs	r2, #0
 800ec72:	2101      	movs	r1, #1
 800ec74:	4618      	mov	r0, r3
 800ec76:	f000 fe99 	bl	800f9ac <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800ec7a:	bf00      	nop
 800ec7c:	bd80      	pop	{r7, pc}
 800ec7e:	bf00      	nop
 800ec80:	20012ed0 	.word	0x20012ed0

0800ec84 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b08e      	sub	sp, #56	; 0x38
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec90:	2200      	movs	r2, #0
 800ec92:	601a      	str	r2, [r3, #0]
 800ec94:	605a      	str	r2, [r3, #4]
 800ec96:	609a      	str	r2, [r3, #8]
 800ec98:	60da      	str	r2, [r3, #12]
 800ec9a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	4a4a      	ldr	r2, [pc, #296]	; (800edcc <HAL_ETH_MspInit+0x148>)
 800eca2:	4293      	cmp	r3, r2
 800eca4:	f040 808d 	bne.w	800edc2 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800eca8:	2300      	movs	r3, #0
 800ecaa:	623b      	str	r3, [r7, #32]
 800ecac:	4b48      	ldr	r3, [pc, #288]	; (800edd0 <HAL_ETH_MspInit+0x14c>)
 800ecae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecb0:	4a47      	ldr	r2, [pc, #284]	; (800edd0 <HAL_ETH_MspInit+0x14c>)
 800ecb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ecb6:	6313      	str	r3, [r2, #48]	; 0x30
 800ecb8:	4b45      	ldr	r3, [pc, #276]	; (800edd0 <HAL_ETH_MspInit+0x14c>)
 800ecba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ecc0:	623b      	str	r3, [r7, #32]
 800ecc2:	6a3b      	ldr	r3, [r7, #32]
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	61fb      	str	r3, [r7, #28]
 800ecc8:	4b41      	ldr	r3, [pc, #260]	; (800edd0 <HAL_ETH_MspInit+0x14c>)
 800ecca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eccc:	4a40      	ldr	r2, [pc, #256]	; (800edd0 <HAL_ETH_MspInit+0x14c>)
 800ecce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ecd2:	6313      	str	r3, [r2, #48]	; 0x30
 800ecd4:	4b3e      	ldr	r3, [pc, #248]	; (800edd0 <HAL_ETH_MspInit+0x14c>)
 800ecd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ecdc:	61fb      	str	r3, [r7, #28]
 800ecde:	69fb      	ldr	r3, [r7, #28]
 800ece0:	2300      	movs	r3, #0
 800ece2:	61bb      	str	r3, [r7, #24]
 800ece4:	4b3a      	ldr	r3, [pc, #232]	; (800edd0 <HAL_ETH_MspInit+0x14c>)
 800ece6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ece8:	4a39      	ldr	r2, [pc, #228]	; (800edd0 <HAL_ETH_MspInit+0x14c>)
 800ecea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ecee:	6313      	str	r3, [r2, #48]	; 0x30
 800ecf0:	4b37      	ldr	r3, [pc, #220]	; (800edd0 <HAL_ETH_MspInit+0x14c>)
 800ecf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ecf8:	61bb      	str	r3, [r7, #24]
 800ecfa:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	617b      	str	r3, [r7, #20]
 800ed00:	4b33      	ldr	r3, [pc, #204]	; (800edd0 <HAL_ETH_MspInit+0x14c>)
 800ed02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed04:	4a32      	ldr	r2, [pc, #200]	; (800edd0 <HAL_ETH_MspInit+0x14c>)
 800ed06:	f043 0304 	orr.w	r3, r3, #4
 800ed0a:	6313      	str	r3, [r2, #48]	; 0x30
 800ed0c:	4b30      	ldr	r3, [pc, #192]	; (800edd0 <HAL_ETH_MspInit+0x14c>)
 800ed0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed10:	f003 0304 	and.w	r3, r3, #4
 800ed14:	617b      	str	r3, [r7, #20]
 800ed16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed18:	2300      	movs	r3, #0
 800ed1a:	613b      	str	r3, [r7, #16]
 800ed1c:	4b2c      	ldr	r3, [pc, #176]	; (800edd0 <HAL_ETH_MspInit+0x14c>)
 800ed1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed20:	4a2b      	ldr	r2, [pc, #172]	; (800edd0 <HAL_ETH_MspInit+0x14c>)
 800ed22:	f043 0301 	orr.w	r3, r3, #1
 800ed26:	6313      	str	r3, [r2, #48]	; 0x30
 800ed28:	4b29      	ldr	r3, [pc, #164]	; (800edd0 <HAL_ETH_MspInit+0x14c>)
 800ed2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed2c:	f003 0301 	and.w	r3, r3, #1
 800ed30:	613b      	str	r3, [r7, #16]
 800ed32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ed34:	2300      	movs	r3, #0
 800ed36:	60fb      	str	r3, [r7, #12]
 800ed38:	4b25      	ldr	r3, [pc, #148]	; (800edd0 <HAL_ETH_MspInit+0x14c>)
 800ed3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed3c:	4a24      	ldr	r2, [pc, #144]	; (800edd0 <HAL_ETH_MspInit+0x14c>)
 800ed3e:	f043 0302 	orr.w	r3, r3, #2
 800ed42:	6313      	str	r3, [r2, #48]	; 0x30
 800ed44:	4b22      	ldr	r3, [pc, #136]	; (800edd0 <HAL_ETH_MspInit+0x14c>)
 800ed46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed48:	f003 0302 	and.w	r3, r3, #2
 800ed4c:	60fb      	str	r3, [r7, #12]
 800ed4e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800ed50:	2332      	movs	r3, #50	; 0x32
 800ed52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed54:	2302      	movs	r3, #2
 800ed56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed58:	2300      	movs	r3, #0
 800ed5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed5c:	2303      	movs	r3, #3
 800ed5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ed60:	230b      	movs	r3, #11
 800ed62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ed64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed68:	4619      	mov	r1, r3
 800ed6a:	481a      	ldr	r0, [pc, #104]	; (800edd4 <HAL_ETH_MspInit+0x150>)
 800ed6c:	f7fa fe78 	bl	8009a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800ed70:	2386      	movs	r3, #134	; 0x86
 800ed72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed74:	2302      	movs	r3, #2
 800ed76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed7c:	2303      	movs	r3, #3
 800ed7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ed80:	230b      	movs	r3, #11
 800ed82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed88:	4619      	mov	r1, r3
 800ed8a:	4813      	ldr	r0, [pc, #76]	; (800edd8 <HAL_ETH_MspInit+0x154>)
 800ed8c:	f7fa fe68 	bl	8009a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800ed90:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ed94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed96:	2302      	movs	r3, #2
 800ed98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed9e:	2303      	movs	r3, #3
 800eda0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800eda2:	230b      	movs	r3, #11
 800eda4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800eda6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800edaa:	4619      	mov	r1, r3
 800edac:	480b      	ldr	r0, [pc, #44]	; (800eddc <HAL_ETH_MspInit+0x158>)
 800edae:	f7fa fe57 	bl	8009a60 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800edb2:	2200      	movs	r2, #0
 800edb4:	2105      	movs	r1, #5
 800edb6:	203d      	movs	r0, #61	; 0x3d
 800edb8:	f7f9 fd84 	bl	80088c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800edbc:	203d      	movs	r0, #61	; 0x3d
 800edbe:	f7f9 fd9d 	bl	80088fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800edc2:	bf00      	nop
 800edc4:	3738      	adds	r7, #56	; 0x38
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}
 800edca:	bf00      	nop
 800edcc:	40028000 	.word	0x40028000
 800edd0:	40023800 	.word	0x40023800
 800edd4:	40020800 	.word	0x40020800
 800edd8:	40020000 	.word	0x40020000
 800eddc:	40020400 	.word	0x40020400

0800ede0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b082      	sub	sp, #8
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800ede8:	4b04      	ldr	r3, [pc, #16]	; (800edfc <HAL_ETH_RxCpltCallback+0x1c>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	4618      	mov	r0, r3
 800edee:	f000 fd6b 	bl	800f8c8 <osSemaphoreRelease>
}
 800edf2:	bf00      	nop
 800edf4:	3708      	adds	r7, #8
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
 800edfa:	bf00      	nop
 800edfc:	20012ed4 	.word	0x20012ed4

0800ee00 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 800ee00:	b5b0      	push	{r4, r5, r7, lr}
 800ee02:	b090      	sub	sp, #64	; 0x40
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800ee08:	2300      	movs	r3, #0
 800ee0a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800ee0c:	4b5c      	ldr	r3, [pc, #368]	; (800ef80 <low_level_init+0x180>)
 800ee0e:	4a5d      	ldr	r2, [pc, #372]	; (800ef84 <low_level_init+0x184>)
 800ee10:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800ee12:	4b5b      	ldr	r3, [pc, #364]	; (800ef80 <low_level_init+0x180>)
 800ee14:	2201      	movs	r2, #1
 800ee16:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800ee18:	4b59      	ldr	r3, [pc, #356]	; (800ef80 <low_level_init+0x180>)
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x02;
 800ee1e:	2302      	movs	r3, #2
 800ee20:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800ee24:	2380      	movs	r3, #128	; 0x80
 800ee26:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800ee2a:	23e1      	movs	r3, #225	; 0xe1
 800ee2c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x01;
 800ee30:	2301      	movs	r3, #1
 800ee32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x02;
 800ee36:	2302      	movs	r3, #2
 800ee38:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x04;
 800ee3c:	2304      	movs	r3, #4
 800ee3e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800ee42:	4a4f      	ldr	r2, [pc, #316]	; (800ef80 <low_level_init+0x180>)
 800ee44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ee48:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800ee4a:	4b4d      	ldr	r3, [pc, #308]	; (800ef80 <low_level_init+0x180>)
 800ee4c:	2201      	movs	r2, #1
 800ee4e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800ee50:	4b4b      	ldr	r3, [pc, #300]	; (800ef80 <low_level_init+0x180>)
 800ee52:	2200      	movs	r2, #0
 800ee54:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800ee56:	4b4a      	ldr	r3, [pc, #296]	; (800ef80 <low_level_init+0x180>)
 800ee58:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800ee5c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ee5e:	4848      	ldr	r0, [pc, #288]	; (800ef80 <low_level_init+0x180>)
 800ee60:	f7f9 fdec 	bl	8008a3c <HAL_ETH_Init>
 800ee64:	4603      	mov	r3, r0
 800ee66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800ee6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d108      	bne.n	800ee84 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ee78:	f043 0304 	orr.w	r3, r3, #4
 800ee7c:	b2da      	uxtb	r2, r3
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800ee84:	2304      	movs	r3, #4
 800ee86:	4a40      	ldr	r2, [pc, #256]	; (800ef88 <low_level_init+0x188>)
 800ee88:	4940      	ldr	r1, [pc, #256]	; (800ef8c <low_level_init+0x18c>)
 800ee8a:	483d      	ldr	r0, [pc, #244]	; (800ef80 <low_level_init+0x180>)
 800ee8c:	f7f9 ff74 	bl	8008d78 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800ee90:	2304      	movs	r3, #4
 800ee92:	4a3f      	ldr	r2, [pc, #252]	; (800ef90 <low_level_init+0x190>)
 800ee94:	493f      	ldr	r1, [pc, #252]	; (800ef94 <low_level_init+0x194>)
 800ee96:	483a      	ldr	r0, [pc, #232]	; (800ef80 <low_level_init+0x180>)
 800ee98:	f7f9 ffd7 	bl	8008e4a <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2206      	movs	r2, #6
 800eea0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800eea4:	4b36      	ldr	r3, [pc, #216]	; (800ef80 <low_level_init+0x180>)
 800eea6:	695b      	ldr	r3, [r3, #20]
 800eea8:	781a      	ldrb	r2, [r3, #0]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800eeb0:	4b33      	ldr	r3, [pc, #204]	; (800ef80 <low_level_init+0x180>)
 800eeb2:	695b      	ldr	r3, [r3, #20]
 800eeb4:	785a      	ldrb	r2, [r3, #1]
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800eebc:	4b30      	ldr	r3, [pc, #192]	; (800ef80 <low_level_init+0x180>)
 800eebe:	695b      	ldr	r3, [r3, #20]
 800eec0:	789a      	ldrb	r2, [r3, #2]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800eec8:	4b2d      	ldr	r3, [pc, #180]	; (800ef80 <low_level_init+0x180>)
 800eeca:	695b      	ldr	r3, [r3, #20]
 800eecc:	78da      	ldrb	r2, [r3, #3]
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800eed4:	4b2a      	ldr	r3, [pc, #168]	; (800ef80 <low_level_init+0x180>)
 800eed6:	695b      	ldr	r3, [r3, #20]
 800eed8:	791a      	ldrb	r2, [r3, #4]
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800eee0:	4b27      	ldr	r3, [pc, #156]	; (800ef80 <low_level_init+0x180>)
 800eee2:	695b      	ldr	r3, [r3, #20]
 800eee4:	795a      	ldrb	r2, [r3, #5]
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800eef2:	849a      	strh	r2, [r3, #36]	; 0x24
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eefa:	f043 030a 	orr.w	r3, r3, #10
 800eefe:	b2da      	uxtb	r2, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800ef06:	2300      	movs	r3, #0
 800ef08:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800ef0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef12:	2101      	movs	r1, #1
 800ef14:	4618      	mov	r0, r3
 800ef16:	f000 fc55 	bl	800f7c4 <osSemaphoreCreate>
 800ef1a:	4602      	mov	r2, r0
 800ef1c:	4b1e      	ldr	r3, [pc, #120]	; (800ef98 <low_level_init+0x198>)
 800ef1e:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800ef20:	4b1e      	ldr	r3, [pc, #120]	; (800ef9c <low_level_init+0x19c>)
 800ef22:	f107 040c 	add.w	r4, r7, #12
 800ef26:	461d      	mov	r5, r3
 800ef28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ef30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800ef34:	f107 030c 	add.w	r3, r7, #12
 800ef38:	6879      	ldr	r1, [r7, #4]
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f000 fa90 	bl	800f460 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800ef40:	480f      	ldr	r0, [pc, #60]	; (800ef80 <low_level_init+0x180>)
 800ef42:	f7fa faaa 	bl	800949a <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800ef46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ef4a:	461a      	mov	r2, r3
 800ef4c:	211d      	movs	r1, #29
 800ef4e:	480c      	ldr	r0, [pc, #48]	; (800ef80 <low_level_init+0x180>)
 800ef50:	f7fa f9d5 	bl	80092fe <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800ef54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef56:	f043 030b 	orr.w	r3, r3, #11
 800ef5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800ef5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef5e:	461a      	mov	r2, r3
 800ef60:	211d      	movs	r1, #29
 800ef62:	4807      	ldr	r0, [pc, #28]	; (800ef80 <low_level_init+0x180>)
 800ef64:	f7fa fa33 	bl	80093ce <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800ef68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	211d      	movs	r1, #29
 800ef70:	4803      	ldr	r0, [pc, #12]	; (800ef80 <low_level_init+0x180>)
 800ef72:	f7fa f9c4 	bl	80092fe <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800ef76:	bf00      	nop
 800ef78:	3740      	adds	r7, #64	; 0x40
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bdb0      	pop	{r4, r5, r7, pc}
 800ef7e:	bf00      	nop
 800ef80:	200152e4 	.word	0x200152e4
 800ef84:	40028000 	.word	0x40028000
 800ef88:	2001532c 	.word	0x2001532c
 800ef8c:	20013a14 	.word	0x20013a14
 800ef90:	20013a94 	.word	0x20013a94
 800ef94:	20015264 	.word	0x20015264
 800ef98:	20012ed4 	.word	0x20012ed4
 800ef9c:	08027cfc 	.word	0x08027cfc

0800efa0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b08a      	sub	sp, #40	; 0x28
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800efaa:	4b4b      	ldr	r3, [pc, #300]	; (800f0d8 <low_level_output+0x138>)
 800efac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efae:	689b      	ldr	r3, [r3, #8]
 800efb0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800efb2:	2300      	movs	r3, #0
 800efb4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800efb6:	2300      	movs	r3, #0
 800efb8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800efba:	2300      	movs	r3, #0
 800efbc:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800efbe:	2300      	movs	r3, #0
 800efc0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800efc2:	4b45      	ldr	r3, [pc, #276]	; (800f0d8 <low_level_output+0x138>)
 800efc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efc6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800efc8:	2300      	movs	r3, #0
 800efca:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	623b      	str	r3, [r7, #32]
 800efd0:	e05a      	b.n	800f088 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800efd2:	69bb      	ldr	r3, [r7, #24]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	da03      	bge.n	800efe2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800efda:	23f8      	movs	r3, #248	; 0xf8
 800efdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800efe0:	e05c      	b.n	800f09c <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800efe2:	6a3b      	ldr	r3, [r7, #32]
 800efe4:	895b      	ldrh	r3, [r3, #10]
 800efe6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800efe8:	2300      	movs	r3, #0
 800efea:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800efec:	e02f      	b.n	800f04e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800efee:	69fa      	ldr	r2, [r7, #28]
 800eff0:	693b      	ldr	r3, [r7, #16]
 800eff2:	18d0      	adds	r0, r2, r3
 800eff4:	6a3b      	ldr	r3, [r7, #32]
 800eff6:	685a      	ldr	r2, [r3, #4]
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	18d1      	adds	r1, r2, r3
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800f002:	3304      	adds	r3, #4
 800f004:	461a      	mov	r2, r3
 800f006:	f017 fc0c 	bl	8026822 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800f00a:	69bb      	ldr	r3, [r7, #24]
 800f00c:	68db      	ldr	r3, [r3, #12]
 800f00e:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800f010:	69bb      	ldr	r3, [r7, #24]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	2b00      	cmp	r3, #0
 800f016:	da03      	bge.n	800f020 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800f018:	23f8      	movs	r3, #248	; 0xf8
 800f01a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800f01e:	e03d      	b.n	800f09c <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800f020:	69bb      	ldr	r3, [r7, #24]
 800f022:	689b      	ldr	r3, [r3, #8]
 800f024:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800f026:	693a      	ldr	r2, [r7, #16]
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	4413      	add	r3, r2
 800f02c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800f030:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800f032:	68ba      	ldr	r2, [r7, #8]
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	1ad3      	subs	r3, r2, r3
 800f038:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800f03c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800f03e:	697a      	ldr	r2, [r7, #20]
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	1ad3      	subs	r3, r2, r3
 800f044:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800f048:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800f04a:	2300      	movs	r3, #0
 800f04c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800f04e:	68fa      	ldr	r2, [r7, #12]
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	4413      	add	r3, r2
 800f054:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800f058:	4293      	cmp	r3, r2
 800f05a:	d8c8      	bhi.n	800efee <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800f05c:	69fa      	ldr	r2, [r7, #28]
 800f05e:	693b      	ldr	r3, [r7, #16]
 800f060:	18d0      	adds	r0, r2, r3
 800f062:	6a3b      	ldr	r3, [r7, #32]
 800f064:	685a      	ldr	r2, [r3, #4]
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	4413      	add	r3, r2
 800f06a:	68fa      	ldr	r2, [r7, #12]
 800f06c:	4619      	mov	r1, r3
 800f06e:	f017 fbd8 	bl	8026822 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800f072:	693a      	ldr	r2, [r7, #16]
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	4413      	add	r3, r2
 800f078:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800f07a:	697a      	ldr	r2, [r7, #20]
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	4413      	add	r3, r2
 800f080:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800f082:	6a3b      	ldr	r3, [r7, #32]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	623b      	str	r3, [r7, #32]
 800f088:	6a3b      	ldr	r3, [r7, #32]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d1a1      	bne.n	800efd2 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800f08e:	6979      	ldr	r1, [r7, #20]
 800f090:	4811      	ldr	r0, [pc, #68]	; (800f0d8 <low_level_output+0x138>)
 800f092:	f7f9 ff47 	bl	8008f24 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800f096:	2300      	movs	r3, #0
 800f098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800f09c:	4b0e      	ldr	r3, [pc, #56]	; (800f0d8 <low_level_output+0x138>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0a4:	3314      	adds	r3, #20
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	f003 0320 	and.w	r3, r3, #32
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d00d      	beq.n	800f0cc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800f0b0:	4b09      	ldr	r3, [pc, #36]	; (800f0d8 <low_level_output+0x138>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0b8:	3314      	adds	r3, #20
 800f0ba:	2220      	movs	r2, #32
 800f0bc:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800f0be:	4b06      	ldr	r3, [pc, #24]	; (800f0d8 <low_level_output+0x138>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0c6:	3304      	adds	r3, #4
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800f0cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3728      	adds	r7, #40	; 0x28
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}
 800f0d8:	200152e4 	.word	0x200152e4

0800f0dc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b08c      	sub	sp, #48	; 0x30
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800f100:	484f      	ldr	r0, [pc, #316]	; (800f240 <low_level_input+0x164>)
 800f102:	f7f9 fff9 	bl	80090f8 <HAL_ETH_GetReceivedFrame_IT>
 800f106:	4603      	mov	r3, r0
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d001      	beq.n	800f110 <low_level_input+0x34>
  
    return NULL;
 800f10c:	2300      	movs	r3, #0
 800f10e:	e092      	b.n	800f236 <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800f110:	4b4b      	ldr	r3, [pc, #300]	; (800f240 <low_level_input+0x164>)
 800f112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f114:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800f116:	4b4a      	ldr	r3, [pc, #296]	; (800f240 <low_level_input+0x164>)
 800f118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f11a:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 800f11c:	89fb      	ldrh	r3, [r7, #14]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d007      	beq.n	800f132 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800f122:	89fb      	ldrh	r3, [r7, #14]
 800f124:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800f128:	4619      	mov	r1, r3
 800f12a:	2000      	movs	r0, #0
 800f12c:	f009 f834 	bl	8018198 <pbuf_alloc>
 800f130:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 800f132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f134:	2b00      	cmp	r3, #0
 800f136:	d04b      	beq.n	800f1d0 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800f138:	4b41      	ldr	r3, [pc, #260]	; (800f240 <low_level_input+0x164>)
 800f13a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f13c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800f13e:	2300      	movs	r3, #0
 800f140:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800f142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f144:	62bb      	str	r3, [r7, #40]	; 0x28
 800f146:	e040      	b.n	800f1ca <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800f148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f14a:	895b      	ldrh	r3, [r3, #10]
 800f14c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800f14e:	2300      	movs	r3, #0
 800f150:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800f152:	e021      	b.n	800f198 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800f154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f156:	685a      	ldr	r2, [r3, #4]
 800f158:	69bb      	ldr	r3, [r7, #24]
 800f15a:	18d0      	adds	r0, r2, r3
 800f15c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f15e:	69fb      	ldr	r3, [r7, #28]
 800f160:	18d1      	adds	r1, r2, r3
 800f162:	69fb      	ldr	r3, [r7, #28]
 800f164:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800f168:	3304      	adds	r3, #4
 800f16a:	461a      	mov	r2, r3
 800f16c:	f017 fb59 	bl	8026822 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800f170:	6a3b      	ldr	r3, [r7, #32]
 800f172:	68db      	ldr	r3, [r3, #12]
 800f174:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800f176:	6a3b      	ldr	r3, [r7, #32]
 800f178:	689b      	ldr	r3, [r3, #8]
 800f17a:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800f17c:	69fa      	ldr	r2, [r7, #28]
 800f17e:	697b      	ldr	r3, [r7, #20]
 800f180:	4413      	add	r3, r2
 800f182:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800f186:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800f188:	69ba      	ldr	r2, [r7, #24]
 800f18a:	69fb      	ldr	r3, [r7, #28]
 800f18c:	1ad3      	subs	r3, r2, r3
 800f18e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800f192:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800f194:	2300      	movs	r3, #0
 800f196:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800f198:	697a      	ldr	r2, [r7, #20]
 800f19a:	69fb      	ldr	r3, [r7, #28]
 800f19c:	4413      	add	r3, r2
 800f19e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800f1a2:	4293      	cmp	r3, r2
 800f1a4:	d8d6      	bhi.n	800f154 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800f1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a8:	685a      	ldr	r2, [r3, #4]
 800f1aa:	69bb      	ldr	r3, [r7, #24]
 800f1ac:	18d0      	adds	r0, r2, r3
 800f1ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1b0:	69fb      	ldr	r3, [r7, #28]
 800f1b2:	4413      	add	r3, r2
 800f1b4:	697a      	ldr	r2, [r7, #20]
 800f1b6:	4619      	mov	r1, r3
 800f1b8:	f017 fb33 	bl	8026822 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800f1bc:	69fa      	ldr	r2, [r7, #28]
 800f1be:	697b      	ldr	r3, [r7, #20]
 800f1c0:	4413      	add	r3, r2
 800f1c2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800f1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800f1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d1bb      	bne.n	800f148 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800f1d0:	4b1b      	ldr	r3, [pc, #108]	; (800f240 <low_level_input+0x164>)
 800f1d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1d4:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	613b      	str	r3, [r7, #16]
 800f1da:	e00b      	b.n	800f1f4 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800f1dc:	6a3b      	ldr	r3, [r7, #32]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800f1e4:	6a3b      	ldr	r3, [r7, #32]
 800f1e6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800f1e8:	6a3b      	ldr	r3, [r7, #32]
 800f1ea:	68db      	ldr	r3, [r3, #12]
 800f1ec:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	613b      	str	r3, [r7, #16]
 800f1f4:	4b12      	ldr	r3, [pc, #72]	; (800f240 <low_level_input+0x164>)
 800f1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1f8:	693a      	ldr	r2, [r7, #16]
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d3ee      	bcc.n	800f1dc <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 800f1fe:	4b10      	ldr	r3, [pc, #64]	; (800f240 <low_level_input+0x164>)
 800f200:	2200      	movs	r2, #0
 800f202:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800f204:	4b0e      	ldr	r3, [pc, #56]	; (800f240 <low_level_input+0x164>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f20c:	3314      	adds	r3, #20
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f214:	2b00      	cmp	r3, #0
 800f216:	d00d      	beq.n	800f234 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800f218:	4b09      	ldr	r3, [pc, #36]	; (800f240 <low_level_input+0x164>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f220:	3314      	adds	r3, #20
 800f222:	2280      	movs	r2, #128	; 0x80
 800f224:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800f226:	4b06      	ldr	r3, [pc, #24]	; (800f240 <low_level_input+0x164>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f22e:	3308      	adds	r3, #8
 800f230:	2200      	movs	r2, #0
 800f232:	601a      	str	r2, [r3, #0]
  }
  return p;
 800f234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f236:	4618      	mov	r0, r3
 800f238:	3730      	adds	r7, #48	; 0x30
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
 800f23e:	bf00      	nop
 800f240:	200152e4 	.word	0x200152e4

0800f244 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b084      	sub	sp, #16
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800f250:	4b12      	ldr	r3, [pc, #72]	; (800f29c <ethernetif_input+0x58>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f258:	4618      	mov	r0, r3
 800f25a:	f000 fae7 	bl	800f82c <osSemaphoreWait>
 800f25e:	4603      	mov	r3, r0
 800f260:	2b00      	cmp	r3, #0
 800f262:	d1f5      	bne.n	800f250 <ethernetif_input+0xc>
    {
      do
      {   
        LOCK_TCPIP_CORE();
 800f264:	480e      	ldr	r0, [pc, #56]	; (800f2a0 <ethernetif_input+0x5c>)
 800f266:	f015 f93d 	bl	80244e4 <sys_mutex_lock>
        p = low_level_input( netif );
 800f26a:	68f8      	ldr	r0, [r7, #12]
 800f26c:	f7ff ff36 	bl	800f0dc <low_level_input>
 800f270:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d00a      	beq.n	800f28e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	691b      	ldr	r3, [r3, #16]
 800f27c:	68f9      	ldr	r1, [r7, #12]
 800f27e:	68b8      	ldr	r0, [r7, #8]
 800f280:	4798      	blx	r3
 800f282:	4603      	mov	r3, r0
 800f284:	2b00      	cmp	r3, #0
 800f286:	d002      	beq.n	800f28e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800f288:	68b8      	ldr	r0, [r7, #8]
 800f28a:	f009 fa97 	bl	80187bc <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800f28e:	4804      	ldr	r0, [pc, #16]	; (800f2a0 <ethernetif_input+0x5c>)
 800f290:	f015 f937 	bl	8024502 <sys_mutex_unlock>
      } while(p!=NULL);
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d1e4      	bne.n	800f264 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800f29a:	e7d9      	b.n	800f250 <ethernetif_input+0xc>
 800f29c:	20012ed4 	.word	0x20012ed4
 800f2a0:	20016b3c 	.word	0x20016b3c

0800f2a4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b082      	sub	sp, #8
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d106      	bne.n	800f2c0 <ethernetif_init+0x1c>
 800f2b2:	4b0e      	ldr	r3, [pc, #56]	; (800f2ec <ethernetif_init+0x48>)
 800f2b4:	f240 222b 	movw	r2, #555	; 0x22b
 800f2b8:	490d      	ldr	r1, [pc, #52]	; (800f2f0 <ethernetif_init+0x4c>)
 800f2ba:	480e      	ldr	r0, [pc, #56]	; (800f2f4 <ethernetif_init+0x50>)
 800f2bc:	f017 fb6c 	bl	8026998 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2273      	movs	r2, #115	; 0x73
 800f2c4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2274      	movs	r2, #116	; 0x74
 800f2cc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	4a09      	ldr	r2, [pc, #36]	; (800f2f8 <ethernetif_init+0x54>)
 800f2d4:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	4a08      	ldr	r2, [pc, #32]	; (800f2fc <ethernetif_init+0x58>)
 800f2da:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800f2dc:	6878      	ldr	r0, [r7, #4]
 800f2de:	f7ff fd8f 	bl	800ee00 <low_level_init>

  return ERR_OK;
 800f2e2:	2300      	movs	r3, #0
}
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	3708      	adds	r7, #8
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}
 800f2ec:	08027d18 	.word	0x08027d18
 800f2f0:	08027d34 	.word	0x08027d34
 800f2f4:	08027d44 	.word	0x08027d44
 800f2f8:	080223b1 	.word	0x080223b1
 800f2fc:	0800efa1 	.word	0x0800efa1

0800f300 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f304:	f7f9 f9f8 	bl	80086f8 <HAL_GetTick>
 800f308:	4603      	mov	r3, r0
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	bd80      	pop	{r7, pc}
	...

0800f310 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f310:	b480      	push	{r7}
 800f312:	b087      	sub	sp, #28
 800f314:	af00      	add	r7, sp, #0
 800f316:	60f8      	str	r0, [r7, #12]
 800f318:	60b9      	str	r1, [r7, #8]
 800f31a:	4613      	mov	r3, r2
 800f31c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f31e:	2301      	movs	r3, #1
 800f320:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f322:	2300      	movs	r3, #0
 800f324:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f326:	4b1f      	ldr	r3, [pc, #124]	; (800f3a4 <FATFS_LinkDriverEx+0x94>)
 800f328:	7a5b      	ldrb	r3, [r3, #9]
 800f32a:	b2db      	uxtb	r3, r3
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d131      	bne.n	800f394 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f330:	4b1c      	ldr	r3, [pc, #112]	; (800f3a4 <FATFS_LinkDriverEx+0x94>)
 800f332:	7a5b      	ldrb	r3, [r3, #9]
 800f334:	b2db      	uxtb	r3, r3
 800f336:	461a      	mov	r2, r3
 800f338:	4b1a      	ldr	r3, [pc, #104]	; (800f3a4 <FATFS_LinkDriverEx+0x94>)
 800f33a:	2100      	movs	r1, #0
 800f33c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f33e:	4b19      	ldr	r3, [pc, #100]	; (800f3a4 <FATFS_LinkDriverEx+0x94>)
 800f340:	7a5b      	ldrb	r3, [r3, #9]
 800f342:	b2db      	uxtb	r3, r3
 800f344:	4a17      	ldr	r2, [pc, #92]	; (800f3a4 <FATFS_LinkDriverEx+0x94>)
 800f346:	009b      	lsls	r3, r3, #2
 800f348:	4413      	add	r3, r2
 800f34a:	68fa      	ldr	r2, [r7, #12]
 800f34c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f34e:	4b15      	ldr	r3, [pc, #84]	; (800f3a4 <FATFS_LinkDriverEx+0x94>)
 800f350:	7a5b      	ldrb	r3, [r3, #9]
 800f352:	b2db      	uxtb	r3, r3
 800f354:	461a      	mov	r2, r3
 800f356:	4b13      	ldr	r3, [pc, #76]	; (800f3a4 <FATFS_LinkDriverEx+0x94>)
 800f358:	4413      	add	r3, r2
 800f35a:	79fa      	ldrb	r2, [r7, #7]
 800f35c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f35e:	4b11      	ldr	r3, [pc, #68]	; (800f3a4 <FATFS_LinkDriverEx+0x94>)
 800f360:	7a5b      	ldrb	r3, [r3, #9]
 800f362:	b2db      	uxtb	r3, r3
 800f364:	1c5a      	adds	r2, r3, #1
 800f366:	b2d1      	uxtb	r1, r2
 800f368:	4a0e      	ldr	r2, [pc, #56]	; (800f3a4 <FATFS_LinkDriverEx+0x94>)
 800f36a:	7251      	strb	r1, [r2, #9]
 800f36c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f36e:	7dbb      	ldrb	r3, [r7, #22]
 800f370:	3330      	adds	r3, #48	; 0x30
 800f372:	b2da      	uxtb	r2, r3
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f378:	68bb      	ldr	r3, [r7, #8]
 800f37a:	3301      	adds	r3, #1
 800f37c:	223a      	movs	r2, #58	; 0x3a
 800f37e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	3302      	adds	r3, #2
 800f384:	222f      	movs	r2, #47	; 0x2f
 800f386:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	3303      	adds	r3, #3
 800f38c:	2200      	movs	r2, #0
 800f38e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f390:	2300      	movs	r3, #0
 800f392:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f394:	7dfb      	ldrb	r3, [r7, #23]
}
 800f396:	4618      	mov	r0, r3
 800f398:	371c      	adds	r7, #28
 800f39a:	46bd      	mov	sp, r7
 800f39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a0:	4770      	bx	lr
 800f3a2:	bf00      	nop
 800f3a4:	20012ed8 	.word	0x20012ed8

0800f3a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b082      	sub	sp, #8
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	6839      	ldr	r1, [r7, #0]
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f7ff ffaa 	bl	800f310 <FATFS_LinkDriverEx>
 800f3bc:	4603      	mov	r3, r0
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3708      	adds	r7, #8
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}

0800f3c6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f3c6:	b480      	push	{r7}
 800f3c8:	b085      	sub	sp, #20
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f3d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f3d8:	2b84      	cmp	r3, #132	; 0x84
 800f3da:	d005      	beq.n	800f3e8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f3dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	4413      	add	r3, r2
 800f3e4:	3303      	adds	r3, #3
 800f3e6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3714      	adds	r7, #20
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f4:	4770      	bx	lr

0800f3f6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f3f6:	b480      	push	{r7}
 800f3f8:	b083      	sub	sp, #12
 800f3fa:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3fc:	f3ef 8305 	mrs	r3, IPSR
 800f400:	607b      	str	r3, [r7, #4]
  return(result);
 800f402:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f404:	2b00      	cmp	r3, #0
 800f406:	bf14      	ite	ne
 800f408:	2301      	movne	r3, #1
 800f40a:	2300      	moveq	r3, #0
 800f40c:	b2db      	uxtb	r3, r3
}
 800f40e:	4618      	mov	r0, r3
 800f410:	370c      	adds	r7, #12
 800f412:	46bd      	mov	sp, r7
 800f414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f418:	4770      	bx	lr

0800f41a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f41a:	b580      	push	{r7, lr}
 800f41c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f41e:	f001 fe25 	bl	801106c <vTaskStartScheduler>
  
  return osOK;
 800f422:	2300      	movs	r3, #0
}
 800f424:	4618      	mov	r0, r3
 800f426:	bd80      	pop	{r7, pc}

0800f428 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800f42c:	f002 fa64 	bl	80118f8 <xTaskGetSchedulerState>
 800f430:	4603      	mov	r3, r0
 800f432:	2b01      	cmp	r3, #1
 800f434:	d101      	bne.n	800f43a <osKernelRunning+0x12>
    return 0;
 800f436:	2300      	movs	r3, #0
 800f438:	e000      	b.n	800f43c <osKernelRunning+0x14>
  else
    return 1;
 800f43a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	bd80      	pop	{r7, pc}

0800f440 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800f444:	f7ff ffd7 	bl	800f3f6 <inHandlerMode>
 800f448:	4603      	mov	r3, r0
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d003      	beq.n	800f456 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800f44e:	f001 ff2b 	bl	80112a8 <xTaskGetTickCountFromISR>
 800f452:	4603      	mov	r3, r0
 800f454:	e002      	b.n	800f45c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800f456:	f001 ff17 	bl	8011288 <xTaskGetTickCount>
 800f45a:	4603      	mov	r3, r0
  }
}
 800f45c:	4618      	mov	r0, r3
 800f45e:	bd80      	pop	{r7, pc}

0800f460 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f460:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f462:	b089      	sub	sp, #36	; 0x24
 800f464:	af04      	add	r7, sp, #16
 800f466:	6078      	str	r0, [r7, #4]
 800f468:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	695b      	ldr	r3, [r3, #20]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d020      	beq.n	800f4b4 <osThreadCreate+0x54>
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	699b      	ldr	r3, [r3, #24]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d01c      	beq.n	800f4b4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	685c      	ldr	r4, [r3, #4]
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681d      	ldr	r5, [r3, #0]
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	691e      	ldr	r6, [r3, #16]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f48c:	4618      	mov	r0, r3
 800f48e:	f7ff ff9a 	bl	800f3c6 <makeFreeRtosPriority>
 800f492:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	695b      	ldr	r3, [r3, #20]
 800f498:	687a      	ldr	r2, [r7, #4]
 800f49a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f49c:	9202      	str	r2, [sp, #8]
 800f49e:	9301      	str	r3, [sp, #4]
 800f4a0:	9100      	str	r1, [sp, #0]
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	4632      	mov	r2, r6
 800f4a6:	4629      	mov	r1, r5
 800f4a8:	4620      	mov	r0, r4
 800f4aa:	f001 fc1b 	bl	8010ce4 <xTaskCreateStatic>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	60fb      	str	r3, [r7, #12]
 800f4b2:	e01c      	b.n	800f4ee <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	685c      	ldr	r4, [r3, #4]
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f4c0:	b29e      	uxth	r6, r3
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7ff ff7c 	bl	800f3c6 <makeFreeRtosPriority>
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	f107 030c 	add.w	r3, r7, #12
 800f4d4:	9301      	str	r3, [sp, #4]
 800f4d6:	9200      	str	r2, [sp, #0]
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	4632      	mov	r2, r6
 800f4dc:	4629      	mov	r1, r5
 800f4de:	4620      	mov	r0, r4
 800f4e0:	f001 fc5a 	bl	8010d98 <xTaskCreate>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	2b01      	cmp	r3, #1
 800f4e8:	d001      	beq.n	800f4ee <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	e000      	b.n	800f4f0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3714      	adds	r7, #20
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f4f8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b084      	sub	sp, #16
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d001      	beq.n	800f50e <osDelay+0x16>
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	e000      	b.n	800f510 <osDelay+0x18>
 800f50e:	2301      	movs	r3, #1
 800f510:	4618      	mov	r0, r3
 800f512:	f001 fd77 	bl	8011004 <vTaskDelay>
  
  return osOK;
 800f516:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f518:	4618      	mov	r0, r3
 800f51a:	3710      	adds	r7, #16
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}

0800f520 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b086      	sub	sp, #24
 800f524:	af02      	add	r7, sp, #8
 800f526:	60f8      	str	r0, [r7, #12]
 800f528:	460b      	mov	r3, r1
 800f52a:	607a      	str	r2, [r7, #4]
 800f52c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	685b      	ldr	r3, [r3, #4]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d013      	beq.n	800f55e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800f536:	7afb      	ldrb	r3, [r7, #11]
 800f538:	2b01      	cmp	r3, #1
 800f53a:	d101      	bne.n	800f540 <osTimerCreate+0x20>
 800f53c:	2101      	movs	r1, #1
 800f53e:	e000      	b.n	800f542 <osTimerCreate+0x22>
 800f540:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800f546:	68fa      	ldr	r2, [r7, #12]
 800f548:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800f54a:	9201      	str	r2, [sp, #4]
 800f54c:	9300      	str	r3, [sp, #0]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	460a      	mov	r2, r1
 800f552:	2101      	movs	r1, #1
 800f554:	480b      	ldr	r0, [pc, #44]	; (800f584 <osTimerCreate+0x64>)
 800f556:	f002 fc6c 	bl	8011e32 <xTimerCreateStatic>
 800f55a:	4603      	mov	r3, r0
 800f55c:	e00e      	b.n	800f57c <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800f55e:	7afb      	ldrb	r3, [r7, #11]
 800f560:	2b01      	cmp	r3, #1
 800f562:	d101      	bne.n	800f568 <osTimerCreate+0x48>
 800f564:	2201      	movs	r2, #1
 800f566:	e000      	b.n	800f56a <osTimerCreate+0x4a>
 800f568:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 800f56e:	9300      	str	r3, [sp, #0]
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2101      	movs	r1, #1
 800f574:	4803      	ldr	r0, [pc, #12]	; (800f584 <osTimerCreate+0x64>)
 800f576:	f002 fc3b 	bl	8011df0 <xTimerCreate>
 800f57a:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 800f57c:	4618      	mov	r0, r3
 800f57e:	3710      	adds	r7, #16
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}
 800f584:	08027d6c 	.word	0x08027d6c

0800f588 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b088      	sub	sp, #32
 800f58c:	af02      	add	r7, sp, #8
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800f592:	2300      	movs	r3, #0
 800f594:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800f596:	2300      	movs	r3, #0
 800f598:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 800f59e:	693b      	ldr	r3, [r7, #16]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d101      	bne.n	800f5a8 <osTimerStart+0x20>
    ticks = 1;
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800f5a8:	f7ff ff25 	bl	800f3f6 <inHandlerMode>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d01b      	beq.n	800f5ea <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800f5b2:	f107 020c 	add.w	r2, r7, #12
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	9300      	str	r3, [sp, #0]
 800f5ba:	4613      	mov	r3, r2
 800f5bc:	693a      	ldr	r2, [r7, #16]
 800f5be:	2109      	movs	r1, #9
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f002 fcad 	bl	8011f20 <xTimerGenericCommand>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	2b01      	cmp	r3, #1
 800f5ca:	d002      	beq.n	800f5d2 <osTimerStart+0x4a>
    {
      result = osErrorOS;
 800f5cc:	23ff      	movs	r3, #255	; 0xff
 800f5ce:	617b      	str	r3, [r7, #20]
 800f5d0:	e018      	b.n	800f604 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d015      	beq.n	800f604 <osTimerStart+0x7c>
 800f5d8:	4b0d      	ldr	r3, [pc, #52]	; (800f610 <osTimerStart+0x88>)
 800f5da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5de:	601a      	str	r2, [r3, #0]
 800f5e0:	f3bf 8f4f 	dsb	sy
 800f5e4:	f3bf 8f6f 	isb	sy
 800f5e8:	e00c      	b.n	800f604 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	9300      	str	r3, [sp, #0]
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	693a      	ldr	r2, [r7, #16]
 800f5f2:	2104      	movs	r1, #4
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f002 fc93 	bl	8011f20 <xTimerGenericCommand>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	2b01      	cmp	r3, #1
 800f5fe:	d001      	beq.n	800f604 <osTimerStart+0x7c>
      result = osErrorOS;
 800f600:	23ff      	movs	r3, #255	; 0xff
 800f602:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800f604:	697b      	ldr	r3, [r7, #20]
}
 800f606:	4618      	mov	r0, r3
 800f608:	3718      	adds	r7, #24
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}
 800f60e:	bf00      	nop
 800f610:	e000ed04 	.word	0xe000ed04

0800f614 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b086      	sub	sp, #24
 800f618:	af02      	add	r7, sp, #8
 800f61a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f61c:	2300      	movs	r3, #0
 800f61e:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800f620:	2300      	movs	r3, #0
 800f622:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 800f624:	f7ff fee7 	bl	800f3f6 <inHandlerMode>
 800f628:	4603      	mov	r3, r0
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d01a      	beq.n	800f664 <osTimerStop+0x50>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 800f62e:	f107 0208 	add.w	r2, r7, #8
 800f632:	2300      	movs	r3, #0
 800f634:	9300      	str	r3, [sp, #0]
 800f636:	4613      	mov	r3, r2
 800f638:	2200      	movs	r2, #0
 800f63a:	2108      	movs	r1, #8
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f002 fc6f 	bl	8011f20 <xTimerGenericCommand>
 800f642:	4603      	mov	r3, r0
 800f644:	2b01      	cmp	r3, #1
 800f646:	d001      	beq.n	800f64c <osTimerStop+0x38>
      return osErrorOS;
 800f648:	23ff      	movs	r3, #255	; 0xff
 800f64a:	e019      	b.n	800f680 <osTimerStop+0x6c>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d015      	beq.n	800f67e <osTimerStop+0x6a>
 800f652:	4b0d      	ldr	r3, [pc, #52]	; (800f688 <osTimerStop+0x74>)
 800f654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f658:	601a      	str	r2, [r3, #0]
 800f65a:	f3bf 8f4f 	dsb	sy
 800f65e:	f3bf 8f6f 	isb	sy
 800f662:	e00c      	b.n	800f67e <osTimerStop+0x6a>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 800f664:	2300      	movs	r3, #0
 800f666:	9300      	str	r3, [sp, #0]
 800f668:	2300      	movs	r3, #0
 800f66a:	2200      	movs	r2, #0
 800f66c:	2103      	movs	r1, #3
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f002 fc56 	bl	8011f20 <xTimerGenericCommand>
 800f674:	4603      	mov	r3, r0
 800f676:	2b01      	cmp	r3, #1
 800f678:	d001      	beq.n	800f67e <osTimerStop+0x6a>
      result = osErrorOS;
 800f67a:	23ff      	movs	r3, #255	; 0xff
 800f67c:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 800f67e:	68fb      	ldr	r3, [r7, #12]
}
 800f680:	4618      	mov	r0, r3
 800f682:	3710      	adds	r7, #16
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}
 800f688:	e000ed04 	.word	0xe000ed04

0800f68c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b082      	sub	sp, #8
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	685b      	ldr	r3, [r3, #4]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d007      	beq.n	800f6ac <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	685b      	ldr	r3, [r3, #4]
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	2001      	movs	r0, #1
 800f6a4:	f000 fc7f 	bl	800ffa6 <xQueueCreateMutexStatic>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	e003      	b.n	800f6b4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800f6ac:	2001      	movs	r0, #1
 800f6ae:	f000 fc62 	bl	800ff76 <xQueueCreateMutex>
 800f6b2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3708      	adds	r7, #8
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b084      	sub	sp, #16
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
 800f6c4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d101      	bne.n	800f6d4 <osMutexWait+0x18>
    return osErrorParameter;
 800f6d0:	2380      	movs	r3, #128	; 0x80
 800f6d2:	e03a      	b.n	800f74a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f6de:	d103      	bne.n	800f6e8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800f6e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f6e4:	60fb      	str	r3, [r7, #12]
 800f6e6:	e009      	b.n	800f6fc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d006      	beq.n	800f6fc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d101      	bne.n	800f6fc <osMutexWait+0x40>
      ticks = 1;
 800f6f8:	2301      	movs	r3, #1
 800f6fa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f6fc:	f7ff fe7b 	bl	800f3f6 <inHandlerMode>
 800f700:	4603      	mov	r3, r0
 800f702:	2b00      	cmp	r3, #0
 800f704:	d017      	beq.n	800f736 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800f706:	f107 0308 	add.w	r3, r7, #8
 800f70a:	461a      	mov	r2, r3
 800f70c:	2100      	movs	r1, #0
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f001 f860 	bl	80107d4 <xQueueReceiveFromISR>
 800f714:	4603      	mov	r3, r0
 800f716:	2b01      	cmp	r3, #1
 800f718:	d001      	beq.n	800f71e <osMutexWait+0x62>
      return osErrorOS;
 800f71a:	23ff      	movs	r3, #255	; 0xff
 800f71c:	e015      	b.n	800f74a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d011      	beq.n	800f748 <osMutexWait+0x8c>
 800f724:	4b0b      	ldr	r3, [pc, #44]	; (800f754 <osMutexWait+0x98>)
 800f726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f72a:	601a      	str	r2, [r3, #0]
 800f72c:	f3bf 8f4f 	dsb	sy
 800f730:	f3bf 8f6f 	isb	sy
 800f734:	e008      	b.n	800f748 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800f736:	68f9      	ldr	r1, [r7, #12]
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f000 ff43 	bl	80105c4 <xQueueSemaphoreTake>
 800f73e:	4603      	mov	r3, r0
 800f740:	2b01      	cmp	r3, #1
 800f742:	d001      	beq.n	800f748 <osMutexWait+0x8c>
    return osErrorOS;
 800f744:	23ff      	movs	r3, #255	; 0xff
 800f746:	e000      	b.n	800f74a <osMutexWait+0x8e>
  }
  
  return osOK;
 800f748:	2300      	movs	r3, #0
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3710      	adds	r7, #16
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}
 800f752:	bf00      	nop
 800f754:	e000ed04 	.word	0xe000ed04

0800f758 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b084      	sub	sp, #16
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f760:	2300      	movs	r3, #0
 800f762:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f764:	2300      	movs	r3, #0
 800f766:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800f768:	f7ff fe45 	bl	800f3f6 <inHandlerMode>
 800f76c:	4603      	mov	r3, r0
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d016      	beq.n	800f7a0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800f772:	f107 0308 	add.w	r3, r7, #8
 800f776:	4619      	mov	r1, r3
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f000 fdbd 	bl	80102f8 <xQueueGiveFromISR>
 800f77e:	4603      	mov	r3, r0
 800f780:	2b01      	cmp	r3, #1
 800f782:	d001      	beq.n	800f788 <osMutexRelease+0x30>
      return osErrorOS;
 800f784:	23ff      	movs	r3, #255	; 0xff
 800f786:	e017      	b.n	800f7b8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d013      	beq.n	800f7b6 <osMutexRelease+0x5e>
 800f78e:	4b0c      	ldr	r3, [pc, #48]	; (800f7c0 <osMutexRelease+0x68>)
 800f790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f794:	601a      	str	r2, [r3, #0]
 800f796:	f3bf 8f4f 	dsb	sy
 800f79a:	f3bf 8f6f 	isb	sy
 800f79e:	e00a      	b.n	800f7b6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	2100      	movs	r1, #0
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f000 fc18 	bl	800ffdc <xQueueGenericSend>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	2b01      	cmp	r3, #1
 800f7b0:	d001      	beq.n	800f7b6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800f7b2:	23ff      	movs	r3, #255	; 0xff
 800f7b4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
}
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3710      	adds	r7, #16
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}
 800f7c0:	e000ed04 	.word	0xe000ed04

0800f7c4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b086      	sub	sp, #24
 800f7c8:	af02      	add	r7, sp, #8
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	685b      	ldr	r3, [r3, #4]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d010      	beq.n	800f7f8 <osSemaphoreCreate+0x34>
    if (count == 1) {
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	2b01      	cmp	r3, #1
 800f7da:	d10b      	bne.n	800f7f4 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	685a      	ldr	r2, [r3, #4]
 800f7e0:	2303      	movs	r3, #3
 800f7e2:	9300      	str	r3, [sp, #0]
 800f7e4:	4613      	mov	r3, r2
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	2100      	movs	r1, #0
 800f7ea:	2001      	movs	r0, #1
 800f7ec:	f000 fad8 	bl	800fda0 <xQueueGenericCreateStatic>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	e016      	b.n	800f822 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	e014      	b.n	800f822 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	2b01      	cmp	r3, #1
 800f7fc:	d110      	bne.n	800f820 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800f7fe:	2203      	movs	r2, #3
 800f800:	2100      	movs	r1, #0
 800f802:	2001      	movs	r0, #1
 800f804:	f000 fb3f 	bl	800fe86 <xQueueGenericCreate>
 800f808:	60f8      	str	r0, [r7, #12]
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d005      	beq.n	800f81c <osSemaphoreCreate+0x58>
 800f810:	2300      	movs	r3, #0
 800f812:	2200      	movs	r2, #0
 800f814:	2100      	movs	r1, #0
 800f816:	68f8      	ldr	r0, [r7, #12]
 800f818:	f000 fbe0 	bl	800ffdc <xQueueGenericSend>
      return sema;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	e000      	b.n	800f822 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800f820:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800f822:	4618      	mov	r0, r3
 800f824:	3710      	adds	r7, #16
 800f826:	46bd      	mov	sp, r7
 800f828:	bd80      	pop	{r7, pc}
	...

0800f82c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b084      	sub	sp, #16
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
 800f834:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f836:	2300      	movs	r3, #0
 800f838:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d101      	bne.n	800f844 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800f840:	2380      	movs	r3, #128	; 0x80
 800f842:	e03a      	b.n	800f8ba <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800f844:	2300      	movs	r3, #0
 800f846:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f84e:	d103      	bne.n	800f858 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800f850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f854:	60fb      	str	r3, [r7, #12]
 800f856:	e009      	b.n	800f86c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d006      	beq.n	800f86c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d101      	bne.n	800f86c <osSemaphoreWait+0x40>
      ticks = 1;
 800f868:	2301      	movs	r3, #1
 800f86a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f86c:	f7ff fdc3 	bl	800f3f6 <inHandlerMode>
 800f870:	4603      	mov	r3, r0
 800f872:	2b00      	cmp	r3, #0
 800f874:	d017      	beq.n	800f8a6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f876:	f107 0308 	add.w	r3, r7, #8
 800f87a:	461a      	mov	r2, r3
 800f87c:	2100      	movs	r1, #0
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f000 ffa8 	bl	80107d4 <xQueueReceiveFromISR>
 800f884:	4603      	mov	r3, r0
 800f886:	2b01      	cmp	r3, #1
 800f888:	d001      	beq.n	800f88e <osSemaphoreWait+0x62>
      return osErrorOS;
 800f88a:	23ff      	movs	r3, #255	; 0xff
 800f88c:	e015      	b.n	800f8ba <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d011      	beq.n	800f8b8 <osSemaphoreWait+0x8c>
 800f894:	4b0b      	ldr	r3, [pc, #44]	; (800f8c4 <osSemaphoreWait+0x98>)
 800f896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f89a:	601a      	str	r2, [r3, #0]
 800f89c:	f3bf 8f4f 	dsb	sy
 800f8a0:	f3bf 8f6f 	isb	sy
 800f8a4:	e008      	b.n	800f8b8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800f8a6:	68f9      	ldr	r1, [r7, #12]
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f000 fe8b 	bl	80105c4 <xQueueSemaphoreTake>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	2b01      	cmp	r3, #1
 800f8b2:	d001      	beq.n	800f8b8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800f8b4:	23ff      	movs	r3, #255	; 0xff
 800f8b6:	e000      	b.n	800f8ba <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800f8b8:	2300      	movs	r3, #0
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	3710      	adds	r7, #16
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}
 800f8c2:	bf00      	nop
 800f8c4:	e000ed04 	.word	0xe000ed04

0800f8c8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b084      	sub	sp, #16
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800f8d8:	f7ff fd8d 	bl	800f3f6 <inHandlerMode>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d016      	beq.n	800f910 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f8e2:	f107 0308 	add.w	r3, r7, #8
 800f8e6:	4619      	mov	r1, r3
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f000 fd05 	bl	80102f8 <xQueueGiveFromISR>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	2b01      	cmp	r3, #1
 800f8f2:	d001      	beq.n	800f8f8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800f8f4:	23ff      	movs	r3, #255	; 0xff
 800f8f6:	e017      	b.n	800f928 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d013      	beq.n	800f926 <osSemaphoreRelease+0x5e>
 800f8fe:	4b0c      	ldr	r3, [pc, #48]	; (800f930 <osSemaphoreRelease+0x68>)
 800f900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f904:	601a      	str	r2, [r3, #0]
 800f906:	f3bf 8f4f 	dsb	sy
 800f90a:	f3bf 8f6f 	isb	sy
 800f90e:	e00a      	b.n	800f926 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800f910:	2300      	movs	r3, #0
 800f912:	2200      	movs	r2, #0
 800f914:	2100      	movs	r1, #0
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	f000 fb60 	bl	800ffdc <xQueueGenericSend>
 800f91c:	4603      	mov	r3, r0
 800f91e:	2b01      	cmp	r3, #1
 800f920:	d001      	beq.n	800f926 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800f922:	23ff      	movs	r3, #255	; 0xff
 800f924:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800f926:	68fb      	ldr	r3, [r7, #12]
}
 800f928:	4618      	mov	r0, r3
 800f92a:	3710      	adds	r7, #16
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd80      	pop	{r7, pc}
 800f930:	e000ed04 	.word	0xe000ed04

0800f934 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b082      	sub	sp, #8
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800f93c:	f7ff fd5b 	bl	800f3f6 <inHandlerMode>
 800f940:	4603      	mov	r3, r0
 800f942:	2b00      	cmp	r3, #0
 800f944:	d001      	beq.n	800f94a <osSemaphoreDelete+0x16>
    return osErrorISR;
 800f946:	2382      	movs	r3, #130	; 0x82
 800f948:	e003      	b.n	800f952 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f000 fff9 	bl	8010942 <vQueueDelete>

  return osOK; 
 800f950:	2300      	movs	r3, #0
}
 800f952:	4618      	mov	r0, r3
 800f954:	3708      	adds	r7, #8
 800f956:	46bd      	mov	sp, r7
 800f958:	bd80      	pop	{r7, pc}

0800f95a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800f95a:	b590      	push	{r4, r7, lr}
 800f95c:	b085      	sub	sp, #20
 800f95e:	af02      	add	r7, sp, #8
 800f960:	6078      	str	r0, [r7, #4]
 800f962:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	689b      	ldr	r3, [r3, #8]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d012      	beq.n	800f992 <osMessageCreate+0x38>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	68db      	ldr	r3, [r3, #12]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d00e      	beq.n	800f992 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6818      	ldr	r0, [r3, #0]
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	6859      	ldr	r1, [r3, #4]
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	689a      	ldr	r2, [r3, #8]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	68dc      	ldr	r4, [r3, #12]
 800f984:	2300      	movs	r3, #0
 800f986:	9300      	str	r3, [sp, #0]
 800f988:	4623      	mov	r3, r4
 800f98a:	f000 fa09 	bl	800fda0 <xQueueGenericCreateStatic>
 800f98e:	4603      	mov	r3, r0
 800f990:	e008      	b.n	800f9a4 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	6818      	ldr	r0, [r3, #0]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	685b      	ldr	r3, [r3, #4]
 800f99a:	2200      	movs	r2, #0
 800f99c:	4619      	mov	r1, r3
 800f99e:	f000 fa72 	bl	800fe86 <xQueueGenericCreate>
 800f9a2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	370c      	adds	r7, #12
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd90      	pop	{r4, r7, pc}

0800f9ac <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b086      	sub	sp, #24
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	60f8      	str	r0, [r7, #12]
 800f9b4:	60b9      	str	r1, [r7, #8]
 800f9b6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800f9c0:	697b      	ldr	r3, [r7, #20]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d101      	bne.n	800f9ca <osMessagePut+0x1e>
    ticks = 1;
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800f9ca:	f7ff fd14 	bl	800f3f6 <inHandlerMode>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d018      	beq.n	800fa06 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800f9d4:	f107 0210 	add.w	r2, r7, #16
 800f9d8:	f107 0108 	add.w	r1, r7, #8
 800f9dc:	2300      	movs	r3, #0
 800f9de:	68f8      	ldr	r0, [r7, #12]
 800f9e0:	f000 fbf6 	bl	80101d0 <xQueueGenericSendFromISR>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	2b01      	cmp	r3, #1
 800f9e8:	d001      	beq.n	800f9ee <osMessagePut+0x42>
      return osErrorOS;
 800f9ea:	23ff      	movs	r3, #255	; 0xff
 800f9ec:	e018      	b.n	800fa20 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f9ee:	693b      	ldr	r3, [r7, #16]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d014      	beq.n	800fa1e <osMessagePut+0x72>
 800f9f4:	4b0c      	ldr	r3, [pc, #48]	; (800fa28 <osMessagePut+0x7c>)
 800f9f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9fa:	601a      	str	r2, [r3, #0]
 800f9fc:	f3bf 8f4f 	dsb	sy
 800fa00:	f3bf 8f6f 	isb	sy
 800fa04:	e00b      	b.n	800fa1e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800fa06:	f107 0108 	add.w	r1, r7, #8
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	697a      	ldr	r2, [r7, #20]
 800fa0e:	68f8      	ldr	r0, [r7, #12]
 800fa10:	f000 fae4 	bl	800ffdc <xQueueGenericSend>
 800fa14:	4603      	mov	r3, r0
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	d001      	beq.n	800fa1e <osMessagePut+0x72>
      return osErrorOS;
 800fa1a:	23ff      	movs	r3, #255	; 0xff
 800fa1c:	e000      	b.n	800fa20 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800fa1e:	2300      	movs	r3, #0
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	3718      	adds	r7, #24
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}
 800fa28:	e000ed04 	.word	0xe000ed04

0800fa2c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800fa2c:	b590      	push	{r4, r7, lr}
 800fa2e:	b08b      	sub	sp, #44	; 0x2c
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	60f8      	str	r0, [r7, #12]
 800fa34:	60b9      	str	r1, [r7, #8]
 800fa36:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800fa38:	68bb      	ldr	r3, [r7, #8]
 800fa3a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d10a      	bne.n	800fa5c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800fa46:	2380      	movs	r3, #128	; 0x80
 800fa48:	617b      	str	r3, [r7, #20]
    return event;
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	461c      	mov	r4, r3
 800fa4e:	f107 0314 	add.w	r3, r7, #20
 800fa52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fa56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fa5a:	e054      	b.n	800fb06 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800fa60:	2300      	movs	r3, #0
 800fa62:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa6a:	d103      	bne.n	800fa74 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800fa6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fa70:	627b      	str	r3, [r7, #36]	; 0x24
 800fa72:	e009      	b.n	800fa88 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d006      	beq.n	800fa88 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800fa7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d101      	bne.n	800fa88 <osMessageGet+0x5c>
      ticks = 1;
 800fa84:	2301      	movs	r3, #1
 800fa86:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800fa88:	f7ff fcb5 	bl	800f3f6 <inHandlerMode>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d01c      	beq.n	800facc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800fa92:	f107 0220 	add.w	r2, r7, #32
 800fa96:	f107 0314 	add.w	r3, r7, #20
 800fa9a:	3304      	adds	r3, #4
 800fa9c:	4619      	mov	r1, r3
 800fa9e:	68b8      	ldr	r0, [r7, #8]
 800faa0:	f000 fe98 	bl	80107d4 <xQueueReceiveFromISR>
 800faa4:	4603      	mov	r3, r0
 800faa6:	2b01      	cmp	r3, #1
 800faa8:	d102      	bne.n	800fab0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800faaa:	2310      	movs	r3, #16
 800faac:	617b      	str	r3, [r7, #20]
 800faae:	e001      	b.n	800fab4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800fab0:	2300      	movs	r3, #0
 800fab2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fab4:	6a3b      	ldr	r3, [r7, #32]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d01d      	beq.n	800faf6 <osMessageGet+0xca>
 800faba:	4b15      	ldr	r3, [pc, #84]	; (800fb10 <osMessageGet+0xe4>)
 800fabc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fac0:	601a      	str	r2, [r3, #0]
 800fac2:	f3bf 8f4f 	dsb	sy
 800fac6:	f3bf 8f6f 	isb	sy
 800faca:	e014      	b.n	800faf6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800facc:	f107 0314 	add.w	r3, r7, #20
 800fad0:	3304      	adds	r3, #4
 800fad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fad4:	4619      	mov	r1, r3
 800fad6:	68b8      	ldr	r0, [r7, #8]
 800fad8:	f000 fc98 	bl	801040c <xQueueReceive>
 800fadc:	4603      	mov	r3, r0
 800fade:	2b01      	cmp	r3, #1
 800fae0:	d102      	bne.n	800fae8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800fae2:	2310      	movs	r3, #16
 800fae4:	617b      	str	r3, [r7, #20]
 800fae6:	e006      	b.n	800faf6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800fae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faea:	2b00      	cmp	r3, #0
 800faec:	d101      	bne.n	800faf2 <osMessageGet+0xc6>
 800faee:	2300      	movs	r3, #0
 800faf0:	e000      	b.n	800faf4 <osMessageGet+0xc8>
 800faf2:	2340      	movs	r3, #64	; 0x40
 800faf4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	461c      	mov	r4, r3
 800fafa:	f107 0314 	add.w	r3, r7, #20
 800fafe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fb02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800fb06:	68f8      	ldr	r0, [r7, #12]
 800fb08:	372c      	adds	r7, #44	; 0x2c
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd90      	pop	{r4, r7, pc}
 800fb0e:	bf00      	nop
 800fb10:	e000ed04 	.word	0xe000ed04

0800fb14 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b082      	sub	sp, #8
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800fb1c:	f7ff fc6b 	bl	800f3f6 <inHandlerMode>
 800fb20:	4603      	mov	r3, r0
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d004      	beq.n	800fb30 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f000 feee 	bl	8010908 <uxQueueMessagesWaitingFromISR>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	e003      	b.n	800fb38 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f000 fecc 	bl	80108ce <uxQueueMessagesWaiting>
 800fb36:	4603      	mov	r3, r0
  }
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3708      	adds	r7, #8
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}

0800fb40 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b082      	sub	sp, #8
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800fb48:	f7ff fc55 	bl	800f3f6 <inHandlerMode>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d001      	beq.n	800fb56 <osMessageDelete+0x16>
    return osErrorISR;
 800fb52:	2382      	movs	r3, #130	; 0x82
 800fb54:	e003      	b.n	800fb5e <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f000 fef3 	bl	8010942 <vQueueDelete>

  return osOK; 
 800fb5c:	2300      	movs	r3, #0
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3708      	adds	r7, #8
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}

0800fb66 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fb66:	b480      	push	{r7}
 800fb68:	b083      	sub	sp, #12
 800fb6a:	af00      	add	r7, sp, #0
 800fb6c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	f103 0208 	add.w	r2, r3, #8
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb7e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f103 0208 	add.w	r2, r3, #8
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f103 0208 	add.w	r2, r3, #8
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2200      	movs	r2, #0
 800fb98:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fb9a:	bf00      	nop
 800fb9c:	370c      	adds	r7, #12
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba4:	4770      	bx	lr

0800fba6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fba6:	b480      	push	{r7}
 800fba8:	b083      	sub	sp, #12
 800fbaa:	af00      	add	r7, sp, #0
 800fbac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fbb4:	bf00      	nop
 800fbb6:	370c      	adds	r7, #12
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbe:	4770      	bx	lr

0800fbc0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fbc0:	b480      	push	{r7}
 800fbc2:	b085      	sub	sp, #20
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	685b      	ldr	r3, [r3, #4]
 800fbce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	68fa      	ldr	r2, [r7, #12]
 800fbd4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	689a      	ldr	r2, [r3, #8]
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	689b      	ldr	r3, [r3, #8]
 800fbe2:	683a      	ldr	r2, [r7, #0]
 800fbe4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	683a      	ldr	r2, [r7, #0]
 800fbea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	687a      	ldr	r2, [r7, #4]
 800fbf0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	1c5a      	adds	r2, r3, #1
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	601a      	str	r2, [r3, #0]
}
 800fbfc:	bf00      	nop
 800fbfe:	3714      	adds	r7, #20
 800fc00:	46bd      	mov	sp, r7
 800fc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc06:	4770      	bx	lr

0800fc08 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fc08:	b480      	push	{r7}
 800fc0a:	b085      	sub	sp, #20
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc1e:	d103      	bne.n	800fc28 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	691b      	ldr	r3, [r3, #16]
 800fc24:	60fb      	str	r3, [r7, #12]
 800fc26:	e00c      	b.n	800fc42 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	3308      	adds	r3, #8
 800fc2c:	60fb      	str	r3, [r7, #12]
 800fc2e:	e002      	b.n	800fc36 <vListInsert+0x2e>
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	685b      	ldr	r3, [r3, #4]
 800fc34:	60fb      	str	r3, [r7, #12]
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	685b      	ldr	r3, [r3, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	68ba      	ldr	r2, [r7, #8]
 800fc3e:	429a      	cmp	r2, r3
 800fc40:	d2f6      	bcs.n	800fc30 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	685a      	ldr	r2, [r3, #4]
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	685b      	ldr	r3, [r3, #4]
 800fc4e:	683a      	ldr	r2, [r7, #0]
 800fc50:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	68fa      	ldr	r2, [r7, #12]
 800fc56:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	683a      	ldr	r2, [r7, #0]
 800fc5c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	687a      	ldr	r2, [r7, #4]
 800fc62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	1c5a      	adds	r2, r3, #1
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	601a      	str	r2, [r3, #0]
}
 800fc6e:	bf00      	nop
 800fc70:	3714      	adds	r7, #20
 800fc72:	46bd      	mov	sp, r7
 800fc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc78:	4770      	bx	lr

0800fc7a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fc7a:	b480      	push	{r7}
 800fc7c:	b085      	sub	sp, #20
 800fc7e:	af00      	add	r7, sp, #0
 800fc80:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	691b      	ldr	r3, [r3, #16]
 800fc86:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	685b      	ldr	r3, [r3, #4]
 800fc8c:	687a      	ldr	r2, [r7, #4]
 800fc8e:	6892      	ldr	r2, [r2, #8]
 800fc90:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	689b      	ldr	r3, [r3, #8]
 800fc96:	687a      	ldr	r2, [r7, #4]
 800fc98:	6852      	ldr	r2, [r2, #4]
 800fc9a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	685b      	ldr	r3, [r3, #4]
 800fca0:	687a      	ldr	r2, [r7, #4]
 800fca2:	429a      	cmp	r2, r3
 800fca4:	d103      	bne.n	800fcae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	689a      	ldr	r2, [r3, #8]
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	1e5a      	subs	r2, r3, #1
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	681b      	ldr	r3, [r3, #0]
}
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	3714      	adds	r7, #20
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fccc:	4770      	bx	lr
	...

0800fcd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b084      	sub	sp, #16
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
 800fcd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d109      	bne.n	800fcf8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fce8:	f383 8811 	msr	BASEPRI, r3
 800fcec:	f3bf 8f6f 	isb	sy
 800fcf0:	f3bf 8f4f 	dsb	sy
 800fcf4:	60bb      	str	r3, [r7, #8]
 800fcf6:	e7fe      	b.n	800fcf6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800fcf8:	f002 fd20 	bl	801273c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	681a      	ldr	r2, [r3, #0]
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd04:	68f9      	ldr	r1, [r7, #12]
 800fd06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fd08:	fb01 f303 	mul.w	r3, r1, r3
 800fd0c:	441a      	add	r2, r3
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	2200      	movs	r2, #0
 800fd16:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	681a      	ldr	r2, [r3, #0]
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	681a      	ldr	r2, [r3, #0]
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd28:	3b01      	subs	r3, #1
 800fd2a:	68f9      	ldr	r1, [r7, #12]
 800fd2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fd2e:	fb01 f303 	mul.w	r3, r1, r3
 800fd32:	441a      	add	r2, r3
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	22ff      	movs	r2, #255	; 0xff
 800fd3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	22ff      	movs	r2, #255	; 0xff
 800fd44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d114      	bne.n	800fd78 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	691b      	ldr	r3, [r3, #16]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d01a      	beq.n	800fd8c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	3310      	adds	r3, #16
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f001 fc16 	bl	801158c <xTaskRemoveFromEventList>
 800fd60:	4603      	mov	r3, r0
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d012      	beq.n	800fd8c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fd66:	4b0d      	ldr	r3, [pc, #52]	; (800fd9c <xQueueGenericReset+0xcc>)
 800fd68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd6c:	601a      	str	r2, [r3, #0]
 800fd6e:	f3bf 8f4f 	dsb	sy
 800fd72:	f3bf 8f6f 	isb	sy
 800fd76:	e009      	b.n	800fd8c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	3310      	adds	r3, #16
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7ff fef2 	bl	800fb66 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	3324      	adds	r3, #36	; 0x24
 800fd86:	4618      	mov	r0, r3
 800fd88:	f7ff feed 	bl	800fb66 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fd8c:	f002 fd04 	bl	8012798 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fd90:	2301      	movs	r3, #1
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3710      	adds	r7, #16
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	bf00      	nop
 800fd9c:	e000ed04 	.word	0xe000ed04

0800fda0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b08e      	sub	sp, #56	; 0x38
 800fda4:	af02      	add	r7, sp, #8
 800fda6:	60f8      	str	r0, [r7, #12]
 800fda8:	60b9      	str	r1, [r7, #8]
 800fdaa:	607a      	str	r2, [r7, #4]
 800fdac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d109      	bne.n	800fdc8 <xQueueGenericCreateStatic+0x28>
 800fdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdb8:	f383 8811 	msr	BASEPRI, r3
 800fdbc:	f3bf 8f6f 	isb	sy
 800fdc0:	f3bf 8f4f 	dsb	sy
 800fdc4:	62bb      	str	r3, [r7, #40]	; 0x28
 800fdc6:	e7fe      	b.n	800fdc6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d109      	bne.n	800fde2 <xQueueGenericCreateStatic+0x42>
 800fdce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdd2:	f383 8811 	msr	BASEPRI, r3
 800fdd6:	f3bf 8f6f 	isb	sy
 800fdda:	f3bf 8f4f 	dsb	sy
 800fdde:	627b      	str	r3, [r7, #36]	; 0x24
 800fde0:	e7fe      	b.n	800fde0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d002      	beq.n	800fdee <xQueueGenericCreateStatic+0x4e>
 800fde8:	68bb      	ldr	r3, [r7, #8]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d001      	beq.n	800fdf2 <xQueueGenericCreateStatic+0x52>
 800fdee:	2301      	movs	r3, #1
 800fdf0:	e000      	b.n	800fdf4 <xQueueGenericCreateStatic+0x54>
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d109      	bne.n	800fe0c <xQueueGenericCreateStatic+0x6c>
 800fdf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdfc:	f383 8811 	msr	BASEPRI, r3
 800fe00:	f3bf 8f6f 	isb	sy
 800fe04:	f3bf 8f4f 	dsb	sy
 800fe08:	623b      	str	r3, [r7, #32]
 800fe0a:	e7fe      	b.n	800fe0a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d102      	bne.n	800fe18 <xQueueGenericCreateStatic+0x78>
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d101      	bne.n	800fe1c <xQueueGenericCreateStatic+0x7c>
 800fe18:	2301      	movs	r3, #1
 800fe1a:	e000      	b.n	800fe1e <xQueueGenericCreateStatic+0x7e>
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d109      	bne.n	800fe36 <xQueueGenericCreateStatic+0x96>
 800fe22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe26:	f383 8811 	msr	BASEPRI, r3
 800fe2a:	f3bf 8f6f 	isb	sy
 800fe2e:	f3bf 8f4f 	dsb	sy
 800fe32:	61fb      	str	r3, [r7, #28]
 800fe34:	e7fe      	b.n	800fe34 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fe36:	2348      	movs	r3, #72	; 0x48
 800fe38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	2b48      	cmp	r3, #72	; 0x48
 800fe3e:	d009      	beq.n	800fe54 <xQueueGenericCreateStatic+0xb4>
 800fe40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe44:	f383 8811 	msr	BASEPRI, r3
 800fe48:	f3bf 8f6f 	isb	sy
 800fe4c:	f3bf 8f4f 	dsb	sy
 800fe50:	61bb      	str	r3, [r7, #24]
 800fe52:	e7fe      	b.n	800fe52 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fe54:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fe5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d00d      	beq.n	800fe7c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fe60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe62:	2201      	movs	r2, #1
 800fe64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fe68:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fe6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe6e:	9300      	str	r3, [sp, #0]
 800fe70:	4613      	mov	r3, r2
 800fe72:	687a      	ldr	r2, [r7, #4]
 800fe74:	68b9      	ldr	r1, [r7, #8]
 800fe76:	68f8      	ldr	r0, [r7, #12]
 800fe78:	f000 f844 	bl	800ff04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fe7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3730      	adds	r7, #48	; 0x30
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}

0800fe86 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fe86:	b580      	push	{r7, lr}
 800fe88:	b08a      	sub	sp, #40	; 0x28
 800fe8a:	af02      	add	r7, sp, #8
 800fe8c:	60f8      	str	r0, [r7, #12]
 800fe8e:	60b9      	str	r1, [r7, #8]
 800fe90:	4613      	mov	r3, r2
 800fe92:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d109      	bne.n	800feae <xQueueGenericCreate+0x28>
 800fe9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe9e:	f383 8811 	msr	BASEPRI, r3
 800fea2:	f3bf 8f6f 	isb	sy
 800fea6:	f3bf 8f4f 	dsb	sy
 800feaa:	613b      	str	r3, [r7, #16]
 800feac:	e7fe      	b.n	800feac <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d102      	bne.n	800feba <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800feb4:	2300      	movs	r3, #0
 800feb6:	61fb      	str	r3, [r7, #28]
 800feb8:	e004      	b.n	800fec4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	68ba      	ldr	r2, [r7, #8]
 800febe:	fb02 f303 	mul.w	r3, r2, r3
 800fec2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fec4:	69fb      	ldr	r3, [r7, #28]
 800fec6:	3348      	adds	r3, #72	; 0x48
 800fec8:	4618      	mov	r0, r3
 800feca:	f002 fd51 	bl	8012970 <pvPortMalloc>
 800fece:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fed0:	69bb      	ldr	r3, [r7, #24]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d011      	beq.n	800fefa <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fed6:	69bb      	ldr	r3, [r7, #24]
 800fed8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	3348      	adds	r3, #72	; 0x48
 800fede:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fee0:	69bb      	ldr	r3, [r7, #24]
 800fee2:	2200      	movs	r2, #0
 800fee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fee8:	79fa      	ldrb	r2, [r7, #7]
 800feea:	69bb      	ldr	r3, [r7, #24]
 800feec:	9300      	str	r3, [sp, #0]
 800feee:	4613      	mov	r3, r2
 800fef0:	697a      	ldr	r2, [r7, #20]
 800fef2:	68b9      	ldr	r1, [r7, #8]
 800fef4:	68f8      	ldr	r0, [r7, #12]
 800fef6:	f000 f805 	bl	800ff04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fefa:	69bb      	ldr	r3, [r7, #24]
	}
 800fefc:	4618      	mov	r0, r3
 800fefe:	3720      	adds	r7, #32
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}

0800ff04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ff04:	b580      	push	{r7, lr}
 800ff06:	b084      	sub	sp, #16
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	60f8      	str	r0, [r7, #12]
 800ff0c:	60b9      	str	r1, [r7, #8]
 800ff0e:	607a      	str	r2, [r7, #4]
 800ff10:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d103      	bne.n	800ff20 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ff18:	69bb      	ldr	r3, [r7, #24]
 800ff1a:	69ba      	ldr	r2, [r7, #24]
 800ff1c:	601a      	str	r2, [r3, #0]
 800ff1e:	e002      	b.n	800ff26 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ff20:	69bb      	ldr	r3, [r7, #24]
 800ff22:	687a      	ldr	r2, [r7, #4]
 800ff24:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ff26:	69bb      	ldr	r3, [r7, #24]
 800ff28:	68fa      	ldr	r2, [r7, #12]
 800ff2a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ff2c:	69bb      	ldr	r3, [r7, #24]
 800ff2e:	68ba      	ldr	r2, [r7, #8]
 800ff30:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ff32:	2101      	movs	r1, #1
 800ff34:	69b8      	ldr	r0, [r7, #24]
 800ff36:	f7ff fecb 	bl	800fcd0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ff3a:	bf00      	nop
 800ff3c:	3710      	adds	r7, #16
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}

0800ff42 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ff42:	b580      	push	{r7, lr}
 800ff44:	b082      	sub	sp, #8
 800ff46:	af00      	add	r7, sp, #0
 800ff48:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d00e      	beq.n	800ff6e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2200      	movs	r2, #0
 800ff54:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2200      	movs	r2, #0
 800ff5a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ff62:	2300      	movs	r3, #0
 800ff64:	2200      	movs	r2, #0
 800ff66:	2100      	movs	r1, #0
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f000 f837 	bl	800ffdc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ff6e:	bf00      	nop
 800ff70:	3708      	adds	r7, #8
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}

0800ff76 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ff76:	b580      	push	{r7, lr}
 800ff78:	b086      	sub	sp, #24
 800ff7a:	af00      	add	r7, sp, #0
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ff80:	2301      	movs	r3, #1
 800ff82:	617b      	str	r3, [r7, #20]
 800ff84:	2300      	movs	r3, #0
 800ff86:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ff88:	79fb      	ldrb	r3, [r7, #7]
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	6939      	ldr	r1, [r7, #16]
 800ff8e:	6978      	ldr	r0, [r7, #20]
 800ff90:	f7ff ff79 	bl	800fe86 <xQueueGenericCreate>
 800ff94:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ff96:	68f8      	ldr	r0, [r7, #12]
 800ff98:	f7ff ffd3 	bl	800ff42 <prvInitialiseMutex>

		return xNewQueue;
 800ff9c:	68fb      	ldr	r3, [r7, #12]
	}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	3718      	adds	r7, #24
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}

0800ffa6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ffa6:	b580      	push	{r7, lr}
 800ffa8:	b088      	sub	sp, #32
 800ffaa:	af02      	add	r7, sp, #8
 800ffac:	4603      	mov	r3, r0
 800ffae:	6039      	str	r1, [r7, #0]
 800ffb0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	617b      	str	r3, [r7, #20]
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ffba:	79fb      	ldrb	r3, [r7, #7]
 800ffbc:	9300      	str	r3, [sp, #0]
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	6939      	ldr	r1, [r7, #16]
 800ffc4:	6978      	ldr	r0, [r7, #20]
 800ffc6:	f7ff feeb 	bl	800fda0 <xQueueGenericCreateStatic>
 800ffca:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ffcc:	68f8      	ldr	r0, [r7, #12]
 800ffce:	f7ff ffb8 	bl	800ff42 <prvInitialiseMutex>

		return xNewQueue;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
	}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3718      	adds	r7, #24
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}

0800ffdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b08e      	sub	sp, #56	; 0x38
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	60f8      	str	r0, [r7, #12]
 800ffe4:	60b9      	str	r1, [r7, #8]
 800ffe6:	607a      	str	r2, [r7, #4]
 800ffe8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ffea:	2300      	movs	r3, #0
 800ffec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d109      	bne.n	801000c <xQueueGenericSend+0x30>
 800fff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fffc:	f383 8811 	msr	BASEPRI, r3
 8010000:	f3bf 8f6f 	isb	sy
 8010004:	f3bf 8f4f 	dsb	sy
 8010008:	62bb      	str	r3, [r7, #40]	; 0x28
 801000a:	e7fe      	b.n	801000a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801000c:	68bb      	ldr	r3, [r7, #8]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d103      	bne.n	801001a <xQueueGenericSend+0x3e>
 8010012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010016:	2b00      	cmp	r3, #0
 8010018:	d101      	bne.n	801001e <xQueueGenericSend+0x42>
 801001a:	2301      	movs	r3, #1
 801001c:	e000      	b.n	8010020 <xQueueGenericSend+0x44>
 801001e:	2300      	movs	r3, #0
 8010020:	2b00      	cmp	r3, #0
 8010022:	d109      	bne.n	8010038 <xQueueGenericSend+0x5c>
 8010024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010028:	f383 8811 	msr	BASEPRI, r3
 801002c:	f3bf 8f6f 	isb	sy
 8010030:	f3bf 8f4f 	dsb	sy
 8010034:	627b      	str	r3, [r7, #36]	; 0x24
 8010036:	e7fe      	b.n	8010036 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	2b02      	cmp	r3, #2
 801003c:	d103      	bne.n	8010046 <xQueueGenericSend+0x6a>
 801003e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010042:	2b01      	cmp	r3, #1
 8010044:	d101      	bne.n	801004a <xQueueGenericSend+0x6e>
 8010046:	2301      	movs	r3, #1
 8010048:	e000      	b.n	801004c <xQueueGenericSend+0x70>
 801004a:	2300      	movs	r3, #0
 801004c:	2b00      	cmp	r3, #0
 801004e:	d109      	bne.n	8010064 <xQueueGenericSend+0x88>
 8010050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010054:	f383 8811 	msr	BASEPRI, r3
 8010058:	f3bf 8f6f 	isb	sy
 801005c:	f3bf 8f4f 	dsb	sy
 8010060:	623b      	str	r3, [r7, #32]
 8010062:	e7fe      	b.n	8010062 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010064:	f001 fc48 	bl	80118f8 <xTaskGetSchedulerState>
 8010068:	4603      	mov	r3, r0
 801006a:	2b00      	cmp	r3, #0
 801006c:	d102      	bne.n	8010074 <xQueueGenericSend+0x98>
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d101      	bne.n	8010078 <xQueueGenericSend+0x9c>
 8010074:	2301      	movs	r3, #1
 8010076:	e000      	b.n	801007a <xQueueGenericSend+0x9e>
 8010078:	2300      	movs	r3, #0
 801007a:	2b00      	cmp	r3, #0
 801007c:	d109      	bne.n	8010092 <xQueueGenericSend+0xb6>
 801007e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010082:	f383 8811 	msr	BASEPRI, r3
 8010086:	f3bf 8f6f 	isb	sy
 801008a:	f3bf 8f4f 	dsb	sy
 801008e:	61fb      	str	r3, [r7, #28]
 8010090:	e7fe      	b.n	8010090 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010092:	f002 fb53 	bl	801273c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801009a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801009c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801009e:	429a      	cmp	r2, r3
 80100a0:	d302      	bcc.n	80100a8 <xQueueGenericSend+0xcc>
 80100a2:	683b      	ldr	r3, [r7, #0]
 80100a4:	2b02      	cmp	r3, #2
 80100a6:	d129      	bne.n	80100fc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80100a8:	683a      	ldr	r2, [r7, #0]
 80100aa:	68b9      	ldr	r1, [r7, #8]
 80100ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100ae:	f000 fc82 	bl	80109b6 <prvCopyDataToQueue>
 80100b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80100b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d010      	beq.n	80100de <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80100bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100be:	3324      	adds	r3, #36	; 0x24
 80100c0:	4618      	mov	r0, r3
 80100c2:	f001 fa63 	bl	801158c <xTaskRemoveFromEventList>
 80100c6:	4603      	mov	r3, r0
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d013      	beq.n	80100f4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80100cc:	4b3f      	ldr	r3, [pc, #252]	; (80101cc <xQueueGenericSend+0x1f0>)
 80100ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100d2:	601a      	str	r2, [r3, #0]
 80100d4:	f3bf 8f4f 	dsb	sy
 80100d8:	f3bf 8f6f 	isb	sy
 80100dc:	e00a      	b.n	80100f4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80100de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d007      	beq.n	80100f4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80100e4:	4b39      	ldr	r3, [pc, #228]	; (80101cc <xQueueGenericSend+0x1f0>)
 80100e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100ea:	601a      	str	r2, [r3, #0]
 80100ec:	f3bf 8f4f 	dsb	sy
 80100f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80100f4:	f002 fb50 	bl	8012798 <vPortExitCritical>
				return pdPASS;
 80100f8:	2301      	movs	r3, #1
 80100fa:	e063      	b.n	80101c4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d103      	bne.n	801010a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010102:	f002 fb49 	bl	8012798 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010106:	2300      	movs	r3, #0
 8010108:	e05c      	b.n	80101c4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801010a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801010c:	2b00      	cmp	r3, #0
 801010e:	d106      	bne.n	801011e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010110:	f107 0314 	add.w	r3, r7, #20
 8010114:	4618      	mov	r0, r3
 8010116:	f001 fa9b 	bl	8011650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801011a:	2301      	movs	r3, #1
 801011c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801011e:	f002 fb3b 	bl	8012798 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010122:	f001 f807 	bl	8011134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010126:	f002 fb09 	bl	801273c <vPortEnterCritical>
 801012a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801012c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010130:	b25b      	sxtb	r3, r3
 8010132:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010136:	d103      	bne.n	8010140 <xQueueGenericSend+0x164>
 8010138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801013a:	2200      	movs	r2, #0
 801013c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010142:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010146:	b25b      	sxtb	r3, r3
 8010148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801014c:	d103      	bne.n	8010156 <xQueueGenericSend+0x17a>
 801014e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010150:	2200      	movs	r2, #0
 8010152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010156:	f002 fb1f 	bl	8012798 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801015a:	1d3a      	adds	r2, r7, #4
 801015c:	f107 0314 	add.w	r3, r7, #20
 8010160:	4611      	mov	r1, r2
 8010162:	4618      	mov	r0, r3
 8010164:	f001 fa8a 	bl	801167c <xTaskCheckForTimeOut>
 8010168:	4603      	mov	r3, r0
 801016a:	2b00      	cmp	r3, #0
 801016c:	d124      	bne.n	80101b8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801016e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010170:	f000 fd19 	bl	8010ba6 <prvIsQueueFull>
 8010174:	4603      	mov	r3, r0
 8010176:	2b00      	cmp	r3, #0
 8010178:	d018      	beq.n	80101ac <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801017a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801017c:	3310      	adds	r3, #16
 801017e:	687a      	ldr	r2, [r7, #4]
 8010180:	4611      	mov	r1, r2
 8010182:	4618      	mov	r0, r3
 8010184:	f001 f9b4 	bl	80114f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801018a:	f000 fca4 	bl	8010ad6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801018e:	f000 ffdf 	bl	8011150 <xTaskResumeAll>
 8010192:	4603      	mov	r3, r0
 8010194:	2b00      	cmp	r3, #0
 8010196:	f47f af7c 	bne.w	8010092 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 801019a:	4b0c      	ldr	r3, [pc, #48]	; (80101cc <xQueueGenericSend+0x1f0>)
 801019c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101a0:	601a      	str	r2, [r3, #0]
 80101a2:	f3bf 8f4f 	dsb	sy
 80101a6:	f3bf 8f6f 	isb	sy
 80101aa:	e772      	b.n	8010092 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80101ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101ae:	f000 fc92 	bl	8010ad6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80101b2:	f000 ffcd 	bl	8011150 <xTaskResumeAll>
 80101b6:	e76c      	b.n	8010092 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80101b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101ba:	f000 fc8c 	bl	8010ad6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80101be:	f000 ffc7 	bl	8011150 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80101c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	3738      	adds	r7, #56	; 0x38
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}
 80101cc:	e000ed04 	.word	0xe000ed04

080101d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b08e      	sub	sp, #56	; 0x38
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	60f8      	str	r0, [r7, #12]
 80101d8:	60b9      	str	r1, [r7, #8]
 80101da:	607a      	str	r2, [r7, #4]
 80101dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80101e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d109      	bne.n	80101fc <xQueueGenericSendFromISR+0x2c>
 80101e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ec:	f383 8811 	msr	BASEPRI, r3
 80101f0:	f3bf 8f6f 	isb	sy
 80101f4:	f3bf 8f4f 	dsb	sy
 80101f8:	627b      	str	r3, [r7, #36]	; 0x24
 80101fa:	e7fe      	b.n	80101fa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80101fc:	68bb      	ldr	r3, [r7, #8]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d103      	bne.n	801020a <xQueueGenericSendFromISR+0x3a>
 8010202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010206:	2b00      	cmp	r3, #0
 8010208:	d101      	bne.n	801020e <xQueueGenericSendFromISR+0x3e>
 801020a:	2301      	movs	r3, #1
 801020c:	e000      	b.n	8010210 <xQueueGenericSendFromISR+0x40>
 801020e:	2300      	movs	r3, #0
 8010210:	2b00      	cmp	r3, #0
 8010212:	d109      	bne.n	8010228 <xQueueGenericSendFromISR+0x58>
 8010214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010218:	f383 8811 	msr	BASEPRI, r3
 801021c:	f3bf 8f6f 	isb	sy
 8010220:	f3bf 8f4f 	dsb	sy
 8010224:	623b      	str	r3, [r7, #32]
 8010226:	e7fe      	b.n	8010226 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	2b02      	cmp	r3, #2
 801022c:	d103      	bne.n	8010236 <xQueueGenericSendFromISR+0x66>
 801022e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010232:	2b01      	cmp	r3, #1
 8010234:	d101      	bne.n	801023a <xQueueGenericSendFromISR+0x6a>
 8010236:	2301      	movs	r3, #1
 8010238:	e000      	b.n	801023c <xQueueGenericSendFromISR+0x6c>
 801023a:	2300      	movs	r3, #0
 801023c:	2b00      	cmp	r3, #0
 801023e:	d109      	bne.n	8010254 <xQueueGenericSendFromISR+0x84>
 8010240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010244:	f383 8811 	msr	BASEPRI, r3
 8010248:	f3bf 8f6f 	isb	sy
 801024c:	f3bf 8f4f 	dsb	sy
 8010250:	61fb      	str	r3, [r7, #28]
 8010252:	e7fe      	b.n	8010252 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010254:	f002 fb4e 	bl	80128f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010258:	f3ef 8211 	mrs	r2, BASEPRI
 801025c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010260:	f383 8811 	msr	BASEPRI, r3
 8010264:	f3bf 8f6f 	isb	sy
 8010268:	f3bf 8f4f 	dsb	sy
 801026c:	61ba      	str	r2, [r7, #24]
 801026e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010270:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010272:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801027a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801027c:	429a      	cmp	r2, r3
 801027e:	d302      	bcc.n	8010286 <xQueueGenericSendFromISR+0xb6>
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	2b02      	cmp	r3, #2
 8010284:	d12c      	bne.n	80102e0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010288:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801028c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010290:	683a      	ldr	r2, [r7, #0]
 8010292:	68b9      	ldr	r1, [r7, #8]
 8010294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010296:	f000 fb8e 	bl	80109b6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801029a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801029e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80102a2:	d112      	bne.n	80102ca <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80102a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d016      	beq.n	80102da <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80102ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ae:	3324      	adds	r3, #36	; 0x24
 80102b0:	4618      	mov	r0, r3
 80102b2:	f001 f96b 	bl	801158c <xTaskRemoveFromEventList>
 80102b6:	4603      	mov	r3, r0
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d00e      	beq.n	80102da <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d00b      	beq.n	80102da <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2201      	movs	r2, #1
 80102c6:	601a      	str	r2, [r3, #0]
 80102c8:	e007      	b.n	80102da <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80102ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80102ce:	3301      	adds	r3, #1
 80102d0:	b2db      	uxtb	r3, r3
 80102d2:	b25a      	sxtb	r2, r3
 80102d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80102da:	2301      	movs	r3, #1
 80102dc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80102de:	e001      	b.n	80102e4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80102e0:	2300      	movs	r3, #0
 80102e2:	637b      	str	r3, [r7, #52]	; 0x34
 80102e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102e6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80102e8:	693b      	ldr	r3, [r7, #16]
 80102ea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80102ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80102f0:	4618      	mov	r0, r3
 80102f2:	3738      	adds	r7, #56	; 0x38
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}

080102f8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b08e      	sub	sp, #56	; 0x38
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
 8010300:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010308:	2b00      	cmp	r3, #0
 801030a:	d109      	bne.n	8010320 <xQueueGiveFromISR+0x28>
	__asm volatile
 801030c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010310:	f383 8811 	msr	BASEPRI, r3
 8010314:	f3bf 8f6f 	isb	sy
 8010318:	f3bf 8f4f 	dsb	sy
 801031c:	623b      	str	r3, [r7, #32]
 801031e:	e7fe      	b.n	801031e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010324:	2b00      	cmp	r3, #0
 8010326:	d009      	beq.n	801033c <xQueueGiveFromISR+0x44>
 8010328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801032c:	f383 8811 	msr	BASEPRI, r3
 8010330:	f3bf 8f6f 	isb	sy
 8010334:	f3bf 8f4f 	dsb	sy
 8010338:	61fb      	str	r3, [r7, #28]
 801033a:	e7fe      	b.n	801033a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801033c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d103      	bne.n	801034c <xQueueGiveFromISR+0x54>
 8010344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010346:	689b      	ldr	r3, [r3, #8]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d101      	bne.n	8010350 <xQueueGiveFromISR+0x58>
 801034c:	2301      	movs	r3, #1
 801034e:	e000      	b.n	8010352 <xQueueGiveFromISR+0x5a>
 8010350:	2300      	movs	r3, #0
 8010352:	2b00      	cmp	r3, #0
 8010354:	d109      	bne.n	801036a <xQueueGiveFromISR+0x72>
 8010356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801035a:	f383 8811 	msr	BASEPRI, r3
 801035e:	f3bf 8f6f 	isb	sy
 8010362:	f3bf 8f4f 	dsb	sy
 8010366:	61bb      	str	r3, [r7, #24]
 8010368:	e7fe      	b.n	8010368 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801036a:	f002 fac3 	bl	80128f4 <vPortValidateInterruptPriority>
	__asm volatile
 801036e:	f3ef 8211 	mrs	r2, BASEPRI
 8010372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010376:	f383 8811 	msr	BASEPRI, r3
 801037a:	f3bf 8f6f 	isb	sy
 801037e:	f3bf 8f4f 	dsb	sy
 8010382:	617a      	str	r2, [r7, #20]
 8010384:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010386:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010388:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801038a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801038c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801038e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010394:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010396:	429a      	cmp	r2, r3
 8010398:	d22b      	bcs.n	80103f2 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801039a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801039c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80103a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80103a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103a6:	1c5a      	adds	r2, r3, #1
 80103a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80103ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80103b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80103b4:	d112      	bne.n	80103dc <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80103b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d016      	beq.n	80103ec <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80103be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103c0:	3324      	adds	r3, #36	; 0x24
 80103c2:	4618      	mov	r0, r3
 80103c4:	f001 f8e2 	bl	801158c <xTaskRemoveFromEventList>
 80103c8:	4603      	mov	r3, r0
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d00e      	beq.n	80103ec <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d00b      	beq.n	80103ec <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80103d4:	683b      	ldr	r3, [r7, #0]
 80103d6:	2201      	movs	r2, #1
 80103d8:	601a      	str	r2, [r3, #0]
 80103da:	e007      	b.n	80103ec <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80103dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103e0:	3301      	adds	r3, #1
 80103e2:	b2db      	uxtb	r3, r3
 80103e4:	b25a      	sxtb	r2, r3
 80103e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80103ec:	2301      	movs	r3, #1
 80103ee:	637b      	str	r3, [r7, #52]	; 0x34
 80103f0:	e001      	b.n	80103f6 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80103f2:	2300      	movs	r3, #0
 80103f4:	637b      	str	r3, [r7, #52]	; 0x34
 80103f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010402:	4618      	mov	r0, r3
 8010404:	3738      	adds	r7, #56	; 0x38
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}
	...

0801040c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b08c      	sub	sp, #48	; 0x30
 8010410:	af00      	add	r7, sp, #0
 8010412:	60f8      	str	r0, [r7, #12]
 8010414:	60b9      	str	r1, [r7, #8]
 8010416:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010418:	2300      	movs	r3, #0
 801041a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010422:	2b00      	cmp	r3, #0
 8010424:	d109      	bne.n	801043a <xQueueReceive+0x2e>
	__asm volatile
 8010426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801042a:	f383 8811 	msr	BASEPRI, r3
 801042e:	f3bf 8f6f 	isb	sy
 8010432:	f3bf 8f4f 	dsb	sy
 8010436:	623b      	str	r3, [r7, #32]
 8010438:	e7fe      	b.n	8010438 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801043a:	68bb      	ldr	r3, [r7, #8]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d103      	bne.n	8010448 <xQueueReceive+0x3c>
 8010440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010444:	2b00      	cmp	r3, #0
 8010446:	d101      	bne.n	801044c <xQueueReceive+0x40>
 8010448:	2301      	movs	r3, #1
 801044a:	e000      	b.n	801044e <xQueueReceive+0x42>
 801044c:	2300      	movs	r3, #0
 801044e:	2b00      	cmp	r3, #0
 8010450:	d109      	bne.n	8010466 <xQueueReceive+0x5a>
 8010452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010456:	f383 8811 	msr	BASEPRI, r3
 801045a:	f3bf 8f6f 	isb	sy
 801045e:	f3bf 8f4f 	dsb	sy
 8010462:	61fb      	str	r3, [r7, #28]
 8010464:	e7fe      	b.n	8010464 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010466:	f001 fa47 	bl	80118f8 <xTaskGetSchedulerState>
 801046a:	4603      	mov	r3, r0
 801046c:	2b00      	cmp	r3, #0
 801046e:	d102      	bne.n	8010476 <xQueueReceive+0x6a>
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d101      	bne.n	801047a <xQueueReceive+0x6e>
 8010476:	2301      	movs	r3, #1
 8010478:	e000      	b.n	801047c <xQueueReceive+0x70>
 801047a:	2300      	movs	r3, #0
 801047c:	2b00      	cmp	r3, #0
 801047e:	d109      	bne.n	8010494 <xQueueReceive+0x88>
 8010480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010484:	f383 8811 	msr	BASEPRI, r3
 8010488:	f3bf 8f6f 	isb	sy
 801048c:	f3bf 8f4f 	dsb	sy
 8010490:	61bb      	str	r3, [r7, #24]
 8010492:	e7fe      	b.n	8010492 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010494:	f002 f952 	bl	801273c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801049a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801049c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801049e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d01f      	beq.n	80104e4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80104a4:	68b9      	ldr	r1, [r7, #8]
 80104a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104a8:	f000 faef 	bl	8010a8a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80104ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ae:	1e5a      	subs	r2, r3, #1
 80104b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104b2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80104b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104b6:	691b      	ldr	r3, [r3, #16]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d00f      	beq.n	80104dc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80104bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104be:	3310      	adds	r3, #16
 80104c0:	4618      	mov	r0, r3
 80104c2:	f001 f863 	bl	801158c <xTaskRemoveFromEventList>
 80104c6:	4603      	mov	r3, r0
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d007      	beq.n	80104dc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80104cc:	4b3c      	ldr	r3, [pc, #240]	; (80105c0 <xQueueReceive+0x1b4>)
 80104ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104d2:	601a      	str	r2, [r3, #0]
 80104d4:	f3bf 8f4f 	dsb	sy
 80104d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80104dc:	f002 f95c 	bl	8012798 <vPortExitCritical>
				return pdPASS;
 80104e0:	2301      	movs	r3, #1
 80104e2:	e069      	b.n	80105b8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d103      	bne.n	80104f2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80104ea:	f002 f955 	bl	8012798 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80104ee:	2300      	movs	r3, #0
 80104f0:	e062      	b.n	80105b8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80104f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d106      	bne.n	8010506 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80104f8:	f107 0310 	add.w	r3, r7, #16
 80104fc:	4618      	mov	r0, r3
 80104fe:	f001 f8a7 	bl	8011650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010502:	2301      	movs	r3, #1
 8010504:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010506:	f002 f947 	bl	8012798 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801050a:	f000 fe13 	bl	8011134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801050e:	f002 f915 	bl	801273c <vPortEnterCritical>
 8010512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010514:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010518:	b25b      	sxtb	r3, r3
 801051a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801051e:	d103      	bne.n	8010528 <xQueueReceive+0x11c>
 8010520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010522:	2200      	movs	r2, #0
 8010524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801052a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801052e:	b25b      	sxtb	r3, r3
 8010530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010534:	d103      	bne.n	801053e <xQueueReceive+0x132>
 8010536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010538:	2200      	movs	r2, #0
 801053a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801053e:	f002 f92b 	bl	8012798 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010542:	1d3a      	adds	r2, r7, #4
 8010544:	f107 0310 	add.w	r3, r7, #16
 8010548:	4611      	mov	r1, r2
 801054a:	4618      	mov	r0, r3
 801054c:	f001 f896 	bl	801167c <xTaskCheckForTimeOut>
 8010550:	4603      	mov	r3, r0
 8010552:	2b00      	cmp	r3, #0
 8010554:	d123      	bne.n	801059e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010558:	f000 fb0f 	bl	8010b7a <prvIsQueueEmpty>
 801055c:	4603      	mov	r3, r0
 801055e:	2b00      	cmp	r3, #0
 8010560:	d017      	beq.n	8010592 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010564:	3324      	adds	r3, #36	; 0x24
 8010566:	687a      	ldr	r2, [r7, #4]
 8010568:	4611      	mov	r1, r2
 801056a:	4618      	mov	r0, r3
 801056c:	f000 ffc0 	bl	80114f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010572:	f000 fab0 	bl	8010ad6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010576:	f000 fdeb 	bl	8011150 <xTaskResumeAll>
 801057a:	4603      	mov	r3, r0
 801057c:	2b00      	cmp	r3, #0
 801057e:	d189      	bne.n	8010494 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8010580:	4b0f      	ldr	r3, [pc, #60]	; (80105c0 <xQueueReceive+0x1b4>)
 8010582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010586:	601a      	str	r2, [r3, #0]
 8010588:	f3bf 8f4f 	dsb	sy
 801058c:	f3bf 8f6f 	isb	sy
 8010590:	e780      	b.n	8010494 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010594:	f000 fa9f 	bl	8010ad6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010598:	f000 fdda 	bl	8011150 <xTaskResumeAll>
 801059c:	e77a      	b.n	8010494 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801059e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105a0:	f000 fa99 	bl	8010ad6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80105a4:	f000 fdd4 	bl	8011150 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80105a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105aa:	f000 fae6 	bl	8010b7a <prvIsQueueEmpty>
 80105ae:	4603      	mov	r3, r0
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	f43f af6f 	beq.w	8010494 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80105b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80105b8:	4618      	mov	r0, r3
 80105ba:	3730      	adds	r7, #48	; 0x30
 80105bc:	46bd      	mov	sp, r7
 80105be:	bd80      	pop	{r7, pc}
 80105c0:	e000ed04 	.word	0xe000ed04

080105c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b08e      	sub	sp, #56	; 0x38
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
 80105cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80105ce:	2300      	movs	r3, #0
 80105d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80105d6:	2300      	movs	r3, #0
 80105d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80105da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d109      	bne.n	80105f4 <xQueueSemaphoreTake+0x30>
 80105e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e4:	f383 8811 	msr	BASEPRI, r3
 80105e8:	f3bf 8f6f 	isb	sy
 80105ec:	f3bf 8f4f 	dsb	sy
 80105f0:	623b      	str	r3, [r7, #32]
 80105f2:	e7fe      	b.n	80105f2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80105f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d009      	beq.n	8010610 <xQueueSemaphoreTake+0x4c>
 80105fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010600:	f383 8811 	msr	BASEPRI, r3
 8010604:	f3bf 8f6f 	isb	sy
 8010608:	f3bf 8f4f 	dsb	sy
 801060c:	61fb      	str	r3, [r7, #28]
 801060e:	e7fe      	b.n	801060e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010610:	f001 f972 	bl	80118f8 <xTaskGetSchedulerState>
 8010614:	4603      	mov	r3, r0
 8010616:	2b00      	cmp	r3, #0
 8010618:	d102      	bne.n	8010620 <xQueueSemaphoreTake+0x5c>
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d101      	bne.n	8010624 <xQueueSemaphoreTake+0x60>
 8010620:	2301      	movs	r3, #1
 8010622:	e000      	b.n	8010626 <xQueueSemaphoreTake+0x62>
 8010624:	2300      	movs	r3, #0
 8010626:	2b00      	cmp	r3, #0
 8010628:	d109      	bne.n	801063e <xQueueSemaphoreTake+0x7a>
 801062a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801062e:	f383 8811 	msr	BASEPRI, r3
 8010632:	f3bf 8f6f 	isb	sy
 8010636:	f3bf 8f4f 	dsb	sy
 801063a:	61bb      	str	r3, [r7, #24]
 801063c:	e7fe      	b.n	801063c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801063e:	f002 f87d 	bl	801273c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010646:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064a:	2b00      	cmp	r3, #0
 801064c:	d024      	beq.n	8010698 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801064e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010650:	1e5a      	subs	r2, r3, #1
 8010652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010654:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d104      	bne.n	8010668 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801065e:	f001 fb05 	bl	8011c6c <pvTaskIncrementMutexHeldCount>
 8010662:	4602      	mov	r2, r0
 8010664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010666:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801066a:	691b      	ldr	r3, [r3, #16]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d00f      	beq.n	8010690 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010672:	3310      	adds	r3, #16
 8010674:	4618      	mov	r0, r3
 8010676:	f000 ff89 	bl	801158c <xTaskRemoveFromEventList>
 801067a:	4603      	mov	r3, r0
 801067c:	2b00      	cmp	r3, #0
 801067e:	d007      	beq.n	8010690 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010680:	4b53      	ldr	r3, [pc, #332]	; (80107d0 <xQueueSemaphoreTake+0x20c>)
 8010682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010686:	601a      	str	r2, [r3, #0]
 8010688:	f3bf 8f4f 	dsb	sy
 801068c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010690:	f002 f882 	bl	8012798 <vPortExitCritical>
				return pdPASS;
 8010694:	2301      	movs	r3, #1
 8010696:	e096      	b.n	80107c6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d110      	bne.n	80106c0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801069e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d009      	beq.n	80106b8 <xQueueSemaphoreTake+0xf4>
 80106a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106a8:	f383 8811 	msr	BASEPRI, r3
 80106ac:	f3bf 8f6f 	isb	sy
 80106b0:	f3bf 8f4f 	dsb	sy
 80106b4:	617b      	str	r3, [r7, #20]
 80106b6:	e7fe      	b.n	80106b6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80106b8:	f002 f86e 	bl	8012798 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80106bc:	2300      	movs	r3, #0
 80106be:	e082      	b.n	80107c6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80106c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d106      	bne.n	80106d4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80106c6:	f107 030c 	add.w	r3, r7, #12
 80106ca:	4618      	mov	r0, r3
 80106cc:	f000 ffc0 	bl	8011650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80106d0:	2301      	movs	r3, #1
 80106d2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80106d4:	f002 f860 	bl	8012798 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80106d8:	f000 fd2c 	bl	8011134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80106dc:	f002 f82e 	bl	801273c <vPortEnterCritical>
 80106e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80106e6:	b25b      	sxtb	r3, r3
 80106e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80106ec:	d103      	bne.n	80106f6 <xQueueSemaphoreTake+0x132>
 80106ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f0:	2200      	movs	r2, #0
 80106f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80106f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80106fc:	b25b      	sxtb	r3, r3
 80106fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010702:	d103      	bne.n	801070c <xQueueSemaphoreTake+0x148>
 8010704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010706:	2200      	movs	r2, #0
 8010708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801070c:	f002 f844 	bl	8012798 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010710:	463a      	mov	r2, r7
 8010712:	f107 030c 	add.w	r3, r7, #12
 8010716:	4611      	mov	r1, r2
 8010718:	4618      	mov	r0, r3
 801071a:	f000 ffaf 	bl	801167c <xTaskCheckForTimeOut>
 801071e:	4603      	mov	r3, r0
 8010720:	2b00      	cmp	r3, #0
 8010722:	d132      	bne.n	801078a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010724:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010726:	f000 fa28 	bl	8010b7a <prvIsQueueEmpty>
 801072a:	4603      	mov	r3, r0
 801072c:	2b00      	cmp	r3, #0
 801072e:	d026      	beq.n	801077e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d109      	bne.n	801074c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8010738:	f002 f800 	bl	801273c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801073c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801073e:	689b      	ldr	r3, [r3, #8]
 8010740:	4618      	mov	r0, r3
 8010742:	f001 f8f7 	bl	8011934 <xTaskPriorityInherit>
 8010746:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010748:	f002 f826 	bl	8012798 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801074c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801074e:	3324      	adds	r3, #36	; 0x24
 8010750:	683a      	ldr	r2, [r7, #0]
 8010752:	4611      	mov	r1, r2
 8010754:	4618      	mov	r0, r3
 8010756:	f000 fecb 	bl	80114f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801075a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801075c:	f000 f9bb 	bl	8010ad6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010760:	f000 fcf6 	bl	8011150 <xTaskResumeAll>
 8010764:	4603      	mov	r3, r0
 8010766:	2b00      	cmp	r3, #0
 8010768:	f47f af69 	bne.w	801063e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 801076c:	4b18      	ldr	r3, [pc, #96]	; (80107d0 <xQueueSemaphoreTake+0x20c>)
 801076e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010772:	601a      	str	r2, [r3, #0]
 8010774:	f3bf 8f4f 	dsb	sy
 8010778:	f3bf 8f6f 	isb	sy
 801077c:	e75f      	b.n	801063e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801077e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010780:	f000 f9a9 	bl	8010ad6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010784:	f000 fce4 	bl	8011150 <xTaskResumeAll>
 8010788:	e759      	b.n	801063e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801078a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801078c:	f000 f9a3 	bl	8010ad6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010790:	f000 fcde 	bl	8011150 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010794:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010796:	f000 f9f0 	bl	8010b7a <prvIsQueueEmpty>
 801079a:	4603      	mov	r3, r0
 801079c:	2b00      	cmp	r3, #0
 801079e:	f43f af4e 	beq.w	801063e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80107a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d00d      	beq.n	80107c4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80107a8:	f001 ffc8 	bl	801273c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80107ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80107ae:	f000 f8ea 	bl	8010986 <prvGetDisinheritPriorityAfterTimeout>
 80107b2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80107b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107b6:	689b      	ldr	r3, [r3, #8]
 80107b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80107ba:	4618      	mov	r0, r3
 80107bc:	f001 f9be 	bl	8011b3c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80107c0:	f001 ffea 	bl	8012798 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80107c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	3738      	adds	r7, #56	; 0x38
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}
 80107ce:	bf00      	nop
 80107d0:	e000ed04 	.word	0xe000ed04

080107d4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b08e      	sub	sp, #56	; 0x38
 80107d8:	af00      	add	r7, sp, #0
 80107da:	60f8      	str	r0, [r7, #12]
 80107dc:	60b9      	str	r1, [r7, #8]
 80107de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80107e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d109      	bne.n	80107fe <xQueueReceiveFromISR+0x2a>
 80107ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ee:	f383 8811 	msr	BASEPRI, r3
 80107f2:	f3bf 8f6f 	isb	sy
 80107f6:	f3bf 8f4f 	dsb	sy
 80107fa:	623b      	str	r3, [r7, #32]
 80107fc:	e7fe      	b.n	80107fc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d103      	bne.n	801080c <xQueueReceiveFromISR+0x38>
 8010804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010808:	2b00      	cmp	r3, #0
 801080a:	d101      	bne.n	8010810 <xQueueReceiveFromISR+0x3c>
 801080c:	2301      	movs	r3, #1
 801080e:	e000      	b.n	8010812 <xQueueReceiveFromISR+0x3e>
 8010810:	2300      	movs	r3, #0
 8010812:	2b00      	cmp	r3, #0
 8010814:	d109      	bne.n	801082a <xQueueReceiveFromISR+0x56>
 8010816:	f04f 0350 	mov.w	r3, #80	; 0x50
 801081a:	f383 8811 	msr	BASEPRI, r3
 801081e:	f3bf 8f6f 	isb	sy
 8010822:	f3bf 8f4f 	dsb	sy
 8010826:	61fb      	str	r3, [r7, #28]
 8010828:	e7fe      	b.n	8010828 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801082a:	f002 f863 	bl	80128f4 <vPortValidateInterruptPriority>
	__asm volatile
 801082e:	f3ef 8211 	mrs	r2, BASEPRI
 8010832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010836:	f383 8811 	msr	BASEPRI, r3
 801083a:	f3bf 8f6f 	isb	sy
 801083e:	f3bf 8f4f 	dsb	sy
 8010842:	61ba      	str	r2, [r7, #24]
 8010844:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010846:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010848:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801084a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801084c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801084e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010852:	2b00      	cmp	r3, #0
 8010854:	d02f      	beq.n	80108b6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010858:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801085c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010860:	68b9      	ldr	r1, [r7, #8]
 8010862:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010864:	f000 f911 	bl	8010a8a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801086a:	1e5a      	subs	r2, r3, #1
 801086c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801086e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010870:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010878:	d112      	bne.n	80108a0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801087a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801087c:	691b      	ldr	r3, [r3, #16]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d016      	beq.n	80108b0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010884:	3310      	adds	r3, #16
 8010886:	4618      	mov	r0, r3
 8010888:	f000 fe80 	bl	801158c <xTaskRemoveFromEventList>
 801088c:	4603      	mov	r3, r0
 801088e:	2b00      	cmp	r3, #0
 8010890:	d00e      	beq.n	80108b0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d00b      	beq.n	80108b0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2201      	movs	r2, #1
 801089c:	601a      	str	r2, [r3, #0]
 801089e:	e007      	b.n	80108b0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80108a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108a4:	3301      	adds	r3, #1
 80108a6:	b2db      	uxtb	r3, r3
 80108a8:	b25a      	sxtb	r2, r3
 80108aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80108b0:	2301      	movs	r3, #1
 80108b2:	637b      	str	r3, [r7, #52]	; 0x34
 80108b4:	e001      	b.n	80108ba <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80108b6:	2300      	movs	r3, #0
 80108b8:	637b      	str	r3, [r7, #52]	; 0x34
 80108ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80108be:	693b      	ldr	r3, [r7, #16]
 80108c0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80108c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	3738      	adds	r7, #56	; 0x38
 80108ca:	46bd      	mov	sp, r7
 80108cc:	bd80      	pop	{r7, pc}

080108ce <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80108ce:	b580      	push	{r7, lr}
 80108d0:	b084      	sub	sp, #16
 80108d2:	af00      	add	r7, sp, #0
 80108d4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d109      	bne.n	80108f0 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 80108dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e0:	f383 8811 	msr	BASEPRI, r3
 80108e4:	f3bf 8f6f 	isb	sy
 80108e8:	f3bf 8f4f 	dsb	sy
 80108ec:	60bb      	str	r3, [r7, #8]
 80108ee:	e7fe      	b.n	80108ee <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 80108f0:	f001 ff24 	bl	801273c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108f8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80108fa:	f001 ff4d 	bl	8012798 <vPortExitCritical>

	return uxReturn;
 80108fe:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010900:	4618      	mov	r0, r3
 8010902:	3710      	adds	r7, #16
 8010904:	46bd      	mov	sp, r7
 8010906:	bd80      	pop	{r7, pc}

08010908 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8010908:	b480      	push	{r7}
 801090a:	b087      	sub	sp, #28
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8010914:	697b      	ldr	r3, [r7, #20]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d109      	bne.n	801092e <uxQueueMessagesWaitingFromISR+0x26>
 801091a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801091e:	f383 8811 	msr	BASEPRI, r3
 8010922:	f3bf 8f6f 	isb	sy
 8010926:	f3bf 8f4f 	dsb	sy
 801092a:	60fb      	str	r3, [r7, #12]
 801092c:	e7fe      	b.n	801092c <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 801092e:	697b      	ldr	r3, [r7, #20]
 8010930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010932:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8010934:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010936:	4618      	mov	r0, r3
 8010938:	371c      	adds	r7, #28
 801093a:	46bd      	mov	sp, r7
 801093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010940:	4770      	bx	lr

08010942 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010942:	b580      	push	{r7, lr}
 8010944:	b084      	sub	sp, #16
 8010946:	af00      	add	r7, sp, #0
 8010948:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d109      	bne.n	8010968 <vQueueDelete+0x26>
 8010954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010958:	f383 8811 	msr	BASEPRI, r3
 801095c:	f3bf 8f6f 	isb	sy
 8010960:	f3bf 8f4f 	dsb	sy
 8010964:	60bb      	str	r3, [r7, #8]
 8010966:	e7fe      	b.n	8010966 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010968:	68f8      	ldr	r0, [r7, #12]
 801096a:	f000 f95d 	bl	8010c28 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010974:	2b00      	cmp	r3, #0
 8010976:	d102      	bne.n	801097e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8010978:	68f8      	ldr	r0, [r7, #12]
 801097a:	f002 f895 	bl	8012aa8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801097e:	bf00      	nop
 8010980:	3710      	adds	r7, #16
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}

08010986 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010986:	b480      	push	{r7}
 8010988:	b085      	sub	sp, #20
 801098a:	af00      	add	r7, sp, #0
 801098c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010992:	2b00      	cmp	r3, #0
 8010994:	d006      	beq.n	80109a4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	f1c3 0307 	rsb	r3, r3, #7
 80109a0:	60fb      	str	r3, [r7, #12]
 80109a2:	e001      	b.n	80109a8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80109a4:	2300      	movs	r3, #0
 80109a6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80109a8:	68fb      	ldr	r3, [r7, #12]
	}
 80109aa:	4618      	mov	r0, r3
 80109ac:	3714      	adds	r7, #20
 80109ae:	46bd      	mov	sp, r7
 80109b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b4:	4770      	bx	lr

080109b6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80109b6:	b580      	push	{r7, lr}
 80109b8:	b086      	sub	sp, #24
 80109ba:	af00      	add	r7, sp, #0
 80109bc:	60f8      	str	r0, [r7, #12]
 80109be:	60b9      	str	r1, [r7, #8]
 80109c0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80109c2:	2300      	movs	r3, #0
 80109c4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109ca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d10d      	bne.n	80109f0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d14d      	bne.n	8010a78 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	689b      	ldr	r3, [r3, #8]
 80109e0:	4618      	mov	r0, r3
 80109e2:	f001 f827 	bl	8011a34 <xTaskPriorityDisinherit>
 80109e6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	2200      	movs	r2, #0
 80109ec:	609a      	str	r2, [r3, #8]
 80109ee:	e043      	b.n	8010a78 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d119      	bne.n	8010a2a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	6858      	ldr	r0, [r3, #4]
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109fe:	461a      	mov	r2, r3
 8010a00:	68b9      	ldr	r1, [r7, #8]
 8010a02:	f015 ff0e 	bl	8026822 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	685a      	ldr	r2, [r3, #4]
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a0e:	441a      	add	r2, r3
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	685a      	ldr	r2, [r3, #4]
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	689b      	ldr	r3, [r3, #8]
 8010a1c:	429a      	cmp	r2, r3
 8010a1e:	d32b      	bcc.n	8010a78 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	681a      	ldr	r2, [r3, #0]
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	605a      	str	r2, [r3, #4]
 8010a28:	e026      	b.n	8010a78 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	68d8      	ldr	r0, [r3, #12]
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a32:	461a      	mov	r2, r3
 8010a34:	68b9      	ldr	r1, [r7, #8]
 8010a36:	f015 fef4 	bl	8026822 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	68da      	ldr	r2, [r3, #12]
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a42:	425b      	negs	r3, r3
 8010a44:	441a      	add	r2, r3
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	68da      	ldr	r2, [r3, #12]
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	429a      	cmp	r2, r3
 8010a54:	d207      	bcs.n	8010a66 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	689a      	ldr	r2, [r3, #8]
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a5e:	425b      	negs	r3, r3
 8010a60:	441a      	add	r2, r3
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	2b02      	cmp	r3, #2
 8010a6a:	d105      	bne.n	8010a78 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010a6c:	693b      	ldr	r3, [r7, #16]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d002      	beq.n	8010a78 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010a72:	693b      	ldr	r3, [r7, #16]
 8010a74:	3b01      	subs	r3, #1
 8010a76:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010a78:	693b      	ldr	r3, [r7, #16]
 8010a7a:	1c5a      	adds	r2, r3, #1
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010a80:	697b      	ldr	r3, [r7, #20]
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	3718      	adds	r7, #24
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd80      	pop	{r7, pc}

08010a8a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010a8a:	b580      	push	{r7, lr}
 8010a8c:	b082      	sub	sp, #8
 8010a8e:	af00      	add	r7, sp, #0
 8010a90:	6078      	str	r0, [r7, #4]
 8010a92:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d018      	beq.n	8010ace <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	68da      	ldr	r2, [r3, #12]
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aa4:	441a      	add	r2, r3
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	68da      	ldr	r2, [r3, #12]
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	689b      	ldr	r3, [r3, #8]
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	d303      	bcc.n	8010abe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681a      	ldr	r2, [r3, #0]
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	68d9      	ldr	r1, [r3, #12]
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ac6:	461a      	mov	r2, r3
 8010ac8:	6838      	ldr	r0, [r7, #0]
 8010aca:	f015 feaa 	bl	8026822 <memcpy>
	}
}
 8010ace:	bf00      	nop
 8010ad0:	3708      	adds	r7, #8
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}

08010ad6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010ad6:	b580      	push	{r7, lr}
 8010ad8:	b084      	sub	sp, #16
 8010ada:	af00      	add	r7, sp, #0
 8010adc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010ade:	f001 fe2d 	bl	801273c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ae8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010aea:	e011      	b.n	8010b10 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d012      	beq.n	8010b1a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	3324      	adds	r3, #36	; 0x24
 8010af8:	4618      	mov	r0, r3
 8010afa:	f000 fd47 	bl	801158c <xTaskRemoveFromEventList>
 8010afe:	4603      	mov	r3, r0
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d001      	beq.n	8010b08 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010b04:	f000 fe1a 	bl	801173c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010b08:	7bfb      	ldrb	r3, [r7, #15]
 8010b0a:	3b01      	subs	r3, #1
 8010b0c:	b2db      	uxtb	r3, r3
 8010b0e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	dce9      	bgt.n	8010aec <prvUnlockQueue+0x16>
 8010b18:	e000      	b.n	8010b1c <prvUnlockQueue+0x46>
					break;
 8010b1a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	22ff      	movs	r2, #255	; 0xff
 8010b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010b24:	f001 fe38 	bl	8012798 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010b28:	f001 fe08 	bl	801273c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b32:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010b34:	e011      	b.n	8010b5a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	691b      	ldr	r3, [r3, #16]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d012      	beq.n	8010b64 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	3310      	adds	r3, #16
 8010b42:	4618      	mov	r0, r3
 8010b44:	f000 fd22 	bl	801158c <xTaskRemoveFromEventList>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d001      	beq.n	8010b52 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010b4e:	f000 fdf5 	bl	801173c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010b52:	7bbb      	ldrb	r3, [r7, #14]
 8010b54:	3b01      	subs	r3, #1
 8010b56:	b2db      	uxtb	r3, r3
 8010b58:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010b5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	dce9      	bgt.n	8010b36 <prvUnlockQueue+0x60>
 8010b62:	e000      	b.n	8010b66 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010b64:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	22ff      	movs	r2, #255	; 0xff
 8010b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010b6e:	f001 fe13 	bl	8012798 <vPortExitCritical>
}
 8010b72:	bf00      	nop
 8010b74:	3710      	adds	r7, #16
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}

08010b7a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010b7a:	b580      	push	{r7, lr}
 8010b7c:	b084      	sub	sp, #16
 8010b7e:	af00      	add	r7, sp, #0
 8010b80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010b82:	f001 fddb 	bl	801273c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d102      	bne.n	8010b94 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010b8e:	2301      	movs	r3, #1
 8010b90:	60fb      	str	r3, [r7, #12]
 8010b92:	e001      	b.n	8010b98 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010b94:	2300      	movs	r3, #0
 8010b96:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010b98:	f001 fdfe 	bl	8012798 <vPortExitCritical>

	return xReturn;
 8010b9c:	68fb      	ldr	r3, [r7, #12]
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3710      	adds	r7, #16
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}

08010ba6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010ba6:	b580      	push	{r7, lr}
 8010ba8:	b084      	sub	sp, #16
 8010baa:	af00      	add	r7, sp, #0
 8010bac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010bae:	f001 fdc5 	bl	801273c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d102      	bne.n	8010bc4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	60fb      	str	r3, [r7, #12]
 8010bc2:	e001      	b.n	8010bc8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010bc8:	f001 fde6 	bl	8012798 <vPortExitCritical>

	return xReturn;
 8010bcc:	68fb      	ldr	r3, [r7, #12]
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	3710      	adds	r7, #16
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}
	...

08010bd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010bd8:	b480      	push	{r7}
 8010bda:	b085      	sub	sp, #20
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
 8010be0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010be2:	2300      	movs	r3, #0
 8010be4:	60fb      	str	r3, [r7, #12]
 8010be6:	e014      	b.n	8010c12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010be8:	4a0e      	ldr	r2, [pc, #56]	; (8010c24 <vQueueAddToRegistry+0x4c>)
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d10b      	bne.n	8010c0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010bf4:	490b      	ldr	r1, [pc, #44]	; (8010c24 <vQueueAddToRegistry+0x4c>)
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	683a      	ldr	r2, [r7, #0]
 8010bfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010bfe:	4a09      	ldr	r2, [pc, #36]	; (8010c24 <vQueueAddToRegistry+0x4c>)
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	00db      	lsls	r3, r3, #3
 8010c04:	4413      	add	r3, r2
 8010c06:	687a      	ldr	r2, [r7, #4]
 8010c08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010c0a:	e005      	b.n	8010c18 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	3301      	adds	r3, #1
 8010c10:	60fb      	str	r3, [r7, #12]
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	2b07      	cmp	r3, #7
 8010c16:	d9e7      	bls.n	8010be8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010c18:	bf00      	nop
 8010c1a:	3714      	adds	r7, #20
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c22:	4770      	bx	lr
 8010c24:	20016afc 	.word	0x20016afc

08010c28 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010c28:	b480      	push	{r7}
 8010c2a:	b085      	sub	sp, #20
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010c30:	2300      	movs	r3, #0
 8010c32:	60fb      	str	r3, [r7, #12]
 8010c34:	e016      	b.n	8010c64 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010c36:	4a10      	ldr	r2, [pc, #64]	; (8010c78 <vQueueUnregisterQueue+0x50>)
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	00db      	lsls	r3, r3, #3
 8010c3c:	4413      	add	r3, r2
 8010c3e:	685b      	ldr	r3, [r3, #4]
 8010c40:	687a      	ldr	r2, [r7, #4]
 8010c42:	429a      	cmp	r2, r3
 8010c44:	d10b      	bne.n	8010c5e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010c46:	4a0c      	ldr	r2, [pc, #48]	; (8010c78 <vQueueUnregisterQueue+0x50>)
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	2100      	movs	r1, #0
 8010c4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010c50:	4a09      	ldr	r2, [pc, #36]	; (8010c78 <vQueueUnregisterQueue+0x50>)
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	00db      	lsls	r3, r3, #3
 8010c56:	4413      	add	r3, r2
 8010c58:	2200      	movs	r2, #0
 8010c5a:	605a      	str	r2, [r3, #4]
				break;
 8010c5c:	e005      	b.n	8010c6a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	3301      	adds	r3, #1
 8010c62:	60fb      	str	r3, [r7, #12]
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	2b07      	cmp	r3, #7
 8010c68:	d9e5      	bls.n	8010c36 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010c6a:	bf00      	nop
 8010c6c:	3714      	adds	r7, #20
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c74:	4770      	bx	lr
 8010c76:	bf00      	nop
 8010c78:	20016afc 	.word	0x20016afc

08010c7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b086      	sub	sp, #24
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	60f8      	str	r0, [r7, #12]
 8010c84:	60b9      	str	r1, [r7, #8]
 8010c86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010c8c:	f001 fd56 	bl	801273c <vPortEnterCritical>
 8010c90:	697b      	ldr	r3, [r7, #20]
 8010c92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c96:	b25b      	sxtb	r3, r3
 8010c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c9c:	d103      	bne.n	8010ca6 <vQueueWaitForMessageRestricted+0x2a>
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010cac:	b25b      	sxtb	r3, r3
 8010cae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010cb2:	d103      	bne.n	8010cbc <vQueueWaitForMessageRestricted+0x40>
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010cbc:	f001 fd6c 	bl	8012798 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d106      	bne.n	8010cd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	3324      	adds	r3, #36	; 0x24
 8010ccc:	687a      	ldr	r2, [r7, #4]
 8010cce:	68b9      	ldr	r1, [r7, #8]
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f000 fc31 	bl	8011538 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010cd6:	6978      	ldr	r0, [r7, #20]
 8010cd8:	f7ff fefd 	bl	8010ad6 <prvUnlockQueue>
	}
 8010cdc:	bf00      	nop
 8010cde:	3718      	adds	r7, #24
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}

08010ce4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b08e      	sub	sp, #56	; 0x38
 8010ce8:	af04      	add	r7, sp, #16
 8010cea:	60f8      	str	r0, [r7, #12]
 8010cec:	60b9      	str	r1, [r7, #8]
 8010cee:	607a      	str	r2, [r7, #4]
 8010cf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d109      	bne.n	8010d0c <xTaskCreateStatic+0x28>
 8010cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cfc:	f383 8811 	msr	BASEPRI, r3
 8010d00:	f3bf 8f6f 	isb	sy
 8010d04:	f3bf 8f4f 	dsb	sy
 8010d08:	623b      	str	r3, [r7, #32]
 8010d0a:	e7fe      	b.n	8010d0a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8010d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d109      	bne.n	8010d26 <xTaskCreateStatic+0x42>
 8010d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d16:	f383 8811 	msr	BASEPRI, r3
 8010d1a:	f3bf 8f6f 	isb	sy
 8010d1e:	f3bf 8f4f 	dsb	sy
 8010d22:	61fb      	str	r3, [r7, #28]
 8010d24:	e7fe      	b.n	8010d24 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010d26:	2354      	movs	r3, #84	; 0x54
 8010d28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010d2a:	693b      	ldr	r3, [r7, #16]
 8010d2c:	2b54      	cmp	r3, #84	; 0x54
 8010d2e:	d009      	beq.n	8010d44 <xTaskCreateStatic+0x60>
 8010d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d34:	f383 8811 	msr	BASEPRI, r3
 8010d38:	f3bf 8f6f 	isb	sy
 8010d3c:	f3bf 8f4f 	dsb	sy
 8010d40:	61bb      	str	r3, [r7, #24]
 8010d42:	e7fe      	b.n	8010d42 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010d44:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d01e      	beq.n	8010d8a <xTaskCreateStatic+0xa6>
 8010d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d01b      	beq.n	8010d8a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d54:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d5a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d5e:	2202      	movs	r2, #2
 8010d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010d64:	2300      	movs	r3, #0
 8010d66:	9303      	str	r3, [sp, #12]
 8010d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d6a:	9302      	str	r3, [sp, #8]
 8010d6c:	f107 0314 	add.w	r3, r7, #20
 8010d70:	9301      	str	r3, [sp, #4]
 8010d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d74:	9300      	str	r3, [sp, #0]
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	687a      	ldr	r2, [r7, #4]
 8010d7a:	68b9      	ldr	r1, [r7, #8]
 8010d7c:	68f8      	ldr	r0, [r7, #12]
 8010d7e:	f000 f850 	bl	8010e22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010d82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d84:	f000 f8d4 	bl	8010f30 <prvAddNewTaskToReadyList>
 8010d88:	e001      	b.n	8010d8e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010d8e:	697b      	ldr	r3, [r7, #20]
	}
 8010d90:	4618      	mov	r0, r3
 8010d92:	3728      	adds	r7, #40	; 0x28
 8010d94:	46bd      	mov	sp, r7
 8010d96:	bd80      	pop	{r7, pc}

08010d98 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b08c      	sub	sp, #48	; 0x30
 8010d9c:	af04      	add	r7, sp, #16
 8010d9e:	60f8      	str	r0, [r7, #12]
 8010da0:	60b9      	str	r1, [r7, #8]
 8010da2:	603b      	str	r3, [r7, #0]
 8010da4:	4613      	mov	r3, r2
 8010da6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010da8:	88fb      	ldrh	r3, [r7, #6]
 8010daa:	009b      	lsls	r3, r3, #2
 8010dac:	4618      	mov	r0, r3
 8010dae:	f001 fddf 	bl	8012970 <pvPortMalloc>
 8010db2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d00e      	beq.n	8010dd8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010dba:	2054      	movs	r0, #84	; 0x54
 8010dbc:	f001 fdd8 	bl	8012970 <pvPortMalloc>
 8010dc0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010dc2:	69fb      	ldr	r3, [r7, #28]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d003      	beq.n	8010dd0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010dc8:	69fb      	ldr	r3, [r7, #28]
 8010dca:	697a      	ldr	r2, [r7, #20]
 8010dcc:	631a      	str	r2, [r3, #48]	; 0x30
 8010dce:	e005      	b.n	8010ddc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010dd0:	6978      	ldr	r0, [r7, #20]
 8010dd2:	f001 fe69 	bl	8012aa8 <vPortFree>
 8010dd6:	e001      	b.n	8010ddc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010ddc:	69fb      	ldr	r3, [r7, #28]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d017      	beq.n	8010e12 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010de2:	69fb      	ldr	r3, [r7, #28]
 8010de4:	2200      	movs	r2, #0
 8010de6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010dea:	88fa      	ldrh	r2, [r7, #6]
 8010dec:	2300      	movs	r3, #0
 8010dee:	9303      	str	r3, [sp, #12]
 8010df0:	69fb      	ldr	r3, [r7, #28]
 8010df2:	9302      	str	r3, [sp, #8]
 8010df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df6:	9301      	str	r3, [sp, #4]
 8010df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dfa:	9300      	str	r3, [sp, #0]
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	68b9      	ldr	r1, [r7, #8]
 8010e00:	68f8      	ldr	r0, [r7, #12]
 8010e02:	f000 f80e 	bl	8010e22 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010e06:	69f8      	ldr	r0, [r7, #28]
 8010e08:	f000 f892 	bl	8010f30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010e0c:	2301      	movs	r3, #1
 8010e0e:	61bb      	str	r3, [r7, #24]
 8010e10:	e002      	b.n	8010e18 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e16:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010e18:	69bb      	ldr	r3, [r7, #24]
	}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	3720      	adds	r7, #32
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}

08010e22 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010e22:	b580      	push	{r7, lr}
 8010e24:	b088      	sub	sp, #32
 8010e26:	af00      	add	r7, sp, #0
 8010e28:	60f8      	str	r0, [r7, #12]
 8010e2a:	60b9      	str	r1, [r7, #8]
 8010e2c:	607a      	str	r2, [r7, #4]
 8010e2e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010e3a:	3b01      	subs	r3, #1
 8010e3c:	009b      	lsls	r3, r3, #2
 8010e3e:	4413      	add	r3, r2
 8010e40:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010e42:	69bb      	ldr	r3, [r7, #24]
 8010e44:	f023 0307 	bic.w	r3, r3, #7
 8010e48:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010e4a:	69bb      	ldr	r3, [r7, #24]
 8010e4c:	f003 0307 	and.w	r3, r3, #7
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d009      	beq.n	8010e68 <prvInitialiseNewTask+0x46>
 8010e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e58:	f383 8811 	msr	BASEPRI, r3
 8010e5c:	f3bf 8f6f 	isb	sy
 8010e60:	f3bf 8f4f 	dsb	sy
 8010e64:	617b      	str	r3, [r7, #20]
 8010e66:	e7fe      	b.n	8010e66 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010e68:	68bb      	ldr	r3, [r7, #8]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d01f      	beq.n	8010eae <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010e6e:	2300      	movs	r3, #0
 8010e70:	61fb      	str	r3, [r7, #28]
 8010e72:	e012      	b.n	8010e9a <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010e74:	68ba      	ldr	r2, [r7, #8]
 8010e76:	69fb      	ldr	r3, [r7, #28]
 8010e78:	4413      	add	r3, r2
 8010e7a:	7819      	ldrb	r1, [r3, #0]
 8010e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e7e:	69fb      	ldr	r3, [r7, #28]
 8010e80:	4413      	add	r3, r2
 8010e82:	3334      	adds	r3, #52	; 0x34
 8010e84:	460a      	mov	r2, r1
 8010e86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010e88:	68ba      	ldr	r2, [r7, #8]
 8010e8a:	69fb      	ldr	r3, [r7, #28]
 8010e8c:	4413      	add	r3, r2
 8010e8e:	781b      	ldrb	r3, [r3, #0]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d006      	beq.n	8010ea2 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010e94:	69fb      	ldr	r3, [r7, #28]
 8010e96:	3301      	adds	r3, #1
 8010e98:	61fb      	str	r3, [r7, #28]
 8010e9a:	69fb      	ldr	r3, [r7, #28]
 8010e9c:	2b0f      	cmp	r3, #15
 8010e9e:	d9e9      	bls.n	8010e74 <prvInitialiseNewTask+0x52>
 8010ea0:	e000      	b.n	8010ea4 <prvInitialiseNewTask+0x82>
			{
				break;
 8010ea2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010eac:	e003      	b.n	8010eb6 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb8:	2b06      	cmp	r3, #6
 8010eba:	d901      	bls.n	8010ec0 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010ebc:	2306      	movs	r3, #6
 8010ebe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ec4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010eca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ece:	2200      	movs	r2, #0
 8010ed0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ed4:	3304      	adds	r3, #4
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7fe fe65 	bl	800fba6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ede:	3318      	adds	r3, #24
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7fe fe60 	bl	800fba6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010eea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eee:	f1c3 0207 	rsb	r2, r3, #7
 8010ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ef4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010efa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010efe:	2200      	movs	r2, #0
 8010f00:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f04:	2200      	movs	r2, #0
 8010f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010f0a:	683a      	ldr	r2, [r7, #0]
 8010f0c:	68f9      	ldr	r1, [r7, #12]
 8010f0e:	69b8      	ldr	r0, [r7, #24]
 8010f10:	f001 faec 	bl	80124ec <pxPortInitialiseStack>
 8010f14:	4602      	mov	r2, r0
 8010f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d002      	beq.n	8010f26 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f26:	bf00      	nop
 8010f28:	3720      	adds	r7, #32
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd80      	pop	{r7, pc}
	...

08010f30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b082      	sub	sp, #8
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010f38:	f001 fc00 	bl	801273c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010f3c:	4b2a      	ldr	r3, [pc, #168]	; (8010fe8 <prvAddNewTaskToReadyList+0xb8>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	3301      	adds	r3, #1
 8010f42:	4a29      	ldr	r2, [pc, #164]	; (8010fe8 <prvAddNewTaskToReadyList+0xb8>)
 8010f44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010f46:	4b29      	ldr	r3, [pc, #164]	; (8010fec <prvAddNewTaskToReadyList+0xbc>)
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d109      	bne.n	8010f62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010f4e:	4a27      	ldr	r2, [pc, #156]	; (8010fec <prvAddNewTaskToReadyList+0xbc>)
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010f54:	4b24      	ldr	r3, [pc, #144]	; (8010fe8 <prvAddNewTaskToReadyList+0xb8>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	2b01      	cmp	r3, #1
 8010f5a:	d110      	bne.n	8010f7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010f5c:	f000 fc12 	bl	8011784 <prvInitialiseTaskLists>
 8010f60:	e00d      	b.n	8010f7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010f62:	4b23      	ldr	r3, [pc, #140]	; (8010ff0 <prvAddNewTaskToReadyList+0xc0>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d109      	bne.n	8010f7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010f6a:	4b20      	ldr	r3, [pc, #128]	; (8010fec <prvAddNewTaskToReadyList+0xbc>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d802      	bhi.n	8010f7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010f78:	4a1c      	ldr	r2, [pc, #112]	; (8010fec <prvAddNewTaskToReadyList+0xbc>)
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010f7e:	4b1d      	ldr	r3, [pc, #116]	; (8010ff4 <prvAddNewTaskToReadyList+0xc4>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	3301      	adds	r3, #1
 8010f84:	4a1b      	ldr	r2, [pc, #108]	; (8010ff4 <prvAddNewTaskToReadyList+0xc4>)
 8010f86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f8c:	2201      	movs	r2, #1
 8010f8e:	409a      	lsls	r2, r3
 8010f90:	4b19      	ldr	r3, [pc, #100]	; (8010ff8 <prvAddNewTaskToReadyList+0xc8>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	4313      	orrs	r3, r2
 8010f96:	4a18      	ldr	r2, [pc, #96]	; (8010ff8 <prvAddNewTaskToReadyList+0xc8>)
 8010f98:	6013      	str	r3, [r2, #0]
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f9e:	4613      	mov	r3, r2
 8010fa0:	009b      	lsls	r3, r3, #2
 8010fa2:	4413      	add	r3, r2
 8010fa4:	009b      	lsls	r3, r3, #2
 8010fa6:	4a15      	ldr	r2, [pc, #84]	; (8010ffc <prvAddNewTaskToReadyList+0xcc>)
 8010fa8:	441a      	add	r2, r3
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	3304      	adds	r3, #4
 8010fae:	4619      	mov	r1, r3
 8010fb0:	4610      	mov	r0, r2
 8010fb2:	f7fe fe05 	bl	800fbc0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010fb6:	f001 fbef 	bl	8012798 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010fba:	4b0d      	ldr	r3, [pc, #52]	; (8010ff0 <prvAddNewTaskToReadyList+0xc0>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d00e      	beq.n	8010fe0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010fc2:	4b0a      	ldr	r3, [pc, #40]	; (8010fec <prvAddNewTaskToReadyList+0xbc>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	d207      	bcs.n	8010fe0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010fd0:	4b0b      	ldr	r3, [pc, #44]	; (8011000 <prvAddNewTaskToReadyList+0xd0>)
 8010fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fd6:	601a      	str	r2, [r3, #0]
 8010fd8:	f3bf 8f4f 	dsb	sy
 8010fdc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010fe0:	bf00      	nop
 8010fe2:	3708      	adds	r7, #8
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}
 8010fe8:	20012fe4 	.word	0x20012fe4
 8010fec:	20012ee4 	.word	0x20012ee4
 8010ff0:	20012ff0 	.word	0x20012ff0
 8010ff4:	20013000 	.word	0x20013000
 8010ff8:	20012fec 	.word	0x20012fec
 8010ffc:	20012ee8 	.word	0x20012ee8
 8011000:	e000ed04 	.word	0xe000ed04

08011004 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011004:	b580      	push	{r7, lr}
 8011006:	b084      	sub	sp, #16
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801100c:	2300      	movs	r3, #0
 801100e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d016      	beq.n	8011044 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011016:	4b13      	ldr	r3, [pc, #76]	; (8011064 <vTaskDelay+0x60>)
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d009      	beq.n	8011032 <vTaskDelay+0x2e>
 801101e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011022:	f383 8811 	msr	BASEPRI, r3
 8011026:	f3bf 8f6f 	isb	sy
 801102a:	f3bf 8f4f 	dsb	sy
 801102e:	60bb      	str	r3, [r7, #8]
 8011030:	e7fe      	b.n	8011030 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8011032:	f000 f87f 	bl	8011134 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011036:	2100      	movs	r1, #0
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f000 fe2b 	bl	8011c94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801103e:	f000 f887 	bl	8011150 <xTaskResumeAll>
 8011042:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d107      	bne.n	801105a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801104a:	4b07      	ldr	r3, [pc, #28]	; (8011068 <vTaskDelay+0x64>)
 801104c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011050:	601a      	str	r2, [r3, #0]
 8011052:	f3bf 8f4f 	dsb	sy
 8011056:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801105a:	bf00      	nop
 801105c:	3710      	adds	r7, #16
 801105e:	46bd      	mov	sp, r7
 8011060:	bd80      	pop	{r7, pc}
 8011062:	bf00      	nop
 8011064:	2001300c 	.word	0x2001300c
 8011068:	e000ed04 	.word	0xe000ed04

0801106c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b08a      	sub	sp, #40	; 0x28
 8011070:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011072:	2300      	movs	r3, #0
 8011074:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011076:	2300      	movs	r3, #0
 8011078:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801107a:	463a      	mov	r2, r7
 801107c:	1d39      	adds	r1, r7, #4
 801107e:	f107 0308 	add.w	r3, r7, #8
 8011082:	4618      	mov	r0, r3
 8011084:	f7f5 ff54 	bl	8006f30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011088:	6839      	ldr	r1, [r7, #0]
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	68ba      	ldr	r2, [r7, #8]
 801108e:	9202      	str	r2, [sp, #8]
 8011090:	9301      	str	r3, [sp, #4]
 8011092:	2300      	movs	r3, #0
 8011094:	9300      	str	r3, [sp, #0]
 8011096:	2300      	movs	r3, #0
 8011098:	460a      	mov	r2, r1
 801109a:	4920      	ldr	r1, [pc, #128]	; (801111c <vTaskStartScheduler+0xb0>)
 801109c:	4820      	ldr	r0, [pc, #128]	; (8011120 <vTaskStartScheduler+0xb4>)
 801109e:	f7ff fe21 	bl	8010ce4 <xTaskCreateStatic>
 80110a2:	4602      	mov	r2, r0
 80110a4:	4b1f      	ldr	r3, [pc, #124]	; (8011124 <vTaskStartScheduler+0xb8>)
 80110a6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80110a8:	4b1e      	ldr	r3, [pc, #120]	; (8011124 <vTaskStartScheduler+0xb8>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d002      	beq.n	80110b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80110b0:	2301      	movs	r3, #1
 80110b2:	617b      	str	r3, [r7, #20]
 80110b4:	e001      	b.n	80110ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80110b6:	2300      	movs	r3, #0
 80110b8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	2b01      	cmp	r3, #1
 80110be:	d102      	bne.n	80110c6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80110c0:	f000 fe4e 	bl	8011d60 <xTimerCreateTimerTask>
 80110c4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80110c6:	697b      	ldr	r3, [r7, #20]
 80110c8:	2b01      	cmp	r3, #1
 80110ca:	d115      	bne.n	80110f8 <vTaskStartScheduler+0x8c>
 80110cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110d0:	f383 8811 	msr	BASEPRI, r3
 80110d4:	f3bf 8f6f 	isb	sy
 80110d8:	f3bf 8f4f 	dsb	sy
 80110dc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80110de:	4b12      	ldr	r3, [pc, #72]	; (8011128 <vTaskStartScheduler+0xbc>)
 80110e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80110e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80110e6:	4b11      	ldr	r3, [pc, #68]	; (801112c <vTaskStartScheduler+0xc0>)
 80110e8:	2201      	movs	r2, #1
 80110ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80110ec:	4b10      	ldr	r3, [pc, #64]	; (8011130 <vTaskStartScheduler+0xc4>)
 80110ee:	2200      	movs	r2, #0
 80110f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80110f2:	f001 fa85 	bl	8012600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80110f6:	e00d      	b.n	8011114 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110fe:	d109      	bne.n	8011114 <vTaskStartScheduler+0xa8>
 8011100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011104:	f383 8811 	msr	BASEPRI, r3
 8011108:	f3bf 8f6f 	isb	sy
 801110c:	f3bf 8f4f 	dsb	sy
 8011110:	60fb      	str	r3, [r7, #12]
 8011112:	e7fe      	b.n	8011112 <vTaskStartScheduler+0xa6>
}
 8011114:	bf00      	nop
 8011116:	3718      	adds	r7, #24
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}
 801111c:	08027d70 	.word	0x08027d70
 8011120:	08011755 	.word	0x08011755
 8011124:	20013008 	.word	0x20013008
 8011128:	20013004 	.word	0x20013004
 801112c:	20012ff0 	.word	0x20012ff0
 8011130:	20012fe8 	.word	0x20012fe8

08011134 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011134:	b480      	push	{r7}
 8011136:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011138:	4b04      	ldr	r3, [pc, #16]	; (801114c <vTaskSuspendAll+0x18>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	3301      	adds	r3, #1
 801113e:	4a03      	ldr	r2, [pc, #12]	; (801114c <vTaskSuspendAll+0x18>)
 8011140:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8011142:	bf00      	nop
 8011144:	46bd      	mov	sp, r7
 8011146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114a:	4770      	bx	lr
 801114c:	2001300c 	.word	0x2001300c

08011150 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b084      	sub	sp, #16
 8011154:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011156:	2300      	movs	r3, #0
 8011158:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801115a:	2300      	movs	r3, #0
 801115c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801115e:	4b41      	ldr	r3, [pc, #260]	; (8011264 <xTaskResumeAll+0x114>)
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d109      	bne.n	801117a <xTaskResumeAll+0x2a>
 8011166:	f04f 0350 	mov.w	r3, #80	; 0x50
 801116a:	f383 8811 	msr	BASEPRI, r3
 801116e:	f3bf 8f6f 	isb	sy
 8011172:	f3bf 8f4f 	dsb	sy
 8011176:	603b      	str	r3, [r7, #0]
 8011178:	e7fe      	b.n	8011178 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801117a:	f001 fadf 	bl	801273c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801117e:	4b39      	ldr	r3, [pc, #228]	; (8011264 <xTaskResumeAll+0x114>)
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	3b01      	subs	r3, #1
 8011184:	4a37      	ldr	r2, [pc, #220]	; (8011264 <xTaskResumeAll+0x114>)
 8011186:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011188:	4b36      	ldr	r3, [pc, #216]	; (8011264 <xTaskResumeAll+0x114>)
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d161      	bne.n	8011254 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011190:	4b35      	ldr	r3, [pc, #212]	; (8011268 <xTaskResumeAll+0x118>)
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d05d      	beq.n	8011254 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011198:	e02e      	b.n	80111f8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801119a:	4b34      	ldr	r3, [pc, #208]	; (801126c <xTaskResumeAll+0x11c>)
 801119c:	68db      	ldr	r3, [r3, #12]
 801119e:	68db      	ldr	r3, [r3, #12]
 80111a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	3318      	adds	r3, #24
 80111a6:	4618      	mov	r0, r3
 80111a8:	f7fe fd67 	bl	800fc7a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	3304      	adds	r3, #4
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7fe fd62 	bl	800fc7a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111ba:	2201      	movs	r2, #1
 80111bc:	409a      	lsls	r2, r3
 80111be:	4b2c      	ldr	r3, [pc, #176]	; (8011270 <xTaskResumeAll+0x120>)
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	4313      	orrs	r3, r2
 80111c4:	4a2a      	ldr	r2, [pc, #168]	; (8011270 <xTaskResumeAll+0x120>)
 80111c6:	6013      	str	r3, [r2, #0]
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111cc:	4613      	mov	r3, r2
 80111ce:	009b      	lsls	r3, r3, #2
 80111d0:	4413      	add	r3, r2
 80111d2:	009b      	lsls	r3, r3, #2
 80111d4:	4a27      	ldr	r2, [pc, #156]	; (8011274 <xTaskResumeAll+0x124>)
 80111d6:	441a      	add	r2, r3
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	3304      	adds	r3, #4
 80111dc:	4619      	mov	r1, r3
 80111de:	4610      	mov	r0, r2
 80111e0:	f7fe fcee 	bl	800fbc0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111e8:	4b23      	ldr	r3, [pc, #140]	; (8011278 <xTaskResumeAll+0x128>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111ee:	429a      	cmp	r2, r3
 80111f0:	d302      	bcc.n	80111f8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80111f2:	4b22      	ldr	r3, [pc, #136]	; (801127c <xTaskResumeAll+0x12c>)
 80111f4:	2201      	movs	r2, #1
 80111f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80111f8:	4b1c      	ldr	r3, [pc, #112]	; (801126c <xTaskResumeAll+0x11c>)
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d1cc      	bne.n	801119a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d001      	beq.n	801120a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011206:	f000 fb57 	bl	80118b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801120a:	4b1d      	ldr	r3, [pc, #116]	; (8011280 <xTaskResumeAll+0x130>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d010      	beq.n	8011238 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011216:	f000 f859 	bl	80112cc <xTaskIncrementTick>
 801121a:	4603      	mov	r3, r0
 801121c:	2b00      	cmp	r3, #0
 801121e:	d002      	beq.n	8011226 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8011220:	4b16      	ldr	r3, [pc, #88]	; (801127c <xTaskResumeAll+0x12c>)
 8011222:	2201      	movs	r2, #1
 8011224:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	3b01      	subs	r3, #1
 801122a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d1f1      	bne.n	8011216 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8011232:	4b13      	ldr	r3, [pc, #76]	; (8011280 <xTaskResumeAll+0x130>)
 8011234:	2200      	movs	r2, #0
 8011236:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011238:	4b10      	ldr	r3, [pc, #64]	; (801127c <xTaskResumeAll+0x12c>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d009      	beq.n	8011254 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011240:	2301      	movs	r3, #1
 8011242:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011244:	4b0f      	ldr	r3, [pc, #60]	; (8011284 <xTaskResumeAll+0x134>)
 8011246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801124a:	601a      	str	r2, [r3, #0]
 801124c:	f3bf 8f4f 	dsb	sy
 8011250:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011254:	f001 faa0 	bl	8012798 <vPortExitCritical>

	return xAlreadyYielded;
 8011258:	68bb      	ldr	r3, [r7, #8]
}
 801125a:	4618      	mov	r0, r3
 801125c:	3710      	adds	r7, #16
 801125e:	46bd      	mov	sp, r7
 8011260:	bd80      	pop	{r7, pc}
 8011262:	bf00      	nop
 8011264:	2001300c 	.word	0x2001300c
 8011268:	20012fe4 	.word	0x20012fe4
 801126c:	20012fa4 	.word	0x20012fa4
 8011270:	20012fec 	.word	0x20012fec
 8011274:	20012ee8 	.word	0x20012ee8
 8011278:	20012ee4 	.word	0x20012ee4
 801127c:	20012ff8 	.word	0x20012ff8
 8011280:	20012ff4 	.word	0x20012ff4
 8011284:	e000ed04 	.word	0xe000ed04

08011288 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011288:	b480      	push	{r7}
 801128a:	b083      	sub	sp, #12
 801128c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801128e:	4b05      	ldr	r3, [pc, #20]	; (80112a4 <xTaskGetTickCount+0x1c>)
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011294:	687b      	ldr	r3, [r7, #4]
}
 8011296:	4618      	mov	r0, r3
 8011298:	370c      	adds	r7, #12
 801129a:	46bd      	mov	sp, r7
 801129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a0:	4770      	bx	lr
 80112a2:	bf00      	nop
 80112a4:	20012fe8 	.word	0x20012fe8

080112a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b082      	sub	sp, #8
 80112ac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80112ae:	f001 fb21 	bl	80128f4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80112b2:	2300      	movs	r3, #0
 80112b4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80112b6:	4b04      	ldr	r3, [pc, #16]	; (80112c8 <xTaskGetTickCountFromISR+0x20>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80112bc:	683b      	ldr	r3, [r7, #0]
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3708      	adds	r7, #8
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}
 80112c6:	bf00      	nop
 80112c8:	20012fe8 	.word	0x20012fe8

080112cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b086      	sub	sp, #24
 80112d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80112d2:	2300      	movs	r3, #0
 80112d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80112d6:	4b4e      	ldr	r3, [pc, #312]	; (8011410 <xTaskIncrementTick+0x144>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	f040 8087 	bne.w	80113ee <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80112e0:	4b4c      	ldr	r3, [pc, #304]	; (8011414 <xTaskIncrementTick+0x148>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	3301      	adds	r3, #1
 80112e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80112e8:	4a4a      	ldr	r2, [pc, #296]	; (8011414 <xTaskIncrementTick+0x148>)
 80112ea:	693b      	ldr	r3, [r7, #16]
 80112ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80112ee:	693b      	ldr	r3, [r7, #16]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d11f      	bne.n	8011334 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80112f4:	4b48      	ldr	r3, [pc, #288]	; (8011418 <xTaskIncrementTick+0x14c>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d009      	beq.n	8011312 <xTaskIncrementTick+0x46>
 80112fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011302:	f383 8811 	msr	BASEPRI, r3
 8011306:	f3bf 8f6f 	isb	sy
 801130a:	f3bf 8f4f 	dsb	sy
 801130e:	603b      	str	r3, [r7, #0]
 8011310:	e7fe      	b.n	8011310 <xTaskIncrementTick+0x44>
 8011312:	4b41      	ldr	r3, [pc, #260]	; (8011418 <xTaskIncrementTick+0x14c>)
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	60fb      	str	r3, [r7, #12]
 8011318:	4b40      	ldr	r3, [pc, #256]	; (801141c <xTaskIncrementTick+0x150>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	4a3e      	ldr	r2, [pc, #248]	; (8011418 <xTaskIncrementTick+0x14c>)
 801131e:	6013      	str	r3, [r2, #0]
 8011320:	4a3e      	ldr	r2, [pc, #248]	; (801141c <xTaskIncrementTick+0x150>)
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	6013      	str	r3, [r2, #0]
 8011326:	4b3e      	ldr	r3, [pc, #248]	; (8011420 <xTaskIncrementTick+0x154>)
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	3301      	adds	r3, #1
 801132c:	4a3c      	ldr	r2, [pc, #240]	; (8011420 <xTaskIncrementTick+0x154>)
 801132e:	6013      	str	r3, [r2, #0]
 8011330:	f000 fac2 	bl	80118b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011334:	4b3b      	ldr	r3, [pc, #236]	; (8011424 <xTaskIncrementTick+0x158>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	693a      	ldr	r2, [r7, #16]
 801133a:	429a      	cmp	r2, r3
 801133c:	d348      	bcc.n	80113d0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801133e:	4b36      	ldr	r3, [pc, #216]	; (8011418 <xTaskIncrementTick+0x14c>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d104      	bne.n	8011352 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011348:	4b36      	ldr	r3, [pc, #216]	; (8011424 <xTaskIncrementTick+0x158>)
 801134a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801134e:	601a      	str	r2, [r3, #0]
					break;
 8011350:	e03e      	b.n	80113d0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011352:	4b31      	ldr	r3, [pc, #196]	; (8011418 <xTaskIncrementTick+0x14c>)
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	68db      	ldr	r3, [r3, #12]
 8011358:	68db      	ldr	r3, [r3, #12]
 801135a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801135c:	68bb      	ldr	r3, [r7, #8]
 801135e:	685b      	ldr	r3, [r3, #4]
 8011360:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011362:	693a      	ldr	r2, [r7, #16]
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	429a      	cmp	r2, r3
 8011368:	d203      	bcs.n	8011372 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801136a:	4a2e      	ldr	r2, [pc, #184]	; (8011424 <xTaskIncrementTick+0x158>)
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011370:	e02e      	b.n	80113d0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011372:	68bb      	ldr	r3, [r7, #8]
 8011374:	3304      	adds	r3, #4
 8011376:	4618      	mov	r0, r3
 8011378:	f7fe fc7f 	bl	800fc7a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801137c:	68bb      	ldr	r3, [r7, #8]
 801137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011380:	2b00      	cmp	r3, #0
 8011382:	d004      	beq.n	801138e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	3318      	adds	r3, #24
 8011388:	4618      	mov	r0, r3
 801138a:	f7fe fc76 	bl	800fc7a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801138e:	68bb      	ldr	r3, [r7, #8]
 8011390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011392:	2201      	movs	r2, #1
 8011394:	409a      	lsls	r2, r3
 8011396:	4b24      	ldr	r3, [pc, #144]	; (8011428 <xTaskIncrementTick+0x15c>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	4313      	orrs	r3, r2
 801139c:	4a22      	ldr	r2, [pc, #136]	; (8011428 <xTaskIncrementTick+0x15c>)
 801139e:	6013      	str	r3, [r2, #0]
 80113a0:	68bb      	ldr	r3, [r7, #8]
 80113a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113a4:	4613      	mov	r3, r2
 80113a6:	009b      	lsls	r3, r3, #2
 80113a8:	4413      	add	r3, r2
 80113aa:	009b      	lsls	r3, r3, #2
 80113ac:	4a1f      	ldr	r2, [pc, #124]	; (801142c <xTaskIncrementTick+0x160>)
 80113ae:	441a      	add	r2, r3
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	3304      	adds	r3, #4
 80113b4:	4619      	mov	r1, r3
 80113b6:	4610      	mov	r0, r2
 80113b8:	f7fe fc02 	bl	800fbc0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80113bc:	68bb      	ldr	r3, [r7, #8]
 80113be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113c0:	4b1b      	ldr	r3, [pc, #108]	; (8011430 <xTaskIncrementTick+0x164>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113c6:	429a      	cmp	r2, r3
 80113c8:	d3b9      	bcc.n	801133e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80113ca:	2301      	movs	r3, #1
 80113cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80113ce:	e7b6      	b.n	801133e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80113d0:	4b17      	ldr	r3, [pc, #92]	; (8011430 <xTaskIncrementTick+0x164>)
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113d6:	4915      	ldr	r1, [pc, #84]	; (801142c <xTaskIncrementTick+0x160>)
 80113d8:	4613      	mov	r3, r2
 80113da:	009b      	lsls	r3, r3, #2
 80113dc:	4413      	add	r3, r2
 80113de:	009b      	lsls	r3, r3, #2
 80113e0:	440b      	add	r3, r1
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	2b01      	cmp	r3, #1
 80113e6:	d907      	bls.n	80113f8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80113e8:	2301      	movs	r3, #1
 80113ea:	617b      	str	r3, [r7, #20]
 80113ec:	e004      	b.n	80113f8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80113ee:	4b11      	ldr	r3, [pc, #68]	; (8011434 <xTaskIncrementTick+0x168>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	3301      	adds	r3, #1
 80113f4:	4a0f      	ldr	r2, [pc, #60]	; (8011434 <xTaskIncrementTick+0x168>)
 80113f6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80113f8:	4b0f      	ldr	r3, [pc, #60]	; (8011438 <xTaskIncrementTick+0x16c>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d001      	beq.n	8011404 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8011400:	2301      	movs	r3, #1
 8011402:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011404:	697b      	ldr	r3, [r7, #20]
}
 8011406:	4618      	mov	r0, r3
 8011408:	3718      	adds	r7, #24
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}
 801140e:	bf00      	nop
 8011410:	2001300c 	.word	0x2001300c
 8011414:	20012fe8 	.word	0x20012fe8
 8011418:	20012f9c 	.word	0x20012f9c
 801141c:	20012fa0 	.word	0x20012fa0
 8011420:	20012ffc 	.word	0x20012ffc
 8011424:	20013004 	.word	0x20013004
 8011428:	20012fec 	.word	0x20012fec
 801142c:	20012ee8 	.word	0x20012ee8
 8011430:	20012ee4 	.word	0x20012ee4
 8011434:	20012ff4 	.word	0x20012ff4
 8011438:	20012ff8 	.word	0x20012ff8

0801143c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801143c:	b480      	push	{r7}
 801143e:	b087      	sub	sp, #28
 8011440:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011442:	4b26      	ldr	r3, [pc, #152]	; (80114dc <vTaskSwitchContext+0xa0>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d003      	beq.n	8011452 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801144a:	4b25      	ldr	r3, [pc, #148]	; (80114e0 <vTaskSwitchContext+0xa4>)
 801144c:	2201      	movs	r2, #1
 801144e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011450:	e03e      	b.n	80114d0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8011452:	4b23      	ldr	r3, [pc, #140]	; (80114e0 <vTaskSwitchContext+0xa4>)
 8011454:	2200      	movs	r2, #0
 8011456:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011458:	4b22      	ldr	r3, [pc, #136]	; (80114e4 <vTaskSwitchContext+0xa8>)
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	fab3 f383 	clz	r3, r3
 8011464:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011466:	7afb      	ldrb	r3, [r7, #11]
 8011468:	f1c3 031f 	rsb	r3, r3, #31
 801146c:	617b      	str	r3, [r7, #20]
 801146e:	491e      	ldr	r1, [pc, #120]	; (80114e8 <vTaskSwitchContext+0xac>)
 8011470:	697a      	ldr	r2, [r7, #20]
 8011472:	4613      	mov	r3, r2
 8011474:	009b      	lsls	r3, r3, #2
 8011476:	4413      	add	r3, r2
 8011478:	009b      	lsls	r3, r3, #2
 801147a:	440b      	add	r3, r1
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d109      	bne.n	8011496 <vTaskSwitchContext+0x5a>
	__asm volatile
 8011482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011486:	f383 8811 	msr	BASEPRI, r3
 801148a:	f3bf 8f6f 	isb	sy
 801148e:	f3bf 8f4f 	dsb	sy
 8011492:	607b      	str	r3, [r7, #4]
 8011494:	e7fe      	b.n	8011494 <vTaskSwitchContext+0x58>
 8011496:	697a      	ldr	r2, [r7, #20]
 8011498:	4613      	mov	r3, r2
 801149a:	009b      	lsls	r3, r3, #2
 801149c:	4413      	add	r3, r2
 801149e:	009b      	lsls	r3, r3, #2
 80114a0:	4a11      	ldr	r2, [pc, #68]	; (80114e8 <vTaskSwitchContext+0xac>)
 80114a2:	4413      	add	r3, r2
 80114a4:	613b      	str	r3, [r7, #16]
 80114a6:	693b      	ldr	r3, [r7, #16]
 80114a8:	685b      	ldr	r3, [r3, #4]
 80114aa:	685a      	ldr	r2, [r3, #4]
 80114ac:	693b      	ldr	r3, [r7, #16]
 80114ae:	605a      	str	r2, [r3, #4]
 80114b0:	693b      	ldr	r3, [r7, #16]
 80114b2:	685a      	ldr	r2, [r3, #4]
 80114b4:	693b      	ldr	r3, [r7, #16]
 80114b6:	3308      	adds	r3, #8
 80114b8:	429a      	cmp	r2, r3
 80114ba:	d104      	bne.n	80114c6 <vTaskSwitchContext+0x8a>
 80114bc:	693b      	ldr	r3, [r7, #16]
 80114be:	685b      	ldr	r3, [r3, #4]
 80114c0:	685a      	ldr	r2, [r3, #4]
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	605a      	str	r2, [r3, #4]
 80114c6:	693b      	ldr	r3, [r7, #16]
 80114c8:	685b      	ldr	r3, [r3, #4]
 80114ca:	68db      	ldr	r3, [r3, #12]
 80114cc:	4a07      	ldr	r2, [pc, #28]	; (80114ec <vTaskSwitchContext+0xb0>)
 80114ce:	6013      	str	r3, [r2, #0]
}
 80114d0:	bf00      	nop
 80114d2:	371c      	adds	r7, #28
 80114d4:	46bd      	mov	sp, r7
 80114d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114da:	4770      	bx	lr
 80114dc:	2001300c 	.word	0x2001300c
 80114e0:	20012ff8 	.word	0x20012ff8
 80114e4:	20012fec 	.word	0x20012fec
 80114e8:	20012ee8 	.word	0x20012ee8
 80114ec:	20012ee4 	.word	0x20012ee4

080114f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b084      	sub	sp, #16
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
 80114f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d109      	bne.n	8011514 <vTaskPlaceOnEventList+0x24>
 8011500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011504:	f383 8811 	msr	BASEPRI, r3
 8011508:	f3bf 8f6f 	isb	sy
 801150c:	f3bf 8f4f 	dsb	sy
 8011510:	60fb      	str	r3, [r7, #12]
 8011512:	e7fe      	b.n	8011512 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011514:	4b07      	ldr	r3, [pc, #28]	; (8011534 <vTaskPlaceOnEventList+0x44>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	3318      	adds	r3, #24
 801151a:	4619      	mov	r1, r3
 801151c:	6878      	ldr	r0, [r7, #4]
 801151e:	f7fe fb73 	bl	800fc08 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011522:	2101      	movs	r1, #1
 8011524:	6838      	ldr	r0, [r7, #0]
 8011526:	f000 fbb5 	bl	8011c94 <prvAddCurrentTaskToDelayedList>
}
 801152a:	bf00      	nop
 801152c:	3710      	adds	r7, #16
 801152e:	46bd      	mov	sp, r7
 8011530:	bd80      	pop	{r7, pc}
 8011532:	bf00      	nop
 8011534:	20012ee4 	.word	0x20012ee4

08011538 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011538:	b580      	push	{r7, lr}
 801153a:	b086      	sub	sp, #24
 801153c:	af00      	add	r7, sp, #0
 801153e:	60f8      	str	r0, [r7, #12]
 8011540:	60b9      	str	r1, [r7, #8]
 8011542:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d109      	bne.n	801155e <vTaskPlaceOnEventListRestricted+0x26>
 801154a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801154e:	f383 8811 	msr	BASEPRI, r3
 8011552:	f3bf 8f6f 	isb	sy
 8011556:	f3bf 8f4f 	dsb	sy
 801155a:	617b      	str	r3, [r7, #20]
 801155c:	e7fe      	b.n	801155c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801155e:	4b0a      	ldr	r3, [pc, #40]	; (8011588 <vTaskPlaceOnEventListRestricted+0x50>)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	3318      	adds	r3, #24
 8011564:	4619      	mov	r1, r3
 8011566:	68f8      	ldr	r0, [r7, #12]
 8011568:	f7fe fb2a 	bl	800fbc0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d002      	beq.n	8011578 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8011572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011576:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011578:	6879      	ldr	r1, [r7, #4]
 801157a:	68b8      	ldr	r0, [r7, #8]
 801157c:	f000 fb8a 	bl	8011c94 <prvAddCurrentTaskToDelayedList>
	}
 8011580:	bf00      	nop
 8011582:	3718      	adds	r7, #24
 8011584:	46bd      	mov	sp, r7
 8011586:	bd80      	pop	{r7, pc}
 8011588:	20012ee4 	.word	0x20012ee4

0801158c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b086      	sub	sp, #24
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	68db      	ldr	r3, [r3, #12]
 8011598:	68db      	ldr	r3, [r3, #12]
 801159a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801159c:	693b      	ldr	r3, [r7, #16]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d109      	bne.n	80115b6 <xTaskRemoveFromEventList+0x2a>
 80115a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115a6:	f383 8811 	msr	BASEPRI, r3
 80115aa:	f3bf 8f6f 	isb	sy
 80115ae:	f3bf 8f4f 	dsb	sy
 80115b2:	60fb      	str	r3, [r7, #12]
 80115b4:	e7fe      	b.n	80115b4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80115b6:	693b      	ldr	r3, [r7, #16]
 80115b8:	3318      	adds	r3, #24
 80115ba:	4618      	mov	r0, r3
 80115bc:	f7fe fb5d 	bl	800fc7a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80115c0:	4b1d      	ldr	r3, [pc, #116]	; (8011638 <xTaskRemoveFromEventList+0xac>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d11c      	bne.n	8011602 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80115c8:	693b      	ldr	r3, [r7, #16]
 80115ca:	3304      	adds	r3, #4
 80115cc:	4618      	mov	r0, r3
 80115ce:	f7fe fb54 	bl	800fc7a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80115d2:	693b      	ldr	r3, [r7, #16]
 80115d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115d6:	2201      	movs	r2, #1
 80115d8:	409a      	lsls	r2, r3
 80115da:	4b18      	ldr	r3, [pc, #96]	; (801163c <xTaskRemoveFromEventList+0xb0>)
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	4313      	orrs	r3, r2
 80115e0:	4a16      	ldr	r2, [pc, #88]	; (801163c <xTaskRemoveFromEventList+0xb0>)
 80115e2:	6013      	str	r3, [r2, #0]
 80115e4:	693b      	ldr	r3, [r7, #16]
 80115e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115e8:	4613      	mov	r3, r2
 80115ea:	009b      	lsls	r3, r3, #2
 80115ec:	4413      	add	r3, r2
 80115ee:	009b      	lsls	r3, r3, #2
 80115f0:	4a13      	ldr	r2, [pc, #76]	; (8011640 <xTaskRemoveFromEventList+0xb4>)
 80115f2:	441a      	add	r2, r3
 80115f4:	693b      	ldr	r3, [r7, #16]
 80115f6:	3304      	adds	r3, #4
 80115f8:	4619      	mov	r1, r3
 80115fa:	4610      	mov	r0, r2
 80115fc:	f7fe fae0 	bl	800fbc0 <vListInsertEnd>
 8011600:	e005      	b.n	801160e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011602:	693b      	ldr	r3, [r7, #16]
 8011604:	3318      	adds	r3, #24
 8011606:	4619      	mov	r1, r3
 8011608:	480e      	ldr	r0, [pc, #56]	; (8011644 <xTaskRemoveFromEventList+0xb8>)
 801160a:	f7fe fad9 	bl	800fbc0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801160e:	693b      	ldr	r3, [r7, #16]
 8011610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011612:	4b0d      	ldr	r3, [pc, #52]	; (8011648 <xTaskRemoveFromEventList+0xbc>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011618:	429a      	cmp	r2, r3
 801161a:	d905      	bls.n	8011628 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801161c:	2301      	movs	r3, #1
 801161e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011620:	4b0a      	ldr	r3, [pc, #40]	; (801164c <xTaskRemoveFromEventList+0xc0>)
 8011622:	2201      	movs	r2, #1
 8011624:	601a      	str	r2, [r3, #0]
 8011626:	e001      	b.n	801162c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8011628:	2300      	movs	r3, #0
 801162a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801162c:	697b      	ldr	r3, [r7, #20]
}
 801162e:	4618      	mov	r0, r3
 8011630:	3718      	adds	r7, #24
 8011632:	46bd      	mov	sp, r7
 8011634:	bd80      	pop	{r7, pc}
 8011636:	bf00      	nop
 8011638:	2001300c 	.word	0x2001300c
 801163c:	20012fec 	.word	0x20012fec
 8011640:	20012ee8 	.word	0x20012ee8
 8011644:	20012fa4 	.word	0x20012fa4
 8011648:	20012ee4 	.word	0x20012ee4
 801164c:	20012ff8 	.word	0x20012ff8

08011650 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011650:	b480      	push	{r7}
 8011652:	b083      	sub	sp, #12
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011658:	4b06      	ldr	r3, [pc, #24]	; (8011674 <vTaskInternalSetTimeOutState+0x24>)
 801165a:	681a      	ldr	r2, [r3, #0]
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011660:	4b05      	ldr	r3, [pc, #20]	; (8011678 <vTaskInternalSetTimeOutState+0x28>)
 8011662:	681a      	ldr	r2, [r3, #0]
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	605a      	str	r2, [r3, #4]
}
 8011668:	bf00      	nop
 801166a:	370c      	adds	r7, #12
 801166c:	46bd      	mov	sp, r7
 801166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011672:	4770      	bx	lr
 8011674:	20012ffc 	.word	0x20012ffc
 8011678:	20012fe8 	.word	0x20012fe8

0801167c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b088      	sub	sp, #32
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
 8011684:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d109      	bne.n	80116a0 <xTaskCheckForTimeOut+0x24>
 801168c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011690:	f383 8811 	msr	BASEPRI, r3
 8011694:	f3bf 8f6f 	isb	sy
 8011698:	f3bf 8f4f 	dsb	sy
 801169c:	613b      	str	r3, [r7, #16]
 801169e:	e7fe      	b.n	801169e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d109      	bne.n	80116ba <xTaskCheckForTimeOut+0x3e>
 80116a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116aa:	f383 8811 	msr	BASEPRI, r3
 80116ae:	f3bf 8f6f 	isb	sy
 80116b2:	f3bf 8f4f 	dsb	sy
 80116b6:	60fb      	str	r3, [r7, #12]
 80116b8:	e7fe      	b.n	80116b8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80116ba:	f001 f83f 	bl	801273c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80116be:	4b1d      	ldr	r3, [pc, #116]	; (8011734 <xTaskCheckForTimeOut+0xb8>)
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	685b      	ldr	r3, [r3, #4]
 80116c8:	69ba      	ldr	r2, [r7, #24]
 80116ca:	1ad3      	subs	r3, r2, r3
 80116cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80116d6:	d102      	bne.n	80116de <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80116d8:	2300      	movs	r3, #0
 80116da:	61fb      	str	r3, [r7, #28]
 80116dc:	e023      	b.n	8011726 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	681a      	ldr	r2, [r3, #0]
 80116e2:	4b15      	ldr	r3, [pc, #84]	; (8011738 <xTaskCheckForTimeOut+0xbc>)
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	429a      	cmp	r2, r3
 80116e8:	d007      	beq.n	80116fa <xTaskCheckForTimeOut+0x7e>
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	685b      	ldr	r3, [r3, #4]
 80116ee:	69ba      	ldr	r2, [r7, #24]
 80116f0:	429a      	cmp	r2, r3
 80116f2:	d302      	bcc.n	80116fa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80116f4:	2301      	movs	r3, #1
 80116f6:	61fb      	str	r3, [r7, #28]
 80116f8:	e015      	b.n	8011726 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	697a      	ldr	r2, [r7, #20]
 8011700:	429a      	cmp	r2, r3
 8011702:	d20b      	bcs.n	801171c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	681a      	ldr	r2, [r3, #0]
 8011708:	697b      	ldr	r3, [r7, #20]
 801170a:	1ad2      	subs	r2, r2, r3
 801170c:	683b      	ldr	r3, [r7, #0]
 801170e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f7ff ff9d 	bl	8011650 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011716:	2300      	movs	r3, #0
 8011718:	61fb      	str	r3, [r7, #28]
 801171a:	e004      	b.n	8011726 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 801171c:	683b      	ldr	r3, [r7, #0]
 801171e:	2200      	movs	r2, #0
 8011720:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011722:	2301      	movs	r3, #1
 8011724:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011726:	f001 f837 	bl	8012798 <vPortExitCritical>

	return xReturn;
 801172a:	69fb      	ldr	r3, [r7, #28]
}
 801172c:	4618      	mov	r0, r3
 801172e:	3720      	adds	r7, #32
 8011730:	46bd      	mov	sp, r7
 8011732:	bd80      	pop	{r7, pc}
 8011734:	20012fe8 	.word	0x20012fe8
 8011738:	20012ffc 	.word	0x20012ffc

0801173c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801173c:	b480      	push	{r7}
 801173e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011740:	4b03      	ldr	r3, [pc, #12]	; (8011750 <vTaskMissedYield+0x14>)
 8011742:	2201      	movs	r2, #1
 8011744:	601a      	str	r2, [r3, #0]
}
 8011746:	bf00      	nop
 8011748:	46bd      	mov	sp, r7
 801174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174e:	4770      	bx	lr
 8011750:	20012ff8 	.word	0x20012ff8

08011754 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b082      	sub	sp, #8
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801175c:	f000 f852 	bl	8011804 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011760:	4b06      	ldr	r3, [pc, #24]	; (801177c <prvIdleTask+0x28>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	2b01      	cmp	r3, #1
 8011766:	d9f9      	bls.n	801175c <prvIdleTask+0x8>
			{
				taskYIELD();
 8011768:	4b05      	ldr	r3, [pc, #20]	; (8011780 <prvIdleTask+0x2c>)
 801176a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801176e:	601a      	str	r2, [r3, #0]
 8011770:	f3bf 8f4f 	dsb	sy
 8011774:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011778:	e7f0      	b.n	801175c <prvIdleTask+0x8>
 801177a:	bf00      	nop
 801177c:	20012ee8 	.word	0x20012ee8
 8011780:	e000ed04 	.word	0xe000ed04

08011784 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801178a:	2300      	movs	r3, #0
 801178c:	607b      	str	r3, [r7, #4]
 801178e:	e00c      	b.n	80117aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011790:	687a      	ldr	r2, [r7, #4]
 8011792:	4613      	mov	r3, r2
 8011794:	009b      	lsls	r3, r3, #2
 8011796:	4413      	add	r3, r2
 8011798:	009b      	lsls	r3, r3, #2
 801179a:	4a12      	ldr	r2, [pc, #72]	; (80117e4 <prvInitialiseTaskLists+0x60>)
 801179c:	4413      	add	r3, r2
 801179e:	4618      	mov	r0, r3
 80117a0:	f7fe f9e1 	bl	800fb66 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	3301      	adds	r3, #1
 80117a8:	607b      	str	r3, [r7, #4]
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	2b06      	cmp	r3, #6
 80117ae:	d9ef      	bls.n	8011790 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80117b0:	480d      	ldr	r0, [pc, #52]	; (80117e8 <prvInitialiseTaskLists+0x64>)
 80117b2:	f7fe f9d8 	bl	800fb66 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80117b6:	480d      	ldr	r0, [pc, #52]	; (80117ec <prvInitialiseTaskLists+0x68>)
 80117b8:	f7fe f9d5 	bl	800fb66 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80117bc:	480c      	ldr	r0, [pc, #48]	; (80117f0 <prvInitialiseTaskLists+0x6c>)
 80117be:	f7fe f9d2 	bl	800fb66 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80117c2:	480c      	ldr	r0, [pc, #48]	; (80117f4 <prvInitialiseTaskLists+0x70>)
 80117c4:	f7fe f9cf 	bl	800fb66 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80117c8:	480b      	ldr	r0, [pc, #44]	; (80117f8 <prvInitialiseTaskLists+0x74>)
 80117ca:	f7fe f9cc 	bl	800fb66 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80117ce:	4b0b      	ldr	r3, [pc, #44]	; (80117fc <prvInitialiseTaskLists+0x78>)
 80117d0:	4a05      	ldr	r2, [pc, #20]	; (80117e8 <prvInitialiseTaskLists+0x64>)
 80117d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80117d4:	4b0a      	ldr	r3, [pc, #40]	; (8011800 <prvInitialiseTaskLists+0x7c>)
 80117d6:	4a05      	ldr	r2, [pc, #20]	; (80117ec <prvInitialiseTaskLists+0x68>)
 80117d8:	601a      	str	r2, [r3, #0]
}
 80117da:	bf00      	nop
 80117dc:	3708      	adds	r7, #8
 80117de:	46bd      	mov	sp, r7
 80117e0:	bd80      	pop	{r7, pc}
 80117e2:	bf00      	nop
 80117e4:	20012ee8 	.word	0x20012ee8
 80117e8:	20012f74 	.word	0x20012f74
 80117ec:	20012f88 	.word	0x20012f88
 80117f0:	20012fa4 	.word	0x20012fa4
 80117f4:	20012fb8 	.word	0x20012fb8
 80117f8:	20012fd0 	.word	0x20012fd0
 80117fc:	20012f9c 	.word	0x20012f9c
 8011800:	20012fa0 	.word	0x20012fa0

08011804 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b082      	sub	sp, #8
 8011808:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801180a:	e019      	b.n	8011840 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801180c:	f000 ff96 	bl	801273c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011810:	4b0f      	ldr	r3, [pc, #60]	; (8011850 <prvCheckTasksWaitingTermination+0x4c>)
 8011812:	68db      	ldr	r3, [r3, #12]
 8011814:	68db      	ldr	r3, [r3, #12]
 8011816:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	3304      	adds	r3, #4
 801181c:	4618      	mov	r0, r3
 801181e:	f7fe fa2c 	bl	800fc7a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011822:	4b0c      	ldr	r3, [pc, #48]	; (8011854 <prvCheckTasksWaitingTermination+0x50>)
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	3b01      	subs	r3, #1
 8011828:	4a0a      	ldr	r2, [pc, #40]	; (8011854 <prvCheckTasksWaitingTermination+0x50>)
 801182a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801182c:	4b0a      	ldr	r3, [pc, #40]	; (8011858 <prvCheckTasksWaitingTermination+0x54>)
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	3b01      	subs	r3, #1
 8011832:	4a09      	ldr	r2, [pc, #36]	; (8011858 <prvCheckTasksWaitingTermination+0x54>)
 8011834:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011836:	f000 ffaf 	bl	8012798 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801183a:	6878      	ldr	r0, [r7, #4]
 801183c:	f000 f80e 	bl	801185c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011840:	4b05      	ldr	r3, [pc, #20]	; (8011858 <prvCheckTasksWaitingTermination+0x54>)
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d1e1      	bne.n	801180c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011848:	bf00      	nop
 801184a:	3708      	adds	r7, #8
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}
 8011850:	20012fb8 	.word	0x20012fb8
 8011854:	20012fe4 	.word	0x20012fe4
 8011858:	20012fcc 	.word	0x20012fcc

0801185c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801185c:	b580      	push	{r7, lr}
 801185e:	b084      	sub	sp, #16
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801186a:	2b00      	cmp	r3, #0
 801186c:	d108      	bne.n	8011880 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011872:	4618      	mov	r0, r3
 8011874:	f001 f918 	bl	8012aa8 <vPortFree>
				vPortFree( pxTCB );
 8011878:	6878      	ldr	r0, [r7, #4]
 801187a:	f001 f915 	bl	8012aa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801187e:	e017      	b.n	80118b0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011886:	2b01      	cmp	r3, #1
 8011888:	d103      	bne.n	8011892 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801188a:	6878      	ldr	r0, [r7, #4]
 801188c:	f001 f90c 	bl	8012aa8 <vPortFree>
	}
 8011890:	e00e      	b.n	80118b0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011898:	2b02      	cmp	r3, #2
 801189a:	d009      	beq.n	80118b0 <prvDeleteTCB+0x54>
 801189c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a0:	f383 8811 	msr	BASEPRI, r3
 80118a4:	f3bf 8f6f 	isb	sy
 80118a8:	f3bf 8f4f 	dsb	sy
 80118ac:	60fb      	str	r3, [r7, #12]
 80118ae:	e7fe      	b.n	80118ae <prvDeleteTCB+0x52>
	}
 80118b0:	bf00      	nop
 80118b2:	3710      	adds	r7, #16
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}

080118b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80118b8:	b480      	push	{r7}
 80118ba:	b083      	sub	sp, #12
 80118bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80118be:	4b0c      	ldr	r3, [pc, #48]	; (80118f0 <prvResetNextTaskUnblockTime+0x38>)
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d104      	bne.n	80118d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80118c8:	4b0a      	ldr	r3, [pc, #40]	; (80118f4 <prvResetNextTaskUnblockTime+0x3c>)
 80118ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80118ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80118d0:	e008      	b.n	80118e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118d2:	4b07      	ldr	r3, [pc, #28]	; (80118f0 <prvResetNextTaskUnblockTime+0x38>)
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	68db      	ldr	r3, [r3, #12]
 80118d8:	68db      	ldr	r3, [r3, #12]
 80118da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	685b      	ldr	r3, [r3, #4]
 80118e0:	4a04      	ldr	r2, [pc, #16]	; (80118f4 <prvResetNextTaskUnblockTime+0x3c>)
 80118e2:	6013      	str	r3, [r2, #0]
}
 80118e4:	bf00      	nop
 80118e6:	370c      	adds	r7, #12
 80118e8:	46bd      	mov	sp, r7
 80118ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ee:	4770      	bx	lr
 80118f0:	20012f9c 	.word	0x20012f9c
 80118f4:	20013004 	.word	0x20013004

080118f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80118f8:	b480      	push	{r7}
 80118fa:	b083      	sub	sp, #12
 80118fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80118fe:	4b0b      	ldr	r3, [pc, #44]	; (801192c <xTaskGetSchedulerState+0x34>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d102      	bne.n	801190c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011906:	2301      	movs	r3, #1
 8011908:	607b      	str	r3, [r7, #4]
 801190a:	e008      	b.n	801191e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801190c:	4b08      	ldr	r3, [pc, #32]	; (8011930 <xTaskGetSchedulerState+0x38>)
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d102      	bne.n	801191a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011914:	2302      	movs	r3, #2
 8011916:	607b      	str	r3, [r7, #4]
 8011918:	e001      	b.n	801191e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801191a:	2300      	movs	r3, #0
 801191c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801191e:	687b      	ldr	r3, [r7, #4]
	}
 8011920:	4618      	mov	r0, r3
 8011922:	370c      	adds	r7, #12
 8011924:	46bd      	mov	sp, r7
 8011926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192a:	4770      	bx	lr
 801192c:	20012ff0 	.word	0x20012ff0
 8011930:	2001300c 	.word	0x2001300c

08011934 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011934:	b580      	push	{r7, lr}
 8011936:	b084      	sub	sp, #16
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011940:	2300      	movs	r3, #0
 8011942:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d069      	beq.n	8011a1e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801194a:	68bb      	ldr	r3, [r7, #8]
 801194c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801194e:	4b36      	ldr	r3, [pc, #216]	; (8011a28 <xTaskPriorityInherit+0xf4>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011954:	429a      	cmp	r2, r3
 8011956:	d259      	bcs.n	8011a0c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011958:	68bb      	ldr	r3, [r7, #8]
 801195a:	699b      	ldr	r3, [r3, #24]
 801195c:	2b00      	cmp	r3, #0
 801195e:	db06      	blt.n	801196e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011960:	4b31      	ldr	r3, [pc, #196]	; (8011a28 <xTaskPriorityInherit+0xf4>)
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011966:	f1c3 0207 	rsb	r2, r3, #7
 801196a:	68bb      	ldr	r3, [r7, #8]
 801196c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	6959      	ldr	r1, [r3, #20]
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011976:	4613      	mov	r3, r2
 8011978:	009b      	lsls	r3, r3, #2
 801197a:	4413      	add	r3, r2
 801197c:	009b      	lsls	r3, r3, #2
 801197e:	4a2b      	ldr	r2, [pc, #172]	; (8011a2c <xTaskPriorityInherit+0xf8>)
 8011980:	4413      	add	r3, r2
 8011982:	4299      	cmp	r1, r3
 8011984:	d13a      	bne.n	80119fc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011986:	68bb      	ldr	r3, [r7, #8]
 8011988:	3304      	adds	r3, #4
 801198a:	4618      	mov	r0, r3
 801198c:	f7fe f975 	bl	800fc7a <uxListRemove>
 8011990:	4603      	mov	r3, r0
 8011992:	2b00      	cmp	r3, #0
 8011994:	d115      	bne.n	80119c2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8011996:	68bb      	ldr	r3, [r7, #8]
 8011998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801199a:	4924      	ldr	r1, [pc, #144]	; (8011a2c <xTaskPriorityInherit+0xf8>)
 801199c:	4613      	mov	r3, r2
 801199e:	009b      	lsls	r3, r3, #2
 80119a0:	4413      	add	r3, r2
 80119a2:	009b      	lsls	r3, r3, #2
 80119a4:	440b      	add	r3, r1
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d10a      	bne.n	80119c2 <xTaskPriorityInherit+0x8e>
 80119ac:	68bb      	ldr	r3, [r7, #8]
 80119ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119b0:	2201      	movs	r2, #1
 80119b2:	fa02 f303 	lsl.w	r3, r2, r3
 80119b6:	43da      	mvns	r2, r3
 80119b8:	4b1d      	ldr	r3, [pc, #116]	; (8011a30 <xTaskPriorityInherit+0xfc>)
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	4013      	ands	r3, r2
 80119be:	4a1c      	ldr	r2, [pc, #112]	; (8011a30 <xTaskPriorityInherit+0xfc>)
 80119c0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80119c2:	4b19      	ldr	r3, [pc, #100]	; (8011a28 <xTaskPriorityInherit+0xf4>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119c8:	68bb      	ldr	r3, [r7, #8]
 80119ca:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119d0:	2201      	movs	r2, #1
 80119d2:	409a      	lsls	r2, r3
 80119d4:	4b16      	ldr	r3, [pc, #88]	; (8011a30 <xTaskPriorityInherit+0xfc>)
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	4313      	orrs	r3, r2
 80119da:	4a15      	ldr	r2, [pc, #84]	; (8011a30 <xTaskPriorityInherit+0xfc>)
 80119dc:	6013      	str	r3, [r2, #0]
 80119de:	68bb      	ldr	r3, [r7, #8]
 80119e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119e2:	4613      	mov	r3, r2
 80119e4:	009b      	lsls	r3, r3, #2
 80119e6:	4413      	add	r3, r2
 80119e8:	009b      	lsls	r3, r3, #2
 80119ea:	4a10      	ldr	r2, [pc, #64]	; (8011a2c <xTaskPriorityInherit+0xf8>)
 80119ec:	441a      	add	r2, r3
 80119ee:	68bb      	ldr	r3, [r7, #8]
 80119f0:	3304      	adds	r3, #4
 80119f2:	4619      	mov	r1, r3
 80119f4:	4610      	mov	r0, r2
 80119f6:	f7fe f8e3 	bl	800fbc0 <vListInsertEnd>
 80119fa:	e004      	b.n	8011a06 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80119fc:	4b0a      	ldr	r3, [pc, #40]	; (8011a28 <xTaskPriorityInherit+0xf4>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011a06:	2301      	movs	r3, #1
 8011a08:	60fb      	str	r3, [r7, #12]
 8011a0a:	e008      	b.n	8011a1e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011a10:	4b05      	ldr	r3, [pc, #20]	; (8011a28 <xTaskPriorityInherit+0xf4>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a16:	429a      	cmp	r2, r3
 8011a18:	d201      	bcs.n	8011a1e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011a1a:	2301      	movs	r3, #1
 8011a1c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011a1e:	68fb      	ldr	r3, [r7, #12]
	}
 8011a20:	4618      	mov	r0, r3
 8011a22:	3710      	adds	r7, #16
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bd80      	pop	{r7, pc}
 8011a28:	20012ee4 	.word	0x20012ee4
 8011a2c:	20012ee8 	.word	0x20012ee8
 8011a30:	20012fec 	.word	0x20012fec

08011a34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b086      	sub	sp, #24
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011a40:	2300      	movs	r3, #0
 8011a42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d06c      	beq.n	8011b24 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011a4a:	4b39      	ldr	r3, [pc, #228]	; (8011b30 <xTaskPriorityDisinherit+0xfc>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	693a      	ldr	r2, [r7, #16]
 8011a50:	429a      	cmp	r2, r3
 8011a52:	d009      	beq.n	8011a68 <xTaskPriorityDisinherit+0x34>
 8011a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a58:	f383 8811 	msr	BASEPRI, r3
 8011a5c:	f3bf 8f6f 	isb	sy
 8011a60:	f3bf 8f4f 	dsb	sy
 8011a64:	60fb      	str	r3, [r7, #12]
 8011a66:	e7fe      	b.n	8011a66 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8011a68:	693b      	ldr	r3, [r7, #16]
 8011a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d109      	bne.n	8011a84 <xTaskPriorityDisinherit+0x50>
 8011a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a74:	f383 8811 	msr	BASEPRI, r3
 8011a78:	f3bf 8f6f 	isb	sy
 8011a7c:	f3bf 8f4f 	dsb	sy
 8011a80:	60bb      	str	r3, [r7, #8]
 8011a82:	e7fe      	b.n	8011a82 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8011a84:	693b      	ldr	r3, [r7, #16]
 8011a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011a88:	1e5a      	subs	r2, r3, #1
 8011a8a:	693b      	ldr	r3, [r7, #16]
 8011a8c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011a8e:	693b      	ldr	r3, [r7, #16]
 8011a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a92:	693b      	ldr	r3, [r7, #16]
 8011a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a96:	429a      	cmp	r2, r3
 8011a98:	d044      	beq.n	8011b24 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011a9a:	693b      	ldr	r3, [r7, #16]
 8011a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d140      	bne.n	8011b24 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011aa2:	693b      	ldr	r3, [r7, #16]
 8011aa4:	3304      	adds	r3, #4
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	f7fe f8e7 	bl	800fc7a <uxListRemove>
 8011aac:	4603      	mov	r3, r0
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d115      	bne.n	8011ade <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011ab2:	693b      	ldr	r3, [r7, #16]
 8011ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ab6:	491f      	ldr	r1, [pc, #124]	; (8011b34 <xTaskPriorityDisinherit+0x100>)
 8011ab8:	4613      	mov	r3, r2
 8011aba:	009b      	lsls	r3, r3, #2
 8011abc:	4413      	add	r3, r2
 8011abe:	009b      	lsls	r3, r3, #2
 8011ac0:	440b      	add	r3, r1
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d10a      	bne.n	8011ade <xTaskPriorityDisinherit+0xaa>
 8011ac8:	693b      	ldr	r3, [r7, #16]
 8011aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011acc:	2201      	movs	r2, #1
 8011ace:	fa02 f303 	lsl.w	r3, r2, r3
 8011ad2:	43da      	mvns	r2, r3
 8011ad4:	4b18      	ldr	r3, [pc, #96]	; (8011b38 <xTaskPriorityDisinherit+0x104>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	4013      	ands	r3, r2
 8011ada:	4a17      	ldr	r2, [pc, #92]	; (8011b38 <xTaskPriorityDisinherit+0x104>)
 8011adc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011ade:	693b      	ldr	r3, [r7, #16]
 8011ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011ae2:	693b      	ldr	r3, [r7, #16]
 8011ae4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ae6:	693b      	ldr	r3, [r7, #16]
 8011ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aea:	f1c3 0207 	rsb	r2, r3, #7
 8011aee:	693b      	ldr	r3, [r7, #16]
 8011af0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011af2:	693b      	ldr	r3, [r7, #16]
 8011af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011af6:	2201      	movs	r2, #1
 8011af8:	409a      	lsls	r2, r3
 8011afa:	4b0f      	ldr	r3, [pc, #60]	; (8011b38 <xTaskPriorityDisinherit+0x104>)
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	4313      	orrs	r3, r2
 8011b00:	4a0d      	ldr	r2, [pc, #52]	; (8011b38 <xTaskPriorityDisinherit+0x104>)
 8011b02:	6013      	str	r3, [r2, #0]
 8011b04:	693b      	ldr	r3, [r7, #16]
 8011b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b08:	4613      	mov	r3, r2
 8011b0a:	009b      	lsls	r3, r3, #2
 8011b0c:	4413      	add	r3, r2
 8011b0e:	009b      	lsls	r3, r3, #2
 8011b10:	4a08      	ldr	r2, [pc, #32]	; (8011b34 <xTaskPriorityDisinherit+0x100>)
 8011b12:	441a      	add	r2, r3
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	3304      	adds	r3, #4
 8011b18:	4619      	mov	r1, r3
 8011b1a:	4610      	mov	r0, r2
 8011b1c:	f7fe f850 	bl	800fbc0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011b20:	2301      	movs	r3, #1
 8011b22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011b24:	697b      	ldr	r3, [r7, #20]
	}
 8011b26:	4618      	mov	r0, r3
 8011b28:	3718      	adds	r7, #24
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	bd80      	pop	{r7, pc}
 8011b2e:	bf00      	nop
 8011b30:	20012ee4 	.word	0x20012ee4
 8011b34:	20012ee8 	.word	0x20012ee8
 8011b38:	20012fec 	.word	0x20012fec

08011b3c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b088      	sub	sp, #32
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
 8011b44:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011b4a:	2301      	movs	r3, #1
 8011b4c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	f000 8081 	beq.w	8011c58 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011b56:	69bb      	ldr	r3, [r7, #24]
 8011b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d109      	bne.n	8011b72 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8011b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b62:	f383 8811 	msr	BASEPRI, r3
 8011b66:	f3bf 8f6f 	isb	sy
 8011b6a:	f3bf 8f4f 	dsb	sy
 8011b6e:	60fb      	str	r3, [r7, #12]
 8011b70:	e7fe      	b.n	8011b70 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011b72:	69bb      	ldr	r3, [r7, #24]
 8011b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b76:	683a      	ldr	r2, [r7, #0]
 8011b78:	429a      	cmp	r2, r3
 8011b7a:	d902      	bls.n	8011b82 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011b7c:	683b      	ldr	r3, [r7, #0]
 8011b7e:	61fb      	str	r3, [r7, #28]
 8011b80:	e002      	b.n	8011b88 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011b82:	69bb      	ldr	r3, [r7, #24]
 8011b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b86:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011b88:	69bb      	ldr	r3, [r7, #24]
 8011b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b8c:	69fa      	ldr	r2, [r7, #28]
 8011b8e:	429a      	cmp	r2, r3
 8011b90:	d062      	beq.n	8011c58 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011b92:	69bb      	ldr	r3, [r7, #24]
 8011b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011b96:	697a      	ldr	r2, [r7, #20]
 8011b98:	429a      	cmp	r2, r3
 8011b9a:	d15d      	bne.n	8011c58 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011b9c:	4b30      	ldr	r3, [pc, #192]	; (8011c60 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	69ba      	ldr	r2, [r7, #24]
 8011ba2:	429a      	cmp	r2, r3
 8011ba4:	d109      	bne.n	8011bba <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8011ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011baa:	f383 8811 	msr	BASEPRI, r3
 8011bae:	f3bf 8f6f 	isb	sy
 8011bb2:	f3bf 8f4f 	dsb	sy
 8011bb6:	60bb      	str	r3, [r7, #8]
 8011bb8:	e7fe      	b.n	8011bb8 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011bba:	69bb      	ldr	r3, [r7, #24]
 8011bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bbe:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011bc0:	69bb      	ldr	r3, [r7, #24]
 8011bc2:	69fa      	ldr	r2, [r7, #28]
 8011bc4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011bc6:	69bb      	ldr	r3, [r7, #24]
 8011bc8:	699b      	ldr	r3, [r3, #24]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	db04      	blt.n	8011bd8 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011bce:	69fb      	ldr	r3, [r7, #28]
 8011bd0:	f1c3 0207 	rsb	r2, r3, #7
 8011bd4:	69bb      	ldr	r3, [r7, #24]
 8011bd6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011bd8:	69bb      	ldr	r3, [r7, #24]
 8011bda:	6959      	ldr	r1, [r3, #20]
 8011bdc:	693a      	ldr	r2, [r7, #16]
 8011bde:	4613      	mov	r3, r2
 8011be0:	009b      	lsls	r3, r3, #2
 8011be2:	4413      	add	r3, r2
 8011be4:	009b      	lsls	r3, r3, #2
 8011be6:	4a1f      	ldr	r2, [pc, #124]	; (8011c64 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8011be8:	4413      	add	r3, r2
 8011bea:	4299      	cmp	r1, r3
 8011bec:	d134      	bne.n	8011c58 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011bee:	69bb      	ldr	r3, [r7, #24]
 8011bf0:	3304      	adds	r3, #4
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7fe f841 	bl	800fc7a <uxListRemove>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d115      	bne.n	8011c2a <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011bfe:	69bb      	ldr	r3, [r7, #24]
 8011c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c02:	4918      	ldr	r1, [pc, #96]	; (8011c64 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8011c04:	4613      	mov	r3, r2
 8011c06:	009b      	lsls	r3, r3, #2
 8011c08:	4413      	add	r3, r2
 8011c0a:	009b      	lsls	r3, r3, #2
 8011c0c:	440b      	add	r3, r1
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d10a      	bne.n	8011c2a <vTaskPriorityDisinheritAfterTimeout+0xee>
 8011c14:	69bb      	ldr	r3, [r7, #24]
 8011c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c18:	2201      	movs	r2, #1
 8011c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8011c1e:	43da      	mvns	r2, r3
 8011c20:	4b11      	ldr	r3, [pc, #68]	; (8011c68 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	4013      	ands	r3, r2
 8011c26:	4a10      	ldr	r2, [pc, #64]	; (8011c68 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8011c28:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011c2a:	69bb      	ldr	r3, [r7, #24]
 8011c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c2e:	2201      	movs	r2, #1
 8011c30:	409a      	lsls	r2, r3
 8011c32:	4b0d      	ldr	r3, [pc, #52]	; (8011c68 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	4313      	orrs	r3, r2
 8011c38:	4a0b      	ldr	r2, [pc, #44]	; (8011c68 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8011c3a:	6013      	str	r3, [r2, #0]
 8011c3c:	69bb      	ldr	r3, [r7, #24]
 8011c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c40:	4613      	mov	r3, r2
 8011c42:	009b      	lsls	r3, r3, #2
 8011c44:	4413      	add	r3, r2
 8011c46:	009b      	lsls	r3, r3, #2
 8011c48:	4a06      	ldr	r2, [pc, #24]	; (8011c64 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8011c4a:	441a      	add	r2, r3
 8011c4c:	69bb      	ldr	r3, [r7, #24]
 8011c4e:	3304      	adds	r3, #4
 8011c50:	4619      	mov	r1, r3
 8011c52:	4610      	mov	r0, r2
 8011c54:	f7fd ffb4 	bl	800fbc0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011c58:	bf00      	nop
 8011c5a:	3720      	adds	r7, #32
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	bd80      	pop	{r7, pc}
 8011c60:	20012ee4 	.word	0x20012ee4
 8011c64:	20012ee8 	.word	0x20012ee8
 8011c68:	20012fec 	.word	0x20012fec

08011c6c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011c6c:	b480      	push	{r7}
 8011c6e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011c70:	4b07      	ldr	r3, [pc, #28]	; (8011c90 <pvTaskIncrementMutexHeldCount+0x24>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d004      	beq.n	8011c82 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011c78:	4b05      	ldr	r3, [pc, #20]	; (8011c90 <pvTaskIncrementMutexHeldCount+0x24>)
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011c7e:	3201      	adds	r2, #1
 8011c80:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8011c82:	4b03      	ldr	r3, [pc, #12]	; (8011c90 <pvTaskIncrementMutexHeldCount+0x24>)
 8011c84:	681b      	ldr	r3, [r3, #0]
	}
 8011c86:	4618      	mov	r0, r3
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8e:	4770      	bx	lr
 8011c90:	20012ee4 	.word	0x20012ee4

08011c94 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b084      	sub	sp, #16
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	6078      	str	r0, [r7, #4]
 8011c9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011c9e:	4b29      	ldr	r3, [pc, #164]	; (8011d44 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ca4:	4b28      	ldr	r3, [pc, #160]	; (8011d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	3304      	adds	r3, #4
 8011caa:	4618      	mov	r0, r3
 8011cac:	f7fd ffe5 	bl	800fc7a <uxListRemove>
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d10b      	bne.n	8011cce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011cb6:	4b24      	ldr	r3, [pc, #144]	; (8011d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cbc:	2201      	movs	r2, #1
 8011cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8011cc2:	43da      	mvns	r2, r3
 8011cc4:	4b21      	ldr	r3, [pc, #132]	; (8011d4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	4013      	ands	r3, r2
 8011cca:	4a20      	ldr	r2, [pc, #128]	; (8011d4c <prvAddCurrentTaskToDelayedList+0xb8>)
 8011ccc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011cd4:	d10a      	bne.n	8011cec <prvAddCurrentTaskToDelayedList+0x58>
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d007      	beq.n	8011cec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011cdc:	4b1a      	ldr	r3, [pc, #104]	; (8011d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	3304      	adds	r3, #4
 8011ce2:	4619      	mov	r1, r3
 8011ce4:	481a      	ldr	r0, [pc, #104]	; (8011d50 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011ce6:	f7fd ff6b 	bl	800fbc0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011cea:	e026      	b.n	8011d3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011cec:	68fa      	ldr	r2, [r7, #12]
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	4413      	add	r3, r2
 8011cf2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011cf4:	4b14      	ldr	r3, [pc, #80]	; (8011d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	68ba      	ldr	r2, [r7, #8]
 8011cfa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011cfc:	68ba      	ldr	r2, [r7, #8]
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	429a      	cmp	r2, r3
 8011d02:	d209      	bcs.n	8011d18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d04:	4b13      	ldr	r3, [pc, #76]	; (8011d54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011d06:	681a      	ldr	r2, [r3, #0]
 8011d08:	4b0f      	ldr	r3, [pc, #60]	; (8011d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	3304      	adds	r3, #4
 8011d0e:	4619      	mov	r1, r3
 8011d10:	4610      	mov	r0, r2
 8011d12:	f7fd ff79 	bl	800fc08 <vListInsert>
}
 8011d16:	e010      	b.n	8011d3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011d18:	4b0f      	ldr	r3, [pc, #60]	; (8011d58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011d1a:	681a      	ldr	r2, [r3, #0]
 8011d1c:	4b0a      	ldr	r3, [pc, #40]	; (8011d48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	3304      	adds	r3, #4
 8011d22:	4619      	mov	r1, r3
 8011d24:	4610      	mov	r0, r2
 8011d26:	f7fd ff6f 	bl	800fc08 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011d2a:	4b0c      	ldr	r3, [pc, #48]	; (8011d5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	68ba      	ldr	r2, [r7, #8]
 8011d30:	429a      	cmp	r2, r3
 8011d32:	d202      	bcs.n	8011d3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011d34:	4a09      	ldr	r2, [pc, #36]	; (8011d5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8011d36:	68bb      	ldr	r3, [r7, #8]
 8011d38:	6013      	str	r3, [r2, #0]
}
 8011d3a:	bf00      	nop
 8011d3c:	3710      	adds	r7, #16
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	bd80      	pop	{r7, pc}
 8011d42:	bf00      	nop
 8011d44:	20012fe8 	.word	0x20012fe8
 8011d48:	20012ee4 	.word	0x20012ee4
 8011d4c:	20012fec 	.word	0x20012fec
 8011d50:	20012fd0 	.word	0x20012fd0
 8011d54:	20012fa0 	.word	0x20012fa0
 8011d58:	20012f9c 	.word	0x20012f9c
 8011d5c:	20013004 	.word	0x20013004

08011d60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b08a      	sub	sp, #40	; 0x28
 8011d64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011d66:	2300      	movs	r3, #0
 8011d68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011d6a:	f000 fb7f 	bl	801246c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011d6e:	4b1c      	ldr	r3, [pc, #112]	; (8011de0 <xTimerCreateTimerTask+0x80>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d021      	beq.n	8011dba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011d76:	2300      	movs	r3, #0
 8011d78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011d7e:	1d3a      	adds	r2, r7, #4
 8011d80:	f107 0108 	add.w	r1, r7, #8
 8011d84:	f107 030c 	add.w	r3, r7, #12
 8011d88:	4618      	mov	r0, r3
 8011d8a:	f7f5 f8eb 	bl	8006f64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011d8e:	6879      	ldr	r1, [r7, #4]
 8011d90:	68bb      	ldr	r3, [r7, #8]
 8011d92:	68fa      	ldr	r2, [r7, #12]
 8011d94:	9202      	str	r2, [sp, #8]
 8011d96:	9301      	str	r3, [sp, #4]
 8011d98:	2302      	movs	r3, #2
 8011d9a:	9300      	str	r3, [sp, #0]
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	460a      	mov	r2, r1
 8011da0:	4910      	ldr	r1, [pc, #64]	; (8011de4 <xTimerCreateTimerTask+0x84>)
 8011da2:	4811      	ldr	r0, [pc, #68]	; (8011de8 <xTimerCreateTimerTask+0x88>)
 8011da4:	f7fe ff9e 	bl	8010ce4 <xTaskCreateStatic>
 8011da8:	4602      	mov	r2, r0
 8011daa:	4b10      	ldr	r3, [pc, #64]	; (8011dec <xTimerCreateTimerTask+0x8c>)
 8011dac:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011dae:	4b0f      	ldr	r3, [pc, #60]	; (8011dec <xTimerCreateTimerTask+0x8c>)
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d001      	beq.n	8011dba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011db6:	2301      	movs	r3, #1
 8011db8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011dba:	697b      	ldr	r3, [r7, #20]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d109      	bne.n	8011dd4 <xTimerCreateTimerTask+0x74>
 8011dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dc4:	f383 8811 	msr	BASEPRI, r3
 8011dc8:	f3bf 8f6f 	isb	sy
 8011dcc:	f3bf 8f4f 	dsb	sy
 8011dd0:	613b      	str	r3, [r7, #16]
 8011dd2:	e7fe      	b.n	8011dd2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8011dd4:	697b      	ldr	r3, [r7, #20]
}
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	3718      	adds	r7, #24
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	bd80      	pop	{r7, pc}
 8011dde:	bf00      	nop
 8011de0:	20013040 	.word	0x20013040
 8011de4:	08027d78 	.word	0x08027d78
 8011de8:	08012051 	.word	0x08012051
 8011dec:	20013044 	.word	0x20013044

08011df0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b088      	sub	sp, #32
 8011df4:	af02      	add	r7, sp, #8
 8011df6:	60f8      	str	r0, [r7, #12]
 8011df8:	60b9      	str	r1, [r7, #8]
 8011dfa:	607a      	str	r2, [r7, #4]
 8011dfc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8011dfe:	2028      	movs	r0, #40	; 0x28
 8011e00:	f000 fdb6 	bl	8012970 <pvPortMalloc>
 8011e04:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8011e06:	697b      	ldr	r3, [r7, #20]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d00d      	beq.n	8011e28 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8011e0c:	697b      	ldr	r3, [r7, #20]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011e14:	697b      	ldr	r3, [r7, #20]
 8011e16:	9301      	str	r3, [sp, #4]
 8011e18:	6a3b      	ldr	r3, [r7, #32]
 8011e1a:	9300      	str	r3, [sp, #0]
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	687a      	ldr	r2, [r7, #4]
 8011e20:	68b9      	ldr	r1, [r7, #8]
 8011e22:	68f8      	ldr	r0, [r7, #12]
 8011e24:	f000 f841 	bl	8011eaa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011e28:	697b      	ldr	r3, [r7, #20]
	}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3718      	adds	r7, #24
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}

08011e32 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8011e32:	b580      	push	{r7, lr}
 8011e34:	b08a      	sub	sp, #40	; 0x28
 8011e36:	af02      	add	r7, sp, #8
 8011e38:	60f8      	str	r0, [r7, #12]
 8011e3a:	60b9      	str	r1, [r7, #8]
 8011e3c:	607a      	str	r2, [r7, #4]
 8011e3e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8011e40:	2328      	movs	r3, #40	; 0x28
 8011e42:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8011e44:	693b      	ldr	r3, [r7, #16]
 8011e46:	2b28      	cmp	r3, #40	; 0x28
 8011e48:	d009      	beq.n	8011e5e <xTimerCreateStatic+0x2c>
 8011e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e4e:	f383 8811 	msr	BASEPRI, r3
 8011e52:	f3bf 8f6f 	isb	sy
 8011e56:	f3bf 8f4f 	dsb	sy
 8011e5a:	61bb      	str	r3, [r7, #24]
 8011e5c:	e7fe      	b.n	8011e5c <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011e5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8011e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d109      	bne.n	8011e7a <xTimerCreateStatic+0x48>
 8011e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e6a:	f383 8811 	msr	BASEPRI, r3
 8011e6e:	f3bf 8f6f 	isb	sy
 8011e72:	f3bf 8f4f 	dsb	sy
 8011e76:	617b      	str	r3, [r7, #20]
 8011e78:	e7fe      	b.n	8011e78 <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8011e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e7c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8011e7e:	69fb      	ldr	r3, [r7, #28]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d00d      	beq.n	8011ea0 <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8011e84:	69fb      	ldr	r3, [r7, #28]
 8011e86:	2202      	movs	r2, #2
 8011e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011e8c:	69fb      	ldr	r3, [r7, #28]
 8011e8e:	9301      	str	r3, [sp, #4]
 8011e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e92:	9300      	str	r3, [sp, #0]
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	687a      	ldr	r2, [r7, #4]
 8011e98:	68b9      	ldr	r1, [r7, #8]
 8011e9a:	68f8      	ldr	r0, [r7, #12]
 8011e9c:	f000 f805 	bl	8011eaa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011ea0:	69fb      	ldr	r3, [r7, #28]
	}
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	3720      	adds	r7, #32
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}

08011eaa <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8011eaa:	b580      	push	{r7, lr}
 8011eac:	b086      	sub	sp, #24
 8011eae:	af00      	add	r7, sp, #0
 8011eb0:	60f8      	str	r0, [r7, #12]
 8011eb2:	60b9      	str	r1, [r7, #8]
 8011eb4:	607a      	str	r2, [r7, #4]
 8011eb6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8011eb8:	68bb      	ldr	r3, [r7, #8]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d109      	bne.n	8011ed2 <prvInitialiseNewTimer+0x28>
 8011ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ec2:	f383 8811 	msr	BASEPRI, r3
 8011ec6:	f3bf 8f6f 	isb	sy
 8011eca:	f3bf 8f4f 	dsb	sy
 8011ece:	617b      	str	r3, [r7, #20]
 8011ed0:	e7fe      	b.n	8011ed0 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8011ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d01e      	beq.n	8011f16 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8011ed8:	f000 fac8 	bl	801246c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8011edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ede:	68fa      	ldr	r2, [r7, #12]
 8011ee0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8011ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee4:	68ba      	ldr	r2, [r7, #8]
 8011ee6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8011ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eea:	683a      	ldr	r2, [r7, #0]
 8011eec:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8011eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef0:	6a3a      	ldr	r2, [r7, #32]
 8011ef2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8011ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef6:	3304      	adds	r3, #4
 8011ef8:	4618      	mov	r0, r3
 8011efa:	f7fd fe54 	bl	800fba6 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d008      	beq.n	8011f16 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8011f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011f0a:	f043 0304 	orr.w	r3, r3, #4
 8011f0e:	b2da      	uxtb	r2, r3
 8011f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8011f16:	bf00      	nop
 8011f18:	3718      	adds	r7, #24
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}
	...

08011f20 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b08a      	sub	sp, #40	; 0x28
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	60f8      	str	r0, [r7, #12]
 8011f28:	60b9      	str	r1, [r7, #8]
 8011f2a:	607a      	str	r2, [r7, #4]
 8011f2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d109      	bne.n	8011f4c <xTimerGenericCommand+0x2c>
 8011f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f3c:	f383 8811 	msr	BASEPRI, r3
 8011f40:	f3bf 8f6f 	isb	sy
 8011f44:	f3bf 8f4f 	dsb	sy
 8011f48:	623b      	str	r3, [r7, #32]
 8011f4a:	e7fe      	b.n	8011f4a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011f4c:	4b19      	ldr	r3, [pc, #100]	; (8011fb4 <xTimerGenericCommand+0x94>)
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d02a      	beq.n	8011faa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011f60:	68bb      	ldr	r3, [r7, #8]
 8011f62:	2b05      	cmp	r3, #5
 8011f64:	dc18      	bgt.n	8011f98 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011f66:	f7ff fcc7 	bl	80118f8 <xTaskGetSchedulerState>
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	2b02      	cmp	r3, #2
 8011f6e:	d109      	bne.n	8011f84 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011f70:	4b10      	ldr	r3, [pc, #64]	; (8011fb4 <xTimerGenericCommand+0x94>)
 8011f72:	6818      	ldr	r0, [r3, #0]
 8011f74:	f107 0114 	add.w	r1, r7, #20
 8011f78:	2300      	movs	r3, #0
 8011f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f7c:	f7fe f82e 	bl	800ffdc <xQueueGenericSend>
 8011f80:	6278      	str	r0, [r7, #36]	; 0x24
 8011f82:	e012      	b.n	8011faa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011f84:	4b0b      	ldr	r3, [pc, #44]	; (8011fb4 <xTimerGenericCommand+0x94>)
 8011f86:	6818      	ldr	r0, [r3, #0]
 8011f88:	f107 0114 	add.w	r1, r7, #20
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	2200      	movs	r2, #0
 8011f90:	f7fe f824 	bl	800ffdc <xQueueGenericSend>
 8011f94:	6278      	str	r0, [r7, #36]	; 0x24
 8011f96:	e008      	b.n	8011faa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011f98:	4b06      	ldr	r3, [pc, #24]	; (8011fb4 <xTimerGenericCommand+0x94>)
 8011f9a:	6818      	ldr	r0, [r3, #0]
 8011f9c:	f107 0114 	add.w	r1, r7, #20
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	683a      	ldr	r2, [r7, #0]
 8011fa4:	f7fe f914 	bl	80101d0 <xQueueGenericSendFromISR>
 8011fa8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011fac:	4618      	mov	r0, r3
 8011fae:	3728      	adds	r7, #40	; 0x28
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}
 8011fb4:	20013040 	.word	0x20013040

08011fb8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b088      	sub	sp, #32
 8011fbc:	af02      	add	r7, sp, #8
 8011fbe:	6078      	str	r0, [r7, #4]
 8011fc0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011fc2:	4b22      	ldr	r3, [pc, #136]	; (801204c <prvProcessExpiredTimer+0x94>)
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	68db      	ldr	r3, [r3, #12]
 8011fc8:	68db      	ldr	r3, [r3, #12]
 8011fca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011fcc:	697b      	ldr	r3, [r7, #20]
 8011fce:	3304      	adds	r3, #4
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f7fd fe52 	bl	800fc7a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011fd6:	697b      	ldr	r3, [r7, #20]
 8011fd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011fdc:	f003 0304 	and.w	r3, r3, #4
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d021      	beq.n	8012028 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011fe4:	697b      	ldr	r3, [r7, #20]
 8011fe6:	699a      	ldr	r2, [r3, #24]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	18d1      	adds	r1, r2, r3
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	683a      	ldr	r2, [r7, #0]
 8011ff0:	6978      	ldr	r0, [r7, #20]
 8011ff2:	f000 f8d1 	bl	8012198 <prvInsertTimerInActiveList>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d01e      	beq.n	801203a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	9300      	str	r3, [sp, #0]
 8012000:	2300      	movs	r3, #0
 8012002:	687a      	ldr	r2, [r7, #4]
 8012004:	2100      	movs	r1, #0
 8012006:	6978      	ldr	r0, [r7, #20]
 8012008:	f7ff ff8a 	bl	8011f20 <xTimerGenericCommand>
 801200c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801200e:	693b      	ldr	r3, [r7, #16]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d112      	bne.n	801203a <prvProcessExpiredTimer+0x82>
 8012014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012018:	f383 8811 	msr	BASEPRI, r3
 801201c:	f3bf 8f6f 	isb	sy
 8012020:	f3bf 8f4f 	dsb	sy
 8012024:	60fb      	str	r3, [r7, #12]
 8012026:	e7fe      	b.n	8012026 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801202e:	f023 0301 	bic.w	r3, r3, #1
 8012032:	b2da      	uxtb	r2, r3
 8012034:	697b      	ldr	r3, [r7, #20]
 8012036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	6a1b      	ldr	r3, [r3, #32]
 801203e:	6978      	ldr	r0, [r7, #20]
 8012040:	4798      	blx	r3
}
 8012042:	bf00      	nop
 8012044:	3718      	adds	r7, #24
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}
 801204a:	bf00      	nop
 801204c:	20013038 	.word	0x20013038

08012050 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b084      	sub	sp, #16
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012058:	f107 0308 	add.w	r3, r7, #8
 801205c:	4618      	mov	r0, r3
 801205e:	f000 f857 	bl	8012110 <prvGetNextExpireTime>
 8012062:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012064:	68bb      	ldr	r3, [r7, #8]
 8012066:	4619      	mov	r1, r3
 8012068:	68f8      	ldr	r0, [r7, #12]
 801206a:	f000 f803 	bl	8012074 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801206e:	f000 f8d5 	bl	801221c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012072:	e7f1      	b.n	8012058 <prvTimerTask+0x8>

08012074 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b084      	sub	sp, #16
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
 801207c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801207e:	f7ff f859 	bl	8011134 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012082:	f107 0308 	add.w	r3, r7, #8
 8012086:	4618      	mov	r0, r3
 8012088:	f000 f866 	bl	8012158 <prvSampleTimeNow>
 801208c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801208e:	68bb      	ldr	r3, [r7, #8]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d130      	bne.n	80120f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012094:	683b      	ldr	r3, [r7, #0]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d10a      	bne.n	80120b0 <prvProcessTimerOrBlockTask+0x3c>
 801209a:	687a      	ldr	r2, [r7, #4]
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	429a      	cmp	r2, r3
 80120a0:	d806      	bhi.n	80120b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80120a2:	f7ff f855 	bl	8011150 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80120a6:	68f9      	ldr	r1, [r7, #12]
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f7ff ff85 	bl	8011fb8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80120ae:	e024      	b.n	80120fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d008      	beq.n	80120c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80120b6:	4b13      	ldr	r3, [pc, #76]	; (8012104 <prvProcessTimerOrBlockTask+0x90>)
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d101      	bne.n	80120c4 <prvProcessTimerOrBlockTask+0x50>
 80120c0:	2301      	movs	r3, #1
 80120c2:	e000      	b.n	80120c6 <prvProcessTimerOrBlockTask+0x52>
 80120c4:	2300      	movs	r3, #0
 80120c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80120c8:	4b0f      	ldr	r3, [pc, #60]	; (8012108 <prvProcessTimerOrBlockTask+0x94>)
 80120ca:	6818      	ldr	r0, [r3, #0]
 80120cc:	687a      	ldr	r2, [r7, #4]
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	1ad3      	subs	r3, r2, r3
 80120d2:	683a      	ldr	r2, [r7, #0]
 80120d4:	4619      	mov	r1, r3
 80120d6:	f7fe fdd1 	bl	8010c7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80120da:	f7ff f839 	bl	8011150 <xTaskResumeAll>
 80120de:	4603      	mov	r3, r0
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d10a      	bne.n	80120fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80120e4:	4b09      	ldr	r3, [pc, #36]	; (801210c <prvProcessTimerOrBlockTask+0x98>)
 80120e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120ea:	601a      	str	r2, [r3, #0]
 80120ec:	f3bf 8f4f 	dsb	sy
 80120f0:	f3bf 8f6f 	isb	sy
}
 80120f4:	e001      	b.n	80120fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80120f6:	f7ff f82b 	bl	8011150 <xTaskResumeAll>
}
 80120fa:	bf00      	nop
 80120fc:	3710      	adds	r7, #16
 80120fe:	46bd      	mov	sp, r7
 8012100:	bd80      	pop	{r7, pc}
 8012102:	bf00      	nop
 8012104:	2001303c 	.word	0x2001303c
 8012108:	20013040 	.word	0x20013040
 801210c:	e000ed04 	.word	0xe000ed04

08012110 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012110:	b480      	push	{r7}
 8012112:	b085      	sub	sp, #20
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012118:	4b0e      	ldr	r3, [pc, #56]	; (8012154 <prvGetNextExpireTime+0x44>)
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d101      	bne.n	8012126 <prvGetNextExpireTime+0x16>
 8012122:	2201      	movs	r2, #1
 8012124:	e000      	b.n	8012128 <prvGetNextExpireTime+0x18>
 8012126:	2200      	movs	r2, #0
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d105      	bne.n	8012140 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012134:	4b07      	ldr	r3, [pc, #28]	; (8012154 <prvGetNextExpireTime+0x44>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	68db      	ldr	r3, [r3, #12]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	60fb      	str	r3, [r7, #12]
 801213e:	e001      	b.n	8012144 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012140:	2300      	movs	r3, #0
 8012142:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012144:	68fb      	ldr	r3, [r7, #12]
}
 8012146:	4618      	mov	r0, r3
 8012148:	3714      	adds	r7, #20
 801214a:	46bd      	mov	sp, r7
 801214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012150:	4770      	bx	lr
 8012152:	bf00      	nop
 8012154:	20013038 	.word	0x20013038

08012158 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b084      	sub	sp, #16
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012160:	f7ff f892 	bl	8011288 <xTaskGetTickCount>
 8012164:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012166:	4b0b      	ldr	r3, [pc, #44]	; (8012194 <prvSampleTimeNow+0x3c>)
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	68fa      	ldr	r2, [r7, #12]
 801216c:	429a      	cmp	r2, r3
 801216e:	d205      	bcs.n	801217c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012170:	f000 f918 	bl	80123a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	2201      	movs	r2, #1
 8012178:	601a      	str	r2, [r3, #0]
 801217a:	e002      	b.n	8012182 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	2200      	movs	r2, #0
 8012180:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012182:	4a04      	ldr	r2, [pc, #16]	; (8012194 <prvSampleTimeNow+0x3c>)
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012188:	68fb      	ldr	r3, [r7, #12]
}
 801218a:	4618      	mov	r0, r3
 801218c:	3710      	adds	r7, #16
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}
 8012192:	bf00      	nop
 8012194:	20013048 	.word	0x20013048

08012198 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b086      	sub	sp, #24
 801219c:	af00      	add	r7, sp, #0
 801219e:	60f8      	str	r0, [r7, #12]
 80121a0:	60b9      	str	r1, [r7, #8]
 80121a2:	607a      	str	r2, [r7, #4]
 80121a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80121a6:	2300      	movs	r3, #0
 80121a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	68ba      	ldr	r2, [r7, #8]
 80121ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	68fa      	ldr	r2, [r7, #12]
 80121b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80121b6:	68ba      	ldr	r2, [r7, #8]
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	429a      	cmp	r2, r3
 80121bc:	d812      	bhi.n	80121e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121be:	687a      	ldr	r2, [r7, #4]
 80121c0:	683b      	ldr	r3, [r7, #0]
 80121c2:	1ad2      	subs	r2, r2, r3
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	699b      	ldr	r3, [r3, #24]
 80121c8:	429a      	cmp	r2, r3
 80121ca:	d302      	bcc.n	80121d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80121cc:	2301      	movs	r3, #1
 80121ce:	617b      	str	r3, [r7, #20]
 80121d0:	e01b      	b.n	801220a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80121d2:	4b10      	ldr	r3, [pc, #64]	; (8012214 <prvInsertTimerInActiveList+0x7c>)
 80121d4:	681a      	ldr	r2, [r3, #0]
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	3304      	adds	r3, #4
 80121da:	4619      	mov	r1, r3
 80121dc:	4610      	mov	r0, r2
 80121de:	f7fd fd13 	bl	800fc08 <vListInsert>
 80121e2:	e012      	b.n	801220a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80121e4:	687a      	ldr	r2, [r7, #4]
 80121e6:	683b      	ldr	r3, [r7, #0]
 80121e8:	429a      	cmp	r2, r3
 80121ea:	d206      	bcs.n	80121fa <prvInsertTimerInActiveList+0x62>
 80121ec:	68ba      	ldr	r2, [r7, #8]
 80121ee:	683b      	ldr	r3, [r7, #0]
 80121f0:	429a      	cmp	r2, r3
 80121f2:	d302      	bcc.n	80121fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80121f4:	2301      	movs	r3, #1
 80121f6:	617b      	str	r3, [r7, #20]
 80121f8:	e007      	b.n	801220a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80121fa:	4b07      	ldr	r3, [pc, #28]	; (8012218 <prvInsertTimerInActiveList+0x80>)
 80121fc:	681a      	ldr	r2, [r3, #0]
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	3304      	adds	r3, #4
 8012202:	4619      	mov	r1, r3
 8012204:	4610      	mov	r0, r2
 8012206:	f7fd fcff 	bl	800fc08 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801220a:	697b      	ldr	r3, [r7, #20]
}
 801220c:	4618      	mov	r0, r3
 801220e:	3718      	adds	r7, #24
 8012210:	46bd      	mov	sp, r7
 8012212:	bd80      	pop	{r7, pc}
 8012214:	2001303c 	.word	0x2001303c
 8012218:	20013038 	.word	0x20013038

0801221c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b08c      	sub	sp, #48	; 0x30
 8012220:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012222:	e0ac      	b.n	801237e <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	2b00      	cmp	r3, #0
 8012228:	f2c0 80a8 	blt.w	801237c <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801222c:	693b      	ldr	r3, [r7, #16]
 801222e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012232:	695b      	ldr	r3, [r3, #20]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d004      	beq.n	8012242 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801223a:	3304      	adds	r3, #4
 801223c:	4618      	mov	r0, r3
 801223e:	f7fd fd1c 	bl	800fc7a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012242:	1d3b      	adds	r3, r7, #4
 8012244:	4618      	mov	r0, r3
 8012246:	f7ff ff87 	bl	8012158 <prvSampleTimeNow>
 801224a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 801224c:	68bb      	ldr	r3, [r7, #8]
 801224e:	2b09      	cmp	r3, #9
 8012250:	f200 8095 	bhi.w	801237e <prvProcessReceivedCommands+0x162>
 8012254:	a201      	add	r2, pc, #4	; (adr r2, 801225c <prvProcessReceivedCommands+0x40>)
 8012256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801225a:	bf00      	nop
 801225c:	08012285 	.word	0x08012285
 8012260:	08012285 	.word	0x08012285
 8012264:	08012285 	.word	0x08012285
 8012268:	080122f7 	.word	0x080122f7
 801226c:	0801230b 	.word	0x0801230b
 8012270:	08012353 	.word	0x08012353
 8012274:	08012285 	.word	0x08012285
 8012278:	08012285 	.word	0x08012285
 801227c:	080122f7 	.word	0x080122f7
 8012280:	0801230b 	.word	0x0801230b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012286:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801228a:	f043 0301 	orr.w	r3, r3, #1
 801228e:	b2da      	uxtb	r2, r3
 8012290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012296:	68fa      	ldr	r2, [r7, #12]
 8012298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801229a:	699b      	ldr	r3, [r3, #24]
 801229c:	18d1      	adds	r1, r2, r3
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	6a3a      	ldr	r2, [r7, #32]
 80122a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122a4:	f7ff ff78 	bl	8012198 <prvInsertTimerInActiveList>
 80122a8:	4603      	mov	r3, r0
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d067      	beq.n	801237e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80122ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b0:	6a1b      	ldr	r3, [r3, #32]
 80122b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80122b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80122bc:	f003 0304 	and.w	r3, r3, #4
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d05c      	beq.n	801237e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80122c4:	68fa      	ldr	r2, [r7, #12]
 80122c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c8:	699b      	ldr	r3, [r3, #24]
 80122ca:	441a      	add	r2, r3
 80122cc:	2300      	movs	r3, #0
 80122ce:	9300      	str	r3, [sp, #0]
 80122d0:	2300      	movs	r3, #0
 80122d2:	2100      	movs	r1, #0
 80122d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122d6:	f7ff fe23 	bl	8011f20 <xTimerGenericCommand>
 80122da:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80122dc:	69fb      	ldr	r3, [r7, #28]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d14d      	bne.n	801237e <prvProcessReceivedCommands+0x162>
 80122e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122e6:	f383 8811 	msr	BASEPRI, r3
 80122ea:	f3bf 8f6f 	isb	sy
 80122ee:	f3bf 8f4f 	dsb	sy
 80122f2:	61bb      	str	r3, [r7, #24]
 80122f4:	e7fe      	b.n	80122f4 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80122f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80122fc:	f023 0301 	bic.w	r3, r3, #1
 8012300:	b2da      	uxtb	r2, r3
 8012302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8012308:	e039      	b.n	801237e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801230c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012310:	f043 0301 	orr.w	r3, r3, #1
 8012314:	b2da      	uxtb	r2, r3
 8012316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801231c:	68fa      	ldr	r2, [r7, #12]
 801231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012320:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012324:	699b      	ldr	r3, [r3, #24]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d109      	bne.n	801233e <prvProcessReceivedCommands+0x122>
 801232a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801232e:	f383 8811 	msr	BASEPRI, r3
 8012332:	f3bf 8f6f 	isb	sy
 8012336:	f3bf 8f4f 	dsb	sy
 801233a:	617b      	str	r3, [r7, #20]
 801233c:	e7fe      	b.n	801233c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012340:	699a      	ldr	r2, [r3, #24]
 8012342:	6a3b      	ldr	r3, [r7, #32]
 8012344:	18d1      	adds	r1, r2, r3
 8012346:	6a3b      	ldr	r3, [r7, #32]
 8012348:	6a3a      	ldr	r2, [r7, #32]
 801234a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801234c:	f7ff ff24 	bl	8012198 <prvInsertTimerInActiveList>
					break;
 8012350:	e015      	b.n	801237e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012354:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012358:	f003 0302 	and.w	r3, r3, #2
 801235c:	2b00      	cmp	r3, #0
 801235e:	d103      	bne.n	8012368 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8012360:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012362:	f000 fba1 	bl	8012aa8 <vPortFree>
 8012366:	e00a      	b.n	801237e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801236a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801236e:	f023 0301 	bic.w	r3, r3, #1
 8012372:	b2da      	uxtb	r2, r3
 8012374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801237a:	e000      	b.n	801237e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801237c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801237e:	4b08      	ldr	r3, [pc, #32]	; (80123a0 <prvProcessReceivedCommands+0x184>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	f107 0108 	add.w	r1, r7, #8
 8012386:	2200      	movs	r2, #0
 8012388:	4618      	mov	r0, r3
 801238a:	f7fe f83f 	bl	801040c <xQueueReceive>
 801238e:	4603      	mov	r3, r0
 8012390:	2b00      	cmp	r3, #0
 8012392:	f47f af47 	bne.w	8012224 <prvProcessReceivedCommands+0x8>
	}
}
 8012396:	bf00      	nop
 8012398:	3728      	adds	r7, #40	; 0x28
 801239a:	46bd      	mov	sp, r7
 801239c:	bd80      	pop	{r7, pc}
 801239e:	bf00      	nop
 80123a0:	20013040 	.word	0x20013040

080123a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b088      	sub	sp, #32
 80123a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80123aa:	e047      	b.n	801243c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80123ac:	4b2d      	ldr	r3, [pc, #180]	; (8012464 <prvSwitchTimerLists+0xc0>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	68db      	ldr	r3, [r3, #12]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80123b6:	4b2b      	ldr	r3, [pc, #172]	; (8012464 <prvSwitchTimerLists+0xc0>)
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	68db      	ldr	r3, [r3, #12]
 80123bc:	68db      	ldr	r3, [r3, #12]
 80123be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	3304      	adds	r3, #4
 80123c4:	4618      	mov	r0, r3
 80123c6:	f7fd fc58 	bl	800fc7a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	6a1b      	ldr	r3, [r3, #32]
 80123ce:	68f8      	ldr	r0, [r7, #12]
 80123d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80123d8:	f003 0304 	and.w	r3, r3, #4
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d02d      	beq.n	801243c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	699b      	ldr	r3, [r3, #24]
 80123e4:	693a      	ldr	r2, [r7, #16]
 80123e6:	4413      	add	r3, r2
 80123e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80123ea:	68ba      	ldr	r2, [r7, #8]
 80123ec:	693b      	ldr	r3, [r7, #16]
 80123ee:	429a      	cmp	r2, r3
 80123f0:	d90e      	bls.n	8012410 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	68ba      	ldr	r2, [r7, #8]
 80123f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	68fa      	ldr	r2, [r7, #12]
 80123fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80123fe:	4b19      	ldr	r3, [pc, #100]	; (8012464 <prvSwitchTimerLists+0xc0>)
 8012400:	681a      	ldr	r2, [r3, #0]
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	3304      	adds	r3, #4
 8012406:	4619      	mov	r1, r3
 8012408:	4610      	mov	r0, r2
 801240a:	f7fd fbfd 	bl	800fc08 <vListInsert>
 801240e:	e015      	b.n	801243c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012410:	2300      	movs	r3, #0
 8012412:	9300      	str	r3, [sp, #0]
 8012414:	2300      	movs	r3, #0
 8012416:	693a      	ldr	r2, [r7, #16]
 8012418:	2100      	movs	r1, #0
 801241a:	68f8      	ldr	r0, [r7, #12]
 801241c:	f7ff fd80 	bl	8011f20 <xTimerGenericCommand>
 8012420:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d109      	bne.n	801243c <prvSwitchTimerLists+0x98>
 8012428:	f04f 0350 	mov.w	r3, #80	; 0x50
 801242c:	f383 8811 	msr	BASEPRI, r3
 8012430:	f3bf 8f6f 	isb	sy
 8012434:	f3bf 8f4f 	dsb	sy
 8012438:	603b      	str	r3, [r7, #0]
 801243a:	e7fe      	b.n	801243a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801243c:	4b09      	ldr	r3, [pc, #36]	; (8012464 <prvSwitchTimerLists+0xc0>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d1b2      	bne.n	80123ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012446:	4b07      	ldr	r3, [pc, #28]	; (8012464 <prvSwitchTimerLists+0xc0>)
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801244c:	4b06      	ldr	r3, [pc, #24]	; (8012468 <prvSwitchTimerLists+0xc4>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	4a04      	ldr	r2, [pc, #16]	; (8012464 <prvSwitchTimerLists+0xc0>)
 8012452:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012454:	4a04      	ldr	r2, [pc, #16]	; (8012468 <prvSwitchTimerLists+0xc4>)
 8012456:	697b      	ldr	r3, [r7, #20]
 8012458:	6013      	str	r3, [r2, #0]
}
 801245a:	bf00      	nop
 801245c:	3718      	adds	r7, #24
 801245e:	46bd      	mov	sp, r7
 8012460:	bd80      	pop	{r7, pc}
 8012462:	bf00      	nop
 8012464:	20013038 	.word	0x20013038
 8012468:	2001303c 	.word	0x2001303c

0801246c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b082      	sub	sp, #8
 8012470:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012472:	f000 f963 	bl	801273c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012476:	4b15      	ldr	r3, [pc, #84]	; (80124cc <prvCheckForValidListAndQueue+0x60>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	2b00      	cmp	r3, #0
 801247c:	d120      	bne.n	80124c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801247e:	4814      	ldr	r0, [pc, #80]	; (80124d0 <prvCheckForValidListAndQueue+0x64>)
 8012480:	f7fd fb71 	bl	800fb66 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012484:	4813      	ldr	r0, [pc, #76]	; (80124d4 <prvCheckForValidListAndQueue+0x68>)
 8012486:	f7fd fb6e 	bl	800fb66 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801248a:	4b13      	ldr	r3, [pc, #76]	; (80124d8 <prvCheckForValidListAndQueue+0x6c>)
 801248c:	4a10      	ldr	r2, [pc, #64]	; (80124d0 <prvCheckForValidListAndQueue+0x64>)
 801248e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012490:	4b12      	ldr	r3, [pc, #72]	; (80124dc <prvCheckForValidListAndQueue+0x70>)
 8012492:	4a10      	ldr	r2, [pc, #64]	; (80124d4 <prvCheckForValidListAndQueue+0x68>)
 8012494:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012496:	2300      	movs	r3, #0
 8012498:	9300      	str	r3, [sp, #0]
 801249a:	4b11      	ldr	r3, [pc, #68]	; (80124e0 <prvCheckForValidListAndQueue+0x74>)
 801249c:	4a11      	ldr	r2, [pc, #68]	; (80124e4 <prvCheckForValidListAndQueue+0x78>)
 801249e:	210c      	movs	r1, #12
 80124a0:	200a      	movs	r0, #10
 80124a2:	f7fd fc7d 	bl	800fda0 <xQueueGenericCreateStatic>
 80124a6:	4602      	mov	r2, r0
 80124a8:	4b08      	ldr	r3, [pc, #32]	; (80124cc <prvCheckForValidListAndQueue+0x60>)
 80124aa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80124ac:	4b07      	ldr	r3, [pc, #28]	; (80124cc <prvCheckForValidListAndQueue+0x60>)
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d005      	beq.n	80124c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80124b4:	4b05      	ldr	r3, [pc, #20]	; (80124cc <prvCheckForValidListAndQueue+0x60>)
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	490b      	ldr	r1, [pc, #44]	; (80124e8 <prvCheckForValidListAndQueue+0x7c>)
 80124ba:	4618      	mov	r0, r3
 80124bc:	f7fe fb8c 	bl	8010bd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80124c0:	f000 f96a 	bl	8012798 <vPortExitCritical>
}
 80124c4:	bf00      	nop
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bd80      	pop	{r7, pc}
 80124ca:	bf00      	nop
 80124cc:	20013040 	.word	0x20013040
 80124d0:	20013010 	.word	0x20013010
 80124d4:	20013024 	.word	0x20013024
 80124d8:	20013038 	.word	0x20013038
 80124dc:	2001303c 	.word	0x2001303c
 80124e0:	200130c4 	.word	0x200130c4
 80124e4:	2001304c 	.word	0x2001304c
 80124e8:	08027d80 	.word	0x08027d80

080124ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80124ec:	b480      	push	{r7}
 80124ee:	b085      	sub	sp, #20
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	60f8      	str	r0, [r7, #12]
 80124f4:	60b9      	str	r1, [r7, #8]
 80124f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	3b04      	subs	r3, #4
 80124fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012504:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	3b04      	subs	r3, #4
 801250a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801250c:	68bb      	ldr	r3, [r7, #8]
 801250e:	f023 0201 	bic.w	r2, r3, #1
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	3b04      	subs	r3, #4
 801251a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801251c:	4a0c      	ldr	r2, [pc, #48]	; (8012550 <pxPortInitialiseStack+0x64>)
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	3b14      	subs	r3, #20
 8012526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012528:	687a      	ldr	r2, [r7, #4]
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	3b04      	subs	r3, #4
 8012532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	f06f 0202 	mvn.w	r2, #2
 801253a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	3b20      	subs	r3, #32
 8012540:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012542:	68fb      	ldr	r3, [r7, #12]
}
 8012544:	4618      	mov	r0, r3
 8012546:	3714      	adds	r7, #20
 8012548:	46bd      	mov	sp, r7
 801254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254e:	4770      	bx	lr
 8012550:	08012555 	.word	0x08012555

08012554 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012554:	b480      	push	{r7}
 8012556:	b085      	sub	sp, #20
 8012558:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801255a:	2300      	movs	r3, #0
 801255c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801255e:	4b11      	ldr	r3, [pc, #68]	; (80125a4 <prvTaskExitError+0x50>)
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012566:	d009      	beq.n	801257c <prvTaskExitError+0x28>
 8012568:	f04f 0350 	mov.w	r3, #80	; 0x50
 801256c:	f383 8811 	msr	BASEPRI, r3
 8012570:	f3bf 8f6f 	isb	sy
 8012574:	f3bf 8f4f 	dsb	sy
 8012578:	60fb      	str	r3, [r7, #12]
 801257a:	e7fe      	b.n	801257a <prvTaskExitError+0x26>
 801257c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012580:	f383 8811 	msr	BASEPRI, r3
 8012584:	f3bf 8f6f 	isb	sy
 8012588:	f3bf 8f4f 	dsb	sy
 801258c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801258e:	bf00      	nop
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d0fc      	beq.n	8012590 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012596:	bf00      	nop
 8012598:	3714      	adds	r7, #20
 801259a:	46bd      	mov	sp, r7
 801259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a0:	4770      	bx	lr
 80125a2:	bf00      	nop
 80125a4:	2000000c 	.word	0x2000000c
	...

080125b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80125b0:	4b07      	ldr	r3, [pc, #28]	; (80125d0 <pxCurrentTCBConst2>)
 80125b2:	6819      	ldr	r1, [r3, #0]
 80125b4:	6808      	ldr	r0, [r1, #0]
 80125b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125ba:	f380 8809 	msr	PSP, r0
 80125be:	f3bf 8f6f 	isb	sy
 80125c2:	f04f 0000 	mov.w	r0, #0
 80125c6:	f380 8811 	msr	BASEPRI, r0
 80125ca:	4770      	bx	lr
 80125cc:	f3af 8000 	nop.w

080125d0 <pxCurrentTCBConst2>:
 80125d0:	20012ee4 	.word	0x20012ee4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80125d4:	bf00      	nop
 80125d6:	bf00      	nop

080125d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80125d8:	4808      	ldr	r0, [pc, #32]	; (80125fc <prvPortStartFirstTask+0x24>)
 80125da:	6800      	ldr	r0, [r0, #0]
 80125dc:	6800      	ldr	r0, [r0, #0]
 80125de:	f380 8808 	msr	MSP, r0
 80125e2:	f04f 0000 	mov.w	r0, #0
 80125e6:	f380 8814 	msr	CONTROL, r0
 80125ea:	b662      	cpsie	i
 80125ec:	b661      	cpsie	f
 80125ee:	f3bf 8f4f 	dsb	sy
 80125f2:	f3bf 8f6f 	isb	sy
 80125f6:	df00      	svc	0
 80125f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80125fa:	bf00      	nop
 80125fc:	e000ed08 	.word	0xe000ed08

08012600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b086      	sub	sp, #24
 8012604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012606:	4b44      	ldr	r3, [pc, #272]	; (8012718 <xPortStartScheduler+0x118>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	4a44      	ldr	r2, [pc, #272]	; (801271c <xPortStartScheduler+0x11c>)
 801260c:	4293      	cmp	r3, r2
 801260e:	d109      	bne.n	8012624 <xPortStartScheduler+0x24>
 8012610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012614:	f383 8811 	msr	BASEPRI, r3
 8012618:	f3bf 8f6f 	isb	sy
 801261c:	f3bf 8f4f 	dsb	sy
 8012620:	613b      	str	r3, [r7, #16]
 8012622:	e7fe      	b.n	8012622 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012624:	4b3c      	ldr	r3, [pc, #240]	; (8012718 <xPortStartScheduler+0x118>)
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	4a3d      	ldr	r2, [pc, #244]	; (8012720 <xPortStartScheduler+0x120>)
 801262a:	4293      	cmp	r3, r2
 801262c:	d109      	bne.n	8012642 <xPortStartScheduler+0x42>
 801262e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012632:	f383 8811 	msr	BASEPRI, r3
 8012636:	f3bf 8f6f 	isb	sy
 801263a:	f3bf 8f4f 	dsb	sy
 801263e:	60fb      	str	r3, [r7, #12]
 8012640:	e7fe      	b.n	8012640 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012642:	4b38      	ldr	r3, [pc, #224]	; (8012724 <xPortStartScheduler+0x124>)
 8012644:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012646:	697b      	ldr	r3, [r7, #20]
 8012648:	781b      	ldrb	r3, [r3, #0]
 801264a:	b2db      	uxtb	r3, r3
 801264c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801264e:	697b      	ldr	r3, [r7, #20]
 8012650:	22ff      	movs	r2, #255	; 0xff
 8012652:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012654:	697b      	ldr	r3, [r7, #20]
 8012656:	781b      	ldrb	r3, [r3, #0]
 8012658:	b2db      	uxtb	r3, r3
 801265a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801265c:	78fb      	ldrb	r3, [r7, #3]
 801265e:	b2db      	uxtb	r3, r3
 8012660:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012664:	b2da      	uxtb	r2, r3
 8012666:	4b30      	ldr	r3, [pc, #192]	; (8012728 <xPortStartScheduler+0x128>)
 8012668:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801266a:	4b30      	ldr	r3, [pc, #192]	; (801272c <xPortStartScheduler+0x12c>)
 801266c:	2207      	movs	r2, #7
 801266e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012670:	e009      	b.n	8012686 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8012672:	4b2e      	ldr	r3, [pc, #184]	; (801272c <xPortStartScheduler+0x12c>)
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	3b01      	subs	r3, #1
 8012678:	4a2c      	ldr	r2, [pc, #176]	; (801272c <xPortStartScheduler+0x12c>)
 801267a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801267c:	78fb      	ldrb	r3, [r7, #3]
 801267e:	b2db      	uxtb	r3, r3
 8012680:	005b      	lsls	r3, r3, #1
 8012682:	b2db      	uxtb	r3, r3
 8012684:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012686:	78fb      	ldrb	r3, [r7, #3]
 8012688:	b2db      	uxtb	r3, r3
 801268a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801268e:	2b80      	cmp	r3, #128	; 0x80
 8012690:	d0ef      	beq.n	8012672 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012692:	4b26      	ldr	r3, [pc, #152]	; (801272c <xPortStartScheduler+0x12c>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	f1c3 0307 	rsb	r3, r3, #7
 801269a:	2b04      	cmp	r3, #4
 801269c:	d009      	beq.n	80126b2 <xPortStartScheduler+0xb2>
 801269e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126a2:	f383 8811 	msr	BASEPRI, r3
 80126a6:	f3bf 8f6f 	isb	sy
 80126aa:	f3bf 8f4f 	dsb	sy
 80126ae:	60bb      	str	r3, [r7, #8]
 80126b0:	e7fe      	b.n	80126b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80126b2:	4b1e      	ldr	r3, [pc, #120]	; (801272c <xPortStartScheduler+0x12c>)
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	021b      	lsls	r3, r3, #8
 80126b8:	4a1c      	ldr	r2, [pc, #112]	; (801272c <xPortStartScheduler+0x12c>)
 80126ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80126bc:	4b1b      	ldr	r3, [pc, #108]	; (801272c <xPortStartScheduler+0x12c>)
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80126c4:	4a19      	ldr	r2, [pc, #100]	; (801272c <xPortStartScheduler+0x12c>)
 80126c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	b2da      	uxtb	r2, r3
 80126cc:	697b      	ldr	r3, [r7, #20]
 80126ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80126d0:	4b17      	ldr	r3, [pc, #92]	; (8012730 <xPortStartScheduler+0x130>)
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	4a16      	ldr	r2, [pc, #88]	; (8012730 <xPortStartScheduler+0x130>)
 80126d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80126da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80126dc:	4b14      	ldr	r3, [pc, #80]	; (8012730 <xPortStartScheduler+0x130>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	4a13      	ldr	r2, [pc, #76]	; (8012730 <xPortStartScheduler+0x130>)
 80126e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80126e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80126e8:	f000 f8d6 	bl	8012898 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80126ec:	4b11      	ldr	r3, [pc, #68]	; (8012734 <xPortStartScheduler+0x134>)
 80126ee:	2200      	movs	r2, #0
 80126f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80126f2:	f000 f8f5 	bl	80128e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80126f6:	4b10      	ldr	r3, [pc, #64]	; (8012738 <xPortStartScheduler+0x138>)
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	4a0f      	ldr	r2, [pc, #60]	; (8012738 <xPortStartScheduler+0x138>)
 80126fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012700:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012702:	f7ff ff69 	bl	80125d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012706:	f7fe fe99 	bl	801143c <vTaskSwitchContext>
	prvTaskExitError();
 801270a:	f7ff ff23 	bl	8012554 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801270e:	2300      	movs	r3, #0
}
 8012710:	4618      	mov	r0, r3
 8012712:	3718      	adds	r7, #24
 8012714:	46bd      	mov	sp, r7
 8012716:	bd80      	pop	{r7, pc}
 8012718:	e000ed00 	.word	0xe000ed00
 801271c:	410fc271 	.word	0x410fc271
 8012720:	410fc270 	.word	0x410fc270
 8012724:	e000e400 	.word	0xe000e400
 8012728:	2001310c 	.word	0x2001310c
 801272c:	20013110 	.word	0x20013110
 8012730:	e000ed20 	.word	0xe000ed20
 8012734:	2000000c 	.word	0x2000000c
 8012738:	e000ef34 	.word	0xe000ef34

0801273c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801273c:	b480      	push	{r7}
 801273e:	b083      	sub	sp, #12
 8012740:	af00      	add	r7, sp, #0
 8012742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012746:	f383 8811 	msr	BASEPRI, r3
 801274a:	f3bf 8f6f 	isb	sy
 801274e:	f3bf 8f4f 	dsb	sy
 8012752:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012754:	4b0e      	ldr	r3, [pc, #56]	; (8012790 <vPortEnterCritical+0x54>)
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	3301      	adds	r3, #1
 801275a:	4a0d      	ldr	r2, [pc, #52]	; (8012790 <vPortEnterCritical+0x54>)
 801275c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801275e:	4b0c      	ldr	r3, [pc, #48]	; (8012790 <vPortEnterCritical+0x54>)
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	2b01      	cmp	r3, #1
 8012764:	d10e      	bne.n	8012784 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012766:	4b0b      	ldr	r3, [pc, #44]	; (8012794 <vPortEnterCritical+0x58>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	b2db      	uxtb	r3, r3
 801276c:	2b00      	cmp	r3, #0
 801276e:	d009      	beq.n	8012784 <vPortEnterCritical+0x48>
 8012770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012774:	f383 8811 	msr	BASEPRI, r3
 8012778:	f3bf 8f6f 	isb	sy
 801277c:	f3bf 8f4f 	dsb	sy
 8012780:	603b      	str	r3, [r7, #0]
 8012782:	e7fe      	b.n	8012782 <vPortEnterCritical+0x46>
	}
}
 8012784:	bf00      	nop
 8012786:	370c      	adds	r7, #12
 8012788:	46bd      	mov	sp, r7
 801278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278e:	4770      	bx	lr
 8012790:	2000000c 	.word	0x2000000c
 8012794:	e000ed04 	.word	0xe000ed04

08012798 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012798:	b480      	push	{r7}
 801279a:	b083      	sub	sp, #12
 801279c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801279e:	4b11      	ldr	r3, [pc, #68]	; (80127e4 <vPortExitCritical+0x4c>)
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d109      	bne.n	80127ba <vPortExitCritical+0x22>
 80127a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127aa:	f383 8811 	msr	BASEPRI, r3
 80127ae:	f3bf 8f6f 	isb	sy
 80127b2:	f3bf 8f4f 	dsb	sy
 80127b6:	607b      	str	r3, [r7, #4]
 80127b8:	e7fe      	b.n	80127b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80127ba:	4b0a      	ldr	r3, [pc, #40]	; (80127e4 <vPortExitCritical+0x4c>)
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	3b01      	subs	r3, #1
 80127c0:	4a08      	ldr	r2, [pc, #32]	; (80127e4 <vPortExitCritical+0x4c>)
 80127c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80127c4:	4b07      	ldr	r3, [pc, #28]	; (80127e4 <vPortExitCritical+0x4c>)
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d104      	bne.n	80127d6 <vPortExitCritical+0x3e>
 80127cc:	2300      	movs	r3, #0
 80127ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80127d6:	bf00      	nop
 80127d8:	370c      	adds	r7, #12
 80127da:	46bd      	mov	sp, r7
 80127dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e0:	4770      	bx	lr
 80127e2:	bf00      	nop
 80127e4:	2000000c 	.word	0x2000000c
	...

080127f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80127f0:	f3ef 8009 	mrs	r0, PSP
 80127f4:	f3bf 8f6f 	isb	sy
 80127f8:	4b15      	ldr	r3, [pc, #84]	; (8012850 <pxCurrentTCBConst>)
 80127fa:	681a      	ldr	r2, [r3, #0]
 80127fc:	f01e 0f10 	tst.w	lr, #16
 8012800:	bf08      	it	eq
 8012802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801280a:	6010      	str	r0, [r2, #0]
 801280c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012810:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012814:	f380 8811 	msr	BASEPRI, r0
 8012818:	f3bf 8f4f 	dsb	sy
 801281c:	f3bf 8f6f 	isb	sy
 8012820:	f7fe fe0c 	bl	801143c <vTaskSwitchContext>
 8012824:	f04f 0000 	mov.w	r0, #0
 8012828:	f380 8811 	msr	BASEPRI, r0
 801282c:	bc09      	pop	{r0, r3}
 801282e:	6819      	ldr	r1, [r3, #0]
 8012830:	6808      	ldr	r0, [r1, #0]
 8012832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012836:	f01e 0f10 	tst.w	lr, #16
 801283a:	bf08      	it	eq
 801283c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012840:	f380 8809 	msr	PSP, r0
 8012844:	f3bf 8f6f 	isb	sy
 8012848:	4770      	bx	lr
 801284a:	bf00      	nop
 801284c:	f3af 8000 	nop.w

08012850 <pxCurrentTCBConst>:
 8012850:	20012ee4 	.word	0x20012ee4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012854:	bf00      	nop
 8012856:	bf00      	nop

08012858 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b082      	sub	sp, #8
 801285c:	af00      	add	r7, sp, #0
	__asm volatile
 801285e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012862:	f383 8811 	msr	BASEPRI, r3
 8012866:	f3bf 8f6f 	isb	sy
 801286a:	f3bf 8f4f 	dsb	sy
 801286e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012870:	f7fe fd2c 	bl	80112cc <xTaskIncrementTick>
 8012874:	4603      	mov	r3, r0
 8012876:	2b00      	cmp	r3, #0
 8012878:	d003      	beq.n	8012882 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801287a:	4b06      	ldr	r3, [pc, #24]	; (8012894 <SysTick_Handler+0x3c>)
 801287c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012880:	601a      	str	r2, [r3, #0]
 8012882:	2300      	movs	r3, #0
 8012884:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012886:	683b      	ldr	r3, [r7, #0]
 8012888:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801288c:	bf00      	nop
 801288e:	3708      	adds	r7, #8
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}
 8012894:	e000ed04 	.word	0xe000ed04

08012898 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012898:	b480      	push	{r7}
 801289a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801289c:	4b0b      	ldr	r3, [pc, #44]	; (80128cc <vPortSetupTimerInterrupt+0x34>)
 801289e:	2200      	movs	r2, #0
 80128a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80128a2:	4b0b      	ldr	r3, [pc, #44]	; (80128d0 <vPortSetupTimerInterrupt+0x38>)
 80128a4:	2200      	movs	r2, #0
 80128a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80128a8:	4b0a      	ldr	r3, [pc, #40]	; (80128d4 <vPortSetupTimerInterrupt+0x3c>)
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	4a0a      	ldr	r2, [pc, #40]	; (80128d8 <vPortSetupTimerInterrupt+0x40>)
 80128ae:	fba2 2303 	umull	r2, r3, r2, r3
 80128b2:	099b      	lsrs	r3, r3, #6
 80128b4:	4a09      	ldr	r2, [pc, #36]	; (80128dc <vPortSetupTimerInterrupt+0x44>)
 80128b6:	3b01      	subs	r3, #1
 80128b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80128ba:	4b04      	ldr	r3, [pc, #16]	; (80128cc <vPortSetupTimerInterrupt+0x34>)
 80128bc:	2207      	movs	r2, #7
 80128be:	601a      	str	r2, [r3, #0]
}
 80128c0:	bf00      	nop
 80128c2:	46bd      	mov	sp, r7
 80128c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c8:	4770      	bx	lr
 80128ca:	bf00      	nop
 80128cc:	e000e010 	.word	0xe000e010
 80128d0:	e000e018 	.word	0xe000e018
 80128d4:	20000000 	.word	0x20000000
 80128d8:	10624dd3 	.word	0x10624dd3
 80128dc:	e000e014 	.word	0xe000e014

080128e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80128e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80128f0 <vPortEnableVFP+0x10>
 80128e4:	6801      	ldr	r1, [r0, #0]
 80128e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80128ea:	6001      	str	r1, [r0, #0]
 80128ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80128ee:	bf00      	nop
 80128f0:	e000ed88 	.word	0xe000ed88

080128f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80128f4:	b480      	push	{r7}
 80128f6:	b085      	sub	sp, #20
 80128f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80128fa:	f3ef 8305 	mrs	r3, IPSR
 80128fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	2b0f      	cmp	r3, #15
 8012904:	d913      	bls.n	801292e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012906:	4a16      	ldr	r2, [pc, #88]	; (8012960 <vPortValidateInterruptPriority+0x6c>)
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	4413      	add	r3, r2
 801290c:	781b      	ldrb	r3, [r3, #0]
 801290e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012910:	4b14      	ldr	r3, [pc, #80]	; (8012964 <vPortValidateInterruptPriority+0x70>)
 8012912:	781b      	ldrb	r3, [r3, #0]
 8012914:	7afa      	ldrb	r2, [r7, #11]
 8012916:	429a      	cmp	r2, r3
 8012918:	d209      	bcs.n	801292e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801291a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801291e:	f383 8811 	msr	BASEPRI, r3
 8012922:	f3bf 8f6f 	isb	sy
 8012926:	f3bf 8f4f 	dsb	sy
 801292a:	607b      	str	r3, [r7, #4]
 801292c:	e7fe      	b.n	801292c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801292e:	4b0e      	ldr	r3, [pc, #56]	; (8012968 <vPortValidateInterruptPriority+0x74>)
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012936:	4b0d      	ldr	r3, [pc, #52]	; (801296c <vPortValidateInterruptPriority+0x78>)
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	429a      	cmp	r2, r3
 801293c:	d909      	bls.n	8012952 <vPortValidateInterruptPriority+0x5e>
 801293e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012942:	f383 8811 	msr	BASEPRI, r3
 8012946:	f3bf 8f6f 	isb	sy
 801294a:	f3bf 8f4f 	dsb	sy
 801294e:	603b      	str	r3, [r7, #0]
 8012950:	e7fe      	b.n	8012950 <vPortValidateInterruptPriority+0x5c>
	}
 8012952:	bf00      	nop
 8012954:	3714      	adds	r7, #20
 8012956:	46bd      	mov	sp, r7
 8012958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295c:	4770      	bx	lr
 801295e:	bf00      	nop
 8012960:	e000e3f0 	.word	0xe000e3f0
 8012964:	2001310c 	.word	0x2001310c
 8012968:	e000ed0c 	.word	0xe000ed0c
 801296c:	20013110 	.word	0x20013110

08012970 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b088      	sub	sp, #32
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012978:	2300      	movs	r3, #0
 801297a:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 801297c:	4b45      	ldr	r3, [pc, #276]	; (8012a94 <pvPortMalloc+0x124>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d109      	bne.n	8012998 <pvPortMalloc+0x28>
 8012984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012988:	f383 8811 	msr	BASEPRI, r3
 801298c:	f3bf 8f6f 	isb	sy
 8012990:	f3bf 8f4f 	dsb	sy
 8012994:	60fb      	str	r3, [r7, #12]
 8012996:	e7fe      	b.n	8012996 <pvPortMalloc+0x26>

	vTaskSuspendAll();
 8012998:	f7fe fbcc 	bl	8011134 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801299c:	4b3e      	ldr	r3, [pc, #248]	; (8012a98 <pvPortMalloc+0x128>)
 801299e:	681a      	ldr	r2, [r3, #0]
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	4013      	ands	r3, r2
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d16d      	bne.n	8012a84 <pvPortMalloc+0x114>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d00d      	beq.n	80129ca <pvPortMalloc+0x5a>
			{
				xWantedSize += xHeapStructSize;
 80129ae:	2208      	movs	r2, #8
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	4413      	add	r3, r2
 80129b4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	f003 0307 	and.w	r3, r3, #7
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d004      	beq.n	80129ca <pvPortMalloc+0x5a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	f023 0307 	bic.w	r3, r3, #7
 80129c6:	3308      	adds	r3, #8
 80129c8:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d059      	beq.n	8012a84 <pvPortMalloc+0x114>
 80129d0:	4b32      	ldr	r3, [pc, #200]	; (8012a9c <pvPortMalloc+0x12c>)
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	687a      	ldr	r2, [r7, #4]
 80129d6:	429a      	cmp	r2, r3
 80129d8:	d854      	bhi.n	8012a84 <pvPortMalloc+0x114>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80129da:	4b31      	ldr	r3, [pc, #196]	; (8012aa0 <pvPortMalloc+0x130>)
 80129dc:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 80129de:	4b30      	ldr	r3, [pc, #192]	; (8012aa0 <pvPortMalloc+0x130>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80129e4:	e004      	b.n	80129f0 <pvPortMalloc+0x80>
				{
					pxPreviousBlock = pxBlock;
 80129e6:	69fb      	ldr	r3, [r7, #28]
 80129e8:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 80129ea:	69fb      	ldr	r3, [r7, #28]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80129f0:	69fb      	ldr	r3, [r7, #28]
 80129f2:	685b      	ldr	r3, [r3, #4]
 80129f4:	687a      	ldr	r2, [r7, #4]
 80129f6:	429a      	cmp	r2, r3
 80129f8:	d903      	bls.n	8012a02 <pvPortMalloc+0x92>
 80129fa:	69fb      	ldr	r3, [r7, #28]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d1f1      	bne.n	80129e6 <pvPortMalloc+0x76>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012a02:	4b24      	ldr	r3, [pc, #144]	; (8012a94 <pvPortMalloc+0x124>)
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	69fa      	ldr	r2, [r7, #28]
 8012a08:	429a      	cmp	r2, r3
 8012a0a:	d03b      	beq.n	8012a84 <pvPortMalloc+0x114>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012a0c:	69bb      	ldr	r3, [r7, #24]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	2208      	movs	r2, #8
 8012a12:	4413      	add	r3, r2
 8012a14:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012a16:	69fb      	ldr	r3, [r7, #28]
 8012a18:	681a      	ldr	r2, [r3, #0]
 8012a1a:	69bb      	ldr	r3, [r7, #24]
 8012a1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012a1e:	69fb      	ldr	r3, [r7, #28]
 8012a20:	685a      	ldr	r2, [r3, #4]
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	1ad2      	subs	r2, r2, r3
 8012a26:	2308      	movs	r3, #8
 8012a28:	005b      	lsls	r3, r3, #1
 8012a2a:	429a      	cmp	r2, r3
 8012a2c:	d90f      	bls.n	8012a4e <pvPortMalloc+0xde>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012a2e:	69fa      	ldr	r2, [r7, #28]
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	4413      	add	r3, r2
 8012a34:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012a36:	69fb      	ldr	r3, [r7, #28]
 8012a38:	685a      	ldr	r2, [r3, #4]
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	1ad2      	subs	r2, r2, r3
 8012a3e:	693b      	ldr	r3, [r7, #16]
 8012a40:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012a42:	69fb      	ldr	r3, [r7, #28]
 8012a44:	687a      	ldr	r2, [r7, #4]
 8012a46:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8012a48:	6938      	ldr	r0, [r7, #16]
 8012a4a:	f000 f885 	bl	8012b58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012a4e:	4b13      	ldr	r3, [pc, #76]	; (8012a9c <pvPortMalloc+0x12c>)
 8012a50:	681a      	ldr	r2, [r3, #0]
 8012a52:	69fb      	ldr	r3, [r7, #28]
 8012a54:	685b      	ldr	r3, [r3, #4]
 8012a56:	1ad3      	subs	r3, r2, r3
 8012a58:	4a10      	ldr	r2, [pc, #64]	; (8012a9c <pvPortMalloc+0x12c>)
 8012a5a:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012a5c:	4b0f      	ldr	r3, [pc, #60]	; (8012a9c <pvPortMalloc+0x12c>)
 8012a5e:	681a      	ldr	r2, [r3, #0]
 8012a60:	4b10      	ldr	r3, [pc, #64]	; (8012aa4 <pvPortMalloc+0x134>)
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	429a      	cmp	r2, r3
 8012a66:	d203      	bcs.n	8012a70 <pvPortMalloc+0x100>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012a68:	4b0c      	ldr	r3, [pc, #48]	; (8012a9c <pvPortMalloc+0x12c>)
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	4a0d      	ldr	r2, [pc, #52]	; (8012aa4 <pvPortMalloc+0x134>)
 8012a6e:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012a70:	69fb      	ldr	r3, [r7, #28]
 8012a72:	685a      	ldr	r2, [r3, #4]
 8012a74:	4b08      	ldr	r3, [pc, #32]	; (8012a98 <pvPortMalloc+0x128>)
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	431a      	orrs	r2, r3
 8012a7a:	69fb      	ldr	r3, [r7, #28]
 8012a7c:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012a7e:	69fb      	ldr	r3, [r7, #28]
 8012a80:	2200      	movs	r2, #0
 8012a82:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012a84:	f7fe fb64 	bl	8011150 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 8012a88:	697b      	ldr	r3, [r7, #20]
}
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	3720      	adds	r7, #32
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	bd80      	pop	{r7, pc}
 8012a92:	bf00      	nop
 8012a94:	2001311c 	.word	0x2001311c
 8012a98:	20013128 	.word	0x20013128
 8012a9c:	20013120 	.word	0x20013120
 8012aa0:	20013114 	.word	0x20013114
 8012aa4:	20013124 	.word	0x20013124

08012aa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012aa8:	b580      	push	{r7, lr}
 8012aaa:	b086      	sub	sp, #24
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d046      	beq.n	8012b48 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012aba:	2308      	movs	r3, #8
 8012abc:	425b      	negs	r3, r3
 8012abe:	697a      	ldr	r2, [r7, #20]
 8012ac0:	4413      	add	r3, r2
 8012ac2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012ac4:	697b      	ldr	r3, [r7, #20]
 8012ac6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012ac8:	693b      	ldr	r3, [r7, #16]
 8012aca:	685a      	ldr	r2, [r3, #4]
 8012acc:	4b20      	ldr	r3, [pc, #128]	; (8012b50 <vPortFree+0xa8>)
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	4013      	ands	r3, r2
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d109      	bne.n	8012aea <vPortFree+0x42>
 8012ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ada:	f383 8811 	msr	BASEPRI, r3
 8012ade:	f3bf 8f6f 	isb	sy
 8012ae2:	f3bf 8f4f 	dsb	sy
 8012ae6:	60fb      	str	r3, [r7, #12]
 8012ae8:	e7fe      	b.n	8012ae8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012aea:	693b      	ldr	r3, [r7, #16]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d009      	beq.n	8012b06 <vPortFree+0x5e>
 8012af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012af6:	f383 8811 	msr	BASEPRI, r3
 8012afa:	f3bf 8f6f 	isb	sy
 8012afe:	f3bf 8f4f 	dsb	sy
 8012b02:	60bb      	str	r3, [r7, #8]
 8012b04:	e7fe      	b.n	8012b04 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012b06:	693b      	ldr	r3, [r7, #16]
 8012b08:	685a      	ldr	r2, [r3, #4]
 8012b0a:	4b11      	ldr	r3, [pc, #68]	; (8012b50 <vPortFree+0xa8>)
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	4013      	ands	r3, r2
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d019      	beq.n	8012b48 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012b14:	693b      	ldr	r3, [r7, #16]
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d115      	bne.n	8012b48 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012b1c:	693b      	ldr	r3, [r7, #16]
 8012b1e:	685a      	ldr	r2, [r3, #4]
 8012b20:	4b0b      	ldr	r3, [pc, #44]	; (8012b50 <vPortFree+0xa8>)
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	43db      	mvns	r3, r3
 8012b26:	401a      	ands	r2, r3
 8012b28:	693b      	ldr	r3, [r7, #16]
 8012b2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012b2c:	f7fe fb02 	bl	8011134 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012b30:	693b      	ldr	r3, [r7, #16]
 8012b32:	685a      	ldr	r2, [r3, #4]
 8012b34:	4b07      	ldr	r3, [pc, #28]	; (8012b54 <vPortFree+0xac>)
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	4413      	add	r3, r2
 8012b3a:	4a06      	ldr	r2, [pc, #24]	; (8012b54 <vPortFree+0xac>)
 8012b3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012b3e:	6938      	ldr	r0, [r7, #16]
 8012b40:	f000 f80a 	bl	8012b58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012b44:	f7fe fb04 	bl	8011150 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012b48:	bf00      	nop
 8012b4a:	3718      	adds	r7, #24
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}
 8012b50:	20013128 	.word	0x20013128
 8012b54:	20013120 	.word	0x20013120

08012b58 <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012b58:	b480      	push	{r7}
 8012b5a:	b085      	sub	sp, #20
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012b60:	4b28      	ldr	r3, [pc, #160]	; (8012c04 <prvInsertBlockIntoFreeList+0xac>)
 8012b62:	60fb      	str	r3, [r7, #12]
 8012b64:	e002      	b.n	8012b6c <prvInsertBlockIntoFreeList+0x14>
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	60fb      	str	r3, [r7, #12]
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	687a      	ldr	r2, [r7, #4]
 8012b72:	429a      	cmp	r2, r3
 8012b74:	d8f7      	bhi.n	8012b66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	685b      	ldr	r3, [r3, #4]
 8012b7e:	68ba      	ldr	r2, [r7, #8]
 8012b80:	4413      	add	r3, r2
 8012b82:	687a      	ldr	r2, [r7, #4]
 8012b84:	429a      	cmp	r2, r3
 8012b86:	d108      	bne.n	8012b9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	685a      	ldr	r2, [r3, #4]
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	685b      	ldr	r3, [r3, #4]
 8012b90:	441a      	add	r2, r3
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	685b      	ldr	r3, [r3, #4]
 8012ba2:	68ba      	ldr	r2, [r7, #8]
 8012ba4:	441a      	add	r2, r3
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	429a      	cmp	r2, r3
 8012bac:	d118      	bne.n	8012be0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	681a      	ldr	r2, [r3, #0]
 8012bb2:	4b15      	ldr	r3, [pc, #84]	; (8012c08 <prvInsertBlockIntoFreeList+0xb0>)
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	429a      	cmp	r2, r3
 8012bb8:	d00d      	beq.n	8012bd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	685a      	ldr	r2, [r3, #4]
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	685b      	ldr	r3, [r3, #4]
 8012bc4:	441a      	add	r2, r3
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	681a      	ldr	r2, [r3, #0]
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	601a      	str	r2, [r3, #0]
 8012bd4:	e008      	b.n	8012be8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012bd6:	4b0c      	ldr	r3, [pc, #48]	; (8012c08 <prvInsertBlockIntoFreeList+0xb0>)
 8012bd8:	681a      	ldr	r2, [r3, #0]
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	601a      	str	r2, [r3, #0]
 8012bde:	e003      	b.n	8012be8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	681a      	ldr	r2, [r3, #0]
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012be8:	68fa      	ldr	r2, [r7, #12]
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	429a      	cmp	r2, r3
 8012bee:	d002      	beq.n	8012bf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	687a      	ldr	r2, [r7, #4]
 8012bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012bf6:	bf00      	nop
 8012bf8:	3714      	adds	r7, #20
 8012bfa:	46bd      	mov	sp, r7
 8012bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c00:	4770      	bx	lr
 8012c02:	bf00      	nop
 8012c04:	20013114 	.word	0x20013114
 8012c08:	2001311c 	.word	0x2001311c

08012c0c <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 8012c0c:	b480      	push	{r7}
 8012c0e:	b08f      	sub	sp, #60	; 0x3c
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 8012c14:	2300      	movs	r3, #0
 8012c16:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 8012c18:	2300      	movs	r3, #0
 8012c1a:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 8012c20:	4b58      	ldr	r3, [pc, #352]	; (8012d84 <vPortDefineHeapRegions+0x178>)
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d009      	beq.n	8012c3c <vPortDefineHeapRegions+0x30>
 8012c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c2c:	f383 8811 	msr	BASEPRI, r3
 8012c30:	f3bf 8f6f 	isb	sy
 8012c34:	f3bf 8f4f 	dsb	sy
 8012c38:	617b      	str	r3, [r7, #20]
 8012c3a:	e7fe      	b.n	8012c3a <vPortDefineHeapRegions+0x2e>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8012c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c3e:	00db      	lsls	r3, r3, #3
 8012c40:	687a      	ldr	r2, [r7, #4]
 8012c42:	4413      	add	r3, r2
 8012c44:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 8012c46:	e07b      	b.n	8012d40 <vPortDefineHeapRegions+0x134>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 8012c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4a:	685b      	ldr	r3, [r3, #4]
 8012c4c:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 8012c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c56:	f003 0307 	and.w	r3, r3, #7
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d00e      	beq.n	8012c7c <vPortDefineHeapRegions+0x70>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 8012c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c60:	3307      	adds	r3, #7
 8012c62:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8012c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c66:	f023 0307 	bic.w	r3, r3, #7
 8012c6a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 8012c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	461a      	mov	r2, r3
 8012c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c74:	1ad3      	subs	r3, r2, r3
 8012c76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c78:	4413      	add	r3, r2
 8012c7a:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 8012c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c7e:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 8012c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d106      	bne.n	8012c94 <vPortDefineHeapRegions+0x88>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 8012c86:	69fb      	ldr	r3, [r7, #28]
 8012c88:	4a3f      	ldr	r2, [pc, #252]	; (8012d88 <vPortDefineHeapRegions+0x17c>)
 8012c8a:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 8012c8c:	4b3e      	ldr	r3, [pc, #248]	; (8012d88 <vPortDefineHeapRegions+0x17c>)
 8012c8e:	2200      	movs	r2, #0
 8012c90:	605a      	str	r2, [r3, #4]
 8012c92:	e01d      	b.n	8012cd0 <vPortDefineHeapRegions+0xc4>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 8012c94:	4b3b      	ldr	r3, [pc, #236]	; (8012d84 <vPortDefineHeapRegions+0x178>)
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d109      	bne.n	8012cb0 <vPortDefineHeapRegions+0xa4>
 8012c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ca0:	f383 8811 	msr	BASEPRI, r3
 8012ca4:	f3bf 8f6f 	isb	sy
 8012ca8:	f3bf 8f4f 	dsb	sy
 8012cac:	613b      	str	r3, [r7, #16]
 8012cae:	e7fe      	b.n	8012cae <vPortDefineHeapRegions+0xa2>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 8012cb0:	4b34      	ldr	r3, [pc, #208]	; (8012d84 <vPortDefineHeapRegions+0x178>)
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	461a      	mov	r2, r3
 8012cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cb8:	4293      	cmp	r3, r2
 8012cba:	d809      	bhi.n	8012cd0 <vPortDefineHeapRegions+0xc4>
 8012cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cc0:	f383 8811 	msr	BASEPRI, r3
 8012cc4:	f3bf 8f6f 	isb	sy
 8012cc8:	f3bf 8f4f 	dsb	sy
 8012ccc:	60fb      	str	r3, [r7, #12]
 8012cce:	e7fe      	b.n	8012cce <vPortDefineHeapRegions+0xc2>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 8012cd0:	4b2c      	ldr	r3, [pc, #176]	; (8012d84 <vPortDefineHeapRegions+0x178>)
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 8012cd6:	69fa      	ldr	r2, [r7, #28]
 8012cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cda:	4413      	add	r3, r2
 8012cdc:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 8012cde:	2208      	movs	r2, #8
 8012ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ce2:	1a9b      	subs	r3, r3, r2
 8012ce4:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8012ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ce8:	f023 0307 	bic.w	r3, r3, #7
 8012cec:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 8012cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cf0:	4a24      	ldr	r2, [pc, #144]	; (8012d84 <vPortDefineHeapRegions+0x178>)
 8012cf2:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 8012cf4:	4b23      	ldr	r3, [pc, #140]	; (8012d84 <vPortDefineHeapRegions+0x178>)
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 8012cfc:	4b21      	ldr	r3, [pc, #132]	; (8012d84 <vPortDefineHeapRegions+0x178>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	2200      	movs	r2, #0
 8012d02:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 8012d04:	69fb      	ldr	r3, [r7, #28]
 8012d06:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 8012d08:	6a3b      	ldr	r3, [r7, #32]
 8012d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d0c:	1ad2      	subs	r2, r2, r3
 8012d0e:	6a3b      	ldr	r3, [r7, #32]
 8012d10:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 8012d12:	4b1c      	ldr	r3, [pc, #112]	; (8012d84 <vPortDefineHeapRegions+0x178>)
 8012d14:	681a      	ldr	r2, [r3, #0]
 8012d16:	6a3b      	ldr	r3, [r7, #32]
 8012d18:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 8012d1a:	69bb      	ldr	r3, [r7, #24]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d002      	beq.n	8012d26 <vPortDefineHeapRegions+0x11a>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 8012d20:	69bb      	ldr	r3, [r7, #24]
 8012d22:	6a3a      	ldr	r2, [r7, #32]
 8012d24:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8012d26:	6a3b      	ldr	r3, [r7, #32]
 8012d28:	685b      	ldr	r3, [r3, #4]
 8012d2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d2c:	4413      	add	r3, r2
 8012d2e:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 8012d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d32:	3301      	adds	r3, #1
 8012d34:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8012d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d38:	00db      	lsls	r3, r3, #3
 8012d3a:	687a      	ldr	r2, [r7, #4]
 8012d3c:	4413      	add	r3, r2
 8012d3e:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 8012d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d42:	685b      	ldr	r3, [r3, #4]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	f47f af7f 	bne.w	8012c48 <vPortDefineHeapRegions+0x3c>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8012d4a:	4a10      	ldr	r2, [pc, #64]	; (8012d8c <vPortDefineHeapRegions+0x180>)
 8012d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 8012d50:	4a0f      	ldr	r2, [pc, #60]	; (8012d90 <vPortDefineHeapRegions+0x184>)
 8012d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d54:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 8012d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d109      	bne.n	8012d70 <vPortDefineHeapRegions+0x164>
 8012d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d60:	f383 8811 	msr	BASEPRI, r3
 8012d64:	f3bf 8f6f 	isb	sy
 8012d68:	f3bf 8f4f 	dsb	sy
 8012d6c:	60bb      	str	r3, [r7, #8]
 8012d6e:	e7fe      	b.n	8012d6e <vPortDefineHeapRegions+0x162>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012d70:	4b08      	ldr	r3, [pc, #32]	; (8012d94 <vPortDefineHeapRegions+0x188>)
 8012d72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012d76:	601a      	str	r2, [r3, #0]
}
 8012d78:	bf00      	nop
 8012d7a:	373c      	adds	r7, #60	; 0x3c
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d82:	4770      	bx	lr
 8012d84:	2001311c 	.word	0x2001311c
 8012d88:	20013114 	.word	0x20013114
 8012d8c:	20013124 	.word	0x20013124
 8012d90:	20013120 	.word	0x20013120
 8012d94:	20013128 	.word	0x20013128

08012d98 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b084      	sub	sp, #16
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
 8012da0:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8012da2:	683b      	ldr	r3, [r7, #0]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	330c      	adds	r3, #12
 8012da8:	461a      	mov	r2, r3
 8012daa:	6839      	ldr	r1, [r7, #0]
 8012dac:	6878      	ldr	r0, [r7, #4]
 8012dae:	f004 f881 	bl	8016eb4 <tcpip_send_msg_wait_sem>
 8012db2:	4603      	mov	r3, r0
 8012db4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8012db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d103      	bne.n	8012dc6 <netconn_apimsg+0x2e>
    return apimsg->err;
 8012dbe:	683b      	ldr	r3, [r7, #0]
 8012dc0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012dc4:	e001      	b.n	8012dca <netconn_apimsg+0x32>
  }
  return err;
 8012dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012dca:	4618      	mov	r0, r3
 8012dcc:	3710      	adds	r7, #16
 8012dce:	46bd      	mov	sp, r7
 8012dd0:	bd80      	pop	{r7, pc}
	...

08012dd4 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b08c      	sub	sp, #48	; 0x30
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	4603      	mov	r3, r0
 8012ddc:	603a      	str	r2, [r7, #0]
 8012dde:	71fb      	strb	r3, [r7, #7]
 8012de0:	460b      	mov	r3, r1
 8012de2:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8012de4:	79fb      	ldrb	r3, [r7, #7]
 8012de6:	6839      	ldr	r1, [r7, #0]
 8012de8:	4618      	mov	r0, r3
 8012dea:	f001 fa05 	bl	80141f8 <netconn_alloc>
 8012dee:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8012df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d054      	beq.n	8012ea0 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8012df6:	79bb      	ldrb	r3, [r7, #6]
 8012df8:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8012dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dfc:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8012dfe:	f107 0308 	add.w	r3, r7, #8
 8012e02:	4619      	mov	r1, r3
 8012e04:	4829      	ldr	r0, [pc, #164]	; (8012eac <netconn_new_with_proto_and_callback+0xd8>)
 8012e06:	f7ff ffc7 	bl	8012d98 <netconn_apimsg>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8012e10:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d043      	beq.n	8012ea0 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8012e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e1a:	685b      	ldr	r3, [r3, #4]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d005      	beq.n	8012e2c <netconn_new_with_proto_and_callback+0x58>
 8012e20:	4b23      	ldr	r3, [pc, #140]	; (8012eb0 <netconn_new_with_proto_and_callback+0xdc>)
 8012e22:	22a3      	movs	r2, #163	; 0xa3
 8012e24:	4923      	ldr	r1, [pc, #140]	; (8012eb4 <netconn_new_with_proto_and_callback+0xe0>)
 8012e26:	4824      	ldr	r0, [pc, #144]	; (8012eb8 <netconn_new_with_proto_and_callback+0xe4>)
 8012e28:	f013 fdb6 	bl	8026998 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8012e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e2e:	3310      	adds	r3, #16
 8012e30:	4618      	mov	r0, r3
 8012e32:	f011 fa7e 	bl	8024332 <sys_mbox_valid>
 8012e36:	4603      	mov	r3, r0
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d105      	bne.n	8012e48 <netconn_new_with_proto_and_callback+0x74>
 8012e3c:	4b1c      	ldr	r3, [pc, #112]	; (8012eb0 <netconn_new_with_proto_and_callback+0xdc>)
 8012e3e:	22a4      	movs	r2, #164	; 0xa4
 8012e40:	491e      	ldr	r1, [pc, #120]	; (8012ebc <netconn_new_with_proto_and_callback+0xe8>)
 8012e42:	481d      	ldr	r0, [pc, #116]	; (8012eb8 <netconn_new_with_proto_and_callback+0xe4>)
 8012e44:	f013 fda8 	bl	8026998 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8012e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e4a:	3314      	adds	r3, #20
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f011 fa70 	bl	8024332 <sys_mbox_valid>
 8012e52:	4603      	mov	r3, r0
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d005      	beq.n	8012e64 <netconn_new_with_proto_and_callback+0x90>
 8012e58:	4b15      	ldr	r3, [pc, #84]	; (8012eb0 <netconn_new_with_proto_and_callback+0xdc>)
 8012e5a:	22a6      	movs	r2, #166	; 0xa6
 8012e5c:	4918      	ldr	r1, [pc, #96]	; (8012ec0 <netconn_new_with_proto_and_callback+0xec>)
 8012e5e:	4816      	ldr	r0, [pc, #88]	; (8012eb8 <netconn_new_with_proto_and_callback+0xe4>)
 8012e60:	f013 fd9a 	bl	8026998 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8012e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e66:	330c      	adds	r3, #12
 8012e68:	4618      	mov	r0, r3
 8012e6a:	f011 faf3 	bl	8024454 <sys_sem_valid>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d105      	bne.n	8012e80 <netconn_new_with_proto_and_callback+0xac>
 8012e74:	4b0e      	ldr	r3, [pc, #56]	; (8012eb0 <netconn_new_with_proto_and_callback+0xdc>)
 8012e76:	22a9      	movs	r2, #169	; 0xa9
 8012e78:	4912      	ldr	r1, [pc, #72]	; (8012ec4 <netconn_new_with_proto_and_callback+0xf0>)
 8012e7a:	480f      	ldr	r0, [pc, #60]	; (8012eb8 <netconn_new_with_proto_and_callback+0xe4>)
 8012e7c:	f013 fd8c 	bl	8026998 <iprintf>
      sys_sem_free(&conn->op_completed);
 8012e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e82:	330c      	adds	r3, #12
 8012e84:	4618      	mov	r0, r3
 8012e86:	f011 fad8 	bl	802443a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8012e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e8c:	3310      	adds	r3, #16
 8012e8e:	4618      	mov	r0, r3
 8012e90:	f011 f9c8 	bl	8024224 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8012e94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e96:	2007      	movs	r0, #7
 8012e98:	f004 fde2 	bl	8017a60 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	e000      	b.n	8012ea2 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8012ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	3730      	adds	r7, #48	; 0x30
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bd80      	pop	{r7, pc}
 8012eaa:	bf00      	nop
 8012eac:	080141cd 	.word	0x080141cd
 8012eb0:	08027d88 	.word	0x08027d88
 8012eb4:	08027dbc 	.word	0x08027dbc
 8012eb8:	08027de0 	.word	0x08027de0
 8012ebc:	08027e08 	.word	0x08027e08
 8012ec0:	08027e20 	.word	0x08027e20
 8012ec4:	08027e44 	.word	0x08027e44

08012ec8 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b08c      	sub	sp, #48	; 0x30
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d101      	bne.n	8012eda <netconn_prepare_delete+0x12>
    return ERR_OK;
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	e014      	b.n	8012f04 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8012ede:	2329      	movs	r3, #41	; 0x29
 8012ee0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8012ee2:	f107 030c 	add.w	r3, r7, #12
 8012ee6:	4619      	mov	r1, r3
 8012ee8:	4808      	ldr	r0, [pc, #32]	; (8012f0c <netconn_prepare_delete+0x44>)
 8012eea:	f7ff ff55 	bl	8012d98 <netconn_apimsg>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8012ef4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d002      	beq.n	8012f02 <netconn_prepare_delete+0x3a>
    return err;
 8012efc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8012f00:	e000      	b.n	8012f04 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8012f02:	2300      	movs	r3, #0
}
 8012f04:	4618      	mov	r0, r3
 8012f06:	3730      	adds	r7, #48	; 0x30
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	bd80      	pop	{r7, pc}
 8012f0c:	08014731 	.word	0x08014731

08012f10 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b084      	sub	sp, #16
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d101      	bne.n	8012f22 <netconn_delete+0x12>
    return ERR_OK;
 8012f1e:	2300      	movs	r3, #0
 8012f20:	e00d      	b.n	8012f3e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8012f22:	6878      	ldr	r0, [r7, #4]
 8012f24:	f7ff ffd0 	bl	8012ec8 <netconn_prepare_delete>
 8012f28:	4603      	mov	r3, r0
 8012f2a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8012f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d102      	bne.n	8012f3a <netconn_delete+0x2a>
    netconn_free(conn);
 8012f34:	6878      	ldr	r0, [r7, #4]
 8012f36:	f001 f9cd 	bl	80142d4 <netconn_free>
  }
  return err;
 8012f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012f3e:	4618      	mov	r0, r3
 8012f40:	3710      	adds	r7, #16
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd80      	pop	{r7, pc}
	...

08012f48 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b08e      	sub	sp, #56	; 0x38
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	60f8      	str	r0, [r7, #12]
 8012f50:	60b9      	str	r1, [r7, #8]
 8012f52:	607a      	str	r2, [r7, #4]
 8012f54:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d109      	bne.n	8012f70 <netconn_getaddr+0x28>
 8012f5c:	4b1d      	ldr	r3, [pc, #116]	; (8012fd4 <netconn_getaddr+0x8c>)
 8012f5e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8012f62:	491d      	ldr	r1, [pc, #116]	; (8012fd8 <netconn_getaddr+0x90>)
 8012f64:	481d      	ldr	r0, [pc, #116]	; (8012fdc <netconn_getaddr+0x94>)
 8012f66:	f013 fd17 	bl	8026998 <iprintf>
 8012f6a:	f06f 030f 	mvn.w	r3, #15
 8012f6e:	e02d      	b.n	8012fcc <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8012f70:	68bb      	ldr	r3, [r7, #8]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d109      	bne.n	8012f8a <netconn_getaddr+0x42>
 8012f76:	4b17      	ldr	r3, [pc, #92]	; (8012fd4 <netconn_getaddr+0x8c>)
 8012f78:	f240 1213 	movw	r2, #275	; 0x113
 8012f7c:	4918      	ldr	r1, [pc, #96]	; (8012fe0 <netconn_getaddr+0x98>)
 8012f7e:	4817      	ldr	r0, [pc, #92]	; (8012fdc <netconn_getaddr+0x94>)
 8012f80:	f013 fd0a 	bl	8026998 <iprintf>
 8012f84:	f06f 030f 	mvn.w	r3, #15
 8012f88:	e020      	b.n	8012fcc <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d109      	bne.n	8012fa4 <netconn_getaddr+0x5c>
 8012f90:	4b10      	ldr	r3, [pc, #64]	; (8012fd4 <netconn_getaddr+0x8c>)
 8012f92:	f44f 728a 	mov.w	r2, #276	; 0x114
 8012f96:	4913      	ldr	r1, [pc, #76]	; (8012fe4 <netconn_getaddr+0x9c>)
 8012f98:	4810      	ldr	r0, [pc, #64]	; (8012fdc <netconn_getaddr+0x94>)
 8012f9a:	f013 fcfd 	bl	8026998 <iprintf>
 8012f9e:	f06f 030f 	mvn.w	r3, #15
 8012fa2:	e013      	b.n	8012fcc <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8012fa8:	78fb      	ldrb	r3, [r7, #3]
 8012faa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8012fae:	68bb      	ldr	r3, [r7, #8]
 8012fb0:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8012fb6:	f107 0314 	add.w	r3, r7, #20
 8012fba:	4619      	mov	r1, r3
 8012fbc:	480a      	ldr	r0, [pc, #40]	; (8012fe8 <netconn_getaddr+0xa0>)
 8012fbe:	f7ff feeb 	bl	8012d98 <netconn_apimsg>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 8012fc8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8012fcc:	4618      	mov	r0, r3
 8012fce:	3738      	adds	r7, #56	; 0x38
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	bd80      	pop	{r7, pc}
 8012fd4:	08027d88 	.word	0x08027d88
 8012fd8:	08027e60 	.word	0x08027e60
 8012fdc:	08027de0 	.word	0x08027de0
 8012fe0:	08027e80 	.word	0x08027e80
 8012fe4:	08027ea0 	.word	0x08027ea0
 8012fe8:	08015335 	.word	0x08015335

08012fec <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b08e      	sub	sp, #56	; 0x38
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	60f8      	str	r0, [r7, #12]
 8012ff4:	60b9      	str	r1, [r7, #8]
 8012ff6:	4613      	mov	r3, r2
 8012ff8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d109      	bne.n	8013014 <netconn_bind+0x28>
 8013000:	4b11      	ldr	r3, [pc, #68]	; (8013048 <netconn_bind+0x5c>)
 8013002:	f44f 729c 	mov.w	r2, #312	; 0x138
 8013006:	4911      	ldr	r1, [pc, #68]	; (801304c <netconn_bind+0x60>)
 8013008:	4811      	ldr	r0, [pc, #68]	; (8013050 <netconn_bind+0x64>)
 801300a:	f013 fcc5 	bl	8026998 <iprintf>
 801300e:	f06f 030f 	mvn.w	r3, #15
 8013012:	e015      	b.n	8013040 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8013014:	68bb      	ldr	r3, [r7, #8]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d101      	bne.n	801301e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 801301a:	4b0e      	ldr	r3, [pc, #56]	; (8013054 <netconn_bind+0x68>)
 801301c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8013022:	68bb      	ldr	r3, [r7, #8]
 8013024:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8013026:	88fb      	ldrh	r3, [r7, #6]
 8013028:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 801302a:	f107 0314 	add.w	r3, r7, #20
 801302e:	4619      	mov	r1, r3
 8013030:	4809      	ldr	r0, [pc, #36]	; (8013058 <netconn_bind+0x6c>)
 8013032:	f7ff feb1 	bl	8012d98 <netconn_apimsg>
 8013036:	4603      	mov	r3, r0
 8013038:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 801303c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8013040:	4618      	mov	r0, r3
 8013042:	3738      	adds	r7, #56	; 0x38
 8013044:	46bd      	mov	sp, r7
 8013046:	bd80      	pop	{r7, pc}
 8013048:	08027d88 	.word	0x08027d88
 801304c:	08027ec0 	.word	0x08027ec0
 8013050:	08027de0 	.word	0x08027de0
 8013054:	0802bdd8 	.word	0x0802bdd8
 8013058:	080148f9 	.word	0x080148f9

0801305c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 801305c:	b580      	push	{r7, lr}
 801305e:	b08e      	sub	sp, #56	; 0x38
 8013060:	af00      	add	r7, sp, #0
 8013062:	60f8      	str	r0, [r7, #12]
 8013064:	60b9      	str	r1, [r7, #8]
 8013066:	4613      	mov	r3, r2
 8013068:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d109      	bne.n	8013084 <netconn_connect+0x28>
 8013070:	4b11      	ldr	r3, [pc, #68]	; (80130b8 <netconn_connect+0x5c>)
 8013072:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8013076:	4911      	ldr	r1, [pc, #68]	; (80130bc <netconn_connect+0x60>)
 8013078:	4811      	ldr	r0, [pc, #68]	; (80130c0 <netconn_connect+0x64>)
 801307a:	f013 fc8d 	bl	8026998 <iprintf>
 801307e:	f06f 030f 	mvn.w	r3, #15
 8013082:	e015      	b.n	80130b0 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8013084:	68bb      	ldr	r3, [r7, #8]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d101      	bne.n	801308e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 801308a:	4b0e      	ldr	r3, [pc, #56]	; (80130c4 <netconn_connect+0x68>)
 801308c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8013092:	68bb      	ldr	r3, [r7, #8]
 8013094:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8013096:	88fb      	ldrh	r3, [r7, #6]
 8013098:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 801309a:	f107 0314 	add.w	r3, r7, #20
 801309e:	4619      	mov	r1, r3
 80130a0:	4809      	ldr	r0, [pc, #36]	; (80130c8 <netconn_connect+0x6c>)
 80130a2:	f7ff fe79 	bl	8012d98 <netconn_apimsg>
 80130a6:	4603      	mov	r3, r0
 80130a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80130ac:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80130b0:	4618      	mov	r0, r3
 80130b2:	3738      	adds	r7, #56	; 0x38
 80130b4:	46bd      	mov	sp, r7
 80130b6:	bd80      	pop	{r7, pc}
 80130b8:	08027d88 	.word	0x08027d88
 80130bc:	08027efc 	.word	0x08027efc
 80130c0:	08027de0 	.word	0x08027de0
 80130c4:	0802bdd8 	.word	0x0802bdd8
 80130c8:	08014a91 	.word	0x08014a91

080130cc <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b08c      	sub	sp, #48	; 0x30
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d109      	bne.n	80130ee <netconn_disconnect+0x22>
 80130da:	4b0d      	ldr	r3, [pc, #52]	; (8013110 <netconn_disconnect+0x44>)
 80130dc:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80130e0:	490c      	ldr	r1, [pc, #48]	; (8013114 <netconn_disconnect+0x48>)
 80130e2:	480d      	ldr	r0, [pc, #52]	; (8013118 <netconn_disconnect+0x4c>)
 80130e4:	f013 fc58 	bl	8026998 <iprintf>
 80130e8:	f06f 030f 	mvn.w	r3, #15
 80130ec:	e00c      	b.n	8013108 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 80130f2:	f107 030c 	add.w	r3, r7, #12
 80130f6:	4619      	mov	r1, r3
 80130f8:	4808      	ldr	r0, [pc, #32]	; (801311c <netconn_disconnect+0x50>)
 80130fa:	f7ff fe4d 	bl	8012d98 <netconn_apimsg>
 80130fe:	4603      	mov	r3, r0
 8013100:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8013104:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8013108:	4618      	mov	r0, r3
 801310a:	3730      	adds	r7, #48	; 0x30
 801310c:	46bd      	mov	sp, r7
 801310e:	bd80      	pop	{r7, pc}
 8013110:	08027d88 	.word	0x08027d88
 8013114:	08027f1c 	.word	0x08027f1c
 8013118:	08027de0 	.word	0x08027de0
 801311c:	08014c0d 	.word	0x08014c0d

08013120 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b08c      	sub	sp, #48	; 0x30
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
 8013128:	460b      	mov	r3, r1
 801312a:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d109      	bne.n	8013146 <netconn_listen_with_backlog+0x26>
 8013132:	4b0d      	ldr	r3, [pc, #52]	; (8013168 <netconn_listen_with_backlog+0x48>)
 8013134:	f240 12bb 	movw	r2, #443	; 0x1bb
 8013138:	490c      	ldr	r1, [pc, #48]	; (801316c <netconn_listen_with_backlog+0x4c>)
 801313a:	480d      	ldr	r0, [pc, #52]	; (8013170 <netconn_listen_with_backlog+0x50>)
 801313c:	f013 fc2c 	bl	8026998 <iprintf>
 8013140:	f06f 030f 	mvn.w	r3, #15
 8013144:	e00c      	b.n	8013160 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 801314a:	f107 030c 	add.w	r3, r7, #12
 801314e:	4619      	mov	r1, r3
 8013150:	4808      	ldr	r0, [pc, #32]	; (8013174 <netconn_listen_with_backlog+0x54>)
 8013152:	f7ff fe21 	bl	8012d98 <netconn_apimsg>
 8013156:	4603      	mov	r3, r0
 8013158:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 801315c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8013160:	4618      	mov	r0, r3
 8013162:	3730      	adds	r7, #48	; 0x30
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}
 8013168:	08027d88 	.word	0x08027d88
 801316c:	08027f40 	.word	0x08027f40
 8013170:	08027de0 	.word	0x08027de0
 8013174:	08014c49 	.word	0x08014c49

08013178 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b086      	sub	sp, #24
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
 8013180:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8013182:	683b      	ldr	r3, [r7, #0]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d109      	bne.n	801319c <netconn_accept+0x24>
 8013188:	4b3d      	ldr	r3, [pc, #244]	; (8013280 <netconn_accept+0x108>)
 801318a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801318e:	493d      	ldr	r1, [pc, #244]	; (8013284 <netconn_accept+0x10c>)
 8013190:	483d      	ldr	r0, [pc, #244]	; (8013288 <netconn_accept+0x110>)
 8013192:	f013 fc01 	bl	8026998 <iprintf>
 8013196:	f06f 030f 	mvn.w	r3, #15
 801319a:	e06c      	b.n	8013276 <netconn_accept+0xfe>
  *new_conn = NULL;
 801319c:	683b      	ldr	r3, [r7, #0]
 801319e:	2200      	movs	r2, #0
 80131a0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d109      	bne.n	80131bc <netconn_accept+0x44>
 80131a8:	4b35      	ldr	r3, [pc, #212]	; (8013280 <netconn_accept+0x108>)
 80131aa:	f240 12e3 	movw	r2, #483	; 0x1e3
 80131ae:	4937      	ldr	r1, [pc, #220]	; (801328c <netconn_accept+0x114>)
 80131b0:	4835      	ldr	r0, [pc, #212]	; (8013288 <netconn_accept+0x110>)
 80131b2:	f013 fbf1 	bl	8026998 <iprintf>
 80131b6:	f06f 030f 	mvn.w	r3, #15
 80131ba:	e05c      	b.n	8013276 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80131bc:	6878      	ldr	r0, [r7, #4]
 80131be:	f000 fb99 	bl	80138f4 <netconn_err>
 80131c2:	4603      	mov	r3, r0
 80131c4:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80131c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d002      	beq.n	80131d4 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80131ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80131d2:	e050      	b.n	8013276 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	3314      	adds	r3, #20
 80131d8:	4618      	mov	r0, r3
 80131da:	f011 f8aa 	bl	8024332 <sys_mbox_valid>
 80131de:	4603      	mov	r3, r0
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d005      	beq.n	80131f0 <netconn_accept+0x78>
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	7f1b      	ldrb	r3, [r3, #28]
 80131e8:	f003 0301 	and.w	r3, r3, #1
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d002      	beq.n	80131f6 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 80131f0:	f06f 030e 	mvn.w	r3, #14
 80131f4:	e03f      	b.n	8013276 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	7f1b      	ldrb	r3, [r3, #28]
 80131fa:	f003 0302 	and.w	r3, r3, #2
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d00e      	beq.n	8013220 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	3314      	adds	r3, #20
 8013206:	f107 020c 	add.w	r2, r7, #12
 801320a:	4611      	mov	r1, r2
 801320c:	4618      	mov	r0, r3
 801320e:	f011 f874 	bl	80242fa <sys_arch_mbox_tryfetch>
 8013212:	4603      	mov	r3, r0
 8013214:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013218:	d10a      	bne.n	8013230 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 801321a:	f06f 0306 	mvn.w	r3, #6
 801321e:	e02a      	b.n	8013276 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	3314      	adds	r3, #20
 8013224:	f107 010c 	add.w	r1, r7, #12
 8013228:	2200      	movs	r2, #0
 801322a:	4618      	mov	r0, r3
 801322c:	f011 f826 	bl	802427c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013234:	2b00      	cmp	r3, #0
 8013236:	d005      	beq.n	8013244 <netconn_accept+0xcc>
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801323c:	2200      	movs	r2, #0
 801323e:	2101      	movs	r1, #1
 8013240:	6878      	ldr	r0, [r7, #4]
 8013242:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	f107 0213 	add.w	r2, r7, #19
 801324a:	4611      	mov	r1, r2
 801324c:	4618      	mov	r0, r3
 801324e:	f000 fb9f 	bl	8013990 <lwip_netconn_is_err_msg>
 8013252:	4603      	mov	r3, r0
 8013254:	2b00      	cmp	r3, #0
 8013256:	d002      	beq.n	801325e <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8013258:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801325c:	e00b      	b.n	8013276 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d102      	bne.n	801326a <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8013264:	f06f 030e 	mvn.w	r3, #14
 8013268:	e005      	b.n	8013276 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 801326e:	683b      	ldr	r3, [r7, #0]
 8013270:	697a      	ldr	r2, [r7, #20]
 8013272:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8013274:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8013276:	4618      	mov	r0, r3
 8013278:	3718      	adds	r7, #24
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}
 801327e:	bf00      	nop
 8013280:	08027d88 	.word	0x08027d88
 8013284:	08027f60 	.word	0x08027f60
 8013288:	08027de0 	.word	0x08027de0
 801328c:	08027f80 	.word	0x08027f80

08013290 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b088      	sub	sp, #32
 8013294:	af00      	add	r7, sp, #0
 8013296:	60f8      	str	r0, [r7, #12]
 8013298:	60b9      	str	r1, [r7, #8]
 801329a:	4613      	mov	r3, r2
 801329c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 801329e:	2300      	movs	r3, #0
 80132a0:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80132a2:	68bb      	ldr	r3, [r7, #8]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d109      	bne.n	80132bc <netconn_recv_data+0x2c>
 80132a8:	4b58      	ldr	r3, [pc, #352]	; (801340c <netconn_recv_data+0x17c>)
 80132aa:	f44f 7212 	mov.w	r2, #584	; 0x248
 80132ae:	4958      	ldr	r1, [pc, #352]	; (8013410 <netconn_recv_data+0x180>)
 80132b0:	4858      	ldr	r0, [pc, #352]	; (8013414 <netconn_recv_data+0x184>)
 80132b2:	f013 fb71 	bl	8026998 <iprintf>
 80132b6:	f06f 030f 	mvn.w	r3, #15
 80132ba:	e0a2      	b.n	8013402 <netconn_recv_data+0x172>
  *new_buf = NULL;
 80132bc:	68bb      	ldr	r3, [r7, #8]
 80132be:	2200      	movs	r2, #0
 80132c0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d109      	bne.n	80132dc <netconn_recv_data+0x4c>
 80132c8:	4b50      	ldr	r3, [pc, #320]	; (801340c <netconn_recv_data+0x17c>)
 80132ca:	f240 224a 	movw	r2, #586	; 0x24a
 80132ce:	4952      	ldr	r1, [pc, #328]	; (8013418 <netconn_recv_data+0x188>)
 80132d0:	4850      	ldr	r0, [pc, #320]	; (8013414 <netconn_recv_data+0x184>)
 80132d2:	f013 fb61 	bl	8026998 <iprintf>
 80132d6:	f06f 030f 	mvn.w	r3, #15
 80132da:	e092      	b.n	8013402 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	3310      	adds	r3, #16
 80132e0:	4618      	mov	r0, r3
 80132e2:	f011 f826 	bl	8024332 <sys_mbox_valid>
 80132e6:	4603      	mov	r3, r0
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d10e      	bne.n	801330a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80132ec:	68f8      	ldr	r0, [r7, #12]
 80132ee:	f000 fb01 	bl	80138f4 <netconn_err>
 80132f2:	4603      	mov	r3, r0
 80132f4:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80132f6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d002      	beq.n	8013304 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80132fe:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8013302:	e07e      	b.n	8013402 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8013304:	f06f 030a 	mvn.w	r3, #10
 8013308:	e07b      	b.n	8013402 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	7f1b      	ldrb	r3, [r3, #28]
 801330e:	f003 0302 	and.w	r3, r3, #2
 8013312:	2b00      	cmp	r3, #0
 8013314:	d10f      	bne.n	8013336 <netconn_recv_data+0xa6>
 8013316:	79fb      	ldrb	r3, [r7, #7]
 8013318:	f003 0304 	and.w	r3, r3, #4
 801331c:	2b00      	cmp	r3, #0
 801331e:	d10a      	bne.n	8013336 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	7f1b      	ldrb	r3, [r3, #28]
 8013324:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8013328:	2b00      	cmp	r3, #0
 801332a:	d104      	bne.n	8013336 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d023      	beq.n	801337e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	3310      	adds	r3, #16
 801333a:	f107 0218 	add.w	r2, r7, #24
 801333e:	4611      	mov	r1, r2
 8013340:	4618      	mov	r0, r3
 8013342:	f010 ffda 	bl	80242fa <sys_arch_mbox_tryfetch>
 8013346:	4603      	mov	r3, r0
 8013348:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801334c:	d11f      	bne.n	801338e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 801334e:	68f8      	ldr	r0, [r7, #12]
 8013350:	f000 fad0 	bl	80138f4 <netconn_err>
 8013354:	4603      	mov	r3, r0
 8013356:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8013358:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d002      	beq.n	8013366 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8013360:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8013364:	e04d      	b.n	8013402 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	7f1b      	ldrb	r3, [r3, #28]
 801336a:	f003 0301 	and.w	r3, r3, #1
 801336e:	2b00      	cmp	r3, #0
 8013370:	d002      	beq.n	8013378 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8013372:	f06f 030a 	mvn.w	r3, #10
 8013376:	e044      	b.n	8013402 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8013378:	f06f 0306 	mvn.w	r3, #6
 801337c:	e041      	b.n	8013402 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	3310      	adds	r3, #16
 8013382:	f107 0118 	add.w	r1, r7, #24
 8013386:	2200      	movs	r2, #0
 8013388:	4618      	mov	r0, r3
 801338a:	f010 ff77 	bl	802427c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	781b      	ldrb	r3, [r3, #0]
 8013392:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013396:	2b10      	cmp	r3, #16
 8013398:	d117      	bne.n	80133ca <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 801339a:	69bb      	ldr	r3, [r7, #24]
 801339c:	f107 0217 	add.w	r2, r7, #23
 80133a0:	4611      	mov	r1, r2
 80133a2:	4618      	mov	r0, r3
 80133a4:	f000 faf4 	bl	8013990 <lwip_netconn_is_err_msg>
 80133a8:	4603      	mov	r3, r0
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d009      	beq.n	80133c2 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80133ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80133b2:	f113 0f0f 	cmn.w	r3, #15
 80133b6:	d101      	bne.n	80133bc <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80133b8:	2300      	movs	r3, #0
 80133ba:	e022      	b.n	8013402 <netconn_recv_data+0x172>
      }
      return err;
 80133bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80133c0:	e01f      	b.n	8013402 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80133c2:	69bb      	ldr	r3, [r7, #24]
 80133c4:	891b      	ldrh	r3, [r3, #8]
 80133c6:	83fb      	strh	r3, [r7, #30]
 80133c8:	e00d      	b.n	80133e6 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80133ca:	69bb      	ldr	r3, [r7, #24]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d106      	bne.n	80133de <netconn_recv_data+0x14e>
 80133d0:	4b0e      	ldr	r3, [pc, #56]	; (801340c <netconn_recv_data+0x17c>)
 80133d2:	f240 2291 	movw	r2, #657	; 0x291
 80133d6:	4911      	ldr	r1, [pc, #68]	; (801341c <netconn_recv_data+0x18c>)
 80133d8:	480e      	ldr	r0, [pc, #56]	; (8013414 <netconn_recv_data+0x184>)
 80133da:	f013 fadd 	bl	8026998 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80133de:	69bb      	ldr	r3, [r7, #24]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	891b      	ldrh	r3, [r3, #8]
 80133e4:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d005      	beq.n	80133fa <netconn_recv_data+0x16a>
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133f2:	8bfa      	ldrh	r2, [r7, #30]
 80133f4:	2101      	movs	r1, #1
 80133f6:	68f8      	ldr	r0, [r7, #12]
 80133f8:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80133fa:	69ba      	ldr	r2, [r7, #24]
 80133fc:	68bb      	ldr	r3, [r7, #8]
 80133fe:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8013400:	2300      	movs	r3, #0
}
 8013402:	4618      	mov	r0, r3
 8013404:	3720      	adds	r7, #32
 8013406:	46bd      	mov	sp, r7
 8013408:	bd80      	pop	{r7, pc}
 801340a:	bf00      	nop
 801340c:	08027d88 	.word	0x08027d88
 8013410:	08027fa0 	.word	0x08027fa0
 8013414:	08027de0 	.word	0x08027de0
 8013418:	08027fc0 	.word	0x08027fc0
 801341c:	08027fdc 	.word	0x08027fdc

08013420 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8013420:	b580      	push	{r7, lr}
 8013422:	b084      	sub	sp, #16
 8013424:	af00      	add	r7, sp, #0
 8013426:	60f8      	str	r0, [r7, #12]
 8013428:	60b9      	str	r1, [r7, #8]
 801342a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d005      	beq.n	801343e <netconn_tcp_recvd_msg+0x1e>
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	781b      	ldrb	r3, [r3, #0]
 8013436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801343a:	2b10      	cmp	r3, #16
 801343c:	d009      	beq.n	8013452 <netconn_tcp_recvd_msg+0x32>
 801343e:	4b0c      	ldr	r3, [pc, #48]	; (8013470 <netconn_tcp_recvd_msg+0x50>)
 8013440:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8013444:	490b      	ldr	r1, [pc, #44]	; (8013474 <netconn_tcp_recvd_msg+0x54>)
 8013446:	480c      	ldr	r0, [pc, #48]	; (8013478 <netconn_tcp_recvd_msg+0x58>)
 8013448:	f013 faa6 	bl	8026998 <iprintf>
 801344c:	f06f 030f 	mvn.w	r3, #15
 8013450:	e00a      	b.n	8013468 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	68fa      	ldr	r2, [r7, #12]
 8013456:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	68ba      	ldr	r2, [r7, #8]
 801345c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 801345e:	6879      	ldr	r1, [r7, #4]
 8013460:	4806      	ldr	r0, [pc, #24]	; (801347c <netconn_tcp_recvd_msg+0x5c>)
 8013462:	f7ff fc99 	bl	8012d98 <netconn_apimsg>
 8013466:	4603      	mov	r3, r0
}
 8013468:	4618      	mov	r0, r3
 801346a:	3710      	adds	r7, #16
 801346c:	46bd      	mov	sp, r7
 801346e:	bd80      	pop	{r7, pc}
 8013470:	08027d88 	.word	0x08027d88
 8013474:	08027fe8 	.word	0x08027fe8
 8013478:	08027de0 	.word	0x08027de0
 801347c:	08014e15 	.word	0x08014e15

08013480 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b08c      	sub	sp, #48	; 0x30
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
 8013488:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d005      	beq.n	801349c <netconn_tcp_recvd+0x1c>
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	781b      	ldrb	r3, [r3, #0]
 8013494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013498:	2b10      	cmp	r3, #16
 801349a:	d009      	beq.n	80134b0 <netconn_tcp_recvd+0x30>
 801349c:	4b0c      	ldr	r3, [pc, #48]	; (80134d0 <netconn_tcp_recvd+0x50>)
 801349e:	f240 22b6 	movw	r2, #694	; 0x2b6
 80134a2:	490c      	ldr	r1, [pc, #48]	; (80134d4 <netconn_tcp_recvd+0x54>)
 80134a4:	480c      	ldr	r0, [pc, #48]	; (80134d8 <netconn_tcp_recvd+0x58>)
 80134a6:	f013 fa77 	bl	8026998 <iprintf>
 80134aa:	f06f 030f 	mvn.w	r3, #15
 80134ae:	e00b      	b.n	80134c8 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 80134b0:	f107 030c 	add.w	r3, r7, #12
 80134b4:	461a      	mov	r2, r3
 80134b6:	6839      	ldr	r1, [r7, #0]
 80134b8:	6878      	ldr	r0, [r7, #4]
 80134ba:	f7ff ffb1 	bl	8013420 <netconn_tcp_recvd_msg>
 80134be:	4603      	mov	r3, r0
 80134c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 80134c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80134c8:	4618      	mov	r0, r3
 80134ca:	3730      	adds	r7, #48	; 0x30
 80134cc:	46bd      	mov	sp, r7
 80134ce:	bd80      	pop	{r7, pc}
 80134d0:	08027d88 	.word	0x08027d88
 80134d4:	08027fe8 	.word	0x08027fe8
 80134d8:	08027de0 	.word	0x08027de0

080134dc <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b090      	sub	sp, #64	; 0x40
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	60f8      	str	r0, [r7, #12]
 80134e4:	60b9      	str	r1, [r7, #8]
 80134e6:	4613      	mov	r3, r2
 80134e8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	3310      	adds	r3, #16
 80134ee:	4618      	mov	r0, r3
 80134f0:	f010 ff1f 	bl	8024332 <sys_mbox_valid>
 80134f4:	4603      	mov	r3, r0
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d102      	bne.n	8013500 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80134fa:	f06f 030a 	mvn.w	r3, #10
 80134fe:	e06d      	b.n	80135dc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	7f1b      	ldrb	r3, [r3, #28]
 8013504:	b25b      	sxtb	r3, r3
 8013506:	2b00      	cmp	r3, #0
 8013508:	da07      	bge.n	801351a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	7f1b      	ldrb	r3, [r3, #28]
 801350e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013512:	b2da      	uxtb	r2, r3
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8013518:	e039      	b.n	801358e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 801351a:	79fb      	ldrb	r3, [r7, #7]
 801351c:	461a      	mov	r2, r3
 801351e:	68b9      	ldr	r1, [r7, #8]
 8013520:	68f8      	ldr	r0, [r7, #12]
 8013522:	f7ff feb5 	bl	8013290 <netconn_recv_data>
 8013526:	4603      	mov	r3, r0
 8013528:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 801352c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8013530:	2b00      	cmp	r3, #0
 8013532:	d002      	beq.n	801353a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8013534:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8013538:	e050      	b.n	80135dc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 801353a:	68bb      	ldr	r3, [r7, #8]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8013540:	79fb      	ldrb	r3, [r7, #7]
 8013542:	f003 0308 	and.w	r3, r3, #8
 8013546:	2b00      	cmp	r3, #0
 8013548:	d10e      	bne.n	8013568 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 801354a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801354c:	2b00      	cmp	r3, #0
 801354e:	d002      	beq.n	8013556 <netconn_recv_data_tcp+0x7a>
 8013550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013552:	891b      	ldrh	r3, [r3, #8]
 8013554:	e000      	b.n	8013558 <netconn_recv_data_tcp+0x7c>
 8013556:	2301      	movs	r3, #1
 8013558:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 801355a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801355c:	f107 0214 	add.w	r2, r7, #20
 8013560:	4619      	mov	r1, r3
 8013562:	68f8      	ldr	r0, [r7, #12]
 8013564:	f7ff ff5c 	bl	8013420 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8013568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801356a:	2b00      	cmp	r3, #0
 801356c:	d134      	bne.n	80135d8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 801356e:	79fb      	ldrb	r3, [r7, #7]
 8013570:	f003 0310 	and.w	r3, r3, #16
 8013574:	2b00      	cmp	r3, #0
 8013576:	d009      	beq.n	801358c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	7f1b      	ldrb	r3, [r3, #28]
 801357c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013580:	b2da      	uxtb	r2, r3
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8013586:	f06f 0306 	mvn.w	r3, #6
 801358a:	e027      	b.n	80135dc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 801358c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013592:	2b00      	cmp	r3, #0
 8013594:	d005      	beq.n	80135a2 <netconn_recv_data_tcp+0xc6>
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801359a:	2200      	movs	r2, #0
 801359c:	2101      	movs	r1, #1
 801359e:	68f8      	ldr	r0, [r7, #12]
 80135a0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	685b      	ldr	r3, [r3, #4]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d10f      	bne.n	80135ca <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80135aa:	68f8      	ldr	r0, [r7, #12]
 80135ac:	f000 f9a2 	bl	80138f4 <netconn_err>
 80135b0:	4603      	mov	r3, r0
 80135b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 80135b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d002      	beq.n	80135c4 <netconn_recv_data_tcp+0xe8>
          return err;
 80135be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80135c2:	e00b      	b.n	80135dc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80135c4:	f06f 030d 	mvn.w	r3, #13
 80135c8:	e008      	b.n	80135dc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80135ca:	2101      	movs	r1, #1
 80135cc:	68f8      	ldr	r0, [r7, #12]
 80135ce:	f000 f961 	bl	8013894 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80135d2:	f06f 030e 	mvn.w	r3, #14
 80135d6:	e001      	b.n	80135dc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80135d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80135dc:	4618      	mov	r0, r3
 80135de:	3740      	adds	r7, #64	; 0x40
 80135e0:	46bd      	mov	sp, r7
 80135e2:	bd80      	pop	{r7, pc}

080135e4 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80135e4:	b580      	push	{r7, lr}
 80135e6:	b084      	sub	sp, #16
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	60f8      	str	r0, [r7, #12]
 80135ec:	60b9      	str	r1, [r7, #8]
 80135ee:	4613      	mov	r3, r2
 80135f0:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d005      	beq.n	8013604 <netconn_recv_tcp_pbuf_flags+0x20>
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	781b      	ldrb	r3, [r3, #0]
 80135fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013600:	2b10      	cmp	r3, #16
 8013602:	d009      	beq.n	8013618 <netconn_recv_tcp_pbuf_flags+0x34>
 8013604:	4b0a      	ldr	r3, [pc, #40]	; (8013630 <netconn_recv_tcp_pbuf_flags+0x4c>)
 8013606:	f240 3226 	movw	r2, #806	; 0x326
 801360a:	490a      	ldr	r1, [pc, #40]	; (8013634 <netconn_recv_tcp_pbuf_flags+0x50>)
 801360c:	480a      	ldr	r0, [pc, #40]	; (8013638 <netconn_recv_tcp_pbuf_flags+0x54>)
 801360e:	f013 f9c3 	bl	8026998 <iprintf>
 8013612:	f06f 030f 	mvn.w	r3, #15
 8013616:	e006      	b.n	8013626 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 8013618:	79fb      	ldrb	r3, [r7, #7]
 801361a:	461a      	mov	r2, r3
 801361c:	68b9      	ldr	r1, [r7, #8]
 801361e:	68f8      	ldr	r0, [r7, #12]
 8013620:	f7ff ff5c 	bl	80134dc <netconn_recv_data_tcp>
 8013624:	4603      	mov	r3, r0
}
 8013626:	4618      	mov	r0, r3
 8013628:	3710      	adds	r7, #16
 801362a:	46bd      	mov	sp, r7
 801362c:	bd80      	pop	{r7, pc}
 801362e:	bf00      	nop
 8013630:	08027d88 	.word	0x08027d88
 8013634:	08027fe8 	.word	0x08027fe8
 8013638:	08027de0 	.word	0x08027de0

0801363c <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b084      	sub	sp, #16
 8013640:	af00      	add	r7, sp, #0
 8013642:	60f8      	str	r0, [r7, #12]
 8013644:	60b9      	str	r1, [r7, #8]
 8013646:	4613      	mov	r3, r2
 8013648:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d005      	beq.n	801365c <netconn_recv_udp_raw_netbuf_flags+0x20>
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	781b      	ldrb	r3, [r3, #0]
 8013654:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013658:	2b10      	cmp	r3, #16
 801365a:	d109      	bne.n	8013670 <netconn_recv_udp_raw_netbuf_flags+0x34>
 801365c:	4b0a      	ldr	r3, [pc, #40]	; (8013688 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 801365e:	f240 324d 	movw	r2, #845	; 0x34d
 8013662:	490a      	ldr	r1, [pc, #40]	; (801368c <netconn_recv_udp_raw_netbuf_flags+0x50>)
 8013664:	480a      	ldr	r0, [pc, #40]	; (8013690 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 8013666:	f013 f997 	bl	8026998 <iprintf>
 801366a:	f06f 030f 	mvn.w	r3, #15
 801366e:	e006      	b.n	801367e <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 8013670:	79fb      	ldrb	r3, [r7, #7]
 8013672:	461a      	mov	r2, r3
 8013674:	68b9      	ldr	r1, [r7, #8]
 8013676:	68f8      	ldr	r0, [r7, #12]
 8013678:	f7ff fe0a 	bl	8013290 <netconn_recv_data>
 801367c:	4603      	mov	r3, r0
}
 801367e:	4618      	mov	r0, r3
 8013680:	3710      	adds	r7, #16
 8013682:	46bd      	mov	sp, r7
 8013684:	bd80      	pop	{r7, pc}
 8013686:	bf00      	nop
 8013688:	08027d88 	.word	0x08027d88
 801368c:	0802800c 	.word	0x0802800c
 8013690:	08027de0 	.word	0x08027de0

08013694 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b08c      	sub	sp, #48	; 0x30
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
 801369c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d109      	bne.n	80136b8 <netconn_send+0x24>
 80136a4:	4b0e      	ldr	r3, [pc, #56]	; (80136e0 <netconn_send+0x4c>)
 80136a6:	f240 32b2 	movw	r2, #946	; 0x3b2
 80136aa:	490e      	ldr	r1, [pc, #56]	; (80136e4 <netconn_send+0x50>)
 80136ac:	480e      	ldr	r0, [pc, #56]	; (80136e8 <netconn_send+0x54>)
 80136ae:	f013 f973 	bl	8026998 <iprintf>
 80136b2:	f06f 030f 	mvn.w	r3, #15
 80136b6:	e00e      	b.n	80136d6 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 80136bc:	683b      	ldr	r3, [r7, #0]
 80136be:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 80136c0:	f107 030c 	add.w	r3, r7, #12
 80136c4:	4619      	mov	r1, r3
 80136c6:	4809      	ldr	r0, [pc, #36]	; (80136ec <netconn_send+0x58>)
 80136c8:	f7ff fb66 	bl	8012d98 <netconn_apimsg>
 80136cc:	4603      	mov	r3, r0
 80136ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80136d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80136d6:	4618      	mov	r0, r3
 80136d8:	3730      	adds	r7, #48	; 0x30
 80136da:	46bd      	mov	sp, r7
 80136dc:	bd80      	pop	{r7, pc}
 80136de:	bf00      	nop
 80136e0:	08027d88 	.word	0x08027d88
 80136e4:	08028044 	.word	0x08028044
 80136e8:	08027de0 	.word	0x08027de0
 80136ec:	08014d79 	.word	0x08014d79

080136f0 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b088      	sub	sp, #32
 80136f4:	af02      	add	r7, sp, #8
 80136f6:	60f8      	str	r0, [r7, #12]
 80136f8:	60b9      	str	r1, [r7, #8]
 80136fa:	607a      	str	r2, [r7, #4]
 80136fc:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80136fe:	68bb      	ldr	r3, [r7, #8]
 8013700:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8013706:	78fa      	ldrb	r2, [r7, #3]
 8013708:	f107 0110 	add.w	r1, r7, #16
 801370c:	6a3b      	ldr	r3, [r7, #32]
 801370e:	9300      	str	r3, [sp, #0]
 8013710:	4613      	mov	r3, r2
 8013712:	2201      	movs	r2, #1
 8013714:	68f8      	ldr	r0, [r7, #12]
 8013716:	f000 f805 	bl	8013724 <netconn_write_vectors_partly>
 801371a:	4603      	mov	r3, r0
}
 801371c:	4618      	mov	r0, r3
 801371e:	3718      	adds	r7, #24
 8013720:	46bd      	mov	sp, r7
 8013722:	bd80      	pop	{r7, pc}

08013724 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b092      	sub	sp, #72	; 0x48
 8013728:	af00      	add	r7, sp, #0
 801372a:	60f8      	str	r0, [r7, #12]
 801372c:	60b9      	str	r1, [r7, #8]
 801372e:	4611      	mov	r1, r2
 8013730:	461a      	mov	r2, r3
 8013732:	460b      	mov	r3, r1
 8013734:	80fb      	strh	r3, [r7, #6]
 8013736:	4613      	mov	r3, r2
 8013738:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d109      	bne.n	8013754 <netconn_write_vectors_partly+0x30>
 8013740:	4b4e      	ldr	r3, [pc, #312]	; (801387c <netconn_write_vectors_partly+0x158>)
 8013742:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8013746:	494e      	ldr	r1, [pc, #312]	; (8013880 <netconn_write_vectors_partly+0x15c>)
 8013748:	484e      	ldr	r0, [pc, #312]	; (8013884 <netconn_write_vectors_partly+0x160>)
 801374a:	f013 f925 	bl	8026998 <iprintf>
 801374e:	f06f 030f 	mvn.w	r3, #15
 8013752:	e08e      	b.n	8013872 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	781b      	ldrb	r3, [r3, #0]
 8013758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801375c:	2b10      	cmp	r3, #16
 801375e:	d009      	beq.n	8013774 <netconn_write_vectors_partly+0x50>
 8013760:	4b46      	ldr	r3, [pc, #280]	; (801387c <netconn_write_vectors_partly+0x158>)
 8013762:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8013766:	4948      	ldr	r1, [pc, #288]	; (8013888 <netconn_write_vectors_partly+0x164>)
 8013768:	4846      	ldr	r0, [pc, #280]	; (8013884 <netconn_write_vectors_partly+0x160>)
 801376a:	f013 f915 	bl	8026998 <iprintf>
 801376e:	f06f 0305 	mvn.w	r3, #5
 8013772:	e07e      	b.n	8013872 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	7f1b      	ldrb	r3, [r3, #28]
 8013778:	f003 0302 	and.w	r3, r3, #2
 801377c:	2b00      	cmp	r3, #0
 801377e:	d104      	bne.n	801378a <netconn_write_vectors_partly+0x66>
 8013780:	797b      	ldrb	r3, [r7, #5]
 8013782:	f003 0304 	and.w	r3, r3, #4
 8013786:	2b00      	cmp	r3, #0
 8013788:	d001      	beq.n	801378e <netconn_write_vectors_partly+0x6a>
 801378a:	2301      	movs	r3, #1
 801378c:	e000      	b.n	8013790 <netconn_write_vectors_partly+0x6c>
 801378e:	2300      	movs	r3, #0
 8013790:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8013794:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013798:	2b00      	cmp	r3, #0
 801379a:	d005      	beq.n	80137a8 <netconn_write_vectors_partly+0x84>
 801379c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d102      	bne.n	80137a8 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80137a2:	f06f 0305 	mvn.w	r3, #5
 80137a6:	e064      	b.n	8013872 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 80137a8:	2300      	movs	r3, #0
 80137aa:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 80137ac:	2300      	movs	r3, #0
 80137ae:	643b      	str	r3, [r7, #64]	; 0x40
 80137b0:	e015      	b.n	80137de <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 80137b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137b4:	00db      	lsls	r3, r3, #3
 80137b6:	68ba      	ldr	r2, [r7, #8]
 80137b8:	4413      	add	r3, r2
 80137ba:	685b      	ldr	r3, [r3, #4]
 80137bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80137be:	4413      	add	r3, r2
 80137c0:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 80137c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137c4:	00db      	lsls	r3, r3, #3
 80137c6:	68ba      	ldr	r2, [r7, #8]
 80137c8:	4413      	add	r3, r2
 80137ca:	685b      	ldr	r3, [r3, #4]
 80137cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80137ce:	429a      	cmp	r2, r3
 80137d0:	d202      	bcs.n	80137d8 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 80137d2:	f06f 0305 	mvn.w	r3, #5
 80137d6:	e04c      	b.n	8013872 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 80137d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137da:	3301      	adds	r3, #1
 80137dc:	643b      	str	r3, [r7, #64]	; 0x40
 80137de:	88fb      	ldrh	r3, [r7, #6]
 80137e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80137e2:	429a      	cmp	r2, r3
 80137e4:	dbe5      	blt.n	80137b2 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 80137e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d101      	bne.n	80137f0 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 80137ec:	2300      	movs	r3, #0
 80137ee:	e040      	b.n	8013872 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 80137f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	da0a      	bge.n	801380c <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80137f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d102      	bne.n	8013802 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80137fc:	f06f 0305 	mvn.w	r3, #5
 8013800:	e037      	b.n	8013872 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8013802:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013806:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8013808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801380a:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8013810:	68bb      	ldr	r3, [r7, #8]
 8013812:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8013814:	88fb      	ldrh	r3, [r7, #6]
 8013816:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8013818:	2300      	movs	r3, #0
 801381a:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 801381c:	797b      	ldrb	r3, [r7, #5]
 801381e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8013822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013824:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8013826:	2300      	movs	r3, #0
 8013828:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 801382a:	f107 0314 	add.w	r3, r7, #20
 801382e:	4619      	mov	r1, r3
 8013830:	4816      	ldr	r0, [pc, #88]	; (801388c <netconn_write_vectors_partly+0x168>)
 8013832:	f7ff fab1 	bl	8012d98 <netconn_apimsg>
 8013836:	4603      	mov	r3, r0
 8013838:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 801383c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8013840:	2b00      	cmp	r3, #0
 8013842:	d114      	bne.n	801386e <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8013844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013846:	2b00      	cmp	r3, #0
 8013848:	d002      	beq.n	8013850 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 801384a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801384c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801384e:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8013850:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013854:	2b00      	cmp	r3, #0
 8013856:	d10a      	bne.n	801386e <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8013858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801385a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801385c:	429a      	cmp	r2, r3
 801385e:	d006      	beq.n	801386e <netconn_write_vectors_partly+0x14a>
 8013860:	4b06      	ldr	r3, [pc, #24]	; (801387c <netconn_write_vectors_partly+0x158>)
 8013862:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013866:	490a      	ldr	r1, [pc, #40]	; (8013890 <netconn_write_vectors_partly+0x16c>)
 8013868:	4806      	ldr	r0, [pc, #24]	; (8013884 <netconn_write_vectors_partly+0x160>)
 801386a:	f013 f895 	bl	8026998 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 801386e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8013872:	4618      	mov	r0, r3
 8013874:	3748      	adds	r7, #72	; 0x48
 8013876:	46bd      	mov	sp, r7
 8013878:	bd80      	pop	{r7, pc}
 801387a:	bf00      	nop
 801387c:	08027d88 	.word	0x08027d88
 8013880:	08028060 	.word	0x08028060
 8013884:	08027de0 	.word	0x08027de0
 8013888:	0802807c 	.word	0x0802807c
 801388c:	0801521d 	.word	0x0801521d
 8013890:	080280a0 	.word	0x080280a0

08013894 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8013894:	b580      	push	{r7, lr}
 8013896:	b08c      	sub	sp, #48	; 0x30
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
 801389c:	460b      	mov	r3, r1
 801389e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d109      	bne.n	80138ba <netconn_close_shutdown+0x26>
 80138a6:	4b0f      	ldr	r3, [pc, #60]	; (80138e4 <netconn_close_shutdown+0x50>)
 80138a8:	f240 4247 	movw	r2, #1095	; 0x447
 80138ac:	490e      	ldr	r1, [pc, #56]	; (80138e8 <netconn_close_shutdown+0x54>)
 80138ae:	480f      	ldr	r0, [pc, #60]	; (80138ec <netconn_close_shutdown+0x58>)
 80138b0:	f013 f872 	bl	8026998 <iprintf>
 80138b4:	f06f 030f 	mvn.w	r3, #15
 80138b8:	e010      	b.n	80138dc <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80138be:	78fb      	ldrb	r3, [r7, #3]
 80138c0:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80138c2:	2329      	movs	r3, #41	; 0x29
 80138c4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80138c6:	f107 030c 	add.w	r3, r7, #12
 80138ca:	4619      	mov	r1, r3
 80138cc:	4808      	ldr	r0, [pc, #32]	; (80138f0 <netconn_close_shutdown+0x5c>)
 80138ce:	f7ff fa63 	bl	8012d98 <netconn_apimsg>
 80138d2:	4603      	mov	r3, r0
 80138d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80138d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80138dc:	4618      	mov	r0, r3
 80138de:	3730      	adds	r7, #48	; 0x30
 80138e0:	46bd      	mov	sp, r7
 80138e2:	bd80      	pop	{r7, pc}
 80138e4:	08027d88 	.word	0x08027d88
 80138e8:	080280c4 	.word	0x080280c4
 80138ec:	08027de0 	.word	0x08027de0
 80138f0:	08015441 	.word	0x08015441

080138f4 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b084      	sub	sp, #16
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d101      	bne.n	8013906 <netconn_err+0x12>
    return ERR_OK;
 8013902:	2300      	movs	r3, #0
 8013904:	e00d      	b.n	8013922 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8013906:	f010 fe2f 	bl	8024568 <sys_arch_protect>
 801390a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	7a1b      	ldrb	r3, [r3, #8]
 8013910:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	2200      	movs	r2, #0
 8013916:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8013918:	68f8      	ldr	r0, [r7, #12]
 801391a:	f010 fe33 	bl	8024584 <sys_arch_unprotect>
  return err;
 801391e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013922:	4618      	mov	r0, r3
 8013924:	3710      	adds	r7, #16
 8013926:	46bd      	mov	sp, r7
 8013928:	bd80      	pop	{r7, pc}
	...

0801392c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 801392c:	b580      	push	{r7, lr}
 801392e:	b082      	sub	sp, #8
 8013930:	af00      	add	r7, sp, #0
 8013932:	4603      	mov	r3, r0
 8013934:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8013936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801393a:	f113 0f0e 	cmn.w	r3, #14
 801393e:	d008      	beq.n	8013952 <lwip_netconn_err_to_msg+0x26>
 8013940:	f113 0f0d 	cmn.w	r3, #13
 8013944:	d003      	beq.n	801394e <lwip_netconn_err_to_msg+0x22>
 8013946:	f113 0f0f 	cmn.w	r3, #15
 801394a:	d004      	beq.n	8013956 <lwip_netconn_err_to_msg+0x2a>
 801394c:	e005      	b.n	801395a <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 801394e:	4b0a      	ldr	r3, [pc, #40]	; (8013978 <lwip_netconn_err_to_msg+0x4c>)
 8013950:	e00e      	b.n	8013970 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8013952:	4b0a      	ldr	r3, [pc, #40]	; (801397c <lwip_netconn_err_to_msg+0x50>)
 8013954:	e00c      	b.n	8013970 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8013956:	4b0a      	ldr	r3, [pc, #40]	; (8013980 <lwip_netconn_err_to_msg+0x54>)
 8013958:	e00a      	b.n	8013970 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 801395a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d005      	beq.n	801396e <lwip_netconn_err_to_msg+0x42>
 8013962:	4b08      	ldr	r3, [pc, #32]	; (8013984 <lwip_netconn_err_to_msg+0x58>)
 8013964:	227d      	movs	r2, #125	; 0x7d
 8013966:	4908      	ldr	r1, [pc, #32]	; (8013988 <lwip_netconn_err_to_msg+0x5c>)
 8013968:	4808      	ldr	r0, [pc, #32]	; (801398c <lwip_netconn_err_to_msg+0x60>)
 801396a:	f013 f815 	bl	8026998 <iprintf>
      return NULL;
 801396e:	2300      	movs	r3, #0
  }
}
 8013970:	4618      	mov	r0, r3
 8013972:	3708      	adds	r7, #8
 8013974:	46bd      	mov	sp, r7
 8013976:	bd80      	pop	{r7, pc}
 8013978:	0802bc70 	.word	0x0802bc70
 801397c:	0802bc71 	.word	0x0802bc71
 8013980:	0802bc72 	.word	0x0802bc72
 8013984:	080280e0 	.word	0x080280e0
 8013988:	08028114 	.word	0x08028114
 801398c:	08028124 	.word	0x08028124

08013990 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b082      	sub	sp, #8
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
 8013998:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 801399a:	683b      	ldr	r3, [r7, #0]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d105      	bne.n	80139ac <lwip_netconn_is_err_msg+0x1c>
 80139a0:	4b12      	ldr	r3, [pc, #72]	; (80139ec <lwip_netconn_is_err_msg+0x5c>)
 80139a2:	2285      	movs	r2, #133	; 0x85
 80139a4:	4912      	ldr	r1, [pc, #72]	; (80139f0 <lwip_netconn_is_err_msg+0x60>)
 80139a6:	4813      	ldr	r0, [pc, #76]	; (80139f4 <lwip_netconn_is_err_msg+0x64>)
 80139a8:	f012 fff6 	bl	8026998 <iprintf>

  if (msg == &netconn_aborted) {
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	4a12      	ldr	r2, [pc, #72]	; (80139f8 <lwip_netconn_is_err_msg+0x68>)
 80139b0:	4293      	cmp	r3, r2
 80139b2:	d104      	bne.n	80139be <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80139b4:	683b      	ldr	r3, [r7, #0]
 80139b6:	22f3      	movs	r2, #243	; 0xf3
 80139b8:	701a      	strb	r2, [r3, #0]
    return 1;
 80139ba:	2301      	movs	r3, #1
 80139bc:	e012      	b.n	80139e4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	4a0e      	ldr	r2, [pc, #56]	; (80139fc <lwip_netconn_is_err_msg+0x6c>)
 80139c2:	4293      	cmp	r3, r2
 80139c4:	d104      	bne.n	80139d0 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	22f2      	movs	r2, #242	; 0xf2
 80139ca:	701a      	strb	r2, [r3, #0]
    return 1;
 80139cc:	2301      	movs	r3, #1
 80139ce:	e009      	b.n	80139e4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	4a0b      	ldr	r2, [pc, #44]	; (8013a00 <lwip_netconn_is_err_msg+0x70>)
 80139d4:	4293      	cmp	r3, r2
 80139d6:	d104      	bne.n	80139e2 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80139d8:	683b      	ldr	r3, [r7, #0]
 80139da:	22f1      	movs	r2, #241	; 0xf1
 80139dc:	701a      	strb	r2, [r3, #0]
    return 1;
 80139de:	2301      	movs	r3, #1
 80139e0:	e000      	b.n	80139e4 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80139e2:	2300      	movs	r3, #0
}
 80139e4:	4618      	mov	r0, r3
 80139e6:	3708      	adds	r7, #8
 80139e8:	46bd      	mov	sp, r7
 80139ea:	bd80      	pop	{r7, pc}
 80139ec:	080280e0 	.word	0x080280e0
 80139f0:	0802814c 	.word	0x0802814c
 80139f4:	08028124 	.word	0x08028124
 80139f8:	0802bc70 	.word	0x0802bc70
 80139fc:	0802bc71 	.word	0x0802bc71
 8013a00:	0802bc72 	.word	0x0802bc72

08013a04 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b088      	sub	sp, #32
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	60f8      	str	r0, [r7, #12]
 8013a0c:	60b9      	str	r1, [r7, #8]
 8013a0e:	607a      	str	r2, [r7, #4]
 8013a10:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8013a12:	68bb      	ldr	r3, [r7, #8]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d105      	bne.n	8013a24 <recv_udp+0x20>
 8013a18:	4b34      	ldr	r3, [pc, #208]	; (8013aec <recv_udp+0xe8>)
 8013a1a:	22e5      	movs	r2, #229	; 0xe5
 8013a1c:	4934      	ldr	r1, [pc, #208]	; (8013af0 <recv_udp+0xec>)
 8013a1e:	4835      	ldr	r0, [pc, #212]	; (8013af4 <recv_udp+0xf0>)
 8013a20:	f012 ffba 	bl	8026998 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d105      	bne.n	8013a36 <recv_udp+0x32>
 8013a2a:	4b30      	ldr	r3, [pc, #192]	; (8013aec <recv_udp+0xe8>)
 8013a2c:	22e6      	movs	r2, #230	; 0xe6
 8013a2e:	4932      	ldr	r1, [pc, #200]	; (8013af8 <recv_udp+0xf4>)
 8013a30:	4830      	ldr	r0, [pc, #192]	; (8013af4 <recv_udp+0xf0>)
 8013a32:	f012 ffb1 	bl	8026998 <iprintf>
  conn = (struct netconn *)arg;
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8013a3a:	69fb      	ldr	r3, [r7, #28]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d103      	bne.n	8013a48 <recv_udp+0x44>
    pbuf_free(p);
 8013a40:	6878      	ldr	r0, [r7, #4]
 8013a42:	f004 febb 	bl	80187bc <pbuf_free>
    return;
 8013a46:	e04d      	b.n	8013ae4 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8013a48:	69fb      	ldr	r3, [r7, #28]
 8013a4a:	685b      	ldr	r3, [r3, #4]
 8013a4c:	68ba      	ldr	r2, [r7, #8]
 8013a4e:	429a      	cmp	r2, r3
 8013a50:	d005      	beq.n	8013a5e <recv_udp+0x5a>
 8013a52:	4b26      	ldr	r3, [pc, #152]	; (8013aec <recv_udp+0xe8>)
 8013a54:	22ee      	movs	r2, #238	; 0xee
 8013a56:	4929      	ldr	r1, [pc, #164]	; (8013afc <recv_udp+0xf8>)
 8013a58:	4826      	ldr	r0, [pc, #152]	; (8013af4 <recv_udp+0xf0>)
 8013a5a:	f012 ff9d 	bl	8026998 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8013a5e:	69fb      	ldr	r3, [r7, #28]
 8013a60:	3310      	adds	r3, #16
 8013a62:	4618      	mov	r0, r3
 8013a64:	f010 fc65 	bl	8024332 <sys_mbox_valid>
 8013a68:	4603      	mov	r3, r0
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d103      	bne.n	8013a76 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8013a6e:	6878      	ldr	r0, [r7, #4]
 8013a70:	f004 fea4 	bl	80187bc <pbuf_free>
    return;
 8013a74:	e036      	b.n	8013ae4 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8013a76:	2006      	movs	r0, #6
 8013a78:	f003 ffa0 	bl	80179bc <memp_malloc>
 8013a7c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8013a7e:	69bb      	ldr	r3, [r7, #24]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d103      	bne.n	8013a8c <recv_udp+0x88>
    pbuf_free(p);
 8013a84:	6878      	ldr	r0, [r7, #4]
 8013a86:	f004 fe99 	bl	80187bc <pbuf_free>
    return;
 8013a8a:	e02b      	b.n	8013ae4 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8013a8c:	69bb      	ldr	r3, [r7, #24]
 8013a8e:	687a      	ldr	r2, [r7, #4]
 8013a90:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8013a92:	69bb      	ldr	r3, [r7, #24]
 8013a94:	687a      	ldr	r2, [r7, #4]
 8013a96:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d002      	beq.n	8013aa4 <recv_udp+0xa0>
 8013a9e:	683b      	ldr	r3, [r7, #0]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	e000      	b.n	8013aa6 <recv_udp+0xa2>
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	69ba      	ldr	r2, [r7, #24]
 8013aa8:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8013aaa:	69bb      	ldr	r3, [r7, #24]
 8013aac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013aae:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	891b      	ldrh	r3, [r3, #8]
 8013ab4:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8013ab6:	69fb      	ldr	r3, [r7, #28]
 8013ab8:	3310      	adds	r3, #16
 8013aba:	69b9      	ldr	r1, [r7, #24]
 8013abc:	4618      	mov	r0, r3
 8013abe:	f010 fbc3 	bl	8024248 <sys_mbox_trypost>
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d003      	beq.n	8013ad0 <recv_udp+0xcc>
    netbuf_delete(buf);
 8013ac8:	69b8      	ldr	r0, [r7, #24]
 8013aca:	f001 fd63 	bl	8015594 <netbuf_delete>
    return;
 8013ace:	e009      	b.n	8013ae4 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8013ad0:	69fb      	ldr	r3, [r7, #28]
 8013ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d005      	beq.n	8013ae4 <recv_udp+0xe0>
 8013ad8:	69fb      	ldr	r3, [r7, #28]
 8013ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013adc:	8afa      	ldrh	r2, [r7, #22]
 8013ade:	2100      	movs	r1, #0
 8013ae0:	69f8      	ldr	r0, [r7, #28]
 8013ae2:	4798      	blx	r3
  }
}
 8013ae4:	3720      	adds	r7, #32
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}
 8013aea:	bf00      	nop
 8013aec:	080280e0 	.word	0x080280e0
 8013af0:	08028158 	.word	0x08028158
 8013af4:	08028124 	.word	0x08028124
 8013af8:	0802817c 	.word	0x0802817c
 8013afc:	0802819c 	.word	0x0802819c

08013b00 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8013b00:	b580      	push	{r7, lr}
 8013b02:	b088      	sub	sp, #32
 8013b04:	af00      	add	r7, sp, #0
 8013b06:	60f8      	str	r0, [r7, #12]
 8013b08:	60b9      	str	r1, [r7, #8]
 8013b0a:	607a      	str	r2, [r7, #4]
 8013b0c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8013b0e:	68bb      	ldr	r3, [r7, #8]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d106      	bne.n	8013b22 <recv_tcp+0x22>
 8013b14:	4b36      	ldr	r3, [pc, #216]	; (8013bf0 <recv_tcp+0xf0>)
 8013b16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013b1a:	4936      	ldr	r1, [pc, #216]	; (8013bf4 <recv_tcp+0xf4>)
 8013b1c:	4836      	ldr	r0, [pc, #216]	; (8013bf8 <recv_tcp+0xf8>)
 8013b1e:	f012 ff3b 	bl	8026998 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d106      	bne.n	8013b36 <recv_tcp+0x36>
 8013b28:	4b31      	ldr	r3, [pc, #196]	; (8013bf0 <recv_tcp+0xf0>)
 8013b2a:	f240 122d 	movw	r2, #301	; 0x12d
 8013b2e:	4933      	ldr	r1, [pc, #204]	; (8013bfc <recv_tcp+0xfc>)
 8013b30:	4831      	ldr	r0, [pc, #196]	; (8013bf8 <recv_tcp+0xf8>)
 8013b32:	f012 ff31 	bl	8026998 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8013b36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d006      	beq.n	8013b4c <recv_tcp+0x4c>
 8013b3e:	4b2c      	ldr	r3, [pc, #176]	; (8013bf0 <recv_tcp+0xf0>)
 8013b40:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8013b44:	492e      	ldr	r1, [pc, #184]	; (8013c00 <recv_tcp+0x100>)
 8013b46:	482c      	ldr	r0, [pc, #176]	; (8013bf8 <recv_tcp+0xf8>)
 8013b48:	f012 ff26 	bl	8026998 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8013b50:	697b      	ldr	r3, [r7, #20]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d102      	bne.n	8013b5c <recv_tcp+0x5c>
    return ERR_VAL;
 8013b56:	f06f 0305 	mvn.w	r3, #5
 8013b5a:	e045      	b.n	8013be8 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8013b5c:	697b      	ldr	r3, [r7, #20]
 8013b5e:	685b      	ldr	r3, [r3, #4]
 8013b60:	68ba      	ldr	r2, [r7, #8]
 8013b62:	429a      	cmp	r2, r3
 8013b64:	d006      	beq.n	8013b74 <recv_tcp+0x74>
 8013b66:	4b22      	ldr	r3, [pc, #136]	; (8013bf0 <recv_tcp+0xf0>)
 8013b68:	f240 1235 	movw	r2, #309	; 0x135
 8013b6c:	4925      	ldr	r1, [pc, #148]	; (8013c04 <recv_tcp+0x104>)
 8013b6e:	4822      	ldr	r0, [pc, #136]	; (8013bf8 <recv_tcp+0xf8>)
 8013b70:	f012 ff12 	bl	8026998 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8013b74:	697b      	ldr	r3, [r7, #20]
 8013b76:	3310      	adds	r3, #16
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f010 fbda 	bl	8024332 <sys_mbox_valid>
 8013b7e:	4603      	mov	r3, r0
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d10d      	bne.n	8013ba0 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d008      	beq.n	8013b9c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	891b      	ldrh	r3, [r3, #8]
 8013b8e:	4619      	mov	r1, r3
 8013b90:	68b8      	ldr	r0, [r7, #8]
 8013b92:	f005 fdd1 	bl	8019738 <tcp_recved>
      pbuf_free(p);
 8013b96:	6878      	ldr	r0, [r7, #4]
 8013b98:	f004 fe10 	bl	80187bc <pbuf_free>
    }
    return ERR_OK;
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	e023      	b.n	8013be8 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d005      	beq.n	8013bb2 <recv_tcp+0xb2>
    msg = p;
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	891b      	ldrh	r3, [r3, #8]
 8013bae:	83fb      	strh	r3, [r7, #30]
 8013bb0:	e003      	b.n	8013bba <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8013bb2:	4b15      	ldr	r3, [pc, #84]	; (8013c08 <recv_tcp+0x108>)
 8013bb4:	61bb      	str	r3, [r7, #24]
    len = 0;
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8013bba:	697b      	ldr	r3, [r7, #20]
 8013bbc:	3310      	adds	r3, #16
 8013bbe:	69b9      	ldr	r1, [r7, #24]
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f010 fb41 	bl	8024248 <sys_mbox_trypost>
 8013bc6:	4603      	mov	r3, r0
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d002      	beq.n	8013bd2 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8013bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bd0:	e00a      	b.n	8013be8 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8013bd2:	697b      	ldr	r3, [r7, #20]
 8013bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d005      	beq.n	8013be6 <recv_tcp+0xe6>
 8013bda:	697b      	ldr	r3, [r7, #20]
 8013bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bde:	8bfa      	ldrh	r2, [r7, #30]
 8013be0:	2100      	movs	r1, #0
 8013be2:	6978      	ldr	r0, [r7, #20]
 8013be4:	4798      	blx	r3
  }

  return ERR_OK;
 8013be6:	2300      	movs	r3, #0
}
 8013be8:	4618      	mov	r0, r3
 8013bea:	3720      	adds	r7, #32
 8013bec:	46bd      	mov	sp, r7
 8013bee:	bd80      	pop	{r7, pc}
 8013bf0:	080280e0 	.word	0x080280e0
 8013bf4:	080281bc 	.word	0x080281bc
 8013bf8:	08028124 	.word	0x08028124
 8013bfc:	080281e0 	.word	0x080281e0
 8013c00:	08028200 	.word	0x08028200
 8013c04:	08028218 	.word	0x08028218
 8013c08:	0802bc72 	.word	0x0802bc72

08013c0c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b084      	sub	sp, #16
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
 8013c14:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d106      	bne.n	8013c2e <poll_tcp+0x22>
 8013c20:	4b2a      	ldr	r3, [pc, #168]	; (8013ccc <poll_tcp+0xc0>)
 8013c22:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8013c26:	492a      	ldr	r1, [pc, #168]	; (8013cd0 <poll_tcp+0xc4>)
 8013c28:	482a      	ldr	r0, [pc, #168]	; (8013cd4 <poll_tcp+0xc8>)
 8013c2a:	f012 feb5 	bl	8026998 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	785b      	ldrb	r3, [r3, #1]
 8013c32:	2b01      	cmp	r3, #1
 8013c34:	d104      	bne.n	8013c40 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8013c36:	2101      	movs	r1, #1
 8013c38:	68f8      	ldr	r0, [r7, #12]
 8013c3a:	f001 f921 	bl	8014e80 <lwip_netconn_do_writemore>
 8013c3e:	e016      	b.n	8013c6e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	785b      	ldrb	r3, [r3, #1]
 8013c44:	2b04      	cmp	r3, #4
 8013c46:	d112      	bne.n	8013c6e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	6a1b      	ldr	r3, [r3, #32]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d00a      	beq.n	8013c66 <poll_tcp+0x5a>
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	6a1b      	ldr	r3, [r3, #32]
 8013c54:	7a5b      	ldrb	r3, [r3, #9]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d005      	beq.n	8013c66 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	6a1b      	ldr	r3, [r3, #32]
 8013c5e:	7a5a      	ldrb	r2, [r3, #9]
 8013c60:	3a01      	subs	r2, #1
 8013c62:	b2d2      	uxtb	r2, r2
 8013c64:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8013c66:	2101      	movs	r1, #1
 8013c68:	68f8      	ldr	r0, [r7, #12]
 8013c6a:	f000 fbfb 	bl	8014464 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	7f1b      	ldrb	r3, [r3, #28]
 8013c72:	f003 0310 	and.w	r3, r3, #16
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d022      	beq.n	8013cc0 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	685b      	ldr	r3, [r3, #4]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d01e      	beq.n	8013cc0 <poll_tcp+0xb4>
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	685b      	ldr	r3, [r3, #4]
 8013c86:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013c8a:	f240 3299 	movw	r2, #921	; 0x399
 8013c8e:	4293      	cmp	r3, r2
 8013c90:	d916      	bls.n	8013cc0 <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	685b      	ldr	r3, [r3, #4]
 8013c96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8013c9a:	2b07      	cmp	r3, #7
 8013c9c:	d810      	bhi.n	8013cc0 <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	7f1b      	ldrb	r3, [r3, #28]
 8013ca2:	f023 0310 	bic.w	r3, r3, #16
 8013ca6:	b2da      	uxtb	r2, r3
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d005      	beq.n	8013cc0 <poll_tcp+0xb4>
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cb8:	2200      	movs	r2, #0
 8013cba:	2102      	movs	r1, #2
 8013cbc:	68f8      	ldr	r0, [r7, #12]
 8013cbe:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8013cc0:	2300      	movs	r3, #0
}
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	3710      	adds	r7, #16
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	bd80      	pop	{r7, pc}
 8013cca:	bf00      	nop
 8013ccc:	080280e0 	.word	0x080280e0
 8013cd0:	08028238 	.word	0x08028238
 8013cd4:	08028124 	.word	0x08028124

08013cd8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b086      	sub	sp, #24
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	60f8      	str	r0, [r7, #12]
 8013ce0:	60b9      	str	r1, [r7, #8]
 8013ce2:	4613      	mov	r3, r2
 8013ce4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8013cea:	697b      	ldr	r3, [r7, #20]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d106      	bne.n	8013cfe <sent_tcp+0x26>
 8013cf0:	4b21      	ldr	r3, [pc, #132]	; (8013d78 <sent_tcp+0xa0>)
 8013cf2:	f240 1293 	movw	r2, #403	; 0x193
 8013cf6:	4921      	ldr	r1, [pc, #132]	; (8013d7c <sent_tcp+0xa4>)
 8013cf8:	4821      	ldr	r0, [pc, #132]	; (8013d80 <sent_tcp+0xa8>)
 8013cfa:	f012 fe4d 	bl	8026998 <iprintf>

  if (conn) {
 8013cfe:	697b      	ldr	r3, [r7, #20]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d033      	beq.n	8013d6c <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 8013d04:	697b      	ldr	r3, [r7, #20]
 8013d06:	785b      	ldrb	r3, [r3, #1]
 8013d08:	2b01      	cmp	r3, #1
 8013d0a:	d104      	bne.n	8013d16 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8013d0c:	2101      	movs	r1, #1
 8013d0e:	6978      	ldr	r0, [r7, #20]
 8013d10:	f001 f8b6 	bl	8014e80 <lwip_netconn_do_writemore>
 8013d14:	e007      	b.n	8013d26 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8013d16:	697b      	ldr	r3, [r7, #20]
 8013d18:	785b      	ldrb	r3, [r3, #1]
 8013d1a:	2b04      	cmp	r3, #4
 8013d1c:	d103      	bne.n	8013d26 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8013d1e:	2101      	movs	r1, #1
 8013d20:	6978      	ldr	r0, [r7, #20]
 8013d22:	f000 fb9f 	bl	8014464 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8013d26:	697b      	ldr	r3, [r7, #20]
 8013d28:	685b      	ldr	r3, [r3, #4]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d01e      	beq.n	8013d6c <sent_tcp+0x94>
 8013d2e:	697b      	ldr	r3, [r7, #20]
 8013d30:	685b      	ldr	r3, [r3, #4]
 8013d32:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013d36:	f240 3299 	movw	r2, #921	; 0x399
 8013d3a:	4293      	cmp	r3, r2
 8013d3c:	d916      	bls.n	8013d6c <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8013d3e:	697b      	ldr	r3, [r7, #20]
 8013d40:	685b      	ldr	r3, [r3, #4]
 8013d42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8013d46:	2b07      	cmp	r3, #7
 8013d48:	d810      	bhi.n	8013d6c <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8013d4a:	697b      	ldr	r3, [r7, #20]
 8013d4c:	7f1b      	ldrb	r3, [r3, #28]
 8013d4e:	f023 0310 	bic.w	r3, r3, #16
 8013d52:	b2da      	uxtb	r2, r3
 8013d54:	697b      	ldr	r3, [r7, #20]
 8013d56:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8013d58:	697b      	ldr	r3, [r7, #20]
 8013d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d005      	beq.n	8013d6c <sent_tcp+0x94>
 8013d60:	697b      	ldr	r3, [r7, #20]
 8013d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d64:	88fa      	ldrh	r2, [r7, #6]
 8013d66:	2102      	movs	r1, #2
 8013d68:	6978      	ldr	r0, [r7, #20]
 8013d6a:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8013d6c:	2300      	movs	r3, #0
}
 8013d6e:	4618      	mov	r0, r3
 8013d70:	3718      	adds	r7, #24
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}
 8013d76:	bf00      	nop
 8013d78:	080280e0 	.word	0x080280e0
 8013d7c:	08028238 	.word	0x08028238
 8013d80:	08028124 	.word	0x08028124

08013d84 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b088      	sub	sp, #32
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
 8013d8c:	460b      	mov	r3, r1
 8013d8e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8013d94:	69fb      	ldr	r3, [r7, #28]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d106      	bne.n	8013da8 <err_tcp+0x24>
 8013d9a:	4b5f      	ldr	r3, [pc, #380]	; (8013f18 <err_tcp+0x194>)
 8013d9c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013da0:	495e      	ldr	r1, [pc, #376]	; (8013f1c <err_tcp+0x198>)
 8013da2:	485f      	ldr	r0, [pc, #380]	; (8013f20 <err_tcp+0x19c>)
 8013da4:	f012 fdf8 	bl	8026998 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8013da8:	f010 fbde 	bl	8024568 <sys_arch_protect>
 8013dac:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8013dae:	69fb      	ldr	r3, [r7, #28]
 8013db0:	2200      	movs	r2, #0
 8013db2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8013db4:	69fb      	ldr	r3, [r7, #28]
 8013db6:	78fa      	ldrb	r2, [r7, #3]
 8013db8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8013dba:	69fb      	ldr	r3, [r7, #28]
 8013dbc:	7f1b      	ldrb	r3, [r3, #28]
 8013dbe:	f043 0301 	orr.w	r3, r3, #1
 8013dc2:	b2da      	uxtb	r2, r3
 8013dc4:	69fb      	ldr	r3, [r7, #28]
 8013dc6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8013dc8:	69fb      	ldr	r3, [r7, #28]
 8013dca:	785b      	ldrb	r3, [r3, #1]
 8013dcc:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8013dce:	69fb      	ldr	r3, [r7, #28]
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8013dd4:	69b8      	ldr	r0, [r7, #24]
 8013dd6:	f010 fbd5 	bl	8024584 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8013dda:	69fb      	ldr	r3, [r7, #28]
 8013ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d005      	beq.n	8013dee <err_tcp+0x6a>
 8013de2:	69fb      	ldr	r3, [r7, #28]
 8013de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013de6:	2200      	movs	r2, #0
 8013de8:	2104      	movs	r1, #4
 8013dea:	69f8      	ldr	r0, [r7, #28]
 8013dec:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8013dee:	69fb      	ldr	r3, [r7, #28]
 8013df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d005      	beq.n	8013e02 <err_tcp+0x7e>
 8013df6:	69fb      	ldr	r3, [r7, #28]
 8013df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	2100      	movs	r1, #0
 8013dfe:	69f8      	ldr	r0, [r7, #28]
 8013e00:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8013e02:	69fb      	ldr	r3, [r7, #28]
 8013e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d005      	beq.n	8013e16 <err_tcp+0x92>
 8013e0a:	69fb      	ldr	r3, [r7, #28]
 8013e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e0e:	2200      	movs	r2, #0
 8013e10:	2102      	movs	r1, #2
 8013e12:	69f8      	ldr	r0, [r7, #28]
 8013e14:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8013e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f7ff fd86 	bl	801392c <lwip_netconn_err_to_msg>
 8013e20:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8013e22:	69fb      	ldr	r3, [r7, #28]
 8013e24:	3310      	adds	r3, #16
 8013e26:	4618      	mov	r0, r3
 8013e28:	f010 fa83 	bl	8024332 <sys_mbox_valid>
 8013e2c:	4603      	mov	r3, r0
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d005      	beq.n	8013e3e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8013e32:	69fb      	ldr	r3, [r7, #28]
 8013e34:	3310      	adds	r3, #16
 8013e36:	6939      	ldr	r1, [r7, #16]
 8013e38:	4618      	mov	r0, r3
 8013e3a:	f010 fa05 	bl	8024248 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8013e3e:	69fb      	ldr	r3, [r7, #28]
 8013e40:	3314      	adds	r3, #20
 8013e42:	4618      	mov	r0, r3
 8013e44:	f010 fa75 	bl	8024332 <sys_mbox_valid>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d005      	beq.n	8013e5a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8013e4e:	69fb      	ldr	r3, [r7, #28]
 8013e50:	3314      	adds	r3, #20
 8013e52:	6939      	ldr	r1, [r7, #16]
 8013e54:	4618      	mov	r0, r3
 8013e56:	f010 f9f7 	bl	8024248 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8013e5a:	7dfb      	ldrb	r3, [r7, #23]
 8013e5c:	2b01      	cmp	r3, #1
 8013e5e:	d005      	beq.n	8013e6c <err_tcp+0xe8>
 8013e60:	7dfb      	ldrb	r3, [r7, #23]
 8013e62:	2b04      	cmp	r3, #4
 8013e64:	d002      	beq.n	8013e6c <err_tcp+0xe8>
 8013e66:	7dfb      	ldrb	r3, [r7, #23]
 8013e68:	2b03      	cmp	r3, #3
 8013e6a:	d143      	bne.n	8013ef4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8013e6c:	69fb      	ldr	r3, [r7, #28]
 8013e6e:	7f1b      	ldrb	r3, [r3, #28]
 8013e70:	f003 0304 	and.w	r3, r3, #4
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	bf14      	ite	ne
 8013e78:	2301      	movne	r3, #1
 8013e7a:	2300      	moveq	r3, #0
 8013e7c:	b2db      	uxtb	r3, r3
 8013e7e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8013e80:	69fb      	ldr	r3, [r7, #28]
 8013e82:	7f1b      	ldrb	r3, [r3, #28]
 8013e84:	f023 0304 	bic.w	r3, r3, #4
 8013e88:	b2da      	uxtb	r2, r3
 8013e8a:	69fb      	ldr	r3, [r7, #28]
 8013e8c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d13b      	bne.n	8013f0c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8013e94:	69fb      	ldr	r3, [r7, #28]
 8013e96:	6a1b      	ldr	r3, [r3, #32]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d106      	bne.n	8013eaa <err_tcp+0x126>
 8013e9c:	4b1e      	ldr	r3, [pc, #120]	; (8013f18 <err_tcp+0x194>)
 8013e9e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013ea2:	4920      	ldr	r1, [pc, #128]	; (8013f24 <err_tcp+0x1a0>)
 8013ea4:	481e      	ldr	r0, [pc, #120]	; (8013f20 <err_tcp+0x19c>)
 8013ea6:	f012 fd77 	bl	8026998 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8013eaa:	7dfb      	ldrb	r3, [r7, #23]
 8013eac:	2b04      	cmp	r3, #4
 8013eae:	d104      	bne.n	8013eba <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8013eb0:	69fb      	ldr	r3, [r7, #28]
 8013eb2:	6a1b      	ldr	r3, [r3, #32]
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	711a      	strb	r2, [r3, #4]
 8013eb8:	e003      	b.n	8013ec2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8013eba:	69fb      	ldr	r3, [r7, #28]
 8013ebc:	6a1b      	ldr	r3, [r3, #32]
 8013ebe:	78fa      	ldrb	r2, [r7, #3]
 8013ec0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8013ec2:	69fb      	ldr	r3, [r7, #28]
 8013ec4:	6a1b      	ldr	r3, [r3, #32]
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	330c      	adds	r3, #12
 8013eca:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8013ecc:	68b8      	ldr	r0, [r7, #8]
 8013ece:	f010 fac1 	bl	8024454 <sys_sem_valid>
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d106      	bne.n	8013ee6 <err_tcp+0x162>
 8013ed8:	4b0f      	ldr	r3, [pc, #60]	; (8013f18 <err_tcp+0x194>)
 8013eda:	f240 12ef 	movw	r2, #495	; 0x1ef
 8013ede:	4912      	ldr	r1, [pc, #72]	; (8013f28 <err_tcp+0x1a4>)
 8013ee0:	480f      	ldr	r0, [pc, #60]	; (8013f20 <err_tcp+0x19c>)
 8013ee2:	f012 fd59 	bl	8026998 <iprintf>
      conn->current_msg = NULL;
 8013ee6:	69fb      	ldr	r3, [r7, #28]
 8013ee8:	2200      	movs	r2, #0
 8013eea:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8013eec:	68b8      	ldr	r0, [r7, #8]
 8013eee:	f010 fa97 	bl	8024420 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8013ef2:	e00b      	b.n	8013f0c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8013ef4:	69fb      	ldr	r3, [r7, #28]
 8013ef6:	6a1b      	ldr	r3, [r3, #32]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d008      	beq.n	8013f0e <err_tcp+0x18a>
 8013efc:	4b06      	ldr	r3, [pc, #24]	; (8013f18 <err_tcp+0x194>)
 8013efe:	f240 12f7 	movw	r2, #503	; 0x1f7
 8013f02:	490a      	ldr	r1, [pc, #40]	; (8013f2c <err_tcp+0x1a8>)
 8013f04:	4806      	ldr	r0, [pc, #24]	; (8013f20 <err_tcp+0x19c>)
 8013f06:	f012 fd47 	bl	8026998 <iprintf>
  }
}
 8013f0a:	e000      	b.n	8013f0e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8013f0c:	bf00      	nop
}
 8013f0e:	bf00      	nop
 8013f10:	3720      	adds	r7, #32
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd80      	pop	{r7, pc}
 8013f16:	bf00      	nop
 8013f18:	080280e0 	.word	0x080280e0
 8013f1c:	08028238 	.word	0x08028238
 8013f20:	08028124 	.word	0x08028124
 8013f24:	08028248 	.word	0x08028248
 8013f28:	08028264 	.word	0x08028264
 8013f2c:	08028280 	.word	0x08028280

08013f30 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b084      	sub	sp, #16
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	685b      	ldr	r3, [r3, #4]
 8013f3c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8013f3e:	6879      	ldr	r1, [r7, #4]
 8013f40:	68f8      	ldr	r0, [r7, #12]
 8013f42:	f006 fbd3 	bl	801a6ec <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8013f46:	490a      	ldr	r1, [pc, #40]	; (8013f70 <setup_tcp+0x40>)
 8013f48:	68f8      	ldr	r0, [r7, #12]
 8013f4a:	f006 fbe1 	bl	801a710 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8013f4e:	4909      	ldr	r1, [pc, #36]	; (8013f74 <setup_tcp+0x44>)
 8013f50:	68f8      	ldr	r0, [r7, #12]
 8013f52:	f006 fbff 	bl	801a754 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8013f56:	2202      	movs	r2, #2
 8013f58:	4907      	ldr	r1, [pc, #28]	; (8013f78 <setup_tcp+0x48>)
 8013f5a:	68f8      	ldr	r0, [r7, #12]
 8013f5c:	f006 fc56 	bl	801a80c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8013f60:	4906      	ldr	r1, [pc, #24]	; (8013f7c <setup_tcp+0x4c>)
 8013f62:	68f8      	ldr	r0, [r7, #12]
 8013f64:	f006 fc18 	bl	801a798 <tcp_err>
}
 8013f68:	bf00      	nop
 8013f6a:	3710      	adds	r7, #16
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	bd80      	pop	{r7, pc}
 8013f70:	08013b01 	.word	0x08013b01
 8013f74:	08013cd9 	.word	0x08013cd9
 8013f78:	08013c0d 	.word	0x08013c0d
 8013f7c:	08013d85 	.word	0x08013d85

08013f80 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8013f80:	b590      	push	{r4, r7, lr}
 8013f82:	b089      	sub	sp, #36	; 0x24
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	60f8      	str	r0, [r7, #12]
 8013f88:	60b9      	str	r1, [r7, #8]
 8013f8a:	4613      	mov	r3, r2
 8013f8c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8013f92:	69fb      	ldr	r3, [r7, #28]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d102      	bne.n	8013f9e <accept_function+0x1e>
    return ERR_VAL;
 8013f98:	f06f 0305 	mvn.w	r3, #5
 8013f9c:	e0a1      	b.n	80140e2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8013f9e:	69fb      	ldr	r3, [r7, #28]
 8013fa0:	3314      	adds	r3, #20
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	f010 f9c5 	bl	8024332 <sys_mbox_valid>
 8013fa8:	4603      	mov	r3, r0
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d102      	bne.n	8013fb4 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8013fae:	f06f 0305 	mvn.w	r3, #5
 8013fb2:	e096      	b.n	80140e2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8013fb4:	68bb      	ldr	r3, [r7, #8]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d11b      	bne.n	8013ff2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8013fba:	69fb      	ldr	r3, [r7, #28]
 8013fbc:	f103 0414 	add.w	r4, r3, #20
 8013fc0:	f06f 000c 	mvn.w	r0, #12
 8013fc4:	f7ff fcb2 	bl	801392c <lwip_netconn_err_to_msg>
 8013fc8:	4603      	mov	r3, r0
 8013fca:	4619      	mov	r1, r3
 8013fcc:	4620      	mov	r0, r4
 8013fce:	f010 f93b 	bl	8024248 <sys_mbox_trypost>
 8013fd2:	4603      	mov	r3, r0
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d109      	bne.n	8013fec <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8013fd8:	69fb      	ldr	r3, [r7, #28]
 8013fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d005      	beq.n	8013fec <accept_function+0x6c>
 8013fe0:	69fb      	ldr	r3, [r7, #28]
 8013fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fe4:	2200      	movs	r2, #0
 8013fe6:	2100      	movs	r1, #0
 8013fe8:	69f8      	ldr	r0, [r7, #28]
 8013fea:	4798      	blx	r3
    }
    return ERR_VAL;
 8013fec:	f06f 0305 	mvn.w	r3, #5
 8013ff0:	e077      	b.n	80140e2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8013ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d006      	beq.n	8014008 <accept_function+0x88>
 8013ffa:	4b3c      	ldr	r3, [pc, #240]	; (80140ec <accept_function+0x16c>)
 8013ffc:	f240 222a 	movw	r2, #554	; 0x22a
 8014000:	493b      	ldr	r1, [pc, #236]	; (80140f0 <accept_function+0x170>)
 8014002:	483c      	ldr	r0, [pc, #240]	; (80140f4 <accept_function+0x174>)
 8014004:	f012 fcc8 	bl	8026998 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8014008:	69fb      	ldr	r3, [r7, #28]
 801400a:	781a      	ldrb	r2, [r3, #0]
 801400c:	69fb      	ldr	r3, [r7, #28]
 801400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014010:	4619      	mov	r1, r3
 8014012:	4610      	mov	r0, r2
 8014014:	f000 f8f0 	bl	80141f8 <netconn_alloc>
 8014018:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 801401a:	69bb      	ldr	r3, [r7, #24]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d11b      	bne.n	8014058 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8014020:	69fb      	ldr	r3, [r7, #28]
 8014022:	f103 0414 	add.w	r4, r3, #20
 8014026:	f06f 000c 	mvn.w	r0, #12
 801402a:	f7ff fc7f 	bl	801392c <lwip_netconn_err_to_msg>
 801402e:	4603      	mov	r3, r0
 8014030:	4619      	mov	r1, r3
 8014032:	4620      	mov	r0, r4
 8014034:	f010 f908 	bl	8024248 <sys_mbox_trypost>
 8014038:	4603      	mov	r3, r0
 801403a:	2b00      	cmp	r3, #0
 801403c:	d109      	bne.n	8014052 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801403e:	69fb      	ldr	r3, [r7, #28]
 8014040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014042:	2b00      	cmp	r3, #0
 8014044:	d005      	beq.n	8014052 <accept_function+0xd2>
 8014046:	69fb      	ldr	r3, [r7, #28]
 8014048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801404a:	2200      	movs	r2, #0
 801404c:	2100      	movs	r1, #0
 801404e:	69f8      	ldr	r0, [r7, #28]
 8014050:	4798      	blx	r3
    }
    return ERR_MEM;
 8014052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014056:	e044      	b.n	80140e2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8014058:	69bb      	ldr	r3, [r7, #24]
 801405a:	68ba      	ldr	r2, [r7, #8]
 801405c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 801405e:	69b8      	ldr	r0, [r7, #24]
 8014060:	f7ff ff66 	bl	8013f30 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8014064:	69fb      	ldr	r3, [r7, #28]
 8014066:	3314      	adds	r3, #20
 8014068:	69b9      	ldr	r1, [r7, #24]
 801406a:	4618      	mov	r0, r3
 801406c:	f010 f8ec 	bl	8024248 <sys_mbox_trypost>
 8014070:	4603      	mov	r3, r0
 8014072:	2b00      	cmp	r3, #0
 8014074:	d02a      	beq.n	80140cc <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8014076:	69bb      	ldr	r3, [r7, #24]
 8014078:	685b      	ldr	r3, [r3, #4]
 801407a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 801407c:	2100      	movs	r1, #0
 801407e:	6978      	ldr	r0, [r7, #20]
 8014080:	f006 fb34 	bl	801a6ec <tcp_arg>
    tcp_recv(pcb, NULL);
 8014084:	2100      	movs	r1, #0
 8014086:	6978      	ldr	r0, [r7, #20]
 8014088:	f006 fb42 	bl	801a710 <tcp_recv>
    tcp_sent(pcb, NULL);
 801408c:	2100      	movs	r1, #0
 801408e:	6978      	ldr	r0, [r7, #20]
 8014090:	f006 fb60 	bl	801a754 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8014094:	2200      	movs	r2, #0
 8014096:	2100      	movs	r1, #0
 8014098:	6978      	ldr	r0, [r7, #20]
 801409a:	f006 fbb7 	bl	801a80c <tcp_poll>
    tcp_err(pcb, NULL);
 801409e:	2100      	movs	r1, #0
 80140a0:	6978      	ldr	r0, [r7, #20]
 80140a2:	f006 fb79 	bl	801a798 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 80140a6:	69bb      	ldr	r3, [r7, #24]
 80140a8:	2200      	movs	r2, #0
 80140aa:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 80140ac:	69bb      	ldr	r3, [r7, #24]
 80140ae:	3310      	adds	r3, #16
 80140b0:	4618      	mov	r0, r3
 80140b2:	f010 f8b7 	bl	8024224 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80140b6:	69bb      	ldr	r3, [r7, #24]
 80140b8:	3310      	adds	r3, #16
 80140ba:	4618      	mov	r0, r3
 80140bc:	f010 f94a 	bl	8024354 <sys_mbox_set_invalid>
    netconn_free(newconn);
 80140c0:	69b8      	ldr	r0, [r7, #24]
 80140c2:	f000 f907 	bl	80142d4 <netconn_free>
    return ERR_MEM;
 80140c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80140ca:	e00a      	b.n	80140e2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80140cc:	69fb      	ldr	r3, [r7, #28]
 80140ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d005      	beq.n	80140e0 <accept_function+0x160>
 80140d4:	69fb      	ldr	r3, [r7, #28]
 80140d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140d8:	2200      	movs	r2, #0
 80140da:	2100      	movs	r1, #0
 80140dc:	69f8      	ldr	r0, [r7, #28]
 80140de:	4798      	blx	r3
  }

  return ERR_OK;
 80140e0:	2300      	movs	r3, #0
}
 80140e2:	4618      	mov	r0, r3
 80140e4:	3724      	adds	r7, #36	; 0x24
 80140e6:	46bd      	mov	sp, r7
 80140e8:	bd90      	pop	{r4, r7, pc}
 80140ea:	bf00      	nop
 80140ec:	080280e0 	.word	0x080280e0
 80140f0:	0802829c 	.word	0x0802829c
 80140f4:	08028124 	.word	0x08028124

080140f8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80140f8:	b590      	push	{r4, r7, lr}
 80140fa:	b085      	sub	sp, #20
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8014100:	2300      	movs	r3, #0
 8014102:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	685b      	ldr	r3, [r3, #4]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d006      	beq.n	801411c <pcb_new+0x24>
 801410e:	4b2b      	ldr	r3, [pc, #172]	; (80141bc <pcb_new+0xc4>)
 8014110:	f240 2265 	movw	r2, #613	; 0x265
 8014114:	492a      	ldr	r1, [pc, #168]	; (80141c0 <pcb_new+0xc8>)
 8014116:	482b      	ldr	r0, [pc, #172]	; (80141c4 <pcb_new+0xcc>)
 8014118:	f012 fc3e 	bl	8026998 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	781b      	ldrb	r3, [r3, #0]
 8014122:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014126:	2b10      	cmp	r3, #16
 8014128:	d022      	beq.n	8014170 <pcb_new+0x78>
 801412a:	2b20      	cmp	r3, #32
 801412c:	d133      	bne.n	8014196 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	681c      	ldr	r4, [r3, #0]
 8014132:	7bfb      	ldrb	r3, [r7, #15]
 8014134:	4618      	mov	r0, r3
 8014136:	f00b fe40 	bl	801fdba <udp_new_ip_type>
 801413a:	4603      	mov	r3, r0
 801413c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	685b      	ldr	r3, [r3, #4]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d02a      	beq.n	801419e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	781b      	ldrb	r3, [r3, #0]
 801414e:	2b22      	cmp	r3, #34	; 0x22
 8014150:	d104      	bne.n	801415c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	685b      	ldr	r3, [r3, #4]
 8014158:	2201      	movs	r2, #1
 801415a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	6858      	ldr	r0, [r3, #4]
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	461a      	mov	r2, r3
 8014168:	4917      	ldr	r1, [pc, #92]	; (80141c8 <pcb_new+0xd0>)
 801416a:	f00b fdad 	bl	801fcc8 <udp_recv>
      }
      break;
 801416e:	e016      	b.n	801419e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	681c      	ldr	r4, [r3, #0]
 8014174:	7bfb      	ldrb	r3, [r7, #15]
 8014176:	4618      	mov	r0, r3
 8014178:	f006 faaa 	bl	801a6d0 <tcp_new_ip_type>
 801417c:	4603      	mov	r3, r0
 801417e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	685b      	ldr	r3, [r3, #4]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d00b      	beq.n	80141a2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	4618      	mov	r0, r3
 8014190:	f7ff fece 	bl	8013f30 <setup_tcp>
      }
      break;
 8014194:	e005      	b.n	80141a2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	22fa      	movs	r2, #250	; 0xfa
 801419a:	711a      	strb	r2, [r3, #4]
      return;
 801419c:	e00a      	b.n	80141b4 <pcb_new+0xbc>
      break;
 801419e:	bf00      	nop
 80141a0:	e000      	b.n	80141a4 <pcb_new+0xac>
      break;
 80141a2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	685b      	ldr	r3, [r3, #4]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d102      	bne.n	80141b4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	22ff      	movs	r2, #255	; 0xff
 80141b2:	711a      	strb	r2, [r3, #4]
  }
}
 80141b4:	3714      	adds	r7, #20
 80141b6:	46bd      	mov	sp, r7
 80141b8:	bd90      	pop	{r4, r7, pc}
 80141ba:	bf00      	nop
 80141bc:	080280e0 	.word	0x080280e0
 80141c0:	080282c4 	.word	0x080282c4
 80141c4:	08028124 	.word	0x08028124
 80141c8:	08013a05 	.word	0x08013a05

080141cc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b084      	sub	sp, #16
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	2200      	movs	r2, #0
 80141dc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	685b      	ldr	r3, [r3, #4]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d102      	bne.n	80141ee <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80141e8:	68f8      	ldr	r0, [r7, #12]
 80141ea:	f7ff ff85 	bl	80140f8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80141ee:	bf00      	nop
 80141f0:	3710      	adds	r7, #16
 80141f2:	46bd      	mov	sp, r7
 80141f4:	bd80      	pop	{r7, pc}
	...

080141f8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b086      	sub	sp, #24
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	4603      	mov	r3, r0
 8014200:	6039      	str	r1, [r7, #0]
 8014202:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8014204:	2300      	movs	r3, #0
 8014206:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8014208:	2007      	movs	r0, #7
 801420a:	f003 fbd7 	bl	80179bc <memp_malloc>
 801420e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d101      	bne.n	801421a <netconn_alloc+0x22>
    return NULL;
 8014216:	2300      	movs	r3, #0
 8014218:	e052      	b.n	80142c0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	2200      	movs	r2, #0
 801421e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	79fa      	ldrb	r2, [r7, #7]
 8014224:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	2200      	movs	r2, #0
 801422a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 801422c:	79fb      	ldrb	r3, [r7, #7]
 801422e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014232:	2b10      	cmp	r3, #16
 8014234:	d004      	beq.n	8014240 <netconn_alloc+0x48>
 8014236:	2b20      	cmp	r3, #32
 8014238:	d105      	bne.n	8014246 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 801423a:	2306      	movs	r3, #6
 801423c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 801423e:	e00a      	b.n	8014256 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8014240:	2306      	movs	r3, #6
 8014242:	617b      	str	r3, [r7, #20]
      break;
 8014244:	e007      	b.n	8014256 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8014246:	4b20      	ldr	r3, [pc, #128]	; (80142c8 <netconn_alloc+0xd0>)
 8014248:	f240 22e5 	movw	r2, #741	; 0x2e5
 801424c:	491f      	ldr	r1, [pc, #124]	; (80142cc <netconn_alloc+0xd4>)
 801424e:	4820      	ldr	r0, [pc, #128]	; (80142d0 <netconn_alloc+0xd8>)
 8014250:	f012 fba2 	bl	8026998 <iprintf>
      goto free_and_return;
 8014254:	e02f      	b.n	80142b6 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	3310      	adds	r3, #16
 801425a:	6979      	ldr	r1, [r7, #20]
 801425c:	4618      	mov	r0, r3
 801425e:	f00f ffbf 	bl	80241e0 <sys_mbox_new>
 8014262:	4603      	mov	r3, r0
 8014264:	2b00      	cmp	r3, #0
 8014266:	d125      	bne.n	80142b4 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	330c      	adds	r3, #12
 801426c:	2100      	movs	r1, #0
 801426e:	4618      	mov	r0, r3
 8014270:	f010 f87d 	bl	802436e <sys_sem_new>
 8014274:	4603      	mov	r3, r0
 8014276:	2b00      	cmp	r3, #0
 8014278:	d005      	beq.n	8014286 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	3310      	adds	r3, #16
 801427e:	4618      	mov	r0, r3
 8014280:	f00f ffd0 	bl	8024224 <sys_mbox_free>
    goto free_and_return;
 8014284:	e017      	b.n	80142b6 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	3314      	adds	r3, #20
 801428a:	4618      	mov	r0, r3
 801428c:	f010 f862 	bl	8024354 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	2200      	movs	r2, #0
 8014294:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801429c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	683a      	ldr	r2, [r7, #0]
 80142a2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	2200      	movs	r2, #0
 80142a8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	7cfa      	ldrb	r2, [r7, #19]
 80142ae:	771a      	strb	r2, [r3, #28]
  return conn;
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	e005      	b.n	80142c0 <netconn_alloc+0xc8>
    goto free_and_return;
 80142b4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80142b6:	68f9      	ldr	r1, [r7, #12]
 80142b8:	2007      	movs	r0, #7
 80142ba:	f003 fbd1 	bl	8017a60 <memp_free>
  return NULL;
 80142be:	2300      	movs	r3, #0
}
 80142c0:	4618      	mov	r0, r3
 80142c2:	3718      	adds	r7, #24
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd80      	pop	{r7, pc}
 80142c8:	080280e0 	.word	0x080280e0
 80142cc:	080282e4 	.word	0x080282e4
 80142d0:	08028124 	.word	0x08028124

080142d4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b082      	sub	sp, #8
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	685b      	ldr	r3, [r3, #4]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d006      	beq.n	80142f2 <netconn_free+0x1e>
 80142e4:	4b1b      	ldr	r3, [pc, #108]	; (8014354 <netconn_free+0x80>)
 80142e6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80142ea:	491b      	ldr	r1, [pc, #108]	; (8014358 <netconn_free+0x84>)
 80142ec:	481b      	ldr	r0, [pc, #108]	; (801435c <netconn_free+0x88>)
 80142ee:	f012 fb53 	bl	8026998 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	3310      	adds	r3, #16
 80142f6:	4618      	mov	r0, r3
 80142f8:	f010 f81b 	bl	8024332 <sys_mbox_valid>
 80142fc:	4603      	mov	r3, r0
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d006      	beq.n	8014310 <netconn_free+0x3c>
 8014302:	4b14      	ldr	r3, [pc, #80]	; (8014354 <netconn_free+0x80>)
 8014304:	f44f 7249 	mov.w	r2, #804	; 0x324
 8014308:	4915      	ldr	r1, [pc, #84]	; (8014360 <netconn_free+0x8c>)
 801430a:	4814      	ldr	r0, [pc, #80]	; (801435c <netconn_free+0x88>)
 801430c:	f012 fb44 	bl	8026998 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	3314      	adds	r3, #20
 8014314:	4618      	mov	r0, r3
 8014316:	f010 f80c 	bl	8024332 <sys_mbox_valid>
 801431a:	4603      	mov	r3, r0
 801431c:	2b00      	cmp	r3, #0
 801431e:	d006      	beq.n	801432e <netconn_free+0x5a>
 8014320:	4b0c      	ldr	r3, [pc, #48]	; (8014354 <netconn_free+0x80>)
 8014322:	f240 3227 	movw	r2, #807	; 0x327
 8014326:	490f      	ldr	r1, [pc, #60]	; (8014364 <netconn_free+0x90>)
 8014328:	480c      	ldr	r0, [pc, #48]	; (801435c <netconn_free+0x88>)
 801432a:	f012 fb35 	bl	8026998 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	330c      	adds	r3, #12
 8014332:	4618      	mov	r0, r3
 8014334:	f010 f881 	bl	802443a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	330c      	adds	r3, #12
 801433c:	4618      	mov	r0, r3
 801433e:	f010 f89a 	bl	8024476 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8014342:	6879      	ldr	r1, [r7, #4]
 8014344:	2007      	movs	r0, #7
 8014346:	f003 fb8b 	bl	8017a60 <memp_free>
}
 801434a:	bf00      	nop
 801434c:	3708      	adds	r7, #8
 801434e:	46bd      	mov	sp, r7
 8014350:	bd80      	pop	{r7, pc}
 8014352:	bf00      	nop
 8014354:	080280e0 	.word	0x080280e0
 8014358:	0802830c 	.word	0x0802830c
 801435c:	08028124 	.word	0x08028124
 8014360:	0802833c 	.word	0x0802833c
 8014364:	08028378 	.word	0x08028378

08014368 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8014368:	b580      	push	{r7, lr}
 801436a:	b086      	sub	sp, #24
 801436c:	af00      	add	r7, sp, #0
 801436e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	3310      	adds	r3, #16
 8014374:	4618      	mov	r0, r3
 8014376:	f00f ffdc 	bl	8024332 <sys_mbox_valid>
 801437a:	4603      	mov	r3, r0
 801437c:	2b00      	cmp	r3, #0
 801437e:	d02f      	beq.n	80143e0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8014380:	e018      	b.n	80143b4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	781b      	ldrb	r3, [r3, #0]
 8014386:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801438a:	2b10      	cmp	r3, #16
 801438c:	d10e      	bne.n	80143ac <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 801438e:	693b      	ldr	r3, [r7, #16]
 8014390:	f107 020f 	add.w	r2, r7, #15
 8014394:	4611      	mov	r1, r2
 8014396:	4618      	mov	r0, r3
 8014398:	f7ff fafa 	bl	8013990 <lwip_netconn_is_err_msg>
 801439c:	4603      	mov	r3, r0
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d108      	bne.n	80143b4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80143a2:	693b      	ldr	r3, [r7, #16]
 80143a4:	4618      	mov	r0, r3
 80143a6:	f004 fa09 	bl	80187bc <pbuf_free>
 80143aa:	e003      	b.n	80143b4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 80143ac:	693b      	ldr	r3, [r7, #16]
 80143ae:	4618      	mov	r0, r3
 80143b0:	f001 f8f0 	bl	8015594 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	3310      	adds	r3, #16
 80143b8:	f107 0210 	add.w	r2, r7, #16
 80143bc:	4611      	mov	r1, r2
 80143be:	4618      	mov	r0, r3
 80143c0:	f00f ff9b 	bl	80242fa <sys_arch_mbox_tryfetch>
 80143c4:	4603      	mov	r3, r0
 80143c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80143ca:	d1da      	bne.n	8014382 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	3310      	adds	r3, #16
 80143d0:	4618      	mov	r0, r3
 80143d2:	f00f ff27 	bl	8024224 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	3310      	adds	r3, #16
 80143da:	4618      	mov	r0, r3
 80143dc:	f00f ffba 	bl	8024354 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	3314      	adds	r3, #20
 80143e4:	4618      	mov	r0, r3
 80143e6:	f00f ffa4 	bl	8024332 <sys_mbox_valid>
 80143ea:	4603      	mov	r3, r0
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d034      	beq.n	801445a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80143f0:	e01d      	b.n	801442e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80143f2:	693b      	ldr	r3, [r7, #16]
 80143f4:	f107 020e 	add.w	r2, r7, #14
 80143f8:	4611      	mov	r1, r2
 80143fa:	4618      	mov	r0, r3
 80143fc:	f7ff fac8 	bl	8013990 <lwip_netconn_is_err_msg>
 8014400:	4603      	mov	r3, r0
 8014402:	2b00      	cmp	r3, #0
 8014404:	d113      	bne.n	801442e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8014406:	693b      	ldr	r3, [r7, #16]
 8014408:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 801440a:	6978      	ldr	r0, [r7, #20]
 801440c:	f7ff ffac 	bl	8014368 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8014410:	697b      	ldr	r3, [r7, #20]
 8014412:	685b      	ldr	r3, [r3, #4]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d007      	beq.n	8014428 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8014418:	697b      	ldr	r3, [r7, #20]
 801441a:	685b      	ldr	r3, [r3, #4]
 801441c:	4618      	mov	r0, r3
 801441e:	f004 ffc3 	bl	80193a8 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8014422:	697b      	ldr	r3, [r7, #20]
 8014424:	2200      	movs	r2, #0
 8014426:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8014428:	6978      	ldr	r0, [r7, #20]
 801442a:	f7ff ff53 	bl	80142d4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	3314      	adds	r3, #20
 8014432:	f107 0210 	add.w	r2, r7, #16
 8014436:	4611      	mov	r1, r2
 8014438:	4618      	mov	r0, r3
 801443a:	f00f ff5e 	bl	80242fa <sys_arch_mbox_tryfetch>
 801443e:	4603      	mov	r3, r0
 8014440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014444:	d1d5      	bne.n	80143f2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	3314      	adds	r3, #20
 801444a:	4618      	mov	r0, r3
 801444c:	f00f feea 	bl	8024224 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	3314      	adds	r3, #20
 8014454:	4618      	mov	r0, r3
 8014456:	f00f ff7d 	bl	8024354 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 801445a:	bf00      	nop
 801445c:	3718      	adds	r7, #24
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}
	...

08014464 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b086      	sub	sp, #24
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
 801446c:	460b      	mov	r3, r1
 801446e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8014470:	2300      	movs	r3, #0
 8014472:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d106      	bne.n	8014488 <lwip_netconn_do_close_internal+0x24>
 801447a:	4ba1      	ldr	r3, [pc, #644]	; (8014700 <lwip_netconn_do_close_internal+0x29c>)
 801447c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8014480:	49a0      	ldr	r1, [pc, #640]	; (8014704 <lwip_netconn_do_close_internal+0x2a0>)
 8014482:	48a1      	ldr	r0, [pc, #644]	; (8014708 <lwip_netconn_do_close_internal+0x2a4>)
 8014484:	f012 fa88 	bl	8026998 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	781b      	ldrb	r3, [r3, #0]
 801448c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014490:	2b10      	cmp	r3, #16
 8014492:	d006      	beq.n	80144a2 <lwip_netconn_do_close_internal+0x3e>
 8014494:	4b9a      	ldr	r3, [pc, #616]	; (8014700 <lwip_netconn_do_close_internal+0x29c>)
 8014496:	f240 32a3 	movw	r2, #931	; 0x3a3
 801449a:	499c      	ldr	r1, [pc, #624]	; (801470c <lwip_netconn_do_close_internal+0x2a8>)
 801449c:	489a      	ldr	r0, [pc, #616]	; (8014708 <lwip_netconn_do_close_internal+0x2a4>)
 801449e:	f012 fa7b 	bl	8026998 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	785b      	ldrb	r3, [r3, #1]
 80144a6:	2b04      	cmp	r3, #4
 80144a8:	d006      	beq.n	80144b8 <lwip_netconn_do_close_internal+0x54>
 80144aa:	4b95      	ldr	r3, [pc, #596]	; (8014700 <lwip_netconn_do_close_internal+0x29c>)
 80144ac:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 80144b0:	4997      	ldr	r1, [pc, #604]	; (8014710 <lwip_netconn_do_close_internal+0x2ac>)
 80144b2:	4895      	ldr	r0, [pc, #596]	; (8014708 <lwip_netconn_do_close_internal+0x2a4>)
 80144b4:	f012 fa70 	bl	8026998 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	685b      	ldr	r3, [r3, #4]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d106      	bne.n	80144ce <lwip_netconn_do_close_internal+0x6a>
 80144c0:	4b8f      	ldr	r3, [pc, #572]	; (8014700 <lwip_netconn_do_close_internal+0x29c>)
 80144c2:	f240 32a5 	movw	r2, #933	; 0x3a5
 80144c6:	4993      	ldr	r1, [pc, #588]	; (8014714 <lwip_netconn_do_close_internal+0x2b0>)
 80144c8:	488f      	ldr	r0, [pc, #572]	; (8014708 <lwip_netconn_do_close_internal+0x2a4>)
 80144ca:	f012 fa65 	bl	8026998 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	6a1b      	ldr	r3, [r3, #32]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d106      	bne.n	80144e4 <lwip_netconn_do_close_internal+0x80>
 80144d6:	4b8a      	ldr	r3, [pc, #552]	; (8014700 <lwip_netconn_do_close_internal+0x29c>)
 80144d8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80144dc:	498e      	ldr	r1, [pc, #568]	; (8014718 <lwip_netconn_do_close_internal+0x2b4>)
 80144de:	488a      	ldr	r0, [pc, #552]	; (8014708 <lwip_netconn_do_close_internal+0x2a4>)
 80144e0:	f012 fa5a 	bl	8026998 <iprintf>

  tpcb = conn->pcb.tcp;
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	685b      	ldr	r3, [r3, #4]
 80144e8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	6a1b      	ldr	r3, [r3, #32]
 80144ee:	7a1b      	ldrb	r3, [r3, #8]
 80144f0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80144f2:	7bfb      	ldrb	r3, [r7, #15]
 80144f4:	f003 0301 	and.w	r3, r3, #1
 80144f8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80144fa:	7bfb      	ldrb	r3, [r7, #15]
 80144fc:	f003 0302 	and.w	r3, r3, #2
 8014500:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8014502:	7bfb      	ldrb	r3, [r7, #15]
 8014504:	2b03      	cmp	r3, #3
 8014506:	d102      	bne.n	801450e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8014508:	2301      	movs	r3, #1
 801450a:	75bb      	strb	r3, [r7, #22]
 801450c:	e01f      	b.n	801454e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 801450e:	7bbb      	ldrb	r3, [r7, #14]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d00e      	beq.n	8014532 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8014514:	693b      	ldr	r3, [r7, #16]
 8014516:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8014518:	2b05      	cmp	r3, #5
 801451a:	d007      	beq.n	801452c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 801451c:	693b      	ldr	r3, [r7, #16]
 801451e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8014520:	2b06      	cmp	r3, #6
 8014522:	d003      	beq.n	801452c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8014524:	693b      	ldr	r3, [r7, #16]
 8014526:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8014528:	2b08      	cmp	r3, #8
 801452a:	d102      	bne.n	8014532 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 801452c:	2301      	movs	r3, #1
 801452e:	75bb      	strb	r3, [r7, #22]
 8014530:	e00d      	b.n	801454e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8014532:	7b7b      	ldrb	r3, [r7, #13]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d008      	beq.n	801454a <lwip_netconn_do_close_internal+0xe6>
 8014538:	693b      	ldr	r3, [r7, #16]
 801453a:	8b5b      	ldrh	r3, [r3, #26]
 801453c:	f003 0310 	and.w	r3, r3, #16
 8014540:	2b00      	cmp	r3, #0
 8014542:	d002      	beq.n	801454a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8014544:	2301      	movs	r3, #1
 8014546:	75bb      	strb	r3, [r7, #22]
 8014548:	e001      	b.n	801454e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 801454a:	2300      	movs	r3, #0
 801454c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 801454e:	7dbb      	ldrb	r3, [r7, #22]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d003      	beq.n	801455c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8014554:	2100      	movs	r1, #0
 8014556:	6938      	ldr	r0, [r7, #16]
 8014558:	f006 f8c8 	bl	801a6ec <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 801455c:	693b      	ldr	r3, [r7, #16]
 801455e:	7d1b      	ldrb	r3, [r3, #20]
 8014560:	2b01      	cmp	r3, #1
 8014562:	d104      	bne.n	801456e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8014564:	2100      	movs	r1, #0
 8014566:	6938      	ldr	r0, [r7, #16]
 8014568:	f006 f938 	bl	801a7dc <tcp_accept>
 801456c:	e01d      	b.n	80145aa <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 801456e:	7bbb      	ldrb	r3, [r7, #14]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d007      	beq.n	8014584 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8014574:	2100      	movs	r1, #0
 8014576:	6938      	ldr	r0, [r7, #16]
 8014578:	f006 f8ca 	bl	801a710 <tcp_recv>
      tcp_accept(tpcb, NULL);
 801457c:	2100      	movs	r1, #0
 801457e:	6938      	ldr	r0, [r7, #16]
 8014580:	f006 f92c 	bl	801a7dc <tcp_accept>
    }
    if (shut_tx) {
 8014584:	7b7b      	ldrb	r3, [r7, #13]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d003      	beq.n	8014592 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 801458a:	2100      	movs	r1, #0
 801458c:	6938      	ldr	r0, [r7, #16]
 801458e:	f006 f8e1 	bl	801a754 <tcp_sent>
    }
    if (shut_close) {
 8014592:	7dbb      	ldrb	r3, [r7, #22]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d008      	beq.n	80145aa <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8014598:	2200      	movs	r2, #0
 801459a:	2100      	movs	r1, #0
 801459c:	6938      	ldr	r0, [r7, #16]
 801459e:	f006 f935 	bl	801a80c <tcp_poll>
      tcp_err(tpcb, NULL);
 80145a2:	2100      	movs	r1, #0
 80145a4:	6938      	ldr	r0, [r7, #16]
 80145a6:	f006 f8f7 	bl	801a798 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80145aa:	7dbb      	ldrb	r3, [r7, #22]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d005      	beq.n	80145bc <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80145b0:	6938      	ldr	r0, [r7, #16]
 80145b2:	f004 fdb5 	bl	8019120 <tcp_close>
 80145b6:	4603      	mov	r3, r0
 80145b8:	75fb      	strb	r3, [r7, #23]
 80145ba:	e007      	b.n	80145cc <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80145bc:	7bbb      	ldrb	r3, [r7, #14]
 80145be:	7b7a      	ldrb	r2, [r7, #13]
 80145c0:	4619      	mov	r1, r3
 80145c2:	6938      	ldr	r0, [r7, #16]
 80145c4:	f004 fdd8 	bl	8019178 <tcp_shutdown>
 80145c8:	4603      	mov	r3, r0
 80145ca:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80145cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d102      	bne.n	80145da <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80145d4:	2301      	movs	r3, #1
 80145d6:	757b      	strb	r3, [r7, #21]
 80145d8:	e016      	b.n	8014608 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80145da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80145de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145e2:	d10f      	bne.n	8014604 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	6a1b      	ldr	r3, [r3, #32]
 80145e8:	7a5b      	ldrb	r3, [r3, #9]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d10c      	bne.n	8014608 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80145ee:	2301      	movs	r3, #1
 80145f0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80145f2:	7dbb      	ldrb	r3, [r7, #22]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d007      	beq.n	8014608 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80145f8:	6938      	ldr	r0, [r7, #16]
 80145fa:	f004 fed5 	bl	80193a8 <tcp_abort>
          err = ERR_OK;
 80145fe:	2300      	movs	r3, #0
 8014600:	75fb      	strb	r3, [r7, #23]
 8014602:	e001      	b.n	8014608 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8014604:	2301      	movs	r3, #1
 8014606:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8014608:	7d7b      	ldrb	r3, [r7, #21]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d044      	beq.n	8014698 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	6a1b      	ldr	r3, [r3, #32]
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	330c      	adds	r3, #12
 8014616:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	6a1b      	ldr	r3, [r3, #32]
 801461c:	7dfa      	ldrb	r2, [r7, #23]
 801461e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	2200      	movs	r2, #0
 8014624:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	2200      	movs	r2, #0
 801462a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 801462c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d129      	bne.n	8014688 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8014634:	7dbb      	ldrb	r3, [r7, #22]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d00c      	beq.n	8014654 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	2200      	movs	r2, #0
 801463e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014644:	2b00      	cmp	r3, #0
 8014646:	d005      	beq.n	8014654 <lwip_netconn_do_close_internal+0x1f0>
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801464c:	2200      	movs	r2, #0
 801464e:	2104      	movs	r1, #4
 8014650:	6878      	ldr	r0, [r7, #4]
 8014652:	4798      	blx	r3
      }
      if (shut_rx) {
 8014654:	7bbb      	ldrb	r3, [r7, #14]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d009      	beq.n	801466e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801465e:	2b00      	cmp	r3, #0
 8014660:	d005      	beq.n	801466e <lwip_netconn_do_close_internal+0x20a>
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014666:	2200      	movs	r2, #0
 8014668:	2100      	movs	r1, #0
 801466a:	6878      	ldr	r0, [r7, #4]
 801466c:	4798      	blx	r3
      }
      if (shut_tx) {
 801466e:	7b7b      	ldrb	r3, [r7, #13]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d009      	beq.n	8014688 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014678:	2b00      	cmp	r3, #0
 801467a:	d005      	beq.n	8014688 <lwip_netconn_do_close_internal+0x224>
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014680:	2200      	movs	r2, #0
 8014682:	2102      	movs	r1, #2
 8014684:	6878      	ldr	r0, [r7, #4]
 8014686:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8014688:	78fb      	ldrb	r3, [r7, #3]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d002      	beq.n	8014694 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 801468e:	68b8      	ldr	r0, [r7, #8]
 8014690:	f00f fec6 	bl	8024420 <sys_sem_signal>
    }
    return ERR_OK;
 8014694:	2300      	movs	r3, #0
 8014696:	e02e      	b.n	80146f6 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8014698:	7d7b      	ldrb	r3, [r7, #21]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d11e      	bne.n	80146dc <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 801469e:	693b      	ldr	r3, [r7, #16]
 80146a0:	7d1b      	ldrb	r3, [r3, #20]
 80146a2:	2b01      	cmp	r3, #1
 80146a4:	d106      	bne.n	80146b4 <lwip_netconn_do_close_internal+0x250>
 80146a6:	4b16      	ldr	r3, [pc, #88]	; (8014700 <lwip_netconn_do_close_internal+0x29c>)
 80146a8:	f240 4241 	movw	r2, #1089	; 0x441
 80146ac:	491b      	ldr	r1, [pc, #108]	; (801471c <lwip_netconn_do_close_internal+0x2b8>)
 80146ae:	4816      	ldr	r0, [pc, #88]	; (8014708 <lwip_netconn_do_close_internal+0x2a4>)
 80146b0:	f012 f972 	bl	8026998 <iprintf>
    if (shut_tx) {
 80146b4:	7b7b      	ldrb	r3, [r7, #13]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d003      	beq.n	80146c2 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 80146ba:	4919      	ldr	r1, [pc, #100]	; (8014720 <lwip_netconn_do_close_internal+0x2bc>)
 80146bc:	6938      	ldr	r0, [r7, #16]
 80146be:	f006 f849 	bl	801a754 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80146c2:	2201      	movs	r2, #1
 80146c4:	4917      	ldr	r1, [pc, #92]	; (8014724 <lwip_netconn_do_close_internal+0x2c0>)
 80146c6:	6938      	ldr	r0, [r7, #16]
 80146c8:	f006 f8a0 	bl	801a80c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80146cc:	4916      	ldr	r1, [pc, #88]	; (8014728 <lwip_netconn_do_close_internal+0x2c4>)
 80146ce:	6938      	ldr	r0, [r7, #16]
 80146d0:	f006 f862 	bl	801a798 <tcp_err>
    tcp_arg(tpcb, conn);
 80146d4:	6879      	ldr	r1, [r7, #4]
 80146d6:	6938      	ldr	r0, [r7, #16]
 80146d8:	f006 f808 	bl	801a6ec <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80146dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d106      	bne.n	80146f2 <lwip_netconn_do_close_internal+0x28e>
 80146e4:	4b06      	ldr	r3, [pc, #24]	; (8014700 <lwip_netconn_do_close_internal+0x29c>)
 80146e6:	f240 424d 	movw	r2, #1101	; 0x44d
 80146ea:	4910      	ldr	r1, [pc, #64]	; (801472c <lwip_netconn_do_close_internal+0x2c8>)
 80146ec:	4806      	ldr	r0, [pc, #24]	; (8014708 <lwip_netconn_do_close_internal+0x2a4>)
 80146ee:	f012 f953 	bl	8026998 <iprintf>
  return err;
 80146f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80146f6:	4618      	mov	r0, r3
 80146f8:	3718      	adds	r7, #24
 80146fa:	46bd      	mov	sp, r7
 80146fc:	bd80      	pop	{r7, pc}
 80146fe:	bf00      	nop
 8014700:	080280e0 	.word	0x080280e0
 8014704:	080283b4 	.word	0x080283b4
 8014708:	08028124 	.word	0x08028124
 801470c:	080283c4 	.word	0x080283c4
 8014710:	080283e4 	.word	0x080283e4
 8014714:	08028408 	.word	0x08028408
 8014718:	08028248 	.word	0x08028248
 801471c:	0802841c 	.word	0x0802841c
 8014720:	08013cd9 	.word	0x08013cd9
 8014724:	08013c0d 	.word	0x08013c0d
 8014728:	08013d85 	.word	0x08013d85
 801472c:	08028440 	.word	0x08028440

08014730 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b084      	sub	sp, #16
 8014734:	af00      	add	r7, sp, #0
 8014736:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	785b      	ldrb	r3, [r3, #1]
 8014742:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8014744:	7afb      	ldrb	r3, [r7, #11]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d00d      	beq.n	8014766 <lwip_netconn_do_delconn+0x36>
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	781b      	ldrb	r3, [r3, #0]
 8014750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014754:	2b10      	cmp	r3, #16
 8014756:	d006      	beq.n	8014766 <lwip_netconn_do_delconn+0x36>
 8014758:	4b60      	ldr	r3, [pc, #384]	; (80148dc <lwip_netconn_do_delconn+0x1ac>)
 801475a:	f240 425f 	movw	r2, #1119	; 0x45f
 801475e:	4960      	ldr	r1, [pc, #384]	; (80148e0 <lwip_netconn_do_delconn+0x1b0>)
 8014760:	4860      	ldr	r0, [pc, #384]	; (80148e4 <lwip_netconn_do_delconn+0x1b4>)
 8014762:	f012 f919 	bl	8026998 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8014766:	7afb      	ldrb	r3, [r7, #11]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d005      	beq.n	8014778 <lwip_netconn_do_delconn+0x48>
 801476c:	7afb      	ldrb	r3, [r7, #11]
 801476e:	2b02      	cmp	r3, #2
 8014770:	d002      	beq.n	8014778 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8014772:	7afb      	ldrb	r3, [r7, #11]
 8014774:	2b03      	cmp	r3, #3
 8014776:	d109      	bne.n	801478c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8014778:	7afb      	ldrb	r3, [r7, #11]
 801477a:	2b03      	cmp	r3, #3
 801477c:	d10a      	bne.n	8014794 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	7f1b      	ldrb	r3, [r3, #28]
 8014784:	f003 0304 	and.w	r3, r3, #4
 8014788:	2b00      	cmp	r3, #0
 801478a:	d103      	bne.n	8014794 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	22fb      	movs	r2, #251	; 0xfb
 8014790:	711a      	strb	r2, [r3, #4]
 8014792:	e097      	b.n	80148c4 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8014794:	7afb      	ldrb	r3, [r7, #11]
 8014796:	2b03      	cmp	r3, #3
 8014798:	d10d      	bne.n	80147b6 <lwip_netconn_do_delconn+0x86>
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	7f1b      	ldrb	r3, [r3, #28]
 80147a0:	f003 0304 	and.w	r3, r3, #4
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d106      	bne.n	80147b6 <lwip_netconn_do_delconn+0x86>
 80147a8:	4b4c      	ldr	r3, [pc, #304]	; (80148dc <lwip_netconn_do_delconn+0x1ac>)
 80147aa:	f240 427b 	movw	r2, #1147	; 0x47b
 80147ae:	494e      	ldr	r1, [pc, #312]	; (80148e8 <lwip_netconn_do_delconn+0x1b8>)
 80147b0:	484c      	ldr	r0, [pc, #304]	; (80148e4 <lwip_netconn_do_delconn+0x1b4>)
 80147b2:	f012 f8f1 	bl	8026998 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	2200      	movs	r2, #0
 80147ba:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	4618      	mov	r0, r3
 80147c2:	f7ff fdd1 	bl	8014368 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	685b      	ldr	r3, [r3, #4]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d05f      	beq.n	8014890 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	781b      	ldrb	r3, [r3, #0]
 80147d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80147da:	2b10      	cmp	r3, #16
 80147dc:	d00e      	beq.n	80147fc <lwip_netconn_do_delconn+0xcc>
 80147de:	2b20      	cmp	r3, #32
 80147e0:	d000      	beq.n	80147e4 <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 80147e2:	e051      	b.n	8014888 <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	685b      	ldr	r3, [r3, #4]
 80147ea:	2200      	movs	r2, #0
 80147ec:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	681b      	ldr	r3, [r3, #0]
 80147f2:	685b      	ldr	r3, [r3, #4]
 80147f4:	4618      	mov	r0, r3
 80147f6:	f00b fa87 	bl	801fd08 <udp_remove>
          break;
 80147fa:	e045      	b.n	8014888 <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	6a1b      	ldr	r3, [r3, #32]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d006      	beq.n	8014814 <lwip_netconn_do_delconn+0xe4>
 8014806:	4b35      	ldr	r3, [pc, #212]	; (80148dc <lwip_netconn_do_delconn+0x1ac>)
 8014808:	f240 4294 	movw	r2, #1172	; 0x494
 801480c:	4937      	ldr	r1, [pc, #220]	; (80148ec <lwip_netconn_do_delconn+0x1bc>)
 801480e:	4835      	ldr	r0, [pc, #212]	; (80148e4 <lwip_netconn_do_delconn+0x1b4>)
 8014810:	f012 f8c2 	bl	8026998 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	2204      	movs	r2, #4
 801481a:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	2203      	movs	r2, #3
 8014820:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	68fa      	ldr	r2, [r7, #12]
 8014828:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	2100      	movs	r1, #0
 8014830:	4618      	mov	r0, r3
 8014832:	f7ff fe17 	bl	8014464 <lwip_netconn_do_close_internal>
 8014836:	4603      	mov	r3, r0
 8014838:	2b00      	cmp	r3, #0
 801483a:	d04a      	beq.n	80148d2 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	785b      	ldrb	r3, [r3, #1]
 8014842:	2b04      	cmp	r3, #4
 8014844:	d006      	beq.n	8014854 <lwip_netconn_do_delconn+0x124>
 8014846:	4b25      	ldr	r3, [pc, #148]	; (80148dc <lwip_netconn_do_delconn+0x1ac>)
 8014848:	f240 429a 	movw	r2, #1178	; 0x49a
 801484c:	4928      	ldr	r1, [pc, #160]	; (80148f0 <lwip_netconn_do_delconn+0x1c0>)
 801484e:	4825      	ldr	r0, [pc, #148]	; (80148e4 <lwip_netconn_do_delconn+0x1b4>)
 8014850:	f012 f8a2 	bl	8026998 <iprintf>
            UNLOCK_TCPIP_CORE();
 8014854:	4827      	ldr	r0, [pc, #156]	; (80148f4 <lwip_netconn_do_delconn+0x1c4>)
 8014856:	f00f fe54 	bl	8024502 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	330c      	adds	r3, #12
 8014860:	2100      	movs	r1, #0
 8014862:	4618      	mov	r0, r3
 8014864:	f00f fdab 	bl	80243be <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8014868:	4822      	ldr	r0, [pc, #136]	; (80148f4 <lwip_netconn_do_delconn+0x1c4>)
 801486a:	f00f fe3b 	bl	80244e4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	785b      	ldrb	r3, [r3, #1]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d02c      	beq.n	80148d2 <lwip_netconn_do_delconn+0x1a2>
 8014878:	4b18      	ldr	r3, [pc, #96]	; (80148dc <lwip_netconn_do_delconn+0x1ac>)
 801487a:	f240 429e 	movw	r2, #1182	; 0x49e
 801487e:	491c      	ldr	r1, [pc, #112]	; (80148f0 <lwip_netconn_do_delconn+0x1c0>)
 8014880:	4818      	ldr	r0, [pc, #96]	; (80148e4 <lwip_netconn_do_delconn+0x1b4>)
 8014882:	f012 f889 	bl	8026998 <iprintf>
          return;
 8014886:	e024      	b.n	80148d2 <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	2200      	movs	r2, #0
 801488e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014896:	2b00      	cmp	r3, #0
 8014898:	d007      	beq.n	80148aa <lwip_netconn_do_delconn+0x17a>
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148a0:	68fa      	ldr	r2, [r7, #12]
 80148a2:	6810      	ldr	r0, [r2, #0]
 80148a4:	2200      	movs	r2, #0
 80148a6:	2100      	movs	r1, #0
 80148a8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d007      	beq.n	80148c4 <lwip_netconn_do_delconn+0x194>
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148ba:	68fa      	ldr	r2, [r7, #12]
 80148bc:	6810      	ldr	r0, [r2, #0]
 80148be:	2200      	movs	r2, #0
 80148c0:	2102      	movs	r1, #2
 80148c2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	330c      	adds	r3, #12
 80148ca:	4618      	mov	r0, r3
 80148cc:	f00f fdc2 	bl	8024454 <sys_sem_valid>
 80148d0:	e000      	b.n	80148d4 <lwip_netconn_do_delconn+0x1a4>
          return;
 80148d2:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80148d4:	3710      	adds	r7, #16
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}
 80148da:	bf00      	nop
 80148dc:	080280e0 	.word	0x080280e0
 80148e0:	08028450 	.word	0x08028450
 80148e4:	08028124 	.word	0x08028124
 80148e8:	08028464 	.word	0x08028464
 80148ec:	08028484 	.word	0x08028484
 80148f0:	080284a0 	.word	0x080284a0
 80148f4:	20016b3c 	.word	0x20016b3c

080148f8 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b084      	sub	sp, #16
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8014904:	68bb      	ldr	r3, [r7, #8]
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	685b      	ldr	r3, [r3, #4]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d026      	beq.n	801495c <lwip_netconn_do_bind+0x64>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801490e:	68bb      	ldr	r3, [r7, #8]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	781b      	ldrb	r3, [r3, #0]
 8014914:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014918:	2b10      	cmp	r3, #16
 801491a:	d00e      	beq.n	801493a <lwip_netconn_do_bind+0x42>
 801491c:	2b20      	cmp	r3, #32
 801491e:	d119      	bne.n	8014954 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8014920:	68bb      	ldr	r3, [r7, #8]
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	6858      	ldr	r0, [r3, #4]
 8014926:	68bb      	ldr	r3, [r7, #8]
 8014928:	6899      	ldr	r1, [r3, #8]
 801492a:	68bb      	ldr	r3, [r7, #8]
 801492c:	899b      	ldrh	r3, [r3, #12]
 801492e:	461a      	mov	r2, r3
 8014930:	f00b f8ac 	bl	801fa8c <udp_bind>
 8014934:	4603      	mov	r3, r0
 8014936:	73fb      	strb	r3, [r7, #15]
        break;
 8014938:	e012      	b.n	8014960 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 801493a:	68bb      	ldr	r3, [r7, #8]
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	6858      	ldr	r0, [r3, #4]
 8014940:	68bb      	ldr	r3, [r7, #8]
 8014942:	6899      	ldr	r1, [r3, #8]
 8014944:	68bb      	ldr	r3, [r7, #8]
 8014946:	899b      	ldrh	r3, [r3, #12]
 8014948:	461a      	mov	r2, r3
 801494a:	f004 fd39 	bl	80193c0 <tcp_bind>
 801494e:	4603      	mov	r3, r0
 8014950:	73fb      	strb	r3, [r7, #15]
        break;
 8014952:	e005      	b.n	8014960 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8014954:	23fa      	movs	r3, #250	; 0xfa
 8014956:	73fb      	strb	r3, [r7, #15]
        break;
 8014958:	bf00      	nop
 801495a:	e001      	b.n	8014960 <lwip_netconn_do_bind+0x68>
    }
  } else {
    err = ERR_VAL;
 801495c:	23fa      	movs	r3, #250	; 0xfa
 801495e:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8014960:	68bb      	ldr	r3, [r7, #8]
 8014962:	7bfa      	ldrb	r2, [r7, #15]
 8014964:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8014966:	bf00      	nop
 8014968:	3710      	adds	r7, #16
 801496a:	46bd      	mov	sp, r7
 801496c:	bd80      	pop	{r7, pc}
	...

08014970 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b088      	sub	sp, #32
 8014974:	af00      	add	r7, sp, #0
 8014976:	60f8      	str	r0, [r7, #12]
 8014978:	60b9      	str	r1, [r7, #8]
 801497a:	4613      	mov	r3, r2
 801497c:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 801497e:	2300      	movs	r3, #0
 8014980:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8014986:	69bb      	ldr	r3, [r7, #24]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d102      	bne.n	8014992 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 801498c:	f06f 0305 	mvn.w	r3, #5
 8014990:	e070      	b.n	8014a74 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8014992:	69bb      	ldr	r3, [r7, #24]
 8014994:	785b      	ldrb	r3, [r3, #1]
 8014996:	2b03      	cmp	r3, #3
 8014998:	d006      	beq.n	80149a8 <lwip_netconn_do_connected+0x38>
 801499a:	4b38      	ldr	r3, [pc, #224]	; (8014a7c <lwip_netconn_do_connected+0x10c>)
 801499c:	f240 5223 	movw	r2, #1315	; 0x523
 80149a0:	4937      	ldr	r1, [pc, #220]	; (8014a80 <lwip_netconn_do_connected+0x110>)
 80149a2:	4838      	ldr	r0, [pc, #224]	; (8014a84 <lwip_netconn_do_connected+0x114>)
 80149a4:	f011 fff8 	bl	8026998 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 80149a8:	69bb      	ldr	r3, [r7, #24]
 80149aa:	6a1b      	ldr	r3, [r3, #32]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d10c      	bne.n	80149ca <lwip_netconn_do_connected+0x5a>
 80149b0:	69bb      	ldr	r3, [r7, #24]
 80149b2:	7f1b      	ldrb	r3, [r3, #28]
 80149b4:	f003 0304 	and.w	r3, r3, #4
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d106      	bne.n	80149ca <lwip_netconn_do_connected+0x5a>
 80149bc:	4b2f      	ldr	r3, [pc, #188]	; (8014a7c <lwip_netconn_do_connected+0x10c>)
 80149be:	f240 5225 	movw	r2, #1317	; 0x525
 80149c2:	4931      	ldr	r1, [pc, #196]	; (8014a88 <lwip_netconn_do_connected+0x118>)
 80149c4:	482f      	ldr	r0, [pc, #188]	; (8014a84 <lwip_netconn_do_connected+0x114>)
 80149c6:	f011 ffe7 	bl	8026998 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 80149ca:	69bb      	ldr	r3, [r7, #24]
 80149cc:	6a1b      	ldr	r3, [r3, #32]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d008      	beq.n	80149e4 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 80149d2:	69bb      	ldr	r3, [r7, #24]
 80149d4:	6a1b      	ldr	r3, [r3, #32]
 80149d6:	79fa      	ldrb	r2, [r7, #7]
 80149d8:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80149da:	69bb      	ldr	r3, [r7, #24]
 80149dc:	6a1b      	ldr	r3, [r3, #32]
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	330c      	adds	r3, #12
 80149e2:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 80149e4:	69bb      	ldr	r3, [r7, #24]
 80149e6:	781b      	ldrb	r3, [r3, #0]
 80149e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80149ec:	2b10      	cmp	r3, #16
 80149ee:	d106      	bne.n	80149fe <lwip_netconn_do_connected+0x8e>
 80149f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d102      	bne.n	80149fe <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 80149f8:	69b8      	ldr	r0, [r7, #24]
 80149fa:	f7ff fa99 	bl	8013f30 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 80149fe:	69bb      	ldr	r3, [r7, #24]
 8014a00:	7f1b      	ldrb	r3, [r3, #28]
 8014a02:	f003 0304 	and.w	r3, r3, #4
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	bf0c      	ite	eq
 8014a0a:	2301      	moveq	r3, #1
 8014a0c:	2300      	movne	r3, #0
 8014a0e:	b2db      	uxtb	r3, r3
 8014a10:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8014a12:	69bb      	ldr	r3, [r7, #24]
 8014a14:	7f1b      	ldrb	r3, [r3, #28]
 8014a16:	f023 0304 	bic.w	r3, r3, #4
 8014a1a:	b2da      	uxtb	r2, r3
 8014a1c:	69bb      	ldr	r3, [r7, #24]
 8014a1e:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8014a20:	697b      	ldr	r3, [r7, #20]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d002      	beq.n	8014a2c <lwip_netconn_do_connected+0xbc>
 8014a26:	69fb      	ldr	r3, [r7, #28]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d10c      	bne.n	8014a46 <lwip_netconn_do_connected+0xd6>
 8014a2c:	697b      	ldr	r3, [r7, #20]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d102      	bne.n	8014a38 <lwip_netconn_do_connected+0xc8>
 8014a32:	69fb      	ldr	r3, [r7, #28]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d006      	beq.n	8014a46 <lwip_netconn_do_connected+0xd6>
 8014a38:	4b10      	ldr	r3, [pc, #64]	; (8014a7c <lwip_netconn_do_connected+0x10c>)
 8014a3a:	f240 5232 	movw	r2, #1330	; 0x532
 8014a3e:	4913      	ldr	r1, [pc, #76]	; (8014a8c <lwip_netconn_do_connected+0x11c>)
 8014a40:	4810      	ldr	r0, [pc, #64]	; (8014a84 <lwip_netconn_do_connected+0x114>)
 8014a42:	f011 ffa9 	bl	8026998 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8014a46:	69bb      	ldr	r3, [r7, #24]
 8014a48:	2200      	movs	r2, #0
 8014a4a:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8014a4c:	69bb      	ldr	r3, [r7, #24]
 8014a4e:	2200      	movs	r2, #0
 8014a50:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8014a52:	69bb      	ldr	r3, [r7, #24]
 8014a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d005      	beq.n	8014a66 <lwip_netconn_do_connected+0xf6>
 8014a5a:	69bb      	ldr	r3, [r7, #24]
 8014a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a5e:	2200      	movs	r2, #0
 8014a60:	2102      	movs	r1, #2
 8014a62:	69b8      	ldr	r0, [r7, #24]
 8014a64:	4798      	blx	r3

  if (was_blocking) {
 8014a66:	697b      	ldr	r3, [r7, #20]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d002      	beq.n	8014a72 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8014a6c:	69f8      	ldr	r0, [r7, #28]
 8014a6e:	f00f fcd7 	bl	8024420 <sys_sem_signal>
  }
  return ERR_OK;
 8014a72:	2300      	movs	r3, #0
}
 8014a74:	4618      	mov	r0, r3
 8014a76:	3720      	adds	r7, #32
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	bd80      	pop	{r7, pc}
 8014a7c:	080280e0 	.word	0x080280e0
 8014a80:	080284a8 	.word	0x080284a8
 8014a84:	08028124 	.word	0x08028124
 8014a88:	080284c8 	.word	0x080284c8
 8014a8c:	08028508 	.word	0x08028508

08014a90 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8014a90:	b580      	push	{r7, lr}
 8014a92:	b086      	sub	sp, #24
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8014a9c:	693b      	ldr	r3, [r7, #16]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	685b      	ldr	r3, [r3, #4]
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d102      	bne.n	8014aac <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8014aa6:	23f1      	movs	r3, #241	; 0xf1
 8014aa8:	75fb      	strb	r3, [r7, #23]
 8014aaa:	e09b      	b.n	8014be4 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8014aac:	693b      	ldr	r3, [r7, #16]
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	781b      	ldrb	r3, [r3, #0]
 8014ab2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014ab6:	2b10      	cmp	r3, #16
 8014ab8:	d00f      	beq.n	8014ada <lwip_netconn_do_connect+0x4a>
 8014aba:	2b20      	cmp	r3, #32
 8014abc:	f040 8087 	bne.w	8014bce <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8014ac0:	693b      	ldr	r3, [r7, #16]
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	6858      	ldr	r0, [r3, #4]
 8014ac6:	693b      	ldr	r3, [r7, #16]
 8014ac8:	6899      	ldr	r1, [r3, #8]
 8014aca:	693b      	ldr	r3, [r7, #16]
 8014acc:	899b      	ldrh	r3, [r3, #12]
 8014ace:	461a      	mov	r2, r3
 8014ad0:	f00b f864 	bl	801fb9c <udp_connect>
 8014ad4:	4603      	mov	r3, r0
 8014ad6:	75fb      	strb	r3, [r7, #23]
        break;
 8014ad8:	e084      	b.n	8014be4 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8014ada:	693b      	ldr	r3, [r7, #16]
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	785b      	ldrb	r3, [r3, #1]
 8014ae0:	2b03      	cmp	r3, #3
 8014ae2:	d102      	bne.n	8014aea <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8014ae4:	23f7      	movs	r3, #247	; 0xf7
 8014ae6:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8014ae8:	e07b      	b.n	8014be2 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8014aea:	693b      	ldr	r3, [r7, #16]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	785b      	ldrb	r3, [r3, #1]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d002      	beq.n	8014afa <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8014af4:	23f6      	movs	r3, #246	; 0xf6
 8014af6:	75fb      	strb	r3, [r7, #23]
        break;
 8014af8:	e073      	b.n	8014be2 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8014afa:	693b      	ldr	r3, [r7, #16]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	4618      	mov	r0, r3
 8014b00:	f7ff fa16 	bl	8013f30 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8014b04:	693b      	ldr	r3, [r7, #16]
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	6858      	ldr	r0, [r3, #4]
 8014b0a:	693b      	ldr	r3, [r7, #16]
 8014b0c:	6899      	ldr	r1, [r3, #8]
 8014b0e:	693b      	ldr	r3, [r7, #16]
 8014b10:	899a      	ldrh	r2, [r3, #12]
 8014b12:	4b38      	ldr	r3, [pc, #224]	; (8014bf4 <lwip_netconn_do_connect+0x164>)
 8014b14:	f004 fea6 	bl	8019864 <tcp_connect>
 8014b18:	4603      	mov	r3, r0
 8014b1a:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8014b1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d15e      	bne.n	8014be2 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8014b24:	693b      	ldr	r3, [r7, #16]
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	7f1b      	ldrb	r3, [r3, #28]
 8014b2a:	f003 0302 	and.w	r3, r3, #2
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	bf14      	ite	ne
 8014b32:	2301      	movne	r3, #1
 8014b34:	2300      	moveq	r3, #0
 8014b36:	b2db      	uxtb	r3, r3
 8014b38:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8014b3a:	693b      	ldr	r3, [r7, #16]
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	2203      	movs	r2, #3
 8014b40:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8014b42:	7bfb      	ldrb	r3, [r7, #15]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d009      	beq.n	8014b5c <lwip_netconn_do_connect+0xcc>
 8014b48:	693b      	ldr	r3, [r7, #16]
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	7f1a      	ldrb	r2, [r3, #28]
 8014b4e:	693b      	ldr	r3, [r7, #16]
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	f042 0204 	orr.w	r2, r2, #4
 8014b56:	b2d2      	uxtb	r2, r2
 8014b58:	771a      	strb	r2, [r3, #28]
 8014b5a:	e008      	b.n	8014b6e <lwip_netconn_do_connect+0xde>
 8014b5c:	693b      	ldr	r3, [r7, #16]
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	7f1a      	ldrb	r2, [r3, #28]
 8014b62:	693b      	ldr	r3, [r7, #16]
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	f022 0204 	bic.w	r2, r2, #4
 8014b6a:	b2d2      	uxtb	r2, r2
 8014b6c:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 8014b6e:	7bfb      	ldrb	r3, [r7, #15]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d002      	beq.n	8014b7a <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 8014b74:	23fb      	movs	r3, #251	; 0xfb
 8014b76:	75fb      	strb	r3, [r7, #23]
        break;
 8014b78:	e033      	b.n	8014be2 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 8014b7a:	693b      	ldr	r3, [r7, #16]
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	693a      	ldr	r2, [r7, #16]
 8014b80:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8014b82:	693b      	ldr	r3, [r7, #16]
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	785b      	ldrb	r3, [r3, #1]
 8014b88:	2b03      	cmp	r3, #3
 8014b8a:	d006      	beq.n	8014b9a <lwip_netconn_do_connect+0x10a>
 8014b8c:	4b1a      	ldr	r3, [pc, #104]	; (8014bf8 <lwip_netconn_do_connect+0x168>)
 8014b8e:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8014b92:	491a      	ldr	r1, [pc, #104]	; (8014bfc <lwip_netconn_do_connect+0x16c>)
 8014b94:	481a      	ldr	r0, [pc, #104]	; (8014c00 <lwip_netconn_do_connect+0x170>)
 8014b96:	f011 feff 	bl	8026998 <iprintf>
              UNLOCK_TCPIP_CORE();
 8014b9a:	481a      	ldr	r0, [pc, #104]	; (8014c04 <lwip_netconn_do_connect+0x174>)
 8014b9c:	f00f fcb1 	bl	8024502 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8014ba0:	693b      	ldr	r3, [r7, #16]
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	330c      	adds	r3, #12
 8014ba6:	2100      	movs	r1, #0
 8014ba8:	4618      	mov	r0, r3
 8014baa:	f00f fc08 	bl	80243be <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8014bae:	4815      	ldr	r0, [pc, #84]	; (8014c04 <lwip_netconn_do_connect+0x174>)
 8014bb0:	f00f fc98 	bl	80244e4 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8014bb4:	693b      	ldr	r3, [r7, #16]
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	785b      	ldrb	r3, [r3, #1]
 8014bba:	2b03      	cmp	r3, #3
 8014bbc:	d116      	bne.n	8014bec <lwip_netconn_do_connect+0x15c>
 8014bbe:	4b0e      	ldr	r3, [pc, #56]	; (8014bf8 <lwip_netconn_do_connect+0x168>)
 8014bc0:	f240 5274 	movw	r2, #1396	; 0x574
 8014bc4:	490d      	ldr	r1, [pc, #52]	; (8014bfc <lwip_netconn_do_connect+0x16c>)
 8014bc6:	480e      	ldr	r0, [pc, #56]	; (8014c00 <lwip_netconn_do_connect+0x170>)
 8014bc8:	f011 fee6 	bl	8026998 <iprintf>
              return;
 8014bcc:	e00e      	b.n	8014bec <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8014bce:	4b0a      	ldr	r3, [pc, #40]	; (8014bf8 <lwip_netconn_do_connect+0x168>)
 8014bd0:	f240 527f 	movw	r2, #1407	; 0x57f
 8014bd4:	490c      	ldr	r1, [pc, #48]	; (8014c08 <lwip_netconn_do_connect+0x178>)
 8014bd6:	480a      	ldr	r0, [pc, #40]	; (8014c00 <lwip_netconn_do_connect+0x170>)
 8014bd8:	f011 fede 	bl	8026998 <iprintf>
 8014bdc:	23fa      	movs	r3, #250	; 0xfa
 8014bde:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8014be0:	e000      	b.n	8014be4 <lwip_netconn_do_connect+0x154>
        break;
 8014be2:	bf00      	nop
    }
  }
  msg->err = err;
 8014be4:	693b      	ldr	r3, [r7, #16]
 8014be6:	7dfa      	ldrb	r2, [r7, #23]
 8014be8:	711a      	strb	r2, [r3, #4]
 8014bea:	e000      	b.n	8014bee <lwip_netconn_do_connect+0x15e>
              return;
 8014bec:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8014bee:	3718      	adds	r7, #24
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	bd80      	pop	{r7, pc}
 8014bf4:	08014971 	.word	0x08014971
 8014bf8:	080280e0 	.word	0x080280e0
 8014bfc:	080284a0 	.word	0x080284a0
 8014c00:	08028124 	.word	0x08028124
 8014c04:	20016b3c 	.word	0x20016b3c
 8014c08:	08028528 	.word	0x08028528

08014c0c <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b084      	sub	sp, #16
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	781b      	ldrb	r3, [r3, #0]
 8014c1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014c22:	2b20      	cmp	r3, #32
 8014c24:	d109      	bne.n	8014c3a <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	685b      	ldr	r3, [r3, #4]
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	f00b f823 	bl	801fc78 <udp_disconnect>
    msg->err = ERR_OK;
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	2200      	movs	r2, #0
 8014c36:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8014c38:	e002      	b.n	8014c40 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	22fa      	movs	r2, #250	; 0xfa
 8014c3e:	711a      	strb	r2, [r3, #4]
}
 8014c40:	bf00      	nop
 8014c42:	3710      	adds	r7, #16
 8014c44:	46bd      	mov	sp, r7
 8014c46:	bd80      	pop	{r7, pc}

08014c48 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b086      	sub	sp, #24
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8014c54:	697b      	ldr	r3, [r7, #20]
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	685b      	ldr	r3, [r3, #4]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d07f      	beq.n	8014d5e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8014c5e:	697b      	ldr	r3, [r7, #20]
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	781b      	ldrb	r3, [r3, #0]
 8014c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014c68:	2b10      	cmp	r3, #16
 8014c6a:	d175      	bne.n	8014d58 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8014c6c:	697b      	ldr	r3, [r7, #20]
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	785b      	ldrb	r3, [r3, #1]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d165      	bne.n	8014d42 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8014c76:	697b      	ldr	r3, [r7, #20]
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	685b      	ldr	r3, [r3, #4]
 8014c7c:	7d1b      	ldrb	r3, [r3, #20]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d002      	beq.n	8014c88 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8014c82:	23fa      	movs	r3, #250	; 0xfa
 8014c84:	72fb      	strb	r3, [r7, #11]
 8014c86:	e06c      	b.n	8014d62 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8014c88:	23ff      	movs	r3, #255	; 0xff
 8014c8a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8014c8c:	697b      	ldr	r3, [r7, #20]
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	685b      	ldr	r3, [r3, #4]
 8014c92:	f107 020b 	add.w	r2, r7, #11
 8014c96:	7cf9      	ldrb	r1, [r7, #19]
 8014c98:	4618      	mov	r0, r3
 8014c9a:	f004 fc49 	bl	8019530 <tcp_listen_with_backlog_and_err>
 8014c9e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d05d      	beq.n	8014d62 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8014ca6:	697b      	ldr	r3, [r7, #20]
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	3310      	adds	r3, #16
 8014cac:	4618      	mov	r0, r3
 8014cae:	f00f fb40 	bl	8024332 <sys_mbox_valid>
 8014cb2:	4603      	mov	r3, r0
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d00b      	beq.n	8014cd0 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8014cb8:	697b      	ldr	r3, [r7, #20]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	3310      	adds	r3, #16
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	f00f fab0 	bl	8024224 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8014cc4:	697b      	ldr	r3, [r7, #20]
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	3310      	adds	r3, #16
 8014cca:	4618      	mov	r0, r3
 8014ccc:	f00f fb42 	bl	8024354 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8014cd4:	697b      	ldr	r3, [r7, #20]
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	3314      	adds	r3, #20
 8014cda:	4618      	mov	r0, r3
 8014cdc:	f00f fb29 	bl	8024332 <sys_mbox_valid>
 8014ce0:	4603      	mov	r3, r0
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d108      	bne.n	8014cf8 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8014ce6:	697b      	ldr	r3, [r7, #20]
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	3314      	adds	r3, #20
 8014cec:	2106      	movs	r1, #6
 8014cee:	4618      	mov	r0, r3
 8014cf0:	f00f fa76 	bl	80241e0 <sys_mbox_new>
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8014cf8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d118      	bne.n	8014d32 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8014d00:	697b      	ldr	r3, [r7, #20]
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	2202      	movs	r2, #2
 8014d06:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8014d08:	697b      	ldr	r3, [r7, #20]
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	68fa      	ldr	r2, [r7, #12]
 8014d0e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8014d10:	697b      	ldr	r3, [r7, #20]
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	685a      	ldr	r2, [r3, #4]
 8014d16:	697b      	ldr	r3, [r7, #20]
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	4619      	mov	r1, r3
 8014d1c:	4610      	mov	r0, r2
 8014d1e:	f005 fce5 	bl	801a6ec <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8014d22:	697b      	ldr	r3, [r7, #20]
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	685b      	ldr	r3, [r3, #4]
 8014d28:	4912      	ldr	r1, [pc, #72]	; (8014d74 <lwip_netconn_do_listen+0x12c>)
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	f005 fd56 	bl	801a7dc <tcp_accept>
 8014d30:	e017      	b.n	8014d62 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8014d32:	68f8      	ldr	r0, [r7, #12]
 8014d34:	f004 f9f4 	bl	8019120 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8014d38:	697b      	ldr	r3, [r7, #20]
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	605a      	str	r2, [r3, #4]
 8014d40:	e00f      	b.n	8014d62 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8014d42:	697b      	ldr	r3, [r7, #20]
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	785b      	ldrb	r3, [r3, #1]
 8014d48:	2b02      	cmp	r3, #2
 8014d4a:	d102      	bne.n	8014d52 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	72fb      	strb	r3, [r7, #11]
 8014d50:	e007      	b.n	8014d62 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8014d52:	23f5      	movs	r3, #245	; 0xf5
 8014d54:	72fb      	strb	r3, [r7, #11]
 8014d56:	e004      	b.n	8014d62 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8014d58:	23f0      	movs	r3, #240	; 0xf0
 8014d5a:	72fb      	strb	r3, [r7, #11]
 8014d5c:	e001      	b.n	8014d62 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8014d5e:	23f5      	movs	r3, #245	; 0xf5
 8014d60:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8014d62:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8014d66:	697b      	ldr	r3, [r7, #20]
 8014d68:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8014d6a:	bf00      	nop
 8014d6c:	3718      	adds	r7, #24
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	bd80      	pop	{r7, pc}
 8014d72:	bf00      	nop
 8014d74:	08013f81 	.word	0x08013f81

08014d78 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b084      	sub	sp, #16
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8014d84:	68bb      	ldr	r3, [r7, #8]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	4618      	mov	r0, r3
 8014d8a:	f7fe fdb3 	bl	80138f4 <netconn_err>
 8014d8e:	4603      	mov	r3, r0
 8014d90:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8014d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d135      	bne.n	8014e06 <lwip_netconn_do_send+0x8e>
    if (msg->conn->pcb.tcp != NULL) {
 8014d9a:	68bb      	ldr	r3, [r7, #8]
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	685b      	ldr	r3, [r3, #4]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d02e      	beq.n	8014e02 <lwip_netconn_do_send+0x8a>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8014da4:	68bb      	ldr	r3, [r7, #8]
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	781b      	ldrb	r3, [r3, #0]
 8014daa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014dae:	2b20      	cmp	r3, #32
 8014db0:	d123      	bne.n	8014dfa <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8014db2:	68bb      	ldr	r3, [r7, #8]
 8014db4:	689b      	ldr	r3, [r3, #8]
 8014db6:	689b      	ldr	r3, [r3, #8]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d10c      	bne.n	8014dd6 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8014dbc:	68bb      	ldr	r3, [r7, #8]
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	685a      	ldr	r2, [r3, #4]
 8014dc2:	68bb      	ldr	r3, [r7, #8]
 8014dc4:	689b      	ldr	r3, [r3, #8]
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	4619      	mov	r1, r3
 8014dca:	4610      	mov	r0, r2
 8014dcc:	f00a fc74 	bl	801f6b8 <udp_send>
 8014dd0:	4603      	mov	r3, r0
 8014dd2:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8014dd4:	e017      	b.n	8014e06 <lwip_netconn_do_send+0x8e>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8014dd6:	68bb      	ldr	r3, [r7, #8]
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	6858      	ldr	r0, [r3, #4]
 8014ddc:	68bb      	ldr	r3, [r7, #8]
 8014dde:	689b      	ldr	r3, [r3, #8]
 8014de0:	6819      	ldr	r1, [r3, #0]
 8014de2:	68bb      	ldr	r3, [r7, #8]
 8014de4:	689b      	ldr	r3, [r3, #8]
 8014de6:	f103 0208 	add.w	r2, r3, #8
 8014dea:	68bb      	ldr	r3, [r7, #8]
 8014dec:	689b      	ldr	r3, [r3, #8]
 8014dee:	899b      	ldrh	r3, [r3, #12]
 8014df0:	f00a fc96 	bl	801f720 <udp_sendto>
 8014df4:	4603      	mov	r3, r0
 8014df6:	73fb      	strb	r3, [r7, #15]
          break;
 8014df8:	e005      	b.n	8014e06 <lwip_netconn_do_send+0x8e>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8014dfa:	23f5      	movs	r3, #245	; 0xf5
 8014dfc:	73fb      	strb	r3, [r7, #15]
          break;
 8014dfe:	bf00      	nop
 8014e00:	e001      	b.n	8014e06 <lwip_netconn_do_send+0x8e>
      }
    } else {
      err = ERR_CONN;
 8014e02:	23f5      	movs	r3, #245	; 0xf5
 8014e04:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8014e06:	68bb      	ldr	r3, [r7, #8]
 8014e08:	7bfa      	ldrb	r2, [r7, #15]
 8014e0a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8014e0c:	bf00      	nop
 8014e0e:	3710      	adds	r7, #16
 8014e10:	46bd      	mov	sp, r7
 8014e12:	bd80      	pop	{r7, pc}

08014e14 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b086      	sub	sp, #24
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8014e20:	693b      	ldr	r3, [r7, #16]
 8014e22:	2200      	movs	r2, #0
 8014e24:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8014e26:	693b      	ldr	r3, [r7, #16]
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	685b      	ldr	r3, [r3, #4]
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d022      	beq.n	8014e76 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8014e30:	693b      	ldr	r3, [r7, #16]
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	781b      	ldrb	r3, [r3, #0]
 8014e36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014e3a:	2b10      	cmp	r3, #16
 8014e3c:	d11b      	bne.n	8014e76 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8014e3e:	693b      	ldr	r3, [r7, #16]
 8014e40:	689b      	ldr	r3, [r3, #8]
 8014e42:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8014e44:	697b      	ldr	r3, [r7, #20]
 8014e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014e4a:	d202      	bcs.n	8014e52 <lwip_netconn_do_recv+0x3e>
 8014e4c:	697b      	ldr	r3, [r7, #20]
 8014e4e:	b29b      	uxth	r3, r3
 8014e50:	e001      	b.n	8014e56 <lwip_netconn_do_recv+0x42>
 8014e52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e56:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8014e58:	693b      	ldr	r3, [r7, #16]
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	685b      	ldr	r3, [r3, #4]
 8014e5e:	89fa      	ldrh	r2, [r7, #14]
 8014e60:	4611      	mov	r1, r2
 8014e62:	4618      	mov	r0, r3
 8014e64:	f004 fc68 	bl	8019738 <tcp_recved>
        remaining -= recved;
 8014e68:	89fb      	ldrh	r3, [r7, #14]
 8014e6a:	697a      	ldr	r2, [r7, #20]
 8014e6c:	1ad3      	subs	r3, r2, r3
 8014e6e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8014e70:	697b      	ldr	r3, [r7, #20]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d1e6      	bne.n	8014e44 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8014e76:	bf00      	nop
 8014e78:	3718      	adds	r7, #24
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	bd80      	pop	{r7, pc}
	...

08014e80 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8014e80:	b580      	push	{r7, lr}
 8014e82:	b088      	sub	sp, #32
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	6078      	str	r0, [r7, #4]
 8014e88:	460b      	mov	r3, r1
 8014e8a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d106      	bne.n	8014ea4 <lwip_netconn_do_writemore+0x24>
 8014e96:	4b96      	ldr	r3, [pc, #600]	; (80150f0 <lwip_netconn_do_writemore+0x270>)
 8014e98:	f240 6273 	movw	r2, #1651	; 0x673
 8014e9c:	4995      	ldr	r1, [pc, #596]	; (80150f4 <lwip_netconn_do_writemore+0x274>)
 8014e9e:	4896      	ldr	r0, [pc, #600]	; (80150f8 <lwip_netconn_do_writemore+0x278>)
 8014ea0:	f011 fd7a 	bl	8026998 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	785b      	ldrb	r3, [r3, #1]
 8014ea8:	2b01      	cmp	r3, #1
 8014eaa:	d006      	beq.n	8014eba <lwip_netconn_do_writemore+0x3a>
 8014eac:	4b90      	ldr	r3, [pc, #576]	; (80150f0 <lwip_netconn_do_writemore+0x270>)
 8014eae:	f240 6274 	movw	r2, #1652	; 0x674
 8014eb2:	4992      	ldr	r1, [pc, #584]	; (80150fc <lwip_netconn_do_writemore+0x27c>)
 8014eb4:	4890      	ldr	r0, [pc, #576]	; (80150f8 <lwip_netconn_do_writemore+0x278>)
 8014eb6:	f011 fd6f 	bl	8026998 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	6a1b      	ldr	r3, [r3, #32]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d106      	bne.n	8014ed0 <lwip_netconn_do_writemore+0x50>
 8014ec2:	4b8b      	ldr	r3, [pc, #556]	; (80150f0 <lwip_netconn_do_writemore+0x270>)
 8014ec4:	f240 6275 	movw	r2, #1653	; 0x675
 8014ec8:	498d      	ldr	r1, [pc, #564]	; (8015100 <lwip_netconn_do_writemore+0x280>)
 8014eca:	488b      	ldr	r0, [pc, #556]	; (80150f8 <lwip_netconn_do_writemore+0x278>)
 8014ecc:	f011 fd64 	bl	8026998 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	685b      	ldr	r3, [r3, #4]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d106      	bne.n	8014ee6 <lwip_netconn_do_writemore+0x66>
 8014ed8:	4b85      	ldr	r3, [pc, #532]	; (80150f0 <lwip_netconn_do_writemore+0x270>)
 8014eda:	f240 6276 	movw	r2, #1654	; 0x676
 8014ede:	4989      	ldr	r1, [pc, #548]	; (8015104 <lwip_netconn_do_writemore+0x284>)
 8014ee0:	4885      	ldr	r0, [pc, #532]	; (80150f8 <lwip_netconn_do_writemore+0x278>)
 8014ee2:	f011 fd59 	bl	8026998 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	6a1b      	ldr	r3, [r3, #32]
 8014eea:	699a      	ldr	r2, [r3, #24]
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	6a1b      	ldr	r3, [r3, #32]
 8014ef0:	695b      	ldr	r3, [r3, #20]
 8014ef2:	429a      	cmp	r2, r3
 8014ef4:	d306      	bcc.n	8014f04 <lwip_netconn_do_writemore+0x84>
 8014ef6:	4b7e      	ldr	r3, [pc, #504]	; (80150f0 <lwip_netconn_do_writemore+0x270>)
 8014ef8:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8014efc:	4982      	ldr	r1, [pc, #520]	; (8015108 <lwip_netconn_do_writemore+0x288>)
 8014efe:	487e      	ldr	r0, [pc, #504]	; (80150f8 <lwip_netconn_do_writemore+0x278>)
 8014f00:	f011 fd4a 	bl	8026998 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	6a1b      	ldr	r3, [r3, #32]
 8014f08:	899b      	ldrh	r3, [r3, #12]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d106      	bne.n	8014f1c <lwip_netconn_do_writemore+0x9c>
 8014f0e:	4b78      	ldr	r3, [pc, #480]	; (80150f0 <lwip_netconn_do_writemore+0x270>)
 8014f10:	f240 6279 	movw	r2, #1657	; 0x679
 8014f14:	497d      	ldr	r1, [pc, #500]	; (801510c <lwip_netconn_do_writemore+0x28c>)
 8014f16:	4878      	ldr	r0, [pc, #480]	; (80150f8 <lwip_netconn_do_writemore+0x278>)
 8014f18:	f011 fd3e 	bl	8026998 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	6a1b      	ldr	r3, [r3, #32]
 8014f20:	7f1b      	ldrb	r3, [r3, #28]
 8014f22:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	7f1b      	ldrb	r3, [r3, #28]
 8014f28:	f003 0302 	and.w	r3, r3, #2
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d104      	bne.n	8014f3a <lwip_netconn_do_writemore+0xba>
 8014f30:	7ebb      	ldrb	r3, [r7, #26]
 8014f32:	f003 0304 	and.w	r3, r3, #4
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	d001      	beq.n	8014f3e <lwip_netconn_do_writemore+0xbe>
 8014f3a:	2301      	movs	r3, #1
 8014f3c:	e000      	b.n	8014f40 <lwip_netconn_do_writemore+0xc0>
 8014f3e:	2300      	movs	r3, #0
 8014f40:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	6a1b      	ldr	r3, [r3, #32]
 8014f46:	689b      	ldr	r3, [r3, #8]
 8014f48:	681a      	ldr	r2, [r3, #0]
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	6a1b      	ldr	r3, [r3, #32]
 8014f4e:	691b      	ldr	r3, [r3, #16]
 8014f50:	4413      	add	r3, r2
 8014f52:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	6a1b      	ldr	r3, [r3, #32]
 8014f58:	689b      	ldr	r3, [r3, #8]
 8014f5a:	685a      	ldr	r2, [r3, #4]
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	6a1b      	ldr	r3, [r3, #32]
 8014f60:	691b      	ldr	r3, [r3, #16]
 8014f62:	1ad3      	subs	r3, r2, r3
 8014f64:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8014f66:	693b      	ldr	r3, [r7, #16]
 8014f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014f6c:	d307      	bcc.n	8014f7e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8014f6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f72:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8014f74:	7ebb      	ldrb	r3, [r7, #26]
 8014f76:	f043 0302 	orr.w	r3, r3, #2
 8014f7a:	76bb      	strb	r3, [r7, #26]
 8014f7c:	e001      	b.n	8014f82 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8014f7e:	693b      	ldr	r3, [r7, #16]
 8014f80:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	685b      	ldr	r3, [r3, #4]
 8014f86:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014f8a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8014f8c:	89fa      	ldrh	r2, [r7, #14]
 8014f8e:	8bbb      	ldrh	r3, [r7, #28]
 8014f90:	429a      	cmp	r2, r3
 8014f92:	d216      	bcs.n	8014fc2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8014f94:	89fb      	ldrh	r3, [r7, #14]
 8014f96:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8014f98:	7e3b      	ldrb	r3, [r7, #24]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d00d      	beq.n	8014fba <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8014f9e:	8bbb      	ldrh	r3, [r7, #28]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d10e      	bne.n	8014fc2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	6a1b      	ldr	r3, [r3, #32]
 8014fa8:	699b      	ldr	r3, [r3, #24]
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d102      	bne.n	8014fb4 <lwip_netconn_do_writemore+0x134>
 8014fae:	f06f 0306 	mvn.w	r3, #6
 8014fb2:	e000      	b.n	8014fb6 <lwip_netconn_do_writemore+0x136>
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8014fb8:	e07d      	b.n	80150b6 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8014fba:	7ebb      	ldrb	r3, [r7, #26]
 8014fbc:	f043 0302 	orr.w	r3, r3, #2
 8014fc0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	6a1b      	ldr	r3, [r3, #32]
 8014fc6:	691a      	ldr	r2, [r3, #16]
 8014fc8:	8bbb      	ldrh	r3, [r7, #28]
 8014fca:	441a      	add	r2, r3
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	6a1b      	ldr	r3, [r3, #32]
 8014fd0:	689b      	ldr	r3, [r3, #8]
 8014fd2:	685b      	ldr	r3, [r3, #4]
 8014fd4:	429a      	cmp	r2, r3
 8014fd6:	d906      	bls.n	8014fe6 <lwip_netconn_do_writemore+0x166>
 8014fd8:	4b45      	ldr	r3, [pc, #276]	; (80150f0 <lwip_netconn_do_writemore+0x270>)
 8014fda:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8014fde:	494c      	ldr	r1, [pc, #304]	; (8015110 <lwip_netconn_do_writemore+0x290>)
 8014fe0:	4845      	ldr	r0, [pc, #276]	; (80150f8 <lwip_netconn_do_writemore+0x278>)
 8014fe2:	f011 fcd9 	bl	8026998 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8014fe6:	8bbb      	ldrh	r3, [r7, #28]
 8014fe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014fec:	4293      	cmp	r3, r2
 8014fee:	d103      	bne.n	8014ff8 <lwip_netconn_do_writemore+0x178>
 8014ff0:	693b      	ldr	r3, [r7, #16]
 8014ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014ff6:	d209      	bcs.n	801500c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8014ff8:	693b      	ldr	r3, [r7, #16]
 8014ffa:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8014ffc:	8bba      	ldrh	r2, [r7, #28]
 8014ffe:	429a      	cmp	r2, r3
 8015000:	d10b      	bne.n	801501a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	6a1b      	ldr	r3, [r3, #32]
 8015006:	899b      	ldrh	r3, [r3, #12]
 8015008:	2b01      	cmp	r3, #1
 801500a:	d906      	bls.n	801501a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 801500c:	2301      	movs	r3, #1
 801500e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8015010:	7ebb      	ldrb	r3, [r7, #26]
 8015012:	f043 0302 	orr.w	r3, r3, #2
 8015016:	76bb      	strb	r3, [r7, #26]
 8015018:	e001      	b.n	801501e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 801501a:	2300      	movs	r3, #0
 801501c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	6858      	ldr	r0, [r3, #4]
 8015022:	7ebb      	ldrb	r3, [r7, #26]
 8015024:	8bba      	ldrh	r2, [r7, #28]
 8015026:	6979      	ldr	r1, [r7, #20]
 8015028:	f008 fa9c 	bl	801d564 <tcp_write>
 801502c:	4603      	mov	r3, r0
 801502e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8015030:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d12c      	bne.n	8015092 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	6a1b      	ldr	r3, [r3, #32]
 801503c:	6999      	ldr	r1, [r3, #24]
 801503e:	8bba      	ldrh	r2, [r7, #28]
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	6a1b      	ldr	r3, [r3, #32]
 8015044:	440a      	add	r2, r1
 8015046:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	6a1b      	ldr	r3, [r3, #32]
 801504c:	6919      	ldr	r1, [r3, #16]
 801504e:	8bba      	ldrh	r2, [r7, #28]
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	6a1b      	ldr	r3, [r3, #32]
 8015054:	440a      	add	r2, r1
 8015056:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	6a1b      	ldr	r3, [r3, #32]
 801505c:	691a      	ldr	r2, [r3, #16]
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	6a1b      	ldr	r3, [r3, #32]
 8015062:	689b      	ldr	r3, [r3, #8]
 8015064:	685b      	ldr	r3, [r3, #4]
 8015066:	429a      	cmp	r2, r3
 8015068:	d113      	bne.n	8015092 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	6a1b      	ldr	r3, [r3, #32]
 801506e:	899a      	ldrh	r2, [r3, #12]
 8015070:	3a01      	subs	r2, #1
 8015072:	b292      	uxth	r2, r2
 8015074:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	6a1b      	ldr	r3, [r3, #32]
 801507a:	899b      	ldrh	r3, [r3, #12]
 801507c:	2b00      	cmp	r3, #0
 801507e:	d008      	beq.n	8015092 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	6a1b      	ldr	r3, [r3, #32]
 8015084:	689a      	ldr	r2, [r3, #8]
 8015086:	3208      	adds	r2, #8
 8015088:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	6a1b      	ldr	r3, [r3, #32]
 801508e:	2200      	movs	r2, #0
 8015090:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8015092:	7e7b      	ldrb	r3, [r7, #25]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d004      	beq.n	80150a2 <lwip_netconn_do_writemore+0x222>
 8015098:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801509c:	2b00      	cmp	r3, #0
 801509e:	f43f af50 	beq.w	8014f42 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80150a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d004      	beq.n	80150b4 <lwip_netconn_do_writemore+0x234>
 80150aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80150ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80150b2:	d147      	bne.n	8015144 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 80150b4:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80150b6:	7e3b      	ldrb	r3, [r7, #24]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d02b      	beq.n	8015114 <lwip_netconn_do_writemore+0x294>
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	6a1b      	ldr	r3, [r3, #32]
 80150c0:	699a      	ldr	r2, [r3, #24]
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	6a1b      	ldr	r3, [r3, #32]
 80150c6:	695b      	ldr	r3, [r3, #20]
 80150c8:	429a      	cmp	r2, r3
 80150ca:	d223      	bcs.n	8015114 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d005      	beq.n	80150e0 <lwip_netconn_do_writemore+0x260>
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150d8:	2200      	movs	r2, #0
 80150da:	2103      	movs	r1, #3
 80150dc:	6878      	ldr	r0, [r7, #4]
 80150de:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	7f1b      	ldrb	r3, [r3, #28]
 80150e4:	f043 0310 	orr.w	r3, r3, #16
 80150e8:	b2da      	uxtb	r2, r3
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	771a      	strb	r2, [r3, #28]
 80150ee:	e029      	b.n	8015144 <lwip_netconn_do_writemore+0x2c4>
 80150f0:	080280e0 	.word	0x080280e0
 80150f4:	08028238 	.word	0x08028238
 80150f8:	08028124 	.word	0x08028124
 80150fc:	08028540 	.word	0x08028540
 8015100:	08028248 	.word	0x08028248
 8015104:	08028560 	.word	0x08028560
 8015108:	08028578 	.word	0x08028578
 801510c:	080285b8 	.word	0x080285b8
 8015110:	080285e0 	.word	0x080285e0
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	685b      	ldr	r3, [r3, #4]
 8015118:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801511c:	f240 3299 	movw	r2, #921	; 0x399
 8015120:	4293      	cmp	r3, r2
 8015122:	d905      	bls.n	8015130 <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	685b      	ldr	r3, [r3, #4]
 8015128:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801512c:	2b07      	cmp	r3, #7
 801512e:	d909      	bls.n	8015144 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015134:	2b00      	cmp	r3, #0
 8015136:	d005      	beq.n	8015144 <lwip_netconn_do_writemore+0x2c4>
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801513c:	2200      	movs	r2, #0
 801513e:	2103      	movs	r1, #3
 8015140:	6878      	ldr	r0, [r7, #4]
 8015142:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8015144:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015148:	2b00      	cmp	r3, #0
 801514a:	d11d      	bne.n	8015188 <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	6a1b      	ldr	r3, [r3, #32]
 8015150:	699a      	ldr	r2, [r3, #24]
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	6a1b      	ldr	r3, [r3, #32]
 8015156:	695b      	ldr	r3, [r3, #20]
 8015158:	429a      	cmp	r2, r3
 801515a:	d002      	beq.n	8015162 <lwip_netconn_do_writemore+0x2e2>
 801515c:	7e3b      	ldrb	r3, [r7, #24]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d001      	beq.n	8015166 <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8015162:	2301      	movs	r3, #1
 8015164:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	685b      	ldr	r3, [r3, #4]
 801516a:	4618      	mov	r0, r3
 801516c:	f008 ffe6 	bl	801e13c <tcp_output>
 8015170:	4603      	mov	r3, r0
 8015172:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8015174:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8015178:	f113 0f04 	cmn.w	r3, #4
 801517c:	d12c      	bne.n	80151d8 <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801517e:	7b3b      	ldrb	r3, [r7, #12]
 8015180:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8015182:	2301      	movs	r3, #1
 8015184:	76fb      	strb	r3, [r7, #27]
 8015186:	e027      	b.n	80151d8 <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 8015188:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801518c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015190:	d120      	bne.n	80151d4 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	685b      	ldr	r3, [r3, #4]
 8015196:	4618      	mov	r0, r3
 8015198:	f008 ffd0 	bl	801e13c <tcp_output>
 801519c:	4603      	mov	r3, r0
 801519e:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 80151a0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80151a4:	f113 0f04 	cmn.w	r3, #4
 80151a8:	d104      	bne.n	80151b4 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80151aa:	7b7b      	ldrb	r3, [r7, #13]
 80151ac:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80151ae:	2301      	movs	r3, #1
 80151b0:	76fb      	strb	r3, [r7, #27]
 80151b2:	e011      	b.n	80151d8 <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 80151b4:	7e3b      	ldrb	r3, [r7, #24]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d00e      	beq.n	80151d8 <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	6a1b      	ldr	r3, [r3, #32]
 80151be:	699b      	ldr	r3, [r3, #24]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d102      	bne.n	80151ca <lwip_netconn_do_writemore+0x34a>
 80151c4:	f06f 0306 	mvn.w	r3, #6
 80151c8:	e000      	b.n	80151cc <lwip_netconn_do_writemore+0x34c>
 80151ca:	2300      	movs	r3, #0
 80151cc:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80151ce:	2301      	movs	r3, #1
 80151d0:	76fb      	strb	r3, [r7, #27]
 80151d2:	e001      	b.n	80151d8 <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80151d4:	2301      	movs	r3, #1
 80151d6:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80151d8:	7efb      	ldrb	r3, [r7, #27]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d015      	beq.n	801520a <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	6a1b      	ldr	r3, [r3, #32]
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	330c      	adds	r3, #12
 80151e6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	6a1b      	ldr	r3, [r3, #32]
 80151ec:	7ffa      	ldrb	r2, [r7, #31]
 80151ee:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	2200      	movs	r2, #0
 80151f4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	2200      	movs	r2, #0
 80151fa:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80151fc:	78fb      	ldrb	r3, [r7, #3]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d006      	beq.n	8015210 <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8015202:	68b8      	ldr	r0, [r7, #8]
 8015204:	f00f f90c 	bl	8024420 <sys_sem_signal>
 8015208:	e002      	b.n	8015210 <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 801520a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801520e:	e000      	b.n	8015212 <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 8015210:	2300      	movs	r3, #0
}
 8015212:	4618      	mov	r0, r3
 8015214:	3720      	adds	r7, #32
 8015216:	46bd      	mov	sp, r7
 8015218:	bd80      	pop	{r7, pc}
 801521a:	bf00      	nop

0801521c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 801521c:	b580      	push	{r7, lr}
 801521e:	b084      	sub	sp, #16
 8015220:	af00      	add	r7, sp, #0
 8015222:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8015228:	68bb      	ldr	r3, [r7, #8]
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	4618      	mov	r0, r3
 801522e:	f7fe fb61 	bl	80138f4 <netconn_err>
 8015232:	4603      	mov	r3, r0
 8015234:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8015236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d166      	bne.n	801530c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801523e:	68bb      	ldr	r3, [r7, #8]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	781b      	ldrb	r3, [r3, #0]
 8015244:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015248:	2b10      	cmp	r3, #16
 801524a:	d15d      	bne.n	8015308 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 801524c:	68bb      	ldr	r3, [r7, #8]
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	785b      	ldrb	r3, [r3, #1]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d002      	beq.n	801525c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8015256:	23fb      	movs	r3, #251	; 0xfb
 8015258:	73fb      	strb	r3, [r7, #15]
 801525a:	e057      	b.n	801530c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 801525c:	68bb      	ldr	r3, [r7, #8]
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	685b      	ldr	r3, [r3, #4]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d04d      	beq.n	8015302 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8015266:	68bb      	ldr	r3, [r7, #8]
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	2201      	movs	r2, #1
 801526c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801526e:	68bb      	ldr	r3, [r7, #8]
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	6a1b      	ldr	r3, [r3, #32]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d006      	beq.n	8015286 <lwip_netconn_do_write+0x6a>
 8015278:	4b28      	ldr	r3, [pc, #160]	; (801531c <lwip_netconn_do_write+0x100>)
 801527a:	f240 7223 	movw	r2, #1827	; 0x723
 801527e:	4928      	ldr	r1, [pc, #160]	; (8015320 <lwip_netconn_do_write+0x104>)
 8015280:	4828      	ldr	r0, [pc, #160]	; (8015324 <lwip_netconn_do_write+0x108>)
 8015282:	f011 fb89 	bl	8026998 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8015286:	68bb      	ldr	r3, [r7, #8]
 8015288:	695b      	ldr	r3, [r3, #20]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d106      	bne.n	801529c <lwip_netconn_do_write+0x80>
 801528e:	4b23      	ldr	r3, [pc, #140]	; (801531c <lwip_netconn_do_write+0x100>)
 8015290:	f240 7224 	movw	r2, #1828	; 0x724
 8015294:	4924      	ldr	r1, [pc, #144]	; (8015328 <lwip_netconn_do_write+0x10c>)
 8015296:	4823      	ldr	r0, [pc, #140]	; (8015324 <lwip_netconn_do_write+0x108>)
 8015298:	f011 fb7e 	bl	8026998 <iprintf>
        msg->conn->current_msg = msg;
 801529c:	68bb      	ldr	r3, [r7, #8]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	68ba      	ldr	r2, [r7, #8]
 80152a2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80152a4:	68bb      	ldr	r3, [r7, #8]
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	2100      	movs	r1, #0
 80152aa:	4618      	mov	r0, r3
 80152ac:	f7ff fde8 	bl	8014e80 <lwip_netconn_do_writemore>
 80152b0:	4603      	mov	r3, r0
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d02e      	beq.n	8015314 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80152b6:	68bb      	ldr	r3, [r7, #8]
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	785b      	ldrb	r3, [r3, #1]
 80152bc:	2b01      	cmp	r3, #1
 80152be:	d006      	beq.n	80152ce <lwip_netconn_do_write+0xb2>
 80152c0:	4b16      	ldr	r3, [pc, #88]	; (801531c <lwip_netconn_do_write+0x100>)
 80152c2:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80152c6:	4919      	ldr	r1, [pc, #100]	; (801532c <lwip_netconn_do_write+0x110>)
 80152c8:	4816      	ldr	r0, [pc, #88]	; (8015324 <lwip_netconn_do_write+0x108>)
 80152ca:	f011 fb65 	bl	8026998 <iprintf>
          UNLOCK_TCPIP_CORE();
 80152ce:	4818      	ldr	r0, [pc, #96]	; (8015330 <lwip_netconn_do_write+0x114>)
 80152d0:	f00f f917 	bl	8024502 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80152d4:	68bb      	ldr	r3, [r7, #8]
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	330c      	adds	r3, #12
 80152da:	2100      	movs	r1, #0
 80152dc:	4618      	mov	r0, r3
 80152de:	f00f f86e 	bl	80243be <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80152e2:	4813      	ldr	r0, [pc, #76]	; (8015330 <lwip_netconn_do_write+0x114>)
 80152e4:	f00f f8fe 	bl	80244e4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80152e8:	68bb      	ldr	r3, [r7, #8]
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	785b      	ldrb	r3, [r3, #1]
 80152ee:	2b01      	cmp	r3, #1
 80152f0:	d110      	bne.n	8015314 <lwip_netconn_do_write+0xf8>
 80152f2:	4b0a      	ldr	r3, [pc, #40]	; (801531c <lwip_netconn_do_write+0x100>)
 80152f4:	f240 722c 	movw	r2, #1836	; 0x72c
 80152f8:	490c      	ldr	r1, [pc, #48]	; (801532c <lwip_netconn_do_write+0x110>)
 80152fa:	480a      	ldr	r0, [pc, #40]	; (8015324 <lwip_netconn_do_write+0x108>)
 80152fc:	f011 fb4c 	bl	8026998 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8015300:	e008      	b.n	8015314 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8015302:	23f5      	movs	r3, #245	; 0xf5
 8015304:	73fb      	strb	r3, [r7, #15]
 8015306:	e001      	b.n	801530c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8015308:	23fa      	movs	r3, #250	; 0xfa
 801530a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 801530c:	68bb      	ldr	r3, [r7, #8]
 801530e:	7bfa      	ldrb	r2, [r7, #15]
 8015310:	711a      	strb	r2, [r3, #4]
 8015312:	e000      	b.n	8015316 <lwip_netconn_do_write+0xfa>
        return;
 8015314:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8015316:	3710      	adds	r7, #16
 8015318:	46bd      	mov	sp, r7
 801531a:	bd80      	pop	{r7, pc}
 801531c:	080280e0 	.word	0x080280e0
 8015320:	08028484 	.word	0x08028484
 8015324:	08028124 	.word	0x08028124
 8015328:	0802860c 	.word	0x0802860c
 801532c:	080284a0 	.word	0x080284a0
 8015330:	20016b3c 	.word	0x20016b3c

08015334 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 8015334:	b580      	push	{r7, lr}
 8015336:	b084      	sub	sp, #16
 8015338:	af00      	add	r7, sp, #0
 801533a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	685b      	ldr	r3, [r3, #4]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d06c      	beq.n	8015424 <lwip_netconn_do_getaddr+0xf0>
    if (msg->msg.ad.local) {
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	7c1b      	ldrb	r3, [r3, #16]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d007      	beq.n	8015362 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	685a      	ldr	r2, [r3, #4]
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	689b      	ldr	r3, [r3, #8]
 801535c:	6812      	ldr	r2, [r2, #0]
 801535e:	601a      	str	r2, [r3, #0]
 8015360:	e006      	b.n	8015370 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	685a      	ldr	r2, [r3, #4]
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	689b      	ldr	r3, [r3, #8]
 801536c:	6852      	ldr	r2, [r2, #4]
 801536e:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 8015370:	68fb      	ldr	r3, [r7, #12]
 8015372:	2200      	movs	r2, #0
 8015374:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	781b      	ldrb	r3, [r3, #0]
 801537c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015380:	2b10      	cmp	r3, #16
 8015382:	d021      	beq.n	80153c8 <lwip_netconn_do_getaddr+0x94>
 8015384:	2b20      	cmp	r3, #32
 8015386:	d144      	bne.n	8015412 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	7c1b      	ldrb	r3, [r3, #16]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d007      	beq.n	80153a0 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	685a      	ldr	r2, [r3, #4]
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	68db      	ldr	r3, [r3, #12]
 801539a:	8a52      	ldrh	r2, [r2, #18]
 801539c:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 801539e:	e044      	b.n	801542a <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	685b      	ldr	r3, [r3, #4]
 80153a6:	7c1b      	ldrb	r3, [r3, #16]
 80153a8:	f003 0304 	and.w	r3, r3, #4
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d103      	bne.n	80153b8 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	22f5      	movs	r2, #245	; 0xf5
 80153b4:	711a      	strb	r2, [r3, #4]
        break;
 80153b6:	e038      	b.n	801542a <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	685a      	ldr	r2, [r3, #4]
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	68db      	ldr	r3, [r3, #12]
 80153c2:	8a92      	ldrh	r2, [r2, #20]
 80153c4:	801a      	strh	r2, [r3, #0]
        break;
 80153c6:	e030      	b.n	801542a <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	7c1b      	ldrb	r3, [r3, #16]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d10f      	bne.n	80153f0 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	685b      	ldr	r3, [r3, #4]
 80153d6:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d005      	beq.n	80153e8 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	685b      	ldr	r3, [r3, #4]
 80153e2:	7d1b      	ldrb	r3, [r3, #20]
 80153e4:	2b01      	cmp	r3, #1
 80153e6:	d103      	bne.n	80153f0 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	22f5      	movs	r2, #245	; 0xf5
 80153ec:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 80153ee:	e01c      	b.n	801542a <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	7c1b      	ldrb	r3, [r3, #16]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d004      	beq.n	8015402 <lwip_netconn_do_getaddr+0xce>
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	685b      	ldr	r3, [r3, #4]
 80153fe:	8adb      	ldrh	r3, [r3, #22]
 8015400:	e003      	b.n	801540a <lwip_netconn_do_getaddr+0xd6>
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	685b      	ldr	r3, [r3, #4]
 8015408:	8b1b      	ldrh	r3, [r3, #24]
 801540a:	68fa      	ldr	r2, [r7, #12]
 801540c:	68d2      	ldr	r2, [r2, #12]
 801540e:	8013      	strh	r3, [r2, #0]
        break;
 8015410:	e00b      	b.n	801542a <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 8015412:	4b08      	ldr	r3, [pc, #32]	; (8015434 <lwip_netconn_do_getaddr+0x100>)
 8015414:	f240 727d 	movw	r2, #1917	; 0x77d
 8015418:	4907      	ldr	r1, [pc, #28]	; (8015438 <lwip_netconn_do_getaddr+0x104>)
 801541a:	4808      	ldr	r0, [pc, #32]	; (801543c <lwip_netconn_do_getaddr+0x108>)
 801541c:	f011 fabc 	bl	8026998 <iprintf>
        break;
 8015420:	bf00      	nop
 8015422:	e002      	b.n	801542a <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	22f5      	movs	r2, #245	; 0xf5
 8015428:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 801542a:	bf00      	nop
 801542c:	3710      	adds	r7, #16
 801542e:	46bd      	mov	sp, r7
 8015430:	bd80      	pop	{r7, pc}
 8015432:	bf00      	nop
 8015434:	080280e0 	.word	0x080280e0
 8015438:	08028620 	.word	0x08028620
 801543c:	08028124 	.word	0x08028124

08015440 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b084      	sub	sp, #16
 8015444:	af00      	add	r7, sp, #0
 8015446:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	785b      	ldrb	r3, [r3, #1]
 8015452:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	685b      	ldr	r3, [r3, #4]
 801545a:	2b00      	cmp	r3, #0
 801545c:	d069      	beq.n	8015532 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	781b      	ldrb	r3, [r3, #0]
 8015464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8015468:	2b10      	cmp	r3, #16
 801546a:	d162      	bne.n	8015532 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8015470:	2b03      	cmp	r3, #3
 8015472:	d002      	beq.n	801547a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8015474:	7afb      	ldrb	r3, [r7, #11]
 8015476:	2b02      	cmp	r3, #2
 8015478:	d05b      	beq.n	8015532 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 801547a:	7afb      	ldrb	r3, [r7, #11]
 801547c:	2b03      	cmp	r3, #3
 801547e:	d103      	bne.n	8015488 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	22f5      	movs	r2, #245	; 0xf5
 8015484:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8015486:	e059      	b.n	801553c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8015488:	7afb      	ldrb	r3, [r7, #11]
 801548a:	2b01      	cmp	r3, #1
 801548c:	d103      	bne.n	8015496 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	22fb      	movs	r2, #251	; 0xfb
 8015492:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8015494:	e052      	b.n	801553c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	7a1b      	ldrb	r3, [r3, #8]
 801549a:	f003 0301 	and.w	r3, r3, #1
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d004      	beq.n	80154ac <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	4618      	mov	r0, r3
 80154a8:	f7fe ff5e 	bl	8014368 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	6a1b      	ldr	r3, [r3, #32]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d006      	beq.n	80154c4 <lwip_netconn_do_close+0x84>
 80154b6:	4b23      	ldr	r3, [pc, #140]	; (8015544 <lwip_netconn_do_close+0x104>)
 80154b8:	f240 72bd 	movw	r2, #1981	; 0x7bd
 80154bc:	4922      	ldr	r1, [pc, #136]	; (8015548 <lwip_netconn_do_close+0x108>)
 80154be:	4823      	ldr	r0, [pc, #140]	; (801554c <lwip_netconn_do_close+0x10c>)
 80154c0:	f011 fa6a 	bl	8026998 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	2204      	movs	r2, #4
 80154ca:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	68fa      	ldr	r2, [r7, #12]
 80154d2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	2100      	movs	r1, #0
 80154da:	4618      	mov	r0, r3
 80154dc:	f7fe ffc2 	bl	8014464 <lwip_netconn_do_close_internal>
 80154e0:	4603      	mov	r3, r0
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d029      	beq.n	801553a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80154e6:	68fb      	ldr	r3, [r7, #12]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	785b      	ldrb	r3, [r3, #1]
 80154ec:	2b04      	cmp	r3, #4
 80154ee:	d006      	beq.n	80154fe <lwip_netconn_do_close+0xbe>
 80154f0:	4b14      	ldr	r3, [pc, #80]	; (8015544 <lwip_netconn_do_close+0x104>)
 80154f2:	f240 72c2 	movw	r2, #1986	; 0x7c2
 80154f6:	4916      	ldr	r1, [pc, #88]	; (8015550 <lwip_netconn_do_close+0x110>)
 80154f8:	4814      	ldr	r0, [pc, #80]	; (801554c <lwip_netconn_do_close+0x10c>)
 80154fa:	f011 fa4d 	bl	8026998 <iprintf>
        UNLOCK_TCPIP_CORE();
 80154fe:	4815      	ldr	r0, [pc, #84]	; (8015554 <lwip_netconn_do_close+0x114>)
 8015500:	f00e ffff 	bl	8024502 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	330c      	adds	r3, #12
 801550a:	2100      	movs	r1, #0
 801550c:	4618      	mov	r0, r3
 801550e:	f00e ff56 	bl	80243be <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8015512:	4810      	ldr	r0, [pc, #64]	; (8015554 <lwip_netconn_do_close+0x114>)
 8015514:	f00e ffe6 	bl	80244e4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	785b      	ldrb	r3, [r3, #1]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d00b      	beq.n	801553a <lwip_netconn_do_close+0xfa>
 8015522:	4b08      	ldr	r3, [pc, #32]	; (8015544 <lwip_netconn_do_close+0x104>)
 8015524:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8015528:	4909      	ldr	r1, [pc, #36]	; (8015550 <lwip_netconn_do_close+0x110>)
 801552a:	4808      	ldr	r0, [pc, #32]	; (801554c <lwip_netconn_do_close+0x10c>)
 801552c:	f011 fa34 	bl	8026998 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8015530:	e003      	b.n	801553a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	22f5      	movs	r2, #245	; 0xf5
 8015536:	711a      	strb	r2, [r3, #4]
 8015538:	e000      	b.n	801553c <lwip_netconn_do_close+0xfc>
      return;
 801553a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 801553c:	3710      	adds	r7, #16
 801553e:	46bd      	mov	sp, r7
 8015540:	bd80      	pop	{r7, pc}
 8015542:	bf00      	nop
 8015544:	080280e0 	.word	0x080280e0
 8015548:	08028484 	.word	0x08028484
 801554c:	08028124 	.word	0x08028124
 8015550:	080284a0 	.word	0x080284a0
 8015554:	20016b3c 	.word	0x20016b3c

08015558 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 8015558:	b480      	push	{r7}
 801555a:	b083      	sub	sp, #12
 801555c:	af00      	add	r7, sp, #0
 801555e:	4603      	mov	r3, r0
 8015560:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 8015562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015566:	2b00      	cmp	r3, #0
 8015568:	dc04      	bgt.n	8015574 <err_to_errno+0x1c>
 801556a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801556e:	425b      	negs	r3, r3
 8015570:	2b10      	cmp	r3, #16
 8015572:	dd01      	ble.n	8015578 <err_to_errno+0x20>
    return EIO;
 8015574:	2305      	movs	r3, #5
 8015576:	e005      	b.n	8015584 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 8015578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801557c:	425b      	negs	r3, r3
 801557e:	4a04      	ldr	r2, [pc, #16]	; (8015590 <err_to_errno+0x38>)
 8015580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8015584:	4618      	mov	r0, r3
 8015586:	370c      	adds	r7, #12
 8015588:	46bd      	mov	sp, r7
 801558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801558e:	4770      	bx	lr
 8015590:	0802bc74 	.word	0x0802bc74

08015594 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8015594:	b580      	push	{r7, lr}
 8015596:	b082      	sub	sp, #8
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d013      	beq.n	80155ca <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d00b      	beq.n	80155c2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	4618      	mov	r0, r3
 80155b0:	f003 f904 	bl	80187bc <pbuf_free>
      buf->p = buf->ptr = NULL;
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	2200      	movs	r2, #0
 80155b8:	605a      	str	r2, [r3, #4]
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	685a      	ldr	r2, [r3, #4]
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80155c2:	6879      	ldr	r1, [r7, #4]
 80155c4:	2006      	movs	r0, #6
 80155c6:	f002 fa4b 	bl	8017a60 <memp_free>
  }
}
 80155ca:	bf00      	nop
 80155cc:	3708      	adds	r7, #8
 80155ce:	46bd      	mov	sp, r7
 80155d0:	bd80      	pop	{r7, pc}
	...

080155d4 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 80155d4:	b580      	push	{r7, lr}
 80155d6:	b082      	sub	sp, #8
 80155d8:	af00      	add	r7, sp, #0
 80155da:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d106      	bne.n	80155f0 <netbuf_free+0x1c>
 80155e2:	4b0d      	ldr	r3, [pc, #52]	; (8015618 <netbuf_free+0x44>)
 80155e4:	2281      	movs	r2, #129	; 0x81
 80155e6:	490d      	ldr	r1, [pc, #52]	; (801561c <netbuf_free+0x48>)
 80155e8:	480d      	ldr	r0, [pc, #52]	; (8015620 <netbuf_free+0x4c>)
 80155ea:	f011 f9d5 	bl	8026998 <iprintf>
 80155ee:	e00f      	b.n	8015610 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d004      	beq.n	8015602 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	4618      	mov	r0, r3
 80155fe:	f003 f8dd 	bl	80187bc <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	2200      	movs	r2, #0
 8015606:	605a      	str	r2, [r3, #4]
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	685a      	ldr	r2, [r3, #4]
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 8015610:	3708      	adds	r7, #8
 8015612:	46bd      	mov	sp, r7
 8015614:	bd80      	pop	{r7, pc}
 8015616:	bf00      	nop
 8015618:	08028638 	.word	0x08028638
 801561c:	080286d4 	.word	0x080286d4
 8015620:	08028688 	.word	0x08028688

08015624 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8015624:	b580      	push	{r7, lr}
 8015626:	b084      	sub	sp, #16
 8015628:	af00      	add	r7, sp, #0
 801562a:	60f8      	str	r0, [r7, #12]
 801562c:	60b9      	str	r1, [r7, #8]
 801562e:	4613      	mov	r3, r2
 8015630:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d108      	bne.n	801564a <netbuf_ref+0x26>
 8015638:	4b1c      	ldr	r3, [pc, #112]	; (80156ac <netbuf_ref+0x88>)
 801563a:	2299      	movs	r2, #153	; 0x99
 801563c:	491c      	ldr	r1, [pc, #112]	; (80156b0 <netbuf_ref+0x8c>)
 801563e:	481d      	ldr	r0, [pc, #116]	; (80156b4 <netbuf_ref+0x90>)
 8015640:	f011 f9aa 	bl	8026998 <iprintf>
 8015644:	f06f 030f 	mvn.w	r3, #15
 8015648:	e02b      	b.n	80156a2 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d004      	beq.n	801565c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	4618      	mov	r0, r3
 8015658:	f003 f8b0 	bl	80187bc <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 801565c:	2241      	movs	r2, #65	; 0x41
 801565e:	2100      	movs	r1, #0
 8015660:	2036      	movs	r0, #54	; 0x36
 8015662:	f002 fd99 	bl	8018198 <pbuf_alloc>
 8015666:	4602      	mov	r2, r0
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	2b00      	cmp	r3, #0
 8015672:	d105      	bne.n	8015680 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	2200      	movs	r2, #0
 8015678:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 801567a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801567e:	e010      	b.n	80156a2 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	68ba      	ldr	r2, [r7, #8]
 8015686:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	88fa      	ldrh	r2, [r7, #6]
 801568e:	811a      	strh	r2, [r3, #8]
 8015690:	68fa      	ldr	r2, [r7, #12]
 8015692:	6812      	ldr	r2, [r2, #0]
 8015694:	891b      	ldrh	r3, [r3, #8]
 8015696:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	681a      	ldr	r2, [r3, #0]
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 80156a0:	2300      	movs	r3, #0
}
 80156a2:	4618      	mov	r0, r3
 80156a4:	3710      	adds	r7, #16
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd80      	pop	{r7, pc}
 80156aa:	bf00      	nop
 80156ac:	08028638 	.word	0x08028638
 80156b0:	080286f0 	.word	0x080286f0
 80156b4:	08028688 	.word	0x08028688

080156b8 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 80156b8:	b480      	push	{r7}
 80156ba:	b085      	sub	sp, #20
 80156bc:	af00      	add	r7, sp, #0
 80156be:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	db02      	blt.n	80156d0 <tryget_socket_unconn_nouse+0x18>
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	2b03      	cmp	r3, #3
 80156ce:	dd01      	ble.n	80156d4 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 80156d0:	2300      	movs	r3, #0
 80156d2:	e003      	b.n	80156dc <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	011b      	lsls	r3, r3, #4
 80156d8:	4a03      	ldr	r2, [pc, #12]	; (80156e8 <tryget_socket_unconn_nouse+0x30>)
 80156da:	4413      	add	r3, r2
}
 80156dc:	4618      	mov	r0, r3
 80156de:	3714      	adds	r7, #20
 80156e0:	46bd      	mov	sp, r7
 80156e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e6:	4770      	bx	lr
 80156e8:	2001312c 	.word	0x2001312c

080156ec <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b084      	sub	sp, #16
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 80156f4:	6878      	ldr	r0, [r7, #4]
 80156f6:	f7ff ffdf 	bl	80156b8 <tryget_socket_unconn_nouse>
 80156fa:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 80156fc:	68fb      	ldr	r3, [r7, #12]
}
 80156fe:	4618      	mov	r0, r3
 8015700:	3710      	adds	r7, #16
 8015702:	46bd      	mov	sp, r7
 8015704:	bd80      	pop	{r7, pc}

08015706 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 8015706:	b580      	push	{r7, lr}
 8015708:	b084      	sub	sp, #16
 801570a:	af00      	add	r7, sp, #0
 801570c:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 801570e:	6878      	ldr	r0, [r7, #4]
 8015710:	f7ff ffec 	bl	80156ec <tryget_socket_unconn>
 8015714:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	2b00      	cmp	r3, #0
 801571a:	d005      	beq.n	8015728 <tryget_socket+0x22>
    if (sock->conn) {
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	681b      	ldr	r3, [r3, #0]
 8015720:	2b00      	cmp	r3, #0
 8015722:	d001      	beq.n	8015728 <tryget_socket+0x22>
      return sock;
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	e000      	b.n	801572a <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 8015728:	2300      	movs	r3, #0
}
 801572a:	4618      	mov	r0, r3
 801572c:	3710      	adds	r7, #16
 801572e:	46bd      	mov	sp, r7
 8015730:	bd80      	pop	{r7, pc}
	...

08015734 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 8015734:	b580      	push	{r7, lr}
 8015736:	b084      	sub	sp, #16
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 801573c:	6878      	ldr	r0, [r7, #4]
 801573e:	f7ff ffe2 	bl	8015706 <tryget_socket>
 8015742:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	2b00      	cmp	r3, #0
 8015748:	d104      	bne.n	8015754 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 801574a:	4b05      	ldr	r3, [pc, #20]	; (8015760 <get_socket+0x2c>)
 801574c:	2209      	movs	r2, #9
 801574e:	601a      	str	r2, [r3, #0]
    return NULL;
 8015750:	2300      	movs	r3, #0
 8015752:	e000      	b.n	8015756 <get_socket+0x22>
  }
  return sock;
 8015754:	68fb      	ldr	r3, [r7, #12]
}
 8015756:	4618      	mov	r0, r3
 8015758:	3710      	adds	r7, #16
 801575a:	46bd      	mov	sp, r7
 801575c:	bd80      	pop	{r7, pc}
 801575e:	bf00      	nop
 8015760:	2001a038 	.word	0x2001a038

08015764 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b084      	sub	sp, #16
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
 801576c:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 801576e:	2300      	movs	r3, #0
 8015770:	60fb      	str	r3, [r7, #12]
 8015772:	e052      	b.n	801581a <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 8015774:	f00e fef8 	bl	8024568 <sys_arch_protect>
 8015778:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 801577a:	4a2c      	ldr	r2, [pc, #176]	; (801582c <alloc_socket+0xc8>)
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	011b      	lsls	r3, r3, #4
 8015780:	4413      	add	r3, r2
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d142      	bne.n	801580e <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 8015788:	4a28      	ldr	r2, [pc, #160]	; (801582c <alloc_socket+0xc8>)
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	011b      	lsls	r3, r3, #4
 801578e:	4413      	add	r3, r2
 8015790:	687a      	ldr	r2, [r7, #4]
 8015792:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 8015794:	68b8      	ldr	r0, [r7, #8]
 8015796:	f00e fef5 	bl	8024584 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 801579a:	4a24      	ldr	r2, [pc, #144]	; (801582c <alloc_socket+0xc8>)
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	011b      	lsls	r3, r3, #4
 80157a0:	4413      	add	r3, r2
 80157a2:	3304      	adds	r3, #4
 80157a4:	2200      	movs	r2, #0
 80157a6:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 80157a8:	4a20      	ldr	r2, [pc, #128]	; (801582c <alloc_socket+0xc8>)
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	011b      	lsls	r3, r3, #4
 80157ae:	4413      	add	r3, r2
 80157b0:	330e      	adds	r3, #14
 80157b2:	781b      	ldrb	r3, [r3, #0]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d006      	beq.n	80157c6 <alloc_socket+0x62>
 80157b8:	4b1d      	ldr	r3, [pc, #116]	; (8015830 <alloc_socket+0xcc>)
 80157ba:	f240 220e 	movw	r2, #526	; 0x20e
 80157be:	491d      	ldr	r1, [pc, #116]	; (8015834 <alloc_socket+0xd0>)
 80157c0:	481d      	ldr	r0, [pc, #116]	; (8015838 <alloc_socket+0xd4>)
 80157c2:	f011 f8e9 	bl	8026998 <iprintf>
      sockets[i].rcvevent   = 0;
 80157c6:	4a19      	ldr	r2, [pc, #100]	; (801582c <alloc_socket+0xc8>)
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	011b      	lsls	r3, r3, #4
 80157cc:	4413      	add	r3, r2
 80157ce:	3308      	adds	r3, #8
 80157d0:	2200      	movs	r2, #0
 80157d2:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	781b      	ldrb	r3, [r3, #0]
 80157d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80157dc:	2b10      	cmp	r3, #16
 80157de:	d102      	bne.n	80157e6 <alloc_socket+0x82>
 80157e0:	683b      	ldr	r3, [r7, #0]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d001      	beq.n	80157ea <alloc_socket+0x86>
 80157e6:	2301      	movs	r3, #1
 80157e8:	e000      	b.n	80157ec <alloc_socket+0x88>
 80157ea:	2300      	movs	r3, #0
 80157ec:	b299      	uxth	r1, r3
 80157ee:	4a0f      	ldr	r2, [pc, #60]	; (801582c <alloc_socket+0xc8>)
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	011b      	lsls	r3, r3, #4
 80157f4:	4413      	add	r3, r2
 80157f6:	330a      	adds	r3, #10
 80157f8:	460a      	mov	r2, r1
 80157fa:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 80157fc:	4a0b      	ldr	r2, [pc, #44]	; (801582c <alloc_socket+0xc8>)
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	011b      	lsls	r3, r3, #4
 8015802:	4413      	add	r3, r2
 8015804:	330c      	adds	r3, #12
 8015806:	2200      	movs	r2, #0
 8015808:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	e00a      	b.n	8015824 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 801580e:	68b8      	ldr	r0, [r7, #8]
 8015810:	f00e feb8 	bl	8024584 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	3301      	adds	r3, #1
 8015818:	60fb      	str	r3, [r7, #12]
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	2b03      	cmp	r3, #3
 801581e:	dda9      	ble.n	8015774 <alloc_socket+0x10>
  }
  return -1;
 8015820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015824:	4618      	mov	r0, r3
 8015826:	3710      	adds	r7, #16
 8015828:	46bd      	mov	sp, r7
 801582a:	bd80      	pop	{r7, pc}
 801582c:	2001312c 	.word	0x2001312c
 8015830:	080287d0 	.word	0x080287d0
 8015834:	08028804 	.word	0x08028804
 8015838:	08028824 	.word	0x08028824

0801583c <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 801583c:	b480      	push	{r7}
 801583e:	b085      	sub	sp, #20
 8015840:	af00      	add	r7, sp, #0
 8015842:	60f8      	str	r0, [r7, #12]
 8015844:	60b9      	str	r1, [r7, #8]
 8015846:	607a      	str	r2, [r7, #4]
 8015848:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	68fa      	ldr	r2, [r7, #12]
 801584e:	6852      	ldr	r2, [r2, #4]
 8015850:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	2200      	movs	r2, #0
 8015856:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	681a      	ldr	r2, [r3, #0]
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	2200      	movs	r2, #0
 8015864:	601a      	str	r2, [r3, #0]
  return 1;
 8015866:	2301      	movs	r3, #1
}
 8015868:	4618      	mov	r0, r3
 801586a:	3714      	adds	r7, #20
 801586c:	46bd      	mov	sp, r7
 801586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015872:	4770      	bx	lr

08015874 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b084      	sub	sp, #16
 8015878:	af00      	add	r7, sp, #0
 801587a:	60f8      	str	r0, [r7, #12]
 801587c:	60b9      	str	r1, [r7, #8]
 801587e:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d00d      	beq.n	80158a4 <free_socket_free_elements+0x30>
    if (is_tcp) {
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	2b00      	cmp	r3, #0
 801588c:	d005      	beq.n	801589a <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	4618      	mov	r0, r3
 8015894:	f002 ff92 	bl	80187bc <pbuf_free>
 8015898:	e004      	b.n	80158a4 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	4618      	mov	r0, r3
 80158a0:	f7ff fe78 	bl	8015594 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 80158a4:	68bb      	ldr	r3, [r7, #8]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d002      	beq.n	80158b0 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 80158aa:	68b8      	ldr	r0, [r7, #8]
 80158ac:	f7fd fb30 	bl	8012f10 <netconn_delete>
  }
}
 80158b0:	bf00      	nop
 80158b2:	3710      	adds	r7, #16
 80158b4:	46bd      	mov	sp, r7
 80158b6:	bd80      	pop	{r7, pc}

080158b8 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b086      	sub	sp, #24
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
 80158c0:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 80158c2:	f00e fe51 	bl	8024568 <sys_arch_protect>
 80158c6:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 80158c8:	f107 0308 	add.w	r3, r7, #8
 80158cc:	f107 020c 	add.w	r2, r7, #12
 80158d0:	6839      	ldr	r1, [r7, #0]
 80158d2:	6878      	ldr	r0, [r7, #4]
 80158d4:	f7ff ffb2 	bl	801583c <free_socket_locked>
 80158d8:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 80158da:	6978      	ldr	r0, [r7, #20]
 80158dc:	f00e fe52 	bl	8024584 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 80158e0:	693b      	ldr	r3, [r7, #16]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d006      	beq.n	80158f4 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	f107 0208 	add.w	r2, r7, #8
 80158ec:	4619      	mov	r1, r3
 80158ee:	6838      	ldr	r0, [r7, #0]
 80158f0:	f7ff ffc0 	bl	8015874 <free_socket_free_elements>
  }
}
 80158f4:	bf00      	nop
 80158f6:	3718      	adds	r7, #24
 80158f8:	46bd      	mov	sp, r7
 80158fa:	bd80      	pop	{r7, pc}

080158fc <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 80158fc:	b590      	push	{r4, r7, lr}
 80158fe:	b099      	sub	sp, #100	; 0x64
 8015900:	af00      	add	r7, sp, #0
 8015902:	60f8      	str	r0, [r7, #12]
 8015904:	60b9      	str	r1, [r7, #8]
 8015906:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 8015908:	2300      	movs	r3, #0
 801590a:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 801590c:	68f8      	ldr	r0, [r7, #12]
 801590e:	f7ff ff11 	bl	8015734 <get_socket>
 8015912:	65b8      	str	r0, [r7, #88]	; 0x58
  if (!sock) {
 8015914:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015916:	2b00      	cmp	r3, #0
 8015918:	d102      	bne.n	8015920 <lwip_accept+0x24>
    return -1;
 801591a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801591e:	e0f8      	b.n	8015b12 <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 8015920:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8015928:	4611      	mov	r1, r2
 801592a:	4618      	mov	r0, r3
 801592c:	f7fd fc24 	bl	8013178 <netconn_accept>
 8015930:	4603      	mov	r3, r0
 8015932:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 8015936:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 801593a:	2b00      	cmp	r3, #0
 801593c:	d02c      	beq.n	8015998 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 801593e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	781b      	ldrb	r3, [r3, #0]
 8015944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015948:	2b10      	cmp	r3, #16
 801594a:	d008      	beq.n	801595e <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 801594c:	235f      	movs	r3, #95	; 0x5f
 801594e:	633b      	str	r3, [r7, #48]	; 0x30
 8015950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015952:	2b00      	cmp	r3, #0
 8015954:	d01d      	beq.n	8015992 <lwip_accept+0x96>
 8015956:	4a71      	ldr	r2, [pc, #452]	; (8015b1c <lwip_accept+0x220>)
 8015958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801595a:	6013      	str	r3, [r2, #0]
 801595c:	e019      	b.n	8015992 <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 801595e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8015962:	f113 0f0f 	cmn.w	r3, #15
 8015966:	d108      	bne.n	801597a <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 8015968:	2316      	movs	r3, #22
 801596a:	637b      	str	r3, [r7, #52]	; 0x34
 801596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801596e:	2b00      	cmp	r3, #0
 8015970:	d00f      	beq.n	8015992 <lwip_accept+0x96>
 8015972:	4a6a      	ldr	r2, [pc, #424]	; (8015b1c <lwip_accept+0x220>)
 8015974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015976:	6013      	str	r3, [r2, #0]
 8015978:	e00b      	b.n	8015992 <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 801597a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 801597e:	4618      	mov	r0, r3
 8015980:	f7ff fdea 	bl	8015558 <err_to_errno>
 8015984:	63b8      	str	r0, [r7, #56]	; 0x38
 8015986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015988:	2b00      	cmp	r3, #0
 801598a:	d002      	beq.n	8015992 <lwip_accept+0x96>
 801598c:	4a63      	ldr	r2, [pc, #396]	; (8015b1c <lwip_accept+0x220>)
 801598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015990:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 8015992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015996:	e0bc      	b.n	8015b12 <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 8015998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801599a:	2b00      	cmp	r3, #0
 801599c:	d106      	bne.n	80159ac <lwip_accept+0xb0>
 801599e:	4b60      	ldr	r3, [pc, #384]	; (8015b20 <lwip_accept+0x224>)
 80159a0:	f240 228b 	movw	r2, #651	; 0x28b
 80159a4:	495f      	ldr	r1, [pc, #380]	; (8015b24 <lwip_accept+0x228>)
 80159a6:	4860      	ldr	r0, [pc, #384]	; (8015b28 <lwip_accept+0x22c>)
 80159a8:	f010 fff6 	bl	8026998 <iprintf>

  newsock = alloc_socket(newconn, 1);
 80159ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ae:	2101      	movs	r1, #1
 80159b0:	4618      	mov	r0, r3
 80159b2:	f7ff fed7 	bl	8015764 <alloc_socket>
 80159b6:	6538      	str	r0, [r7, #80]	; 0x50
  if (newsock == -1) {
 80159b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80159ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80159be:	d10e      	bne.n	80159de <lwip_accept+0xe2>
    netconn_delete(newconn);
 80159c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159c2:	4618      	mov	r0, r3
 80159c4:	f7fd faa4 	bl	8012f10 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 80159c8:	2317      	movs	r3, #23
 80159ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80159cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d002      	beq.n	80159d8 <lwip_accept+0xdc>
 80159d2:	4a52      	ldr	r2, [pc, #328]	; (8015b1c <lwip_accept+0x220>)
 80159d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159d6:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 80159d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80159dc:	e099      	b.n	8015b12 <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 80159de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	db02      	blt.n	80159ea <lwip_accept+0xee>
 80159e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80159e6:	2b03      	cmp	r3, #3
 80159e8:	dd06      	ble.n	80159f8 <lwip_accept+0xfc>
 80159ea:	4b4d      	ldr	r3, [pc, #308]	; (8015b20 <lwip_accept+0x224>)
 80159ec:	f44f 7225 	mov.w	r2, #660	; 0x294
 80159f0:	494e      	ldr	r1, [pc, #312]	; (8015b2c <lwip_accept+0x230>)
 80159f2:	484d      	ldr	r0, [pc, #308]	; (8015b28 <lwip_accept+0x22c>)
 80159f4:	f010 ffd0 	bl	8026998 <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 80159f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80159fa:	011b      	lsls	r3, r3, #4
 80159fc:	4a4c      	ldr	r2, [pc, #304]	; (8015b30 <lwip_accept+0x234>)
 80159fe:	4413      	add	r3, r2
 8015a00:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 8015a02:	f00e fdb1 	bl	8024568 <sys_arch_protect>
 8015a06:	64b8      	str	r0, [r7, #72]	; 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 8015a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a0a:	699b      	ldr	r3, [r3, #24]
 8015a0c:	b21b      	sxth	r3, r3
 8015a0e:	43db      	mvns	r3, r3
 8015a10:	b21b      	sxth	r3, r3
 8015a12:	65fb      	str	r3, [r7, #92]	; 0x5c
  newconn->socket = newsock;
 8015a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015a18:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 8015a1a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8015a1c:	f00e fdb2 	bl	8024584 <sys_arch_unprotect>

  if (newconn->callback) {
 8015a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d012      	beq.n	8015a4e <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 8015a28:	4842      	ldr	r0, [pc, #264]	; (8015b34 <lwip_accept+0x238>)
 8015a2a:	f00e fd5b 	bl	80244e4 <sys_mutex_lock>
    while (recvevent > 0) {
 8015a2e:	e008      	b.n	8015a42 <lwip_accept+0x146>
      recvevent--;
 8015a30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a32:	3b01      	subs	r3, #1
 8015a34:	65fb      	str	r3, [r7, #92]	; 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 8015a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a3c:	2200      	movs	r2, #0
 8015a3e:	2100      	movs	r1, #0
 8015a40:	4798      	blx	r3
    while (recvevent > 0) {
 8015a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	dcf3      	bgt.n	8015a30 <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 8015a48:	483a      	ldr	r0, [pc, #232]	; (8015b34 <lwip_accept+0x238>)
 8015a4a:	f00e fd5a 	bl	8024502 <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 8015a4e:	68bb      	ldr	r3, [r7, #8]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d055      	beq.n	8015b00 <lwip_accept+0x204>
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d052      	beq.n	8015b00 <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 8015a5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a5c:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8015a60:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8015a64:	2300      	movs	r3, #0
 8015a66:	f7fd fa6f 	bl	8012f48 <netconn_getaddr>
 8015a6a:	4603      	mov	r3, r0
 8015a6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 8015a70:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d016      	beq.n	8015aa6 <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 8015a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f7fd fa48 	bl	8012f10 <netconn_delete>
      free_socket(nsock, 1);
 8015a80:	2101      	movs	r1, #1
 8015a82:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8015a84:	f7ff ff18 	bl	80158b8 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 8015a88:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f7ff fd63 	bl	8015558 <err_to_errno>
 8015a92:	6478      	str	r0, [r7, #68]	; 0x44
 8015a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d002      	beq.n	8015aa0 <lwip_accept+0x1a4>
 8015a9a:	4a20      	ldr	r2, [pc, #128]	; (8015b1c <lwip_accept+0x220>)
 8015a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a9e:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 8015aa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015aa4:	e035      	b.n	8015b12 <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 8015aa6:	f107 0314 	add.w	r3, r7, #20
 8015aaa:	2210      	movs	r2, #16
 8015aac:	701a      	strb	r2, [r3, #0]
 8015aae:	f107 0314 	add.w	r3, r7, #20
 8015ab2:	2202      	movs	r2, #2
 8015ab4:	705a      	strb	r2, [r3, #1]
 8015ab6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015ab8:	f107 0414 	add.w	r4, r7, #20
 8015abc:	4618      	mov	r0, r3
 8015abe:	f001 fa59 	bl	8016f74 <lwip_htons>
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	8063      	strh	r3, [r4, #2]
 8015ac6:	f107 0314 	add.w	r3, r7, #20
 8015aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015acc:	605a      	str	r2, [r3, #4]
 8015ace:	f107 0314 	add.w	r3, r7, #20
 8015ad2:	3308      	adds	r3, #8
 8015ad4:	2208      	movs	r2, #8
 8015ad6:	2100      	movs	r1, #0
 8015ad8:	4618      	mov	r0, r3
 8015ada:	f010 fead 	bl	8026838 <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	7d3a      	ldrb	r2, [r7, #20]
 8015ae4:	4293      	cmp	r3, r2
 8015ae6:	d903      	bls.n	8015af0 <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 8015ae8:	7d3b      	ldrb	r3, [r7, #20]
 8015aea:	461a      	mov	r2, r3
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	681a      	ldr	r2, [r3, #0]
 8015af4:	f107 0314 	add.w	r3, r7, #20
 8015af8:	4619      	mov	r1, r3
 8015afa:	68b8      	ldr	r0, [r7, #8]
 8015afc:	f010 fe91 	bl	8026822 <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 8015b00:	2300      	movs	r3, #0
 8015b02:	643b      	str	r3, [r7, #64]	; 0x40
 8015b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d002      	beq.n	8015b10 <lwip_accept+0x214>
 8015b0a:	4a04      	ldr	r2, [pc, #16]	; (8015b1c <lwip_accept+0x220>)
 8015b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b0e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 8015b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8015b12:	4618      	mov	r0, r3
 8015b14:	3764      	adds	r7, #100	; 0x64
 8015b16:	46bd      	mov	sp, r7
 8015b18:	bd90      	pop	{r4, r7, pc}
 8015b1a:	bf00      	nop
 8015b1c:	2001a038 	.word	0x2001a038
 8015b20:	080287d0 	.word	0x080287d0
 8015b24:	0802884c 	.word	0x0802884c
 8015b28:	08028824 	.word	0x08028824
 8015b2c:	0802885c 	.word	0x0802885c
 8015b30:	2001312c 	.word	0x2001312c
 8015b34:	20016b3c 	.word	0x20016b3c

08015b38 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b08a      	sub	sp, #40	; 0x28
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	60f8      	str	r0, [r7, #12]
 8015b40:	60b9      	str	r1, [r7, #8]
 8015b42:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 8015b44:	68f8      	ldr	r0, [r7, #12]
 8015b46:	f7ff fdf5 	bl	8015734 <get_socket>
 8015b4a:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 8015b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d102      	bne.n	8015b58 <lwip_bind+0x20>
    return -1;
 8015b52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b56:	e051      	b.n	8015bfc <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	2b10      	cmp	r3, #16
 8015b5c:	d108      	bne.n	8015b70 <lwip_bind+0x38>
 8015b5e:	68bb      	ldr	r3, [r7, #8]
 8015b60:	785b      	ldrb	r3, [r3, #1]
 8015b62:	2b02      	cmp	r3, #2
 8015b64:	d104      	bne.n	8015b70 <lwip_bind+0x38>
 8015b66:	68bb      	ldr	r3, [r7, #8]
 8015b68:	f003 0303 	and.w	r3, r3, #3
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d014      	beq.n	8015b9a <lwip_bind+0x62>
 8015b70:	4b24      	ldr	r3, [pc, #144]	; (8015c04 <lwip_bind+0xcc>)
 8015b72:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8015b76:	4924      	ldr	r1, [pc, #144]	; (8015c08 <lwip_bind+0xd0>)
 8015b78:	4824      	ldr	r0, [pc, #144]	; (8015c0c <lwip_bind+0xd4>)
 8015b7a:	f010 ff0d 	bl	8026998 <iprintf>
 8015b7e:	f06f 000f 	mvn.w	r0, #15
 8015b82:	f7ff fce9 	bl	8015558 <err_to_errno>
 8015b86:	6178      	str	r0, [r7, #20]
 8015b88:	697b      	ldr	r3, [r7, #20]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d002      	beq.n	8015b94 <lwip_bind+0x5c>
 8015b8e:	4a20      	ldr	r2, [pc, #128]	; (8015c10 <lwip_bind+0xd8>)
 8015b90:	697b      	ldr	r3, [r7, #20]
 8015b92:	6013      	str	r3, [r2, #0]
 8015b94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b98:	e030      	b.n	8015bfc <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 8015b9a:	68bb      	ldr	r3, [r7, #8]
 8015b9c:	685b      	ldr	r3, [r3, #4]
 8015b9e:	613b      	str	r3, [r7, #16]
 8015ba0:	68bb      	ldr	r3, [r7, #8]
 8015ba2:	885b      	ldrh	r3, [r3, #2]
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	f001 f9e5 	bl	8016f74 <lwip_htons>
 8015baa:	4603      	mov	r3, r0
 8015bac:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 8015bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015bb4:	f107 0110 	add.w	r1, r7, #16
 8015bb8:	4618      	mov	r0, r3
 8015bba:	f7fd fa17 	bl	8012fec <netconn_bind>
 8015bbe:	4603      	mov	r3, r0
 8015bc0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 8015bc4:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d00e      	beq.n	8015bea <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 8015bcc:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	f7ff fcc1 	bl	8015558 <err_to_errno>
 8015bd6:	61b8      	str	r0, [r7, #24]
 8015bd8:	69bb      	ldr	r3, [r7, #24]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d002      	beq.n	8015be4 <lwip_bind+0xac>
 8015bde:	4a0c      	ldr	r2, [pc, #48]	; (8015c10 <lwip_bind+0xd8>)
 8015be0:	69bb      	ldr	r3, [r7, #24]
 8015be2:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8015be4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015be8:	e008      	b.n	8015bfc <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 8015bea:	2300      	movs	r3, #0
 8015bec:	61fb      	str	r3, [r7, #28]
 8015bee:	69fb      	ldr	r3, [r7, #28]
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d002      	beq.n	8015bfa <lwip_bind+0xc2>
 8015bf4:	4a06      	ldr	r2, [pc, #24]	; (8015c10 <lwip_bind+0xd8>)
 8015bf6:	69fb      	ldr	r3, [r7, #28]
 8015bf8:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8015bfa:	2300      	movs	r3, #0
}
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	3728      	adds	r7, #40	; 0x28
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bd80      	pop	{r7, pc}
 8015c04:	080287d0 	.word	0x080287d0
 8015c08:	08028874 	.word	0x08028874
 8015c0c:	08028824 	.word	0x08028824
 8015c10:	2001a038 	.word	0x2001a038

08015c14 <lwip_close>:

int
lwip_close(int s)
{
 8015c14:	b580      	push	{r7, lr}
 8015c16:	b086      	sub	sp, #24
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 8015c20:	6878      	ldr	r0, [r7, #4]
 8015c22:	f7ff fd87 	bl	8015734 <get_socket>
 8015c26:	6138      	str	r0, [r7, #16]
  if (!sock) {
 8015c28:	693b      	ldr	r3, [r7, #16]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d102      	bne.n	8015c34 <lwip_close+0x20>
    return -1;
 8015c2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c32:	e039      	b.n	8015ca8 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 8015c34:	693b      	ldr	r3, [r7, #16]
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d00b      	beq.n	8015c54 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 8015c3c:	693b      	ldr	r3, [r7, #16]
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	781b      	ldrb	r3, [r3, #0]
 8015c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015c46:	2b10      	cmp	r3, #16
 8015c48:	bf0c      	ite	eq
 8015c4a:	2301      	moveq	r3, #1
 8015c4c:	2300      	movne	r3, #0
 8015c4e:	b2db      	uxtb	r3, r3
 8015c50:	617b      	str	r3, [r7, #20]
 8015c52:	e00a      	b.n	8015c6a <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 8015c54:	693b      	ldr	r3, [r7, #16]
 8015c56:	685b      	ldr	r3, [r3, #4]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d006      	beq.n	8015c6a <lwip_close+0x56>
 8015c5c:	4b14      	ldr	r3, [pc, #80]	; (8015cb0 <lwip_close+0x9c>)
 8015c5e:	f44f 7245 	mov.w	r2, #788	; 0x314
 8015c62:	4914      	ldr	r1, [pc, #80]	; (8015cb4 <lwip_close+0xa0>)
 8015c64:	4814      	ldr	r0, [pc, #80]	; (8015cb8 <lwip_close+0xa4>)
 8015c66:	f010 fe97 	bl	8026998 <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 8015c6a:	693b      	ldr	r3, [r7, #16]
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	4618      	mov	r0, r3
 8015c70:	f7fd f92a 	bl	8012ec8 <netconn_prepare_delete>
 8015c74:	4603      	mov	r3, r0
 8015c76:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d00e      	beq.n	8015c9e <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 8015c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c84:	4618      	mov	r0, r3
 8015c86:	f7ff fc67 	bl	8015558 <err_to_errno>
 8015c8a:	60b8      	str	r0, [r7, #8]
 8015c8c:	68bb      	ldr	r3, [r7, #8]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d002      	beq.n	8015c98 <lwip_close+0x84>
 8015c92:	4a0a      	ldr	r2, [pc, #40]	; (8015cbc <lwip_close+0xa8>)
 8015c94:	68bb      	ldr	r3, [r7, #8]
 8015c96:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8015c98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c9c:	e004      	b.n	8015ca8 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 8015c9e:	6979      	ldr	r1, [r7, #20]
 8015ca0:	6938      	ldr	r0, [r7, #16]
 8015ca2:	f7ff fe09 	bl	80158b8 <free_socket>
  set_errno(0);
  return 0;
 8015ca6:	2300      	movs	r3, #0
}
 8015ca8:	4618      	mov	r0, r3
 8015caa:	3718      	adds	r7, #24
 8015cac:	46bd      	mov	sp, r7
 8015cae:	bd80      	pop	{r7, pc}
 8015cb0:	080287d0 	.word	0x080287d0
 8015cb4:	08028890 	.word	0x08028890
 8015cb8:	08028824 	.word	0x08028824
 8015cbc:	2001a038 	.word	0x2001a038

08015cc0 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 8015cc0:	b580      	push	{r7, lr}
 8015cc2:	b08c      	sub	sp, #48	; 0x30
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	60f8      	str	r0, [r7, #12]
 8015cc8:	60b9      	str	r1, [r7, #8]
 8015cca:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 8015ccc:	68f8      	ldr	r0, [r7, #12]
 8015cce:	f7ff fd31 	bl	8015734 <get_socket>
 8015cd2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (!sock) {
 8015cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d102      	bne.n	8015ce0 <lwip_connect+0x20>
    return -1;
 8015cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015cde:	e062      	b.n	8015da6 <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 8015ce0:	68bb      	ldr	r3, [r7, #8]
 8015ce2:	785b      	ldrb	r3, [r3, #1]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d108      	bne.n	8015cfa <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 8015ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	4618      	mov	r0, r3
 8015cee:	f7fd f9ed 	bl	80130cc <netconn_disconnect>
 8015cf2:	4603      	mov	r3, r0
 8015cf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015cf8:	e039      	b.n	8015d6e <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	2b10      	cmp	r3, #16
 8015cfe:	d10c      	bne.n	8015d1a <lwip_connect+0x5a>
 8015d00:	68bb      	ldr	r3, [r7, #8]
 8015d02:	785b      	ldrb	r3, [r3, #1]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d003      	beq.n	8015d10 <lwip_connect+0x50>
 8015d08:	68bb      	ldr	r3, [r7, #8]
 8015d0a:	785b      	ldrb	r3, [r3, #1]
 8015d0c:	2b02      	cmp	r3, #2
 8015d0e:	d104      	bne.n	8015d1a <lwip_connect+0x5a>
 8015d10:	68bb      	ldr	r3, [r7, #8]
 8015d12:	f003 0303 	and.w	r3, r3, #3
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d014      	beq.n	8015d44 <lwip_connect+0x84>
 8015d1a:	4b25      	ldr	r3, [pc, #148]	; (8015db0 <lwip_connect+0xf0>)
 8015d1c:	f240 3249 	movw	r2, #841	; 0x349
 8015d20:	4924      	ldr	r1, [pc, #144]	; (8015db4 <lwip_connect+0xf4>)
 8015d22:	4825      	ldr	r0, [pc, #148]	; (8015db8 <lwip_connect+0xf8>)
 8015d24:	f010 fe38 	bl	8026998 <iprintf>
 8015d28:	f06f 000f 	mvn.w	r0, #15
 8015d2c:	f7ff fc14 	bl	8015558 <err_to_errno>
 8015d30:	6238      	str	r0, [r7, #32]
 8015d32:	6a3b      	ldr	r3, [r7, #32]
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d002      	beq.n	8015d3e <lwip_connect+0x7e>
 8015d38:	4a20      	ldr	r2, [pc, #128]	; (8015dbc <lwip_connect+0xfc>)
 8015d3a:	6a3b      	ldr	r3, [r7, #32]
 8015d3c:	6013      	str	r3, [r2, #0]
 8015d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d42:	e030      	b.n	8015da6 <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 8015d44:	68bb      	ldr	r3, [r7, #8]
 8015d46:	685b      	ldr	r3, [r3, #4]
 8015d48:	617b      	str	r3, [r7, #20]
 8015d4a:	68bb      	ldr	r3, [r7, #8]
 8015d4c:	885b      	ldrh	r3, [r3, #2]
 8015d4e:	4618      	mov	r0, r3
 8015d50:	f001 f910 	bl	8016f74 <lwip_htons>
 8015d54:	4603      	mov	r3, r0
 8015d56:	84fb      	strh	r3, [r7, #38]	; 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 8015d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015d5e:	f107 0114 	add.w	r1, r7, #20
 8015d62:	4618      	mov	r0, r3
 8015d64:	f7fd f97a 	bl	801305c <netconn_connect>
 8015d68:	4603      	mov	r3, r0
 8015d6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (err != ERR_OK) {
 8015d6e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d00e      	beq.n	8015d94 <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 8015d76:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	f7ff fbec 	bl	8015558 <err_to_errno>
 8015d80:	61b8      	str	r0, [r7, #24]
 8015d82:	69bb      	ldr	r3, [r7, #24]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d002      	beq.n	8015d8e <lwip_connect+0xce>
 8015d88:	4a0c      	ldr	r2, [pc, #48]	; (8015dbc <lwip_connect+0xfc>)
 8015d8a:	69bb      	ldr	r3, [r7, #24]
 8015d8c:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8015d8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d92:	e008      	b.n	8015da6 <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 8015d94:	2300      	movs	r3, #0
 8015d96:	61fb      	str	r3, [r7, #28]
 8015d98:	69fb      	ldr	r3, [r7, #28]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d002      	beq.n	8015da4 <lwip_connect+0xe4>
 8015d9e:	4a07      	ldr	r2, [pc, #28]	; (8015dbc <lwip_connect+0xfc>)
 8015da0:	69fb      	ldr	r3, [r7, #28]
 8015da2:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8015da4:	2300      	movs	r3, #0
}
 8015da6:	4618      	mov	r0, r3
 8015da8:	3730      	adds	r7, #48	; 0x30
 8015daa:	46bd      	mov	sp, r7
 8015dac:	bd80      	pop	{r7, pc}
 8015dae:	bf00      	nop
 8015db0:	080287d0 	.word	0x080287d0
 8015db4:	080288a8 	.word	0x080288a8
 8015db8:	08028824 	.word	0x08028824
 8015dbc:	2001a038 	.word	0x2001a038

08015dc0 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b088      	sub	sp, #32
 8015dc4:	af00      	add	r7, sp, #0
 8015dc6:	6078      	str	r0, [r7, #4]
 8015dc8:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 8015dca:	6878      	ldr	r0, [r7, #4]
 8015dcc:	f7ff fcb2 	bl	8015734 <get_socket>
 8015dd0:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 8015dd2:	69fb      	ldr	r3, [r7, #28]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d102      	bne.n	8015dde <lwip_listen+0x1e>
    return -1;
 8015dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015ddc:	e03e      	b.n	8015e5c <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 8015dde:	683b      	ldr	r3, [r7, #0]
 8015de0:	2bfe      	cmp	r3, #254	; 0xfe
 8015de2:	dc03      	bgt.n	8015dec <lwip_listen+0x2c>
 8015de4:	683b      	ldr	r3, [r7, #0]
 8015de6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015dea:	e000      	b.n	8015dee <lwip_listen+0x2e>
 8015dec:	23ff      	movs	r3, #255	; 0xff
 8015dee:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 8015df0:	69fb      	ldr	r3, [r7, #28]
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	683a      	ldr	r2, [r7, #0]
 8015df6:	b2d2      	uxtb	r2, r2
 8015df8:	4611      	mov	r1, r2
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	f7fd f990 	bl	8013120 <netconn_listen_with_backlog>
 8015e00:	4603      	mov	r3, r0
 8015e02:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 8015e04:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d01e      	beq.n	8015e4a <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 8015e0c:	69fb      	ldr	r3, [r7, #28]
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	781b      	ldrb	r3, [r3, #0]
 8015e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015e16:	2b10      	cmp	r3, #16
 8015e18:	d008      	beq.n	8015e2c <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 8015e1a:	235f      	movs	r3, #95	; 0x5f
 8015e1c:	60fb      	str	r3, [r7, #12]
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d00f      	beq.n	8015e44 <lwip_listen+0x84>
 8015e24:	4a0f      	ldr	r2, [pc, #60]	; (8015e64 <lwip_listen+0xa4>)
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	6013      	str	r3, [r2, #0]
 8015e2a:	e00b      	b.n	8015e44 <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 8015e2c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015e30:	4618      	mov	r0, r3
 8015e32:	f7ff fb91 	bl	8015558 <err_to_errno>
 8015e36:	6138      	str	r0, [r7, #16]
 8015e38:	693b      	ldr	r3, [r7, #16]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d002      	beq.n	8015e44 <lwip_listen+0x84>
 8015e3e:	4a09      	ldr	r2, [pc, #36]	; (8015e64 <lwip_listen+0xa4>)
 8015e40:	693b      	ldr	r3, [r7, #16]
 8015e42:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 8015e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e48:	e008      	b.n	8015e5c <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	617b      	str	r3, [r7, #20]
 8015e4e:	697b      	ldr	r3, [r7, #20]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d002      	beq.n	8015e5a <lwip_listen+0x9a>
 8015e54:	4a03      	ldr	r2, [pc, #12]	; (8015e64 <lwip_listen+0xa4>)
 8015e56:	697b      	ldr	r3, [r7, #20]
 8015e58:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 8015e5a:	2300      	movs	r3, #0
}
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	3720      	adds	r7, #32
 8015e60:	46bd      	mov	sp, r7
 8015e62:	bd80      	pop	{r7, pc}
 8015e64:	2001a038 	.word	0x2001a038

08015e68 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b08c      	sub	sp, #48	; 0x30
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	60f8      	str	r0, [r7, #12]
 8015e70:	60b9      	str	r1, [r7, #8]
 8015e72:	607a      	str	r2, [r7, #4]
 8015e74:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 8015e76:	2308      	movs	r3, #8
 8015e78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	db01      	blt.n	8015e8a <lwip_recv_tcp+0x22>
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	e001      	b.n	8015e8e <lwip_recv_tcp+0x26>
 8015e8a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015e8e:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d106      	bne.n	8015ea4 <lwip_recv_tcp+0x3c>
 8015e96:	4b74      	ldr	r3, [pc, #464]	; (8016068 <lwip_recv_tcp+0x200>)
 8015e98:	f240 329e 	movw	r2, #926	; 0x39e
 8015e9c:	4973      	ldr	r1, [pc, #460]	; (801606c <lwip_recv_tcp+0x204>)
 8015e9e:	4874      	ldr	r0, [pc, #464]	; (8016070 <lwip_recv_tcp+0x208>)
 8015ea0:	f010 fd7a 	bl	8026998 <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	781b      	ldrb	r3, [r3, #0]
 8015eaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015eae:	2b10      	cmp	r3, #16
 8015eb0:	d006      	beq.n	8015ec0 <lwip_recv_tcp+0x58>
 8015eb2:	4b6d      	ldr	r3, [pc, #436]	; (8016068 <lwip_recv_tcp+0x200>)
 8015eb4:	f240 329f 	movw	r2, #927	; 0x39f
 8015eb8:	496e      	ldr	r1, [pc, #440]	; (8016074 <lwip_recv_tcp+0x20c>)
 8015eba:	486d      	ldr	r0, [pc, #436]	; (8016070 <lwip_recv_tcp+0x208>)
 8015ebc:	f010 fd6c 	bl	8026998 <iprintf>

  if (flags & MSG_DONTWAIT) {
 8015ec0:	683b      	ldr	r3, [r7, #0]
 8015ec2:	f003 0308 	and.w	r3, r3, #8
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d005      	beq.n	8015ed6 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 8015eca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015ece:	f043 0304 	orr.w	r3, r3, #4
 8015ed2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	685b      	ldr	r3, [r3, #4]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d003      	beq.n	8015ee6 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	685b      	ldr	r3, [r3, #4]
 8015ee2:	617b      	str	r3, [r7, #20]
 8015ee4:	e036      	b.n	8015f54 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8015eee:	f107 0114 	add.w	r1, r7, #20
 8015ef2:	4618      	mov	r0, r3
 8015ef4:	f7fd fb76 	bl	80135e4 <netconn_recv_tcp_pbuf_flags>
 8015ef8:	4603      	mov	r3, r0
 8015efa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 8015efe:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d019      	beq.n	8015f3a <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 8015f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	f300 808d 	bgt.w	8016028 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 8015f0e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8015f12:	4618      	mov	r0, r3
 8015f14:	f7ff fb20 	bl	8015558 <err_to_errno>
 8015f18:	61f8      	str	r0, [r7, #28]
 8015f1a:	69fb      	ldr	r3, [r7, #28]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d002      	beq.n	8015f26 <lwip_recv_tcp+0xbe>
 8015f20:	4a55      	ldr	r2, [pc, #340]	; (8016078 <lwip_recv_tcp+0x210>)
 8015f22:	69fb      	ldr	r3, [r7, #28]
 8015f24:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 8015f26:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8015f2a:	f113 0f0f 	cmn.w	r3, #15
 8015f2e:	d101      	bne.n	8015f34 <lwip_recv_tcp+0xcc>
          return 0;
 8015f30:	2300      	movs	r3, #0
 8015f32:	e094      	b.n	801605e <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 8015f34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015f38:	e091      	b.n	801605e <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 8015f3a:	697b      	ldr	r3, [r7, #20]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d106      	bne.n	8015f4e <lwip_recv_tcp+0xe6>
 8015f40:	4b49      	ldr	r3, [pc, #292]	; (8016068 <lwip_recv_tcp+0x200>)
 8015f42:	f240 32c5 	movw	r2, #965	; 0x3c5
 8015f46:	494d      	ldr	r1, [pc, #308]	; (801607c <lwip_recv_tcp+0x214>)
 8015f48:	4849      	ldr	r0, [pc, #292]	; (8016070 <lwip_recv_tcp+0x208>)
 8015f4a:	f010 fd25 	bl	8026998 <iprintf>
      sock->lastdata.pbuf = p;
 8015f4e:	697a      	ldr	r2, [r7, #20]
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 8015f54:	697b      	ldr	r3, [r7, #20]
 8015f56:	891b      	ldrh	r3, [r3, #8]
 8015f58:	461a      	mov	r2, r3
 8015f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f5c:	4293      	cmp	r3, r2
 8015f5e:	dd03      	ble.n	8015f68 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 8015f60:	697b      	ldr	r3, [r7, #20]
 8015f62:	891b      	ldrh	r3, [r3, #8]
 8015f64:	847b      	strh	r3, [r7, #34]	; 0x22
 8015f66:	e001      	b.n	8015f6c <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 8015f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f6a:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 8015f6c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f70:	4413      	add	r3, r2
 8015f72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015f74:	429a      	cmp	r2, r3
 8015f76:	dd03      	ble.n	8015f80 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 8015f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f7a:	b29b      	uxth	r3, r3
 8015f7c:	43db      	mvns	r3, r3
 8015f7e:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 8015f80:	6978      	ldr	r0, [r7, #20]
 8015f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f84:	68ba      	ldr	r2, [r7, #8]
 8015f86:	18d1      	adds	r1, r2, r3
 8015f88:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	f002 fe1c 	bl	8018bc8 <pbuf_copy_partial>

    recvd += copylen;
 8015f90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015f94:	4413      	add	r3, r2
 8015f96:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 8015f98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f9c:	429a      	cmp	r2, r3
 8015f9e:	da06      	bge.n	8015fae <lwip_recv_tcp+0x146>
 8015fa0:	4b31      	ldr	r3, [pc, #196]	; (8016068 <lwip_recv_tcp+0x200>)
 8015fa2:	f240 32dd 	movw	r2, #989	; 0x3dd
 8015fa6:	4936      	ldr	r1, [pc, #216]	; (8016080 <lwip_recv_tcp+0x218>)
 8015fa8:	4831      	ldr	r0, [pc, #196]	; (8016070 <lwip_recv_tcp+0x208>)
 8015faa:	f010 fcf5 	bl	8026998 <iprintf>
    recv_left -= copylen;
 8015fae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015fb2:	1ad3      	subs	r3, r2, r3
 8015fb4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 8015fb6:	683b      	ldr	r3, [r7, #0]
 8015fb8:	f003 0301 	and.w	r3, r3, #1
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d123      	bne.n	8016008 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 8015fc0:	697b      	ldr	r3, [r7, #20]
 8015fc2:	891b      	ldrh	r3, [r3, #8]
 8015fc4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015fc6:	429a      	cmp	r2, r3
 8015fc8:	d906      	bls.n	8015fd8 <lwip_recv_tcp+0x170>
 8015fca:	4b27      	ldr	r3, [pc, #156]	; (8016068 <lwip_recv_tcp+0x200>)
 8015fcc:	f240 32e3 	movw	r2, #995	; 0x3e3
 8015fd0:	492c      	ldr	r1, [pc, #176]	; (8016084 <lwip_recv_tcp+0x21c>)
 8015fd2:	4827      	ldr	r0, [pc, #156]	; (8016070 <lwip_recv_tcp+0x208>)
 8015fd4:	f010 fce0 	bl	8026998 <iprintf>
      if (p->tot_len - copylen > 0) {
 8015fd8:	697b      	ldr	r3, [r7, #20]
 8015fda:	891b      	ldrh	r3, [r3, #8]
 8015fdc:	461a      	mov	r2, r3
 8015fde:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015fe0:	1ad3      	subs	r3, r2, r3
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	dd09      	ble.n	8015ffa <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 8015fe6:	697b      	ldr	r3, [r7, #20]
 8015fe8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015fea:	4611      	mov	r1, r2
 8015fec:	4618      	mov	r0, r3
 8015fee:	f002 fbb2 	bl	8018756 <pbuf_free_header>
 8015ff2:	4602      	mov	r2, r0
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	605a      	str	r2, [r3, #4]
 8015ff8:	e006      	b.n	8016008 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	2200      	movs	r2, #0
 8015ffe:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 8016000:	697b      	ldr	r3, [r7, #20]
 8016002:	4618      	mov	r0, r3
 8016004:	f002 fbda 	bl	80187bc <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 8016008:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801600c:	f043 0314 	orr.w	r3, r3, #20
 8016010:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 8016014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016016:	2b00      	cmp	r3, #0
 8016018:	dd08      	ble.n	801602c <lwip_recv_tcp+0x1c4>
 801601a:	683b      	ldr	r3, [r7, #0]
 801601c:	f003 0301 	and.w	r3, r3, #1
 8016020:	2b00      	cmp	r3, #0
 8016022:	f43f af58 	beq.w	8015ed6 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 8016026:	e001      	b.n	801602c <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 8016028:	bf00      	nop
 801602a:	e000      	b.n	801602e <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 801602c:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 801602e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016030:	2b00      	cmp	r3, #0
 8016032:	dd0b      	ble.n	801604c <lwip_recv_tcp+0x1e4>
 8016034:	683b      	ldr	r3, [r7, #0]
 8016036:	f003 0301 	and.w	r3, r3, #1
 801603a:	2b00      	cmp	r3, #0
 801603c:	d106      	bne.n	801604c <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016044:	4611      	mov	r1, r2
 8016046:	4618      	mov	r0, r3
 8016048:	f7fd fa1a 	bl	8013480 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 801604c:	2300      	movs	r3, #0
 801604e:	61bb      	str	r3, [r7, #24]
 8016050:	69bb      	ldr	r3, [r7, #24]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d002      	beq.n	801605c <lwip_recv_tcp+0x1f4>
 8016056:	4a08      	ldr	r2, [pc, #32]	; (8016078 <lwip_recv_tcp+0x210>)
 8016058:	69bb      	ldr	r3, [r7, #24]
 801605a:	6013      	str	r3, [r2, #0]
  return recvd;
 801605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801605e:	4618      	mov	r0, r3
 8016060:	3730      	adds	r7, #48	; 0x30
 8016062:	46bd      	mov	sp, r7
 8016064:	bd80      	pop	{r7, pc}
 8016066:	bf00      	nop
 8016068:	080287d0 	.word	0x080287d0
 801606c:	080288c8 	.word	0x080288c8
 8016070:	08028824 	.word	0x08028824
 8016074:	080288d8 	.word	0x080288d8
 8016078:	2001a038 	.word	0x2001a038
 801607c:	080288fc 	.word	0x080288fc
 8016080:	08028908 	.word	0x08028908
 8016084:	08028930 	.word	0x08028930

08016088 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 8016088:	b590      	push	{r4, r7, lr}
 801608a:	b08b      	sub	sp, #44	; 0x2c
 801608c:	af00      	add	r7, sp, #0
 801608e:	60f8      	str	r0, [r7, #12]
 8016090:	60b9      	str	r1, [r7, #8]
 8016092:	603b      	str	r3, [r7, #0]
 8016094:	4613      	mov	r3, r2
 8016096:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 8016098:	2300      	movs	r3, #0
 801609a:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 801609c:	68bb      	ldr	r3, [r7, #8]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d106      	bne.n	80160b0 <lwip_sock_make_addr+0x28>
 80160a2:	4b2b      	ldr	r3, [pc, #172]	; (8016150 <lwip_sock_make_addr+0xc8>)
 80160a4:	f240 4207 	movw	r2, #1031	; 0x407
 80160a8:	492a      	ldr	r1, [pc, #168]	; (8016154 <lwip_sock_make_addr+0xcc>)
 80160aa:	482b      	ldr	r0, [pc, #172]	; (8016158 <lwip_sock_make_addr+0xd0>)
 80160ac:	f010 fc74 	bl	8026998 <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 80160b0:	683b      	ldr	r3, [r7, #0]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d106      	bne.n	80160c4 <lwip_sock_make_addr+0x3c>
 80160b6:	4b26      	ldr	r3, [pc, #152]	; (8016150 <lwip_sock_make_addr+0xc8>)
 80160b8:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80160bc:	4927      	ldr	r1, [pc, #156]	; (801615c <lwip_sock_make_addr+0xd4>)
 80160be:	4826      	ldr	r0, [pc, #152]	; (8016158 <lwip_sock_make_addr+0xd0>)
 80160c0:	f010 fc6a 	bl	8026998 <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 80160c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d106      	bne.n	80160d8 <lwip_sock_make_addr+0x50>
 80160ca:	4b21      	ldr	r3, [pc, #132]	; (8016150 <lwip_sock_make_addr+0xc8>)
 80160cc:	f240 4209 	movw	r2, #1033	; 0x409
 80160d0:	4923      	ldr	r1, [pc, #140]	; (8016160 <lwip_sock_make_addr+0xd8>)
 80160d2:	4821      	ldr	r0, [pc, #132]	; (8016158 <lwip_sock_make_addr+0xd0>)
 80160d4:	f010 fc60 	bl	8026998 <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 80160d8:	f107 0314 	add.w	r3, r7, #20
 80160dc:	2210      	movs	r2, #16
 80160de:	701a      	strb	r2, [r3, #0]
 80160e0:	f107 0314 	add.w	r3, r7, #20
 80160e4:	2202      	movs	r2, #2
 80160e6:	705a      	strb	r2, [r3, #1]
 80160e8:	f107 0414 	add.w	r4, r7, #20
 80160ec:	88fb      	ldrh	r3, [r7, #6]
 80160ee:	4618      	mov	r0, r3
 80160f0:	f000 ff40 	bl	8016f74 <lwip_htons>
 80160f4:	4603      	mov	r3, r0
 80160f6:	8063      	strh	r3, [r4, #2]
 80160f8:	f107 0314 	add.w	r3, r7, #20
 80160fc:	68ba      	ldr	r2, [r7, #8]
 80160fe:	6812      	ldr	r2, [r2, #0]
 8016100:	605a      	str	r2, [r3, #4]
 8016102:	f107 0314 	add.w	r3, r7, #20
 8016106:	3308      	adds	r3, #8
 8016108:	2208      	movs	r2, #8
 801610a:	2100      	movs	r1, #0
 801610c:	4618      	mov	r0, r3
 801610e:	f010 fb93 	bl	8026838 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 8016112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	7d3a      	ldrb	r2, [r7, #20]
 8016118:	4293      	cmp	r3, r2
 801611a:	d202      	bcs.n	8016122 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 801611c:	2301      	movs	r3, #1
 801611e:	627b      	str	r3, [r7, #36]	; 0x24
 8016120:	e008      	b.n	8016134 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 8016122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	7d3a      	ldrb	r2, [r7, #20]
 8016128:	4293      	cmp	r3, r2
 801612a:	d903      	bls.n	8016134 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 801612c:	7d3b      	ldrb	r3, [r7, #20]
 801612e:	461a      	mov	r2, r3
 8016130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016132:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 8016134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016136:	681a      	ldr	r2, [r3, #0]
 8016138:	f107 0314 	add.w	r3, r7, #20
 801613c:	4619      	mov	r1, r3
 801613e:	6838      	ldr	r0, [r7, #0]
 8016140:	f010 fb6f 	bl	8026822 <memcpy>
  return truncated;
 8016144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016146:	4618      	mov	r0, r3
 8016148:	372c      	adds	r7, #44	; 0x2c
 801614a:	46bd      	mov	sp, r7
 801614c:	bd90      	pop	{r4, r7, pc}
 801614e:	bf00      	nop
 8016150:	080287d0 	.word	0x080287d0
 8016154:	08028940 	.word	0x08028940
 8016158:	08028824 	.word	0x08028824
 801615c:	08028954 	.word	0x08028954
 8016160:	08028964 	.word	0x08028964

08016164 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 8016164:	b580      	push	{r7, lr}
 8016166:	b088      	sub	sp, #32
 8016168:	af02      	add	r7, sp, #8
 801616a:	60f8      	str	r0, [r7, #12]
 801616c:	60b9      	str	r1, [r7, #8]
 801616e:	607a      	str	r2, [r7, #4]
 8016170:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	2b00      	cmp	r3, #0
 8016176:	d101      	bne.n	801617c <lwip_recv_tcp_from+0x18>
    return 0;
 8016178:	2300      	movs	r3, #0
 801617a:	e021      	b.n	80161c0 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 801617c:	68bb      	ldr	r3, [r7, #8]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d01d      	beq.n	80161be <lwip_recv_tcp_from+0x5a>
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d01a      	beq.n	80161be <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	6818      	ldr	r0, [r3, #0]
 801618c:	f107 0216 	add.w	r2, r7, #22
 8016190:	f107 0110 	add.w	r1, r7, #16
 8016194:	2300      	movs	r3, #0
 8016196:	f7fc fed7 	bl	8012f48 <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 801619a:	68bb      	ldr	r3, [r7, #8]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d00e      	beq.n	80161be <lwip_recv_tcp_from+0x5a>
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d00b      	beq.n	80161be <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	6818      	ldr	r0, [r3, #0]
 80161aa:	8afa      	ldrh	r2, [r7, #22]
 80161ac:	f107 0110 	add.w	r1, r7, #16
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	9300      	str	r3, [sp, #0]
 80161b4:	68bb      	ldr	r3, [r7, #8]
 80161b6:	f7ff ff67 	bl	8016088 <lwip_sock_make_addr>
 80161ba:	4603      	mov	r3, r0
 80161bc:	e000      	b.n	80161c0 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 80161be:	2300      	movs	r3, #0
}
 80161c0:	4618      	mov	r0, r3
 80161c2:	3718      	adds	r7, #24
 80161c4:	46bd      	mov	sp, r7
 80161c6:	bd80      	pop	{r7, pc}

080161c8 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 80161c8:	b590      	push	{r4, r7, lr}
 80161ca:	b08d      	sub	sp, #52	; 0x34
 80161cc:	af02      	add	r7, sp, #8
 80161ce:	60f8      	str	r0, [r7, #12]
 80161d0:	60b9      	str	r1, [r7, #8]
 80161d2:	607a      	str	r2, [r7, #4]
 80161d4:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	689b      	ldr	r3, [r3, #8]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d10d      	bne.n	80161fa <lwip_recvfrom_udp_raw+0x32>
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	68db      	ldr	r3, [r3, #12]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	dd09      	ble.n	80161fa <lwip_recvfrom_udp_raw+0x32>
 80161e6:	4b5e      	ldr	r3, [pc, #376]	; (8016360 <lwip_recvfrom_udp_raw+0x198>)
 80161e8:	f240 4249 	movw	r2, #1097	; 0x449
 80161ec:	495d      	ldr	r1, [pc, #372]	; (8016364 <lwip_recvfrom_udp_raw+0x19c>)
 80161ee:	485e      	ldr	r0, [pc, #376]	; (8016368 <lwip_recvfrom_udp_raw+0x1a0>)
 80161f0:	f010 fbd2 	bl	8026998 <iprintf>
 80161f4:	f06f 030f 	mvn.w	r3, #15
 80161f8:	e0ad      	b.n	8016356 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 80161fa:	68bb      	ldr	r3, [r7, #8]
 80161fc:	f003 0308 	and.w	r3, r3, #8
 8016200:	2b00      	cmp	r3, #0
 8016202:	d003      	beq.n	801620c <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 8016204:	2304      	movs	r3, #4
 8016206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801620a:	e002      	b.n	8016212 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 801620c:	2300      	movs	r3, #0
 801620e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	685b      	ldr	r3, [r3, #4]
 8016216:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 8016218:	693b      	ldr	r3, [r7, #16]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d11e      	bne.n	801625c <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016226:	f107 0110 	add.w	r1, r7, #16
 801622a:	4618      	mov	r0, r3
 801622c:	f7fd fa06 	bl	801363c <netconn_recv_udp_raw_netbuf_flags>
 8016230:	4603      	mov	r3, r0
 8016232:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 8016234:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d002      	beq.n	8016242 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 801623c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016240:	e089      	b.n	8016356 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8016242:	693b      	ldr	r3, [r7, #16]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d106      	bne.n	8016256 <lwip_recvfrom_udp_raw+0x8e>
 8016248:	4b45      	ldr	r3, [pc, #276]	; (8016360 <lwip_recvfrom_udp_raw+0x198>)
 801624a:	f240 425e 	movw	r2, #1118	; 0x45e
 801624e:	4947      	ldr	r1, [pc, #284]	; (801636c <lwip_recvfrom_udp_raw+0x1a4>)
 8016250:	4845      	ldr	r0, [pc, #276]	; (8016368 <lwip_recvfrom_udp_raw+0x1a0>)
 8016252:	f010 fba1 	bl	8026998 <iprintf>
    sock->lastdata.netbuf = buf;
 8016256:	693a      	ldr	r2, [r7, #16]
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 801625c:	693b      	ldr	r3, [r7, #16]
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	891b      	ldrh	r3, [r3, #8]
 8016262:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 8016264:	2300      	movs	r3, #0
 8016266:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 8016268:	2300      	movs	r3, #0
 801626a:	61fb      	str	r3, [r7, #28]
 801626c:	e029      	b.n	80162c2 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 801626e:	8b3a      	ldrh	r2, [r7, #24]
 8016270:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016272:	1ad3      	subs	r3, r2, r3
 8016274:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	689a      	ldr	r2, [r3, #8]
 801627a:	69fb      	ldr	r3, [r7, #28]
 801627c:	00db      	lsls	r3, r3, #3
 801627e:	4413      	add	r3, r2
 8016280:	685a      	ldr	r2, [r3, #4]
 8016282:	8afb      	ldrh	r3, [r7, #22]
 8016284:	429a      	cmp	r2, r3
 8016286:	d902      	bls.n	801628e <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 8016288:	8afb      	ldrh	r3, [r7, #22]
 801628a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801628c:	e006      	b.n	801629c <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	689a      	ldr	r2, [r3, #8]
 8016292:	69fb      	ldr	r3, [r7, #28]
 8016294:	00db      	lsls	r3, r3, #3
 8016296:	4413      	add	r3, r2
 8016298:	685b      	ldr	r3, [r3, #4]
 801629a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 801629c:	693b      	ldr	r3, [r7, #16]
 801629e:	6818      	ldr	r0, [r3, #0]
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	689a      	ldr	r2, [r3, #8]
 80162a4:	69fb      	ldr	r3, [r7, #28]
 80162a6:	00db      	lsls	r3, r3, #3
 80162a8:	4413      	add	r3, r2
 80162aa:	6819      	ldr	r1, [r3, #0]
 80162ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80162ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80162b0:	f002 fc8a 	bl	8018bc8 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 80162b4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80162b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80162b8:	4413      	add	r3, r2
 80162ba:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 80162bc:	69fb      	ldr	r3, [r7, #28]
 80162be:	3301      	adds	r3, #1
 80162c0:	61fb      	str	r3, [r7, #28]
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	68db      	ldr	r3, [r3, #12]
 80162c6:	69fa      	ldr	r2, [r7, #28]
 80162c8:	429a      	cmp	r2, r3
 80162ca:	da03      	bge.n	80162d4 <lwip_recvfrom_udp_raw+0x10c>
 80162cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80162ce:	8b3b      	ldrh	r3, [r7, #24]
 80162d0:	429a      	cmp	r2, r3
 80162d2:	d3cc      	bcc.n	801626e <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d01a      	beq.n	8016312 <lwip_recvfrom_udp_raw+0x14a>
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	685b      	ldr	r3, [r3, #4]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d016      	beq.n	8016312 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d012      	beq.n	8016312 <lwip_recvfrom_udp_raw+0x14a>
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	685b      	ldr	r3, [r3, #4]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d00e      	beq.n	8016312 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	6818      	ldr	r0, [r3, #0]
 80162f8:	693b      	ldr	r3, [r7, #16]
 80162fa:	f103 0108 	add.w	r1, r3, #8
 80162fe:	693b      	ldr	r3, [r7, #16]
 8016300:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	3304      	adds	r3, #4
 801630a:	9300      	str	r3, [sp, #0]
 801630c:	4623      	mov	r3, r4
 801630e:	f7ff febb 	bl	8016088 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	2200      	movs	r2, #0
 8016316:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	691b      	ldr	r3, [r3, #16]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d007      	beq.n	8016330 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 8016320:	2300      	movs	r3, #0
 8016322:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 8016324:	7d7b      	ldrb	r3, [r7, #21]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d102      	bne.n	8016330 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	2200      	movs	r2, #0
 801632e:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 8016330:	68bb      	ldr	r3, [r7, #8]
 8016332:	f003 0301 	and.w	r3, r3, #1
 8016336:	2b00      	cmp	r3, #0
 8016338:	d106      	bne.n	8016348 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	2200      	movs	r2, #0
 801633e:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 8016340:	693b      	ldr	r3, [r7, #16]
 8016342:	4618      	mov	r0, r3
 8016344:	f7ff f926 	bl	8015594 <netbuf_delete>
  }
  if (datagram_len) {
 8016348:	683b      	ldr	r3, [r7, #0]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d002      	beq.n	8016354 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 801634e:	683b      	ldr	r3, [r7, #0]
 8016350:	8b3a      	ldrh	r2, [r7, #24]
 8016352:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 8016354:	2300      	movs	r3, #0
}
 8016356:	4618      	mov	r0, r3
 8016358:	372c      	adds	r7, #44	; 0x2c
 801635a:	46bd      	mov	sp, r7
 801635c:	bd90      	pop	{r4, r7, pc}
 801635e:	bf00      	nop
 8016360:	080287d0 	.word	0x080287d0
 8016364:	08028974 	.word	0x08028974
 8016368:	08028824 	.word	0x08028824
 801636c:	080289a0 	.word	0x080289a0

08016370 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b096      	sub	sp, #88	; 0x58
 8016374:	af02      	add	r7, sp, #8
 8016376:	60f8      	str	r0, [r7, #12]
 8016378:	60b9      	str	r1, [r7, #8]
 801637a:	607a      	str	r2, [r7, #4]
 801637c:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 801637e:	68f8      	ldr	r0, [r7, #12]
 8016380:	f7ff f9d8 	bl	8015734 <get_socket>
 8016384:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 8016386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016388:	2b00      	cmp	r3, #0
 801638a:	d102      	bne.n	8016392 <lwip_recvfrom+0x22>
    return -1;
 801638c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016390:	e077      	b.n	8016482 <lwip_recvfrom+0x112>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8016392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	781b      	ldrb	r3, [r3, #0]
 8016398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801639c:	2b10      	cmp	r3, #16
 801639e:	d112      	bne.n	80163c6 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 80163a0:	683b      	ldr	r3, [r7, #0]
 80163a2:	687a      	ldr	r2, [r7, #4]
 80163a4:	68b9      	ldr	r1, [r7, #8]
 80163a6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80163a8:	f7ff fd5e 	bl	8015e68 <lwip_recv_tcp>
 80163ac:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 80163ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80163b0:	9301      	str	r3, [sp, #4]
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	9300      	str	r3, [sp, #0]
 80163b6:	4b35      	ldr	r3, [pc, #212]	; (801648c <lwip_recvfrom+0x11c>)
 80163b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80163ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80163bc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80163be:	f7ff fed1 	bl	8016164 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 80163c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80163c4:	e05d      	b.n	8016482 <lwip_recvfrom+0x112>
  } else
#endif
  {
    u16_t datagram_len = 0;
 80163c6:	2300      	movs	r3, #0
 80163c8:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 80163ca:	68bb      	ldr	r3, [r7, #8]
 80163cc:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 80163d2:	2300      	movs	r3, #0
 80163d4:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 80163d6:	2300      	movs	r3, #0
 80163d8:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 80163da:	2300      	movs	r3, #0
 80163dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 80163de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80163e2:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 80163e4:	2301      	movs	r3, #1
 80163e6:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 80163e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80163ea:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 80163ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d002      	beq.n	80163f8 <lwip_recvfrom+0x88>
 80163f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	e000      	b.n	80163fa <lwip_recvfrom+0x8a>
 80163f8:	2300      	movs	r3, #0
 80163fa:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 80163fc:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 8016400:	f107 0214 	add.w	r2, r7, #20
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	9300      	str	r3, [sp, #0]
 8016408:	460b      	mov	r3, r1
 801640a:	6839      	ldr	r1, [r7, #0]
 801640c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801640e:	f7ff fedb 	bl	80161c8 <lwip_recvfrom_udp_raw>
 8016412:	4603      	mov	r3, r0
 8016414:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 8016418:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 801641c:	2b00      	cmp	r3, #0
 801641e:	d00e      	beq.n	801643e <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 8016420:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8016424:	4618      	mov	r0, r3
 8016426:	f7ff f897 	bl	8015558 <err_to_errno>
 801642a:	63f8      	str	r0, [r7, #60]	; 0x3c
 801642c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801642e:	2b00      	cmp	r3, #0
 8016430:	d002      	beq.n	8016438 <lwip_recvfrom+0xc8>
 8016432:	4a17      	ldr	r2, [pc, #92]	; (8016490 <lwip_recvfrom+0x120>)
 8016434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016436:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 8016438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801643c:	e021      	b.n	8016482 <lwip_recvfrom+0x112>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 801643e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016440:	461a      	mov	r2, r3
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	4293      	cmp	r3, r2
 8016446:	bf28      	it	cs
 8016448:	4613      	movcs	r3, r2
 801644a:	4a12      	ldr	r2, [pc, #72]	; (8016494 <lwip_recvfrom+0x124>)
 801644c:	4293      	cmp	r3, r2
 801644e:	d806      	bhi.n	801645e <lwip_recvfrom+0xee>
 8016450:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016452:	461a      	mov	r2, r3
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	4293      	cmp	r3, r2
 8016458:	bf28      	it	cs
 801645a:	4613      	movcs	r3, r2
 801645c:	e001      	b.n	8016462 <lwip_recvfrom+0xf2>
 801645e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8016462:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 8016464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016466:	2b00      	cmp	r3, #0
 8016468:	d002      	beq.n	8016470 <lwip_recvfrom+0x100>
      *fromlen = msg.msg_namelen;
 801646a:	69ba      	ldr	r2, [r7, #24]
 801646c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801646e:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 8016470:	2300      	movs	r3, #0
 8016472:	643b      	str	r3, [r7, #64]	; 0x40
 8016474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016476:	2b00      	cmp	r3, #0
 8016478:	d002      	beq.n	8016480 <lwip_recvfrom+0x110>
 801647a:	4a05      	ldr	r2, [pc, #20]	; (8016490 <lwip_recvfrom+0x120>)
 801647c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801647e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 8016480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8016482:	4618      	mov	r0, r3
 8016484:	3750      	adds	r7, #80	; 0x50
 8016486:	46bd      	mov	sp, r7
 8016488:	bd80      	pop	{r7, pc}
 801648a:	bf00      	nop
 801648c:	080289ac 	.word	0x080289ac
 8016490:	2001a038 	.word	0x2001a038
 8016494:	7ffffffe 	.word	0x7ffffffe

08016498 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b086      	sub	sp, #24
 801649c:	af02      	add	r7, sp, #8
 801649e:	60f8      	str	r0, [r7, #12]
 80164a0:	60b9      	str	r1, [r7, #8]
 80164a2:	607a      	str	r2, [r7, #4]
 80164a4:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 80164a6:	2300      	movs	r3, #0
 80164a8:	9301      	str	r3, [sp, #4]
 80164aa:	2300      	movs	r3, #0
 80164ac:	9300      	str	r3, [sp, #0]
 80164ae:	683b      	ldr	r3, [r7, #0]
 80164b0:	687a      	ldr	r2, [r7, #4]
 80164b2:	68b9      	ldr	r1, [r7, #8]
 80164b4:	68f8      	ldr	r0, [r7, #12]
 80164b6:	f7ff ff5b 	bl	8016370 <lwip_recvfrom>
 80164ba:	4603      	mov	r3, r0
}
 80164bc:	4618      	mov	r0, r3
 80164be:	3710      	adds	r7, #16
 80164c0:	46bd      	mov	sp, r7
 80164c2:	bd80      	pop	{r7, pc}

080164c4 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 80164c4:	b580      	push	{r7, lr}
 80164c6:	b08a      	sub	sp, #40	; 0x28
 80164c8:	af02      	add	r7, sp, #8
 80164ca:	60f8      	str	r0, [r7, #12]
 80164cc:	60b9      	str	r1, [r7, #8]
 80164ce:	607a      	str	r2, [r7, #4]
 80164d0:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 80164d2:	68f8      	ldr	r0, [r7, #12]
 80164d4:	f7ff f92e 	bl	8015734 <get_socket>
 80164d8:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 80164da:	69fb      	ldr	r3, [r7, #28]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d102      	bne.n	80164e6 <lwip_send+0x22>
    return -1;
 80164e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80164e4:	e046      	b.n	8016574 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 80164e6:	69fb      	ldr	r3, [r7, #28]
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	781b      	ldrb	r3, [r3, #0]
 80164ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80164f0:	2b10      	cmp	r3, #16
 80164f2:	d00b      	beq.n	801650c <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 80164f4:	2300      	movs	r3, #0
 80164f6:	9301      	str	r3, [sp, #4]
 80164f8:	2300      	movs	r3, #0
 80164fa:	9300      	str	r3, [sp, #0]
 80164fc:	683b      	ldr	r3, [r7, #0]
 80164fe:	687a      	ldr	r2, [r7, #4]
 8016500:	68b9      	ldr	r1, [r7, #8]
 8016502:	68f8      	ldr	r0, [r7, #12]
 8016504:	f000 f83c 	bl	8016580 <lwip_sendto>
 8016508:	4603      	mov	r3, r0
 801650a:	e033      	b.n	8016574 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 801650c:	683b      	ldr	r3, [r7, #0]
 801650e:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 8016512:	2b00      	cmp	r3, #0
 8016514:	d001      	beq.n	801651a <lwip_send+0x56>
 8016516:	2203      	movs	r2, #3
 8016518:	e000      	b.n	801651c <lwip_send+0x58>
 801651a:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 801651c:	683b      	ldr	r3, [r7, #0]
 801651e:	105b      	asrs	r3, r3, #1
 8016520:	b25b      	sxtb	r3, r3
 8016522:	f003 0304 	and.w	r3, r3, #4
 8016526:	b25b      	sxtb	r3, r3
 8016528:	4313      	orrs	r3, r2
 801652a:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 801652c:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 801652e:	2300      	movs	r3, #0
 8016530:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 8016532:	69fb      	ldr	r3, [r7, #28]
 8016534:	6818      	ldr	r0, [r3, #0]
 8016536:	7efa      	ldrb	r2, [r7, #27]
 8016538:	f107 0310 	add.w	r3, r7, #16
 801653c:	9300      	str	r3, [sp, #0]
 801653e:	4613      	mov	r3, r2
 8016540:	687a      	ldr	r2, [r7, #4]
 8016542:	68b9      	ldr	r1, [r7, #8]
 8016544:	f7fd f8d4 	bl	80136f0 <netconn_write_partly>
 8016548:	4603      	mov	r3, r0
 801654a:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 801654c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016550:	4618      	mov	r0, r3
 8016552:	f7ff f801 	bl	8015558 <err_to_errno>
 8016556:	6178      	str	r0, [r7, #20]
 8016558:	697b      	ldr	r3, [r7, #20]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d002      	beq.n	8016564 <lwip_send+0xa0>
 801655e:	4a07      	ldr	r2, [pc, #28]	; (801657c <lwip_send+0xb8>)
 8016560:	697b      	ldr	r3, [r7, #20]
 8016562:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 8016564:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016568:	2b00      	cmp	r3, #0
 801656a:	d101      	bne.n	8016570 <lwip_send+0xac>
 801656c:	693b      	ldr	r3, [r7, #16]
 801656e:	e001      	b.n	8016574 <lwip_send+0xb0>
 8016570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016574:	4618      	mov	r0, r3
 8016576:	3720      	adds	r7, #32
 8016578:	46bd      	mov	sp, r7
 801657a:	bd80      	pop	{r7, pc}
 801657c:	2001a038 	.word	0x2001a038

08016580 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 8016580:	b580      	push	{r7, lr}
 8016582:	b08e      	sub	sp, #56	; 0x38
 8016584:	af00      	add	r7, sp, #0
 8016586:	60f8      	str	r0, [r7, #12]
 8016588:	60b9      	str	r1, [r7, #8]
 801658a:	607a      	str	r2, [r7, #4]
 801658c:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 801658e:	68f8      	ldr	r0, [r7, #12]
 8016590:	f7ff f8d0 	bl	8015734 <get_socket>
 8016594:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 8016596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016598:	2b00      	cmp	r3, #0
 801659a:	d102      	bne.n	80165a2 <lwip_sendto+0x22>
    return -1;
 801659c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80165a0:	e093      	b.n	80166ca <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 80165a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	781b      	ldrb	r3, [r3, #0]
 80165a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80165ac:	2b10      	cmp	r3, #16
 80165ae:	d107      	bne.n	80165c0 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 80165b0:	683b      	ldr	r3, [r7, #0]
 80165b2:	687a      	ldr	r2, [r7, #4]
 80165b4:	68b9      	ldr	r1, [r7, #8]
 80165b6:	68f8      	ldr	r0, [r7, #12]
 80165b8:	f7ff ff84 	bl	80164c4 <lwip_send>
 80165bc:	4603      	mov	r3, r0
 80165be:	e084      	b.n	80166ca <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80165c6:	d30a      	bcc.n	80165de <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 80165c8:	235a      	movs	r3, #90	; 0x5a
 80165ca:	623b      	str	r3, [r7, #32]
 80165cc:	6a3b      	ldr	r3, [r7, #32]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d002      	beq.n	80165d8 <lwip_sendto+0x58>
 80165d2:	4a40      	ldr	r2, [pc, #256]	; (80166d4 <lwip_sendto+0x154>)
 80165d4:	6a3b      	ldr	r3, [r7, #32]
 80165d6:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 80165d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80165dc:	e075      	b.n	80166ca <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 80165e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d102      	bne.n	80165ee <lwip_sendto+0x6e>
 80165e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d023      	beq.n	8016636 <lwip_sendto+0xb6>
 80165ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80165f0:	2b10      	cmp	r3, #16
 80165f2:	d10b      	bne.n	801660c <lwip_sendto+0x8c>
 80165f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d008      	beq.n	801660c <lwip_sendto+0x8c>
 80165fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80165fc:	785b      	ldrb	r3, [r3, #1]
 80165fe:	2b02      	cmp	r3, #2
 8016600:	d104      	bne.n	801660c <lwip_sendto+0x8c>
 8016602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016604:	f003 0303 	and.w	r3, r3, #3
 8016608:	2b00      	cmp	r3, #0
 801660a:	d014      	beq.n	8016636 <lwip_sendto+0xb6>
 801660c:	4b32      	ldr	r3, [pc, #200]	; (80166d8 <lwip_sendto+0x158>)
 801660e:	f240 6255 	movw	r2, #1621	; 0x655
 8016612:	4932      	ldr	r1, [pc, #200]	; (80166dc <lwip_sendto+0x15c>)
 8016614:	4832      	ldr	r0, [pc, #200]	; (80166e0 <lwip_sendto+0x160>)
 8016616:	f010 f9bf 	bl	8026998 <iprintf>
 801661a:	f06f 000f 	mvn.w	r0, #15
 801661e:	f7fe ff9b 	bl	8015558 <err_to_errno>
 8016622:	62b8      	str	r0, [r7, #40]	; 0x28
 8016624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016626:	2b00      	cmp	r3, #0
 8016628:	d002      	beq.n	8016630 <lwip_sendto+0xb0>
 801662a:	4a2a      	ldr	r2, [pc, #168]	; (80166d4 <lwip_sendto+0x154>)
 801662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801662e:	6013      	str	r3, [r2, #0]
 8016630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016634:	e049      	b.n	80166ca <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 8016636:	2300      	movs	r3, #0
 8016638:	617b      	str	r3, [r7, #20]
 801663a:	697b      	ldr	r3, [r7, #20]
 801663c:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 801663e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016640:	2b00      	cmp	r3, #0
 8016642:	d00a      	beq.n	801665a <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 8016644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016646:	685b      	ldr	r3, [r3, #4]
 8016648:	61bb      	str	r3, [r7, #24]
 801664a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801664c:	885b      	ldrh	r3, [r3, #2]
 801664e:	4618      	mov	r0, r3
 8016650:	f000 fc90 	bl	8016f74 <lwip_htons>
 8016654:	4603      	mov	r3, r0
 8016656:	86bb      	strh	r3, [r7, #52]	; 0x34
 8016658:	e003      	b.n	8016662 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 801665a:	2300      	movs	r3, #0
 801665c:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 801665e:	2300      	movs	r3, #0
 8016660:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 8016662:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016664:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 8016666:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016668:	f107 0310 	add.w	r3, r7, #16
 801666c:	68b9      	ldr	r1, [r7, #8]
 801666e:	4618      	mov	r0, r3
 8016670:	f7fe ffd8 	bl	8015624 <netbuf_ref>
 8016674:	4603      	mov	r3, r0
 8016676:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 801667a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 801667e:	2b00      	cmp	r3, #0
 8016680:	d10a      	bne.n	8016698 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 8016682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	f107 0210 	add.w	r2, r7, #16
 801668a:	4611      	mov	r1, r2
 801668c:	4618      	mov	r0, r3
 801668e:	f7fd f801 	bl	8013694 <netconn_send>
 8016692:	4603      	mov	r3, r0
 8016694:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 8016698:	f107 0310 	add.w	r3, r7, #16
 801669c:	4618      	mov	r0, r3
 801669e:	f7fe ff99 	bl	80155d4 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 80166a2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80166a6:	4618      	mov	r0, r3
 80166a8:	f7fe ff56 	bl	8015558 <err_to_errno>
 80166ac:	6278      	str	r0, [r7, #36]	; 0x24
 80166ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d002      	beq.n	80166ba <lwip_sendto+0x13a>
 80166b4:	4a07      	ldr	r2, [pc, #28]	; (80166d4 <lwip_sendto+0x154>)
 80166b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166b8:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 80166ba:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d101      	bne.n	80166c6 <lwip_sendto+0x146>
 80166c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80166c4:	e001      	b.n	80166ca <lwip_sendto+0x14a>
 80166c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80166ca:	4618      	mov	r0, r3
 80166cc:	3738      	adds	r7, #56	; 0x38
 80166ce:	46bd      	mov	sp, r7
 80166d0:	bd80      	pop	{r7, pc}
 80166d2:	bf00      	nop
 80166d4:	2001a038 	.word	0x2001a038
 80166d8:	080287d0 	.word	0x080287d0
 80166dc:	08028ab0 	.word	0x08028ab0
 80166e0:	08028824 	.word	0x08028824

080166e4 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 80166e4:	b580      	push	{r7, lr}
 80166e6:	b086      	sub	sp, #24
 80166e8:	af00      	add	r7, sp, #0
 80166ea:	60f8      	str	r0, [r7, #12]
 80166ec:	60b9      	str	r1, [r7, #8]
 80166ee:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 80166f0:	68bb      	ldr	r3, [r7, #8]
 80166f2:	2b02      	cmp	r3, #2
 80166f4:	d00d      	beq.n	8016712 <lwip_socket+0x2e>
 80166f6:	2b03      	cmp	r3, #3
 80166f8:	d002      	beq.n	8016700 <lwip_socket+0x1c>
 80166fa:	2b01      	cmp	r3, #1
 80166fc:	d016      	beq.n	801672c <lwip_socket+0x48>
 80166fe:	e01c      	b.n	801673a <lwip_socket+0x56>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	b2db      	uxtb	r3, r3
 8016704:	4a21      	ldr	r2, [pc, #132]	; (801678c <lwip_socket+0xa8>)
 8016706:	4619      	mov	r1, r3
 8016708:	2040      	movs	r0, #64	; 0x40
 801670a:	f7fc fb63 	bl	8012dd4 <netconn_new_with_proto_and_callback>
 801670e:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8016710:	e019      	b.n	8016746 <lwip_socket+0x62>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	2b88      	cmp	r3, #136	; 0x88
 8016716:	d101      	bne.n	801671c <lwip_socket+0x38>
 8016718:	2321      	movs	r3, #33	; 0x21
 801671a:	e000      	b.n	801671e <lwip_socket+0x3a>
 801671c:	2320      	movs	r3, #32
 801671e:	4a1b      	ldr	r2, [pc, #108]	; (801678c <lwip_socket+0xa8>)
 8016720:	2100      	movs	r1, #0
 8016722:	4618      	mov	r0, r3
 8016724:	f7fc fb56 	bl	8012dd4 <netconn_new_with_proto_and_callback>
 8016728:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 801672a:	e00c      	b.n	8016746 <lwip_socket+0x62>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 801672c:	4a17      	ldr	r2, [pc, #92]	; (801678c <lwip_socket+0xa8>)
 801672e:	2100      	movs	r1, #0
 8016730:	2010      	movs	r0, #16
 8016732:	f7fc fb4f 	bl	8012dd4 <netconn_new_with_proto_and_callback>
 8016736:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 8016738:	e005      	b.n	8016746 <lwip_socket+0x62>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 801673a:	4b15      	ldr	r3, [pc, #84]	; (8016790 <lwip_socket+0xac>)
 801673c:	2216      	movs	r2, #22
 801673e:	601a      	str	r2, [r3, #0]
      return -1;
 8016740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016744:	e01e      	b.n	8016784 <lwip_socket+0xa0>
  }

  if (!conn) {
 8016746:	697b      	ldr	r3, [r7, #20]
 8016748:	2b00      	cmp	r3, #0
 801674a:	d105      	bne.n	8016758 <lwip_socket+0x74>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 801674c:	4b10      	ldr	r3, [pc, #64]	; (8016790 <lwip_socket+0xac>)
 801674e:	2269      	movs	r2, #105	; 0x69
 8016750:	601a      	str	r2, [r3, #0]
    return -1;
 8016752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016756:	e015      	b.n	8016784 <lwip_socket+0xa0>
  }

  i = alloc_socket(conn, 0);
 8016758:	2100      	movs	r1, #0
 801675a:	6978      	ldr	r0, [r7, #20]
 801675c:	f7ff f802 	bl	8015764 <alloc_socket>
 8016760:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 8016762:	693b      	ldr	r3, [r7, #16]
 8016764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016768:	d108      	bne.n	801677c <lwip_socket+0x98>
    netconn_delete(conn);
 801676a:	6978      	ldr	r0, [r7, #20]
 801676c:	f7fc fbd0 	bl	8012f10 <netconn_delete>
    set_errno(ENFILE);
 8016770:	4b07      	ldr	r3, [pc, #28]	; (8016790 <lwip_socket+0xac>)
 8016772:	2217      	movs	r2, #23
 8016774:	601a      	str	r2, [r3, #0]
    return -1;
 8016776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801677a:	e003      	b.n	8016784 <lwip_socket+0xa0>
  }
  conn->socket = i;
 801677c:	697b      	ldr	r3, [r7, #20]
 801677e:	693a      	ldr	r2, [r7, #16]
 8016780:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 8016782:	693b      	ldr	r3, [r7, #16]
}
 8016784:	4618      	mov	r0, r3
 8016786:	3718      	adds	r7, #24
 8016788:	46bd      	mov	sp, r7
 801678a:	bd80      	pop	{r7, pc}
 801678c:	0801683d 	.word	0x0801683d
 8016790:	2001a038 	.word	0x2001a038

08016794 <lwip_write>:

ssize_t
lwip_write(int s, const void *data, size_t size)
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b084      	sub	sp, #16
 8016798:	af00      	add	r7, sp, #0
 801679a:	60f8      	str	r0, [r7, #12]
 801679c:	60b9      	str	r1, [r7, #8]
 801679e:	607a      	str	r2, [r7, #4]
  return lwip_send(s, data, size, 0);
 80167a0:	2300      	movs	r3, #0
 80167a2:	687a      	ldr	r2, [r7, #4]
 80167a4:	68b9      	ldr	r1, [r7, #8]
 80167a6:	68f8      	ldr	r0, [r7, #12]
 80167a8:	f7ff fe8c 	bl	80164c4 <lwip_send>
 80167ac:	4603      	mov	r3, r0
}
 80167ae:	4618      	mov	r0, r3
 80167b0:	3710      	adds	r7, #16
 80167b2:	46bd      	mov	sp, r7
 80167b4:	bd80      	pop	{r7, pc}

080167b6 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 80167b6:	b480      	push	{r7}
 80167b8:	b087      	sub	sp, #28
 80167ba:	af00      	add	r7, sp, #0
 80167bc:	60f8      	str	r0, [r7, #12]
 80167be:	60b9      	str	r1, [r7, #8]
 80167c0:	607a      	str	r2, [r7, #4]
 80167c2:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 80167c4:	2300      	movs	r3, #0
 80167c6:	617b      	str	r3, [r7, #20]
 80167c8:	e02c      	b.n	8016824 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	695a      	ldr	r2, [r3, #20]
 80167ce:	697b      	ldr	r3, [r7, #20]
 80167d0:	00db      	lsls	r3, r3, #3
 80167d2:	4413      	add	r3, r2
 80167d4:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 80167d6:	693b      	ldr	r3, [r7, #16]
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	68ba      	ldr	r2, [r7, #8]
 80167dc:	429a      	cmp	r2, r3
 80167de:	d11e      	bne.n	801681e <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d009      	beq.n	80167fa <lwip_poll_should_wake+0x44>
 80167e6:	693b      	ldr	r3, [r7, #16]
 80167e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80167ec:	b29b      	uxth	r3, r3
 80167ee:	f003 0301 	and.w	r3, r3, #1
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d001      	beq.n	80167fa <lwip_poll_should_wake+0x44>
        return 1;
 80167f6:	2301      	movs	r3, #1
 80167f8:	e01a      	b.n	8016830 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 80167fa:	683b      	ldr	r3, [r7, #0]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d009      	beq.n	8016814 <lwip_poll_should_wake+0x5e>
 8016800:	693b      	ldr	r3, [r7, #16]
 8016802:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8016806:	b29b      	uxth	r3, r3
 8016808:	f003 0302 	and.w	r3, r3, #2
 801680c:	2b00      	cmp	r3, #0
 801680e:	d001      	beq.n	8016814 <lwip_poll_should_wake+0x5e>
        return 1;
 8016810:	2301      	movs	r3, #1
 8016812:	e00d      	b.n	8016830 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 8016814:	6a3b      	ldr	r3, [r7, #32]
 8016816:	2b00      	cmp	r3, #0
 8016818:	d001      	beq.n	801681e <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 801681a:	2301      	movs	r3, #1
 801681c:	e008      	b.n	8016830 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 801681e:	697b      	ldr	r3, [r7, #20]
 8016820:	3301      	adds	r3, #1
 8016822:	617b      	str	r3, [r7, #20]
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	699b      	ldr	r3, [r3, #24]
 8016828:	697a      	ldr	r2, [r7, #20]
 801682a:	429a      	cmp	r2, r3
 801682c:	d3cd      	bcc.n	80167ca <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 801682e:	2300      	movs	r3, #0
}
 8016830:	4618      	mov	r0, r3
 8016832:	371c      	adds	r7, #28
 8016834:	46bd      	mov	sp, r7
 8016836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801683a:	4770      	bx	lr

0801683c <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 801683c:	b580      	push	{r7, lr}
 801683e:	b08a      	sub	sp, #40	; 0x28
 8016840:	af00      	add	r7, sp, #0
 8016842:	6078      	str	r0, [r7, #4]
 8016844:	460b      	mov	r3, r1
 8016846:	70fb      	strb	r3, [r7, #3]
 8016848:	4613      	mov	r3, r2
 801684a:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	2b00      	cmp	r3, #0
 8016850:	f000 80a4 	beq.w	801699c <event_callback+0x160>
    s = conn->socket;
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	699b      	ldr	r3, [r3, #24]
 8016858:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 801685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801685c:	2b00      	cmp	r3, #0
 801685e:	da18      	bge.n	8016892 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 8016860:	f00d fe82 	bl	8024568 <sys_arch_protect>
 8016864:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	699b      	ldr	r3, [r3, #24]
 801686a:	2b00      	cmp	r3, #0
 801686c:	da0b      	bge.n	8016886 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 801686e:	78fb      	ldrb	r3, [r7, #3]
 8016870:	2b00      	cmp	r3, #0
 8016872:	d104      	bne.n	801687e <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	699b      	ldr	r3, [r3, #24]
 8016878:	1e5a      	subs	r2, r3, #1
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 801687e:	69f8      	ldr	r0, [r7, #28]
 8016880:	f00d fe80 	bl	8024584 <sys_arch_unprotect>
        return;
 8016884:	e08d      	b.n	80169a2 <event_callback+0x166>
      }
      s = conn->socket;
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	699b      	ldr	r3, [r3, #24]
 801688a:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 801688c:	69f8      	ldr	r0, [r7, #28]
 801688e:	f00d fe79 	bl	8024584 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 8016892:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016894:	f7fe ff4e 	bl	8015734 <get_socket>
 8016898:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 801689a:	69bb      	ldr	r3, [r7, #24]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d07f      	beq.n	80169a0 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 80168a0:	2301      	movs	r3, #1
 80168a2:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 80168a4:	f00d fe60 	bl	8024568 <sys_arch_protect>
 80168a8:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 80168aa:	78fb      	ldrb	r3, [r7, #3]
 80168ac:	2b04      	cmp	r3, #4
 80168ae:	d83e      	bhi.n	801692e <event_callback+0xf2>
 80168b0:	a201      	add	r2, pc, #4	; (adr r2, 80168b8 <event_callback+0x7c>)
 80168b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168b6:	bf00      	nop
 80168b8:	080168cd 	.word	0x080168cd
 80168bc:	080168ef 	.word	0x080168ef
 80168c0:	08016907 	.word	0x08016907
 80168c4:	0801691b 	.word	0x0801691b
 80168c8:	08016927 	.word	0x08016927
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 80168cc:	69bb      	ldr	r3, [r7, #24]
 80168ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80168d2:	b29b      	uxth	r3, r3
 80168d4:	3301      	adds	r3, #1
 80168d6:	b29b      	uxth	r3, r3
 80168d8:	b21a      	sxth	r2, r3
 80168da:	69bb      	ldr	r3, [r7, #24]
 80168dc:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 80168de:	69bb      	ldr	r3, [r7, #24]
 80168e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80168e4:	2b01      	cmp	r3, #1
 80168e6:	dd2a      	ble.n	801693e <event_callback+0x102>
        check_waiters = 0;
 80168e8:	2300      	movs	r3, #0
 80168ea:	623b      	str	r3, [r7, #32]
      }
      break;
 80168ec:	e027      	b.n	801693e <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 80168ee:	69bb      	ldr	r3, [r7, #24]
 80168f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80168f4:	b29b      	uxth	r3, r3
 80168f6:	3b01      	subs	r3, #1
 80168f8:	b29b      	uxth	r3, r3
 80168fa:	b21a      	sxth	r2, r3
 80168fc:	69bb      	ldr	r3, [r7, #24]
 80168fe:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 8016900:	2300      	movs	r3, #0
 8016902:	623b      	str	r3, [r7, #32]
      break;
 8016904:	e01c      	b.n	8016940 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 8016906:	69bb      	ldr	r3, [r7, #24]
 8016908:	895b      	ldrh	r3, [r3, #10]
 801690a:	2b00      	cmp	r3, #0
 801690c:	d001      	beq.n	8016912 <event_callback+0xd6>
        check_waiters = 0;
 801690e:	2300      	movs	r3, #0
 8016910:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 8016912:	69bb      	ldr	r3, [r7, #24]
 8016914:	2201      	movs	r2, #1
 8016916:	815a      	strh	r2, [r3, #10]
      break;
 8016918:	e012      	b.n	8016940 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 801691a:	69bb      	ldr	r3, [r7, #24]
 801691c:	2200      	movs	r2, #0
 801691e:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 8016920:	2300      	movs	r3, #0
 8016922:	623b      	str	r3, [r7, #32]
      break;
 8016924:	e00c      	b.n	8016940 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 8016926:	69bb      	ldr	r3, [r7, #24]
 8016928:	2201      	movs	r2, #1
 801692a:	819a      	strh	r2, [r3, #12]
      break;
 801692c:	e008      	b.n	8016940 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 801692e:	4b1e      	ldr	r3, [pc, #120]	; (80169a8 <event_callback+0x16c>)
 8016930:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 8016934:	491d      	ldr	r1, [pc, #116]	; (80169ac <event_callback+0x170>)
 8016936:	481e      	ldr	r0, [pc, #120]	; (80169b0 <event_callback+0x174>)
 8016938:	f010 f82e 	bl	8026998 <iprintf>
      break;
 801693c:	e000      	b.n	8016940 <event_callback+0x104>
      break;
 801693e:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 8016940:	69bb      	ldr	r3, [r7, #24]
 8016942:	7b9b      	ldrb	r3, [r3, #14]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d025      	beq.n	8016994 <event_callback+0x158>
 8016948:	6a3b      	ldr	r3, [r7, #32]
 801694a:	2b00      	cmp	r3, #0
 801694c:	d022      	beq.n	8016994 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 801694e:	69bb      	ldr	r3, [r7, #24]
 8016950:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8016954:	2b00      	cmp	r3, #0
 8016956:	bfcc      	ite	gt
 8016958:	2301      	movgt	r3, #1
 801695a:	2300      	movle	r3, #0
 801695c:	b2db      	uxtb	r3, r3
 801695e:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 8016960:	69bb      	ldr	r3, [r7, #24]
 8016962:	895b      	ldrh	r3, [r3, #10]
 8016964:	2b00      	cmp	r3, #0
 8016966:	bf14      	ite	ne
 8016968:	2301      	movne	r3, #1
 801696a:	2300      	moveq	r3, #0
 801696c:	b2db      	uxtb	r3, r3
 801696e:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 8016970:	69bb      	ldr	r3, [r7, #24]
 8016972:	899b      	ldrh	r3, [r3, #12]
 8016974:	2b00      	cmp	r3, #0
 8016976:	bf14      	ite	ne
 8016978:	2301      	movne	r3, #1
 801697a:	2300      	moveq	r3, #0
 801697c:	b2db      	uxtb	r3, r3
 801697e:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 8016980:	69f8      	ldr	r0, [r7, #28]
 8016982:	f00d fdff 	bl	8024584 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	693a      	ldr	r2, [r7, #16]
 801698a:	6979      	ldr	r1, [r7, #20]
 801698c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801698e:	f000 f811 	bl	80169b4 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 8016992:	e006      	b.n	80169a2 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 8016994:	69f8      	ldr	r0, [r7, #28]
 8016996:	f00d fdf5 	bl	8024584 <sys_arch_unprotect>
 801699a:	e002      	b.n	80169a2 <event_callback+0x166>
    return;
 801699c:	bf00      	nop
 801699e:	e000      	b.n	80169a2 <event_callback+0x166>
      return;
 80169a0:	bf00      	nop
  }
  done_socket(sock);
}
 80169a2:	3728      	adds	r7, #40	; 0x28
 80169a4:	46bd      	mov	sp, r7
 80169a6:	bd80      	pop	{r7, pc}
 80169a8:	080287d0 	.word	0x080287d0
 80169ac:	08028b4c 	.word	0x08028b4c
 80169b0:	08028824 	.word	0x08028824

080169b4 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b088      	sub	sp, #32
 80169b8:	af02      	add	r7, sp, #8
 80169ba:	60f8      	str	r0, [r7, #12]
 80169bc:	60b9      	str	r1, [r7, #8]
 80169be:	607a      	str	r2, [r7, #4]
 80169c0:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 80169c2:	4b3d      	ldr	r3, [pc, #244]	; (8016ab8 <select_check_waiters+0x104>)
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	617b      	str	r3, [r7, #20]
 80169c8:	e06f      	b.n	8016aaa <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 80169ca:	697b      	ldr	r3, [r7, #20]
 80169cc:	69db      	ldr	r3, [r3, #28]
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d168      	bne.n	8016aa4 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 80169d2:	2300      	movs	r3, #0
 80169d4:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 80169d6:	697b      	ldr	r3, [r7, #20]
 80169d8:	695b      	ldr	r3, [r3, #20]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d009      	beq.n	80169f2 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 80169de:	683b      	ldr	r3, [r7, #0]
 80169e0:	9300      	str	r3, [sp, #0]
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	68ba      	ldr	r2, [r7, #8]
 80169e6:	68f9      	ldr	r1, [r7, #12]
 80169e8:	6978      	ldr	r0, [r7, #20]
 80169ea:	f7ff fee4 	bl	80167b6 <lwip_poll_should_wake>
 80169ee:	6138      	str	r0, [r7, #16]
 80169f0:	e04d      	b.n	8016a8e <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 80169f2:	68bb      	ldr	r3, [r7, #8]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d014      	beq.n	8016a22 <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 80169f8:	697b      	ldr	r3, [r7, #20]
 80169fa:	689b      	ldr	r3, [r3, #8]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d010      	beq.n	8016a22 <select_check_waiters+0x6e>
 8016a00:	697b      	ldr	r3, [r7, #20]
 8016a02:	689b      	ldr	r3, [r3, #8]
 8016a04:	68fa      	ldr	r2, [r7, #12]
 8016a06:	0952      	lsrs	r2, r2, #5
 8016a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a0c:	68fa      	ldr	r2, [r7, #12]
 8016a0e:	f002 021f 	and.w	r2, r2, #31
 8016a12:	2101      	movs	r1, #1
 8016a14:	fa01 f202 	lsl.w	r2, r1, r2
 8016a18:	4013      	ands	r3, r2
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d001      	beq.n	8016a22 <select_check_waiters+0x6e>
            do_signal = 1;
 8016a1e:	2301      	movs	r3, #1
 8016a20:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d017      	beq.n	8016a58 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 8016a28:	693b      	ldr	r3, [r7, #16]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d114      	bne.n	8016a58 <select_check_waiters+0xa4>
 8016a2e:	697b      	ldr	r3, [r7, #20]
 8016a30:	68db      	ldr	r3, [r3, #12]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d010      	beq.n	8016a58 <select_check_waiters+0xa4>
 8016a36:	697b      	ldr	r3, [r7, #20]
 8016a38:	68db      	ldr	r3, [r3, #12]
 8016a3a:	68fa      	ldr	r2, [r7, #12]
 8016a3c:	0952      	lsrs	r2, r2, #5
 8016a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a42:	68fa      	ldr	r2, [r7, #12]
 8016a44:	f002 021f 	and.w	r2, r2, #31
 8016a48:	2101      	movs	r1, #1
 8016a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8016a4e:	4013      	ands	r3, r2
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d001      	beq.n	8016a58 <select_check_waiters+0xa4>
            do_signal = 1;
 8016a54:	2301      	movs	r3, #1
 8016a56:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 8016a58:	683b      	ldr	r3, [r7, #0]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d017      	beq.n	8016a8e <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 8016a5e:	693b      	ldr	r3, [r7, #16]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d114      	bne.n	8016a8e <select_check_waiters+0xda>
 8016a64:	697b      	ldr	r3, [r7, #20]
 8016a66:	691b      	ldr	r3, [r3, #16]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d010      	beq.n	8016a8e <select_check_waiters+0xda>
 8016a6c:	697b      	ldr	r3, [r7, #20]
 8016a6e:	691b      	ldr	r3, [r3, #16]
 8016a70:	68fa      	ldr	r2, [r7, #12]
 8016a72:	0952      	lsrs	r2, r2, #5
 8016a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a78:	68fa      	ldr	r2, [r7, #12]
 8016a7a:	f002 021f 	and.w	r2, r2, #31
 8016a7e:	2101      	movs	r1, #1
 8016a80:	fa01 f202 	lsl.w	r2, r1, r2
 8016a84:	4013      	ands	r3, r2
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d001      	beq.n	8016a8e <select_check_waiters+0xda>
            do_signal = 1;
 8016a8a:	2301      	movs	r3, #1
 8016a8c:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 8016a8e:	693b      	ldr	r3, [r7, #16]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d007      	beq.n	8016aa4 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 8016a94:	697b      	ldr	r3, [r7, #20]
 8016a96:	2201      	movs	r2, #1
 8016a98:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 8016a9a:	697b      	ldr	r3, [r7, #20]
 8016a9c:	3320      	adds	r3, #32
 8016a9e:	4618      	mov	r0, r3
 8016aa0:	f00d fcbe 	bl	8024420 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 8016aa4:	697b      	ldr	r3, [r7, #20]
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	617b      	str	r3, [r7, #20]
 8016aaa:	697b      	ldr	r3, [r7, #20]
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d18c      	bne.n	80169ca <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 8016ab0:	bf00      	nop
 8016ab2:	3718      	adds	r7, #24
 8016ab4:	46bd      	mov	sp, r7
 8016ab6:	bd80      	pop	{r7, pc}
 8016ab8:	2001316c 	.word	0x2001316c

08016abc <lwip_fcntl>:
 * The flag O_NONBLOCK and access modes are supported for F_GETFL, only
 * the flag O_NONBLOCK is implemented for F_SETFL.
 */
int
lwip_fcntl(int s, int cmd, int val)
{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b08c      	sub	sp, #48	; 0x30
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	60f8      	str	r0, [r7, #12]
 8016ac4:	60b9      	str	r1, [r7, #8]
 8016ac6:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock = get_socket(s);
 8016ac8:	68f8      	ldr	r0, [r7, #12]
 8016aca:	f7fe fe33 	bl	8015734 <get_socket>
 8016ace:	6278      	str	r0, [r7, #36]	; 0x24
  int ret = -1;
 8016ad0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int op_mode = 0;
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (!sock) {
 8016ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d102      	bne.n	8016ae6 <lwip_fcntl+0x2a>
    return -1;
 8016ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ae4:	e08a      	b.n	8016bfc <lwip_fcntl+0x140>
  }

  switch (cmd) {
 8016ae6:	68bb      	ldr	r3, [r7, #8]
 8016ae8:	2b03      	cmp	r3, #3
 8016aea:	d002      	beq.n	8016af2 <lwip_fcntl+0x36>
 8016aec:	2b04      	cmp	r3, #4
 8016aee:	d043      	beq.n	8016b78 <lwip_fcntl+0xbc>
 8016af0:	e077      	b.n	8016be2 <lwip_fcntl+0x126>
    case F_GETFL:
      ret = netconn_is_nonblocking(sock->conn) ? O_NONBLOCK : 0;
 8016af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016af4:	681b      	ldr	r3, [r3, #0]
 8016af6:	7f1b      	ldrb	r3, [r3, #28]
 8016af8:	105b      	asrs	r3, r3, #1
 8016afa:	f003 0301 	and.w	r3, r3, #1
 8016afe:	62fb      	str	r3, [r7, #44]	; 0x2c
      sock_set_errno(sock, 0);
 8016b00:	2300      	movs	r3, #0
 8016b02:	61bb      	str	r3, [r7, #24]
 8016b04:	69bb      	ldr	r3, [r7, #24]
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d002      	beq.n	8016b10 <lwip_fcntl+0x54>
 8016b0a:	4a3e      	ldr	r2, [pc, #248]	; (8016c04 <lwip_fcntl+0x148>)
 8016b0c:	69bb      	ldr	r3, [r7, #24]
 8016b0e:	6013      	str	r3, [r2, #0]

      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 8016b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	781b      	ldrb	r3, [r3, #0]
 8016b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016b1a:	2b10      	cmp	r3, #16
 8016b1c:	d123      	bne.n	8016b66 <lwip_fcntl+0xaa>
#if LWIP_TCPIP_CORE_LOCKING
        LOCK_TCPIP_CORE();
 8016b1e:	483a      	ldr	r0, [pc, #232]	; (8016c08 <lwip_fcntl+0x14c>)
 8016b20:	f00d fce0 	bl	80244e4 <sys_mutex_lock>
        /* the proper thing to do here would be to get into the tcpip_thread,
           but locking should be OK as well since we only *read* some flags */
        SYS_ARCH_PROTECT(lev);
#endif
#if LWIP_TCP
        if (sock->conn->pcb.tcp) {
 8016b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	685b      	ldr	r3, [r3, #4]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d017      	beq.n	8016b5e <lwip_fcntl+0xa2>
          if (!(sock->conn->pcb.tcp->flags & TF_RXCLOSED)) {
 8016b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	685b      	ldr	r3, [r3, #4]
 8016b34:	8b5b      	ldrh	r3, [r3, #26]
 8016b36:	f003 0310 	and.w	r3, r3, #16
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d103      	bne.n	8016b46 <lwip_fcntl+0x8a>
            op_mode |= O_RDONLY;
 8016b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b40:	f043 0302 	orr.w	r3, r3, #2
 8016b44:	62bb      	str	r3, [r7, #40]	; 0x28
          }
          if (!(sock->conn->pcb.tcp->flags & TF_FIN)) {
 8016b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	685b      	ldr	r3, [r3, #4]
 8016b4c:	8b5b      	ldrh	r3, [r3, #26]
 8016b4e:	f003 0320 	and.w	r3, r3, #32
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d103      	bne.n	8016b5e <lwip_fcntl+0xa2>
            op_mode |= O_WRONLY;
 8016b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b58:	f043 0304 	orr.w	r3, r3, #4
 8016b5c:	62bb      	str	r3, [r7, #40]	; 0x28
          }
        }
#endif
#if LWIP_TCPIP_CORE_LOCKING
        UNLOCK_TCPIP_CORE();
 8016b5e:	482a      	ldr	r0, [pc, #168]	; (8016c08 <lwip_fcntl+0x14c>)
 8016b60:	f00d fccf 	bl	8024502 <sys_mutex_unlock>
 8016b64:	e003      	b.n	8016b6e <lwip_fcntl+0xb2>
#else
        SYS_ARCH_UNPROTECT(lev);
#endif
      } else {
        op_mode |= O_RDWR;
 8016b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b68:	f043 0306 	orr.w	r3, r3, #6
 8016b6c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* ensure O_RDWR for (O_RDONLY|O_WRONLY) != O_RDWR cases */
      ret |= (op_mode == (O_RDONLY | O_WRONLY)) ? O_RDWR : op_mode;
 8016b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b72:	4313      	orrs	r3, r2
 8016b74:	62fb      	str	r3, [r7, #44]	; 0x2c

      break;
 8016b76:	e040      	b.n	8016bfa <lwip_fcntl+0x13e>
    case F_SETFL:
      /* Bits corresponding to the file access mode and the file creation flags [..] that are set in arg shall be ignored */
      val &= ~(O_RDONLY | O_WRONLY | O_RDWR);
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	f023 0306 	bic.w	r3, r3, #6
 8016b7e:	607b      	str	r3, [r7, #4]
      if ((val & ~O_NONBLOCK) == 0) {
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	f023 0301 	bic.w	r3, r3, #1
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d122      	bne.n	8016bd0 <lwip_fcntl+0x114>
        /* only O_NONBLOCK, all other bits are zero */
        netconn_set_nonblocking(sock->conn, val & O_NONBLOCK);
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	f003 0301 	and.w	r3, r3, #1
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d009      	beq.n	8016ba8 <lwip_fcntl+0xec>
 8016b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	7f1a      	ldrb	r2, [r3, #28]
 8016b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	f042 0202 	orr.w	r2, r2, #2
 8016ba2:	b2d2      	uxtb	r2, r2
 8016ba4:	771a      	strb	r2, [r3, #28]
 8016ba6:	e008      	b.n	8016bba <lwip_fcntl+0xfe>
 8016ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	7f1a      	ldrb	r2, [r3, #28]
 8016bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	f022 0202 	bic.w	r2, r2, #2
 8016bb6:	b2d2      	uxtb	r2, r2
 8016bb8:	771a      	strb	r2, [r3, #28]
        ret = 0;
 8016bba:	2300      	movs	r3, #0
 8016bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        sock_set_errno(sock, 0);
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	61fb      	str	r3, [r7, #28]
 8016bc2:	69fb      	ldr	r3, [r7, #28]
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d015      	beq.n	8016bf4 <lwip_fcntl+0x138>
 8016bc8:	4a0e      	ldr	r2, [pc, #56]	; (8016c04 <lwip_fcntl+0x148>)
 8016bca:	69fb      	ldr	r3, [r7, #28]
 8016bcc:	6013      	str	r3, [r2, #0]
      } else {
        sock_set_errno(sock, ENOSYS); /* not yet implemented */
      }
      break;
 8016bce:	e011      	b.n	8016bf4 <lwip_fcntl+0x138>
        sock_set_errno(sock, ENOSYS); /* not yet implemented */
 8016bd0:	2326      	movs	r3, #38	; 0x26
 8016bd2:	623b      	str	r3, [r7, #32]
 8016bd4:	6a3b      	ldr	r3, [r7, #32]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d00c      	beq.n	8016bf4 <lwip_fcntl+0x138>
 8016bda:	4a0a      	ldr	r2, [pc, #40]	; (8016c04 <lwip_fcntl+0x148>)
 8016bdc:	6a3b      	ldr	r3, [r7, #32]
 8016bde:	6013      	str	r3, [r2, #0]
      break;
 8016be0:	e008      	b.n	8016bf4 <lwip_fcntl+0x138>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_fcntl(%d, UNIMPL: %d, %d)\n", s, cmd, val));
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
 8016be2:	2326      	movs	r3, #38	; 0x26
 8016be4:	617b      	str	r3, [r7, #20]
 8016be6:	697b      	ldr	r3, [r7, #20]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d005      	beq.n	8016bf8 <lwip_fcntl+0x13c>
 8016bec:	4a05      	ldr	r2, [pc, #20]	; (8016c04 <lwip_fcntl+0x148>)
 8016bee:	697b      	ldr	r3, [r7, #20]
 8016bf0:	6013      	str	r3, [r2, #0]
      break;
 8016bf2:	e001      	b.n	8016bf8 <lwip_fcntl+0x13c>
      break;
 8016bf4:	bf00      	nop
 8016bf6:	e000      	b.n	8016bfa <lwip_fcntl+0x13e>
      break;
 8016bf8:	bf00      	nop
  }
  done_socket(sock);
  return ret;
 8016bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8016bfc:	4618      	mov	r0, r3
 8016bfe:	3730      	adds	r7, #48	; 0x30
 8016c00:	46bd      	mov	sp, r7
 8016c02:	bd80      	pop	{r7, pc}
 8016c04:	2001a038 	.word	0x2001a038
 8016c08:	20016b3c 	.word	0x20016b3c

08016c0c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8016c0c:	b580      	push	{r7, lr}
 8016c0e:	b084      	sub	sp, #16
 8016c10:	af00      	add	r7, sp, #0
 8016c12:	6078      	str	r0, [r7, #4]
 8016c14:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8016c16:	f008 fb55 	bl	801f2c4 <sys_timeouts_sleeptime>
 8016c1a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016c22:	d10b      	bne.n	8016c3c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8016c24:	4813      	ldr	r0, [pc, #76]	; (8016c74 <tcpip_timeouts_mbox_fetch+0x68>)
 8016c26:	f00d fc6c 	bl	8024502 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8016c2a:	2200      	movs	r2, #0
 8016c2c:	6839      	ldr	r1, [r7, #0]
 8016c2e:	6878      	ldr	r0, [r7, #4]
 8016c30:	f00d fb24 	bl	802427c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8016c34:	480f      	ldr	r0, [pc, #60]	; (8016c74 <tcpip_timeouts_mbox_fetch+0x68>)
 8016c36:	f00d fc55 	bl	80244e4 <sys_mutex_lock>
    return;
 8016c3a:	e018      	b.n	8016c6e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d102      	bne.n	8016c48 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8016c42:	f008 fb05 	bl	801f250 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016c46:	e7e6      	b.n	8016c16 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8016c48:	480a      	ldr	r0, [pc, #40]	; (8016c74 <tcpip_timeouts_mbox_fetch+0x68>)
 8016c4a:	f00d fc5a 	bl	8024502 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8016c4e:	68fa      	ldr	r2, [r7, #12]
 8016c50:	6839      	ldr	r1, [r7, #0]
 8016c52:	6878      	ldr	r0, [r7, #4]
 8016c54:	f00d fb12 	bl	802427c <sys_arch_mbox_fetch>
 8016c58:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8016c5a:	4806      	ldr	r0, [pc, #24]	; (8016c74 <tcpip_timeouts_mbox_fetch+0x68>)
 8016c5c:	f00d fc42 	bl	80244e4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8016c60:	68bb      	ldr	r3, [r7, #8]
 8016c62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016c66:	d102      	bne.n	8016c6e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8016c68:	f008 faf2 	bl	801f250 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016c6c:	e7d3      	b.n	8016c16 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8016c6e:	3710      	adds	r7, #16
 8016c70:	46bd      	mov	sp, r7
 8016c72:	bd80      	pop	{r7, pc}
 8016c74:	20016b3c 	.word	0x20016b3c

08016c78 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b084      	sub	sp, #16
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8016c80:	4810      	ldr	r0, [pc, #64]	; (8016cc4 <tcpip_thread+0x4c>)
 8016c82:	f00d fc2f 	bl	80244e4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8016c86:	4b10      	ldr	r3, [pc, #64]	; (8016cc8 <tcpip_thread+0x50>)
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d005      	beq.n	8016c9a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8016c8e:	4b0e      	ldr	r3, [pc, #56]	; (8016cc8 <tcpip_thread+0x50>)
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	4a0e      	ldr	r2, [pc, #56]	; (8016ccc <tcpip_thread+0x54>)
 8016c94:	6812      	ldr	r2, [r2, #0]
 8016c96:	4610      	mov	r0, r2
 8016c98:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8016c9a:	f107 030c 	add.w	r3, r7, #12
 8016c9e:	4619      	mov	r1, r3
 8016ca0:	480b      	ldr	r0, [pc, #44]	; (8016cd0 <tcpip_thread+0x58>)
 8016ca2:	f7ff ffb3 	bl	8016c0c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d106      	bne.n	8016cba <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8016cac:	4b09      	ldr	r3, [pc, #36]	; (8016cd4 <tcpip_thread+0x5c>)
 8016cae:	2291      	movs	r2, #145	; 0x91
 8016cb0:	4909      	ldr	r1, [pc, #36]	; (8016cd8 <tcpip_thread+0x60>)
 8016cb2:	480a      	ldr	r0, [pc, #40]	; (8016cdc <tcpip_thread+0x64>)
 8016cb4:	f00f fe70 	bl	8026998 <iprintf>
      continue;
 8016cb8:	e003      	b.n	8016cc2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8016cba:	68fb      	ldr	r3, [r7, #12]
 8016cbc:	4618      	mov	r0, r3
 8016cbe:	f000 f80f 	bl	8016ce0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8016cc2:	e7ea      	b.n	8016c9a <tcpip_thread+0x22>
 8016cc4:	20016b3c 	.word	0x20016b3c
 8016cc8:	20013170 	.word	0x20013170
 8016ccc:	20013174 	.word	0x20013174
 8016cd0:	20013178 	.word	0x20013178
 8016cd4:	08028ba0 	.word	0x08028ba0
 8016cd8:	08028bd0 	.word	0x08028bd0
 8016cdc:	08028bf0 	.word	0x08028bf0

08016ce0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	b082      	sub	sp, #8
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	781b      	ldrb	r3, [r3, #0]
 8016cec:	2b01      	cmp	r3, #1
 8016cee:	d018      	beq.n	8016d22 <tcpip_thread_handle_msg+0x42>
 8016cf0:	2b02      	cmp	r3, #2
 8016cf2:	d021      	beq.n	8016d38 <tcpip_thread_handle_msg+0x58>
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d126      	bne.n	8016d46 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	68db      	ldr	r3, [r3, #12]
 8016cfc:	687a      	ldr	r2, [r7, #4]
 8016cfe:	6850      	ldr	r0, [r2, #4]
 8016d00:	687a      	ldr	r2, [r7, #4]
 8016d02:	6892      	ldr	r2, [r2, #8]
 8016d04:	4611      	mov	r1, r2
 8016d06:	4798      	blx	r3
 8016d08:	4603      	mov	r3, r0
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d004      	beq.n	8016d18 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	685b      	ldr	r3, [r3, #4]
 8016d12:	4618      	mov	r0, r3
 8016d14:	f001 fd52 	bl	80187bc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8016d18:	6879      	ldr	r1, [r7, #4]
 8016d1a:	2009      	movs	r0, #9
 8016d1c:	f000 fea0 	bl	8017a60 <memp_free>
      break;
 8016d20:	e018      	b.n	8016d54 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	685b      	ldr	r3, [r3, #4]
 8016d26:	687a      	ldr	r2, [r7, #4]
 8016d28:	6892      	ldr	r2, [r2, #8]
 8016d2a:	4610      	mov	r0, r2
 8016d2c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8016d2e:	6879      	ldr	r1, [r7, #4]
 8016d30:	2008      	movs	r0, #8
 8016d32:	f000 fe95 	bl	8017a60 <memp_free>
      break;
 8016d36:	e00d      	b.n	8016d54 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	685b      	ldr	r3, [r3, #4]
 8016d3c:	687a      	ldr	r2, [r7, #4]
 8016d3e:	6892      	ldr	r2, [r2, #8]
 8016d40:	4610      	mov	r0, r2
 8016d42:	4798      	blx	r3
      break;
 8016d44:	e006      	b.n	8016d54 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8016d46:	4b05      	ldr	r3, [pc, #20]	; (8016d5c <tcpip_thread_handle_msg+0x7c>)
 8016d48:	22cf      	movs	r2, #207	; 0xcf
 8016d4a:	4905      	ldr	r1, [pc, #20]	; (8016d60 <tcpip_thread_handle_msg+0x80>)
 8016d4c:	4805      	ldr	r0, [pc, #20]	; (8016d64 <tcpip_thread_handle_msg+0x84>)
 8016d4e:	f00f fe23 	bl	8026998 <iprintf>
      break;
 8016d52:	bf00      	nop
  }
}
 8016d54:	bf00      	nop
 8016d56:	3708      	adds	r7, #8
 8016d58:	46bd      	mov	sp, r7
 8016d5a:	bd80      	pop	{r7, pc}
 8016d5c:	08028ba0 	.word	0x08028ba0
 8016d60:	08028bd0 	.word	0x08028bd0
 8016d64:	08028bf0 	.word	0x08028bf0

08016d68 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8016d68:	b580      	push	{r7, lr}
 8016d6a:	b086      	sub	sp, #24
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	60f8      	str	r0, [r7, #12]
 8016d70:	60b9      	str	r1, [r7, #8]
 8016d72:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016d74:	481a      	ldr	r0, [pc, #104]	; (8016de0 <tcpip_inpkt+0x78>)
 8016d76:	f00d fadc 	bl	8024332 <sys_mbox_valid>
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d105      	bne.n	8016d8c <tcpip_inpkt+0x24>
 8016d80:	4b18      	ldr	r3, [pc, #96]	; (8016de4 <tcpip_inpkt+0x7c>)
 8016d82:	22fc      	movs	r2, #252	; 0xfc
 8016d84:	4918      	ldr	r1, [pc, #96]	; (8016de8 <tcpip_inpkt+0x80>)
 8016d86:	4819      	ldr	r0, [pc, #100]	; (8016dec <tcpip_inpkt+0x84>)
 8016d88:	f00f fe06 	bl	8026998 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8016d8c:	2009      	movs	r0, #9
 8016d8e:	f000 fe15 	bl	80179bc <memp_malloc>
 8016d92:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8016d94:	697b      	ldr	r3, [r7, #20]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d102      	bne.n	8016da0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8016d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d9e:	e01a      	b.n	8016dd6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8016da0:	697b      	ldr	r3, [r7, #20]
 8016da2:	2200      	movs	r2, #0
 8016da4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8016da6:	697b      	ldr	r3, [r7, #20]
 8016da8:	68fa      	ldr	r2, [r7, #12]
 8016daa:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8016dac:	697b      	ldr	r3, [r7, #20]
 8016dae:	68ba      	ldr	r2, [r7, #8]
 8016db0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8016db2:	697b      	ldr	r3, [r7, #20]
 8016db4:	687a      	ldr	r2, [r7, #4]
 8016db6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016db8:	6979      	ldr	r1, [r7, #20]
 8016dba:	4809      	ldr	r0, [pc, #36]	; (8016de0 <tcpip_inpkt+0x78>)
 8016dbc:	f00d fa44 	bl	8024248 <sys_mbox_trypost>
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d006      	beq.n	8016dd4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8016dc6:	6979      	ldr	r1, [r7, #20]
 8016dc8:	2009      	movs	r0, #9
 8016dca:	f000 fe49 	bl	8017a60 <memp_free>
    return ERR_MEM;
 8016dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016dd2:	e000      	b.n	8016dd6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8016dd4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	3718      	adds	r7, #24
 8016dda:	46bd      	mov	sp, r7
 8016ddc:	bd80      	pop	{r7, pc}
 8016dde:	bf00      	nop
 8016de0:	20013178 	.word	0x20013178
 8016de4:	08028ba0 	.word	0x08028ba0
 8016de8:	08028c18 	.word	0x08028c18
 8016dec:	08028bf0 	.word	0x08028bf0

08016df0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b082      	sub	sp, #8
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	6078      	str	r0, [r7, #4]
 8016df8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8016dfa:	683b      	ldr	r3, [r7, #0]
 8016dfc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016e00:	f003 0318 	and.w	r3, r3, #24
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d006      	beq.n	8016e16 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8016e08:	4a08      	ldr	r2, [pc, #32]	; (8016e2c <tcpip_input+0x3c>)
 8016e0a:	6839      	ldr	r1, [r7, #0]
 8016e0c:	6878      	ldr	r0, [r7, #4]
 8016e0e:	f7ff ffab 	bl	8016d68 <tcpip_inpkt>
 8016e12:	4603      	mov	r3, r0
 8016e14:	e005      	b.n	8016e22 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8016e16:	4a06      	ldr	r2, [pc, #24]	; (8016e30 <tcpip_input+0x40>)
 8016e18:	6839      	ldr	r1, [r7, #0]
 8016e1a:	6878      	ldr	r0, [r7, #4]
 8016e1c:	f7ff ffa4 	bl	8016d68 <tcpip_inpkt>
 8016e20:	4603      	mov	r3, r0
}
 8016e22:	4618      	mov	r0, r3
 8016e24:	3708      	adds	r7, #8
 8016e26:	46bd      	mov	sp, r7
 8016e28:	bd80      	pop	{r7, pc}
 8016e2a:	bf00      	nop
 8016e2c:	08024035 	.word	0x08024035
 8016e30:	08022e15 	.word	0x08022e15

08016e34 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8016e34:	b580      	push	{r7, lr}
 8016e36:	b084      	sub	sp, #16
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	6078      	str	r0, [r7, #4]
 8016e3c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016e3e:	4819      	ldr	r0, [pc, #100]	; (8016ea4 <tcpip_try_callback+0x70>)
 8016e40:	f00d fa77 	bl	8024332 <sys_mbox_valid>
 8016e44:	4603      	mov	r3, r0
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d106      	bne.n	8016e58 <tcpip_try_callback+0x24>
 8016e4a:	4b17      	ldr	r3, [pc, #92]	; (8016ea8 <tcpip_try_callback+0x74>)
 8016e4c:	f240 125d 	movw	r2, #349	; 0x15d
 8016e50:	4916      	ldr	r1, [pc, #88]	; (8016eac <tcpip_try_callback+0x78>)
 8016e52:	4817      	ldr	r0, [pc, #92]	; (8016eb0 <tcpip_try_callback+0x7c>)
 8016e54:	f00f fda0 	bl	8026998 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8016e58:	2008      	movs	r0, #8
 8016e5a:	f000 fdaf 	bl	80179bc <memp_malloc>
 8016e5e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d102      	bne.n	8016e6c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8016e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e6a:	e017      	b.n	8016e9c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	2201      	movs	r2, #1
 8016e70:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	687a      	ldr	r2, [r7, #4]
 8016e76:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	683a      	ldr	r2, [r7, #0]
 8016e7c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016e7e:	68f9      	ldr	r1, [r7, #12]
 8016e80:	4808      	ldr	r0, [pc, #32]	; (8016ea4 <tcpip_try_callback+0x70>)
 8016e82:	f00d f9e1 	bl	8024248 <sys_mbox_trypost>
 8016e86:	4603      	mov	r3, r0
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d006      	beq.n	8016e9a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8016e8c:	68f9      	ldr	r1, [r7, #12]
 8016e8e:	2008      	movs	r0, #8
 8016e90:	f000 fde6 	bl	8017a60 <memp_free>
    return ERR_MEM;
 8016e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e98:	e000      	b.n	8016e9c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8016e9a:	2300      	movs	r3, #0
}
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	3710      	adds	r7, #16
 8016ea0:	46bd      	mov	sp, r7
 8016ea2:	bd80      	pop	{r7, pc}
 8016ea4:	20013178 	.word	0x20013178
 8016ea8:	08028ba0 	.word	0x08028ba0
 8016eac:	08028c18 	.word	0x08028c18
 8016eb0:	08028bf0 	.word	0x08028bf0

08016eb4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8016eb4:	b580      	push	{r7, lr}
 8016eb6:	b084      	sub	sp, #16
 8016eb8:	af00      	add	r7, sp, #0
 8016eba:	60f8      	str	r0, [r7, #12]
 8016ebc:	60b9      	str	r1, [r7, #8]
 8016ebe:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8016ec0:	4806      	ldr	r0, [pc, #24]	; (8016edc <tcpip_send_msg_wait_sem+0x28>)
 8016ec2:	f00d fb0f 	bl	80244e4 <sys_mutex_lock>
  fn(apimsg);
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	68b8      	ldr	r0, [r7, #8]
 8016eca:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8016ecc:	4803      	ldr	r0, [pc, #12]	; (8016edc <tcpip_send_msg_wait_sem+0x28>)
 8016ece:	f00d fb18 	bl	8024502 <sys_mutex_unlock>
  return ERR_OK;
 8016ed2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	3710      	adds	r7, #16
 8016ed8:	46bd      	mov	sp, r7
 8016eda:	bd80      	pop	{r7, pc}
 8016edc:	20016b3c 	.word	0x20016b3c

08016ee0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8016ee0:	b580      	push	{r7, lr}
 8016ee2:	b084      	sub	sp, #16
 8016ee4:	af02      	add	r7, sp, #8
 8016ee6:	6078      	str	r0, [r7, #4]
 8016ee8:	6039      	str	r1, [r7, #0]
  lwip_init();
 8016eea:	f000 f8e0 	bl	80170ae <lwip_init>

  tcpip_init_done = initfunc;
 8016eee:	4a17      	ldr	r2, [pc, #92]	; (8016f4c <tcpip_init+0x6c>)
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8016ef4:	4a16      	ldr	r2, [pc, #88]	; (8016f50 <tcpip_init+0x70>)
 8016ef6:	683b      	ldr	r3, [r7, #0]
 8016ef8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8016efa:	2106      	movs	r1, #6
 8016efc:	4815      	ldr	r0, [pc, #84]	; (8016f54 <tcpip_init+0x74>)
 8016efe:	f00d f96f 	bl	80241e0 <sys_mbox_new>
 8016f02:	4603      	mov	r3, r0
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d006      	beq.n	8016f16 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8016f08:	4b13      	ldr	r3, [pc, #76]	; (8016f58 <tcpip_init+0x78>)
 8016f0a:	f240 2261 	movw	r2, #609	; 0x261
 8016f0e:	4913      	ldr	r1, [pc, #76]	; (8016f5c <tcpip_init+0x7c>)
 8016f10:	4813      	ldr	r0, [pc, #76]	; (8016f60 <tcpip_init+0x80>)
 8016f12:	f00f fd41 	bl	8026998 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8016f16:	4813      	ldr	r0, [pc, #76]	; (8016f64 <tcpip_init+0x84>)
 8016f18:	f00d fac8 	bl	80244ac <sys_mutex_new>
 8016f1c:	4603      	mov	r3, r0
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d006      	beq.n	8016f30 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8016f22:	4b0d      	ldr	r3, [pc, #52]	; (8016f58 <tcpip_init+0x78>)
 8016f24:	f240 2265 	movw	r2, #613	; 0x265
 8016f28:	490f      	ldr	r1, [pc, #60]	; (8016f68 <tcpip_init+0x88>)
 8016f2a:	480d      	ldr	r0, [pc, #52]	; (8016f60 <tcpip_init+0x80>)
 8016f2c:	f00f fd34 	bl	8026998 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8016f30:	2300      	movs	r3, #0
 8016f32:	9300      	str	r3, [sp, #0]
 8016f34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016f38:	2200      	movs	r2, #0
 8016f3a:	490c      	ldr	r1, [pc, #48]	; (8016f6c <tcpip_init+0x8c>)
 8016f3c:	480c      	ldr	r0, [pc, #48]	; (8016f70 <tcpip_init+0x90>)
 8016f3e:	f00d faed 	bl	802451c <sys_thread_new>
}
 8016f42:	bf00      	nop
 8016f44:	3708      	adds	r7, #8
 8016f46:	46bd      	mov	sp, r7
 8016f48:	bd80      	pop	{r7, pc}
 8016f4a:	bf00      	nop
 8016f4c:	20013170 	.word	0x20013170
 8016f50:	20013174 	.word	0x20013174
 8016f54:	20013178 	.word	0x20013178
 8016f58:	08028ba0 	.word	0x08028ba0
 8016f5c:	08028c28 	.word	0x08028c28
 8016f60:	08028bf0 	.word	0x08028bf0
 8016f64:	20016b3c 	.word	0x20016b3c
 8016f68:	08028c4c 	.word	0x08028c4c
 8016f6c:	08016c79 	.word	0x08016c79
 8016f70:	08028c70 	.word	0x08028c70

08016f74 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8016f74:	b480      	push	{r7}
 8016f76:	b083      	sub	sp, #12
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	4603      	mov	r3, r0
 8016f7c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8016f7e:	88fb      	ldrh	r3, [r7, #6]
 8016f80:	021b      	lsls	r3, r3, #8
 8016f82:	b21a      	sxth	r2, r3
 8016f84:	88fb      	ldrh	r3, [r7, #6]
 8016f86:	0a1b      	lsrs	r3, r3, #8
 8016f88:	b29b      	uxth	r3, r3
 8016f8a:	b21b      	sxth	r3, r3
 8016f8c:	4313      	orrs	r3, r2
 8016f8e:	b21b      	sxth	r3, r3
 8016f90:	b29b      	uxth	r3, r3
}
 8016f92:	4618      	mov	r0, r3
 8016f94:	370c      	adds	r7, #12
 8016f96:	46bd      	mov	sp, r7
 8016f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f9c:	4770      	bx	lr

08016f9e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8016f9e:	b480      	push	{r7}
 8016fa0:	b083      	sub	sp, #12
 8016fa2:	af00      	add	r7, sp, #0
 8016fa4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	061a      	lsls	r2, r3, #24
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	021b      	lsls	r3, r3, #8
 8016fae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8016fb2:	431a      	orrs	r2, r3
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	0a1b      	lsrs	r3, r3, #8
 8016fb8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8016fbc:	431a      	orrs	r2, r3
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	0e1b      	lsrs	r3, r3, #24
 8016fc2:	4313      	orrs	r3, r2
}
 8016fc4:	4618      	mov	r0, r3
 8016fc6:	370c      	adds	r7, #12
 8016fc8:	46bd      	mov	sp, r7
 8016fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fce:	4770      	bx	lr

08016fd0 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8016fd0:	b480      	push	{r7}
 8016fd2:	b089      	sub	sp, #36	; 0x24
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	6078      	str	r0, [r7, #4]
 8016fd8:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8016fde:	2300      	movs	r3, #0
 8016fe0:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8016fe2:	2300      	movs	r3, #0
 8016fe4:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8016fe6:	69fb      	ldr	r3, [r7, #28]
 8016fe8:	f003 0301 	and.w	r3, r3, #1
 8016fec:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8016fee:	693b      	ldr	r3, [r7, #16]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d00d      	beq.n	8017010 <lwip_standard_chksum+0x40>
 8016ff4:	683b      	ldr	r3, [r7, #0]
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	dd0a      	ble.n	8017010 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8016ffa:	69fa      	ldr	r2, [r7, #28]
 8016ffc:	1c53      	adds	r3, r2, #1
 8016ffe:	61fb      	str	r3, [r7, #28]
 8017000:	f107 030e 	add.w	r3, r7, #14
 8017004:	3301      	adds	r3, #1
 8017006:	7812      	ldrb	r2, [r2, #0]
 8017008:	701a      	strb	r2, [r3, #0]
    len--;
 801700a:	683b      	ldr	r3, [r7, #0]
 801700c:	3b01      	subs	r3, #1
 801700e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8017010:	69fb      	ldr	r3, [r7, #28]
 8017012:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8017014:	e00a      	b.n	801702c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8017016:	69bb      	ldr	r3, [r7, #24]
 8017018:	1c9a      	adds	r2, r3, #2
 801701a:	61ba      	str	r2, [r7, #24]
 801701c:	881b      	ldrh	r3, [r3, #0]
 801701e:	461a      	mov	r2, r3
 8017020:	697b      	ldr	r3, [r7, #20]
 8017022:	4413      	add	r3, r2
 8017024:	617b      	str	r3, [r7, #20]
    len -= 2;
 8017026:	683b      	ldr	r3, [r7, #0]
 8017028:	3b02      	subs	r3, #2
 801702a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 801702c:	683b      	ldr	r3, [r7, #0]
 801702e:	2b01      	cmp	r3, #1
 8017030:	dcf1      	bgt.n	8017016 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8017032:	683b      	ldr	r3, [r7, #0]
 8017034:	2b00      	cmp	r3, #0
 8017036:	dd04      	ble.n	8017042 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8017038:	f107 030e 	add.w	r3, r7, #14
 801703c:	69ba      	ldr	r2, [r7, #24]
 801703e:	7812      	ldrb	r2, [r2, #0]
 8017040:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8017042:	89fb      	ldrh	r3, [r7, #14]
 8017044:	461a      	mov	r2, r3
 8017046:	697b      	ldr	r3, [r7, #20]
 8017048:	4413      	add	r3, r2
 801704a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 801704c:	697b      	ldr	r3, [r7, #20]
 801704e:	0c1a      	lsrs	r2, r3, #16
 8017050:	697b      	ldr	r3, [r7, #20]
 8017052:	b29b      	uxth	r3, r3
 8017054:	4413      	add	r3, r2
 8017056:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8017058:	697b      	ldr	r3, [r7, #20]
 801705a:	0c1a      	lsrs	r2, r3, #16
 801705c:	697b      	ldr	r3, [r7, #20]
 801705e:	b29b      	uxth	r3, r3
 8017060:	4413      	add	r3, r2
 8017062:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8017064:	693b      	ldr	r3, [r7, #16]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d007      	beq.n	801707a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 801706a:	697b      	ldr	r3, [r7, #20]
 801706c:	021b      	lsls	r3, r3, #8
 801706e:	b29a      	uxth	r2, r3
 8017070:	697b      	ldr	r3, [r7, #20]
 8017072:	0a1b      	lsrs	r3, r3, #8
 8017074:	b2db      	uxtb	r3, r3
 8017076:	4313      	orrs	r3, r2
 8017078:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 801707a:	697b      	ldr	r3, [r7, #20]
 801707c:	b29b      	uxth	r3, r3
}
 801707e:	4618      	mov	r0, r3
 8017080:	3724      	adds	r7, #36	; 0x24
 8017082:	46bd      	mov	sp, r7
 8017084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017088:	4770      	bx	lr

0801708a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 801708a:	b580      	push	{r7, lr}
 801708c:	b082      	sub	sp, #8
 801708e:	af00      	add	r7, sp, #0
 8017090:	6078      	str	r0, [r7, #4]
 8017092:	460b      	mov	r3, r1
 8017094:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8017096:	887b      	ldrh	r3, [r7, #2]
 8017098:	4619      	mov	r1, r3
 801709a:	6878      	ldr	r0, [r7, #4]
 801709c:	f7ff ff98 	bl	8016fd0 <lwip_standard_chksum>
 80170a0:	4603      	mov	r3, r0
 80170a2:	43db      	mvns	r3, r3
 80170a4:	b29b      	uxth	r3, r3
}
 80170a6:	4618      	mov	r0, r3
 80170a8:	3708      	adds	r7, #8
 80170aa:	46bd      	mov	sp, r7
 80170ac:	bd80      	pop	{r7, pc}

080170ae <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80170ae:	b580      	push	{r7, lr}
 80170b0:	b082      	sub	sp, #8
 80170b2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80170b4:	2300      	movs	r3, #0
 80170b6:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80170b8:	f00d f9ea 	bl	8024490 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80170bc:	f000 f8d4 	bl	8017268 <mem_init>
  memp_init();
 80170c0:	f000 fc30 	bl	8017924 <memp_init>
  pbuf_init();
  netif_init();
 80170c4:	f000 fcf6 	bl	8017ab4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80170c8:	f008 f934 	bl	801f334 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80170cc:	f001 fe20 	bl	8018d10 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80170d0:	f008 f878 	bl	801f1c4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80170d4:	bf00      	nop
 80170d6:	3708      	adds	r7, #8
 80170d8:	46bd      	mov	sp, r7
 80170da:	bd80      	pop	{r7, pc}

080170dc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80170dc:	b480      	push	{r7}
 80170de:	b083      	sub	sp, #12
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	4603      	mov	r3, r0
 80170e4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80170e6:	4b05      	ldr	r3, [pc, #20]	; (80170fc <ptr_to_mem+0x20>)
 80170e8:	681a      	ldr	r2, [r3, #0]
 80170ea:	88fb      	ldrh	r3, [r7, #6]
 80170ec:	4413      	add	r3, r2
}
 80170ee:	4618      	mov	r0, r3
 80170f0:	370c      	adds	r7, #12
 80170f2:	46bd      	mov	sp, r7
 80170f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170f8:	4770      	bx	lr
 80170fa:	bf00      	nop
 80170fc:	2001317c 	.word	0x2001317c

08017100 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8017100:	b480      	push	{r7}
 8017102:	b083      	sub	sp, #12
 8017104:	af00      	add	r7, sp, #0
 8017106:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	4a05      	ldr	r2, [pc, #20]	; (8017120 <mem_to_ptr+0x20>)
 801710c:	6812      	ldr	r2, [r2, #0]
 801710e:	1a9b      	subs	r3, r3, r2
 8017110:	b29b      	uxth	r3, r3
}
 8017112:	4618      	mov	r0, r3
 8017114:	370c      	adds	r7, #12
 8017116:	46bd      	mov	sp, r7
 8017118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801711c:	4770      	bx	lr
 801711e:	bf00      	nop
 8017120:	2001317c 	.word	0x2001317c

08017124 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8017124:	b590      	push	{r4, r7, lr}
 8017126:	b085      	sub	sp, #20
 8017128:	af00      	add	r7, sp, #0
 801712a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801712c:	4b45      	ldr	r3, [pc, #276]	; (8017244 <plug_holes+0x120>)
 801712e:	681b      	ldr	r3, [r3, #0]
 8017130:	687a      	ldr	r2, [r7, #4]
 8017132:	429a      	cmp	r2, r3
 8017134:	d206      	bcs.n	8017144 <plug_holes+0x20>
 8017136:	4b44      	ldr	r3, [pc, #272]	; (8017248 <plug_holes+0x124>)
 8017138:	f240 12df 	movw	r2, #479	; 0x1df
 801713c:	4943      	ldr	r1, [pc, #268]	; (801724c <plug_holes+0x128>)
 801713e:	4844      	ldr	r0, [pc, #272]	; (8017250 <plug_holes+0x12c>)
 8017140:	f00f fc2a 	bl	8026998 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8017144:	4b43      	ldr	r3, [pc, #268]	; (8017254 <plug_holes+0x130>)
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	687a      	ldr	r2, [r7, #4]
 801714a:	429a      	cmp	r2, r3
 801714c:	d306      	bcc.n	801715c <plug_holes+0x38>
 801714e:	4b3e      	ldr	r3, [pc, #248]	; (8017248 <plug_holes+0x124>)
 8017150:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017154:	4940      	ldr	r1, [pc, #256]	; (8017258 <plug_holes+0x134>)
 8017156:	483e      	ldr	r0, [pc, #248]	; (8017250 <plug_holes+0x12c>)
 8017158:	f00f fc1e 	bl	8026998 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	791b      	ldrb	r3, [r3, #4]
 8017160:	2b00      	cmp	r3, #0
 8017162:	d006      	beq.n	8017172 <plug_holes+0x4e>
 8017164:	4b38      	ldr	r3, [pc, #224]	; (8017248 <plug_holes+0x124>)
 8017166:	f240 12e1 	movw	r2, #481	; 0x1e1
 801716a:	493c      	ldr	r1, [pc, #240]	; (801725c <plug_holes+0x138>)
 801716c:	4838      	ldr	r0, [pc, #224]	; (8017250 <plug_holes+0x12c>)
 801716e:	f00f fc13 	bl	8026998 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	881b      	ldrh	r3, [r3, #0]
 8017176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801717a:	d906      	bls.n	801718a <plug_holes+0x66>
 801717c:	4b32      	ldr	r3, [pc, #200]	; (8017248 <plug_holes+0x124>)
 801717e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8017182:	4937      	ldr	r1, [pc, #220]	; (8017260 <plug_holes+0x13c>)
 8017184:	4832      	ldr	r0, [pc, #200]	; (8017250 <plug_holes+0x12c>)
 8017186:	f00f fc07 	bl	8026998 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	881b      	ldrh	r3, [r3, #0]
 801718e:	4618      	mov	r0, r3
 8017190:	f7ff ffa4 	bl	80170dc <ptr_to_mem>
 8017194:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8017196:	687a      	ldr	r2, [r7, #4]
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	429a      	cmp	r2, r3
 801719c:	d024      	beq.n	80171e8 <plug_holes+0xc4>
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	791b      	ldrb	r3, [r3, #4]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d120      	bne.n	80171e8 <plug_holes+0xc4>
 80171a6:	4b2b      	ldr	r3, [pc, #172]	; (8017254 <plug_holes+0x130>)
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	68fa      	ldr	r2, [r7, #12]
 80171ac:	429a      	cmp	r2, r3
 80171ae:	d01b      	beq.n	80171e8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80171b0:	4b2c      	ldr	r3, [pc, #176]	; (8017264 <plug_holes+0x140>)
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	68fa      	ldr	r2, [r7, #12]
 80171b6:	429a      	cmp	r2, r3
 80171b8:	d102      	bne.n	80171c0 <plug_holes+0x9c>
      lfree = mem;
 80171ba:	4a2a      	ldr	r2, [pc, #168]	; (8017264 <plug_holes+0x140>)
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	881a      	ldrh	r2, [r3, #0]
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	881b      	ldrh	r3, [r3, #0]
 80171cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80171d0:	d00a      	beq.n	80171e8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	881b      	ldrh	r3, [r3, #0]
 80171d6:	4618      	mov	r0, r3
 80171d8:	f7ff ff80 	bl	80170dc <ptr_to_mem>
 80171dc:	4604      	mov	r4, r0
 80171de:	6878      	ldr	r0, [r7, #4]
 80171e0:	f7ff ff8e 	bl	8017100 <mem_to_ptr>
 80171e4:	4603      	mov	r3, r0
 80171e6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	885b      	ldrh	r3, [r3, #2]
 80171ec:	4618      	mov	r0, r3
 80171ee:	f7ff ff75 	bl	80170dc <ptr_to_mem>
 80171f2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80171f4:	68ba      	ldr	r2, [r7, #8]
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	429a      	cmp	r2, r3
 80171fa:	d01f      	beq.n	801723c <plug_holes+0x118>
 80171fc:	68bb      	ldr	r3, [r7, #8]
 80171fe:	791b      	ldrb	r3, [r3, #4]
 8017200:	2b00      	cmp	r3, #0
 8017202:	d11b      	bne.n	801723c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8017204:	4b17      	ldr	r3, [pc, #92]	; (8017264 <plug_holes+0x140>)
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	687a      	ldr	r2, [r7, #4]
 801720a:	429a      	cmp	r2, r3
 801720c:	d102      	bne.n	8017214 <plug_holes+0xf0>
      lfree = pmem;
 801720e:	4a15      	ldr	r2, [pc, #84]	; (8017264 <plug_holes+0x140>)
 8017210:	68bb      	ldr	r3, [r7, #8]
 8017212:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	881a      	ldrh	r2, [r3, #0]
 8017218:	68bb      	ldr	r3, [r7, #8]
 801721a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	881b      	ldrh	r3, [r3, #0]
 8017220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017224:	d00a      	beq.n	801723c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	881b      	ldrh	r3, [r3, #0]
 801722a:	4618      	mov	r0, r3
 801722c:	f7ff ff56 	bl	80170dc <ptr_to_mem>
 8017230:	4604      	mov	r4, r0
 8017232:	68b8      	ldr	r0, [r7, #8]
 8017234:	f7ff ff64 	bl	8017100 <mem_to_ptr>
 8017238:	4603      	mov	r3, r0
 801723a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801723c:	bf00      	nop
 801723e:	3714      	adds	r7, #20
 8017240:	46bd      	mov	sp, r7
 8017242:	bd90      	pop	{r4, r7, pc}
 8017244:	2001317c 	.word	0x2001317c
 8017248:	08028c80 	.word	0x08028c80
 801724c:	08028cb0 	.word	0x08028cb0
 8017250:	08028cc8 	.word	0x08028cc8
 8017254:	20013180 	.word	0x20013180
 8017258:	08028cf0 	.word	0x08028cf0
 801725c:	08028d0c 	.word	0x08028d0c
 8017260:	08028d28 	.word	0x08028d28
 8017264:	20013188 	.word	0x20013188

08017268 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8017268:	b580      	push	{r7, lr}
 801726a:	b082      	sub	sp, #8
 801726c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801726e:	4b1f      	ldr	r3, [pc, #124]	; (80172ec <mem_init+0x84>)
 8017270:	3303      	adds	r3, #3
 8017272:	f023 0303 	bic.w	r3, r3, #3
 8017276:	461a      	mov	r2, r3
 8017278:	4b1d      	ldr	r3, [pc, #116]	; (80172f0 <mem_init+0x88>)
 801727a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801727c:	4b1c      	ldr	r3, [pc, #112]	; (80172f0 <mem_init+0x88>)
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017288:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	2200      	movs	r2, #0
 801728e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	2200      	movs	r2, #0
 8017294:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8017296:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801729a:	f7ff ff1f 	bl	80170dc <ptr_to_mem>
 801729e:	4602      	mov	r2, r0
 80172a0:	4b14      	ldr	r3, [pc, #80]	; (80172f4 <mem_init+0x8c>)
 80172a2:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 80172a4:	4b13      	ldr	r3, [pc, #76]	; (80172f4 <mem_init+0x8c>)
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	2201      	movs	r2, #1
 80172aa:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80172ac:	4b11      	ldr	r3, [pc, #68]	; (80172f4 <mem_init+0x8c>)
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80172b4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80172b6:	4b0f      	ldr	r3, [pc, #60]	; (80172f4 <mem_init+0x8c>)
 80172b8:	681b      	ldr	r3, [r3, #0]
 80172ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80172be:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80172c0:	4b0b      	ldr	r3, [pc, #44]	; (80172f0 <mem_init+0x88>)
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	4a0c      	ldr	r2, [pc, #48]	; (80172f8 <mem_init+0x90>)
 80172c6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80172c8:	480c      	ldr	r0, [pc, #48]	; (80172fc <mem_init+0x94>)
 80172ca:	f00d f8ef 	bl	80244ac <sys_mutex_new>
 80172ce:	4603      	mov	r3, r0
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d006      	beq.n	80172e2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80172d4:	4b0a      	ldr	r3, [pc, #40]	; (8017300 <mem_init+0x98>)
 80172d6:	f240 221f 	movw	r2, #543	; 0x21f
 80172da:	490a      	ldr	r1, [pc, #40]	; (8017304 <mem_init+0x9c>)
 80172dc:	480a      	ldr	r0, [pc, #40]	; (8017308 <mem_init+0xa0>)
 80172de:	f00f fb5b 	bl	8026998 <iprintf>
  }
}
 80172e2:	bf00      	nop
 80172e4:	3708      	adds	r7, #8
 80172e6:	46bd      	mov	sp, r7
 80172e8:	bd80      	pop	{r7, pc}
 80172ea:	bf00      	nop
 80172ec:	20016b58 	.word	0x20016b58
 80172f0:	2001317c 	.word	0x2001317c
 80172f4:	20013180 	.word	0x20013180
 80172f8:	20013188 	.word	0x20013188
 80172fc:	20013184 	.word	0x20013184
 8017300:	08028c80 	.word	0x08028c80
 8017304:	08028d54 	.word	0x08028d54
 8017308:	08028cc8 	.word	0x08028cc8

0801730c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801730c:	b580      	push	{r7, lr}
 801730e:	b086      	sub	sp, #24
 8017310:	af00      	add	r7, sp, #0
 8017312:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8017314:	6878      	ldr	r0, [r7, #4]
 8017316:	f7ff fef3 	bl	8017100 <mem_to_ptr>
 801731a:	4603      	mov	r3, r0
 801731c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	881b      	ldrh	r3, [r3, #0]
 8017322:	4618      	mov	r0, r3
 8017324:	f7ff feda 	bl	80170dc <ptr_to_mem>
 8017328:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	885b      	ldrh	r3, [r3, #2]
 801732e:	4618      	mov	r0, r3
 8017330:	f7ff fed4 	bl	80170dc <ptr_to_mem>
 8017334:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	881b      	ldrh	r3, [r3, #0]
 801733a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801733e:	d818      	bhi.n	8017372 <mem_link_valid+0x66>
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	885b      	ldrh	r3, [r3, #2]
 8017344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017348:	d813      	bhi.n	8017372 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801734e:	8afa      	ldrh	r2, [r7, #22]
 8017350:	429a      	cmp	r2, r3
 8017352:	d004      	beq.n	801735e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	881b      	ldrh	r3, [r3, #0]
 8017358:	8afa      	ldrh	r2, [r7, #22]
 801735a:	429a      	cmp	r2, r3
 801735c:	d109      	bne.n	8017372 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801735e:	4b08      	ldr	r3, [pc, #32]	; (8017380 <mem_link_valid+0x74>)
 8017360:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8017362:	693a      	ldr	r2, [r7, #16]
 8017364:	429a      	cmp	r2, r3
 8017366:	d006      	beq.n	8017376 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8017368:	693b      	ldr	r3, [r7, #16]
 801736a:	885b      	ldrh	r3, [r3, #2]
 801736c:	8afa      	ldrh	r2, [r7, #22]
 801736e:	429a      	cmp	r2, r3
 8017370:	d001      	beq.n	8017376 <mem_link_valid+0x6a>
    return 0;
 8017372:	2300      	movs	r3, #0
 8017374:	e000      	b.n	8017378 <mem_link_valid+0x6c>
  }
  return 1;
 8017376:	2301      	movs	r3, #1
}
 8017378:	4618      	mov	r0, r3
 801737a:	3718      	adds	r7, #24
 801737c:	46bd      	mov	sp, r7
 801737e:	bd80      	pop	{r7, pc}
 8017380:	20013180 	.word	0x20013180

08017384 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8017384:	b580      	push	{r7, lr}
 8017386:	b088      	sub	sp, #32
 8017388:	af00      	add	r7, sp, #0
 801738a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	2b00      	cmp	r3, #0
 8017390:	d070      	beq.n	8017474 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	f003 0303 	and.w	r3, r3, #3
 8017398:	2b00      	cmp	r3, #0
 801739a:	d00d      	beq.n	80173b8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801739c:	4b37      	ldr	r3, [pc, #220]	; (801747c <mem_free+0xf8>)
 801739e:	f240 2273 	movw	r2, #627	; 0x273
 80173a2:	4937      	ldr	r1, [pc, #220]	; (8017480 <mem_free+0xfc>)
 80173a4:	4837      	ldr	r0, [pc, #220]	; (8017484 <mem_free+0x100>)
 80173a6:	f00f faf7 	bl	8026998 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80173aa:	f00d f8dd 	bl	8024568 <sys_arch_protect>
 80173ae:	60f8      	str	r0, [r7, #12]
 80173b0:	68f8      	ldr	r0, [r7, #12]
 80173b2:	f00d f8e7 	bl	8024584 <sys_arch_unprotect>
    return;
 80173b6:	e05e      	b.n	8017476 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	3b08      	subs	r3, #8
 80173bc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80173be:	4b32      	ldr	r3, [pc, #200]	; (8017488 <mem_free+0x104>)
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	69fa      	ldr	r2, [r7, #28]
 80173c4:	429a      	cmp	r2, r3
 80173c6:	d306      	bcc.n	80173d6 <mem_free+0x52>
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	f103 020c 	add.w	r2, r3, #12
 80173ce:	4b2f      	ldr	r3, [pc, #188]	; (801748c <mem_free+0x108>)
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	429a      	cmp	r2, r3
 80173d4:	d90d      	bls.n	80173f2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80173d6:	4b29      	ldr	r3, [pc, #164]	; (801747c <mem_free+0xf8>)
 80173d8:	f240 227f 	movw	r2, #639	; 0x27f
 80173dc:	492c      	ldr	r1, [pc, #176]	; (8017490 <mem_free+0x10c>)
 80173de:	4829      	ldr	r0, [pc, #164]	; (8017484 <mem_free+0x100>)
 80173e0:	f00f fada 	bl	8026998 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80173e4:	f00d f8c0 	bl	8024568 <sys_arch_protect>
 80173e8:	6138      	str	r0, [r7, #16]
 80173ea:	6938      	ldr	r0, [r7, #16]
 80173ec:	f00d f8ca 	bl	8024584 <sys_arch_unprotect>
    return;
 80173f0:	e041      	b.n	8017476 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80173f2:	4828      	ldr	r0, [pc, #160]	; (8017494 <mem_free+0x110>)
 80173f4:	f00d f876 	bl	80244e4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80173f8:	69fb      	ldr	r3, [r7, #28]
 80173fa:	791b      	ldrb	r3, [r3, #4]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d110      	bne.n	8017422 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8017400:	4b1e      	ldr	r3, [pc, #120]	; (801747c <mem_free+0xf8>)
 8017402:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8017406:	4924      	ldr	r1, [pc, #144]	; (8017498 <mem_free+0x114>)
 8017408:	481e      	ldr	r0, [pc, #120]	; (8017484 <mem_free+0x100>)
 801740a:	f00f fac5 	bl	8026998 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801740e:	4821      	ldr	r0, [pc, #132]	; (8017494 <mem_free+0x110>)
 8017410:	f00d f877 	bl	8024502 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017414:	f00d f8a8 	bl	8024568 <sys_arch_protect>
 8017418:	6178      	str	r0, [r7, #20]
 801741a:	6978      	ldr	r0, [r7, #20]
 801741c:	f00d f8b2 	bl	8024584 <sys_arch_unprotect>
    return;
 8017420:	e029      	b.n	8017476 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8017422:	69f8      	ldr	r0, [r7, #28]
 8017424:	f7ff ff72 	bl	801730c <mem_link_valid>
 8017428:	4603      	mov	r3, r0
 801742a:	2b00      	cmp	r3, #0
 801742c:	d110      	bne.n	8017450 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801742e:	4b13      	ldr	r3, [pc, #76]	; (801747c <mem_free+0xf8>)
 8017430:	f240 2295 	movw	r2, #661	; 0x295
 8017434:	4919      	ldr	r1, [pc, #100]	; (801749c <mem_free+0x118>)
 8017436:	4813      	ldr	r0, [pc, #76]	; (8017484 <mem_free+0x100>)
 8017438:	f00f faae 	bl	8026998 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801743c:	4815      	ldr	r0, [pc, #84]	; (8017494 <mem_free+0x110>)
 801743e:	f00d f860 	bl	8024502 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017442:	f00d f891 	bl	8024568 <sys_arch_protect>
 8017446:	61b8      	str	r0, [r7, #24]
 8017448:	69b8      	ldr	r0, [r7, #24]
 801744a:	f00d f89b 	bl	8024584 <sys_arch_unprotect>
    return;
 801744e:	e012      	b.n	8017476 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8017450:	69fb      	ldr	r3, [r7, #28]
 8017452:	2200      	movs	r2, #0
 8017454:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8017456:	4b12      	ldr	r3, [pc, #72]	; (80174a0 <mem_free+0x11c>)
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	69fa      	ldr	r2, [r7, #28]
 801745c:	429a      	cmp	r2, r3
 801745e:	d202      	bcs.n	8017466 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8017460:	4a0f      	ldr	r2, [pc, #60]	; (80174a0 <mem_free+0x11c>)
 8017462:	69fb      	ldr	r3, [r7, #28]
 8017464:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8017466:	69f8      	ldr	r0, [r7, #28]
 8017468:	f7ff fe5c 	bl	8017124 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801746c:	4809      	ldr	r0, [pc, #36]	; (8017494 <mem_free+0x110>)
 801746e:	f00d f848 	bl	8024502 <sys_mutex_unlock>
 8017472:	e000      	b.n	8017476 <mem_free+0xf2>
    return;
 8017474:	bf00      	nop
}
 8017476:	3720      	adds	r7, #32
 8017478:	46bd      	mov	sp, r7
 801747a:	bd80      	pop	{r7, pc}
 801747c:	08028c80 	.word	0x08028c80
 8017480:	08028d70 	.word	0x08028d70
 8017484:	08028cc8 	.word	0x08028cc8
 8017488:	2001317c 	.word	0x2001317c
 801748c:	20013180 	.word	0x20013180
 8017490:	08028d94 	.word	0x08028d94
 8017494:	20013184 	.word	0x20013184
 8017498:	08028db0 	.word	0x08028db0
 801749c:	08028dd8 	.word	0x08028dd8
 80174a0:	20013188 	.word	0x20013188

080174a4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80174a4:	b580      	push	{r7, lr}
 80174a6:	b088      	sub	sp, #32
 80174a8:	af00      	add	r7, sp, #0
 80174aa:	6078      	str	r0, [r7, #4]
 80174ac:	460b      	mov	r3, r1
 80174ae:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80174b0:	887b      	ldrh	r3, [r7, #2]
 80174b2:	3303      	adds	r3, #3
 80174b4:	b29b      	uxth	r3, r3
 80174b6:	f023 0303 	bic.w	r3, r3, #3
 80174ba:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80174bc:	8bfb      	ldrh	r3, [r7, #30]
 80174be:	2b0b      	cmp	r3, #11
 80174c0:	d801      	bhi.n	80174c6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80174c2:	230c      	movs	r3, #12
 80174c4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80174c6:	8bfb      	ldrh	r3, [r7, #30]
 80174c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80174cc:	d803      	bhi.n	80174d6 <mem_trim+0x32>
 80174ce:	8bfa      	ldrh	r2, [r7, #30]
 80174d0:	887b      	ldrh	r3, [r7, #2]
 80174d2:	429a      	cmp	r2, r3
 80174d4:	d201      	bcs.n	80174da <mem_trim+0x36>
    return NULL;
 80174d6:	2300      	movs	r3, #0
 80174d8:	e0d8      	b.n	801768c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80174da:	4b6e      	ldr	r3, [pc, #440]	; (8017694 <mem_trim+0x1f0>)
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	687a      	ldr	r2, [r7, #4]
 80174e0:	429a      	cmp	r2, r3
 80174e2:	d304      	bcc.n	80174ee <mem_trim+0x4a>
 80174e4:	4b6c      	ldr	r3, [pc, #432]	; (8017698 <mem_trim+0x1f4>)
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	687a      	ldr	r2, [r7, #4]
 80174ea:	429a      	cmp	r2, r3
 80174ec:	d306      	bcc.n	80174fc <mem_trim+0x58>
 80174ee:	4b6b      	ldr	r3, [pc, #428]	; (801769c <mem_trim+0x1f8>)
 80174f0:	f240 22d2 	movw	r2, #722	; 0x2d2
 80174f4:	496a      	ldr	r1, [pc, #424]	; (80176a0 <mem_trim+0x1fc>)
 80174f6:	486b      	ldr	r0, [pc, #428]	; (80176a4 <mem_trim+0x200>)
 80174f8:	f00f fa4e 	bl	8026998 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80174fc:	4b65      	ldr	r3, [pc, #404]	; (8017694 <mem_trim+0x1f0>)
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	687a      	ldr	r2, [r7, #4]
 8017502:	429a      	cmp	r2, r3
 8017504:	d304      	bcc.n	8017510 <mem_trim+0x6c>
 8017506:	4b64      	ldr	r3, [pc, #400]	; (8017698 <mem_trim+0x1f4>)
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	687a      	ldr	r2, [r7, #4]
 801750c:	429a      	cmp	r2, r3
 801750e:	d307      	bcc.n	8017520 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017510:	f00d f82a 	bl	8024568 <sys_arch_protect>
 8017514:	60b8      	str	r0, [r7, #8]
 8017516:	68b8      	ldr	r0, [r7, #8]
 8017518:	f00d f834 	bl	8024584 <sys_arch_unprotect>
    return rmem;
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	e0b5      	b.n	801768c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	3b08      	subs	r3, #8
 8017524:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8017526:	69b8      	ldr	r0, [r7, #24]
 8017528:	f7ff fdea 	bl	8017100 <mem_to_ptr>
 801752c:	4603      	mov	r3, r0
 801752e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8017530:	69bb      	ldr	r3, [r7, #24]
 8017532:	881a      	ldrh	r2, [r3, #0]
 8017534:	8afb      	ldrh	r3, [r7, #22]
 8017536:	1ad3      	subs	r3, r2, r3
 8017538:	b29b      	uxth	r3, r3
 801753a:	3b08      	subs	r3, #8
 801753c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801753e:	8bfa      	ldrh	r2, [r7, #30]
 8017540:	8abb      	ldrh	r3, [r7, #20]
 8017542:	429a      	cmp	r2, r3
 8017544:	d906      	bls.n	8017554 <mem_trim+0xb0>
 8017546:	4b55      	ldr	r3, [pc, #340]	; (801769c <mem_trim+0x1f8>)
 8017548:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801754c:	4956      	ldr	r1, [pc, #344]	; (80176a8 <mem_trim+0x204>)
 801754e:	4855      	ldr	r0, [pc, #340]	; (80176a4 <mem_trim+0x200>)
 8017550:	f00f fa22 	bl	8026998 <iprintf>
  if (newsize > size) {
 8017554:	8bfa      	ldrh	r2, [r7, #30]
 8017556:	8abb      	ldrh	r3, [r7, #20]
 8017558:	429a      	cmp	r2, r3
 801755a:	d901      	bls.n	8017560 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 801755c:	2300      	movs	r3, #0
 801755e:	e095      	b.n	801768c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8017560:	8bfa      	ldrh	r2, [r7, #30]
 8017562:	8abb      	ldrh	r3, [r7, #20]
 8017564:	429a      	cmp	r2, r3
 8017566:	d101      	bne.n	801756c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	e08f      	b.n	801768c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801756c:	484f      	ldr	r0, [pc, #316]	; (80176ac <mem_trim+0x208>)
 801756e:	f00c ffb9 	bl	80244e4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8017572:	69bb      	ldr	r3, [r7, #24]
 8017574:	881b      	ldrh	r3, [r3, #0]
 8017576:	4618      	mov	r0, r3
 8017578:	f7ff fdb0 	bl	80170dc <ptr_to_mem>
 801757c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801757e:	693b      	ldr	r3, [r7, #16]
 8017580:	791b      	ldrb	r3, [r3, #4]
 8017582:	2b00      	cmp	r3, #0
 8017584:	d13f      	bne.n	8017606 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8017586:	69bb      	ldr	r3, [r7, #24]
 8017588:	881b      	ldrh	r3, [r3, #0]
 801758a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801758e:	d106      	bne.n	801759e <mem_trim+0xfa>
 8017590:	4b42      	ldr	r3, [pc, #264]	; (801769c <mem_trim+0x1f8>)
 8017592:	f240 22f5 	movw	r2, #757	; 0x2f5
 8017596:	4946      	ldr	r1, [pc, #280]	; (80176b0 <mem_trim+0x20c>)
 8017598:	4842      	ldr	r0, [pc, #264]	; (80176a4 <mem_trim+0x200>)
 801759a:	f00f f9fd 	bl	8026998 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801759e:	693b      	ldr	r3, [r7, #16]
 80175a0:	881b      	ldrh	r3, [r3, #0]
 80175a2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80175a4:	8afa      	ldrh	r2, [r7, #22]
 80175a6:	8bfb      	ldrh	r3, [r7, #30]
 80175a8:	4413      	add	r3, r2
 80175aa:	b29b      	uxth	r3, r3
 80175ac:	3308      	adds	r3, #8
 80175ae:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80175b0:	4b40      	ldr	r3, [pc, #256]	; (80176b4 <mem_trim+0x210>)
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	693a      	ldr	r2, [r7, #16]
 80175b6:	429a      	cmp	r2, r3
 80175b8:	d106      	bne.n	80175c8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80175ba:	89fb      	ldrh	r3, [r7, #14]
 80175bc:	4618      	mov	r0, r3
 80175be:	f7ff fd8d 	bl	80170dc <ptr_to_mem>
 80175c2:	4602      	mov	r2, r0
 80175c4:	4b3b      	ldr	r3, [pc, #236]	; (80176b4 <mem_trim+0x210>)
 80175c6:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80175c8:	89fb      	ldrh	r3, [r7, #14]
 80175ca:	4618      	mov	r0, r3
 80175cc:	f7ff fd86 	bl	80170dc <ptr_to_mem>
 80175d0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80175d2:	693b      	ldr	r3, [r7, #16]
 80175d4:	2200      	movs	r2, #0
 80175d6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80175d8:	693b      	ldr	r3, [r7, #16]
 80175da:	89ba      	ldrh	r2, [r7, #12]
 80175dc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80175de:	693b      	ldr	r3, [r7, #16]
 80175e0:	8afa      	ldrh	r2, [r7, #22]
 80175e2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80175e4:	69bb      	ldr	r3, [r7, #24]
 80175e6:	89fa      	ldrh	r2, [r7, #14]
 80175e8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80175ea:	693b      	ldr	r3, [r7, #16]
 80175ec:	881b      	ldrh	r3, [r3, #0]
 80175ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80175f2:	d047      	beq.n	8017684 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80175f4:	693b      	ldr	r3, [r7, #16]
 80175f6:	881b      	ldrh	r3, [r3, #0]
 80175f8:	4618      	mov	r0, r3
 80175fa:	f7ff fd6f 	bl	80170dc <ptr_to_mem>
 80175fe:	4602      	mov	r2, r0
 8017600:	89fb      	ldrh	r3, [r7, #14]
 8017602:	8053      	strh	r3, [r2, #2]
 8017604:	e03e      	b.n	8017684 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8017606:	8bfb      	ldrh	r3, [r7, #30]
 8017608:	f103 0214 	add.w	r2, r3, #20
 801760c:	8abb      	ldrh	r3, [r7, #20]
 801760e:	429a      	cmp	r2, r3
 8017610:	d838      	bhi.n	8017684 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8017612:	8afa      	ldrh	r2, [r7, #22]
 8017614:	8bfb      	ldrh	r3, [r7, #30]
 8017616:	4413      	add	r3, r2
 8017618:	b29b      	uxth	r3, r3
 801761a:	3308      	adds	r3, #8
 801761c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801761e:	69bb      	ldr	r3, [r7, #24]
 8017620:	881b      	ldrh	r3, [r3, #0]
 8017622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017626:	d106      	bne.n	8017636 <mem_trim+0x192>
 8017628:	4b1c      	ldr	r3, [pc, #112]	; (801769c <mem_trim+0x1f8>)
 801762a:	f240 3216 	movw	r2, #790	; 0x316
 801762e:	4920      	ldr	r1, [pc, #128]	; (80176b0 <mem_trim+0x20c>)
 8017630:	481c      	ldr	r0, [pc, #112]	; (80176a4 <mem_trim+0x200>)
 8017632:	f00f f9b1 	bl	8026998 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8017636:	89fb      	ldrh	r3, [r7, #14]
 8017638:	4618      	mov	r0, r3
 801763a:	f7ff fd4f 	bl	80170dc <ptr_to_mem>
 801763e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8017640:	4b1c      	ldr	r3, [pc, #112]	; (80176b4 <mem_trim+0x210>)
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	693a      	ldr	r2, [r7, #16]
 8017646:	429a      	cmp	r2, r3
 8017648:	d202      	bcs.n	8017650 <mem_trim+0x1ac>
      lfree = mem2;
 801764a:	4a1a      	ldr	r2, [pc, #104]	; (80176b4 <mem_trim+0x210>)
 801764c:	693b      	ldr	r3, [r7, #16]
 801764e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8017650:	693b      	ldr	r3, [r7, #16]
 8017652:	2200      	movs	r2, #0
 8017654:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8017656:	69bb      	ldr	r3, [r7, #24]
 8017658:	881a      	ldrh	r2, [r3, #0]
 801765a:	693b      	ldr	r3, [r7, #16]
 801765c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801765e:	693b      	ldr	r3, [r7, #16]
 8017660:	8afa      	ldrh	r2, [r7, #22]
 8017662:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8017664:	69bb      	ldr	r3, [r7, #24]
 8017666:	89fa      	ldrh	r2, [r7, #14]
 8017668:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801766a:	693b      	ldr	r3, [r7, #16]
 801766c:	881b      	ldrh	r3, [r3, #0]
 801766e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017672:	d007      	beq.n	8017684 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8017674:	693b      	ldr	r3, [r7, #16]
 8017676:	881b      	ldrh	r3, [r3, #0]
 8017678:	4618      	mov	r0, r3
 801767a:	f7ff fd2f 	bl	80170dc <ptr_to_mem>
 801767e:	4602      	mov	r2, r0
 8017680:	89fb      	ldrh	r3, [r7, #14]
 8017682:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8017684:	4809      	ldr	r0, [pc, #36]	; (80176ac <mem_trim+0x208>)
 8017686:	f00c ff3c 	bl	8024502 <sys_mutex_unlock>
  return rmem;
 801768a:	687b      	ldr	r3, [r7, #4]
}
 801768c:	4618      	mov	r0, r3
 801768e:	3720      	adds	r7, #32
 8017690:	46bd      	mov	sp, r7
 8017692:	bd80      	pop	{r7, pc}
 8017694:	2001317c 	.word	0x2001317c
 8017698:	20013180 	.word	0x20013180
 801769c:	08028c80 	.word	0x08028c80
 80176a0:	08028e0c 	.word	0x08028e0c
 80176a4:	08028cc8 	.word	0x08028cc8
 80176a8:	08028e24 	.word	0x08028e24
 80176ac:	20013184 	.word	0x20013184
 80176b0:	08028e44 	.word	0x08028e44
 80176b4:	20013188 	.word	0x20013188

080176b8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80176b8:	b580      	push	{r7, lr}
 80176ba:	b088      	sub	sp, #32
 80176bc:	af00      	add	r7, sp, #0
 80176be:	4603      	mov	r3, r0
 80176c0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80176c2:	88fb      	ldrh	r3, [r7, #6]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d101      	bne.n	80176cc <mem_malloc+0x14>
    return NULL;
 80176c8:	2300      	movs	r3, #0
 80176ca:	e0e2      	b.n	8017892 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80176cc:	88fb      	ldrh	r3, [r7, #6]
 80176ce:	3303      	adds	r3, #3
 80176d0:	b29b      	uxth	r3, r3
 80176d2:	f023 0303 	bic.w	r3, r3, #3
 80176d6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80176d8:	8bbb      	ldrh	r3, [r7, #28]
 80176da:	2b0b      	cmp	r3, #11
 80176dc:	d801      	bhi.n	80176e2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80176de:	230c      	movs	r3, #12
 80176e0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80176e2:	8bbb      	ldrh	r3, [r7, #28]
 80176e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80176e8:	d803      	bhi.n	80176f2 <mem_malloc+0x3a>
 80176ea:	8bba      	ldrh	r2, [r7, #28]
 80176ec:	88fb      	ldrh	r3, [r7, #6]
 80176ee:	429a      	cmp	r2, r3
 80176f0:	d201      	bcs.n	80176f6 <mem_malloc+0x3e>
    return NULL;
 80176f2:	2300      	movs	r3, #0
 80176f4:	e0cd      	b.n	8017892 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80176f6:	4869      	ldr	r0, [pc, #420]	; (801789c <mem_malloc+0x1e4>)
 80176f8:	f00c fef4 	bl	80244e4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80176fc:	4b68      	ldr	r3, [pc, #416]	; (80178a0 <mem_malloc+0x1e8>)
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	4618      	mov	r0, r3
 8017702:	f7ff fcfd 	bl	8017100 <mem_to_ptr>
 8017706:	4603      	mov	r3, r0
 8017708:	83fb      	strh	r3, [r7, #30]
 801770a:	e0b7      	b.n	801787c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801770c:	8bfb      	ldrh	r3, [r7, #30]
 801770e:	4618      	mov	r0, r3
 8017710:	f7ff fce4 	bl	80170dc <ptr_to_mem>
 8017714:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8017716:	697b      	ldr	r3, [r7, #20]
 8017718:	791b      	ldrb	r3, [r3, #4]
 801771a:	2b00      	cmp	r3, #0
 801771c:	f040 80a7 	bne.w	801786e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8017720:	697b      	ldr	r3, [r7, #20]
 8017722:	881b      	ldrh	r3, [r3, #0]
 8017724:	461a      	mov	r2, r3
 8017726:	8bfb      	ldrh	r3, [r7, #30]
 8017728:	1ad3      	subs	r3, r2, r3
 801772a:	f1a3 0208 	sub.w	r2, r3, #8
 801772e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8017730:	429a      	cmp	r2, r3
 8017732:	f0c0 809c 	bcc.w	801786e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8017736:	697b      	ldr	r3, [r7, #20]
 8017738:	881b      	ldrh	r3, [r3, #0]
 801773a:	461a      	mov	r2, r3
 801773c:	8bfb      	ldrh	r3, [r7, #30]
 801773e:	1ad3      	subs	r3, r2, r3
 8017740:	f1a3 0208 	sub.w	r2, r3, #8
 8017744:	8bbb      	ldrh	r3, [r7, #28]
 8017746:	3314      	adds	r3, #20
 8017748:	429a      	cmp	r2, r3
 801774a:	d333      	bcc.n	80177b4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801774c:	8bfa      	ldrh	r2, [r7, #30]
 801774e:	8bbb      	ldrh	r3, [r7, #28]
 8017750:	4413      	add	r3, r2
 8017752:	b29b      	uxth	r3, r3
 8017754:	3308      	adds	r3, #8
 8017756:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8017758:	8a7b      	ldrh	r3, [r7, #18]
 801775a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801775e:	d106      	bne.n	801776e <mem_malloc+0xb6>
 8017760:	4b50      	ldr	r3, [pc, #320]	; (80178a4 <mem_malloc+0x1ec>)
 8017762:	f240 3287 	movw	r2, #903	; 0x387
 8017766:	4950      	ldr	r1, [pc, #320]	; (80178a8 <mem_malloc+0x1f0>)
 8017768:	4850      	ldr	r0, [pc, #320]	; (80178ac <mem_malloc+0x1f4>)
 801776a:	f00f f915 	bl	8026998 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801776e:	8a7b      	ldrh	r3, [r7, #18]
 8017770:	4618      	mov	r0, r3
 8017772:	f7ff fcb3 	bl	80170dc <ptr_to_mem>
 8017776:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8017778:	68fb      	ldr	r3, [r7, #12]
 801777a:	2200      	movs	r2, #0
 801777c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801777e:	697b      	ldr	r3, [r7, #20]
 8017780:	881a      	ldrh	r2, [r3, #0]
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	8bfa      	ldrh	r2, [r7, #30]
 801778a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801778c:	697b      	ldr	r3, [r7, #20]
 801778e:	8a7a      	ldrh	r2, [r7, #18]
 8017790:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8017792:	697b      	ldr	r3, [r7, #20]
 8017794:	2201      	movs	r2, #1
 8017796:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	881b      	ldrh	r3, [r3, #0]
 801779c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80177a0:	d00b      	beq.n	80177ba <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	881b      	ldrh	r3, [r3, #0]
 80177a6:	4618      	mov	r0, r3
 80177a8:	f7ff fc98 	bl	80170dc <ptr_to_mem>
 80177ac:	4602      	mov	r2, r0
 80177ae:	8a7b      	ldrh	r3, [r7, #18]
 80177b0:	8053      	strh	r3, [r2, #2]
 80177b2:	e002      	b.n	80177ba <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80177b4:	697b      	ldr	r3, [r7, #20]
 80177b6:	2201      	movs	r2, #1
 80177b8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80177ba:	4b39      	ldr	r3, [pc, #228]	; (80178a0 <mem_malloc+0x1e8>)
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	697a      	ldr	r2, [r7, #20]
 80177c0:	429a      	cmp	r2, r3
 80177c2:	d127      	bne.n	8017814 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80177c4:	4b36      	ldr	r3, [pc, #216]	; (80178a0 <mem_malloc+0x1e8>)
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80177ca:	e005      	b.n	80177d8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80177cc:	69bb      	ldr	r3, [r7, #24]
 80177ce:	881b      	ldrh	r3, [r3, #0]
 80177d0:	4618      	mov	r0, r3
 80177d2:	f7ff fc83 	bl	80170dc <ptr_to_mem>
 80177d6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80177d8:	69bb      	ldr	r3, [r7, #24]
 80177da:	791b      	ldrb	r3, [r3, #4]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d004      	beq.n	80177ea <mem_malloc+0x132>
 80177e0:	4b33      	ldr	r3, [pc, #204]	; (80178b0 <mem_malloc+0x1f8>)
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	69ba      	ldr	r2, [r7, #24]
 80177e6:	429a      	cmp	r2, r3
 80177e8:	d1f0      	bne.n	80177cc <mem_malloc+0x114>
          }
          lfree = cur;
 80177ea:	4a2d      	ldr	r2, [pc, #180]	; (80178a0 <mem_malloc+0x1e8>)
 80177ec:	69bb      	ldr	r3, [r7, #24]
 80177ee:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80177f0:	4b2b      	ldr	r3, [pc, #172]	; (80178a0 <mem_malloc+0x1e8>)
 80177f2:	681a      	ldr	r2, [r3, #0]
 80177f4:	4b2e      	ldr	r3, [pc, #184]	; (80178b0 <mem_malloc+0x1f8>)
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	429a      	cmp	r2, r3
 80177fa:	d00b      	beq.n	8017814 <mem_malloc+0x15c>
 80177fc:	4b28      	ldr	r3, [pc, #160]	; (80178a0 <mem_malloc+0x1e8>)
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	791b      	ldrb	r3, [r3, #4]
 8017802:	2b00      	cmp	r3, #0
 8017804:	d006      	beq.n	8017814 <mem_malloc+0x15c>
 8017806:	4b27      	ldr	r3, [pc, #156]	; (80178a4 <mem_malloc+0x1ec>)
 8017808:	f240 32b5 	movw	r2, #949	; 0x3b5
 801780c:	4929      	ldr	r1, [pc, #164]	; (80178b4 <mem_malloc+0x1fc>)
 801780e:	4827      	ldr	r0, [pc, #156]	; (80178ac <mem_malloc+0x1f4>)
 8017810:	f00f f8c2 	bl	8026998 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8017814:	4821      	ldr	r0, [pc, #132]	; (801789c <mem_malloc+0x1e4>)
 8017816:	f00c fe74 	bl	8024502 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801781a:	8bba      	ldrh	r2, [r7, #28]
 801781c:	697b      	ldr	r3, [r7, #20]
 801781e:	4413      	add	r3, r2
 8017820:	3308      	adds	r3, #8
 8017822:	4a23      	ldr	r2, [pc, #140]	; (80178b0 <mem_malloc+0x1f8>)
 8017824:	6812      	ldr	r2, [r2, #0]
 8017826:	4293      	cmp	r3, r2
 8017828:	d906      	bls.n	8017838 <mem_malloc+0x180>
 801782a:	4b1e      	ldr	r3, [pc, #120]	; (80178a4 <mem_malloc+0x1ec>)
 801782c:	f240 32ba 	movw	r2, #954	; 0x3ba
 8017830:	4921      	ldr	r1, [pc, #132]	; (80178b8 <mem_malloc+0x200>)
 8017832:	481e      	ldr	r0, [pc, #120]	; (80178ac <mem_malloc+0x1f4>)
 8017834:	f00f f8b0 	bl	8026998 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8017838:	697b      	ldr	r3, [r7, #20]
 801783a:	f003 0303 	and.w	r3, r3, #3
 801783e:	2b00      	cmp	r3, #0
 8017840:	d006      	beq.n	8017850 <mem_malloc+0x198>
 8017842:	4b18      	ldr	r3, [pc, #96]	; (80178a4 <mem_malloc+0x1ec>)
 8017844:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8017848:	491c      	ldr	r1, [pc, #112]	; (80178bc <mem_malloc+0x204>)
 801784a:	4818      	ldr	r0, [pc, #96]	; (80178ac <mem_malloc+0x1f4>)
 801784c:	f00f f8a4 	bl	8026998 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8017850:	697b      	ldr	r3, [r7, #20]
 8017852:	f003 0303 	and.w	r3, r3, #3
 8017856:	2b00      	cmp	r3, #0
 8017858:	d006      	beq.n	8017868 <mem_malloc+0x1b0>
 801785a:	4b12      	ldr	r3, [pc, #72]	; (80178a4 <mem_malloc+0x1ec>)
 801785c:	f240 32be 	movw	r2, #958	; 0x3be
 8017860:	4917      	ldr	r1, [pc, #92]	; (80178c0 <mem_malloc+0x208>)
 8017862:	4812      	ldr	r0, [pc, #72]	; (80178ac <mem_malloc+0x1f4>)
 8017864:	f00f f898 	bl	8026998 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8017868:	697b      	ldr	r3, [r7, #20]
 801786a:	3308      	adds	r3, #8
 801786c:	e011      	b.n	8017892 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801786e:	8bfb      	ldrh	r3, [r7, #30]
 8017870:	4618      	mov	r0, r3
 8017872:	f7ff fc33 	bl	80170dc <ptr_to_mem>
 8017876:	4603      	mov	r3, r0
 8017878:	881b      	ldrh	r3, [r3, #0]
 801787a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801787c:	8bfa      	ldrh	r2, [r7, #30]
 801787e:	8bbb      	ldrh	r3, [r7, #28]
 8017880:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8017884:	429a      	cmp	r2, r3
 8017886:	f4ff af41 	bcc.w	801770c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801788a:	4804      	ldr	r0, [pc, #16]	; (801789c <mem_malloc+0x1e4>)
 801788c:	f00c fe39 	bl	8024502 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8017890:	2300      	movs	r3, #0
}
 8017892:	4618      	mov	r0, r3
 8017894:	3720      	adds	r7, #32
 8017896:	46bd      	mov	sp, r7
 8017898:	bd80      	pop	{r7, pc}
 801789a:	bf00      	nop
 801789c:	20013184 	.word	0x20013184
 80178a0:	20013188 	.word	0x20013188
 80178a4:	08028c80 	.word	0x08028c80
 80178a8:	08028e44 	.word	0x08028e44
 80178ac:	08028cc8 	.word	0x08028cc8
 80178b0:	20013180 	.word	0x20013180
 80178b4:	08028e58 	.word	0x08028e58
 80178b8:	08028e74 	.word	0x08028e74
 80178bc:	08028ea4 	.word	0x08028ea4
 80178c0:	08028ed4 	.word	0x08028ed4

080178c4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80178c4:	b480      	push	{r7}
 80178c6:	b085      	sub	sp, #20
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	689b      	ldr	r3, [r3, #8]
 80178d0:	2200      	movs	r2, #0
 80178d2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	685b      	ldr	r3, [r3, #4]
 80178d8:	3303      	adds	r3, #3
 80178da:	f023 0303 	bic.w	r3, r3, #3
 80178de:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80178e0:	2300      	movs	r3, #0
 80178e2:	60fb      	str	r3, [r7, #12]
 80178e4:	e011      	b.n	801790a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	689b      	ldr	r3, [r3, #8]
 80178ea:	681a      	ldr	r2, [r3, #0]
 80178ec:	68bb      	ldr	r3, [r7, #8]
 80178ee:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	689b      	ldr	r3, [r3, #8]
 80178f4:	68ba      	ldr	r2, [r7, #8]
 80178f6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	881b      	ldrh	r3, [r3, #0]
 80178fc:	461a      	mov	r2, r3
 80178fe:	68bb      	ldr	r3, [r7, #8]
 8017900:	4413      	add	r3, r2
 8017902:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	3301      	adds	r3, #1
 8017908:	60fb      	str	r3, [r7, #12]
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	885b      	ldrh	r3, [r3, #2]
 801790e:	461a      	mov	r2, r3
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	4293      	cmp	r3, r2
 8017914:	dbe7      	blt.n	80178e6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8017916:	bf00      	nop
 8017918:	3714      	adds	r7, #20
 801791a:	46bd      	mov	sp, r7
 801791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017920:	4770      	bx	lr
	...

08017924 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8017924:	b580      	push	{r7, lr}
 8017926:	b082      	sub	sp, #8
 8017928:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801792a:	2300      	movs	r3, #0
 801792c:	80fb      	strh	r3, [r7, #6]
 801792e:	e009      	b.n	8017944 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8017930:	88fb      	ldrh	r3, [r7, #6]
 8017932:	4a08      	ldr	r2, [pc, #32]	; (8017954 <memp_init+0x30>)
 8017934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017938:	4618      	mov	r0, r3
 801793a:	f7ff ffc3 	bl	80178c4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801793e:	88fb      	ldrh	r3, [r7, #6]
 8017940:	3301      	adds	r3, #1
 8017942:	80fb      	strh	r3, [r7, #6]
 8017944:	88fb      	ldrh	r3, [r7, #6]
 8017946:	2b0c      	cmp	r3, #12
 8017948:	d9f2      	bls.n	8017930 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801794a:	bf00      	nop
 801794c:	3708      	adds	r7, #8
 801794e:	46bd      	mov	sp, r7
 8017950:	bd80      	pop	{r7, pc}
 8017952:	bf00      	nop
 8017954:	0802bd54 	.word	0x0802bd54

08017958 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8017958:	b580      	push	{r7, lr}
 801795a:	b084      	sub	sp, #16
 801795c:	af00      	add	r7, sp, #0
 801795e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8017960:	f00c fe02 	bl	8024568 <sys_arch_protect>
 8017964:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	689b      	ldr	r3, [r3, #8]
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801796e:	68bb      	ldr	r3, [r7, #8]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d015      	beq.n	80179a0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	689b      	ldr	r3, [r3, #8]
 8017978:	68ba      	ldr	r2, [r7, #8]
 801797a:	6812      	ldr	r2, [r2, #0]
 801797c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801797e:	68bb      	ldr	r3, [r7, #8]
 8017980:	f003 0303 	and.w	r3, r3, #3
 8017984:	2b00      	cmp	r3, #0
 8017986:	d006      	beq.n	8017996 <do_memp_malloc_pool+0x3e>
 8017988:	4b09      	ldr	r3, [pc, #36]	; (80179b0 <do_memp_malloc_pool+0x58>)
 801798a:	f240 1219 	movw	r2, #281	; 0x119
 801798e:	4909      	ldr	r1, [pc, #36]	; (80179b4 <do_memp_malloc_pool+0x5c>)
 8017990:	4809      	ldr	r0, [pc, #36]	; (80179b8 <do_memp_malloc_pool+0x60>)
 8017992:	f00f f801 	bl	8026998 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8017996:	68f8      	ldr	r0, [r7, #12]
 8017998:	f00c fdf4 	bl	8024584 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801799c:	68bb      	ldr	r3, [r7, #8]
 801799e:	e003      	b.n	80179a8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80179a0:	68f8      	ldr	r0, [r7, #12]
 80179a2:	f00c fdef 	bl	8024584 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80179a6:	2300      	movs	r3, #0
}
 80179a8:	4618      	mov	r0, r3
 80179aa:	3710      	adds	r7, #16
 80179ac:	46bd      	mov	sp, r7
 80179ae:	bd80      	pop	{r7, pc}
 80179b0:	08028ef8 	.word	0x08028ef8
 80179b4:	08028f28 	.word	0x08028f28
 80179b8:	08028f4c 	.word	0x08028f4c

080179bc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80179bc:	b580      	push	{r7, lr}
 80179be:	b084      	sub	sp, #16
 80179c0:	af00      	add	r7, sp, #0
 80179c2:	4603      	mov	r3, r0
 80179c4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80179c6:	79fb      	ldrb	r3, [r7, #7]
 80179c8:	2b0c      	cmp	r3, #12
 80179ca:	d908      	bls.n	80179de <memp_malloc+0x22>
 80179cc:	4b0a      	ldr	r3, [pc, #40]	; (80179f8 <memp_malloc+0x3c>)
 80179ce:	f240 1257 	movw	r2, #343	; 0x157
 80179d2:	490a      	ldr	r1, [pc, #40]	; (80179fc <memp_malloc+0x40>)
 80179d4:	480a      	ldr	r0, [pc, #40]	; (8017a00 <memp_malloc+0x44>)
 80179d6:	f00e ffdf 	bl	8026998 <iprintf>
 80179da:	2300      	movs	r3, #0
 80179dc:	e008      	b.n	80179f0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80179de:	79fb      	ldrb	r3, [r7, #7]
 80179e0:	4a08      	ldr	r2, [pc, #32]	; (8017a04 <memp_malloc+0x48>)
 80179e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80179e6:	4618      	mov	r0, r3
 80179e8:	f7ff ffb6 	bl	8017958 <do_memp_malloc_pool>
 80179ec:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80179ee:	68fb      	ldr	r3, [r7, #12]
}
 80179f0:	4618      	mov	r0, r3
 80179f2:	3710      	adds	r7, #16
 80179f4:	46bd      	mov	sp, r7
 80179f6:	bd80      	pop	{r7, pc}
 80179f8:	08028ef8 	.word	0x08028ef8
 80179fc:	08028f88 	.word	0x08028f88
 8017a00:	08028f4c 	.word	0x08028f4c
 8017a04:	0802bd54 	.word	0x0802bd54

08017a08 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8017a08:	b580      	push	{r7, lr}
 8017a0a:	b084      	sub	sp, #16
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	6078      	str	r0, [r7, #4]
 8017a10:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8017a12:	683b      	ldr	r3, [r7, #0]
 8017a14:	f003 0303 	and.w	r3, r3, #3
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d006      	beq.n	8017a2a <do_memp_free_pool+0x22>
 8017a1c:	4b0d      	ldr	r3, [pc, #52]	; (8017a54 <do_memp_free_pool+0x4c>)
 8017a1e:	f240 126d 	movw	r2, #365	; 0x16d
 8017a22:	490d      	ldr	r1, [pc, #52]	; (8017a58 <do_memp_free_pool+0x50>)
 8017a24:	480d      	ldr	r0, [pc, #52]	; (8017a5c <do_memp_free_pool+0x54>)
 8017a26:	f00e ffb7 	bl	8026998 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8017a2a:	683b      	ldr	r3, [r7, #0]
 8017a2c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8017a2e:	f00c fd9b 	bl	8024568 <sys_arch_protect>
 8017a32:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	689b      	ldr	r3, [r3, #8]
 8017a38:	681a      	ldr	r2, [r3, #0]
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	689b      	ldr	r3, [r3, #8]
 8017a42:	68fa      	ldr	r2, [r7, #12]
 8017a44:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8017a46:	68b8      	ldr	r0, [r7, #8]
 8017a48:	f00c fd9c 	bl	8024584 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8017a4c:	bf00      	nop
 8017a4e:	3710      	adds	r7, #16
 8017a50:	46bd      	mov	sp, r7
 8017a52:	bd80      	pop	{r7, pc}
 8017a54:	08028ef8 	.word	0x08028ef8
 8017a58:	08028fa8 	.word	0x08028fa8
 8017a5c:	08028f4c 	.word	0x08028f4c

08017a60 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b082      	sub	sp, #8
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	4603      	mov	r3, r0
 8017a68:	6039      	str	r1, [r7, #0]
 8017a6a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8017a6c:	79fb      	ldrb	r3, [r7, #7]
 8017a6e:	2b0c      	cmp	r3, #12
 8017a70:	d907      	bls.n	8017a82 <memp_free+0x22>
 8017a72:	4b0c      	ldr	r3, [pc, #48]	; (8017aa4 <memp_free+0x44>)
 8017a74:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8017a78:	490b      	ldr	r1, [pc, #44]	; (8017aa8 <memp_free+0x48>)
 8017a7a:	480c      	ldr	r0, [pc, #48]	; (8017aac <memp_free+0x4c>)
 8017a7c:	f00e ff8c 	bl	8026998 <iprintf>
 8017a80:	e00c      	b.n	8017a9c <memp_free+0x3c>

  if (mem == NULL) {
 8017a82:	683b      	ldr	r3, [r7, #0]
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d008      	beq.n	8017a9a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8017a88:	79fb      	ldrb	r3, [r7, #7]
 8017a8a:	4a09      	ldr	r2, [pc, #36]	; (8017ab0 <memp_free+0x50>)
 8017a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017a90:	6839      	ldr	r1, [r7, #0]
 8017a92:	4618      	mov	r0, r3
 8017a94:	f7ff ffb8 	bl	8017a08 <do_memp_free_pool>
 8017a98:	e000      	b.n	8017a9c <memp_free+0x3c>
    return;
 8017a9a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8017a9c:	3708      	adds	r7, #8
 8017a9e:	46bd      	mov	sp, r7
 8017aa0:	bd80      	pop	{r7, pc}
 8017aa2:	bf00      	nop
 8017aa4:	08028ef8 	.word	0x08028ef8
 8017aa8:	08028fc8 	.word	0x08028fc8
 8017aac:	08028f4c 	.word	0x08028f4c
 8017ab0:	0802bd54 	.word	0x0802bd54

08017ab4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8017ab4:	b480      	push	{r7}
 8017ab6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8017ab8:	bf00      	nop
 8017aba:	46bd      	mov	sp, r7
 8017abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac0:	4770      	bx	lr
	...

08017ac4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8017ac4:	b580      	push	{r7, lr}
 8017ac6:	b086      	sub	sp, #24
 8017ac8:	af00      	add	r7, sp, #0
 8017aca:	60f8      	str	r0, [r7, #12]
 8017acc:	60b9      	str	r1, [r7, #8]
 8017ace:	607a      	str	r2, [r7, #4]
 8017ad0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d108      	bne.n	8017aea <netif_add+0x26>
 8017ad8:	4b59      	ldr	r3, [pc, #356]	; (8017c40 <netif_add+0x17c>)
 8017ada:	f240 1227 	movw	r2, #295	; 0x127
 8017ade:	4959      	ldr	r1, [pc, #356]	; (8017c44 <netif_add+0x180>)
 8017ae0:	4859      	ldr	r0, [pc, #356]	; (8017c48 <netif_add+0x184>)
 8017ae2:	f00e ff59 	bl	8026998 <iprintf>
 8017ae6:	2300      	movs	r3, #0
 8017ae8:	e0a6      	b.n	8017c38 <netif_add+0x174>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8017aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d108      	bne.n	8017b02 <netif_add+0x3e>
 8017af0:	4b53      	ldr	r3, [pc, #332]	; (8017c40 <netif_add+0x17c>)
 8017af2:	f44f 7294 	mov.w	r2, #296	; 0x128
 8017af6:	4955      	ldr	r1, [pc, #340]	; (8017c4c <netif_add+0x188>)
 8017af8:	4853      	ldr	r0, [pc, #332]	; (8017c48 <netif_add+0x184>)
 8017afa:	f00e ff4d 	bl	8026998 <iprintf>
 8017afe:	2300      	movs	r3, #0
 8017b00:	e09a      	b.n	8017c38 <netif_add+0x174>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8017b02:	68bb      	ldr	r3, [r7, #8]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d101      	bne.n	8017b0c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8017b08:	4b51      	ldr	r3, [pc, #324]	; (8017c50 <netif_add+0x18c>)
 8017b0a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	2b00      	cmp	r3, #0
 8017b10:	d101      	bne.n	8017b16 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8017b12:	4b4f      	ldr	r3, [pc, #316]	; (8017c50 <netif_add+0x18c>)
 8017b14:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8017b16:	683b      	ldr	r3, [r7, #0]
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d101      	bne.n	8017b20 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8017b1c:	4b4c      	ldr	r3, [pc, #304]	; (8017c50 <netif_add+0x18c>)
 8017b1e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8017b20:	68fb      	ldr	r3, [r7, #12]
 8017b22:	2200      	movs	r2, #0
 8017b24:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8017b26:	68fb      	ldr	r3, [r7, #12]
 8017b28:	2200      	movs	r2, #0
 8017b2a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	2200      	movs	r2, #0
 8017b30:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8017b32:	68fb      	ldr	r3, [r7, #12]
 8017b34:	4a47      	ldr	r2, [pc, #284]	; (8017c54 <netif_add+0x190>)
 8017b36:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	2200      	movs	r2, #0
 8017b3c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	2200      	movs	r2, #0
 8017b42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	3320      	adds	r3, #32
 8017b4a:	2204      	movs	r2, #4
 8017b4c:	2100      	movs	r1, #0
 8017b4e:	4618      	mov	r0, r3
 8017b50:	f00e fe72 	bl	8026838 <memset>
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8017b54:	68fb      	ldr	r3, [r7, #12]
 8017b56:	6a3a      	ldr	r2, [r7, #32]
 8017b58:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8017b5a:	4b3f      	ldr	r3, [pc, #252]	; (8017c58 <netif_add+0x194>)
 8017b5c:	781a      	ldrb	r2, [r3, #0]
 8017b5e:	68fb      	ldr	r3, [r7, #12]
 8017b60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017b68:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8017b6a:	683b      	ldr	r3, [r7, #0]
 8017b6c:	687a      	ldr	r2, [r7, #4]
 8017b6e:	68b9      	ldr	r1, [r7, #8]
 8017b70:	68f8      	ldr	r0, [r7, #12]
 8017b72:	f000 f913 	bl	8017d9c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8017b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b78:	68f8      	ldr	r0, [r7, #12]
 8017b7a:	4798      	blx	r3
 8017b7c:	4603      	mov	r3, r0
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d001      	beq.n	8017b86 <netif_add+0xc2>
    return NULL;
 8017b82:	2300      	movs	r3, #0
 8017b84:	e058      	b.n	8017c38 <netif_add+0x174>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017b8c:	2bff      	cmp	r3, #255	; 0xff
 8017b8e:	d103      	bne.n	8017b98 <netif_add+0xd4>
        netif->num = 0;
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	2200      	movs	r2, #0
 8017b94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8017b98:	2300      	movs	r3, #0
 8017b9a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8017b9c:	4b2f      	ldr	r3, [pc, #188]	; (8017c5c <netif_add+0x198>)
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	617b      	str	r3, [r7, #20]
 8017ba2:	e02b      	b.n	8017bfc <netif_add+0x138>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8017ba4:	697a      	ldr	r2, [r7, #20]
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	429a      	cmp	r2, r3
 8017baa:	d106      	bne.n	8017bba <netif_add+0xf6>
 8017bac:	4b24      	ldr	r3, [pc, #144]	; (8017c40 <netif_add+0x17c>)
 8017bae:	f240 128b 	movw	r2, #395	; 0x18b
 8017bb2:	492b      	ldr	r1, [pc, #172]	; (8017c60 <netif_add+0x19c>)
 8017bb4:	4824      	ldr	r0, [pc, #144]	; (8017c48 <netif_add+0x184>)
 8017bb6:	f00e feef 	bl	8026998 <iprintf>
        num_netifs++;
 8017bba:	693b      	ldr	r3, [r7, #16]
 8017bbc:	3301      	adds	r3, #1
 8017bbe:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8017bc0:	693b      	ldr	r3, [r7, #16]
 8017bc2:	2bff      	cmp	r3, #255	; 0xff
 8017bc4:	dd06      	ble.n	8017bd4 <netif_add+0x110>
 8017bc6:	4b1e      	ldr	r3, [pc, #120]	; (8017c40 <netif_add+0x17c>)
 8017bc8:	f240 128d 	movw	r2, #397	; 0x18d
 8017bcc:	4925      	ldr	r1, [pc, #148]	; (8017c64 <netif_add+0x1a0>)
 8017bce:	481e      	ldr	r0, [pc, #120]	; (8017c48 <netif_add+0x184>)
 8017bd0:	f00e fee2 	bl	8026998 <iprintf>
        if (netif2->num == netif->num) {
 8017bd4:	697b      	ldr	r3, [r7, #20]
 8017bd6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017bda:	68fb      	ldr	r3, [r7, #12]
 8017bdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017be0:	429a      	cmp	r2, r3
 8017be2:	d108      	bne.n	8017bf6 <netif_add+0x132>
          netif->num++;
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017bea:	3301      	adds	r3, #1
 8017bec:	b2da      	uxtb	r2, r3
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8017bf4:	e005      	b.n	8017c02 <netif_add+0x13e>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8017bf6:	697b      	ldr	r3, [r7, #20]
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	617b      	str	r3, [r7, #20]
 8017bfc:	697b      	ldr	r3, [r7, #20]
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d1d0      	bne.n	8017ba4 <netif_add+0xe0>
        }
      }
    } while (netif2 != NULL);
 8017c02:	697b      	ldr	r3, [r7, #20]
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d1be      	bne.n	8017b86 <netif_add+0xc2>
  }
  if (netif->num == 254) {
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017c0e:	2bfe      	cmp	r3, #254	; 0xfe
 8017c10:	d103      	bne.n	8017c1a <netif_add+0x156>
    netif_num = 0;
 8017c12:	4b11      	ldr	r3, [pc, #68]	; (8017c58 <netif_add+0x194>)
 8017c14:	2200      	movs	r2, #0
 8017c16:	701a      	strb	r2, [r3, #0]
 8017c18:	e006      	b.n	8017c28 <netif_add+0x164>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017c20:	3301      	adds	r3, #1
 8017c22:	b2da      	uxtb	r2, r3
 8017c24:	4b0c      	ldr	r3, [pc, #48]	; (8017c58 <netif_add+0x194>)
 8017c26:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8017c28:	4b0c      	ldr	r3, [pc, #48]	; (8017c5c <netif_add+0x198>)
 8017c2a:	681a      	ldr	r2, [r3, #0]
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8017c30:	4a0a      	ldr	r2, [pc, #40]	; (8017c5c <netif_add+0x198>)
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8017c36:	68fb      	ldr	r3, [r7, #12]
}
 8017c38:	4618      	mov	r0, r3
 8017c3a:	3718      	adds	r7, #24
 8017c3c:	46bd      	mov	sp, r7
 8017c3e:	bd80      	pop	{r7, pc}
 8017c40:	08028fe4 	.word	0x08028fe4
 8017c44:	08029078 	.word	0x08029078
 8017c48:	08029034 	.word	0x08029034
 8017c4c:	08029094 	.word	0x08029094
 8017c50:	0802bdd8 	.word	0x0802bdd8
 8017c54:	08018029 	.word	0x08018029
 8017c58:	200131c0 	.word	0x200131c0
 8017c5c:	20019fe4 	.word	0x20019fe4
 8017c60:	080290b8 	.word	0x080290b8
 8017c64:	080290cc 	.word	0x080290cc

08017c68 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017c68:	b580      	push	{r7, lr}
 8017c6a:	b082      	sub	sp, #8
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	6078      	str	r0, [r7, #4]
 8017c70:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8017c72:	6839      	ldr	r1, [r7, #0]
 8017c74:	6878      	ldr	r0, [r7, #4]
 8017c76:	f002 ff6f 	bl	801ab58 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8017c7a:	6839      	ldr	r1, [r7, #0]
 8017c7c:	6878      	ldr	r0, [r7, #4]
 8017c7e:	f008 f8a9 	bl	801fdd4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8017c82:	bf00      	nop
 8017c84:	3708      	adds	r7, #8
 8017c86:	46bd      	mov	sp, r7
 8017c88:	bd80      	pop	{r7, pc}
	...

08017c8c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b086      	sub	sp, #24
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	60f8      	str	r0, [r7, #12]
 8017c94:	60b9      	str	r1, [r7, #8]
 8017c96:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8017c98:	68bb      	ldr	r3, [r7, #8]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d106      	bne.n	8017cac <netif_do_set_ipaddr+0x20>
 8017c9e:	4b1d      	ldr	r3, [pc, #116]	; (8017d14 <netif_do_set_ipaddr+0x88>)
 8017ca0:	f240 12cb 	movw	r2, #459	; 0x1cb
 8017ca4:	491c      	ldr	r1, [pc, #112]	; (8017d18 <netif_do_set_ipaddr+0x8c>)
 8017ca6:	481d      	ldr	r0, [pc, #116]	; (8017d1c <netif_do_set_ipaddr+0x90>)
 8017ca8:	f00e fe76 	bl	8026998 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d106      	bne.n	8017cc0 <netif_do_set_ipaddr+0x34>
 8017cb2:	4b18      	ldr	r3, [pc, #96]	; (8017d14 <netif_do_set_ipaddr+0x88>)
 8017cb4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8017cb8:	4917      	ldr	r1, [pc, #92]	; (8017d18 <netif_do_set_ipaddr+0x8c>)
 8017cba:	4818      	ldr	r0, [pc, #96]	; (8017d1c <netif_do_set_ipaddr+0x90>)
 8017cbc:	f00e fe6c 	bl	8026998 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8017cc0:	68bb      	ldr	r3, [r7, #8]
 8017cc2:	681a      	ldr	r2, [r3, #0]
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	3304      	adds	r3, #4
 8017cc8:	681b      	ldr	r3, [r3, #0]
 8017cca:	429a      	cmp	r2, r3
 8017ccc:	d01c      	beq.n	8017d08 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8017cce:	68bb      	ldr	r3, [r7, #8]
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	3304      	adds	r3, #4
 8017cd8:	681a      	ldr	r2, [r3, #0]
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8017cde:	f107 0314 	add.w	r3, r7, #20
 8017ce2:	4619      	mov	r1, r3
 8017ce4:	6878      	ldr	r0, [r7, #4]
 8017ce6:	f7ff ffbf 	bl	8017c68 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8017cea:	68bb      	ldr	r3, [r7, #8]
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d002      	beq.n	8017cf6 <netif_do_set_ipaddr+0x6a>
 8017cf0:	68bb      	ldr	r3, [r7, #8]
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	e000      	b.n	8017cf8 <netif_do_set_ipaddr+0x6c>
 8017cf6:	2300      	movs	r3, #0
 8017cf8:	68fa      	ldr	r2, [r7, #12]
 8017cfa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8017cfc:	2101      	movs	r1, #1
 8017cfe:	68f8      	ldr	r0, [r7, #12]
 8017d00:	f000 f920 	bl	8017f44 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8017d04:	2301      	movs	r3, #1
 8017d06:	e000      	b.n	8017d0a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8017d08:	2300      	movs	r3, #0
}
 8017d0a:	4618      	mov	r0, r3
 8017d0c:	3718      	adds	r7, #24
 8017d0e:	46bd      	mov	sp, r7
 8017d10:	bd80      	pop	{r7, pc}
 8017d12:	bf00      	nop
 8017d14:	08028fe4 	.word	0x08028fe4
 8017d18:	080290fc 	.word	0x080290fc
 8017d1c:	08029034 	.word	0x08029034

08017d20 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8017d20:	b480      	push	{r7}
 8017d22:	b085      	sub	sp, #20
 8017d24:	af00      	add	r7, sp, #0
 8017d26:	60f8      	str	r0, [r7, #12]
 8017d28:	60b9      	str	r1, [r7, #8]
 8017d2a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8017d2c:	68bb      	ldr	r3, [r7, #8]
 8017d2e:	681a      	ldr	r2, [r3, #0]
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	3308      	adds	r3, #8
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	429a      	cmp	r2, r3
 8017d38:	d00a      	beq.n	8017d50 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8017d3a:	68bb      	ldr	r3, [r7, #8]
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d002      	beq.n	8017d46 <netif_do_set_netmask+0x26>
 8017d40:	68bb      	ldr	r3, [r7, #8]
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	e000      	b.n	8017d48 <netif_do_set_netmask+0x28>
 8017d46:	2300      	movs	r3, #0
 8017d48:	68fa      	ldr	r2, [r7, #12]
 8017d4a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8017d4c:	2301      	movs	r3, #1
 8017d4e:	e000      	b.n	8017d52 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8017d50:	2300      	movs	r3, #0
}
 8017d52:	4618      	mov	r0, r3
 8017d54:	3714      	adds	r7, #20
 8017d56:	46bd      	mov	sp, r7
 8017d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d5c:	4770      	bx	lr

08017d5e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8017d5e:	b480      	push	{r7}
 8017d60:	b085      	sub	sp, #20
 8017d62:	af00      	add	r7, sp, #0
 8017d64:	60f8      	str	r0, [r7, #12]
 8017d66:	60b9      	str	r1, [r7, #8]
 8017d68:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8017d6a:	68bb      	ldr	r3, [r7, #8]
 8017d6c:	681a      	ldr	r2, [r3, #0]
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	330c      	adds	r3, #12
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	429a      	cmp	r2, r3
 8017d76:	d00a      	beq.n	8017d8e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8017d78:	68bb      	ldr	r3, [r7, #8]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d002      	beq.n	8017d84 <netif_do_set_gw+0x26>
 8017d7e:	68bb      	ldr	r3, [r7, #8]
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	e000      	b.n	8017d86 <netif_do_set_gw+0x28>
 8017d84:	2300      	movs	r3, #0
 8017d86:	68fa      	ldr	r2, [r7, #12]
 8017d88:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8017d8a:	2301      	movs	r3, #1
 8017d8c:	e000      	b.n	8017d90 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8017d8e:	2300      	movs	r3, #0
}
 8017d90:	4618      	mov	r0, r3
 8017d92:	3714      	adds	r7, #20
 8017d94:	46bd      	mov	sp, r7
 8017d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d9a:	4770      	bx	lr

08017d9c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b088      	sub	sp, #32
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	60f8      	str	r0, [r7, #12]
 8017da4:	60b9      	str	r1, [r7, #8]
 8017da6:	607a      	str	r2, [r7, #4]
 8017da8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8017daa:	2300      	movs	r3, #0
 8017dac:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8017dae:	2300      	movs	r3, #0
 8017db0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8017db2:	68bb      	ldr	r3, [r7, #8]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d101      	bne.n	8017dbc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8017db8:	4b1c      	ldr	r3, [pc, #112]	; (8017e2c <netif_set_addr+0x90>)
 8017dba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d101      	bne.n	8017dc6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8017dc2:	4b1a      	ldr	r3, [pc, #104]	; (8017e2c <netif_set_addr+0x90>)
 8017dc4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8017dc6:	683b      	ldr	r3, [r7, #0]
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d101      	bne.n	8017dd0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8017dcc:	4b17      	ldr	r3, [pc, #92]	; (8017e2c <netif_set_addr+0x90>)
 8017dce:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8017dd0:	68bb      	ldr	r3, [r7, #8]
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d003      	beq.n	8017dde <netif_set_addr+0x42>
 8017dd6:	68bb      	ldr	r3, [r7, #8]
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d101      	bne.n	8017de2 <netif_set_addr+0x46>
 8017dde:	2301      	movs	r3, #1
 8017de0:	e000      	b.n	8017de4 <netif_set_addr+0x48>
 8017de2:	2300      	movs	r3, #0
 8017de4:	617b      	str	r3, [r7, #20]
  if (remove) {
 8017de6:	697b      	ldr	r3, [r7, #20]
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d006      	beq.n	8017dfa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8017dec:	f107 0310 	add.w	r3, r7, #16
 8017df0:	461a      	mov	r2, r3
 8017df2:	68b9      	ldr	r1, [r7, #8]
 8017df4:	68f8      	ldr	r0, [r7, #12]
 8017df6:	f7ff ff49 	bl	8017c8c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8017dfa:	69fa      	ldr	r2, [r7, #28]
 8017dfc:	6879      	ldr	r1, [r7, #4]
 8017dfe:	68f8      	ldr	r0, [r7, #12]
 8017e00:	f7ff ff8e 	bl	8017d20 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8017e04:	69ba      	ldr	r2, [r7, #24]
 8017e06:	6839      	ldr	r1, [r7, #0]
 8017e08:	68f8      	ldr	r0, [r7, #12]
 8017e0a:	f7ff ffa8 	bl	8017d5e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8017e0e:	697b      	ldr	r3, [r7, #20]
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d106      	bne.n	8017e22 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8017e14:	f107 0310 	add.w	r3, r7, #16
 8017e18:	461a      	mov	r2, r3
 8017e1a:	68b9      	ldr	r1, [r7, #8]
 8017e1c:	68f8      	ldr	r0, [r7, #12]
 8017e1e:	f7ff ff35 	bl	8017c8c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8017e22:	bf00      	nop
 8017e24:	3720      	adds	r7, #32
 8017e26:	46bd      	mov	sp, r7
 8017e28:	bd80      	pop	{r7, pc}
 8017e2a:	bf00      	nop
 8017e2c:	0802bdd8 	.word	0x0802bdd8

08017e30 <netif_remove>:
 *
 * @param netif the network interface to remove
 */
void
netif_remove(struct netif *netif)
{
 8017e30:	b580      	push	{r7, lr}
 8017e32:	b084      	sub	sp, #16
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	6078      	str	r0, [r7, #4]
  int i;
#endif

  LWIP_ASSERT_CORE_LOCKED();

  if (netif == NULL) {
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d03e      	beq.n	8017ebc <netif_remove+0x8c>
  }

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_REMOVED, NULL);

#if LWIP_IPV4
  if (!ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	3304      	adds	r3, #4
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d005      	beq.n	8017e54 <netif_remove+0x24>
    netif_do_ip_addr_changed(netif_ip_addr4(netif), NULL);
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	3304      	adds	r3, #4
 8017e4c:	2100      	movs	r1, #0
 8017e4e:	4618      	mov	r0, r3
 8017e50:	f7ff ff0a 	bl	8017c68 <netif_do_ip_addr_changed>
#if LWIP_IPV6_MLD
  /* stop MLD processing */
  mld6_stop(netif);
#endif /* LWIP_IPV6_MLD */
#endif /* LWIP_IPV6 */
  if (netif_is_up(netif)) {
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017e5a:	f003 0301 	and.w	r3, r3, #1
 8017e5e:	b2db      	uxtb	r3, r3
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d002      	beq.n	8017e6a <netif_remove+0x3a>
    /* set netif down before removing (call callback function) */
    netif_set_down(netif);
 8017e64:	6878      	ldr	r0, [r7, #4]
 8017e66:	f000 f8ad 	bl	8017fc4 <netif_set_down>
  }

  mib2_remove_ip4(netif);

  /* this netif is default? */
  if (netif_default == netif) {
 8017e6a:	4b16      	ldr	r3, [pc, #88]	; (8017ec4 <netif_remove+0x94>)
 8017e6c:	681b      	ldr	r3, [r3, #0]
 8017e6e:	687a      	ldr	r2, [r7, #4]
 8017e70:	429a      	cmp	r2, r3
 8017e72:	d102      	bne.n	8017e7a <netif_remove+0x4a>
    /* reset default netif */
    netif_set_default(NULL);
 8017e74:	2000      	movs	r0, #0
 8017e76:	f000 f829 	bl	8017ecc <netif_set_default>
  }
#if !LWIP_SINGLE_NETIF
  /*  is it the first netif? */
  if (netif_list == netif) {
 8017e7a:	4b13      	ldr	r3, [pc, #76]	; (8017ec8 <netif_remove+0x98>)
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	687a      	ldr	r2, [r7, #4]
 8017e80:	429a      	cmp	r2, r3
 8017e82:	d104      	bne.n	8017e8e <netif_remove+0x5e>
    netif_list = netif->next;
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	4a0f      	ldr	r2, [pc, #60]	; (8017ec8 <netif_remove+0x98>)
 8017e8a:	6013      	str	r3, [r2, #0]
 8017e8c:	e017      	b.n	8017ebe <netif_remove+0x8e>
  } else {
    /*  look for netif further down the list */
    struct netif *tmp_netif;
    NETIF_FOREACH(tmp_netif) {
 8017e8e:	4b0e      	ldr	r3, [pc, #56]	; (8017ec8 <netif_remove+0x98>)
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	60fb      	str	r3, [r7, #12]
 8017e94:	e00c      	b.n	8017eb0 <netif_remove+0x80>
      if (tmp_netif->next == netif) {
 8017e96:	68fb      	ldr	r3, [r7, #12]
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	687a      	ldr	r2, [r7, #4]
 8017e9c:	429a      	cmp	r2, r3
 8017e9e:	d104      	bne.n	8017eaa <netif_remove+0x7a>
        tmp_netif->next = netif->next;
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	681a      	ldr	r2, [r3, #0]
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	601a      	str	r2, [r3, #0]
        break;
 8017ea8:	e005      	b.n	8017eb6 <netif_remove+0x86>
    NETIF_FOREACH(tmp_netif) {
 8017eaa:	68fb      	ldr	r3, [r7, #12]
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	60fb      	str	r3, [r7, #12]
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d1ef      	bne.n	8017e96 <netif_remove+0x66>
      }
    }
    if (tmp_netif == NULL) {
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	e000      	b.n	8017ebe <netif_remove+0x8e>
    return;
 8017ebc:	bf00      	nop
  if (netif->remove_callback) {
    netif->remove_callback(netif);
  }
#endif /* LWIP_NETIF_REMOVE_CALLBACK */
  LWIP_DEBUGF( NETIF_DEBUG, ("netif_remove: removed netif\n") );
}
 8017ebe:	3710      	adds	r7, #16
 8017ec0:	46bd      	mov	sp, r7
 8017ec2:	bd80      	pop	{r7, pc}
 8017ec4:	20019fe8 	.word	0x20019fe8
 8017ec8:	20019fe4 	.word	0x20019fe4

08017ecc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8017ecc:	b480      	push	{r7}
 8017ece:	b083      	sub	sp, #12
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8017ed4:	4a04      	ldr	r2, [pc, #16]	; (8017ee8 <netif_set_default+0x1c>)
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8017eda:	bf00      	nop
 8017edc:	370c      	adds	r7, #12
 8017ede:	46bd      	mov	sp, r7
 8017ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ee4:	4770      	bx	lr
 8017ee6:	bf00      	nop
 8017ee8:	20019fe8 	.word	0x20019fe8

08017eec <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	b082      	sub	sp, #8
 8017ef0:	af00      	add	r7, sp, #0
 8017ef2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d107      	bne.n	8017f0a <netif_set_up+0x1e>
 8017efa:	4b0f      	ldr	r3, [pc, #60]	; (8017f38 <netif_set_up+0x4c>)
 8017efc:	f44f 7254 	mov.w	r2, #848	; 0x350
 8017f00:	490e      	ldr	r1, [pc, #56]	; (8017f3c <netif_set_up+0x50>)
 8017f02:	480f      	ldr	r0, [pc, #60]	; (8017f40 <netif_set_up+0x54>)
 8017f04:	f00e fd48 	bl	8026998 <iprintf>
 8017f08:	e013      	b.n	8017f32 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017f10:	f003 0301 	and.w	r3, r3, #1
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d10c      	bne.n	8017f32 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017f1e:	f043 0301 	orr.w	r3, r3, #1
 8017f22:	b2da      	uxtb	r2, r3
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8017f2a:	2103      	movs	r1, #3
 8017f2c:	6878      	ldr	r0, [r7, #4]
 8017f2e:	f000 f809 	bl	8017f44 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8017f32:	3708      	adds	r7, #8
 8017f34:	46bd      	mov	sp, r7
 8017f36:	bd80      	pop	{r7, pc}
 8017f38:	08028fe4 	.word	0x08028fe4
 8017f3c:	0802916c 	.word	0x0802916c
 8017f40:	08029034 	.word	0x08029034

08017f44 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8017f44:	b580      	push	{r7, lr}
 8017f46:	b082      	sub	sp, #8
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	6078      	str	r0, [r7, #4]
 8017f4c:	460b      	mov	r3, r1
 8017f4e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d106      	bne.n	8017f64 <netif_issue_reports+0x20>
 8017f56:	4b18      	ldr	r3, [pc, #96]	; (8017fb8 <netif_issue_reports+0x74>)
 8017f58:	f240 326d 	movw	r2, #877	; 0x36d
 8017f5c:	4917      	ldr	r1, [pc, #92]	; (8017fbc <netif_issue_reports+0x78>)
 8017f5e:	4818      	ldr	r0, [pc, #96]	; (8017fc0 <netif_issue_reports+0x7c>)
 8017f60:	f00e fd1a 	bl	8026998 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017f6a:	f003 0304 	and.w	r3, r3, #4
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d01e      	beq.n	8017fb0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017f78:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d017      	beq.n	8017fb0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8017f80:	78fb      	ldrb	r3, [r7, #3]
 8017f82:	f003 0301 	and.w	r3, r3, #1
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d013      	beq.n	8017fb2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	3304      	adds	r3, #4
 8017f8e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d00e      	beq.n	8017fb2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017f9a:	f003 0308 	and.w	r3, r3, #8
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d007      	beq.n	8017fb2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	3304      	adds	r3, #4
 8017fa6:	4619      	mov	r1, r3
 8017fa8:	6878      	ldr	r0, [r7, #4]
 8017faa:	f00a fcef 	bl	802298c <etharp_request>
 8017fae:	e000      	b.n	8017fb2 <netif_issue_reports+0x6e>
    return;
 8017fb0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8017fb2:	3708      	adds	r7, #8
 8017fb4:	46bd      	mov	sp, r7
 8017fb6:	bd80      	pop	{r7, pc}
 8017fb8:	08028fe4 	.word	0x08028fe4
 8017fbc:	08029188 	.word	0x08029188
 8017fc0:	08029034 	.word	0x08029034

08017fc4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8017fc4:	b580      	push	{r7, lr}
 8017fc6:	b082      	sub	sp, #8
 8017fc8:	af00      	add	r7, sp, #0
 8017fca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d107      	bne.n	8017fe2 <netif_set_down+0x1e>
 8017fd2:	4b12      	ldr	r3, [pc, #72]	; (801801c <netif_set_down+0x58>)
 8017fd4:	f240 329b 	movw	r2, #923	; 0x39b
 8017fd8:	4911      	ldr	r1, [pc, #68]	; (8018020 <netif_set_down+0x5c>)
 8017fda:	4812      	ldr	r0, [pc, #72]	; (8018024 <netif_set_down+0x60>)
 8017fdc:	f00e fcdc 	bl	8026998 <iprintf>
 8017fe0:	e019      	b.n	8018016 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017fe8:	f003 0301 	and.w	r3, r3, #1
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d012      	beq.n	8018016 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017ff6:	f023 0301 	bic.w	r3, r3, #1
 8017ffa:	b2da      	uxtb	r2, r3
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018008:	f003 0308 	and.w	r3, r3, #8
 801800c:	2b00      	cmp	r3, #0
 801800e:	d002      	beq.n	8018016 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8018010:	6878      	ldr	r0, [r7, #4]
 8018012:	f00a f873 	bl	80220fc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8018016:	3708      	adds	r7, #8
 8018018:	46bd      	mov	sp, r7
 801801a:	bd80      	pop	{r7, pc}
 801801c:	08028fe4 	.word	0x08028fe4
 8018020:	080291ac 	.word	0x080291ac
 8018024:	08029034 	.word	0x08029034

08018028 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8018028:	b480      	push	{r7}
 801802a:	b085      	sub	sp, #20
 801802c:	af00      	add	r7, sp, #0
 801802e:	60f8      	str	r0, [r7, #12]
 8018030:	60b9      	str	r1, [r7, #8]
 8018032:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8018034:	f06f 030b 	mvn.w	r3, #11
}
 8018038:	4618      	mov	r0, r3
 801803a:	3714      	adds	r7, #20
 801803c:	46bd      	mov	sp, r7
 801803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018042:	4770      	bx	lr

08018044 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8018044:	b480      	push	{r7}
 8018046:	b085      	sub	sp, #20
 8018048:	af00      	add	r7, sp, #0
 801804a:	4603      	mov	r3, r0
 801804c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801804e:	79fb      	ldrb	r3, [r7, #7]
 8018050:	2b00      	cmp	r3, #0
 8018052:	d013      	beq.n	801807c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8018054:	4b0d      	ldr	r3, [pc, #52]	; (801808c <netif_get_by_index+0x48>)
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	60fb      	str	r3, [r7, #12]
 801805a:	e00c      	b.n	8018076 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018062:	3301      	adds	r3, #1
 8018064:	b2db      	uxtb	r3, r3
 8018066:	79fa      	ldrb	r2, [r7, #7]
 8018068:	429a      	cmp	r2, r3
 801806a:	d101      	bne.n	8018070 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801806c:	68fb      	ldr	r3, [r7, #12]
 801806e:	e006      	b.n	801807e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	60fb      	str	r3, [r7, #12]
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	2b00      	cmp	r3, #0
 801807a:	d1ef      	bne.n	801805c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801807c:	2300      	movs	r3, #0
}
 801807e:	4618      	mov	r0, r3
 8018080:	3714      	adds	r7, #20
 8018082:	46bd      	mov	sp, r7
 8018084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018088:	4770      	bx	lr
 801808a:	bf00      	nop
 801808c:	20019fe4 	.word	0x20019fe4

08018090 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8018090:	b580      	push	{r7, lr}
 8018092:	b082      	sub	sp, #8
 8018094:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8018096:	f00c fa67 	bl	8024568 <sys_arch_protect>
 801809a:	6038      	str	r0, [r7, #0]
 801809c:	4b0d      	ldr	r3, [pc, #52]	; (80180d4 <pbuf_free_ooseq+0x44>)
 801809e:	2200      	movs	r2, #0
 80180a0:	701a      	strb	r2, [r3, #0]
 80180a2:	6838      	ldr	r0, [r7, #0]
 80180a4:	f00c fa6e 	bl	8024584 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80180a8:	4b0b      	ldr	r3, [pc, #44]	; (80180d8 <pbuf_free_ooseq+0x48>)
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	607b      	str	r3, [r7, #4]
 80180ae:	e00a      	b.n	80180c6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d003      	beq.n	80180c0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80180b8:	6878      	ldr	r0, [r7, #4]
 80180ba:	f002 fd8b 	bl	801abd4 <tcp_free_ooseq>
      return;
 80180be:	e005      	b.n	80180cc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	68db      	ldr	r3, [r3, #12]
 80180c4:	607b      	str	r3, [r7, #4]
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d1f1      	bne.n	80180b0 <pbuf_free_ooseq+0x20>
    }
  }
}
 80180cc:	3708      	adds	r7, #8
 80180ce:	46bd      	mov	sp, r7
 80180d0:	bd80      	pop	{r7, pc}
 80180d2:	bf00      	nop
 80180d4:	20019fec 	.word	0x20019fec
 80180d8:	20019ff4 	.word	0x20019ff4

080180dc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80180dc:	b580      	push	{r7, lr}
 80180de:	b082      	sub	sp, #8
 80180e0:	af00      	add	r7, sp, #0
 80180e2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80180e4:	f7ff ffd4 	bl	8018090 <pbuf_free_ooseq>
}
 80180e8:	bf00      	nop
 80180ea:	3708      	adds	r7, #8
 80180ec:	46bd      	mov	sp, r7
 80180ee:	bd80      	pop	{r7, pc}

080180f0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	b082      	sub	sp, #8
 80180f4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80180f6:	f00c fa37 	bl	8024568 <sys_arch_protect>
 80180fa:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80180fc:	4b0f      	ldr	r3, [pc, #60]	; (801813c <pbuf_pool_is_empty+0x4c>)
 80180fe:	781b      	ldrb	r3, [r3, #0]
 8018100:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8018102:	4b0e      	ldr	r3, [pc, #56]	; (801813c <pbuf_pool_is_empty+0x4c>)
 8018104:	2201      	movs	r2, #1
 8018106:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8018108:	6878      	ldr	r0, [r7, #4]
 801810a:	f00c fa3b 	bl	8024584 <sys_arch_unprotect>

  if (!queued) {
 801810e:	78fb      	ldrb	r3, [r7, #3]
 8018110:	2b00      	cmp	r3, #0
 8018112:	d10f      	bne.n	8018134 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8018114:	2100      	movs	r1, #0
 8018116:	480a      	ldr	r0, [pc, #40]	; (8018140 <pbuf_pool_is_empty+0x50>)
 8018118:	f7fe fe8c 	bl	8016e34 <tcpip_try_callback>
 801811c:	4603      	mov	r3, r0
 801811e:	2b00      	cmp	r3, #0
 8018120:	d008      	beq.n	8018134 <pbuf_pool_is_empty+0x44>
 8018122:	f00c fa21 	bl	8024568 <sys_arch_protect>
 8018126:	6078      	str	r0, [r7, #4]
 8018128:	4b04      	ldr	r3, [pc, #16]	; (801813c <pbuf_pool_is_empty+0x4c>)
 801812a:	2200      	movs	r2, #0
 801812c:	701a      	strb	r2, [r3, #0]
 801812e:	6878      	ldr	r0, [r7, #4]
 8018130:	f00c fa28 	bl	8024584 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8018134:	bf00      	nop
 8018136:	3708      	adds	r7, #8
 8018138:	46bd      	mov	sp, r7
 801813a:	bd80      	pop	{r7, pc}
 801813c:	20019fec 	.word	0x20019fec
 8018140:	080180dd 	.word	0x080180dd

08018144 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8018144:	b480      	push	{r7}
 8018146:	b085      	sub	sp, #20
 8018148:	af00      	add	r7, sp, #0
 801814a:	60f8      	str	r0, [r7, #12]
 801814c:	60b9      	str	r1, [r7, #8]
 801814e:	4611      	mov	r1, r2
 8018150:	461a      	mov	r2, r3
 8018152:	460b      	mov	r3, r1
 8018154:	80fb      	strh	r3, [r7, #6]
 8018156:	4613      	mov	r3, r2
 8018158:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801815a:	68fb      	ldr	r3, [r7, #12]
 801815c:	2200      	movs	r2, #0
 801815e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8018160:	68fb      	ldr	r3, [r7, #12]
 8018162:	68ba      	ldr	r2, [r7, #8]
 8018164:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8018166:	68fb      	ldr	r3, [r7, #12]
 8018168:	88fa      	ldrh	r2, [r7, #6]
 801816a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	88ba      	ldrh	r2, [r7, #4]
 8018170:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8018172:	8b3b      	ldrh	r3, [r7, #24]
 8018174:	b2da      	uxtb	r2, r3
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	7f3a      	ldrb	r2, [r7, #28]
 801817e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	2201      	movs	r2, #1
 8018184:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8018186:	68fb      	ldr	r3, [r7, #12]
 8018188:	2200      	movs	r2, #0
 801818a:	73da      	strb	r2, [r3, #15]
}
 801818c:	bf00      	nop
 801818e:	3714      	adds	r7, #20
 8018190:	46bd      	mov	sp, r7
 8018192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018196:	4770      	bx	lr

08018198 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8018198:	b580      	push	{r7, lr}
 801819a:	b08c      	sub	sp, #48	; 0x30
 801819c:	af02      	add	r7, sp, #8
 801819e:	4603      	mov	r3, r0
 80181a0:	71fb      	strb	r3, [r7, #7]
 80181a2:	460b      	mov	r3, r1
 80181a4:	80bb      	strh	r3, [r7, #4]
 80181a6:	4613      	mov	r3, r2
 80181a8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80181aa:	79fb      	ldrb	r3, [r7, #7]
 80181ac:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80181ae:	887b      	ldrh	r3, [r7, #2]
 80181b0:	2b41      	cmp	r3, #65	; 0x41
 80181b2:	d00b      	beq.n	80181cc <pbuf_alloc+0x34>
 80181b4:	2b41      	cmp	r3, #65	; 0x41
 80181b6:	dc02      	bgt.n	80181be <pbuf_alloc+0x26>
 80181b8:	2b01      	cmp	r3, #1
 80181ba:	d007      	beq.n	80181cc <pbuf_alloc+0x34>
 80181bc:	e0c2      	b.n	8018344 <pbuf_alloc+0x1ac>
 80181be:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80181c2:	d00b      	beq.n	80181dc <pbuf_alloc+0x44>
 80181c4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80181c8:	d070      	beq.n	80182ac <pbuf_alloc+0x114>
 80181ca:	e0bb      	b.n	8018344 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80181cc:	887a      	ldrh	r2, [r7, #2]
 80181ce:	88bb      	ldrh	r3, [r7, #4]
 80181d0:	4619      	mov	r1, r3
 80181d2:	2000      	movs	r0, #0
 80181d4:	f000 f8d2 	bl	801837c <pbuf_alloc_reference>
 80181d8:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80181da:	e0bd      	b.n	8018358 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80181dc:	2300      	movs	r3, #0
 80181de:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80181e0:	2300      	movs	r3, #0
 80181e2:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80181e4:	88bb      	ldrh	r3, [r7, #4]
 80181e6:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80181e8:	200c      	movs	r0, #12
 80181ea:	f7ff fbe7 	bl	80179bc <memp_malloc>
 80181ee:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80181f0:	693b      	ldr	r3, [r7, #16]
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d109      	bne.n	801820a <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 80181f6:	f7ff ff7b 	bl	80180f0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80181fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d002      	beq.n	8018206 <pbuf_alloc+0x6e>
            pbuf_free(p);
 8018200:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018202:	f000 fadb 	bl	80187bc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8018206:	2300      	movs	r3, #0
 8018208:	e0a7      	b.n	801835a <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801820a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801820c:	3303      	adds	r3, #3
 801820e:	b29b      	uxth	r3, r3
 8018210:	f023 0303 	bic.w	r3, r3, #3
 8018214:	b29b      	uxth	r3, r3
 8018216:	f5c3 7301 	rsb	r3, r3, #516	; 0x204
 801821a:	b29b      	uxth	r3, r3
 801821c:	8b7a      	ldrh	r2, [r7, #26]
 801821e:	4293      	cmp	r3, r2
 8018220:	bf28      	it	cs
 8018222:	4613      	movcs	r3, r2
 8018224:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8018226:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018228:	3310      	adds	r3, #16
 801822a:	693a      	ldr	r2, [r7, #16]
 801822c:	4413      	add	r3, r2
 801822e:	3303      	adds	r3, #3
 8018230:	f023 0303 	bic.w	r3, r3, #3
 8018234:	4618      	mov	r0, r3
 8018236:	89f9      	ldrh	r1, [r7, #14]
 8018238:	8b7a      	ldrh	r2, [r7, #26]
 801823a:	2300      	movs	r3, #0
 801823c:	9301      	str	r3, [sp, #4]
 801823e:	887b      	ldrh	r3, [r7, #2]
 8018240:	9300      	str	r3, [sp, #0]
 8018242:	460b      	mov	r3, r1
 8018244:	4601      	mov	r1, r0
 8018246:	6938      	ldr	r0, [r7, #16]
 8018248:	f7ff ff7c 	bl	8018144 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801824c:	693b      	ldr	r3, [r7, #16]
 801824e:	685b      	ldr	r3, [r3, #4]
 8018250:	f003 0303 	and.w	r3, r3, #3
 8018254:	2b00      	cmp	r3, #0
 8018256:	d006      	beq.n	8018266 <pbuf_alloc+0xce>
 8018258:	4b42      	ldr	r3, [pc, #264]	; (8018364 <pbuf_alloc+0x1cc>)
 801825a:	f240 1201 	movw	r2, #257	; 0x101
 801825e:	4942      	ldr	r1, [pc, #264]	; (8018368 <pbuf_alloc+0x1d0>)
 8018260:	4842      	ldr	r0, [pc, #264]	; (801836c <pbuf_alloc+0x1d4>)
 8018262:	f00e fb99 	bl	8026998 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8018266:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018268:	3303      	adds	r3, #3
 801826a:	f023 0303 	bic.w	r3, r3, #3
 801826e:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8018272:	d106      	bne.n	8018282 <pbuf_alloc+0xea>
 8018274:	4b3b      	ldr	r3, [pc, #236]	; (8018364 <pbuf_alloc+0x1cc>)
 8018276:	f240 1203 	movw	r2, #259	; 0x103
 801827a:	493d      	ldr	r1, [pc, #244]	; (8018370 <pbuf_alloc+0x1d8>)
 801827c:	483b      	ldr	r0, [pc, #236]	; (801836c <pbuf_alloc+0x1d4>)
 801827e:	f00e fb8b 	bl	8026998 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8018282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018284:	2b00      	cmp	r3, #0
 8018286:	d102      	bne.n	801828e <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8018288:	693b      	ldr	r3, [r7, #16]
 801828a:	627b      	str	r3, [r7, #36]	; 0x24
 801828c:	e002      	b.n	8018294 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801828e:	69fb      	ldr	r3, [r7, #28]
 8018290:	693a      	ldr	r2, [r7, #16]
 8018292:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8018294:	693b      	ldr	r3, [r7, #16]
 8018296:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8018298:	8b7a      	ldrh	r2, [r7, #26]
 801829a:	89fb      	ldrh	r3, [r7, #14]
 801829c:	1ad3      	subs	r3, r2, r3
 801829e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80182a0:	2300      	movs	r3, #0
 80182a2:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80182a4:	8b7b      	ldrh	r3, [r7, #26]
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d19e      	bne.n	80181e8 <pbuf_alloc+0x50>
      break;
 80182aa:	e055      	b.n	8018358 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80182ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80182ae:	3303      	adds	r3, #3
 80182b0:	b29b      	uxth	r3, r3
 80182b2:	f023 0303 	bic.w	r3, r3, #3
 80182b6:	b29a      	uxth	r2, r3
 80182b8:	88bb      	ldrh	r3, [r7, #4]
 80182ba:	3303      	adds	r3, #3
 80182bc:	b29b      	uxth	r3, r3
 80182be:	f023 0303 	bic.w	r3, r3, #3
 80182c2:	b29b      	uxth	r3, r3
 80182c4:	4413      	add	r3, r2
 80182c6:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80182c8:	8b3b      	ldrh	r3, [r7, #24]
 80182ca:	3310      	adds	r3, #16
 80182cc:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80182ce:	8b3a      	ldrh	r2, [r7, #24]
 80182d0:	88bb      	ldrh	r3, [r7, #4]
 80182d2:	3303      	adds	r3, #3
 80182d4:	f023 0303 	bic.w	r3, r3, #3
 80182d8:	429a      	cmp	r2, r3
 80182da:	d306      	bcc.n	80182ea <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80182dc:	8afa      	ldrh	r2, [r7, #22]
 80182de:	88bb      	ldrh	r3, [r7, #4]
 80182e0:	3303      	adds	r3, #3
 80182e2:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80182e6:	429a      	cmp	r2, r3
 80182e8:	d201      	bcs.n	80182ee <pbuf_alloc+0x156>
        return NULL;
 80182ea:	2300      	movs	r3, #0
 80182ec:	e035      	b.n	801835a <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80182ee:	8afb      	ldrh	r3, [r7, #22]
 80182f0:	4618      	mov	r0, r3
 80182f2:	f7ff f9e1 	bl	80176b8 <mem_malloc>
 80182f6:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80182f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d101      	bne.n	8018302 <pbuf_alloc+0x16a>
        return NULL;
 80182fe:	2300      	movs	r3, #0
 8018300:	e02b      	b.n	801835a <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8018302:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018304:	3310      	adds	r3, #16
 8018306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018308:	4413      	add	r3, r2
 801830a:	3303      	adds	r3, #3
 801830c:	f023 0303 	bic.w	r3, r3, #3
 8018310:	4618      	mov	r0, r3
 8018312:	88b9      	ldrh	r1, [r7, #4]
 8018314:	88ba      	ldrh	r2, [r7, #4]
 8018316:	2300      	movs	r3, #0
 8018318:	9301      	str	r3, [sp, #4]
 801831a:	887b      	ldrh	r3, [r7, #2]
 801831c:	9300      	str	r3, [sp, #0]
 801831e:	460b      	mov	r3, r1
 8018320:	4601      	mov	r1, r0
 8018322:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018324:	f7ff ff0e 	bl	8018144 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8018328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801832a:	685b      	ldr	r3, [r3, #4]
 801832c:	f003 0303 	and.w	r3, r3, #3
 8018330:	2b00      	cmp	r3, #0
 8018332:	d010      	beq.n	8018356 <pbuf_alloc+0x1be>
 8018334:	4b0b      	ldr	r3, [pc, #44]	; (8018364 <pbuf_alloc+0x1cc>)
 8018336:	f240 1223 	movw	r2, #291	; 0x123
 801833a:	490e      	ldr	r1, [pc, #56]	; (8018374 <pbuf_alloc+0x1dc>)
 801833c:	480b      	ldr	r0, [pc, #44]	; (801836c <pbuf_alloc+0x1d4>)
 801833e:	f00e fb2b 	bl	8026998 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8018342:	e008      	b.n	8018356 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8018344:	4b07      	ldr	r3, [pc, #28]	; (8018364 <pbuf_alloc+0x1cc>)
 8018346:	f240 1227 	movw	r2, #295	; 0x127
 801834a:	490b      	ldr	r1, [pc, #44]	; (8018378 <pbuf_alloc+0x1e0>)
 801834c:	4807      	ldr	r0, [pc, #28]	; (801836c <pbuf_alloc+0x1d4>)
 801834e:	f00e fb23 	bl	8026998 <iprintf>
      return NULL;
 8018352:	2300      	movs	r3, #0
 8018354:	e001      	b.n	801835a <pbuf_alloc+0x1c2>
      break;
 8018356:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8018358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801835a:	4618      	mov	r0, r3
 801835c:	3728      	adds	r7, #40	; 0x28
 801835e:	46bd      	mov	sp, r7
 8018360:	bd80      	pop	{r7, pc}
 8018362:	bf00      	nop
 8018364:	08029214 	.word	0x08029214
 8018368:	08029244 	.word	0x08029244
 801836c:	08029274 	.word	0x08029274
 8018370:	0802929c 	.word	0x0802929c
 8018374:	080292d0 	.word	0x080292d0
 8018378:	080292fc 	.word	0x080292fc

0801837c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801837c:	b580      	push	{r7, lr}
 801837e:	b086      	sub	sp, #24
 8018380:	af02      	add	r7, sp, #8
 8018382:	6078      	str	r0, [r7, #4]
 8018384:	460b      	mov	r3, r1
 8018386:	807b      	strh	r3, [r7, #2]
 8018388:	4613      	mov	r3, r2
 801838a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801838c:	883b      	ldrh	r3, [r7, #0]
 801838e:	2b41      	cmp	r3, #65	; 0x41
 8018390:	d009      	beq.n	80183a6 <pbuf_alloc_reference+0x2a>
 8018392:	883b      	ldrh	r3, [r7, #0]
 8018394:	2b01      	cmp	r3, #1
 8018396:	d006      	beq.n	80183a6 <pbuf_alloc_reference+0x2a>
 8018398:	4b0f      	ldr	r3, [pc, #60]	; (80183d8 <pbuf_alloc_reference+0x5c>)
 801839a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801839e:	490f      	ldr	r1, [pc, #60]	; (80183dc <pbuf_alloc_reference+0x60>)
 80183a0:	480f      	ldr	r0, [pc, #60]	; (80183e0 <pbuf_alloc_reference+0x64>)
 80183a2:	f00e faf9 	bl	8026998 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80183a6:	200b      	movs	r0, #11
 80183a8:	f7ff fb08 	bl	80179bc <memp_malloc>
 80183ac:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80183ae:	68fb      	ldr	r3, [r7, #12]
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d101      	bne.n	80183b8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80183b4:	2300      	movs	r3, #0
 80183b6:	e00b      	b.n	80183d0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80183b8:	8879      	ldrh	r1, [r7, #2]
 80183ba:	887a      	ldrh	r2, [r7, #2]
 80183bc:	2300      	movs	r3, #0
 80183be:	9301      	str	r3, [sp, #4]
 80183c0:	883b      	ldrh	r3, [r7, #0]
 80183c2:	9300      	str	r3, [sp, #0]
 80183c4:	460b      	mov	r3, r1
 80183c6:	6879      	ldr	r1, [r7, #4]
 80183c8:	68f8      	ldr	r0, [r7, #12]
 80183ca:	f7ff febb 	bl	8018144 <pbuf_init_alloced_pbuf>
  return p;
 80183ce:	68fb      	ldr	r3, [r7, #12]
}
 80183d0:	4618      	mov	r0, r3
 80183d2:	3710      	adds	r7, #16
 80183d4:	46bd      	mov	sp, r7
 80183d6:	bd80      	pop	{r7, pc}
 80183d8:	08029214 	.word	0x08029214
 80183dc:	08029318 	.word	0x08029318
 80183e0:	08029274 	.word	0x08029274

080183e4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80183e4:	b580      	push	{r7, lr}
 80183e6:	b088      	sub	sp, #32
 80183e8:	af02      	add	r7, sp, #8
 80183ea:	607b      	str	r3, [r7, #4]
 80183ec:	4603      	mov	r3, r0
 80183ee:	73fb      	strb	r3, [r7, #15]
 80183f0:	460b      	mov	r3, r1
 80183f2:	81bb      	strh	r3, [r7, #12]
 80183f4:	4613      	mov	r3, r2
 80183f6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80183f8:	7bfb      	ldrb	r3, [r7, #15]
 80183fa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80183fc:	8a7b      	ldrh	r3, [r7, #18]
 80183fe:	3303      	adds	r3, #3
 8018400:	f023 0203 	bic.w	r2, r3, #3
 8018404:	89bb      	ldrh	r3, [r7, #12]
 8018406:	441a      	add	r2, r3
 8018408:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801840a:	429a      	cmp	r2, r3
 801840c:	d901      	bls.n	8018412 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801840e:	2300      	movs	r3, #0
 8018410:	e018      	b.n	8018444 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8018412:	6a3b      	ldr	r3, [r7, #32]
 8018414:	2b00      	cmp	r3, #0
 8018416:	d007      	beq.n	8018428 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8018418:	8a7b      	ldrh	r3, [r7, #18]
 801841a:	3303      	adds	r3, #3
 801841c:	f023 0303 	bic.w	r3, r3, #3
 8018420:	6a3a      	ldr	r2, [r7, #32]
 8018422:	4413      	add	r3, r2
 8018424:	617b      	str	r3, [r7, #20]
 8018426:	e001      	b.n	801842c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8018428:	2300      	movs	r3, #0
 801842a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801842c:	6878      	ldr	r0, [r7, #4]
 801842e:	89b9      	ldrh	r1, [r7, #12]
 8018430:	89ba      	ldrh	r2, [r7, #12]
 8018432:	2302      	movs	r3, #2
 8018434:	9301      	str	r3, [sp, #4]
 8018436:	897b      	ldrh	r3, [r7, #10]
 8018438:	9300      	str	r3, [sp, #0]
 801843a:	460b      	mov	r3, r1
 801843c:	6979      	ldr	r1, [r7, #20]
 801843e:	f7ff fe81 	bl	8018144 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8018442:	687b      	ldr	r3, [r7, #4]
}
 8018444:	4618      	mov	r0, r3
 8018446:	3718      	adds	r7, #24
 8018448:	46bd      	mov	sp, r7
 801844a:	bd80      	pop	{r7, pc}

0801844c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801844c:	b580      	push	{r7, lr}
 801844e:	b084      	sub	sp, #16
 8018450:	af00      	add	r7, sp, #0
 8018452:	6078      	str	r0, [r7, #4]
 8018454:	460b      	mov	r3, r1
 8018456:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	2b00      	cmp	r3, #0
 801845c:	d106      	bne.n	801846c <pbuf_realloc+0x20>
 801845e:	4b3a      	ldr	r3, [pc, #232]	; (8018548 <pbuf_realloc+0xfc>)
 8018460:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8018464:	4939      	ldr	r1, [pc, #228]	; (801854c <pbuf_realloc+0x100>)
 8018466:	483a      	ldr	r0, [pc, #232]	; (8018550 <pbuf_realloc+0x104>)
 8018468:	f00e fa96 	bl	8026998 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	891b      	ldrh	r3, [r3, #8]
 8018470:	887a      	ldrh	r2, [r7, #2]
 8018472:	429a      	cmp	r2, r3
 8018474:	d264      	bcs.n	8018540 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	891a      	ldrh	r2, [r3, #8]
 801847a:	887b      	ldrh	r3, [r7, #2]
 801847c:	1ad3      	subs	r3, r2, r3
 801847e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8018480:	887b      	ldrh	r3, [r7, #2]
 8018482:	817b      	strh	r3, [r7, #10]
  q = p;
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8018488:	e018      	b.n	80184bc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801848a:	68fb      	ldr	r3, [r7, #12]
 801848c:	895b      	ldrh	r3, [r3, #10]
 801848e:	897a      	ldrh	r2, [r7, #10]
 8018490:	1ad3      	subs	r3, r2, r3
 8018492:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	891a      	ldrh	r2, [r3, #8]
 8018498:	893b      	ldrh	r3, [r7, #8]
 801849a:	1ad3      	subs	r3, r2, r3
 801849c:	b29a      	uxth	r2, r3
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80184a2:	68fb      	ldr	r3, [r7, #12]
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80184a8:	68fb      	ldr	r3, [r7, #12]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d106      	bne.n	80184bc <pbuf_realloc+0x70>
 80184ae:	4b26      	ldr	r3, [pc, #152]	; (8018548 <pbuf_realloc+0xfc>)
 80184b0:	f240 12af 	movw	r2, #431	; 0x1af
 80184b4:	4927      	ldr	r1, [pc, #156]	; (8018554 <pbuf_realloc+0x108>)
 80184b6:	4826      	ldr	r0, [pc, #152]	; (8018550 <pbuf_realloc+0x104>)
 80184b8:	f00e fa6e 	bl	8026998 <iprintf>
  while (rem_len > q->len) {
 80184bc:	68fb      	ldr	r3, [r7, #12]
 80184be:	895b      	ldrh	r3, [r3, #10]
 80184c0:	897a      	ldrh	r2, [r7, #10]
 80184c2:	429a      	cmp	r2, r3
 80184c4:	d8e1      	bhi.n	801848a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80184c6:	68fb      	ldr	r3, [r7, #12]
 80184c8:	7b1b      	ldrb	r3, [r3, #12]
 80184ca:	f003 030f 	and.w	r3, r3, #15
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d122      	bne.n	8018518 <pbuf_realloc+0xcc>
 80184d2:	68fb      	ldr	r3, [r7, #12]
 80184d4:	895b      	ldrh	r3, [r3, #10]
 80184d6:	897a      	ldrh	r2, [r7, #10]
 80184d8:	429a      	cmp	r2, r3
 80184da:	d01d      	beq.n	8018518 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	7b5b      	ldrb	r3, [r3, #13]
 80184e0:	f003 0302 	and.w	r3, r3, #2
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d117      	bne.n	8018518 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	685b      	ldr	r3, [r3, #4]
 80184ec:	461a      	mov	r2, r3
 80184ee:	68fb      	ldr	r3, [r7, #12]
 80184f0:	1ad3      	subs	r3, r2, r3
 80184f2:	b29a      	uxth	r2, r3
 80184f4:	897b      	ldrh	r3, [r7, #10]
 80184f6:	4413      	add	r3, r2
 80184f8:	b29b      	uxth	r3, r3
 80184fa:	4619      	mov	r1, r3
 80184fc:	68f8      	ldr	r0, [r7, #12]
 80184fe:	f7fe ffd1 	bl	80174a4 <mem_trim>
 8018502:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8018504:	68fb      	ldr	r3, [r7, #12]
 8018506:	2b00      	cmp	r3, #0
 8018508:	d106      	bne.n	8018518 <pbuf_realloc+0xcc>
 801850a:	4b0f      	ldr	r3, [pc, #60]	; (8018548 <pbuf_realloc+0xfc>)
 801850c:	f240 12bd 	movw	r2, #445	; 0x1bd
 8018510:	4911      	ldr	r1, [pc, #68]	; (8018558 <pbuf_realloc+0x10c>)
 8018512:	480f      	ldr	r0, [pc, #60]	; (8018550 <pbuf_realloc+0x104>)
 8018514:	f00e fa40 	bl	8026998 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8018518:	68fb      	ldr	r3, [r7, #12]
 801851a:	897a      	ldrh	r2, [r7, #10]
 801851c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801851e:	68fb      	ldr	r3, [r7, #12]
 8018520:	895a      	ldrh	r2, [r3, #10]
 8018522:	68fb      	ldr	r3, [r7, #12]
 8018524:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	2b00      	cmp	r3, #0
 801852c:	d004      	beq.n	8018538 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801852e:	68fb      	ldr	r3, [r7, #12]
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	4618      	mov	r0, r3
 8018534:	f000 f942 	bl	80187bc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8018538:	68fb      	ldr	r3, [r7, #12]
 801853a:	2200      	movs	r2, #0
 801853c:	601a      	str	r2, [r3, #0]
 801853e:	e000      	b.n	8018542 <pbuf_realloc+0xf6>
    return;
 8018540:	bf00      	nop

}
 8018542:	3710      	adds	r7, #16
 8018544:	46bd      	mov	sp, r7
 8018546:	bd80      	pop	{r7, pc}
 8018548:	08029214 	.word	0x08029214
 801854c:	0802932c 	.word	0x0802932c
 8018550:	08029274 	.word	0x08029274
 8018554:	08029344 	.word	0x08029344
 8018558:	0802935c 	.word	0x0802935c

0801855c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801855c:	b580      	push	{r7, lr}
 801855e:	b086      	sub	sp, #24
 8018560:	af00      	add	r7, sp, #0
 8018562:	60f8      	str	r0, [r7, #12]
 8018564:	60b9      	str	r1, [r7, #8]
 8018566:	4613      	mov	r3, r2
 8018568:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d106      	bne.n	801857e <pbuf_add_header_impl+0x22>
 8018570:	4b2b      	ldr	r3, [pc, #172]	; (8018620 <pbuf_add_header_impl+0xc4>)
 8018572:	f240 12df 	movw	r2, #479	; 0x1df
 8018576:	492b      	ldr	r1, [pc, #172]	; (8018624 <pbuf_add_header_impl+0xc8>)
 8018578:	482b      	ldr	r0, [pc, #172]	; (8018628 <pbuf_add_header_impl+0xcc>)
 801857a:	f00e fa0d 	bl	8026998 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801857e:	68fb      	ldr	r3, [r7, #12]
 8018580:	2b00      	cmp	r3, #0
 8018582:	d003      	beq.n	801858c <pbuf_add_header_impl+0x30>
 8018584:	68bb      	ldr	r3, [r7, #8]
 8018586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801858a:	d301      	bcc.n	8018590 <pbuf_add_header_impl+0x34>
    return 1;
 801858c:	2301      	movs	r3, #1
 801858e:	e043      	b.n	8018618 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8018590:	68bb      	ldr	r3, [r7, #8]
 8018592:	2b00      	cmp	r3, #0
 8018594:	d101      	bne.n	801859a <pbuf_add_header_impl+0x3e>
    return 0;
 8018596:	2300      	movs	r3, #0
 8018598:	e03e      	b.n	8018618 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801859a:	68bb      	ldr	r3, [r7, #8]
 801859c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801859e:	68fb      	ldr	r3, [r7, #12]
 80185a0:	891a      	ldrh	r2, [r3, #8]
 80185a2:	8a7b      	ldrh	r3, [r7, #18]
 80185a4:	4413      	add	r3, r2
 80185a6:	b29b      	uxth	r3, r3
 80185a8:	8a7a      	ldrh	r2, [r7, #18]
 80185aa:	429a      	cmp	r2, r3
 80185ac:	d901      	bls.n	80185b2 <pbuf_add_header_impl+0x56>
    return 1;
 80185ae:	2301      	movs	r3, #1
 80185b0:	e032      	b.n	8018618 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	7b1b      	ldrb	r3, [r3, #12]
 80185b6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80185b8:	8a3b      	ldrh	r3, [r7, #16]
 80185ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d00c      	beq.n	80185dc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	685a      	ldr	r2, [r3, #4]
 80185c6:	68bb      	ldr	r3, [r7, #8]
 80185c8:	425b      	negs	r3, r3
 80185ca:	4413      	add	r3, r2
 80185cc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80185ce:	68fb      	ldr	r3, [r7, #12]
 80185d0:	3310      	adds	r3, #16
 80185d2:	697a      	ldr	r2, [r7, #20]
 80185d4:	429a      	cmp	r2, r3
 80185d6:	d20d      	bcs.n	80185f4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80185d8:	2301      	movs	r3, #1
 80185da:	e01d      	b.n	8018618 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80185dc:	79fb      	ldrb	r3, [r7, #7]
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d006      	beq.n	80185f0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80185e2:	68fb      	ldr	r3, [r7, #12]
 80185e4:	685a      	ldr	r2, [r3, #4]
 80185e6:	68bb      	ldr	r3, [r7, #8]
 80185e8:	425b      	negs	r3, r3
 80185ea:	4413      	add	r3, r2
 80185ec:	617b      	str	r3, [r7, #20]
 80185ee:	e001      	b.n	80185f4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80185f0:	2301      	movs	r3, #1
 80185f2:	e011      	b.n	8018618 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	697a      	ldr	r2, [r7, #20]
 80185f8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	895a      	ldrh	r2, [r3, #10]
 80185fe:	8a7b      	ldrh	r3, [r7, #18]
 8018600:	4413      	add	r3, r2
 8018602:	b29a      	uxth	r2, r3
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	891a      	ldrh	r2, [r3, #8]
 801860c:	8a7b      	ldrh	r3, [r7, #18]
 801860e:	4413      	add	r3, r2
 8018610:	b29a      	uxth	r2, r3
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	811a      	strh	r2, [r3, #8]


  return 0;
 8018616:	2300      	movs	r3, #0
}
 8018618:	4618      	mov	r0, r3
 801861a:	3718      	adds	r7, #24
 801861c:	46bd      	mov	sp, r7
 801861e:	bd80      	pop	{r7, pc}
 8018620:	08029214 	.word	0x08029214
 8018624:	08029378 	.word	0x08029378
 8018628:	08029274 	.word	0x08029274

0801862c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801862c:	b580      	push	{r7, lr}
 801862e:	b082      	sub	sp, #8
 8018630:	af00      	add	r7, sp, #0
 8018632:	6078      	str	r0, [r7, #4]
 8018634:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8018636:	2200      	movs	r2, #0
 8018638:	6839      	ldr	r1, [r7, #0]
 801863a:	6878      	ldr	r0, [r7, #4]
 801863c:	f7ff ff8e 	bl	801855c <pbuf_add_header_impl>
 8018640:	4603      	mov	r3, r0
}
 8018642:	4618      	mov	r0, r3
 8018644:	3708      	adds	r7, #8
 8018646:	46bd      	mov	sp, r7
 8018648:	bd80      	pop	{r7, pc}
	...

0801864c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801864c:	b580      	push	{r7, lr}
 801864e:	b084      	sub	sp, #16
 8018650:	af00      	add	r7, sp, #0
 8018652:	6078      	str	r0, [r7, #4]
 8018654:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	2b00      	cmp	r3, #0
 801865a:	d106      	bne.n	801866a <pbuf_remove_header+0x1e>
 801865c:	4b20      	ldr	r3, [pc, #128]	; (80186e0 <pbuf_remove_header+0x94>)
 801865e:	f240 224b 	movw	r2, #587	; 0x24b
 8018662:	4920      	ldr	r1, [pc, #128]	; (80186e4 <pbuf_remove_header+0x98>)
 8018664:	4820      	ldr	r0, [pc, #128]	; (80186e8 <pbuf_remove_header+0x9c>)
 8018666:	f00e f997 	bl	8026998 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	2b00      	cmp	r3, #0
 801866e:	d003      	beq.n	8018678 <pbuf_remove_header+0x2c>
 8018670:	683b      	ldr	r3, [r7, #0]
 8018672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018676:	d301      	bcc.n	801867c <pbuf_remove_header+0x30>
    return 1;
 8018678:	2301      	movs	r3, #1
 801867a:	e02c      	b.n	80186d6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801867c:	683b      	ldr	r3, [r7, #0]
 801867e:	2b00      	cmp	r3, #0
 8018680:	d101      	bne.n	8018686 <pbuf_remove_header+0x3a>
    return 0;
 8018682:	2300      	movs	r3, #0
 8018684:	e027      	b.n	80186d6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8018686:	683b      	ldr	r3, [r7, #0]
 8018688:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	895b      	ldrh	r3, [r3, #10]
 801868e:	89fa      	ldrh	r2, [r7, #14]
 8018690:	429a      	cmp	r2, r3
 8018692:	d908      	bls.n	80186a6 <pbuf_remove_header+0x5a>
 8018694:	4b12      	ldr	r3, [pc, #72]	; (80186e0 <pbuf_remove_header+0x94>)
 8018696:	f240 2255 	movw	r2, #597	; 0x255
 801869a:	4914      	ldr	r1, [pc, #80]	; (80186ec <pbuf_remove_header+0xa0>)
 801869c:	4812      	ldr	r0, [pc, #72]	; (80186e8 <pbuf_remove_header+0x9c>)
 801869e:	f00e f97b 	bl	8026998 <iprintf>
 80186a2:	2301      	movs	r3, #1
 80186a4:	e017      	b.n	80186d6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	685b      	ldr	r3, [r3, #4]
 80186aa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	685a      	ldr	r2, [r3, #4]
 80186b0:	683b      	ldr	r3, [r7, #0]
 80186b2:	441a      	add	r2, r3
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	895a      	ldrh	r2, [r3, #10]
 80186bc:	89fb      	ldrh	r3, [r7, #14]
 80186be:	1ad3      	subs	r3, r2, r3
 80186c0:	b29a      	uxth	r2, r3
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	891a      	ldrh	r2, [r3, #8]
 80186ca:	89fb      	ldrh	r3, [r7, #14]
 80186cc:	1ad3      	subs	r3, r2, r3
 80186ce:	b29a      	uxth	r2, r3
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80186d4:	2300      	movs	r3, #0
}
 80186d6:	4618      	mov	r0, r3
 80186d8:	3710      	adds	r7, #16
 80186da:	46bd      	mov	sp, r7
 80186dc:	bd80      	pop	{r7, pc}
 80186de:	bf00      	nop
 80186e0:	08029214 	.word	0x08029214
 80186e4:	08029378 	.word	0x08029378
 80186e8:	08029274 	.word	0x08029274
 80186ec:	08029384 	.word	0x08029384

080186f0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80186f0:	b580      	push	{r7, lr}
 80186f2:	b082      	sub	sp, #8
 80186f4:	af00      	add	r7, sp, #0
 80186f6:	6078      	str	r0, [r7, #4]
 80186f8:	460b      	mov	r3, r1
 80186fa:	807b      	strh	r3, [r7, #2]
 80186fc:	4613      	mov	r3, r2
 80186fe:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8018700:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018704:	2b00      	cmp	r3, #0
 8018706:	da08      	bge.n	801871a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8018708:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801870c:	425b      	negs	r3, r3
 801870e:	4619      	mov	r1, r3
 8018710:	6878      	ldr	r0, [r7, #4]
 8018712:	f7ff ff9b 	bl	801864c <pbuf_remove_header>
 8018716:	4603      	mov	r3, r0
 8018718:	e007      	b.n	801872a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801871a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801871e:	787a      	ldrb	r2, [r7, #1]
 8018720:	4619      	mov	r1, r3
 8018722:	6878      	ldr	r0, [r7, #4]
 8018724:	f7ff ff1a 	bl	801855c <pbuf_add_header_impl>
 8018728:	4603      	mov	r3, r0
  }
}
 801872a:	4618      	mov	r0, r3
 801872c:	3708      	adds	r7, #8
 801872e:	46bd      	mov	sp, r7
 8018730:	bd80      	pop	{r7, pc}

08018732 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8018732:	b580      	push	{r7, lr}
 8018734:	b082      	sub	sp, #8
 8018736:	af00      	add	r7, sp, #0
 8018738:	6078      	str	r0, [r7, #4]
 801873a:	460b      	mov	r3, r1
 801873c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801873e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018742:	2201      	movs	r2, #1
 8018744:	4619      	mov	r1, r3
 8018746:	6878      	ldr	r0, [r7, #4]
 8018748:	f7ff ffd2 	bl	80186f0 <pbuf_header_impl>
 801874c:	4603      	mov	r3, r0
}
 801874e:	4618      	mov	r0, r3
 8018750:	3708      	adds	r7, #8
 8018752:	46bd      	mov	sp, r7
 8018754:	bd80      	pop	{r7, pc}

08018756 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 8018756:	b580      	push	{r7, lr}
 8018758:	b086      	sub	sp, #24
 801875a:	af00      	add	r7, sp, #0
 801875c:	6078      	str	r0, [r7, #4]
 801875e:	460b      	mov	r3, r1
 8018760:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 8018766:	887b      	ldrh	r3, [r7, #2]
 8018768:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 801876a:	e01c      	b.n	80187a6 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 801876c:	697b      	ldr	r3, [r7, #20]
 801876e:	895b      	ldrh	r3, [r3, #10]
 8018770:	8a7a      	ldrh	r2, [r7, #18]
 8018772:	429a      	cmp	r2, r3
 8018774:	d310      	bcc.n	8018798 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 8018776:	697b      	ldr	r3, [r7, #20]
 8018778:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 801877a:	697b      	ldr	r3, [r7, #20]
 801877c:	895b      	ldrh	r3, [r3, #10]
 801877e:	8a7a      	ldrh	r2, [r7, #18]
 8018780:	1ad3      	subs	r3, r2, r3
 8018782:	827b      	strh	r3, [r7, #18]
      p = p->next;
 8018784:	697b      	ldr	r3, [r7, #20]
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	617b      	str	r3, [r7, #20]
      f->next = 0;
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	2200      	movs	r2, #0
 801878e:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 8018790:	68f8      	ldr	r0, [r7, #12]
 8018792:	f000 f813 	bl	80187bc <pbuf_free>
 8018796:	e006      	b.n	80187a6 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 8018798:	8a7b      	ldrh	r3, [r7, #18]
 801879a:	4619      	mov	r1, r3
 801879c:	6978      	ldr	r0, [r7, #20]
 801879e:	f7ff ff55 	bl	801864c <pbuf_remove_header>
      free_left = 0;
 80187a2:	2300      	movs	r3, #0
 80187a4:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 80187a6:	8a7b      	ldrh	r3, [r7, #18]
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d002      	beq.n	80187b2 <pbuf_free_header+0x5c>
 80187ac:	697b      	ldr	r3, [r7, #20]
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d1dc      	bne.n	801876c <pbuf_free_header+0x16>
    }
  }
  return p;
 80187b2:	697b      	ldr	r3, [r7, #20]
}
 80187b4:	4618      	mov	r0, r3
 80187b6:	3718      	adds	r7, #24
 80187b8:	46bd      	mov	sp, r7
 80187ba:	bd80      	pop	{r7, pc}

080187bc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80187bc:	b580      	push	{r7, lr}
 80187be:	b088      	sub	sp, #32
 80187c0:	af00      	add	r7, sp, #0
 80187c2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d10b      	bne.n	80187e2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d106      	bne.n	80187de <pbuf_free+0x22>
 80187d0:	4b3b      	ldr	r3, [pc, #236]	; (80188c0 <pbuf_free+0x104>)
 80187d2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80187d6:	493b      	ldr	r1, [pc, #236]	; (80188c4 <pbuf_free+0x108>)
 80187d8:	483b      	ldr	r0, [pc, #236]	; (80188c8 <pbuf_free+0x10c>)
 80187da:	f00e f8dd 	bl	8026998 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80187de:	2300      	movs	r3, #0
 80187e0:	e069      	b.n	80188b6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80187e2:	2300      	movs	r3, #0
 80187e4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80187e6:	e062      	b.n	80188ae <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80187e8:	f00b febe 	bl	8024568 <sys_arch_protect>
 80187ec:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	7b9b      	ldrb	r3, [r3, #14]
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d106      	bne.n	8018804 <pbuf_free+0x48>
 80187f6:	4b32      	ldr	r3, [pc, #200]	; (80188c0 <pbuf_free+0x104>)
 80187f8:	f240 22f1 	movw	r2, #753	; 0x2f1
 80187fc:	4933      	ldr	r1, [pc, #204]	; (80188cc <pbuf_free+0x110>)
 80187fe:	4832      	ldr	r0, [pc, #200]	; (80188c8 <pbuf_free+0x10c>)
 8018800:	f00e f8ca 	bl	8026998 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	7b9b      	ldrb	r3, [r3, #14]
 8018808:	3b01      	subs	r3, #1
 801880a:	b2da      	uxtb	r2, r3
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	739a      	strb	r2, [r3, #14]
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	7b9b      	ldrb	r3, [r3, #14]
 8018814:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8018816:	69b8      	ldr	r0, [r7, #24]
 8018818:	f00b feb4 	bl	8024584 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801881c:	7dfb      	ldrb	r3, [r7, #23]
 801881e:	2b00      	cmp	r3, #0
 8018820:	d143      	bne.n	80188aa <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8018828:	687b      	ldr	r3, [r7, #4]
 801882a:	7b1b      	ldrb	r3, [r3, #12]
 801882c:	f003 030f 	and.w	r3, r3, #15
 8018830:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	7b5b      	ldrb	r3, [r3, #13]
 8018836:	f003 0302 	and.w	r3, r3, #2
 801883a:	2b00      	cmp	r3, #0
 801883c:	d011      	beq.n	8018862 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8018842:	68bb      	ldr	r3, [r7, #8]
 8018844:	691b      	ldr	r3, [r3, #16]
 8018846:	2b00      	cmp	r3, #0
 8018848:	d106      	bne.n	8018858 <pbuf_free+0x9c>
 801884a:	4b1d      	ldr	r3, [pc, #116]	; (80188c0 <pbuf_free+0x104>)
 801884c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8018850:	491f      	ldr	r1, [pc, #124]	; (80188d0 <pbuf_free+0x114>)
 8018852:	481d      	ldr	r0, [pc, #116]	; (80188c8 <pbuf_free+0x10c>)
 8018854:	f00e f8a0 	bl	8026998 <iprintf>
        pc->custom_free_function(p);
 8018858:	68bb      	ldr	r3, [r7, #8]
 801885a:	691b      	ldr	r3, [r3, #16]
 801885c:	6878      	ldr	r0, [r7, #4]
 801885e:	4798      	blx	r3
 8018860:	e01d      	b.n	801889e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8018862:	7bfb      	ldrb	r3, [r7, #15]
 8018864:	2b02      	cmp	r3, #2
 8018866:	d104      	bne.n	8018872 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8018868:	6879      	ldr	r1, [r7, #4]
 801886a:	200c      	movs	r0, #12
 801886c:	f7ff f8f8 	bl	8017a60 <memp_free>
 8018870:	e015      	b.n	801889e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8018872:	7bfb      	ldrb	r3, [r7, #15]
 8018874:	2b01      	cmp	r3, #1
 8018876:	d104      	bne.n	8018882 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8018878:	6879      	ldr	r1, [r7, #4]
 801887a:	200b      	movs	r0, #11
 801887c:	f7ff f8f0 	bl	8017a60 <memp_free>
 8018880:	e00d      	b.n	801889e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8018882:	7bfb      	ldrb	r3, [r7, #15]
 8018884:	2b00      	cmp	r3, #0
 8018886:	d103      	bne.n	8018890 <pbuf_free+0xd4>
          mem_free(p);
 8018888:	6878      	ldr	r0, [r7, #4]
 801888a:	f7fe fd7b 	bl	8017384 <mem_free>
 801888e:	e006      	b.n	801889e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8018890:	4b0b      	ldr	r3, [pc, #44]	; (80188c0 <pbuf_free+0x104>)
 8018892:	f240 320f 	movw	r2, #783	; 0x30f
 8018896:	490f      	ldr	r1, [pc, #60]	; (80188d4 <pbuf_free+0x118>)
 8018898:	480b      	ldr	r0, [pc, #44]	; (80188c8 <pbuf_free+0x10c>)
 801889a:	f00e f87d 	bl	8026998 <iprintf>
        }
      }
      count++;
 801889e:	7ffb      	ldrb	r3, [r7, #31]
 80188a0:	3301      	adds	r3, #1
 80188a2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80188a4:	693b      	ldr	r3, [r7, #16]
 80188a6:	607b      	str	r3, [r7, #4]
 80188a8:	e001      	b.n	80188ae <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80188aa:	2300      	movs	r3, #0
 80188ac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d199      	bne.n	80187e8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80188b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80188b6:	4618      	mov	r0, r3
 80188b8:	3720      	adds	r7, #32
 80188ba:	46bd      	mov	sp, r7
 80188bc:	bd80      	pop	{r7, pc}
 80188be:	bf00      	nop
 80188c0:	08029214 	.word	0x08029214
 80188c4:	08029378 	.word	0x08029378
 80188c8:	08029274 	.word	0x08029274
 80188cc:	080293a4 	.word	0x080293a4
 80188d0:	080293bc 	.word	0x080293bc
 80188d4:	080293e0 	.word	0x080293e0

080188d8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80188d8:	b480      	push	{r7}
 80188da:	b085      	sub	sp, #20
 80188dc:	af00      	add	r7, sp, #0
 80188de:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80188e0:	2300      	movs	r3, #0
 80188e2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80188e4:	e005      	b.n	80188f2 <pbuf_clen+0x1a>
    ++len;
 80188e6:	89fb      	ldrh	r3, [r7, #14]
 80188e8:	3301      	adds	r3, #1
 80188ea:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d1f6      	bne.n	80188e6 <pbuf_clen+0xe>
  }
  return len;
 80188f8:	89fb      	ldrh	r3, [r7, #14]
}
 80188fa:	4618      	mov	r0, r3
 80188fc:	3714      	adds	r7, #20
 80188fe:	46bd      	mov	sp, r7
 8018900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018904:	4770      	bx	lr
	...

08018908 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8018908:	b580      	push	{r7, lr}
 801890a:	b084      	sub	sp, #16
 801890c:	af00      	add	r7, sp, #0
 801890e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	2b00      	cmp	r3, #0
 8018914:	d016      	beq.n	8018944 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8018916:	f00b fe27 	bl	8024568 <sys_arch_protect>
 801891a:	60f8      	str	r0, [r7, #12]
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	7b9b      	ldrb	r3, [r3, #14]
 8018920:	3301      	adds	r3, #1
 8018922:	b2da      	uxtb	r2, r3
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	739a      	strb	r2, [r3, #14]
 8018928:	68f8      	ldr	r0, [r7, #12]
 801892a:	f00b fe2b 	bl	8024584 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	7b9b      	ldrb	r3, [r3, #14]
 8018932:	2b00      	cmp	r3, #0
 8018934:	d106      	bne.n	8018944 <pbuf_ref+0x3c>
 8018936:	4b05      	ldr	r3, [pc, #20]	; (801894c <pbuf_ref+0x44>)
 8018938:	f240 3242 	movw	r2, #834	; 0x342
 801893c:	4904      	ldr	r1, [pc, #16]	; (8018950 <pbuf_ref+0x48>)
 801893e:	4805      	ldr	r0, [pc, #20]	; (8018954 <pbuf_ref+0x4c>)
 8018940:	f00e f82a 	bl	8026998 <iprintf>
  }
}
 8018944:	bf00      	nop
 8018946:	3710      	adds	r7, #16
 8018948:	46bd      	mov	sp, r7
 801894a:	bd80      	pop	{r7, pc}
 801894c:	08029214 	.word	0x08029214
 8018950:	080293f4 	.word	0x080293f4
 8018954:	08029274 	.word	0x08029274

08018958 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8018958:	b580      	push	{r7, lr}
 801895a:	b084      	sub	sp, #16
 801895c:	af00      	add	r7, sp, #0
 801895e:	6078      	str	r0, [r7, #4]
 8018960:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	2b00      	cmp	r3, #0
 8018966:	d002      	beq.n	801896e <pbuf_cat+0x16>
 8018968:	683b      	ldr	r3, [r7, #0]
 801896a:	2b00      	cmp	r3, #0
 801896c:	d107      	bne.n	801897e <pbuf_cat+0x26>
 801896e:	4b20      	ldr	r3, [pc, #128]	; (80189f0 <pbuf_cat+0x98>)
 8018970:	f240 325a 	movw	r2, #858	; 0x35a
 8018974:	491f      	ldr	r1, [pc, #124]	; (80189f4 <pbuf_cat+0x9c>)
 8018976:	4820      	ldr	r0, [pc, #128]	; (80189f8 <pbuf_cat+0xa0>)
 8018978:	f00e f80e 	bl	8026998 <iprintf>
 801897c:	e034      	b.n	80189e8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	60fb      	str	r3, [r7, #12]
 8018982:	e00a      	b.n	801899a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	891a      	ldrh	r2, [r3, #8]
 8018988:	683b      	ldr	r3, [r7, #0]
 801898a:	891b      	ldrh	r3, [r3, #8]
 801898c:	4413      	add	r3, r2
 801898e:	b29a      	uxth	r2, r3
 8018990:	68fb      	ldr	r3, [r7, #12]
 8018992:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8018994:	68fb      	ldr	r3, [r7, #12]
 8018996:	681b      	ldr	r3, [r3, #0]
 8018998:	60fb      	str	r3, [r7, #12]
 801899a:	68fb      	ldr	r3, [r7, #12]
 801899c:	681b      	ldr	r3, [r3, #0]
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d1f0      	bne.n	8018984 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80189a2:	68fb      	ldr	r3, [r7, #12]
 80189a4:	891a      	ldrh	r2, [r3, #8]
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	895b      	ldrh	r3, [r3, #10]
 80189aa:	429a      	cmp	r2, r3
 80189ac:	d006      	beq.n	80189bc <pbuf_cat+0x64>
 80189ae:	4b10      	ldr	r3, [pc, #64]	; (80189f0 <pbuf_cat+0x98>)
 80189b0:	f240 3262 	movw	r2, #866	; 0x362
 80189b4:	4911      	ldr	r1, [pc, #68]	; (80189fc <pbuf_cat+0xa4>)
 80189b6:	4810      	ldr	r0, [pc, #64]	; (80189f8 <pbuf_cat+0xa0>)
 80189b8:	f00d ffee 	bl	8026998 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80189bc:	68fb      	ldr	r3, [r7, #12]
 80189be:	681b      	ldr	r3, [r3, #0]
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d006      	beq.n	80189d2 <pbuf_cat+0x7a>
 80189c4:	4b0a      	ldr	r3, [pc, #40]	; (80189f0 <pbuf_cat+0x98>)
 80189c6:	f240 3263 	movw	r2, #867	; 0x363
 80189ca:	490d      	ldr	r1, [pc, #52]	; (8018a00 <pbuf_cat+0xa8>)
 80189cc:	480a      	ldr	r0, [pc, #40]	; (80189f8 <pbuf_cat+0xa0>)
 80189ce:	f00d ffe3 	bl	8026998 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	891a      	ldrh	r2, [r3, #8]
 80189d6:	683b      	ldr	r3, [r7, #0]
 80189d8:	891b      	ldrh	r3, [r3, #8]
 80189da:	4413      	add	r3, r2
 80189dc:	b29a      	uxth	r2, r3
 80189de:	68fb      	ldr	r3, [r7, #12]
 80189e0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80189e2:	68fb      	ldr	r3, [r7, #12]
 80189e4:	683a      	ldr	r2, [r7, #0]
 80189e6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80189e8:	3710      	adds	r7, #16
 80189ea:	46bd      	mov	sp, r7
 80189ec:	bd80      	pop	{r7, pc}
 80189ee:	bf00      	nop
 80189f0:	08029214 	.word	0x08029214
 80189f4:	08029408 	.word	0x08029408
 80189f8:	08029274 	.word	0x08029274
 80189fc:	08029440 	.word	0x08029440
 8018a00:	08029470 	.word	0x08029470

08018a04 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8018a04:	b580      	push	{r7, lr}
 8018a06:	b082      	sub	sp, #8
 8018a08:	af00      	add	r7, sp, #0
 8018a0a:	6078      	str	r0, [r7, #4]
 8018a0c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8018a0e:	6839      	ldr	r1, [r7, #0]
 8018a10:	6878      	ldr	r0, [r7, #4]
 8018a12:	f7ff ffa1 	bl	8018958 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8018a16:	6838      	ldr	r0, [r7, #0]
 8018a18:	f7ff ff76 	bl	8018908 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8018a1c:	bf00      	nop
 8018a1e:	3708      	adds	r7, #8
 8018a20:	46bd      	mov	sp, r7
 8018a22:	bd80      	pop	{r7, pc}

08018a24 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8018a24:	b580      	push	{r7, lr}
 8018a26:	b086      	sub	sp, #24
 8018a28:	af00      	add	r7, sp, #0
 8018a2a:	6078      	str	r0, [r7, #4]
 8018a2c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8018a2e:	2300      	movs	r3, #0
 8018a30:	617b      	str	r3, [r7, #20]
 8018a32:	2300      	movs	r3, #0
 8018a34:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d008      	beq.n	8018a4e <pbuf_copy+0x2a>
 8018a3c:	683b      	ldr	r3, [r7, #0]
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d005      	beq.n	8018a4e <pbuf_copy+0x2a>
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	891a      	ldrh	r2, [r3, #8]
 8018a46:	683b      	ldr	r3, [r7, #0]
 8018a48:	891b      	ldrh	r3, [r3, #8]
 8018a4a:	429a      	cmp	r2, r3
 8018a4c:	d209      	bcs.n	8018a62 <pbuf_copy+0x3e>
 8018a4e:	4b57      	ldr	r3, [pc, #348]	; (8018bac <pbuf_copy+0x188>)
 8018a50:	f240 32ca 	movw	r2, #970	; 0x3ca
 8018a54:	4956      	ldr	r1, [pc, #344]	; (8018bb0 <pbuf_copy+0x18c>)
 8018a56:	4857      	ldr	r0, [pc, #348]	; (8018bb4 <pbuf_copy+0x190>)
 8018a58:	f00d ff9e 	bl	8026998 <iprintf>
 8018a5c:	f06f 030f 	mvn.w	r3, #15
 8018a60:	e09f      	b.n	8018ba2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	895b      	ldrh	r3, [r3, #10]
 8018a66:	461a      	mov	r2, r3
 8018a68:	697b      	ldr	r3, [r7, #20]
 8018a6a:	1ad2      	subs	r2, r2, r3
 8018a6c:	683b      	ldr	r3, [r7, #0]
 8018a6e:	895b      	ldrh	r3, [r3, #10]
 8018a70:	4619      	mov	r1, r3
 8018a72:	693b      	ldr	r3, [r7, #16]
 8018a74:	1acb      	subs	r3, r1, r3
 8018a76:	429a      	cmp	r2, r3
 8018a78:	d306      	bcc.n	8018a88 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8018a7a:	683b      	ldr	r3, [r7, #0]
 8018a7c:	895b      	ldrh	r3, [r3, #10]
 8018a7e:	461a      	mov	r2, r3
 8018a80:	693b      	ldr	r3, [r7, #16]
 8018a82:	1ad3      	subs	r3, r2, r3
 8018a84:	60fb      	str	r3, [r7, #12]
 8018a86:	e005      	b.n	8018a94 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	895b      	ldrh	r3, [r3, #10]
 8018a8c:	461a      	mov	r2, r3
 8018a8e:	697b      	ldr	r3, [r7, #20]
 8018a90:	1ad3      	subs	r3, r2, r3
 8018a92:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	685a      	ldr	r2, [r3, #4]
 8018a98:	697b      	ldr	r3, [r7, #20]
 8018a9a:	18d0      	adds	r0, r2, r3
 8018a9c:	683b      	ldr	r3, [r7, #0]
 8018a9e:	685a      	ldr	r2, [r3, #4]
 8018aa0:	693b      	ldr	r3, [r7, #16]
 8018aa2:	4413      	add	r3, r2
 8018aa4:	68fa      	ldr	r2, [r7, #12]
 8018aa6:	4619      	mov	r1, r3
 8018aa8:	f00d febb 	bl	8026822 <memcpy>
    offset_to += len;
 8018aac:	697a      	ldr	r2, [r7, #20]
 8018aae:	68fb      	ldr	r3, [r7, #12]
 8018ab0:	4413      	add	r3, r2
 8018ab2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8018ab4:	693a      	ldr	r2, [r7, #16]
 8018ab6:	68fb      	ldr	r3, [r7, #12]
 8018ab8:	4413      	add	r3, r2
 8018aba:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	895b      	ldrh	r3, [r3, #10]
 8018ac0:	461a      	mov	r2, r3
 8018ac2:	697b      	ldr	r3, [r7, #20]
 8018ac4:	4293      	cmp	r3, r2
 8018ac6:	d906      	bls.n	8018ad6 <pbuf_copy+0xb2>
 8018ac8:	4b38      	ldr	r3, [pc, #224]	; (8018bac <pbuf_copy+0x188>)
 8018aca:	f240 32d9 	movw	r2, #985	; 0x3d9
 8018ace:	493a      	ldr	r1, [pc, #232]	; (8018bb8 <pbuf_copy+0x194>)
 8018ad0:	4838      	ldr	r0, [pc, #224]	; (8018bb4 <pbuf_copy+0x190>)
 8018ad2:	f00d ff61 	bl	8026998 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8018ad6:	683b      	ldr	r3, [r7, #0]
 8018ad8:	895b      	ldrh	r3, [r3, #10]
 8018ada:	461a      	mov	r2, r3
 8018adc:	693b      	ldr	r3, [r7, #16]
 8018ade:	4293      	cmp	r3, r2
 8018ae0:	d906      	bls.n	8018af0 <pbuf_copy+0xcc>
 8018ae2:	4b32      	ldr	r3, [pc, #200]	; (8018bac <pbuf_copy+0x188>)
 8018ae4:	f240 32da 	movw	r2, #986	; 0x3da
 8018ae8:	4934      	ldr	r1, [pc, #208]	; (8018bbc <pbuf_copy+0x198>)
 8018aea:	4832      	ldr	r0, [pc, #200]	; (8018bb4 <pbuf_copy+0x190>)
 8018aec:	f00d ff54 	bl	8026998 <iprintf>
    if (offset_from >= p_from->len) {
 8018af0:	683b      	ldr	r3, [r7, #0]
 8018af2:	895b      	ldrh	r3, [r3, #10]
 8018af4:	461a      	mov	r2, r3
 8018af6:	693b      	ldr	r3, [r7, #16]
 8018af8:	4293      	cmp	r3, r2
 8018afa:	d304      	bcc.n	8018b06 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8018afc:	2300      	movs	r3, #0
 8018afe:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8018b00:	683b      	ldr	r3, [r7, #0]
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	895b      	ldrh	r3, [r3, #10]
 8018b0a:	461a      	mov	r2, r3
 8018b0c:	697b      	ldr	r3, [r7, #20]
 8018b0e:	4293      	cmp	r3, r2
 8018b10:	d114      	bne.n	8018b3c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8018b12:	2300      	movs	r3, #0
 8018b14:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	681b      	ldr	r3, [r3, #0]
 8018b1a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d10c      	bne.n	8018b3c <pbuf_copy+0x118>
 8018b22:	683b      	ldr	r3, [r7, #0]
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d009      	beq.n	8018b3c <pbuf_copy+0x118>
 8018b28:	4b20      	ldr	r3, [pc, #128]	; (8018bac <pbuf_copy+0x188>)
 8018b2a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8018b2e:	4924      	ldr	r1, [pc, #144]	; (8018bc0 <pbuf_copy+0x19c>)
 8018b30:	4820      	ldr	r0, [pc, #128]	; (8018bb4 <pbuf_copy+0x190>)
 8018b32:	f00d ff31 	bl	8026998 <iprintf>
 8018b36:	f06f 030f 	mvn.w	r3, #15
 8018b3a:	e032      	b.n	8018ba2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8018b3c:	683b      	ldr	r3, [r7, #0]
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d013      	beq.n	8018b6a <pbuf_copy+0x146>
 8018b42:	683b      	ldr	r3, [r7, #0]
 8018b44:	895a      	ldrh	r2, [r3, #10]
 8018b46:	683b      	ldr	r3, [r7, #0]
 8018b48:	891b      	ldrh	r3, [r3, #8]
 8018b4a:	429a      	cmp	r2, r3
 8018b4c:	d10d      	bne.n	8018b6a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8018b4e:	683b      	ldr	r3, [r7, #0]
 8018b50:	681b      	ldr	r3, [r3, #0]
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d009      	beq.n	8018b6a <pbuf_copy+0x146>
 8018b56:	4b15      	ldr	r3, [pc, #84]	; (8018bac <pbuf_copy+0x188>)
 8018b58:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8018b5c:	4919      	ldr	r1, [pc, #100]	; (8018bc4 <pbuf_copy+0x1a0>)
 8018b5e:	4815      	ldr	r0, [pc, #84]	; (8018bb4 <pbuf_copy+0x190>)
 8018b60:	f00d ff1a 	bl	8026998 <iprintf>
 8018b64:	f06f 0305 	mvn.w	r3, #5
 8018b68:	e01b      	b.n	8018ba2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	d013      	beq.n	8018b98 <pbuf_copy+0x174>
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	895a      	ldrh	r2, [r3, #10]
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	891b      	ldrh	r3, [r3, #8]
 8018b78:	429a      	cmp	r2, r3
 8018b7a:	d10d      	bne.n	8018b98 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	d009      	beq.n	8018b98 <pbuf_copy+0x174>
 8018b84:	4b09      	ldr	r3, [pc, #36]	; (8018bac <pbuf_copy+0x188>)
 8018b86:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8018b8a:	490e      	ldr	r1, [pc, #56]	; (8018bc4 <pbuf_copy+0x1a0>)
 8018b8c:	4809      	ldr	r0, [pc, #36]	; (8018bb4 <pbuf_copy+0x190>)
 8018b8e:	f00d ff03 	bl	8026998 <iprintf>
 8018b92:	f06f 0305 	mvn.w	r3, #5
 8018b96:	e004      	b.n	8018ba2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8018b98:	683b      	ldr	r3, [r7, #0]
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	f47f af61 	bne.w	8018a62 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8018ba0:	2300      	movs	r3, #0
}
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	3718      	adds	r7, #24
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	bd80      	pop	{r7, pc}
 8018baa:	bf00      	nop
 8018bac:	08029214 	.word	0x08029214
 8018bb0:	080294bc 	.word	0x080294bc
 8018bb4:	08029274 	.word	0x08029274
 8018bb8:	080294ec 	.word	0x080294ec
 8018bbc:	08029504 	.word	0x08029504
 8018bc0:	08029520 	.word	0x08029520
 8018bc4:	08029530 	.word	0x08029530

08018bc8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8018bc8:	b580      	push	{r7, lr}
 8018bca:	b088      	sub	sp, #32
 8018bcc:	af00      	add	r7, sp, #0
 8018bce:	60f8      	str	r0, [r7, #12]
 8018bd0:	60b9      	str	r1, [r7, #8]
 8018bd2:	4611      	mov	r1, r2
 8018bd4:	461a      	mov	r2, r3
 8018bd6:	460b      	mov	r3, r1
 8018bd8:	80fb      	strh	r3, [r7, #6]
 8018bda:	4613      	mov	r3, r2
 8018bdc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8018bde:	2300      	movs	r3, #0
 8018be0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8018be2:	2300      	movs	r3, #0
 8018be4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8018be6:	68fb      	ldr	r3, [r7, #12]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d108      	bne.n	8018bfe <pbuf_copy_partial+0x36>
 8018bec:	4b2b      	ldr	r3, [pc, #172]	; (8018c9c <pbuf_copy_partial+0xd4>)
 8018bee:	f240 420a 	movw	r2, #1034	; 0x40a
 8018bf2:	492b      	ldr	r1, [pc, #172]	; (8018ca0 <pbuf_copy_partial+0xd8>)
 8018bf4:	482b      	ldr	r0, [pc, #172]	; (8018ca4 <pbuf_copy_partial+0xdc>)
 8018bf6:	f00d fecf 	bl	8026998 <iprintf>
 8018bfa:	2300      	movs	r3, #0
 8018bfc:	e04a      	b.n	8018c94 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8018bfe:	68bb      	ldr	r3, [r7, #8]
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d108      	bne.n	8018c16 <pbuf_copy_partial+0x4e>
 8018c04:	4b25      	ldr	r3, [pc, #148]	; (8018c9c <pbuf_copy_partial+0xd4>)
 8018c06:	f240 420b 	movw	r2, #1035	; 0x40b
 8018c0a:	4927      	ldr	r1, [pc, #156]	; (8018ca8 <pbuf_copy_partial+0xe0>)
 8018c0c:	4825      	ldr	r0, [pc, #148]	; (8018ca4 <pbuf_copy_partial+0xdc>)
 8018c0e:	f00d fec3 	bl	8026998 <iprintf>
 8018c12:	2300      	movs	r3, #0
 8018c14:	e03e      	b.n	8018c94 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8018c16:	68fb      	ldr	r3, [r7, #12]
 8018c18:	61fb      	str	r3, [r7, #28]
 8018c1a:	e034      	b.n	8018c86 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8018c1c:	88bb      	ldrh	r3, [r7, #4]
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d00a      	beq.n	8018c38 <pbuf_copy_partial+0x70>
 8018c22:	69fb      	ldr	r3, [r7, #28]
 8018c24:	895b      	ldrh	r3, [r3, #10]
 8018c26:	88ba      	ldrh	r2, [r7, #4]
 8018c28:	429a      	cmp	r2, r3
 8018c2a:	d305      	bcc.n	8018c38 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8018c2c:	69fb      	ldr	r3, [r7, #28]
 8018c2e:	895b      	ldrh	r3, [r3, #10]
 8018c30:	88ba      	ldrh	r2, [r7, #4]
 8018c32:	1ad3      	subs	r3, r2, r3
 8018c34:	80bb      	strh	r3, [r7, #4]
 8018c36:	e023      	b.n	8018c80 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8018c38:	69fb      	ldr	r3, [r7, #28]
 8018c3a:	895a      	ldrh	r2, [r3, #10]
 8018c3c:	88bb      	ldrh	r3, [r7, #4]
 8018c3e:	1ad3      	subs	r3, r2, r3
 8018c40:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8018c42:	8b3a      	ldrh	r2, [r7, #24]
 8018c44:	88fb      	ldrh	r3, [r7, #6]
 8018c46:	429a      	cmp	r2, r3
 8018c48:	d901      	bls.n	8018c4e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8018c4a:	88fb      	ldrh	r3, [r7, #6]
 8018c4c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8018c4e:	8b7b      	ldrh	r3, [r7, #26]
 8018c50:	68ba      	ldr	r2, [r7, #8]
 8018c52:	18d0      	adds	r0, r2, r3
 8018c54:	69fb      	ldr	r3, [r7, #28]
 8018c56:	685a      	ldr	r2, [r3, #4]
 8018c58:	88bb      	ldrh	r3, [r7, #4]
 8018c5a:	4413      	add	r3, r2
 8018c5c:	8b3a      	ldrh	r2, [r7, #24]
 8018c5e:	4619      	mov	r1, r3
 8018c60:	f00d fddf 	bl	8026822 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8018c64:	8afa      	ldrh	r2, [r7, #22]
 8018c66:	8b3b      	ldrh	r3, [r7, #24]
 8018c68:	4413      	add	r3, r2
 8018c6a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8018c6c:	8b7a      	ldrh	r2, [r7, #26]
 8018c6e:	8b3b      	ldrh	r3, [r7, #24]
 8018c70:	4413      	add	r3, r2
 8018c72:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8018c74:	88fa      	ldrh	r2, [r7, #6]
 8018c76:	8b3b      	ldrh	r3, [r7, #24]
 8018c78:	1ad3      	subs	r3, r2, r3
 8018c7a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8018c7c:	2300      	movs	r3, #0
 8018c7e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8018c80:	69fb      	ldr	r3, [r7, #28]
 8018c82:	681b      	ldr	r3, [r3, #0]
 8018c84:	61fb      	str	r3, [r7, #28]
 8018c86:	88fb      	ldrh	r3, [r7, #6]
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d002      	beq.n	8018c92 <pbuf_copy_partial+0xca>
 8018c8c:	69fb      	ldr	r3, [r7, #28]
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d1c4      	bne.n	8018c1c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8018c92:	8afb      	ldrh	r3, [r7, #22]
}
 8018c94:	4618      	mov	r0, r3
 8018c96:	3720      	adds	r7, #32
 8018c98:	46bd      	mov	sp, r7
 8018c9a:	bd80      	pop	{r7, pc}
 8018c9c:	08029214 	.word	0x08029214
 8018ca0:	0802955c 	.word	0x0802955c
 8018ca4:	08029274 	.word	0x08029274
 8018ca8:	0802957c 	.word	0x0802957c

08018cac <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8018cac:	b580      	push	{r7, lr}
 8018cae:	b084      	sub	sp, #16
 8018cb0:	af00      	add	r7, sp, #0
 8018cb2:	4603      	mov	r3, r0
 8018cb4:	603a      	str	r2, [r7, #0]
 8018cb6:	71fb      	strb	r3, [r7, #7]
 8018cb8:	460b      	mov	r3, r1
 8018cba:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8018cbc:	683b      	ldr	r3, [r7, #0]
 8018cbe:	8919      	ldrh	r1, [r3, #8]
 8018cc0:	88ba      	ldrh	r2, [r7, #4]
 8018cc2:	79fb      	ldrb	r3, [r7, #7]
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	f7ff fa67 	bl	8018198 <pbuf_alloc>
 8018cca:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8018ccc:	68fb      	ldr	r3, [r7, #12]
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d101      	bne.n	8018cd6 <pbuf_clone+0x2a>
    return NULL;
 8018cd2:	2300      	movs	r3, #0
 8018cd4:	e011      	b.n	8018cfa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8018cd6:	6839      	ldr	r1, [r7, #0]
 8018cd8:	68f8      	ldr	r0, [r7, #12]
 8018cda:	f7ff fea3 	bl	8018a24 <pbuf_copy>
 8018cde:	4603      	mov	r3, r0
 8018ce0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8018ce2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d006      	beq.n	8018cf8 <pbuf_clone+0x4c>
 8018cea:	4b06      	ldr	r3, [pc, #24]	; (8018d04 <pbuf_clone+0x58>)
 8018cec:	f240 5224 	movw	r2, #1316	; 0x524
 8018cf0:	4905      	ldr	r1, [pc, #20]	; (8018d08 <pbuf_clone+0x5c>)
 8018cf2:	4806      	ldr	r0, [pc, #24]	; (8018d0c <pbuf_clone+0x60>)
 8018cf4:	f00d fe50 	bl	8026998 <iprintf>
  return q;
 8018cf8:	68fb      	ldr	r3, [r7, #12]
}
 8018cfa:	4618      	mov	r0, r3
 8018cfc:	3710      	adds	r7, #16
 8018cfe:	46bd      	mov	sp, r7
 8018d00:	bd80      	pop	{r7, pc}
 8018d02:	bf00      	nop
 8018d04:	08029214 	.word	0x08029214
 8018d08:	08029688 	.word	0x08029688
 8018d0c:	08029274 	.word	0x08029274

08018d10 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8018d10:	b580      	push	{r7, lr}
 8018d12:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8018d14:	f00d fe58 	bl	80269c8 <rand>
 8018d18:	4603      	mov	r3, r0
 8018d1a:	b29b      	uxth	r3, r3
 8018d1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018d20:	b29b      	uxth	r3, r3
 8018d22:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8018d26:	b29a      	uxth	r2, r3
 8018d28:	4b01      	ldr	r3, [pc, #4]	; (8018d30 <tcp_init+0x20>)
 8018d2a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8018d2c:	bf00      	nop
 8018d2e:	bd80      	pop	{r7, pc}
 8018d30:	20000010 	.word	0x20000010

08018d34 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8018d34:	b580      	push	{r7, lr}
 8018d36:	b082      	sub	sp, #8
 8018d38:	af00      	add	r7, sp, #0
 8018d3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	7d1b      	ldrb	r3, [r3, #20]
 8018d40:	2b01      	cmp	r3, #1
 8018d42:	d105      	bne.n	8018d50 <tcp_free+0x1c>
 8018d44:	4b06      	ldr	r3, [pc, #24]	; (8018d60 <tcp_free+0x2c>)
 8018d46:	22d4      	movs	r2, #212	; 0xd4
 8018d48:	4906      	ldr	r1, [pc, #24]	; (8018d64 <tcp_free+0x30>)
 8018d4a:	4807      	ldr	r0, [pc, #28]	; (8018d68 <tcp_free+0x34>)
 8018d4c:	f00d fe24 	bl	8026998 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8018d50:	6879      	ldr	r1, [r7, #4]
 8018d52:	2001      	movs	r0, #1
 8018d54:	f7fe fe84 	bl	8017a60 <memp_free>
}
 8018d58:	bf00      	nop
 8018d5a:	3708      	adds	r7, #8
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	bd80      	pop	{r7, pc}
 8018d60:	08029714 	.word	0x08029714
 8018d64:	08029744 	.word	0x08029744
 8018d68:	08029758 	.word	0x08029758

08018d6c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8018d6c:	b580      	push	{r7, lr}
 8018d6e:	b082      	sub	sp, #8
 8018d70:	af00      	add	r7, sp, #0
 8018d72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	7d1b      	ldrb	r3, [r3, #20]
 8018d78:	2b01      	cmp	r3, #1
 8018d7a:	d105      	bne.n	8018d88 <tcp_free_listen+0x1c>
 8018d7c:	4b06      	ldr	r3, [pc, #24]	; (8018d98 <tcp_free_listen+0x2c>)
 8018d7e:	22df      	movs	r2, #223	; 0xdf
 8018d80:	4906      	ldr	r1, [pc, #24]	; (8018d9c <tcp_free_listen+0x30>)
 8018d82:	4807      	ldr	r0, [pc, #28]	; (8018da0 <tcp_free_listen+0x34>)
 8018d84:	f00d fe08 	bl	8026998 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8018d88:	6879      	ldr	r1, [r7, #4]
 8018d8a:	2002      	movs	r0, #2
 8018d8c:	f7fe fe68 	bl	8017a60 <memp_free>
}
 8018d90:	bf00      	nop
 8018d92:	3708      	adds	r7, #8
 8018d94:	46bd      	mov	sp, r7
 8018d96:	bd80      	pop	{r7, pc}
 8018d98:	08029714 	.word	0x08029714
 8018d9c:	08029780 	.word	0x08029780
 8018da0:	08029758 	.word	0x08029758

08018da4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8018da4:	b580      	push	{r7, lr}
 8018da6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8018da8:	f001 f9b2 	bl	801a110 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8018dac:	4b07      	ldr	r3, [pc, #28]	; (8018dcc <tcp_tmr+0x28>)
 8018dae:	781b      	ldrb	r3, [r3, #0]
 8018db0:	3301      	adds	r3, #1
 8018db2:	b2da      	uxtb	r2, r3
 8018db4:	4b05      	ldr	r3, [pc, #20]	; (8018dcc <tcp_tmr+0x28>)
 8018db6:	701a      	strb	r2, [r3, #0]
 8018db8:	4b04      	ldr	r3, [pc, #16]	; (8018dcc <tcp_tmr+0x28>)
 8018dba:	781b      	ldrb	r3, [r3, #0]
 8018dbc:	f003 0301 	and.w	r3, r3, #1
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d001      	beq.n	8018dc8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8018dc4:	f000 fe66 	bl	8019a94 <tcp_slowtmr>
  }
}
 8018dc8:	bf00      	nop
 8018dca:	bd80      	pop	{r7, pc}
 8018dcc:	200131c1 	.word	0x200131c1

08018dd0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8018dd0:	b580      	push	{r7, lr}
 8018dd2:	b084      	sub	sp, #16
 8018dd4:	af00      	add	r7, sp, #0
 8018dd6:	6078      	str	r0, [r7, #4]
 8018dd8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8018dda:	683b      	ldr	r3, [r7, #0]
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d105      	bne.n	8018dec <tcp_remove_listener+0x1c>
 8018de0:	4b0d      	ldr	r3, [pc, #52]	; (8018e18 <tcp_remove_listener+0x48>)
 8018de2:	22ff      	movs	r2, #255	; 0xff
 8018de4:	490d      	ldr	r1, [pc, #52]	; (8018e1c <tcp_remove_listener+0x4c>)
 8018de6:	480e      	ldr	r0, [pc, #56]	; (8018e20 <tcp_remove_listener+0x50>)
 8018de8:	f00d fdd6 	bl	8026998 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	60fb      	str	r3, [r7, #12]
 8018df0:	e00a      	b.n	8018e08 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8018df2:	68fb      	ldr	r3, [r7, #12]
 8018df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018df6:	683a      	ldr	r2, [r7, #0]
 8018df8:	429a      	cmp	r2, r3
 8018dfa:	d102      	bne.n	8018e02 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8018dfc:	68fb      	ldr	r3, [r7, #12]
 8018dfe:	2200      	movs	r2, #0
 8018e00:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8018e02:	68fb      	ldr	r3, [r7, #12]
 8018e04:	68db      	ldr	r3, [r3, #12]
 8018e06:	60fb      	str	r3, [r7, #12]
 8018e08:	68fb      	ldr	r3, [r7, #12]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d1f1      	bne.n	8018df2 <tcp_remove_listener+0x22>
    }
  }
}
 8018e0e:	bf00      	nop
 8018e10:	3710      	adds	r7, #16
 8018e12:	46bd      	mov	sp, r7
 8018e14:	bd80      	pop	{r7, pc}
 8018e16:	bf00      	nop
 8018e18:	08029714 	.word	0x08029714
 8018e1c:	0802979c 	.word	0x0802979c
 8018e20:	08029758 	.word	0x08029758

08018e24 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8018e24:	b580      	push	{r7, lr}
 8018e26:	b084      	sub	sp, #16
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d106      	bne.n	8018e40 <tcp_listen_closed+0x1c>
 8018e32:	4b14      	ldr	r3, [pc, #80]	; (8018e84 <tcp_listen_closed+0x60>)
 8018e34:	f240 1211 	movw	r2, #273	; 0x111
 8018e38:	4913      	ldr	r1, [pc, #76]	; (8018e88 <tcp_listen_closed+0x64>)
 8018e3a:	4814      	ldr	r0, [pc, #80]	; (8018e8c <tcp_listen_closed+0x68>)
 8018e3c:	f00d fdac 	bl	8026998 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	7d1b      	ldrb	r3, [r3, #20]
 8018e44:	2b01      	cmp	r3, #1
 8018e46:	d006      	beq.n	8018e56 <tcp_listen_closed+0x32>
 8018e48:	4b0e      	ldr	r3, [pc, #56]	; (8018e84 <tcp_listen_closed+0x60>)
 8018e4a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8018e4e:	4910      	ldr	r1, [pc, #64]	; (8018e90 <tcp_listen_closed+0x6c>)
 8018e50:	480e      	ldr	r0, [pc, #56]	; (8018e8c <tcp_listen_closed+0x68>)
 8018e52:	f00d fda1 	bl	8026998 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8018e56:	2301      	movs	r3, #1
 8018e58:	60fb      	str	r3, [r7, #12]
 8018e5a:	e00b      	b.n	8018e74 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8018e5c:	4a0d      	ldr	r2, [pc, #52]	; (8018e94 <tcp_listen_closed+0x70>)
 8018e5e:	68fb      	ldr	r3, [r7, #12]
 8018e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	6879      	ldr	r1, [r7, #4]
 8018e68:	4618      	mov	r0, r3
 8018e6a:	f7ff ffb1 	bl	8018dd0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8018e6e:	68fb      	ldr	r3, [r7, #12]
 8018e70:	3301      	adds	r3, #1
 8018e72:	60fb      	str	r3, [r7, #12]
 8018e74:	68fb      	ldr	r3, [r7, #12]
 8018e76:	2b03      	cmp	r3, #3
 8018e78:	d9f0      	bls.n	8018e5c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8018e7a:	bf00      	nop
 8018e7c:	3710      	adds	r7, #16
 8018e7e:	46bd      	mov	sp, r7
 8018e80:	bd80      	pop	{r7, pc}
 8018e82:	bf00      	nop
 8018e84:	08029714 	.word	0x08029714
 8018e88:	080297c4 	.word	0x080297c4
 8018e8c:	08029758 	.word	0x08029758
 8018e90:	080297d0 	.word	0x080297d0
 8018e94:	0802bda0 	.word	0x0802bda0

08018e98 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8018e98:	b5b0      	push	{r4, r5, r7, lr}
 8018e9a:	b088      	sub	sp, #32
 8018e9c:	af04      	add	r7, sp, #16
 8018e9e:	6078      	str	r0, [r7, #4]
 8018ea0:	460b      	mov	r3, r1
 8018ea2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d106      	bne.n	8018eb8 <tcp_close_shutdown+0x20>
 8018eaa:	4b61      	ldr	r3, [pc, #388]	; (8019030 <tcp_close_shutdown+0x198>)
 8018eac:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8018eb0:	4960      	ldr	r1, [pc, #384]	; (8019034 <tcp_close_shutdown+0x19c>)
 8018eb2:	4861      	ldr	r0, [pc, #388]	; (8019038 <tcp_close_shutdown+0x1a0>)
 8018eb4:	f00d fd70 	bl	8026998 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8018eb8:	78fb      	ldrb	r3, [r7, #3]
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d066      	beq.n	8018f8c <tcp_close_shutdown+0xf4>
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	7d1b      	ldrb	r3, [r3, #20]
 8018ec2:	2b04      	cmp	r3, #4
 8018ec4:	d003      	beq.n	8018ece <tcp_close_shutdown+0x36>
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	7d1b      	ldrb	r3, [r3, #20]
 8018eca:	2b07      	cmp	r3, #7
 8018ecc:	d15e      	bne.n	8018f8c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	d104      	bne.n	8018ee0 <tcp_close_shutdown+0x48>
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018eda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018ede:	d055      	beq.n	8018f8c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	8b5b      	ldrh	r3, [r3, #26]
 8018ee4:	f003 0310 	and.w	r3, r3, #16
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d106      	bne.n	8018efa <tcp_close_shutdown+0x62>
 8018eec:	4b50      	ldr	r3, [pc, #320]	; (8019030 <tcp_close_shutdown+0x198>)
 8018eee:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8018ef2:	4952      	ldr	r1, [pc, #328]	; (801903c <tcp_close_shutdown+0x1a4>)
 8018ef4:	4850      	ldr	r0, [pc, #320]	; (8019038 <tcp_close_shutdown+0x1a0>)
 8018ef6:	f00d fd4f 	bl	8026998 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018f02:	687d      	ldr	r5, [r7, #4]
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	3304      	adds	r3, #4
 8018f08:	687a      	ldr	r2, [r7, #4]
 8018f0a:	8ad2      	ldrh	r2, [r2, #22]
 8018f0c:	6879      	ldr	r1, [r7, #4]
 8018f0e:	8b09      	ldrh	r1, [r1, #24]
 8018f10:	9102      	str	r1, [sp, #8]
 8018f12:	9201      	str	r2, [sp, #4]
 8018f14:	9300      	str	r3, [sp, #0]
 8018f16:	462b      	mov	r3, r5
 8018f18:	4622      	mov	r2, r4
 8018f1a:	4601      	mov	r1, r0
 8018f1c:	6878      	ldr	r0, [r7, #4]
 8018f1e:	f005 fed1 	bl	801ecc4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8018f22:	6878      	ldr	r0, [r7, #4]
 8018f24:	f001 fca2 	bl	801a86c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8018f28:	4b45      	ldr	r3, [pc, #276]	; (8019040 <tcp_close_shutdown+0x1a8>)
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	687a      	ldr	r2, [r7, #4]
 8018f2e:	429a      	cmp	r2, r3
 8018f30:	d105      	bne.n	8018f3e <tcp_close_shutdown+0xa6>
 8018f32:	4b43      	ldr	r3, [pc, #268]	; (8019040 <tcp_close_shutdown+0x1a8>)
 8018f34:	681b      	ldr	r3, [r3, #0]
 8018f36:	68db      	ldr	r3, [r3, #12]
 8018f38:	4a41      	ldr	r2, [pc, #260]	; (8019040 <tcp_close_shutdown+0x1a8>)
 8018f3a:	6013      	str	r3, [r2, #0]
 8018f3c:	e013      	b.n	8018f66 <tcp_close_shutdown+0xce>
 8018f3e:	4b40      	ldr	r3, [pc, #256]	; (8019040 <tcp_close_shutdown+0x1a8>)
 8018f40:	681b      	ldr	r3, [r3, #0]
 8018f42:	60fb      	str	r3, [r7, #12]
 8018f44:	e00c      	b.n	8018f60 <tcp_close_shutdown+0xc8>
 8018f46:	68fb      	ldr	r3, [r7, #12]
 8018f48:	68db      	ldr	r3, [r3, #12]
 8018f4a:	687a      	ldr	r2, [r7, #4]
 8018f4c:	429a      	cmp	r2, r3
 8018f4e:	d104      	bne.n	8018f5a <tcp_close_shutdown+0xc2>
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	68da      	ldr	r2, [r3, #12]
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	60da      	str	r2, [r3, #12]
 8018f58:	e005      	b.n	8018f66 <tcp_close_shutdown+0xce>
 8018f5a:	68fb      	ldr	r3, [r7, #12]
 8018f5c:	68db      	ldr	r3, [r3, #12]
 8018f5e:	60fb      	str	r3, [r7, #12]
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d1ef      	bne.n	8018f46 <tcp_close_shutdown+0xae>
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	2200      	movs	r2, #0
 8018f6a:	60da      	str	r2, [r3, #12]
 8018f6c:	4b35      	ldr	r3, [pc, #212]	; (8019044 <tcp_close_shutdown+0x1ac>)
 8018f6e:	2201      	movs	r2, #1
 8018f70:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8018f72:	4b35      	ldr	r3, [pc, #212]	; (8019048 <tcp_close_shutdown+0x1b0>)
 8018f74:	681b      	ldr	r3, [r3, #0]
 8018f76:	687a      	ldr	r2, [r7, #4]
 8018f78:	429a      	cmp	r2, r3
 8018f7a:	d102      	bne.n	8018f82 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8018f7c:	f004 f934 	bl	801d1e8 <tcp_trigger_input_pcb_close>
 8018f80:	e002      	b.n	8018f88 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8018f82:	6878      	ldr	r0, [r7, #4]
 8018f84:	f7ff fed6 	bl	8018d34 <tcp_free>
      }
      return ERR_OK;
 8018f88:	2300      	movs	r3, #0
 8018f8a:	e04d      	b.n	8019028 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	7d1b      	ldrb	r3, [r3, #20]
 8018f90:	2b01      	cmp	r3, #1
 8018f92:	d02d      	beq.n	8018ff0 <tcp_close_shutdown+0x158>
 8018f94:	2b02      	cmp	r3, #2
 8018f96:	d036      	beq.n	8019006 <tcp_close_shutdown+0x16e>
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d13f      	bne.n	801901c <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	8adb      	ldrh	r3, [r3, #22]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d021      	beq.n	8018fe8 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8018fa4:	4b29      	ldr	r3, [pc, #164]	; (801904c <tcp_close_shutdown+0x1b4>)
 8018fa6:	681b      	ldr	r3, [r3, #0]
 8018fa8:	687a      	ldr	r2, [r7, #4]
 8018faa:	429a      	cmp	r2, r3
 8018fac:	d105      	bne.n	8018fba <tcp_close_shutdown+0x122>
 8018fae:	4b27      	ldr	r3, [pc, #156]	; (801904c <tcp_close_shutdown+0x1b4>)
 8018fb0:	681b      	ldr	r3, [r3, #0]
 8018fb2:	68db      	ldr	r3, [r3, #12]
 8018fb4:	4a25      	ldr	r2, [pc, #148]	; (801904c <tcp_close_shutdown+0x1b4>)
 8018fb6:	6013      	str	r3, [r2, #0]
 8018fb8:	e013      	b.n	8018fe2 <tcp_close_shutdown+0x14a>
 8018fba:	4b24      	ldr	r3, [pc, #144]	; (801904c <tcp_close_shutdown+0x1b4>)
 8018fbc:	681b      	ldr	r3, [r3, #0]
 8018fbe:	60bb      	str	r3, [r7, #8]
 8018fc0:	e00c      	b.n	8018fdc <tcp_close_shutdown+0x144>
 8018fc2:	68bb      	ldr	r3, [r7, #8]
 8018fc4:	68db      	ldr	r3, [r3, #12]
 8018fc6:	687a      	ldr	r2, [r7, #4]
 8018fc8:	429a      	cmp	r2, r3
 8018fca:	d104      	bne.n	8018fd6 <tcp_close_shutdown+0x13e>
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	68da      	ldr	r2, [r3, #12]
 8018fd0:	68bb      	ldr	r3, [r7, #8]
 8018fd2:	60da      	str	r2, [r3, #12]
 8018fd4:	e005      	b.n	8018fe2 <tcp_close_shutdown+0x14a>
 8018fd6:	68bb      	ldr	r3, [r7, #8]
 8018fd8:	68db      	ldr	r3, [r3, #12]
 8018fda:	60bb      	str	r3, [r7, #8]
 8018fdc:	68bb      	ldr	r3, [r7, #8]
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d1ef      	bne.n	8018fc2 <tcp_close_shutdown+0x12a>
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	2200      	movs	r2, #0
 8018fe6:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8018fe8:	6878      	ldr	r0, [r7, #4]
 8018fea:	f7ff fea3 	bl	8018d34 <tcp_free>
      break;
 8018fee:	e01a      	b.n	8019026 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8018ff0:	6878      	ldr	r0, [r7, #4]
 8018ff2:	f7ff ff17 	bl	8018e24 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8018ff6:	6879      	ldr	r1, [r7, #4]
 8018ff8:	4815      	ldr	r0, [pc, #84]	; (8019050 <tcp_close_shutdown+0x1b8>)
 8018ffa:	f001 fc87 	bl	801a90c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8018ffe:	6878      	ldr	r0, [r7, #4]
 8019000:	f7ff feb4 	bl	8018d6c <tcp_free_listen>
      break;
 8019004:	e00f      	b.n	8019026 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8019006:	6879      	ldr	r1, [r7, #4]
 8019008:	480d      	ldr	r0, [pc, #52]	; (8019040 <tcp_close_shutdown+0x1a8>)
 801900a:	f001 fc7f 	bl	801a90c <tcp_pcb_remove>
 801900e:	4b0d      	ldr	r3, [pc, #52]	; (8019044 <tcp_close_shutdown+0x1ac>)
 8019010:	2201      	movs	r2, #1
 8019012:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8019014:	6878      	ldr	r0, [r7, #4]
 8019016:	f7ff fe8d 	bl	8018d34 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801901a:	e004      	b.n	8019026 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 801901c:	6878      	ldr	r0, [r7, #4]
 801901e:	f000 f819 	bl	8019054 <tcp_close_shutdown_fin>
 8019022:	4603      	mov	r3, r0
 8019024:	e000      	b.n	8019028 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8019026:	2300      	movs	r3, #0
}
 8019028:	4618      	mov	r0, r3
 801902a:	3710      	adds	r7, #16
 801902c:	46bd      	mov	sp, r7
 801902e:	bdb0      	pop	{r4, r5, r7, pc}
 8019030:	08029714 	.word	0x08029714
 8019034:	080297e8 	.word	0x080297e8
 8019038:	08029758 	.word	0x08029758
 801903c:	08029808 	.word	0x08029808
 8019040:	20019ff4 	.word	0x20019ff4
 8019044:	20019ff0 	.word	0x20019ff0
 8019048:	2001a008 	.word	0x2001a008
 801904c:	2001a000 	.word	0x2001a000
 8019050:	20019ffc 	.word	0x20019ffc

08019054 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8019054:	b580      	push	{r7, lr}
 8019056:	b084      	sub	sp, #16
 8019058:	af00      	add	r7, sp, #0
 801905a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	2b00      	cmp	r3, #0
 8019060:	d106      	bne.n	8019070 <tcp_close_shutdown_fin+0x1c>
 8019062:	4b2c      	ldr	r3, [pc, #176]	; (8019114 <tcp_close_shutdown_fin+0xc0>)
 8019064:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8019068:	492b      	ldr	r1, [pc, #172]	; (8019118 <tcp_close_shutdown_fin+0xc4>)
 801906a:	482c      	ldr	r0, [pc, #176]	; (801911c <tcp_close_shutdown_fin+0xc8>)
 801906c:	f00d fc94 	bl	8026998 <iprintf>

  switch (pcb->state) {
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	7d1b      	ldrb	r3, [r3, #20]
 8019074:	2b04      	cmp	r3, #4
 8019076:	d010      	beq.n	801909a <tcp_close_shutdown_fin+0x46>
 8019078:	2b07      	cmp	r3, #7
 801907a:	d01b      	beq.n	80190b4 <tcp_close_shutdown_fin+0x60>
 801907c:	2b03      	cmp	r3, #3
 801907e:	d126      	bne.n	80190ce <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8019080:	6878      	ldr	r0, [r7, #4]
 8019082:	f004 ff1d 	bl	801dec0 <tcp_send_fin>
 8019086:	4603      	mov	r3, r0
 8019088:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801908a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801908e:	2b00      	cmp	r3, #0
 8019090:	d11f      	bne.n	80190d2 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	2205      	movs	r2, #5
 8019096:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019098:	e01b      	b.n	80190d2 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801909a:	6878      	ldr	r0, [r7, #4]
 801909c:	f004 ff10 	bl	801dec0 <tcp_send_fin>
 80190a0:	4603      	mov	r3, r0
 80190a2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80190a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80190a8:	2b00      	cmp	r3, #0
 80190aa:	d114      	bne.n	80190d6 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	2205      	movs	r2, #5
 80190b0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80190b2:	e010      	b.n	80190d6 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80190b4:	6878      	ldr	r0, [r7, #4]
 80190b6:	f004 ff03 	bl	801dec0 <tcp_send_fin>
 80190ba:	4603      	mov	r3, r0
 80190bc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80190be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d109      	bne.n	80190da <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	2209      	movs	r2, #9
 80190ca:	751a      	strb	r2, [r3, #20]
      }
      break;
 80190cc:	e005      	b.n	80190da <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80190ce:	2300      	movs	r3, #0
 80190d0:	e01c      	b.n	801910c <tcp_close_shutdown_fin+0xb8>
      break;
 80190d2:	bf00      	nop
 80190d4:	e002      	b.n	80190dc <tcp_close_shutdown_fin+0x88>
      break;
 80190d6:	bf00      	nop
 80190d8:	e000      	b.n	80190dc <tcp_close_shutdown_fin+0x88>
      break;
 80190da:	bf00      	nop
  }

  if (err == ERR_OK) {
 80190dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d103      	bne.n	80190ec <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80190e4:	6878      	ldr	r0, [r7, #4]
 80190e6:	f005 f829 	bl	801e13c <tcp_output>
 80190ea:	e00d      	b.n	8019108 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 80190ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80190f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80190f4:	d108      	bne.n	8019108 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	8b5b      	ldrh	r3, [r3, #26]
 80190fa:	f043 0308 	orr.w	r3, r3, #8
 80190fe:	b29a      	uxth	r2, r3
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8019104:	2300      	movs	r3, #0
 8019106:	e001      	b.n	801910c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8019108:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801910c:	4618      	mov	r0, r3
 801910e:	3710      	adds	r7, #16
 8019110:	46bd      	mov	sp, r7
 8019112:	bd80      	pop	{r7, pc}
 8019114:	08029714 	.word	0x08029714
 8019118:	080297c4 	.word	0x080297c4
 801911c:	08029758 	.word	0x08029758

08019120 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8019120:	b580      	push	{r7, lr}
 8019122:	b082      	sub	sp, #8
 8019124:	af00      	add	r7, sp, #0
 8019126:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	2b00      	cmp	r3, #0
 801912c:	d109      	bne.n	8019142 <tcp_close+0x22>
 801912e:	4b0f      	ldr	r3, [pc, #60]	; (801916c <tcp_close+0x4c>)
 8019130:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8019134:	490e      	ldr	r1, [pc, #56]	; (8019170 <tcp_close+0x50>)
 8019136:	480f      	ldr	r0, [pc, #60]	; (8019174 <tcp_close+0x54>)
 8019138:	f00d fc2e 	bl	8026998 <iprintf>
 801913c:	f06f 030f 	mvn.w	r3, #15
 8019140:	e00f      	b.n	8019162 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	7d1b      	ldrb	r3, [r3, #20]
 8019146:	2b01      	cmp	r3, #1
 8019148:	d006      	beq.n	8019158 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801914a:	687b      	ldr	r3, [r7, #4]
 801914c:	8b5b      	ldrh	r3, [r3, #26]
 801914e:	f043 0310 	orr.w	r3, r3, #16
 8019152:	b29a      	uxth	r2, r3
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8019158:	2101      	movs	r1, #1
 801915a:	6878      	ldr	r0, [r7, #4]
 801915c:	f7ff fe9c 	bl	8018e98 <tcp_close_shutdown>
 8019160:	4603      	mov	r3, r0
}
 8019162:	4618      	mov	r0, r3
 8019164:	3708      	adds	r7, #8
 8019166:	46bd      	mov	sp, r7
 8019168:	bd80      	pop	{r7, pc}
 801916a:	bf00      	nop
 801916c:	08029714 	.word	0x08029714
 8019170:	08029824 	.word	0x08029824
 8019174:	08029758 	.word	0x08029758

08019178 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8019178:	b580      	push	{r7, lr}
 801917a:	b084      	sub	sp, #16
 801917c:	af00      	add	r7, sp, #0
 801917e:	60f8      	str	r0, [r7, #12]
 8019180:	60b9      	str	r1, [r7, #8]
 8019182:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8019184:	68fb      	ldr	r3, [r7, #12]
 8019186:	2b00      	cmp	r3, #0
 8019188:	d109      	bne.n	801919e <tcp_shutdown+0x26>
 801918a:	4b25      	ldr	r3, [pc, #148]	; (8019220 <tcp_shutdown+0xa8>)
 801918c:	f240 2207 	movw	r2, #519	; 0x207
 8019190:	4924      	ldr	r1, [pc, #144]	; (8019224 <tcp_shutdown+0xac>)
 8019192:	4825      	ldr	r0, [pc, #148]	; (8019228 <tcp_shutdown+0xb0>)
 8019194:	f00d fc00 	bl	8026998 <iprintf>
 8019198:	f06f 030f 	mvn.w	r3, #15
 801919c:	e03c      	b.n	8019218 <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	7d1b      	ldrb	r3, [r3, #20]
 80191a2:	2b01      	cmp	r3, #1
 80191a4:	d102      	bne.n	80191ac <tcp_shutdown+0x34>
    return ERR_CONN;
 80191a6:	f06f 030a 	mvn.w	r3, #10
 80191aa:	e035      	b.n	8019218 <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 80191ac:	68bb      	ldr	r3, [r7, #8]
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d01b      	beq.n	80191ea <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80191b2:	68fb      	ldr	r3, [r7, #12]
 80191b4:	8b5b      	ldrh	r3, [r3, #26]
 80191b6:	f043 0310 	orr.w	r3, r3, #16
 80191ba:	b29a      	uxth	r2, r3
 80191bc:	68fb      	ldr	r3, [r7, #12]
 80191be:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d005      	beq.n	80191d2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80191c6:	2101      	movs	r1, #1
 80191c8:	68f8      	ldr	r0, [r7, #12]
 80191ca:	f7ff fe65 	bl	8018e98 <tcp_close_shutdown>
 80191ce:	4603      	mov	r3, r0
 80191d0:	e022      	b.n	8019218 <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80191d2:	68fb      	ldr	r3, [r7, #12]
 80191d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d007      	beq.n	80191ea <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80191da:	68fb      	ldr	r3, [r7, #12]
 80191dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80191de:	4618      	mov	r0, r3
 80191e0:	f7ff faec 	bl	80187bc <pbuf_free>
      pcb->refused_data = NULL;
 80191e4:	68fb      	ldr	r3, [r7, #12]
 80191e6:	2200      	movs	r2, #0
 80191e8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d012      	beq.n	8019216 <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80191f0:	68fb      	ldr	r3, [r7, #12]
 80191f2:	7d1b      	ldrb	r3, [r3, #20]
 80191f4:	2b03      	cmp	r3, #3
 80191f6:	db0b      	blt.n	8019210 <tcp_shutdown+0x98>
 80191f8:	2b04      	cmp	r3, #4
 80191fa:	dd01      	ble.n	8019200 <tcp_shutdown+0x88>
 80191fc:	2b07      	cmp	r3, #7
 80191fe:	d107      	bne.n	8019210 <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8019200:	68bb      	ldr	r3, [r7, #8]
 8019202:	b2db      	uxtb	r3, r3
 8019204:	4619      	mov	r1, r3
 8019206:	68f8      	ldr	r0, [r7, #12]
 8019208:	f7ff fe46 	bl	8018e98 <tcp_close_shutdown>
 801920c:	4603      	mov	r3, r0
 801920e:	e003      	b.n	8019218 <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8019210:	f06f 030a 	mvn.w	r3, #10
 8019214:	e000      	b.n	8019218 <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 8019216:	2300      	movs	r3, #0
}
 8019218:	4618      	mov	r0, r3
 801921a:	3710      	adds	r7, #16
 801921c:	46bd      	mov	sp, r7
 801921e:	bd80      	pop	{r7, pc}
 8019220:	08029714 	.word	0x08029714
 8019224:	0802983c 	.word	0x0802983c
 8019228:	08029758 	.word	0x08029758

0801922c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801922c:	b580      	push	{r7, lr}
 801922e:	b08e      	sub	sp, #56	; 0x38
 8019230:	af04      	add	r7, sp, #16
 8019232:	6078      	str	r0, [r7, #4]
 8019234:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	2b00      	cmp	r3, #0
 801923a:	d107      	bne.n	801924c <tcp_abandon+0x20>
 801923c:	4b52      	ldr	r3, [pc, #328]	; (8019388 <tcp_abandon+0x15c>)
 801923e:	f240 223d 	movw	r2, #573	; 0x23d
 8019242:	4952      	ldr	r1, [pc, #328]	; (801938c <tcp_abandon+0x160>)
 8019244:	4852      	ldr	r0, [pc, #328]	; (8019390 <tcp_abandon+0x164>)
 8019246:	f00d fba7 	bl	8026998 <iprintf>
 801924a:	e099      	b.n	8019380 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	7d1b      	ldrb	r3, [r3, #20]
 8019250:	2b01      	cmp	r3, #1
 8019252:	d106      	bne.n	8019262 <tcp_abandon+0x36>
 8019254:	4b4c      	ldr	r3, [pc, #304]	; (8019388 <tcp_abandon+0x15c>)
 8019256:	f240 2241 	movw	r2, #577	; 0x241
 801925a:	494e      	ldr	r1, [pc, #312]	; (8019394 <tcp_abandon+0x168>)
 801925c:	484c      	ldr	r0, [pc, #304]	; (8019390 <tcp_abandon+0x164>)
 801925e:	f00d fb9b 	bl	8026998 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	7d1b      	ldrb	r3, [r3, #20]
 8019266:	2b0a      	cmp	r3, #10
 8019268:	d107      	bne.n	801927a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801926a:	6879      	ldr	r1, [r7, #4]
 801926c:	484a      	ldr	r0, [pc, #296]	; (8019398 <tcp_abandon+0x16c>)
 801926e:	f001 fb4d 	bl	801a90c <tcp_pcb_remove>
    tcp_free(pcb);
 8019272:	6878      	ldr	r0, [r7, #4]
 8019274:	f7ff fd5e 	bl	8018d34 <tcp_free>
 8019278:	e082      	b.n	8019380 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801927a:	2300      	movs	r3, #0
 801927c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801927e:	2300      	movs	r3, #0
 8019280:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019286:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801928c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019294:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	691b      	ldr	r3, [r3, #16]
 801929a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	7d1b      	ldrb	r3, [r3, #20]
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d126      	bne.n	80192f2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	8adb      	ldrh	r3, [r3, #22]
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d02e      	beq.n	801930a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80192ac:	4b3b      	ldr	r3, [pc, #236]	; (801939c <tcp_abandon+0x170>)
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	687a      	ldr	r2, [r7, #4]
 80192b2:	429a      	cmp	r2, r3
 80192b4:	d105      	bne.n	80192c2 <tcp_abandon+0x96>
 80192b6:	4b39      	ldr	r3, [pc, #228]	; (801939c <tcp_abandon+0x170>)
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	68db      	ldr	r3, [r3, #12]
 80192bc:	4a37      	ldr	r2, [pc, #220]	; (801939c <tcp_abandon+0x170>)
 80192be:	6013      	str	r3, [r2, #0]
 80192c0:	e013      	b.n	80192ea <tcp_abandon+0xbe>
 80192c2:	4b36      	ldr	r3, [pc, #216]	; (801939c <tcp_abandon+0x170>)
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	61fb      	str	r3, [r7, #28]
 80192c8:	e00c      	b.n	80192e4 <tcp_abandon+0xb8>
 80192ca:	69fb      	ldr	r3, [r7, #28]
 80192cc:	68db      	ldr	r3, [r3, #12]
 80192ce:	687a      	ldr	r2, [r7, #4]
 80192d0:	429a      	cmp	r2, r3
 80192d2:	d104      	bne.n	80192de <tcp_abandon+0xb2>
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	68da      	ldr	r2, [r3, #12]
 80192d8:	69fb      	ldr	r3, [r7, #28]
 80192da:	60da      	str	r2, [r3, #12]
 80192dc:	e005      	b.n	80192ea <tcp_abandon+0xbe>
 80192de:	69fb      	ldr	r3, [r7, #28]
 80192e0:	68db      	ldr	r3, [r3, #12]
 80192e2:	61fb      	str	r3, [r7, #28]
 80192e4:	69fb      	ldr	r3, [r7, #28]
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	d1ef      	bne.n	80192ca <tcp_abandon+0x9e>
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	2200      	movs	r2, #0
 80192ee:	60da      	str	r2, [r3, #12]
 80192f0:	e00b      	b.n	801930a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80192f2:	683b      	ldr	r3, [r7, #0]
 80192f4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	8adb      	ldrh	r3, [r3, #22]
 80192fa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80192fc:	6879      	ldr	r1, [r7, #4]
 80192fe:	4828      	ldr	r0, [pc, #160]	; (80193a0 <tcp_abandon+0x174>)
 8019300:	f001 fb04 	bl	801a90c <tcp_pcb_remove>
 8019304:	4b27      	ldr	r3, [pc, #156]	; (80193a4 <tcp_abandon+0x178>)
 8019306:	2201      	movs	r2, #1
 8019308:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801930e:	2b00      	cmp	r3, #0
 8019310:	d004      	beq.n	801931c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019316:	4618      	mov	r0, r3
 8019318:	f000 ffda 	bl	801a2d0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019320:	2b00      	cmp	r3, #0
 8019322:	d004      	beq.n	801932e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019328:	4618      	mov	r0, r3
 801932a:	f000 ffd1 	bl	801a2d0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019332:	2b00      	cmp	r3, #0
 8019334:	d004      	beq.n	8019340 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801933a:	4618      	mov	r0, r3
 801933c:	f000 ffc8 	bl	801a2d0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8019340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019342:	2b00      	cmp	r3, #0
 8019344:	d00e      	beq.n	8019364 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8019346:	6879      	ldr	r1, [r7, #4]
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	3304      	adds	r3, #4
 801934c:	687a      	ldr	r2, [r7, #4]
 801934e:	8b12      	ldrh	r2, [r2, #24]
 8019350:	9202      	str	r2, [sp, #8]
 8019352:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019354:	9201      	str	r2, [sp, #4]
 8019356:	9300      	str	r3, [sp, #0]
 8019358:	460b      	mov	r3, r1
 801935a:	697a      	ldr	r2, [r7, #20]
 801935c:	69b9      	ldr	r1, [r7, #24]
 801935e:	6878      	ldr	r0, [r7, #4]
 8019360:	f005 fcb0 	bl	801ecc4 <tcp_rst>
    }
    last_state = pcb->state;
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	7d1b      	ldrb	r3, [r3, #20]
 8019368:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801936a:	6878      	ldr	r0, [r7, #4]
 801936c:	f7ff fce2 	bl	8018d34 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8019370:	693b      	ldr	r3, [r7, #16]
 8019372:	2b00      	cmp	r3, #0
 8019374:	d004      	beq.n	8019380 <tcp_abandon+0x154>
 8019376:	693b      	ldr	r3, [r7, #16]
 8019378:	f06f 010c 	mvn.w	r1, #12
 801937c:	68f8      	ldr	r0, [r7, #12]
 801937e:	4798      	blx	r3
  }
}
 8019380:	3728      	adds	r7, #40	; 0x28
 8019382:	46bd      	mov	sp, r7
 8019384:	bd80      	pop	{r7, pc}
 8019386:	bf00      	nop
 8019388:	08029714 	.word	0x08029714
 801938c:	08029858 	.word	0x08029858
 8019390:	08029758 	.word	0x08029758
 8019394:	08029874 	.word	0x08029874
 8019398:	2001a004 	.word	0x2001a004
 801939c:	2001a000 	.word	0x2001a000
 80193a0:	20019ff4 	.word	0x20019ff4
 80193a4:	20019ff0 	.word	0x20019ff0

080193a8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80193a8:	b580      	push	{r7, lr}
 80193aa:	b082      	sub	sp, #8
 80193ac:	af00      	add	r7, sp, #0
 80193ae:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80193b0:	2101      	movs	r1, #1
 80193b2:	6878      	ldr	r0, [r7, #4]
 80193b4:	f7ff ff3a 	bl	801922c <tcp_abandon>
}
 80193b8:	bf00      	nop
 80193ba:	3708      	adds	r7, #8
 80193bc:	46bd      	mov	sp, r7
 80193be:	bd80      	pop	{r7, pc}

080193c0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80193c0:	b580      	push	{r7, lr}
 80193c2:	b088      	sub	sp, #32
 80193c4:	af00      	add	r7, sp, #0
 80193c6:	60f8      	str	r0, [r7, #12]
 80193c8:	60b9      	str	r1, [r7, #8]
 80193ca:	4613      	mov	r3, r2
 80193cc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80193ce:	2304      	movs	r3, #4
 80193d0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80193d2:	68bb      	ldr	r3, [r7, #8]
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d101      	bne.n	80193dc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80193d8:	4b3e      	ldr	r3, [pc, #248]	; (80194d4 <tcp_bind+0x114>)
 80193da:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d109      	bne.n	80193f6 <tcp_bind+0x36>
 80193e2:	4b3d      	ldr	r3, [pc, #244]	; (80194d8 <tcp_bind+0x118>)
 80193e4:	f240 22a9 	movw	r2, #681	; 0x2a9
 80193e8:	493c      	ldr	r1, [pc, #240]	; (80194dc <tcp_bind+0x11c>)
 80193ea:	483d      	ldr	r0, [pc, #244]	; (80194e0 <tcp_bind+0x120>)
 80193ec:	f00d fad4 	bl	8026998 <iprintf>
 80193f0:	f06f 030f 	mvn.w	r3, #15
 80193f4:	e06a      	b.n	80194cc <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	7d1b      	ldrb	r3, [r3, #20]
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d009      	beq.n	8019412 <tcp_bind+0x52>
 80193fe:	4b36      	ldr	r3, [pc, #216]	; (80194d8 <tcp_bind+0x118>)
 8019400:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019404:	4937      	ldr	r1, [pc, #220]	; (80194e4 <tcp_bind+0x124>)
 8019406:	4836      	ldr	r0, [pc, #216]	; (80194e0 <tcp_bind+0x120>)
 8019408:	f00d fac6 	bl	8026998 <iprintf>
 801940c:	f06f 0305 	mvn.w	r3, #5
 8019410:	e05c      	b.n	80194cc <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8019412:	88fb      	ldrh	r3, [r7, #6]
 8019414:	2b00      	cmp	r3, #0
 8019416:	d109      	bne.n	801942c <tcp_bind+0x6c>
    port = tcp_new_port();
 8019418:	f000 f9de 	bl	80197d8 <tcp_new_port>
 801941c:	4603      	mov	r3, r0
 801941e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019420:	88fb      	ldrh	r3, [r7, #6]
 8019422:	2b00      	cmp	r3, #0
 8019424:	d135      	bne.n	8019492 <tcp_bind+0xd2>
      return ERR_BUF;
 8019426:	f06f 0301 	mvn.w	r3, #1
 801942a:	e04f      	b.n	80194cc <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801942c:	2300      	movs	r3, #0
 801942e:	61fb      	str	r3, [r7, #28]
 8019430:	e02b      	b.n	801948a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8019432:	4a2d      	ldr	r2, [pc, #180]	; (80194e8 <tcp_bind+0x128>)
 8019434:	69fb      	ldr	r3, [r7, #28]
 8019436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801943a:	681b      	ldr	r3, [r3, #0]
 801943c:	61bb      	str	r3, [r7, #24]
 801943e:	e01e      	b.n	801947e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8019440:	69bb      	ldr	r3, [r7, #24]
 8019442:	8adb      	ldrh	r3, [r3, #22]
 8019444:	88fa      	ldrh	r2, [r7, #6]
 8019446:	429a      	cmp	r2, r3
 8019448:	d116      	bne.n	8019478 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801944a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801944c:	2b00      	cmp	r3, #0
 801944e:	d010      	beq.n	8019472 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8019450:	69bb      	ldr	r3, [r7, #24]
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	2b00      	cmp	r3, #0
 8019456:	d00c      	beq.n	8019472 <tcp_bind+0xb2>
 8019458:	68bb      	ldr	r3, [r7, #8]
 801945a:	2b00      	cmp	r3, #0
 801945c:	d009      	beq.n	8019472 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801945e:	68bb      	ldr	r3, [r7, #8]
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	2b00      	cmp	r3, #0
 8019464:	d005      	beq.n	8019472 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8019466:	69bb      	ldr	r3, [r7, #24]
 8019468:	681a      	ldr	r2, [r3, #0]
 801946a:	68bb      	ldr	r3, [r7, #8]
 801946c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801946e:	429a      	cmp	r2, r3
 8019470:	d102      	bne.n	8019478 <tcp_bind+0xb8>
              return ERR_USE;
 8019472:	f06f 0307 	mvn.w	r3, #7
 8019476:	e029      	b.n	80194cc <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8019478:	69bb      	ldr	r3, [r7, #24]
 801947a:	68db      	ldr	r3, [r3, #12]
 801947c:	61bb      	str	r3, [r7, #24]
 801947e:	69bb      	ldr	r3, [r7, #24]
 8019480:	2b00      	cmp	r3, #0
 8019482:	d1dd      	bne.n	8019440 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8019484:	69fb      	ldr	r3, [r7, #28]
 8019486:	3301      	adds	r3, #1
 8019488:	61fb      	str	r3, [r7, #28]
 801948a:	69fa      	ldr	r2, [r7, #28]
 801948c:	697b      	ldr	r3, [r7, #20]
 801948e:	429a      	cmp	r2, r3
 8019490:	dbcf      	blt.n	8019432 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8019492:	68bb      	ldr	r3, [r7, #8]
 8019494:	2b00      	cmp	r3, #0
 8019496:	d00c      	beq.n	80194b2 <tcp_bind+0xf2>
 8019498:	68bb      	ldr	r3, [r7, #8]
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	2b00      	cmp	r3, #0
 801949e:	d008      	beq.n	80194b2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80194a0:	68bb      	ldr	r3, [r7, #8]
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d002      	beq.n	80194ac <tcp_bind+0xec>
 80194a6:	68bb      	ldr	r3, [r7, #8]
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	e000      	b.n	80194ae <tcp_bind+0xee>
 80194ac:	2300      	movs	r3, #0
 80194ae:	68fa      	ldr	r2, [r7, #12]
 80194b0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80194b2:	68fb      	ldr	r3, [r7, #12]
 80194b4:	88fa      	ldrh	r2, [r7, #6]
 80194b6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80194b8:	4b0c      	ldr	r3, [pc, #48]	; (80194ec <tcp_bind+0x12c>)
 80194ba:	681a      	ldr	r2, [r3, #0]
 80194bc:	68fb      	ldr	r3, [r7, #12]
 80194be:	60da      	str	r2, [r3, #12]
 80194c0:	4a0a      	ldr	r2, [pc, #40]	; (80194ec <tcp_bind+0x12c>)
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	6013      	str	r3, [r2, #0]
 80194c6:	f005 fdbd 	bl	801f044 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80194ca:	2300      	movs	r3, #0
}
 80194cc:	4618      	mov	r0, r3
 80194ce:	3720      	adds	r7, #32
 80194d0:	46bd      	mov	sp, r7
 80194d2:	bd80      	pop	{r7, pc}
 80194d4:	0802bdd8 	.word	0x0802bdd8
 80194d8:	08029714 	.word	0x08029714
 80194dc:	080298a8 	.word	0x080298a8
 80194e0:	08029758 	.word	0x08029758
 80194e4:	080298c0 	.word	0x080298c0
 80194e8:	0802bda0 	.word	0x0802bda0
 80194ec:	2001a000 	.word	0x2001a000

080194f0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80194f0:	b580      	push	{r7, lr}
 80194f2:	b084      	sub	sp, #16
 80194f4:	af00      	add	r7, sp, #0
 80194f6:	60f8      	str	r0, [r7, #12]
 80194f8:	60b9      	str	r1, [r7, #8]
 80194fa:	4613      	mov	r3, r2
 80194fc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80194fe:	68bb      	ldr	r3, [r7, #8]
 8019500:	2b00      	cmp	r3, #0
 8019502:	d106      	bne.n	8019512 <tcp_accept_null+0x22>
 8019504:	4b07      	ldr	r3, [pc, #28]	; (8019524 <tcp_accept_null+0x34>)
 8019506:	f240 320f 	movw	r2, #783	; 0x30f
 801950a:	4907      	ldr	r1, [pc, #28]	; (8019528 <tcp_accept_null+0x38>)
 801950c:	4807      	ldr	r0, [pc, #28]	; (801952c <tcp_accept_null+0x3c>)
 801950e:	f00d fa43 	bl	8026998 <iprintf>

  tcp_abort(pcb);
 8019512:	68b8      	ldr	r0, [r7, #8]
 8019514:	f7ff ff48 	bl	80193a8 <tcp_abort>

  return ERR_ABRT;
 8019518:	f06f 030c 	mvn.w	r3, #12
}
 801951c:	4618      	mov	r0, r3
 801951e:	3710      	adds	r7, #16
 8019520:	46bd      	mov	sp, r7
 8019522:	bd80      	pop	{r7, pc}
 8019524:	08029714 	.word	0x08029714
 8019528:	080298e8 	.word	0x080298e8
 801952c:	08029758 	.word	0x08029758

08019530 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8019530:	b580      	push	{r7, lr}
 8019532:	b088      	sub	sp, #32
 8019534:	af00      	add	r7, sp, #0
 8019536:	60f8      	str	r0, [r7, #12]
 8019538:	460b      	mov	r3, r1
 801953a:	607a      	str	r2, [r7, #4]
 801953c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801953e:	2300      	movs	r3, #0
 8019540:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8019542:	68fb      	ldr	r3, [r7, #12]
 8019544:	2b00      	cmp	r3, #0
 8019546:	d109      	bne.n	801955c <tcp_listen_with_backlog_and_err+0x2c>
 8019548:	4b47      	ldr	r3, [pc, #284]	; (8019668 <tcp_listen_with_backlog_and_err+0x138>)
 801954a:	f240 3259 	movw	r2, #857	; 0x359
 801954e:	4947      	ldr	r1, [pc, #284]	; (801966c <tcp_listen_with_backlog_and_err+0x13c>)
 8019550:	4847      	ldr	r0, [pc, #284]	; (8019670 <tcp_listen_with_backlog_and_err+0x140>)
 8019552:	f00d fa21 	bl	8026998 <iprintf>
 8019556:	23f0      	movs	r3, #240	; 0xf0
 8019558:	76fb      	strb	r3, [r7, #27]
 801955a:	e079      	b.n	8019650 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801955c:	68fb      	ldr	r3, [r7, #12]
 801955e:	7d1b      	ldrb	r3, [r3, #20]
 8019560:	2b00      	cmp	r3, #0
 8019562:	d009      	beq.n	8019578 <tcp_listen_with_backlog_and_err+0x48>
 8019564:	4b40      	ldr	r3, [pc, #256]	; (8019668 <tcp_listen_with_backlog_and_err+0x138>)
 8019566:	f240 325a 	movw	r2, #858	; 0x35a
 801956a:	4942      	ldr	r1, [pc, #264]	; (8019674 <tcp_listen_with_backlog_and_err+0x144>)
 801956c:	4840      	ldr	r0, [pc, #256]	; (8019670 <tcp_listen_with_backlog_and_err+0x140>)
 801956e:	f00d fa13 	bl	8026998 <iprintf>
 8019572:	23f1      	movs	r3, #241	; 0xf1
 8019574:	76fb      	strb	r3, [r7, #27]
 8019576:	e06b      	b.n	8019650 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8019578:	68fb      	ldr	r3, [r7, #12]
 801957a:	7d1b      	ldrb	r3, [r3, #20]
 801957c:	2b01      	cmp	r3, #1
 801957e:	d104      	bne.n	801958a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8019580:	68fb      	ldr	r3, [r7, #12]
 8019582:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8019584:	23f7      	movs	r3, #247	; 0xf7
 8019586:	76fb      	strb	r3, [r7, #27]
    goto done;
 8019588:	e062      	b.n	8019650 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801958a:	2002      	movs	r0, #2
 801958c:	f7fe fa16 	bl	80179bc <memp_malloc>
 8019590:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8019592:	69fb      	ldr	r3, [r7, #28]
 8019594:	2b00      	cmp	r3, #0
 8019596:	d102      	bne.n	801959e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8019598:	23ff      	movs	r3, #255	; 0xff
 801959a:	76fb      	strb	r3, [r7, #27]
    goto done;
 801959c:	e058      	b.n	8019650 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801959e:	68fb      	ldr	r3, [r7, #12]
 80195a0:	691a      	ldr	r2, [r3, #16]
 80195a2:	69fb      	ldr	r3, [r7, #28]
 80195a4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80195a6:	68fb      	ldr	r3, [r7, #12]
 80195a8:	8ada      	ldrh	r2, [r3, #22]
 80195aa:	69fb      	ldr	r3, [r7, #28]
 80195ac:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80195ae:	69fb      	ldr	r3, [r7, #28]
 80195b0:	2201      	movs	r2, #1
 80195b2:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80195b4:	68fb      	ldr	r3, [r7, #12]
 80195b6:	7d5a      	ldrb	r2, [r3, #21]
 80195b8:	69fb      	ldr	r3, [r7, #28]
 80195ba:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	7a5a      	ldrb	r2, [r3, #9]
 80195c0:	69fb      	ldr	r3, [r7, #28]
 80195c2:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80195c4:	69fb      	ldr	r3, [r7, #28]
 80195c6:	2200      	movs	r2, #0
 80195c8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80195ca:	68fb      	ldr	r3, [r7, #12]
 80195cc:	7ada      	ldrb	r2, [r3, #11]
 80195ce:	69fb      	ldr	r3, [r7, #28]
 80195d0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80195d2:	68fb      	ldr	r3, [r7, #12]
 80195d4:	7a9a      	ldrb	r2, [r3, #10]
 80195d6:	69fb      	ldr	r3, [r7, #28]
 80195d8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80195da:	68fb      	ldr	r3, [r7, #12]
 80195dc:	681a      	ldr	r2, [r3, #0]
 80195de:	69fb      	ldr	r3, [r7, #28]
 80195e0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80195e2:	68fb      	ldr	r3, [r7, #12]
 80195e4:	8adb      	ldrh	r3, [r3, #22]
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d021      	beq.n	801962e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80195ea:	4b23      	ldr	r3, [pc, #140]	; (8019678 <tcp_listen_with_backlog_and_err+0x148>)
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	68fa      	ldr	r2, [r7, #12]
 80195f0:	429a      	cmp	r2, r3
 80195f2:	d105      	bne.n	8019600 <tcp_listen_with_backlog_and_err+0xd0>
 80195f4:	4b20      	ldr	r3, [pc, #128]	; (8019678 <tcp_listen_with_backlog_and_err+0x148>)
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	68db      	ldr	r3, [r3, #12]
 80195fa:	4a1f      	ldr	r2, [pc, #124]	; (8019678 <tcp_listen_with_backlog_and_err+0x148>)
 80195fc:	6013      	str	r3, [r2, #0]
 80195fe:	e013      	b.n	8019628 <tcp_listen_with_backlog_and_err+0xf8>
 8019600:	4b1d      	ldr	r3, [pc, #116]	; (8019678 <tcp_listen_with_backlog_and_err+0x148>)
 8019602:	681b      	ldr	r3, [r3, #0]
 8019604:	617b      	str	r3, [r7, #20]
 8019606:	e00c      	b.n	8019622 <tcp_listen_with_backlog_and_err+0xf2>
 8019608:	697b      	ldr	r3, [r7, #20]
 801960a:	68db      	ldr	r3, [r3, #12]
 801960c:	68fa      	ldr	r2, [r7, #12]
 801960e:	429a      	cmp	r2, r3
 8019610:	d104      	bne.n	801961c <tcp_listen_with_backlog_and_err+0xec>
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	68da      	ldr	r2, [r3, #12]
 8019616:	697b      	ldr	r3, [r7, #20]
 8019618:	60da      	str	r2, [r3, #12]
 801961a:	e005      	b.n	8019628 <tcp_listen_with_backlog_and_err+0xf8>
 801961c:	697b      	ldr	r3, [r7, #20]
 801961e:	68db      	ldr	r3, [r3, #12]
 8019620:	617b      	str	r3, [r7, #20]
 8019622:	697b      	ldr	r3, [r7, #20]
 8019624:	2b00      	cmp	r3, #0
 8019626:	d1ef      	bne.n	8019608 <tcp_listen_with_backlog_and_err+0xd8>
 8019628:	68fb      	ldr	r3, [r7, #12]
 801962a:	2200      	movs	r2, #0
 801962c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801962e:	68f8      	ldr	r0, [r7, #12]
 8019630:	f7ff fb80 	bl	8018d34 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8019634:	69fb      	ldr	r3, [r7, #28]
 8019636:	4a11      	ldr	r2, [pc, #68]	; (801967c <tcp_listen_with_backlog_and_err+0x14c>)
 8019638:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801963a:	4b11      	ldr	r3, [pc, #68]	; (8019680 <tcp_listen_with_backlog_and_err+0x150>)
 801963c:	681a      	ldr	r2, [r3, #0]
 801963e:	69fb      	ldr	r3, [r7, #28]
 8019640:	60da      	str	r2, [r3, #12]
 8019642:	4a0f      	ldr	r2, [pc, #60]	; (8019680 <tcp_listen_with_backlog_and_err+0x150>)
 8019644:	69fb      	ldr	r3, [r7, #28]
 8019646:	6013      	str	r3, [r2, #0]
 8019648:	f005 fcfc 	bl	801f044 <tcp_timer_needed>
  res = ERR_OK;
 801964c:	2300      	movs	r3, #0
 801964e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	2b00      	cmp	r3, #0
 8019654:	d002      	beq.n	801965c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	7efa      	ldrb	r2, [r7, #27]
 801965a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801965c:	69fb      	ldr	r3, [r7, #28]
}
 801965e:	4618      	mov	r0, r3
 8019660:	3720      	adds	r7, #32
 8019662:	46bd      	mov	sp, r7
 8019664:	bd80      	pop	{r7, pc}
 8019666:	bf00      	nop
 8019668:	08029714 	.word	0x08029714
 801966c:	08029908 	.word	0x08029908
 8019670:	08029758 	.word	0x08029758
 8019674:	08029938 	.word	0x08029938
 8019678:	2001a000 	.word	0x2001a000
 801967c:	080194f1 	.word	0x080194f1
 8019680:	20019ffc 	.word	0x20019ffc

08019684 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8019684:	b580      	push	{r7, lr}
 8019686:	b084      	sub	sp, #16
 8019688:	af00      	add	r7, sp, #0
 801968a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	2b00      	cmp	r3, #0
 8019690:	d106      	bne.n	80196a0 <tcp_update_rcv_ann_wnd+0x1c>
 8019692:	4b25      	ldr	r3, [pc, #148]	; (8019728 <tcp_update_rcv_ann_wnd+0xa4>)
 8019694:	f240 32a6 	movw	r2, #934	; 0x3a6
 8019698:	4924      	ldr	r1, [pc, #144]	; (801972c <tcp_update_rcv_ann_wnd+0xa8>)
 801969a:	4825      	ldr	r0, [pc, #148]	; (8019730 <tcp_update_rcv_ann_wnd+0xac>)
 801969c:	f00d f97c 	bl	8026998 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196a4:	687a      	ldr	r2, [r7, #4]
 80196a6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80196a8:	4413      	add	r3, r2
 80196aa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80196b0:	687a      	ldr	r2, [r7, #4]
 80196b2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80196b4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80196b8:	bf28      	it	cs
 80196ba:	f44f 6280 	movcs.w	r2, #1024	; 0x400
 80196be:	b292      	uxth	r2, r2
 80196c0:	4413      	add	r3, r2
 80196c2:	68fa      	ldr	r2, [r7, #12]
 80196c4:	1ad3      	subs	r3, r2, r3
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	db08      	blt.n	80196dc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80196d6:	68fa      	ldr	r2, [r7, #12]
 80196d8:	1ad3      	subs	r3, r2, r3
 80196da:	e020      	b.n	801971e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80196e4:	1ad3      	subs	r3, r2, r3
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	dd03      	ble.n	80196f2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	2200      	movs	r2, #0
 80196ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80196f0:	e014      	b.n	801971c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196fa:	1ad3      	subs	r3, r2, r3
 80196fc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80196fe:	68bb      	ldr	r3, [r7, #8]
 8019700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019704:	d306      	bcc.n	8019714 <tcp_update_rcv_ann_wnd+0x90>
 8019706:	4b08      	ldr	r3, [pc, #32]	; (8019728 <tcp_update_rcv_ann_wnd+0xa4>)
 8019708:	f240 32b6 	movw	r2, #950	; 0x3b6
 801970c:	4909      	ldr	r1, [pc, #36]	; (8019734 <tcp_update_rcv_ann_wnd+0xb0>)
 801970e:	4808      	ldr	r0, [pc, #32]	; (8019730 <tcp_update_rcv_ann_wnd+0xac>)
 8019710:	f00d f942 	bl	8026998 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8019714:	68bb      	ldr	r3, [r7, #8]
 8019716:	b29a      	uxth	r2, r3
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801971c:	2300      	movs	r3, #0
  }
}
 801971e:	4618      	mov	r0, r3
 8019720:	3710      	adds	r7, #16
 8019722:	46bd      	mov	sp, r7
 8019724:	bd80      	pop	{r7, pc}
 8019726:	bf00      	nop
 8019728:	08029714 	.word	0x08029714
 801972c:	08029970 	.word	0x08029970
 8019730:	08029758 	.word	0x08029758
 8019734:	08029994 	.word	0x08029994

08019738 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8019738:	b580      	push	{r7, lr}
 801973a:	b084      	sub	sp, #16
 801973c:	af00      	add	r7, sp, #0
 801973e:	6078      	str	r0, [r7, #4]
 8019740:	460b      	mov	r3, r1
 8019742:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	2b00      	cmp	r3, #0
 8019748:	d107      	bne.n	801975a <tcp_recved+0x22>
 801974a:	4b1f      	ldr	r3, [pc, #124]	; (80197c8 <tcp_recved+0x90>)
 801974c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8019750:	491e      	ldr	r1, [pc, #120]	; (80197cc <tcp_recved+0x94>)
 8019752:	481f      	ldr	r0, [pc, #124]	; (80197d0 <tcp_recved+0x98>)
 8019754:	f00d f920 	bl	8026998 <iprintf>
 8019758:	e032      	b.n	80197c0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	7d1b      	ldrb	r3, [r3, #20]
 801975e:	2b01      	cmp	r3, #1
 8019760:	d106      	bne.n	8019770 <tcp_recved+0x38>
 8019762:	4b19      	ldr	r3, [pc, #100]	; (80197c8 <tcp_recved+0x90>)
 8019764:	f240 32d3 	movw	r2, #979	; 0x3d3
 8019768:	491a      	ldr	r1, [pc, #104]	; (80197d4 <tcp_recved+0x9c>)
 801976a:	4819      	ldr	r0, [pc, #100]	; (80197d0 <tcp_recved+0x98>)
 801976c:	f00d f914 	bl	8026998 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019774:	887b      	ldrh	r3, [r7, #2]
 8019776:	4413      	add	r3, r2
 8019778:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801977a:	89fb      	ldrh	r3, [r7, #14]
 801977c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8019780:	d804      	bhi.n	801978c <tcp_recved+0x54>
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019786:	89fa      	ldrh	r2, [r7, #14]
 8019788:	429a      	cmp	r2, r3
 801978a:	d204      	bcs.n	8019796 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019792:	851a      	strh	r2, [r3, #40]	; 0x28
 8019794:	e002      	b.n	801979c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	89fa      	ldrh	r2, [r7, #14]
 801979a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801979c:	6878      	ldr	r0, [r7, #4]
 801979e:	f7ff ff71 	bl	8019684 <tcp_update_rcv_ann_wnd>
 80197a2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80197a4:	68bb      	ldr	r3, [r7, #8]
 80197a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80197aa:	d309      	bcc.n	80197c0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	8b5b      	ldrh	r3, [r3, #26]
 80197b0:	f043 0302 	orr.w	r3, r3, #2
 80197b4:	b29a      	uxth	r2, r3
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80197ba:	6878      	ldr	r0, [r7, #4]
 80197bc:	f004 fcbe 	bl	801e13c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80197c0:	3710      	adds	r7, #16
 80197c2:	46bd      	mov	sp, r7
 80197c4:	bd80      	pop	{r7, pc}
 80197c6:	bf00      	nop
 80197c8:	08029714 	.word	0x08029714
 80197cc:	080299b0 	.word	0x080299b0
 80197d0:	08029758 	.word	0x08029758
 80197d4:	080299c8 	.word	0x080299c8

080197d8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80197d8:	b480      	push	{r7}
 80197da:	b083      	sub	sp, #12
 80197dc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80197de:	2300      	movs	r3, #0
 80197e0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80197e2:	4b1e      	ldr	r3, [pc, #120]	; (801985c <tcp_new_port+0x84>)
 80197e4:	881b      	ldrh	r3, [r3, #0]
 80197e6:	3301      	adds	r3, #1
 80197e8:	b29a      	uxth	r2, r3
 80197ea:	4b1c      	ldr	r3, [pc, #112]	; (801985c <tcp_new_port+0x84>)
 80197ec:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80197ee:	4b1b      	ldr	r3, [pc, #108]	; (801985c <tcp_new_port+0x84>)
 80197f0:	881b      	ldrh	r3, [r3, #0]
 80197f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80197f6:	4293      	cmp	r3, r2
 80197f8:	d103      	bne.n	8019802 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80197fa:	4b18      	ldr	r3, [pc, #96]	; (801985c <tcp_new_port+0x84>)
 80197fc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8019800:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8019802:	2300      	movs	r3, #0
 8019804:	71fb      	strb	r3, [r7, #7]
 8019806:	e01e      	b.n	8019846 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8019808:	79fb      	ldrb	r3, [r7, #7]
 801980a:	4a15      	ldr	r2, [pc, #84]	; (8019860 <tcp_new_port+0x88>)
 801980c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	603b      	str	r3, [r7, #0]
 8019814:	e011      	b.n	801983a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8019816:	683b      	ldr	r3, [r7, #0]
 8019818:	8ada      	ldrh	r2, [r3, #22]
 801981a:	4b10      	ldr	r3, [pc, #64]	; (801985c <tcp_new_port+0x84>)
 801981c:	881b      	ldrh	r3, [r3, #0]
 801981e:	429a      	cmp	r2, r3
 8019820:	d108      	bne.n	8019834 <tcp_new_port+0x5c>
        n++;
 8019822:	88bb      	ldrh	r3, [r7, #4]
 8019824:	3301      	adds	r3, #1
 8019826:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8019828:	88bb      	ldrh	r3, [r7, #4]
 801982a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801982e:	d3d8      	bcc.n	80197e2 <tcp_new_port+0xa>
          return 0;
 8019830:	2300      	movs	r3, #0
 8019832:	e00d      	b.n	8019850 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8019834:	683b      	ldr	r3, [r7, #0]
 8019836:	68db      	ldr	r3, [r3, #12]
 8019838:	603b      	str	r3, [r7, #0]
 801983a:	683b      	ldr	r3, [r7, #0]
 801983c:	2b00      	cmp	r3, #0
 801983e:	d1ea      	bne.n	8019816 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8019840:	79fb      	ldrb	r3, [r7, #7]
 8019842:	3301      	adds	r3, #1
 8019844:	71fb      	strb	r3, [r7, #7]
 8019846:	79fb      	ldrb	r3, [r7, #7]
 8019848:	2b03      	cmp	r3, #3
 801984a:	d9dd      	bls.n	8019808 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801984c:	4b03      	ldr	r3, [pc, #12]	; (801985c <tcp_new_port+0x84>)
 801984e:	881b      	ldrh	r3, [r3, #0]
}
 8019850:	4618      	mov	r0, r3
 8019852:	370c      	adds	r7, #12
 8019854:	46bd      	mov	sp, r7
 8019856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801985a:	4770      	bx	lr
 801985c:	20000010 	.word	0x20000010
 8019860:	0802bda0 	.word	0x0802bda0

08019864 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8019864:	b580      	push	{r7, lr}
 8019866:	b08a      	sub	sp, #40	; 0x28
 8019868:	af00      	add	r7, sp, #0
 801986a:	60f8      	str	r0, [r7, #12]
 801986c:	60b9      	str	r1, [r7, #8]
 801986e:	603b      	str	r3, [r7, #0]
 8019870:	4613      	mov	r3, r2
 8019872:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8019874:	2300      	movs	r3, #0
 8019876:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8019878:	68fb      	ldr	r3, [r7, #12]
 801987a:	2b00      	cmp	r3, #0
 801987c:	d109      	bne.n	8019892 <tcp_connect+0x2e>
 801987e:	4b7d      	ldr	r3, [pc, #500]	; (8019a74 <tcp_connect+0x210>)
 8019880:	f240 4235 	movw	r2, #1077	; 0x435
 8019884:	497c      	ldr	r1, [pc, #496]	; (8019a78 <tcp_connect+0x214>)
 8019886:	487d      	ldr	r0, [pc, #500]	; (8019a7c <tcp_connect+0x218>)
 8019888:	f00d f886 	bl	8026998 <iprintf>
 801988c:	f06f 030f 	mvn.w	r3, #15
 8019890:	e0ec      	b.n	8019a6c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8019892:	68bb      	ldr	r3, [r7, #8]
 8019894:	2b00      	cmp	r3, #0
 8019896:	d109      	bne.n	80198ac <tcp_connect+0x48>
 8019898:	4b76      	ldr	r3, [pc, #472]	; (8019a74 <tcp_connect+0x210>)
 801989a:	f240 4236 	movw	r2, #1078	; 0x436
 801989e:	4978      	ldr	r1, [pc, #480]	; (8019a80 <tcp_connect+0x21c>)
 80198a0:	4876      	ldr	r0, [pc, #472]	; (8019a7c <tcp_connect+0x218>)
 80198a2:	f00d f879 	bl	8026998 <iprintf>
 80198a6:	f06f 030f 	mvn.w	r3, #15
 80198aa:	e0df      	b.n	8019a6c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80198ac:	68fb      	ldr	r3, [r7, #12]
 80198ae:	7d1b      	ldrb	r3, [r3, #20]
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d009      	beq.n	80198c8 <tcp_connect+0x64>
 80198b4:	4b6f      	ldr	r3, [pc, #444]	; (8019a74 <tcp_connect+0x210>)
 80198b6:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80198ba:	4972      	ldr	r1, [pc, #456]	; (8019a84 <tcp_connect+0x220>)
 80198bc:	486f      	ldr	r0, [pc, #444]	; (8019a7c <tcp_connect+0x218>)
 80198be:	f00d f86b 	bl	8026998 <iprintf>
 80198c2:	f06f 0309 	mvn.w	r3, #9
 80198c6:	e0d1      	b.n	8019a6c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80198c8:	68bb      	ldr	r3, [r7, #8]
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	d002      	beq.n	80198d4 <tcp_connect+0x70>
 80198ce:	68bb      	ldr	r3, [r7, #8]
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	e000      	b.n	80198d6 <tcp_connect+0x72>
 80198d4:	2300      	movs	r3, #0
 80198d6:	68fa      	ldr	r2, [r7, #12]
 80198d8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	88fa      	ldrh	r2, [r7, #6]
 80198de:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80198e0:	68fb      	ldr	r3, [r7, #12]
 80198e2:	7a1b      	ldrb	r3, [r3, #8]
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d006      	beq.n	80198f6 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 80198e8:	68fb      	ldr	r3, [r7, #12]
 80198ea:	7a1b      	ldrb	r3, [r3, #8]
 80198ec:	4618      	mov	r0, r3
 80198ee:	f7fe fba9 	bl	8018044 <netif_get_by_index>
 80198f2:	6278      	str	r0, [r7, #36]	; 0x24
 80198f4:	e005      	b.n	8019902 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80198f6:	68fb      	ldr	r3, [r7, #12]
 80198f8:	3304      	adds	r3, #4
 80198fa:	4618      	mov	r0, r3
 80198fc:	f009 f9f0 	bl	8022ce0 <ip4_route>
 8019900:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8019902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019904:	2b00      	cmp	r3, #0
 8019906:	d102      	bne.n	801990e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8019908:	f06f 0303 	mvn.w	r3, #3
 801990c:	e0ae      	b.n	8019a6c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801990e:	68fb      	ldr	r3, [r7, #12]
 8019910:	2b00      	cmp	r3, #0
 8019912:	d003      	beq.n	801991c <tcp_connect+0xb8>
 8019914:	68fb      	ldr	r3, [r7, #12]
 8019916:	681b      	ldr	r3, [r3, #0]
 8019918:	2b00      	cmp	r3, #0
 801991a:	d111      	bne.n	8019940 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 801991c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801991e:	2b00      	cmp	r3, #0
 8019920:	d002      	beq.n	8019928 <tcp_connect+0xc4>
 8019922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019924:	3304      	adds	r3, #4
 8019926:	e000      	b.n	801992a <tcp_connect+0xc6>
 8019928:	2300      	movs	r3, #0
 801992a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 801992c:	69fb      	ldr	r3, [r7, #28]
 801992e:	2b00      	cmp	r3, #0
 8019930:	d102      	bne.n	8019938 <tcp_connect+0xd4>
      return ERR_RTE;
 8019932:	f06f 0303 	mvn.w	r3, #3
 8019936:	e099      	b.n	8019a6c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019938:	69fb      	ldr	r3, [r7, #28]
 801993a:	681a      	ldr	r2, [r3, #0]
 801993c:	68fb      	ldr	r3, [r7, #12]
 801993e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8019940:	68fb      	ldr	r3, [r7, #12]
 8019942:	8adb      	ldrh	r3, [r3, #22]
 8019944:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8019946:	68fb      	ldr	r3, [r7, #12]
 8019948:	8adb      	ldrh	r3, [r3, #22]
 801994a:	2b00      	cmp	r3, #0
 801994c:	d10c      	bne.n	8019968 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 801994e:	f7ff ff43 	bl	80197d8 <tcp_new_port>
 8019952:	4603      	mov	r3, r0
 8019954:	461a      	mov	r2, r3
 8019956:	68fb      	ldr	r3, [r7, #12]
 8019958:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 801995a:	68fb      	ldr	r3, [r7, #12]
 801995c:	8adb      	ldrh	r3, [r3, #22]
 801995e:	2b00      	cmp	r3, #0
 8019960:	d102      	bne.n	8019968 <tcp_connect+0x104>
      return ERR_BUF;
 8019962:	f06f 0301 	mvn.w	r3, #1
 8019966:	e081      	b.n	8019a6c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8019968:	68f8      	ldr	r0, [r7, #12]
 801996a:	f001 f863 	bl	801aa34 <tcp_next_iss>
 801996e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8019970:	68fb      	ldr	r3, [r7, #12]
 8019972:	2200      	movs	r2, #0
 8019974:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	697a      	ldr	r2, [r7, #20]
 801997a:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 801997c:	697b      	ldr	r3, [r7, #20]
 801997e:	1e5a      	subs	r2, r3, #1
 8019980:	68fb      	ldr	r3, [r7, #12]
 8019982:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8019984:	697b      	ldr	r3, [r7, #20]
 8019986:	1e5a      	subs	r2, r3, #1
 8019988:	68fb      	ldr	r3, [r7, #12]
 801998a:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 801998c:	697b      	ldr	r3, [r7, #20]
 801998e:	1e5a      	subs	r2, r3, #1
 8019990:	68fb      	ldr	r3, [r7, #12]
 8019992:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8019994:	68fb      	ldr	r3, [r7, #12]
 8019996:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801999a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801999c:	68fb      	ldr	r3, [r7, #12]
 801999e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80199a0:	68fb      	ldr	r3, [r7, #12]
 80199a2:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80199a4:	68fb      	ldr	r3, [r7, #12]
 80199a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80199a8:	68fb      	ldr	r3, [r7, #12]
 80199aa:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 80199ac:	68fb      	ldr	r3, [r7, #12]
 80199ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80199b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80199b6:	68fb      	ldr	r3, [r7, #12]
 80199b8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80199bc:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80199be:	68fb      	ldr	r3, [r7, #12]
 80199c0:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 80199c2:	68fb      	ldr	r3, [r7, #12]
 80199c4:	3304      	adds	r3, #4
 80199c6:	461a      	mov	r2, r3
 80199c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80199ca:	f001 f859 	bl	801aa80 <tcp_eff_send_mss_netif>
 80199ce:	4603      	mov	r3, r0
 80199d0:	461a      	mov	r2, r3
 80199d2:	68fb      	ldr	r3, [r7, #12]
 80199d4:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	2201      	movs	r2, #1
 80199da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	683a      	ldr	r2, [r7, #0]
 80199e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80199e6:	2102      	movs	r1, #2
 80199e8:	68f8      	ldr	r0, [r7, #12]
 80199ea:	f004 fab9 	bl	801df60 <tcp_enqueue_flags>
 80199ee:	4603      	mov	r3, r0
 80199f0:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 80199f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d136      	bne.n	8019a68 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 80199fa:	68fb      	ldr	r3, [r7, #12]
 80199fc:	2202      	movs	r2, #2
 80199fe:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8019a00:	8b7b      	ldrh	r3, [r7, #26]
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d021      	beq.n	8019a4a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8019a06:	4b20      	ldr	r3, [pc, #128]	; (8019a88 <tcp_connect+0x224>)
 8019a08:	681b      	ldr	r3, [r3, #0]
 8019a0a:	68fa      	ldr	r2, [r7, #12]
 8019a0c:	429a      	cmp	r2, r3
 8019a0e:	d105      	bne.n	8019a1c <tcp_connect+0x1b8>
 8019a10:	4b1d      	ldr	r3, [pc, #116]	; (8019a88 <tcp_connect+0x224>)
 8019a12:	681b      	ldr	r3, [r3, #0]
 8019a14:	68db      	ldr	r3, [r3, #12]
 8019a16:	4a1c      	ldr	r2, [pc, #112]	; (8019a88 <tcp_connect+0x224>)
 8019a18:	6013      	str	r3, [r2, #0]
 8019a1a:	e013      	b.n	8019a44 <tcp_connect+0x1e0>
 8019a1c:	4b1a      	ldr	r3, [pc, #104]	; (8019a88 <tcp_connect+0x224>)
 8019a1e:	681b      	ldr	r3, [r3, #0]
 8019a20:	623b      	str	r3, [r7, #32]
 8019a22:	e00c      	b.n	8019a3e <tcp_connect+0x1da>
 8019a24:	6a3b      	ldr	r3, [r7, #32]
 8019a26:	68db      	ldr	r3, [r3, #12]
 8019a28:	68fa      	ldr	r2, [r7, #12]
 8019a2a:	429a      	cmp	r2, r3
 8019a2c:	d104      	bne.n	8019a38 <tcp_connect+0x1d4>
 8019a2e:	68fb      	ldr	r3, [r7, #12]
 8019a30:	68da      	ldr	r2, [r3, #12]
 8019a32:	6a3b      	ldr	r3, [r7, #32]
 8019a34:	60da      	str	r2, [r3, #12]
 8019a36:	e005      	b.n	8019a44 <tcp_connect+0x1e0>
 8019a38:	6a3b      	ldr	r3, [r7, #32]
 8019a3a:	68db      	ldr	r3, [r3, #12]
 8019a3c:	623b      	str	r3, [r7, #32]
 8019a3e:	6a3b      	ldr	r3, [r7, #32]
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d1ef      	bne.n	8019a24 <tcp_connect+0x1c0>
 8019a44:	68fb      	ldr	r3, [r7, #12]
 8019a46:	2200      	movs	r2, #0
 8019a48:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8019a4a:	4b10      	ldr	r3, [pc, #64]	; (8019a8c <tcp_connect+0x228>)
 8019a4c:	681a      	ldr	r2, [r3, #0]
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	60da      	str	r2, [r3, #12]
 8019a52:	4a0e      	ldr	r2, [pc, #56]	; (8019a8c <tcp_connect+0x228>)
 8019a54:	68fb      	ldr	r3, [r7, #12]
 8019a56:	6013      	str	r3, [r2, #0]
 8019a58:	f005 faf4 	bl	801f044 <tcp_timer_needed>
 8019a5c:	4b0c      	ldr	r3, [pc, #48]	; (8019a90 <tcp_connect+0x22c>)
 8019a5e:	2201      	movs	r2, #1
 8019a60:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8019a62:	68f8      	ldr	r0, [r7, #12]
 8019a64:	f004 fb6a 	bl	801e13c <tcp_output>
  }
  return ret;
 8019a68:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8019a6c:	4618      	mov	r0, r3
 8019a6e:	3728      	adds	r7, #40	; 0x28
 8019a70:	46bd      	mov	sp, r7
 8019a72:	bd80      	pop	{r7, pc}
 8019a74:	08029714 	.word	0x08029714
 8019a78:	080299f0 	.word	0x080299f0
 8019a7c:	08029758 	.word	0x08029758
 8019a80:	08029a0c 	.word	0x08029a0c
 8019a84:	08029a28 	.word	0x08029a28
 8019a88:	2001a000 	.word	0x2001a000
 8019a8c:	20019ff4 	.word	0x20019ff4
 8019a90:	20019ff0 	.word	0x20019ff0

08019a94 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8019a94:	b5b0      	push	{r4, r5, r7, lr}
 8019a96:	b090      	sub	sp, #64	; 0x40
 8019a98:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8019a9a:	2300      	movs	r3, #0
 8019a9c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8019aa0:	4b94      	ldr	r3, [pc, #592]	; (8019cf4 <tcp_slowtmr+0x260>)
 8019aa2:	681b      	ldr	r3, [r3, #0]
 8019aa4:	3301      	adds	r3, #1
 8019aa6:	4a93      	ldr	r2, [pc, #588]	; (8019cf4 <tcp_slowtmr+0x260>)
 8019aa8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8019aaa:	4b93      	ldr	r3, [pc, #588]	; (8019cf8 <tcp_slowtmr+0x264>)
 8019aac:	781b      	ldrb	r3, [r3, #0]
 8019aae:	3301      	adds	r3, #1
 8019ab0:	b2da      	uxtb	r2, r3
 8019ab2:	4b91      	ldr	r3, [pc, #580]	; (8019cf8 <tcp_slowtmr+0x264>)
 8019ab4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8019ab6:	2300      	movs	r3, #0
 8019ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8019aba:	4b90      	ldr	r3, [pc, #576]	; (8019cfc <tcp_slowtmr+0x268>)
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8019ac0:	e29f      	b.n	801a002 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8019ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ac4:	7d1b      	ldrb	r3, [r3, #20]
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d106      	bne.n	8019ad8 <tcp_slowtmr+0x44>
 8019aca:	4b8d      	ldr	r3, [pc, #564]	; (8019d00 <tcp_slowtmr+0x26c>)
 8019acc:	f240 42be 	movw	r2, #1214	; 0x4be
 8019ad0:	498c      	ldr	r1, [pc, #560]	; (8019d04 <tcp_slowtmr+0x270>)
 8019ad2:	488d      	ldr	r0, [pc, #564]	; (8019d08 <tcp_slowtmr+0x274>)
 8019ad4:	f00c ff60 	bl	8026998 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8019ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ada:	7d1b      	ldrb	r3, [r3, #20]
 8019adc:	2b01      	cmp	r3, #1
 8019ade:	d106      	bne.n	8019aee <tcp_slowtmr+0x5a>
 8019ae0:	4b87      	ldr	r3, [pc, #540]	; (8019d00 <tcp_slowtmr+0x26c>)
 8019ae2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8019ae6:	4989      	ldr	r1, [pc, #548]	; (8019d0c <tcp_slowtmr+0x278>)
 8019ae8:	4887      	ldr	r0, [pc, #540]	; (8019d08 <tcp_slowtmr+0x274>)
 8019aea:	f00c ff55 	bl	8026998 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8019aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019af0:	7d1b      	ldrb	r3, [r3, #20]
 8019af2:	2b0a      	cmp	r3, #10
 8019af4:	d106      	bne.n	8019b04 <tcp_slowtmr+0x70>
 8019af6:	4b82      	ldr	r3, [pc, #520]	; (8019d00 <tcp_slowtmr+0x26c>)
 8019af8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8019afc:	4984      	ldr	r1, [pc, #528]	; (8019d10 <tcp_slowtmr+0x27c>)
 8019afe:	4882      	ldr	r0, [pc, #520]	; (8019d08 <tcp_slowtmr+0x274>)
 8019b00:	f00c ff4a 	bl	8026998 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8019b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b06:	7f9a      	ldrb	r2, [r3, #30]
 8019b08:	4b7b      	ldr	r3, [pc, #492]	; (8019cf8 <tcp_slowtmr+0x264>)
 8019b0a:	781b      	ldrb	r3, [r3, #0]
 8019b0c:	429a      	cmp	r2, r3
 8019b0e:	d105      	bne.n	8019b1c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8019b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b12:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8019b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b16:	68db      	ldr	r3, [r3, #12]
 8019b18:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8019b1a:	e272      	b.n	801a002 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8019b1c:	4b76      	ldr	r3, [pc, #472]	; (8019cf8 <tcp_slowtmr+0x264>)
 8019b1e:	781a      	ldrb	r2, [r3, #0]
 8019b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b22:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8019b24:	2300      	movs	r3, #0
 8019b26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8019b2a:	2300      	movs	r3, #0
 8019b2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8019b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b32:	7d1b      	ldrb	r3, [r3, #20]
 8019b34:	2b02      	cmp	r3, #2
 8019b36:	d10a      	bne.n	8019b4e <tcp_slowtmr+0xba>
 8019b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019b3e:	2b05      	cmp	r3, #5
 8019b40:	d905      	bls.n	8019b4e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8019b42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019b46:	3301      	adds	r3, #1
 8019b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019b4c:	e11e      	b.n	8019d8c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8019b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019b54:	2b0b      	cmp	r3, #11
 8019b56:	d905      	bls.n	8019b64 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8019b58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019b5c:	3301      	adds	r3, #1
 8019b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019b62:	e113      	b.n	8019d8c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8019b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b66:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d075      	beq.n	8019c5a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8019b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b72:	2b00      	cmp	r3, #0
 8019b74:	d006      	beq.n	8019b84 <tcp_slowtmr+0xf0>
 8019b76:	4b62      	ldr	r3, [pc, #392]	; (8019d00 <tcp_slowtmr+0x26c>)
 8019b78:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8019b7c:	4965      	ldr	r1, [pc, #404]	; (8019d14 <tcp_slowtmr+0x280>)
 8019b7e:	4862      	ldr	r0, [pc, #392]	; (8019d08 <tcp_slowtmr+0x274>)
 8019b80:	f00c ff0a 	bl	8026998 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8019b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b88:	2b00      	cmp	r3, #0
 8019b8a:	d106      	bne.n	8019b9a <tcp_slowtmr+0x106>
 8019b8c:	4b5c      	ldr	r3, [pc, #368]	; (8019d00 <tcp_slowtmr+0x26c>)
 8019b8e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8019b92:	4961      	ldr	r1, [pc, #388]	; (8019d18 <tcp_slowtmr+0x284>)
 8019b94:	485c      	ldr	r0, [pc, #368]	; (8019d08 <tcp_slowtmr+0x274>)
 8019b96:	f00c feff 	bl	8026998 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8019b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b9c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8019ba0:	2b0b      	cmp	r3, #11
 8019ba2:	d905      	bls.n	8019bb0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8019ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019ba8:	3301      	adds	r3, #1
 8019baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019bae:	e0ed      	b.n	8019d8c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8019bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bb2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019bb6:	3b01      	subs	r3, #1
 8019bb8:	4a58      	ldr	r2, [pc, #352]	; (8019d1c <tcp_slowtmr+0x288>)
 8019bba:	5cd3      	ldrb	r3, [r2, r3]
 8019bbc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8019bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bc0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019bc4:	7c7a      	ldrb	r2, [r7, #17]
 8019bc6:	429a      	cmp	r2, r3
 8019bc8:	d907      	bls.n	8019bda <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8019bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bcc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019bd0:	3301      	adds	r3, #1
 8019bd2:	b2da      	uxtb	r2, r3
 8019bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bd6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8019bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bdc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019be0:	7c7a      	ldrb	r2, [r7, #17]
 8019be2:	429a      	cmp	r2, r3
 8019be4:	f200 80d2 	bhi.w	8019d8c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8019be8:	2301      	movs	r3, #1
 8019bea:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8019bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	d108      	bne.n	8019c08 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8019bf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019bf8:	f005 f956 	bl	801eea8 <tcp_zero_window_probe>
 8019bfc:	4603      	mov	r3, r0
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d014      	beq.n	8019c2c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8019c02:	2300      	movs	r3, #0
 8019c04:	623b      	str	r3, [r7, #32]
 8019c06:	e011      	b.n	8019c2c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8019c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019c0e:	4619      	mov	r1, r3
 8019c10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019c12:	f004 f80d 	bl	801dc30 <tcp_split_unsent_seg>
 8019c16:	4603      	mov	r3, r0
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	d107      	bne.n	8019c2c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8019c1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019c1e:	f004 fa8d 	bl	801e13c <tcp_output>
 8019c22:	4603      	mov	r3, r0
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d101      	bne.n	8019c2c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8019c28:	2300      	movs	r3, #0
 8019c2a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8019c2c:	6a3b      	ldr	r3, [r7, #32]
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	f000 80ac 	beq.w	8019d8c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8019c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c36:	2200      	movs	r2, #0
 8019c38:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8019c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c3e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019c42:	2b06      	cmp	r3, #6
 8019c44:	f200 80a2 	bhi.w	8019d8c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8019c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c4a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019c4e:	3301      	adds	r3, #1
 8019c50:	b2da      	uxtb	r2, r3
 8019c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c54:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8019c58:	e098      	b.n	8019d8c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8019c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c5c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	db0f      	blt.n	8019c84 <tcp_slowtmr+0x1f0>
 8019c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c66:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019c6a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019c6e:	4293      	cmp	r3, r2
 8019c70:	d008      	beq.n	8019c84 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8019c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c74:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019c78:	b29b      	uxth	r3, r3
 8019c7a:	3301      	adds	r3, #1
 8019c7c:	b29b      	uxth	r3, r3
 8019c7e:	b21a      	sxth	r2, r3
 8019c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c82:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8019c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c86:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8019c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c8c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8019c90:	429a      	cmp	r2, r3
 8019c92:	db7b      	blt.n	8019d8c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8019c94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019c96:	f004 fd49 	bl	801e72c <tcp_rexmit_rto_prepare>
 8019c9a:	4603      	mov	r3, r0
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d007      	beq.n	8019cb0 <tcp_slowtmr+0x21c>
 8019ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	d171      	bne.n	8019d8c <tcp_slowtmr+0x2f8>
 8019ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	d06d      	beq.n	8019d8c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8019cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cb2:	7d1b      	ldrb	r3, [r3, #20]
 8019cb4:	2b02      	cmp	r3, #2
 8019cb6:	d03a      	beq.n	8019d2e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8019cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019cbe:	2b0c      	cmp	r3, #12
 8019cc0:	bf28      	it	cs
 8019cc2:	230c      	movcs	r3, #12
 8019cc4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8019cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cc8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019ccc:	10db      	asrs	r3, r3, #3
 8019cce:	b21b      	sxth	r3, r3
 8019cd0:	461a      	mov	r2, r3
 8019cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cd4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019cd8:	4413      	add	r3, r2
 8019cda:	7efa      	ldrb	r2, [r7, #27]
 8019cdc:	4910      	ldr	r1, [pc, #64]	; (8019d20 <tcp_slowtmr+0x28c>)
 8019cde:	5c8a      	ldrb	r2, [r1, r2]
 8019ce0:	4093      	lsls	r3, r2
 8019ce2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8019ce4:	697b      	ldr	r3, [r7, #20]
 8019ce6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8019cea:	4293      	cmp	r3, r2
 8019cec:	dc1a      	bgt.n	8019d24 <tcp_slowtmr+0x290>
 8019cee:	697b      	ldr	r3, [r7, #20]
 8019cf0:	b21a      	sxth	r2, r3
 8019cf2:	e019      	b.n	8019d28 <tcp_slowtmr+0x294>
 8019cf4:	20019ff8 	.word	0x20019ff8
 8019cf8:	200131c2 	.word	0x200131c2
 8019cfc:	20019ff4 	.word	0x20019ff4
 8019d00:	08029714 	.word	0x08029714
 8019d04:	08029a58 	.word	0x08029a58
 8019d08:	08029758 	.word	0x08029758
 8019d0c:	08029a84 	.word	0x08029a84
 8019d10:	08029ab0 	.word	0x08029ab0
 8019d14:	08029ae0 	.word	0x08029ae0
 8019d18:	08029b14 	.word	0x08029b14
 8019d1c:	0802bd98 	.word	0x0802bd98
 8019d20:	0802bd88 	.word	0x0802bd88
 8019d24:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8019d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d30:	2200      	movs	r2, #0
 8019d32:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8019d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019d40:	4293      	cmp	r3, r2
 8019d42:	bf28      	it	cs
 8019d44:	4613      	movcs	r3, r2
 8019d46:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8019d48:	8a7b      	ldrh	r3, [r7, #18]
 8019d4a:	085b      	lsrs	r3, r3, #1
 8019d4c:	b29a      	uxth	r2, r3
 8019d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d50:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8019d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d56:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8019d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019d5e:	005b      	lsls	r3, r3, #1
 8019d60:	b29b      	uxth	r3, r3
 8019d62:	429a      	cmp	r2, r3
 8019d64:	d206      	bcs.n	8019d74 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8019d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019d6a:	005b      	lsls	r3, r3, #1
 8019d6c:	b29a      	uxth	r2, r3
 8019d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d70:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8019d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d76:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8019d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8019d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d80:	2200      	movs	r2, #0
 8019d82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8019d86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019d88:	f004 fd40 	bl	801e80c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8019d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d8e:	7d1b      	ldrb	r3, [r3, #20]
 8019d90:	2b06      	cmp	r3, #6
 8019d92:	d111      	bne.n	8019db8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8019d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d96:	8b5b      	ldrh	r3, [r3, #26]
 8019d98:	f003 0310 	and.w	r3, r3, #16
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	d00b      	beq.n	8019db8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019da0:	4b9d      	ldr	r3, [pc, #628]	; (801a018 <tcp_slowtmr+0x584>)
 8019da2:	681a      	ldr	r2, [r3, #0]
 8019da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019da6:	6a1b      	ldr	r3, [r3, #32]
 8019da8:	1ad3      	subs	r3, r2, r3
 8019daa:	2b28      	cmp	r3, #40	; 0x28
 8019dac:	d904      	bls.n	8019db8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8019dae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019db2:	3301      	adds	r3, #1
 8019db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8019db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dba:	7a5b      	ldrb	r3, [r3, #9]
 8019dbc:	f003 0308 	and.w	r3, r3, #8
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d04c      	beq.n	8019e5e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8019dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dc6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8019dc8:	2b04      	cmp	r3, #4
 8019dca:	d003      	beq.n	8019dd4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8019dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dce:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8019dd0:	2b07      	cmp	r3, #7
 8019dd2:	d144      	bne.n	8019e5e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019dd4:	4b90      	ldr	r3, [pc, #576]	; (801a018 <tcp_slowtmr+0x584>)
 8019dd6:	681a      	ldr	r2, [r3, #0]
 8019dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dda:	6a1b      	ldr	r3, [r3, #32]
 8019ddc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8019dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8019de4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8019de8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8019dec:	498b      	ldr	r1, [pc, #556]	; (801a01c <tcp_slowtmr+0x588>)
 8019dee:	fba1 1303 	umull	r1, r3, r1, r3
 8019df2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019df4:	429a      	cmp	r2, r3
 8019df6:	d90a      	bls.n	8019e0e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8019df8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019dfc:	3301      	adds	r3, #1
 8019dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8019e02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019e06:	3301      	adds	r3, #1
 8019e08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019e0c:	e027      	b.n	8019e5e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019e0e:	4b82      	ldr	r3, [pc, #520]	; (801a018 <tcp_slowtmr+0x584>)
 8019e10:	681a      	ldr	r2, [r3, #0]
 8019e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e14:	6a1b      	ldr	r3, [r3, #32]
 8019e16:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8019e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e1a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8019e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e20:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8019e24:	4618      	mov	r0, r3
 8019e26:	4b7e      	ldr	r3, [pc, #504]	; (801a020 <tcp_slowtmr+0x58c>)
 8019e28:	fb03 f300 	mul.w	r3, r3, r0
 8019e2c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8019e2e:	497b      	ldr	r1, [pc, #492]	; (801a01c <tcp_slowtmr+0x588>)
 8019e30:	fba1 1303 	umull	r1, r3, r1, r3
 8019e34:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019e36:	429a      	cmp	r2, r3
 8019e38:	d911      	bls.n	8019e5e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8019e3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019e3c:	f004 fff4 	bl	801ee28 <tcp_keepalive>
 8019e40:	4603      	mov	r3, r0
 8019e42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8019e46:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d107      	bne.n	8019e5e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8019e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e50:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8019e54:	3301      	adds	r3, #1
 8019e56:	b2da      	uxtb	r2, r3
 8019e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e5a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8019e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	d011      	beq.n	8019e8a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8019e66:	4b6c      	ldr	r3, [pc, #432]	; (801a018 <tcp_slowtmr+0x584>)
 8019e68:	681a      	ldr	r2, [r3, #0]
 8019e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e6c:	6a1b      	ldr	r3, [r3, #32]
 8019e6e:	1ad2      	subs	r2, r2, r3
 8019e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e72:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8019e76:	4619      	mov	r1, r3
 8019e78:	460b      	mov	r3, r1
 8019e7a:	005b      	lsls	r3, r3, #1
 8019e7c:	440b      	add	r3, r1
 8019e7e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8019e80:	429a      	cmp	r2, r3
 8019e82:	d302      	bcc.n	8019e8a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8019e84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019e86:	f000 fea5 	bl	801abd4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8019e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e8c:	7d1b      	ldrb	r3, [r3, #20]
 8019e8e:	2b03      	cmp	r3, #3
 8019e90:	d10b      	bne.n	8019eaa <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019e92:	4b61      	ldr	r3, [pc, #388]	; (801a018 <tcp_slowtmr+0x584>)
 8019e94:	681a      	ldr	r2, [r3, #0]
 8019e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e98:	6a1b      	ldr	r3, [r3, #32]
 8019e9a:	1ad3      	subs	r3, r2, r3
 8019e9c:	2b28      	cmp	r3, #40	; 0x28
 8019e9e:	d904      	bls.n	8019eaa <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8019ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019ea4:	3301      	adds	r3, #1
 8019ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8019eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019eac:	7d1b      	ldrb	r3, [r3, #20]
 8019eae:	2b09      	cmp	r3, #9
 8019eb0:	d10b      	bne.n	8019eca <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8019eb2:	4b59      	ldr	r3, [pc, #356]	; (801a018 <tcp_slowtmr+0x584>)
 8019eb4:	681a      	ldr	r2, [r3, #0]
 8019eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019eb8:	6a1b      	ldr	r3, [r3, #32]
 8019eba:	1ad3      	subs	r3, r2, r3
 8019ebc:	2bf0      	cmp	r3, #240	; 0xf0
 8019ebe:	d904      	bls.n	8019eca <tcp_slowtmr+0x436>
        ++pcb_remove;
 8019ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019ec4:	3301      	adds	r3, #1
 8019ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8019eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d060      	beq.n	8019f94 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8019ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019ed8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8019eda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019edc:	f000 fcc6 	bl	801a86c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8019ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	d010      	beq.n	8019f08 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8019ee6:	4b4f      	ldr	r3, [pc, #316]	; (801a024 <tcp_slowtmr+0x590>)
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019eec:	429a      	cmp	r2, r3
 8019eee:	d106      	bne.n	8019efe <tcp_slowtmr+0x46a>
 8019ef0:	4b4d      	ldr	r3, [pc, #308]	; (801a028 <tcp_slowtmr+0x594>)
 8019ef2:	f240 526d 	movw	r2, #1389	; 0x56d
 8019ef6:	494d      	ldr	r1, [pc, #308]	; (801a02c <tcp_slowtmr+0x598>)
 8019ef8:	484d      	ldr	r0, [pc, #308]	; (801a030 <tcp_slowtmr+0x59c>)
 8019efa:	f00c fd4d 	bl	8026998 <iprintf>
        prev->next = pcb->next;
 8019efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f00:	68da      	ldr	r2, [r3, #12]
 8019f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f04:	60da      	str	r2, [r3, #12]
 8019f06:	e00f      	b.n	8019f28 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8019f08:	4b46      	ldr	r3, [pc, #280]	; (801a024 <tcp_slowtmr+0x590>)
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f0e:	429a      	cmp	r2, r3
 8019f10:	d006      	beq.n	8019f20 <tcp_slowtmr+0x48c>
 8019f12:	4b45      	ldr	r3, [pc, #276]	; (801a028 <tcp_slowtmr+0x594>)
 8019f14:	f240 5271 	movw	r2, #1393	; 0x571
 8019f18:	4946      	ldr	r1, [pc, #280]	; (801a034 <tcp_slowtmr+0x5a0>)
 8019f1a:	4845      	ldr	r0, [pc, #276]	; (801a030 <tcp_slowtmr+0x59c>)
 8019f1c:	f00c fd3c 	bl	8026998 <iprintf>
        tcp_active_pcbs = pcb->next;
 8019f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f22:	68db      	ldr	r3, [r3, #12]
 8019f24:	4a3f      	ldr	r2, [pc, #252]	; (801a024 <tcp_slowtmr+0x590>)
 8019f26:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8019f28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d013      	beq.n	8019f58 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8019f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f32:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8019f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f36:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8019f38:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8019f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f3c:	3304      	adds	r3, #4
 8019f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f40:	8ad2      	ldrh	r2, [r2, #22]
 8019f42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019f44:	8b09      	ldrh	r1, [r1, #24]
 8019f46:	9102      	str	r1, [sp, #8]
 8019f48:	9201      	str	r2, [sp, #4]
 8019f4a:	9300      	str	r3, [sp, #0]
 8019f4c:	462b      	mov	r3, r5
 8019f4e:	4622      	mov	r2, r4
 8019f50:	4601      	mov	r1, r0
 8019f52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019f54:	f004 feb6 	bl	801ecc4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8019f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f5a:	691b      	ldr	r3, [r3, #16]
 8019f5c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8019f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f60:	7d1b      	ldrb	r3, [r3, #20]
 8019f62:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8019f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f66:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8019f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f6a:	68db      	ldr	r3, [r3, #12]
 8019f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8019f6e:	6838      	ldr	r0, [r7, #0]
 8019f70:	f7fe fee0 	bl	8018d34 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8019f74:	4b30      	ldr	r3, [pc, #192]	; (801a038 <tcp_slowtmr+0x5a4>)
 8019f76:	2200      	movs	r2, #0
 8019f78:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8019f7a:	68fb      	ldr	r3, [r7, #12]
 8019f7c:	2b00      	cmp	r3, #0
 8019f7e:	d004      	beq.n	8019f8a <tcp_slowtmr+0x4f6>
 8019f80:	68fb      	ldr	r3, [r7, #12]
 8019f82:	f06f 010c 	mvn.w	r1, #12
 8019f86:	68b8      	ldr	r0, [r7, #8]
 8019f88:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8019f8a:	4b2b      	ldr	r3, [pc, #172]	; (801a038 <tcp_slowtmr+0x5a4>)
 8019f8c:	781b      	ldrb	r3, [r3, #0]
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d037      	beq.n	801a002 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8019f92:	e590      	b.n	8019ab6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8019f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f96:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8019f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f9a:	68db      	ldr	r3, [r3, #12]
 8019f9c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8019f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fa0:	7f1b      	ldrb	r3, [r3, #28]
 8019fa2:	3301      	adds	r3, #1
 8019fa4:	b2da      	uxtb	r2, r3
 8019fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fa8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8019faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fac:	7f1a      	ldrb	r2, [r3, #28]
 8019fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fb0:	7f5b      	ldrb	r3, [r3, #29]
 8019fb2:	429a      	cmp	r2, r3
 8019fb4:	d325      	bcc.n	801a002 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8019fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fb8:	2200      	movs	r2, #0
 8019fba:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8019fbc:	4b1e      	ldr	r3, [pc, #120]	; (801a038 <tcp_slowtmr+0x5a4>)
 8019fbe:	2200      	movs	r2, #0
 8019fc0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8019fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d00b      	beq.n	8019fe4 <tcp_slowtmr+0x550>
 8019fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019fd4:	6912      	ldr	r2, [r2, #16]
 8019fd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019fd8:	4610      	mov	r0, r2
 8019fda:	4798      	blx	r3
 8019fdc:	4603      	mov	r3, r0
 8019fde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8019fe2:	e002      	b.n	8019fea <tcp_slowtmr+0x556>
 8019fe4:	2300      	movs	r3, #0
 8019fe6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8019fea:	4b13      	ldr	r3, [pc, #76]	; (801a038 <tcp_slowtmr+0x5a4>)
 8019fec:	781b      	ldrb	r3, [r3, #0]
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	d000      	beq.n	8019ff4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8019ff2:	e560      	b.n	8019ab6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8019ff4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	d102      	bne.n	801a002 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8019ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019ffe:	f004 f89d 	bl	801e13c <tcp_output>
  while (pcb != NULL) {
 801a002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a004:	2b00      	cmp	r3, #0
 801a006:	f47f ad5c 	bne.w	8019ac2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801a00a:	2300      	movs	r3, #0
 801a00c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801a00e:	4b0b      	ldr	r3, [pc, #44]	; (801a03c <tcp_slowtmr+0x5a8>)
 801a010:	681b      	ldr	r3, [r3, #0]
 801a012:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801a014:	e067      	b.n	801a0e6 <tcp_slowtmr+0x652>
 801a016:	bf00      	nop
 801a018:	20019ff8 	.word	0x20019ff8
 801a01c:	10624dd3 	.word	0x10624dd3
 801a020:	000124f8 	.word	0x000124f8
 801a024:	20019ff4 	.word	0x20019ff4
 801a028:	08029714 	.word	0x08029714
 801a02c:	08029b4c 	.word	0x08029b4c
 801a030:	08029758 	.word	0x08029758
 801a034:	08029b78 	.word	0x08029b78
 801a038:	20019ff0 	.word	0x20019ff0
 801a03c:	2001a004 	.word	0x2001a004
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801a040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a042:	7d1b      	ldrb	r3, [r3, #20]
 801a044:	2b0a      	cmp	r3, #10
 801a046:	d006      	beq.n	801a056 <tcp_slowtmr+0x5c2>
 801a048:	4b2a      	ldr	r3, [pc, #168]	; (801a0f4 <tcp_slowtmr+0x660>)
 801a04a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801a04e:	492a      	ldr	r1, [pc, #168]	; (801a0f8 <tcp_slowtmr+0x664>)
 801a050:	482a      	ldr	r0, [pc, #168]	; (801a0fc <tcp_slowtmr+0x668>)
 801a052:	f00c fca1 	bl	8026998 <iprintf>
    pcb_remove = 0;
 801a056:	2300      	movs	r3, #0
 801a058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801a05c:	4b28      	ldr	r3, [pc, #160]	; (801a100 <tcp_slowtmr+0x66c>)
 801a05e:	681a      	ldr	r2, [r3, #0]
 801a060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a062:	6a1b      	ldr	r3, [r3, #32]
 801a064:	1ad3      	subs	r3, r2, r3
 801a066:	2bf0      	cmp	r3, #240	; 0xf0
 801a068:	d904      	bls.n	801a074 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801a06a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a06e:	3301      	adds	r3, #1
 801a070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801a074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a078:	2b00      	cmp	r3, #0
 801a07a:	d02f      	beq.n	801a0dc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801a07c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a07e:	f000 fbf5 	bl	801a86c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801a082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a084:	2b00      	cmp	r3, #0
 801a086:	d010      	beq.n	801a0aa <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801a088:	4b1e      	ldr	r3, [pc, #120]	; (801a104 <tcp_slowtmr+0x670>)
 801a08a:	681b      	ldr	r3, [r3, #0]
 801a08c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a08e:	429a      	cmp	r2, r3
 801a090:	d106      	bne.n	801a0a0 <tcp_slowtmr+0x60c>
 801a092:	4b18      	ldr	r3, [pc, #96]	; (801a0f4 <tcp_slowtmr+0x660>)
 801a094:	f240 52af 	movw	r2, #1455	; 0x5af
 801a098:	491b      	ldr	r1, [pc, #108]	; (801a108 <tcp_slowtmr+0x674>)
 801a09a:	4818      	ldr	r0, [pc, #96]	; (801a0fc <tcp_slowtmr+0x668>)
 801a09c:	f00c fc7c 	bl	8026998 <iprintf>
        prev->next = pcb->next;
 801a0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0a2:	68da      	ldr	r2, [r3, #12]
 801a0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0a6:	60da      	str	r2, [r3, #12]
 801a0a8:	e00f      	b.n	801a0ca <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801a0aa:	4b16      	ldr	r3, [pc, #88]	; (801a104 <tcp_slowtmr+0x670>)
 801a0ac:	681b      	ldr	r3, [r3, #0]
 801a0ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a0b0:	429a      	cmp	r2, r3
 801a0b2:	d006      	beq.n	801a0c2 <tcp_slowtmr+0x62e>
 801a0b4:	4b0f      	ldr	r3, [pc, #60]	; (801a0f4 <tcp_slowtmr+0x660>)
 801a0b6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801a0ba:	4914      	ldr	r1, [pc, #80]	; (801a10c <tcp_slowtmr+0x678>)
 801a0bc:	480f      	ldr	r0, [pc, #60]	; (801a0fc <tcp_slowtmr+0x668>)
 801a0be:	f00c fc6b 	bl	8026998 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801a0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0c4:	68db      	ldr	r3, [r3, #12]
 801a0c6:	4a0f      	ldr	r2, [pc, #60]	; (801a104 <tcp_slowtmr+0x670>)
 801a0c8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801a0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0cc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801a0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0d0:	68db      	ldr	r3, [r3, #12]
 801a0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801a0d4:	69f8      	ldr	r0, [r7, #28]
 801a0d6:	f7fe fe2d 	bl	8018d34 <tcp_free>
 801a0da:	e004      	b.n	801a0e6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801a0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0de:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801a0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0e2:	68db      	ldr	r3, [r3, #12]
 801a0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801a0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d1a9      	bne.n	801a040 <tcp_slowtmr+0x5ac>
    }
  }
}
 801a0ec:	bf00      	nop
 801a0ee:	3730      	adds	r7, #48	; 0x30
 801a0f0:	46bd      	mov	sp, r7
 801a0f2:	bdb0      	pop	{r4, r5, r7, pc}
 801a0f4:	08029714 	.word	0x08029714
 801a0f8:	08029ba4 	.word	0x08029ba4
 801a0fc:	08029758 	.word	0x08029758
 801a100:	20019ff8 	.word	0x20019ff8
 801a104:	2001a004 	.word	0x2001a004
 801a108:	08029bd4 	.word	0x08029bd4
 801a10c:	08029bfc 	.word	0x08029bfc

0801a110 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801a110:	b580      	push	{r7, lr}
 801a112:	b082      	sub	sp, #8
 801a114:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801a116:	4b2d      	ldr	r3, [pc, #180]	; (801a1cc <tcp_fasttmr+0xbc>)
 801a118:	781b      	ldrb	r3, [r3, #0]
 801a11a:	3301      	adds	r3, #1
 801a11c:	b2da      	uxtb	r2, r3
 801a11e:	4b2b      	ldr	r3, [pc, #172]	; (801a1cc <tcp_fasttmr+0xbc>)
 801a120:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801a122:	4b2b      	ldr	r3, [pc, #172]	; (801a1d0 <tcp_fasttmr+0xc0>)
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801a128:	e048      	b.n	801a1bc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	7f9a      	ldrb	r2, [r3, #30]
 801a12e:	4b27      	ldr	r3, [pc, #156]	; (801a1cc <tcp_fasttmr+0xbc>)
 801a130:	781b      	ldrb	r3, [r3, #0]
 801a132:	429a      	cmp	r2, r3
 801a134:	d03f      	beq.n	801a1b6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801a136:	4b25      	ldr	r3, [pc, #148]	; (801a1cc <tcp_fasttmr+0xbc>)
 801a138:	781a      	ldrb	r2, [r3, #0]
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	8b5b      	ldrh	r3, [r3, #26]
 801a142:	f003 0301 	and.w	r3, r3, #1
 801a146:	2b00      	cmp	r3, #0
 801a148:	d010      	beq.n	801a16c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	8b5b      	ldrh	r3, [r3, #26]
 801a14e:	f043 0302 	orr.w	r3, r3, #2
 801a152:	b29a      	uxth	r2, r3
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801a158:	6878      	ldr	r0, [r7, #4]
 801a15a:	f003 ffef 	bl	801e13c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	8b5b      	ldrh	r3, [r3, #26]
 801a162:	f023 0303 	bic.w	r3, r3, #3
 801a166:	b29a      	uxth	r2, r3
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	8b5b      	ldrh	r3, [r3, #26]
 801a170:	f003 0308 	and.w	r3, r3, #8
 801a174:	2b00      	cmp	r3, #0
 801a176:	d009      	beq.n	801a18c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	8b5b      	ldrh	r3, [r3, #26]
 801a17c:	f023 0308 	bic.w	r3, r3, #8
 801a180:	b29a      	uxth	r2, r3
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801a186:	6878      	ldr	r0, [r7, #4]
 801a188:	f7fe ff64 	bl	8019054 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	68db      	ldr	r3, [r3, #12]
 801a190:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801a192:	687b      	ldr	r3, [r7, #4]
 801a194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a196:	2b00      	cmp	r3, #0
 801a198:	d00a      	beq.n	801a1b0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801a19a:	4b0e      	ldr	r3, [pc, #56]	; (801a1d4 <tcp_fasttmr+0xc4>)
 801a19c:	2200      	movs	r2, #0
 801a19e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801a1a0:	6878      	ldr	r0, [r7, #4]
 801a1a2:	f000 f819 	bl	801a1d8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801a1a6:	4b0b      	ldr	r3, [pc, #44]	; (801a1d4 <tcp_fasttmr+0xc4>)
 801a1a8:	781b      	ldrb	r3, [r3, #0]
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	d000      	beq.n	801a1b0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801a1ae:	e7b8      	b.n	801a122 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801a1b0:	683b      	ldr	r3, [r7, #0]
 801a1b2:	607b      	str	r3, [r7, #4]
 801a1b4:	e002      	b.n	801a1bc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	68db      	ldr	r3, [r3, #12]
 801a1ba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d1b3      	bne.n	801a12a <tcp_fasttmr+0x1a>
    }
  }
}
 801a1c2:	bf00      	nop
 801a1c4:	3708      	adds	r7, #8
 801a1c6:	46bd      	mov	sp, r7
 801a1c8:	bd80      	pop	{r7, pc}
 801a1ca:	bf00      	nop
 801a1cc:	200131c2 	.word	0x200131c2
 801a1d0:	20019ff4 	.word	0x20019ff4
 801a1d4:	20019ff0 	.word	0x20019ff0

0801a1d8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801a1d8:	b590      	push	{r4, r7, lr}
 801a1da:	b085      	sub	sp, #20
 801a1dc:	af00      	add	r7, sp, #0
 801a1de:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	d109      	bne.n	801a1fa <tcp_process_refused_data+0x22>
 801a1e6:	4b37      	ldr	r3, [pc, #220]	; (801a2c4 <tcp_process_refused_data+0xec>)
 801a1e8:	f240 6209 	movw	r2, #1545	; 0x609
 801a1ec:	4936      	ldr	r1, [pc, #216]	; (801a2c8 <tcp_process_refused_data+0xf0>)
 801a1ee:	4837      	ldr	r0, [pc, #220]	; (801a2cc <tcp_process_refused_data+0xf4>)
 801a1f0:	f00c fbd2 	bl	8026998 <iprintf>
 801a1f4:	f06f 030f 	mvn.w	r3, #15
 801a1f8:	e060      	b.n	801a2bc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a1fe:	7b5b      	ldrb	r3, [r3, #13]
 801a200:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a206:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	2200      	movs	r2, #0
 801a20c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a214:	2b00      	cmp	r3, #0
 801a216:	d00b      	beq.n	801a230 <tcp_process_refused_data+0x58>
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	6918      	ldr	r0, [r3, #16]
 801a222:	2300      	movs	r3, #0
 801a224:	68ba      	ldr	r2, [r7, #8]
 801a226:	6879      	ldr	r1, [r7, #4]
 801a228:	47a0      	blx	r4
 801a22a:	4603      	mov	r3, r0
 801a22c:	73fb      	strb	r3, [r7, #15]
 801a22e:	e007      	b.n	801a240 <tcp_process_refused_data+0x68>
 801a230:	2300      	movs	r3, #0
 801a232:	68ba      	ldr	r2, [r7, #8]
 801a234:	6879      	ldr	r1, [r7, #4]
 801a236:	2000      	movs	r0, #0
 801a238:	f000 f8a2 	bl	801a380 <tcp_recv_null>
 801a23c:	4603      	mov	r3, r0
 801a23e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801a240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a244:	2b00      	cmp	r3, #0
 801a246:	d12a      	bne.n	801a29e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801a248:	7bbb      	ldrb	r3, [r7, #14]
 801a24a:	f003 0320 	and.w	r3, r3, #32
 801a24e:	2b00      	cmp	r3, #0
 801a250:	d033      	beq.n	801a2ba <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a25a:	d005      	beq.n	801a268 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a260:	3301      	adds	r3, #1
 801a262:	b29a      	uxth	r2, r3
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d00b      	beq.n	801a28a <tcp_process_refused_data+0xb2>
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	6918      	ldr	r0, [r3, #16]
 801a27c:	2300      	movs	r3, #0
 801a27e:	2200      	movs	r2, #0
 801a280:	6879      	ldr	r1, [r7, #4]
 801a282:	47a0      	blx	r4
 801a284:	4603      	mov	r3, r0
 801a286:	73fb      	strb	r3, [r7, #15]
 801a288:	e001      	b.n	801a28e <tcp_process_refused_data+0xb6>
 801a28a:	2300      	movs	r3, #0
 801a28c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801a28e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a292:	f113 0f0d 	cmn.w	r3, #13
 801a296:	d110      	bne.n	801a2ba <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801a298:	f06f 030c 	mvn.w	r3, #12
 801a29c:	e00e      	b.n	801a2bc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801a29e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a2a2:	f113 0f0d 	cmn.w	r3, #13
 801a2a6:	d102      	bne.n	801a2ae <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801a2a8:	f06f 030c 	mvn.w	r3, #12
 801a2ac:	e006      	b.n	801a2bc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	68ba      	ldr	r2, [r7, #8]
 801a2b2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801a2b4:	f06f 0304 	mvn.w	r3, #4
 801a2b8:	e000      	b.n	801a2bc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801a2ba:	2300      	movs	r3, #0
}
 801a2bc:	4618      	mov	r0, r3
 801a2be:	3714      	adds	r7, #20
 801a2c0:	46bd      	mov	sp, r7
 801a2c2:	bd90      	pop	{r4, r7, pc}
 801a2c4:	08029714 	.word	0x08029714
 801a2c8:	08029c24 	.word	0x08029c24
 801a2cc:	08029758 	.word	0x08029758

0801a2d0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801a2d0:	b580      	push	{r7, lr}
 801a2d2:	b084      	sub	sp, #16
 801a2d4:	af00      	add	r7, sp, #0
 801a2d6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801a2d8:	e007      	b.n	801a2ea <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	681b      	ldr	r3, [r3, #0]
 801a2de:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801a2e0:	6878      	ldr	r0, [r7, #4]
 801a2e2:	f000 f809 	bl	801a2f8 <tcp_seg_free>
    seg = next;
 801a2e6:	68fb      	ldr	r3, [r7, #12]
 801a2e8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	d1f4      	bne.n	801a2da <tcp_segs_free+0xa>
  }
}
 801a2f0:	bf00      	nop
 801a2f2:	3710      	adds	r7, #16
 801a2f4:	46bd      	mov	sp, r7
 801a2f6:	bd80      	pop	{r7, pc}

0801a2f8 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801a2f8:	b580      	push	{r7, lr}
 801a2fa:	b082      	sub	sp, #8
 801a2fc:	af00      	add	r7, sp, #0
 801a2fe:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	2b00      	cmp	r3, #0
 801a304:	d00c      	beq.n	801a320 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	685b      	ldr	r3, [r3, #4]
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	d004      	beq.n	801a318 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	685b      	ldr	r3, [r3, #4]
 801a312:	4618      	mov	r0, r3
 801a314:	f7fe fa52 	bl	80187bc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801a318:	6879      	ldr	r1, [r7, #4]
 801a31a:	2003      	movs	r0, #3
 801a31c:	f7fd fba0 	bl	8017a60 <memp_free>
  }
}
 801a320:	bf00      	nop
 801a322:	3708      	adds	r7, #8
 801a324:	46bd      	mov	sp, r7
 801a326:	bd80      	pop	{r7, pc}

0801a328 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801a328:	b580      	push	{r7, lr}
 801a32a:	b084      	sub	sp, #16
 801a32c:	af00      	add	r7, sp, #0
 801a32e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	2b00      	cmp	r3, #0
 801a334:	d106      	bne.n	801a344 <tcp_seg_copy+0x1c>
 801a336:	4b0f      	ldr	r3, [pc, #60]	; (801a374 <tcp_seg_copy+0x4c>)
 801a338:	f240 6282 	movw	r2, #1666	; 0x682
 801a33c:	490e      	ldr	r1, [pc, #56]	; (801a378 <tcp_seg_copy+0x50>)
 801a33e:	480f      	ldr	r0, [pc, #60]	; (801a37c <tcp_seg_copy+0x54>)
 801a340:	f00c fb2a 	bl	8026998 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801a344:	2003      	movs	r0, #3
 801a346:	f7fd fb39 	bl	80179bc <memp_malloc>
 801a34a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801a34c:	68fb      	ldr	r3, [r7, #12]
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d101      	bne.n	801a356 <tcp_seg_copy+0x2e>
    return NULL;
 801a352:	2300      	movs	r3, #0
 801a354:	e00a      	b.n	801a36c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801a356:	2210      	movs	r2, #16
 801a358:	6879      	ldr	r1, [r7, #4]
 801a35a:	68f8      	ldr	r0, [r7, #12]
 801a35c:	f00c fa61 	bl	8026822 <memcpy>
  pbuf_ref(cseg->p);
 801a360:	68fb      	ldr	r3, [r7, #12]
 801a362:	685b      	ldr	r3, [r3, #4]
 801a364:	4618      	mov	r0, r3
 801a366:	f7fe facf 	bl	8018908 <pbuf_ref>
  return cseg;
 801a36a:	68fb      	ldr	r3, [r7, #12]
}
 801a36c:	4618      	mov	r0, r3
 801a36e:	3710      	adds	r7, #16
 801a370:	46bd      	mov	sp, r7
 801a372:	bd80      	pop	{r7, pc}
 801a374:	08029714 	.word	0x08029714
 801a378:	08029c68 	.word	0x08029c68
 801a37c:	08029758 	.word	0x08029758

0801a380 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801a380:	b580      	push	{r7, lr}
 801a382:	b084      	sub	sp, #16
 801a384:	af00      	add	r7, sp, #0
 801a386:	60f8      	str	r0, [r7, #12]
 801a388:	60b9      	str	r1, [r7, #8]
 801a38a:	607a      	str	r2, [r7, #4]
 801a38c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801a38e:	68bb      	ldr	r3, [r7, #8]
 801a390:	2b00      	cmp	r3, #0
 801a392:	d109      	bne.n	801a3a8 <tcp_recv_null+0x28>
 801a394:	4b12      	ldr	r3, [pc, #72]	; (801a3e0 <tcp_recv_null+0x60>)
 801a396:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801a39a:	4912      	ldr	r1, [pc, #72]	; (801a3e4 <tcp_recv_null+0x64>)
 801a39c:	4812      	ldr	r0, [pc, #72]	; (801a3e8 <tcp_recv_null+0x68>)
 801a39e:	f00c fafb 	bl	8026998 <iprintf>
 801a3a2:	f06f 030f 	mvn.w	r3, #15
 801a3a6:	e016      	b.n	801a3d6 <tcp_recv_null+0x56>

  if (p != NULL) {
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d009      	beq.n	801a3c2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	891b      	ldrh	r3, [r3, #8]
 801a3b2:	4619      	mov	r1, r3
 801a3b4:	68b8      	ldr	r0, [r7, #8]
 801a3b6:	f7ff f9bf 	bl	8019738 <tcp_recved>
    pbuf_free(p);
 801a3ba:	6878      	ldr	r0, [r7, #4]
 801a3bc:	f7fe f9fe 	bl	80187bc <pbuf_free>
 801a3c0:	e008      	b.n	801a3d4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801a3c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	d104      	bne.n	801a3d4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801a3ca:	68b8      	ldr	r0, [r7, #8]
 801a3cc:	f7fe fea8 	bl	8019120 <tcp_close>
 801a3d0:	4603      	mov	r3, r0
 801a3d2:	e000      	b.n	801a3d6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801a3d4:	2300      	movs	r3, #0
}
 801a3d6:	4618      	mov	r0, r3
 801a3d8:	3710      	adds	r7, #16
 801a3da:	46bd      	mov	sp, r7
 801a3dc:	bd80      	pop	{r7, pc}
 801a3de:	bf00      	nop
 801a3e0:	08029714 	.word	0x08029714
 801a3e4:	08029c84 	.word	0x08029c84
 801a3e8:	08029758 	.word	0x08029758

0801a3ec <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801a3ec:	b580      	push	{r7, lr}
 801a3ee:	b086      	sub	sp, #24
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	4603      	mov	r3, r0
 801a3f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801a3f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	db01      	blt.n	801a402 <tcp_kill_prio+0x16>
 801a3fe:	79fb      	ldrb	r3, [r7, #7]
 801a400:	e000      	b.n	801a404 <tcp_kill_prio+0x18>
 801a402:	237f      	movs	r3, #127	; 0x7f
 801a404:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801a406:	7afb      	ldrb	r3, [r7, #11]
 801a408:	2b00      	cmp	r3, #0
 801a40a:	d034      	beq.n	801a476 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801a40c:	7afb      	ldrb	r3, [r7, #11]
 801a40e:	3b01      	subs	r3, #1
 801a410:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801a412:	2300      	movs	r3, #0
 801a414:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801a416:	2300      	movs	r3, #0
 801a418:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a41a:	4b19      	ldr	r3, [pc, #100]	; (801a480 <tcp_kill_prio+0x94>)
 801a41c:	681b      	ldr	r3, [r3, #0]
 801a41e:	617b      	str	r3, [r7, #20]
 801a420:	e01f      	b.n	801a462 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801a422:	697b      	ldr	r3, [r7, #20]
 801a424:	7d5b      	ldrb	r3, [r3, #21]
 801a426:	7afa      	ldrb	r2, [r7, #11]
 801a428:	429a      	cmp	r2, r3
 801a42a:	d80c      	bhi.n	801a446 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801a42c:	697b      	ldr	r3, [r7, #20]
 801a42e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801a430:	7afa      	ldrb	r2, [r7, #11]
 801a432:	429a      	cmp	r2, r3
 801a434:	d112      	bne.n	801a45c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801a436:	4b13      	ldr	r3, [pc, #76]	; (801a484 <tcp_kill_prio+0x98>)
 801a438:	681a      	ldr	r2, [r3, #0]
 801a43a:	697b      	ldr	r3, [r7, #20]
 801a43c:	6a1b      	ldr	r3, [r3, #32]
 801a43e:	1ad3      	subs	r3, r2, r3
 801a440:	68fa      	ldr	r2, [r7, #12]
 801a442:	429a      	cmp	r2, r3
 801a444:	d80a      	bhi.n	801a45c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801a446:	4b0f      	ldr	r3, [pc, #60]	; (801a484 <tcp_kill_prio+0x98>)
 801a448:	681a      	ldr	r2, [r3, #0]
 801a44a:	697b      	ldr	r3, [r7, #20]
 801a44c:	6a1b      	ldr	r3, [r3, #32]
 801a44e:	1ad3      	subs	r3, r2, r3
 801a450:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801a452:	697b      	ldr	r3, [r7, #20]
 801a454:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801a456:	697b      	ldr	r3, [r7, #20]
 801a458:	7d5b      	ldrb	r3, [r3, #21]
 801a45a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a45c:	697b      	ldr	r3, [r7, #20]
 801a45e:	68db      	ldr	r3, [r3, #12]
 801a460:	617b      	str	r3, [r7, #20]
 801a462:	697b      	ldr	r3, [r7, #20]
 801a464:	2b00      	cmp	r3, #0
 801a466:	d1dc      	bne.n	801a422 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801a468:	693b      	ldr	r3, [r7, #16]
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	d004      	beq.n	801a478 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801a46e:	6938      	ldr	r0, [r7, #16]
 801a470:	f7fe ff9a 	bl	80193a8 <tcp_abort>
 801a474:	e000      	b.n	801a478 <tcp_kill_prio+0x8c>
    return;
 801a476:	bf00      	nop
  }
}
 801a478:	3718      	adds	r7, #24
 801a47a:	46bd      	mov	sp, r7
 801a47c:	bd80      	pop	{r7, pc}
 801a47e:	bf00      	nop
 801a480:	20019ff4 	.word	0x20019ff4
 801a484:	20019ff8 	.word	0x20019ff8

0801a488 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801a488:	b580      	push	{r7, lr}
 801a48a:	b086      	sub	sp, #24
 801a48c:	af00      	add	r7, sp, #0
 801a48e:	4603      	mov	r3, r0
 801a490:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801a492:	79fb      	ldrb	r3, [r7, #7]
 801a494:	2b08      	cmp	r3, #8
 801a496:	d009      	beq.n	801a4ac <tcp_kill_state+0x24>
 801a498:	79fb      	ldrb	r3, [r7, #7]
 801a49a:	2b09      	cmp	r3, #9
 801a49c:	d006      	beq.n	801a4ac <tcp_kill_state+0x24>
 801a49e:	4b1a      	ldr	r3, [pc, #104]	; (801a508 <tcp_kill_state+0x80>)
 801a4a0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801a4a4:	4919      	ldr	r1, [pc, #100]	; (801a50c <tcp_kill_state+0x84>)
 801a4a6:	481a      	ldr	r0, [pc, #104]	; (801a510 <tcp_kill_state+0x88>)
 801a4a8:	f00c fa76 	bl	8026998 <iprintf>

  inactivity = 0;
 801a4ac:	2300      	movs	r3, #0
 801a4ae:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801a4b0:	2300      	movs	r3, #0
 801a4b2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a4b4:	4b17      	ldr	r3, [pc, #92]	; (801a514 <tcp_kill_state+0x8c>)
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	617b      	str	r3, [r7, #20]
 801a4ba:	e017      	b.n	801a4ec <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801a4bc:	697b      	ldr	r3, [r7, #20]
 801a4be:	7d1b      	ldrb	r3, [r3, #20]
 801a4c0:	79fa      	ldrb	r2, [r7, #7]
 801a4c2:	429a      	cmp	r2, r3
 801a4c4:	d10f      	bne.n	801a4e6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801a4c6:	4b14      	ldr	r3, [pc, #80]	; (801a518 <tcp_kill_state+0x90>)
 801a4c8:	681a      	ldr	r2, [r3, #0]
 801a4ca:	697b      	ldr	r3, [r7, #20]
 801a4cc:	6a1b      	ldr	r3, [r3, #32]
 801a4ce:	1ad3      	subs	r3, r2, r3
 801a4d0:	68fa      	ldr	r2, [r7, #12]
 801a4d2:	429a      	cmp	r2, r3
 801a4d4:	d807      	bhi.n	801a4e6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801a4d6:	4b10      	ldr	r3, [pc, #64]	; (801a518 <tcp_kill_state+0x90>)
 801a4d8:	681a      	ldr	r2, [r3, #0]
 801a4da:	697b      	ldr	r3, [r7, #20]
 801a4dc:	6a1b      	ldr	r3, [r3, #32]
 801a4de:	1ad3      	subs	r3, r2, r3
 801a4e0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801a4e2:	697b      	ldr	r3, [r7, #20]
 801a4e4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a4e6:	697b      	ldr	r3, [r7, #20]
 801a4e8:	68db      	ldr	r3, [r3, #12]
 801a4ea:	617b      	str	r3, [r7, #20]
 801a4ec:	697b      	ldr	r3, [r7, #20]
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	d1e4      	bne.n	801a4bc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801a4f2:	693b      	ldr	r3, [r7, #16]
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	d003      	beq.n	801a500 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801a4f8:	2100      	movs	r1, #0
 801a4fa:	6938      	ldr	r0, [r7, #16]
 801a4fc:	f7fe fe96 	bl	801922c <tcp_abandon>
  }
}
 801a500:	bf00      	nop
 801a502:	3718      	adds	r7, #24
 801a504:	46bd      	mov	sp, r7
 801a506:	bd80      	pop	{r7, pc}
 801a508:	08029714 	.word	0x08029714
 801a50c:	08029ca0 	.word	0x08029ca0
 801a510:	08029758 	.word	0x08029758
 801a514:	20019ff4 	.word	0x20019ff4
 801a518:	20019ff8 	.word	0x20019ff8

0801a51c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801a51c:	b580      	push	{r7, lr}
 801a51e:	b084      	sub	sp, #16
 801a520:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801a522:	2300      	movs	r3, #0
 801a524:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801a526:	2300      	movs	r3, #0
 801a528:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a52a:	4b12      	ldr	r3, [pc, #72]	; (801a574 <tcp_kill_timewait+0x58>)
 801a52c:	681b      	ldr	r3, [r3, #0]
 801a52e:	60fb      	str	r3, [r7, #12]
 801a530:	e012      	b.n	801a558 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801a532:	4b11      	ldr	r3, [pc, #68]	; (801a578 <tcp_kill_timewait+0x5c>)
 801a534:	681a      	ldr	r2, [r3, #0]
 801a536:	68fb      	ldr	r3, [r7, #12]
 801a538:	6a1b      	ldr	r3, [r3, #32]
 801a53a:	1ad3      	subs	r3, r2, r3
 801a53c:	687a      	ldr	r2, [r7, #4]
 801a53e:	429a      	cmp	r2, r3
 801a540:	d807      	bhi.n	801a552 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801a542:	4b0d      	ldr	r3, [pc, #52]	; (801a578 <tcp_kill_timewait+0x5c>)
 801a544:	681a      	ldr	r2, [r3, #0]
 801a546:	68fb      	ldr	r3, [r7, #12]
 801a548:	6a1b      	ldr	r3, [r3, #32]
 801a54a:	1ad3      	subs	r3, r2, r3
 801a54c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801a54e:	68fb      	ldr	r3, [r7, #12]
 801a550:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a552:	68fb      	ldr	r3, [r7, #12]
 801a554:	68db      	ldr	r3, [r3, #12]
 801a556:	60fb      	str	r3, [r7, #12]
 801a558:	68fb      	ldr	r3, [r7, #12]
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d1e9      	bne.n	801a532 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801a55e:	68bb      	ldr	r3, [r7, #8]
 801a560:	2b00      	cmp	r3, #0
 801a562:	d002      	beq.n	801a56a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801a564:	68b8      	ldr	r0, [r7, #8]
 801a566:	f7fe ff1f 	bl	80193a8 <tcp_abort>
  }
}
 801a56a:	bf00      	nop
 801a56c:	3710      	adds	r7, #16
 801a56e:	46bd      	mov	sp, r7
 801a570:	bd80      	pop	{r7, pc}
 801a572:	bf00      	nop
 801a574:	2001a004 	.word	0x2001a004
 801a578:	20019ff8 	.word	0x20019ff8

0801a57c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801a57c:	b580      	push	{r7, lr}
 801a57e:	b082      	sub	sp, #8
 801a580:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801a582:	4b10      	ldr	r3, [pc, #64]	; (801a5c4 <tcp_handle_closepend+0x48>)
 801a584:	681b      	ldr	r3, [r3, #0]
 801a586:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801a588:	e014      	b.n	801a5b4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	68db      	ldr	r3, [r3, #12]
 801a58e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	8b5b      	ldrh	r3, [r3, #26]
 801a594:	f003 0308 	and.w	r3, r3, #8
 801a598:	2b00      	cmp	r3, #0
 801a59a:	d009      	beq.n	801a5b0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	8b5b      	ldrh	r3, [r3, #26]
 801a5a0:	f023 0308 	bic.w	r3, r3, #8
 801a5a4:	b29a      	uxth	r2, r3
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801a5aa:	6878      	ldr	r0, [r7, #4]
 801a5ac:	f7fe fd52 	bl	8019054 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801a5b0:	683b      	ldr	r3, [r7, #0]
 801a5b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	2b00      	cmp	r3, #0
 801a5b8:	d1e7      	bne.n	801a58a <tcp_handle_closepend+0xe>
  }
}
 801a5ba:	bf00      	nop
 801a5bc:	3708      	adds	r7, #8
 801a5be:	46bd      	mov	sp, r7
 801a5c0:	bd80      	pop	{r7, pc}
 801a5c2:	bf00      	nop
 801a5c4:	20019ff4 	.word	0x20019ff4

0801a5c8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801a5c8:	b580      	push	{r7, lr}
 801a5ca:	b084      	sub	sp, #16
 801a5cc:	af00      	add	r7, sp, #0
 801a5ce:	4603      	mov	r3, r0
 801a5d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a5d2:	2001      	movs	r0, #1
 801a5d4:	f7fd f9f2 	bl	80179bc <memp_malloc>
 801a5d8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801a5da:	68fb      	ldr	r3, [r7, #12]
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	d126      	bne.n	801a62e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801a5e0:	f7ff ffcc 	bl	801a57c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801a5e4:	f7ff ff9a 	bl	801a51c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a5e8:	2001      	movs	r0, #1
 801a5ea:	f7fd f9e7 	bl	80179bc <memp_malloc>
 801a5ee:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801a5f0:	68fb      	ldr	r3, [r7, #12]
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d11b      	bne.n	801a62e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801a5f6:	2009      	movs	r0, #9
 801a5f8:	f7ff ff46 	bl	801a488 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a5fc:	2001      	movs	r0, #1
 801a5fe:	f7fd f9dd 	bl	80179bc <memp_malloc>
 801a602:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801a604:	68fb      	ldr	r3, [r7, #12]
 801a606:	2b00      	cmp	r3, #0
 801a608:	d111      	bne.n	801a62e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801a60a:	2008      	movs	r0, #8
 801a60c:	f7ff ff3c 	bl	801a488 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a610:	2001      	movs	r0, #1
 801a612:	f7fd f9d3 	bl	80179bc <memp_malloc>
 801a616:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801a618:	68fb      	ldr	r3, [r7, #12]
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d107      	bne.n	801a62e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801a61e:	79fb      	ldrb	r3, [r7, #7]
 801a620:	4618      	mov	r0, r3
 801a622:	f7ff fee3 	bl	801a3ec <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a626:	2001      	movs	r0, #1
 801a628:	f7fd f9c8 	bl	80179bc <memp_malloc>
 801a62c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801a62e:	68fb      	ldr	r3, [r7, #12]
 801a630:	2b00      	cmp	r3, #0
 801a632:	d03f      	beq.n	801a6b4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801a634:	229c      	movs	r2, #156	; 0x9c
 801a636:	2100      	movs	r1, #0
 801a638:	68f8      	ldr	r0, [r7, #12]
 801a63a:	f00c f8fd 	bl	8026838 <memset>
    pcb->prio = prio;
 801a63e:	68fb      	ldr	r3, [r7, #12]
 801a640:	79fa      	ldrb	r2, [r7, #7]
 801a642:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801a644:	68fb      	ldr	r3, [r7, #12]
 801a646:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 801a64a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801a64e:	68fb      	ldr	r3, [r7, #12]
 801a650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a654:	855a      	strh	r2, [r3, #42]	; 0x2a
 801a656:	68fb      	ldr	r3, [r7, #12]
 801a658:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801a65a:	68fb      	ldr	r3, [r7, #12]
 801a65c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801a65e:	68fb      	ldr	r3, [r7, #12]
 801a660:	22ff      	movs	r2, #255	; 0xff
 801a662:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801a664:	68fb      	ldr	r3, [r7, #12]
 801a666:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801a66a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801a66c:	68fb      	ldr	r3, [r7, #12]
 801a66e:	2206      	movs	r2, #6
 801a670:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801a674:	68fb      	ldr	r3, [r7, #12]
 801a676:	2206      	movs	r2, #6
 801a678:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801a67a:	68fb      	ldr	r3, [r7, #12]
 801a67c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a680:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801a682:	68fb      	ldr	r3, [r7, #12]
 801a684:	2201      	movs	r2, #1
 801a686:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801a68a:	4b0d      	ldr	r3, [pc, #52]	; (801a6c0 <tcp_alloc+0xf8>)
 801a68c:	681a      	ldr	r2, [r3, #0]
 801a68e:	68fb      	ldr	r3, [r7, #12]
 801a690:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801a692:	4b0c      	ldr	r3, [pc, #48]	; (801a6c4 <tcp_alloc+0xfc>)
 801a694:	781a      	ldrb	r2, [r3, #0]
 801a696:	68fb      	ldr	r3, [r7, #12]
 801a698:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801a69a:	68fb      	ldr	r3, [r7, #12]
 801a69c:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 801a6a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801a6a4:	68fb      	ldr	r3, [r7, #12]
 801a6a6:	4a08      	ldr	r2, [pc, #32]	; (801a6c8 <tcp_alloc+0x100>)
 801a6a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801a6ac:	68fb      	ldr	r3, [r7, #12]
 801a6ae:	4a07      	ldr	r2, [pc, #28]	; (801a6cc <tcp_alloc+0x104>)
 801a6b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801a6b4:	68fb      	ldr	r3, [r7, #12]
}
 801a6b6:	4618      	mov	r0, r3
 801a6b8:	3710      	adds	r7, #16
 801a6ba:	46bd      	mov	sp, r7
 801a6bc:	bd80      	pop	{r7, pc}
 801a6be:	bf00      	nop
 801a6c0:	20019ff8 	.word	0x20019ff8
 801a6c4:	200131c2 	.word	0x200131c2
 801a6c8:	0801a381 	.word	0x0801a381
 801a6cc:	006ddd00 	.word	0x006ddd00

0801a6d0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801a6d0:	b580      	push	{r7, lr}
 801a6d2:	b084      	sub	sp, #16
 801a6d4:	af00      	add	r7, sp, #0
 801a6d6:	4603      	mov	r3, r0
 801a6d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801a6da:	2040      	movs	r0, #64	; 0x40
 801a6dc:	f7ff ff74 	bl	801a5c8 <tcp_alloc>
 801a6e0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801a6e2:	68fb      	ldr	r3, [r7, #12]
}
 801a6e4:	4618      	mov	r0, r3
 801a6e6:	3710      	adds	r7, #16
 801a6e8:	46bd      	mov	sp, r7
 801a6ea:	bd80      	pop	{r7, pc}

0801a6ec <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801a6ec:	b480      	push	{r7}
 801a6ee:	b083      	sub	sp, #12
 801a6f0:	af00      	add	r7, sp, #0
 801a6f2:	6078      	str	r0, [r7, #4]
 801a6f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d002      	beq.n	801a702 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	683a      	ldr	r2, [r7, #0]
 801a700:	611a      	str	r2, [r3, #16]
  }
}
 801a702:	bf00      	nop
 801a704:	370c      	adds	r7, #12
 801a706:	46bd      	mov	sp, r7
 801a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a70c:	4770      	bx	lr
	...

0801a710 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801a710:	b580      	push	{r7, lr}
 801a712:	b082      	sub	sp, #8
 801a714:	af00      	add	r7, sp, #0
 801a716:	6078      	str	r0, [r7, #4]
 801a718:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801a71a:	687b      	ldr	r3, [r7, #4]
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d00e      	beq.n	801a73e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	7d1b      	ldrb	r3, [r3, #20]
 801a724:	2b01      	cmp	r3, #1
 801a726:	d106      	bne.n	801a736 <tcp_recv+0x26>
 801a728:	4b07      	ldr	r3, [pc, #28]	; (801a748 <tcp_recv+0x38>)
 801a72a:	f240 72df 	movw	r2, #2015	; 0x7df
 801a72e:	4907      	ldr	r1, [pc, #28]	; (801a74c <tcp_recv+0x3c>)
 801a730:	4807      	ldr	r0, [pc, #28]	; (801a750 <tcp_recv+0x40>)
 801a732:	f00c f931 	bl	8026998 <iprintf>
    pcb->recv = recv;
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	683a      	ldr	r2, [r7, #0]
 801a73a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801a73e:	bf00      	nop
 801a740:	3708      	adds	r7, #8
 801a742:	46bd      	mov	sp, r7
 801a744:	bd80      	pop	{r7, pc}
 801a746:	bf00      	nop
 801a748:	08029714 	.word	0x08029714
 801a74c:	08029cb0 	.word	0x08029cb0
 801a750:	08029758 	.word	0x08029758

0801a754 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801a754:	b580      	push	{r7, lr}
 801a756:	b082      	sub	sp, #8
 801a758:	af00      	add	r7, sp, #0
 801a75a:	6078      	str	r0, [r7, #4]
 801a75c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	2b00      	cmp	r3, #0
 801a762:	d00e      	beq.n	801a782 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	7d1b      	ldrb	r3, [r3, #20]
 801a768:	2b01      	cmp	r3, #1
 801a76a:	d106      	bne.n	801a77a <tcp_sent+0x26>
 801a76c:	4b07      	ldr	r3, [pc, #28]	; (801a78c <tcp_sent+0x38>)
 801a76e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801a772:	4907      	ldr	r1, [pc, #28]	; (801a790 <tcp_sent+0x3c>)
 801a774:	4807      	ldr	r0, [pc, #28]	; (801a794 <tcp_sent+0x40>)
 801a776:	f00c f90f 	bl	8026998 <iprintf>
    pcb->sent = sent;
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	683a      	ldr	r2, [r7, #0]
 801a77e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801a782:	bf00      	nop
 801a784:	3708      	adds	r7, #8
 801a786:	46bd      	mov	sp, r7
 801a788:	bd80      	pop	{r7, pc}
 801a78a:	bf00      	nop
 801a78c:	08029714 	.word	0x08029714
 801a790:	08029cd8 	.word	0x08029cd8
 801a794:	08029758 	.word	0x08029758

0801a798 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801a798:	b580      	push	{r7, lr}
 801a79a:	b082      	sub	sp, #8
 801a79c:	af00      	add	r7, sp, #0
 801a79e:	6078      	str	r0, [r7, #4]
 801a7a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d00e      	beq.n	801a7c6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	7d1b      	ldrb	r3, [r3, #20]
 801a7ac:	2b01      	cmp	r3, #1
 801a7ae:	d106      	bne.n	801a7be <tcp_err+0x26>
 801a7b0:	4b07      	ldr	r3, [pc, #28]	; (801a7d0 <tcp_err+0x38>)
 801a7b2:	f640 020d 	movw	r2, #2061	; 0x80d
 801a7b6:	4907      	ldr	r1, [pc, #28]	; (801a7d4 <tcp_err+0x3c>)
 801a7b8:	4807      	ldr	r0, [pc, #28]	; (801a7d8 <tcp_err+0x40>)
 801a7ba:	f00c f8ed 	bl	8026998 <iprintf>
    pcb->errf = err;
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	683a      	ldr	r2, [r7, #0]
 801a7c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801a7c6:	bf00      	nop
 801a7c8:	3708      	adds	r7, #8
 801a7ca:	46bd      	mov	sp, r7
 801a7cc:	bd80      	pop	{r7, pc}
 801a7ce:	bf00      	nop
 801a7d0:	08029714 	.word	0x08029714
 801a7d4:	08029d00 	.word	0x08029d00
 801a7d8:	08029758 	.word	0x08029758

0801a7dc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801a7dc:	b480      	push	{r7}
 801a7de:	b085      	sub	sp, #20
 801a7e0:	af00      	add	r7, sp, #0
 801a7e2:	6078      	str	r0, [r7, #4]
 801a7e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	d008      	beq.n	801a7fe <tcp_accept+0x22>
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	7d1b      	ldrb	r3, [r3, #20]
 801a7f0:	2b01      	cmp	r3, #1
 801a7f2:	d104      	bne.n	801a7fe <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801a7f8:	68fb      	ldr	r3, [r7, #12]
 801a7fa:	683a      	ldr	r2, [r7, #0]
 801a7fc:	619a      	str	r2, [r3, #24]
  }
}
 801a7fe:	bf00      	nop
 801a800:	3714      	adds	r7, #20
 801a802:	46bd      	mov	sp, r7
 801a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a808:	4770      	bx	lr
	...

0801a80c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801a80c:	b580      	push	{r7, lr}
 801a80e:	b084      	sub	sp, #16
 801a810:	af00      	add	r7, sp, #0
 801a812:	60f8      	str	r0, [r7, #12]
 801a814:	60b9      	str	r1, [r7, #8]
 801a816:	4613      	mov	r3, r2
 801a818:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801a81a:	68fb      	ldr	r3, [r7, #12]
 801a81c:	2b00      	cmp	r3, #0
 801a81e:	d107      	bne.n	801a830 <tcp_poll+0x24>
 801a820:	4b0e      	ldr	r3, [pc, #56]	; (801a85c <tcp_poll+0x50>)
 801a822:	f640 023d 	movw	r2, #2109	; 0x83d
 801a826:	490e      	ldr	r1, [pc, #56]	; (801a860 <tcp_poll+0x54>)
 801a828:	480e      	ldr	r0, [pc, #56]	; (801a864 <tcp_poll+0x58>)
 801a82a:	f00c f8b5 	bl	8026998 <iprintf>
 801a82e:	e011      	b.n	801a854 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801a830:	68fb      	ldr	r3, [r7, #12]
 801a832:	7d1b      	ldrb	r3, [r3, #20]
 801a834:	2b01      	cmp	r3, #1
 801a836:	d106      	bne.n	801a846 <tcp_poll+0x3a>
 801a838:	4b08      	ldr	r3, [pc, #32]	; (801a85c <tcp_poll+0x50>)
 801a83a:	f640 023e 	movw	r2, #2110	; 0x83e
 801a83e:	490a      	ldr	r1, [pc, #40]	; (801a868 <tcp_poll+0x5c>)
 801a840:	4808      	ldr	r0, [pc, #32]	; (801a864 <tcp_poll+0x58>)
 801a842:	f00c f8a9 	bl	8026998 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801a846:	68fb      	ldr	r3, [r7, #12]
 801a848:	68ba      	ldr	r2, [r7, #8]
 801a84a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801a84e:	68fb      	ldr	r3, [r7, #12]
 801a850:	79fa      	ldrb	r2, [r7, #7]
 801a852:	775a      	strb	r2, [r3, #29]
}
 801a854:	3710      	adds	r7, #16
 801a856:	46bd      	mov	sp, r7
 801a858:	bd80      	pop	{r7, pc}
 801a85a:	bf00      	nop
 801a85c:	08029714 	.word	0x08029714
 801a860:	08029d28 	.word	0x08029d28
 801a864:	08029758 	.word	0x08029758
 801a868:	08029d40 	.word	0x08029d40

0801a86c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801a86c:	b580      	push	{r7, lr}
 801a86e:	b082      	sub	sp, #8
 801a870:	af00      	add	r7, sp, #0
 801a872:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	2b00      	cmp	r3, #0
 801a878:	d107      	bne.n	801a88a <tcp_pcb_purge+0x1e>
 801a87a:	4b21      	ldr	r3, [pc, #132]	; (801a900 <tcp_pcb_purge+0x94>)
 801a87c:	f640 0251 	movw	r2, #2129	; 0x851
 801a880:	4920      	ldr	r1, [pc, #128]	; (801a904 <tcp_pcb_purge+0x98>)
 801a882:	4821      	ldr	r0, [pc, #132]	; (801a908 <tcp_pcb_purge+0x9c>)
 801a884:	f00c f888 	bl	8026998 <iprintf>
 801a888:	e037      	b.n	801a8fa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	7d1b      	ldrb	r3, [r3, #20]
 801a88e:	2b00      	cmp	r3, #0
 801a890:	d033      	beq.n	801a8fa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801a892:	687b      	ldr	r3, [r7, #4]
 801a894:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801a896:	2b0a      	cmp	r3, #10
 801a898:	d02f      	beq.n	801a8fa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801a89e:	2b01      	cmp	r3, #1
 801a8a0:	d02b      	beq.n	801a8fa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	d007      	beq.n	801a8ba <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a8ae:	4618      	mov	r0, r3
 801a8b0:	f7fd ff84 	bl	80187bc <pbuf_free>
      pcb->refused_data = NULL;
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	2200      	movs	r2, #0
 801a8b8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a8be:	2b00      	cmp	r3, #0
 801a8c0:	d002      	beq.n	801a8c8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801a8c2:	6878      	ldr	r0, [r7, #4]
 801a8c4:	f000 f986 	bl	801abd4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a8ce:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a8d4:	4618      	mov	r0, r3
 801a8d6:	f7ff fcfb 	bl	801a2d0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a8de:	4618      	mov	r0, r3
 801a8e0:	f7ff fcf6 	bl	801a2d0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	2200      	movs	r2, #0
 801a8e8:	66da      	str	r2, [r3, #108]	; 0x6c
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801a8ee:	687b      	ldr	r3, [r7, #4]
 801a8f0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	2200      	movs	r2, #0
 801a8f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801a8fa:	3708      	adds	r7, #8
 801a8fc:	46bd      	mov	sp, r7
 801a8fe:	bd80      	pop	{r7, pc}
 801a900:	08029714 	.word	0x08029714
 801a904:	08029d60 	.word	0x08029d60
 801a908:	08029758 	.word	0x08029758

0801a90c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801a90c:	b580      	push	{r7, lr}
 801a90e:	b084      	sub	sp, #16
 801a910:	af00      	add	r7, sp, #0
 801a912:	6078      	str	r0, [r7, #4]
 801a914:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801a916:	683b      	ldr	r3, [r7, #0]
 801a918:	2b00      	cmp	r3, #0
 801a91a:	d106      	bne.n	801a92a <tcp_pcb_remove+0x1e>
 801a91c:	4b3e      	ldr	r3, [pc, #248]	; (801aa18 <tcp_pcb_remove+0x10c>)
 801a91e:	f640 0283 	movw	r2, #2179	; 0x883
 801a922:	493e      	ldr	r1, [pc, #248]	; (801aa1c <tcp_pcb_remove+0x110>)
 801a924:	483e      	ldr	r0, [pc, #248]	; (801aa20 <tcp_pcb_remove+0x114>)
 801a926:	f00c f837 	bl	8026998 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	d106      	bne.n	801a93e <tcp_pcb_remove+0x32>
 801a930:	4b39      	ldr	r3, [pc, #228]	; (801aa18 <tcp_pcb_remove+0x10c>)
 801a932:	f640 0284 	movw	r2, #2180	; 0x884
 801a936:	493b      	ldr	r1, [pc, #236]	; (801aa24 <tcp_pcb_remove+0x118>)
 801a938:	4839      	ldr	r0, [pc, #228]	; (801aa20 <tcp_pcb_remove+0x114>)
 801a93a:	f00c f82d 	bl	8026998 <iprintf>

  TCP_RMV(pcblist, pcb);
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	681b      	ldr	r3, [r3, #0]
 801a942:	683a      	ldr	r2, [r7, #0]
 801a944:	429a      	cmp	r2, r3
 801a946:	d105      	bne.n	801a954 <tcp_pcb_remove+0x48>
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	681b      	ldr	r3, [r3, #0]
 801a94c:	68da      	ldr	r2, [r3, #12]
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	601a      	str	r2, [r3, #0]
 801a952:	e013      	b.n	801a97c <tcp_pcb_remove+0x70>
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	681b      	ldr	r3, [r3, #0]
 801a958:	60fb      	str	r3, [r7, #12]
 801a95a:	e00c      	b.n	801a976 <tcp_pcb_remove+0x6a>
 801a95c:	68fb      	ldr	r3, [r7, #12]
 801a95e:	68db      	ldr	r3, [r3, #12]
 801a960:	683a      	ldr	r2, [r7, #0]
 801a962:	429a      	cmp	r2, r3
 801a964:	d104      	bne.n	801a970 <tcp_pcb_remove+0x64>
 801a966:	683b      	ldr	r3, [r7, #0]
 801a968:	68da      	ldr	r2, [r3, #12]
 801a96a:	68fb      	ldr	r3, [r7, #12]
 801a96c:	60da      	str	r2, [r3, #12]
 801a96e:	e005      	b.n	801a97c <tcp_pcb_remove+0x70>
 801a970:	68fb      	ldr	r3, [r7, #12]
 801a972:	68db      	ldr	r3, [r3, #12]
 801a974:	60fb      	str	r3, [r7, #12]
 801a976:	68fb      	ldr	r3, [r7, #12]
 801a978:	2b00      	cmp	r3, #0
 801a97a:	d1ef      	bne.n	801a95c <tcp_pcb_remove+0x50>
 801a97c:	683b      	ldr	r3, [r7, #0]
 801a97e:	2200      	movs	r2, #0
 801a980:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801a982:	6838      	ldr	r0, [r7, #0]
 801a984:	f7ff ff72 	bl	801a86c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801a988:	683b      	ldr	r3, [r7, #0]
 801a98a:	7d1b      	ldrb	r3, [r3, #20]
 801a98c:	2b0a      	cmp	r3, #10
 801a98e:	d013      	beq.n	801a9b8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801a990:	683b      	ldr	r3, [r7, #0]
 801a992:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801a994:	2b01      	cmp	r3, #1
 801a996:	d00f      	beq.n	801a9b8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801a998:	683b      	ldr	r3, [r7, #0]
 801a99a:	8b5b      	ldrh	r3, [r3, #26]
 801a99c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	d009      	beq.n	801a9b8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801a9a4:	683b      	ldr	r3, [r7, #0]
 801a9a6:	8b5b      	ldrh	r3, [r3, #26]
 801a9a8:	f043 0302 	orr.w	r3, r3, #2
 801a9ac:	b29a      	uxth	r2, r3
 801a9ae:	683b      	ldr	r3, [r7, #0]
 801a9b0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801a9b2:	6838      	ldr	r0, [r7, #0]
 801a9b4:	f003 fbc2 	bl	801e13c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801a9b8:	683b      	ldr	r3, [r7, #0]
 801a9ba:	7d1b      	ldrb	r3, [r3, #20]
 801a9bc:	2b01      	cmp	r3, #1
 801a9be:	d020      	beq.n	801aa02 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801a9c0:	683b      	ldr	r3, [r7, #0]
 801a9c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a9c4:	2b00      	cmp	r3, #0
 801a9c6:	d006      	beq.n	801a9d6 <tcp_pcb_remove+0xca>
 801a9c8:	4b13      	ldr	r3, [pc, #76]	; (801aa18 <tcp_pcb_remove+0x10c>)
 801a9ca:	f640 0293 	movw	r2, #2195	; 0x893
 801a9ce:	4916      	ldr	r1, [pc, #88]	; (801aa28 <tcp_pcb_remove+0x11c>)
 801a9d0:	4813      	ldr	r0, [pc, #76]	; (801aa20 <tcp_pcb_remove+0x114>)
 801a9d2:	f00b ffe1 	bl	8026998 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801a9d6:	683b      	ldr	r3, [r7, #0]
 801a9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d006      	beq.n	801a9ec <tcp_pcb_remove+0xe0>
 801a9de:	4b0e      	ldr	r3, [pc, #56]	; (801aa18 <tcp_pcb_remove+0x10c>)
 801a9e0:	f640 0294 	movw	r2, #2196	; 0x894
 801a9e4:	4911      	ldr	r1, [pc, #68]	; (801aa2c <tcp_pcb_remove+0x120>)
 801a9e6:	480e      	ldr	r0, [pc, #56]	; (801aa20 <tcp_pcb_remove+0x114>)
 801a9e8:	f00b ffd6 	bl	8026998 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801a9ec:	683b      	ldr	r3, [r7, #0]
 801a9ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	d006      	beq.n	801aa02 <tcp_pcb_remove+0xf6>
 801a9f4:	4b08      	ldr	r3, [pc, #32]	; (801aa18 <tcp_pcb_remove+0x10c>)
 801a9f6:	f640 0296 	movw	r2, #2198	; 0x896
 801a9fa:	490d      	ldr	r1, [pc, #52]	; (801aa30 <tcp_pcb_remove+0x124>)
 801a9fc:	4808      	ldr	r0, [pc, #32]	; (801aa20 <tcp_pcb_remove+0x114>)
 801a9fe:	f00b ffcb 	bl	8026998 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801aa02:	683b      	ldr	r3, [r7, #0]
 801aa04:	2200      	movs	r2, #0
 801aa06:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801aa08:	683b      	ldr	r3, [r7, #0]
 801aa0a:	2200      	movs	r2, #0
 801aa0c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801aa0e:	bf00      	nop
 801aa10:	3710      	adds	r7, #16
 801aa12:	46bd      	mov	sp, r7
 801aa14:	bd80      	pop	{r7, pc}
 801aa16:	bf00      	nop
 801aa18:	08029714 	.word	0x08029714
 801aa1c:	08029d7c 	.word	0x08029d7c
 801aa20:	08029758 	.word	0x08029758
 801aa24:	08029d98 	.word	0x08029d98
 801aa28:	08029db8 	.word	0x08029db8
 801aa2c:	08029dd0 	.word	0x08029dd0
 801aa30:	08029dec 	.word	0x08029dec

0801aa34 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801aa34:	b580      	push	{r7, lr}
 801aa36:	b082      	sub	sp, #8
 801aa38:	af00      	add	r7, sp, #0
 801aa3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	2b00      	cmp	r3, #0
 801aa40:	d106      	bne.n	801aa50 <tcp_next_iss+0x1c>
 801aa42:	4b0a      	ldr	r3, [pc, #40]	; (801aa6c <tcp_next_iss+0x38>)
 801aa44:	f640 02af 	movw	r2, #2223	; 0x8af
 801aa48:	4909      	ldr	r1, [pc, #36]	; (801aa70 <tcp_next_iss+0x3c>)
 801aa4a:	480a      	ldr	r0, [pc, #40]	; (801aa74 <tcp_next_iss+0x40>)
 801aa4c:	f00b ffa4 	bl	8026998 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801aa50:	4b09      	ldr	r3, [pc, #36]	; (801aa78 <tcp_next_iss+0x44>)
 801aa52:	681a      	ldr	r2, [r3, #0]
 801aa54:	4b09      	ldr	r3, [pc, #36]	; (801aa7c <tcp_next_iss+0x48>)
 801aa56:	681b      	ldr	r3, [r3, #0]
 801aa58:	4413      	add	r3, r2
 801aa5a:	4a07      	ldr	r2, [pc, #28]	; (801aa78 <tcp_next_iss+0x44>)
 801aa5c:	6013      	str	r3, [r2, #0]
  return iss;
 801aa5e:	4b06      	ldr	r3, [pc, #24]	; (801aa78 <tcp_next_iss+0x44>)
 801aa60:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801aa62:	4618      	mov	r0, r3
 801aa64:	3708      	adds	r7, #8
 801aa66:	46bd      	mov	sp, r7
 801aa68:	bd80      	pop	{r7, pc}
 801aa6a:	bf00      	nop
 801aa6c:	08029714 	.word	0x08029714
 801aa70:	08029e04 	.word	0x08029e04
 801aa74:	08029758 	.word	0x08029758
 801aa78:	20000014 	.word	0x20000014
 801aa7c:	20019ff8 	.word	0x20019ff8

0801aa80 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801aa80:	b580      	push	{r7, lr}
 801aa82:	b086      	sub	sp, #24
 801aa84:	af00      	add	r7, sp, #0
 801aa86:	4603      	mov	r3, r0
 801aa88:	60b9      	str	r1, [r7, #8]
 801aa8a:	607a      	str	r2, [r7, #4]
 801aa8c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	d106      	bne.n	801aaa2 <tcp_eff_send_mss_netif+0x22>
 801aa94:	4b14      	ldr	r3, [pc, #80]	; (801aae8 <tcp_eff_send_mss_netif+0x68>)
 801aa96:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801aa9a:	4914      	ldr	r1, [pc, #80]	; (801aaec <tcp_eff_send_mss_netif+0x6c>)
 801aa9c:	4814      	ldr	r0, [pc, #80]	; (801aaf0 <tcp_eff_send_mss_netif+0x70>)
 801aa9e:	f00b ff7b 	bl	8026998 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801aaa2:	68bb      	ldr	r3, [r7, #8]
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	d101      	bne.n	801aaac <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801aaa8:	89fb      	ldrh	r3, [r7, #14]
 801aaaa:	e019      	b.n	801aae0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801aaac:	68bb      	ldr	r3, [r7, #8]
 801aaae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801aab0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801aab2:	8afb      	ldrh	r3, [r7, #22]
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	d012      	beq.n	801aade <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801aab8:	2328      	movs	r3, #40	; 0x28
 801aaba:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801aabc:	8afa      	ldrh	r2, [r7, #22]
 801aabe:	8abb      	ldrh	r3, [r7, #20]
 801aac0:	429a      	cmp	r2, r3
 801aac2:	d904      	bls.n	801aace <tcp_eff_send_mss_netif+0x4e>
 801aac4:	8afa      	ldrh	r2, [r7, #22]
 801aac6:	8abb      	ldrh	r3, [r7, #20]
 801aac8:	1ad3      	subs	r3, r2, r3
 801aaca:	b29b      	uxth	r3, r3
 801aacc:	e000      	b.n	801aad0 <tcp_eff_send_mss_netif+0x50>
 801aace:	2300      	movs	r3, #0
 801aad0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801aad2:	8a7a      	ldrh	r2, [r7, #18]
 801aad4:	89fb      	ldrh	r3, [r7, #14]
 801aad6:	4293      	cmp	r3, r2
 801aad8:	bf28      	it	cs
 801aada:	4613      	movcs	r3, r2
 801aadc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801aade:	89fb      	ldrh	r3, [r7, #14]
}
 801aae0:	4618      	mov	r0, r3
 801aae2:	3718      	adds	r7, #24
 801aae4:	46bd      	mov	sp, r7
 801aae6:	bd80      	pop	{r7, pc}
 801aae8:	08029714 	.word	0x08029714
 801aaec:	08029e20 	.word	0x08029e20
 801aaf0:	08029758 	.word	0x08029758

0801aaf4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801aaf4:	b580      	push	{r7, lr}
 801aaf6:	b084      	sub	sp, #16
 801aaf8:	af00      	add	r7, sp, #0
 801aafa:	6078      	str	r0, [r7, #4]
 801aafc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801aafe:	683b      	ldr	r3, [r7, #0]
 801ab00:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	d119      	bne.n	801ab3c <tcp_netif_ip_addr_changed_pcblist+0x48>
 801ab08:	4b10      	ldr	r3, [pc, #64]	; (801ab4c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801ab0a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801ab0e:	4910      	ldr	r1, [pc, #64]	; (801ab50 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801ab10:	4810      	ldr	r0, [pc, #64]	; (801ab54 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801ab12:	f00b ff41 	bl	8026998 <iprintf>

  while (pcb != NULL) {
 801ab16:	e011      	b.n	801ab3c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801ab18:	68fb      	ldr	r3, [r7, #12]
 801ab1a:	681a      	ldr	r2, [r3, #0]
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	681b      	ldr	r3, [r3, #0]
 801ab20:	429a      	cmp	r2, r3
 801ab22:	d108      	bne.n	801ab36 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801ab24:	68fb      	ldr	r3, [r7, #12]
 801ab26:	68db      	ldr	r3, [r3, #12]
 801ab28:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801ab2a:	68f8      	ldr	r0, [r7, #12]
 801ab2c:	f7fe fc3c 	bl	80193a8 <tcp_abort>
      pcb = next;
 801ab30:	68bb      	ldr	r3, [r7, #8]
 801ab32:	60fb      	str	r3, [r7, #12]
 801ab34:	e002      	b.n	801ab3c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801ab36:	68fb      	ldr	r3, [r7, #12]
 801ab38:	68db      	ldr	r3, [r3, #12]
 801ab3a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801ab3c:	68fb      	ldr	r3, [r7, #12]
 801ab3e:	2b00      	cmp	r3, #0
 801ab40:	d1ea      	bne.n	801ab18 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801ab42:	bf00      	nop
 801ab44:	3710      	adds	r7, #16
 801ab46:	46bd      	mov	sp, r7
 801ab48:	bd80      	pop	{r7, pc}
 801ab4a:	bf00      	nop
 801ab4c:	08029714 	.word	0x08029714
 801ab50:	08029e48 	.word	0x08029e48
 801ab54:	08029758 	.word	0x08029758

0801ab58 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801ab58:	b580      	push	{r7, lr}
 801ab5a:	b084      	sub	sp, #16
 801ab5c:	af00      	add	r7, sp, #0
 801ab5e:	6078      	str	r0, [r7, #4]
 801ab60:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d02a      	beq.n	801abbe <tcp_netif_ip_addr_changed+0x66>
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	681b      	ldr	r3, [r3, #0]
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d026      	beq.n	801abbe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801ab70:	4b15      	ldr	r3, [pc, #84]	; (801abc8 <tcp_netif_ip_addr_changed+0x70>)
 801ab72:	681b      	ldr	r3, [r3, #0]
 801ab74:	4619      	mov	r1, r3
 801ab76:	6878      	ldr	r0, [r7, #4]
 801ab78:	f7ff ffbc 	bl	801aaf4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801ab7c:	4b13      	ldr	r3, [pc, #76]	; (801abcc <tcp_netif_ip_addr_changed+0x74>)
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	4619      	mov	r1, r3
 801ab82:	6878      	ldr	r0, [r7, #4]
 801ab84:	f7ff ffb6 	bl	801aaf4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801ab88:	683b      	ldr	r3, [r7, #0]
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d017      	beq.n	801abbe <tcp_netif_ip_addr_changed+0x66>
 801ab8e:	683b      	ldr	r3, [r7, #0]
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	2b00      	cmp	r3, #0
 801ab94:	d013      	beq.n	801abbe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ab96:	4b0e      	ldr	r3, [pc, #56]	; (801abd0 <tcp_netif_ip_addr_changed+0x78>)
 801ab98:	681b      	ldr	r3, [r3, #0]
 801ab9a:	60fb      	str	r3, [r7, #12]
 801ab9c:	e00c      	b.n	801abb8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801ab9e:	68fb      	ldr	r3, [r7, #12]
 801aba0:	681a      	ldr	r2, [r3, #0]
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	681b      	ldr	r3, [r3, #0]
 801aba6:	429a      	cmp	r2, r3
 801aba8:	d103      	bne.n	801abb2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801abaa:	683b      	ldr	r3, [r7, #0]
 801abac:	681a      	ldr	r2, [r3, #0]
 801abae:	68fb      	ldr	r3, [r7, #12]
 801abb0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801abb2:	68fb      	ldr	r3, [r7, #12]
 801abb4:	68db      	ldr	r3, [r3, #12]
 801abb6:	60fb      	str	r3, [r7, #12]
 801abb8:	68fb      	ldr	r3, [r7, #12]
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d1ef      	bne.n	801ab9e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801abbe:	bf00      	nop
 801abc0:	3710      	adds	r7, #16
 801abc2:	46bd      	mov	sp, r7
 801abc4:	bd80      	pop	{r7, pc}
 801abc6:	bf00      	nop
 801abc8:	20019ff4 	.word	0x20019ff4
 801abcc:	2001a000 	.word	0x2001a000
 801abd0:	20019ffc 	.word	0x20019ffc

0801abd4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801abd4:	b580      	push	{r7, lr}
 801abd6:	b082      	sub	sp, #8
 801abd8:	af00      	add	r7, sp, #0
 801abda:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d007      	beq.n	801abf4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801abe8:	4618      	mov	r0, r3
 801abea:	f7ff fb71 	bl	801a2d0 <tcp_segs_free>
    pcb->ooseq = NULL;
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	2200      	movs	r2, #0
 801abf2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801abf4:	bf00      	nop
 801abf6:	3708      	adds	r7, #8
 801abf8:	46bd      	mov	sp, r7
 801abfa:	bd80      	pop	{r7, pc}

0801abfc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801abfc:	b590      	push	{r4, r7, lr}
 801abfe:	b08d      	sub	sp, #52	; 0x34
 801ac00:	af04      	add	r7, sp, #16
 801ac02:	6078      	str	r0, [r7, #4]
 801ac04:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	d105      	bne.n	801ac18 <tcp_input+0x1c>
 801ac0c:	4b9b      	ldr	r3, [pc, #620]	; (801ae7c <tcp_input+0x280>)
 801ac0e:	2283      	movs	r2, #131	; 0x83
 801ac10:	499b      	ldr	r1, [pc, #620]	; (801ae80 <tcp_input+0x284>)
 801ac12:	489c      	ldr	r0, [pc, #624]	; (801ae84 <tcp_input+0x288>)
 801ac14:	f00b fec0 	bl	8026998 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	685b      	ldr	r3, [r3, #4]
 801ac1c:	4a9a      	ldr	r2, [pc, #616]	; (801ae88 <tcp_input+0x28c>)
 801ac1e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	895b      	ldrh	r3, [r3, #10]
 801ac24:	2b13      	cmp	r3, #19
 801ac26:	f240 83c4 	bls.w	801b3b2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ac2a:	4b98      	ldr	r3, [pc, #608]	; (801ae8c <tcp_input+0x290>)
 801ac2c:	695a      	ldr	r2, [r3, #20]
 801ac2e:	4b97      	ldr	r3, [pc, #604]	; (801ae8c <tcp_input+0x290>)
 801ac30:	681b      	ldr	r3, [r3, #0]
 801ac32:	4619      	mov	r1, r3
 801ac34:	4610      	mov	r0, r2
 801ac36:	f008 fb77 	bl	8023328 <ip4_addr_isbroadcast_u32>
 801ac3a:	4603      	mov	r3, r0
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	f040 83ba 	bne.w	801b3b6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801ac42:	4b92      	ldr	r3, [pc, #584]	; (801ae8c <tcp_input+0x290>)
 801ac44:	695b      	ldr	r3, [r3, #20]
 801ac46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ac4a:	2be0      	cmp	r3, #224	; 0xe0
 801ac4c:	f000 83b3 	beq.w	801b3b6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801ac50:	4b8d      	ldr	r3, [pc, #564]	; (801ae88 <tcp_input+0x28c>)
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	899b      	ldrh	r3, [r3, #12]
 801ac56:	b29b      	uxth	r3, r3
 801ac58:	4618      	mov	r0, r3
 801ac5a:	f7fc f98b 	bl	8016f74 <lwip_htons>
 801ac5e:	4603      	mov	r3, r0
 801ac60:	0b1b      	lsrs	r3, r3, #12
 801ac62:	b29b      	uxth	r3, r3
 801ac64:	b2db      	uxtb	r3, r3
 801ac66:	009b      	lsls	r3, r3, #2
 801ac68:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801ac6a:	7cbb      	ldrb	r3, [r7, #18]
 801ac6c:	2b13      	cmp	r3, #19
 801ac6e:	f240 83a2 	bls.w	801b3b6 <tcp_input+0x7ba>
 801ac72:	7cbb      	ldrb	r3, [r7, #18]
 801ac74:	b29a      	uxth	r2, r3
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	891b      	ldrh	r3, [r3, #8]
 801ac7a:	429a      	cmp	r2, r3
 801ac7c:	f200 839b 	bhi.w	801b3b6 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801ac80:	7cbb      	ldrb	r3, [r7, #18]
 801ac82:	b29b      	uxth	r3, r3
 801ac84:	3b14      	subs	r3, #20
 801ac86:	b29a      	uxth	r2, r3
 801ac88:	4b81      	ldr	r3, [pc, #516]	; (801ae90 <tcp_input+0x294>)
 801ac8a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801ac8c:	4b81      	ldr	r3, [pc, #516]	; (801ae94 <tcp_input+0x298>)
 801ac8e:	2200      	movs	r2, #0
 801ac90:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	895a      	ldrh	r2, [r3, #10]
 801ac96:	7cbb      	ldrb	r3, [r7, #18]
 801ac98:	b29b      	uxth	r3, r3
 801ac9a:	429a      	cmp	r2, r3
 801ac9c:	d309      	bcc.n	801acb2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801ac9e:	4b7c      	ldr	r3, [pc, #496]	; (801ae90 <tcp_input+0x294>)
 801aca0:	881a      	ldrh	r2, [r3, #0]
 801aca2:	4b7d      	ldr	r3, [pc, #500]	; (801ae98 <tcp_input+0x29c>)
 801aca4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801aca6:	7cbb      	ldrb	r3, [r7, #18]
 801aca8:	4619      	mov	r1, r3
 801acaa:	6878      	ldr	r0, [r7, #4]
 801acac:	f7fd fcce 	bl	801864c <pbuf_remove_header>
 801acb0:	e04e      	b.n	801ad50 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d105      	bne.n	801acc6 <tcp_input+0xca>
 801acba:	4b70      	ldr	r3, [pc, #448]	; (801ae7c <tcp_input+0x280>)
 801acbc:	22c2      	movs	r2, #194	; 0xc2
 801acbe:	4977      	ldr	r1, [pc, #476]	; (801ae9c <tcp_input+0x2a0>)
 801acc0:	4870      	ldr	r0, [pc, #448]	; (801ae84 <tcp_input+0x288>)
 801acc2:	f00b fe69 	bl	8026998 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801acc6:	2114      	movs	r1, #20
 801acc8:	6878      	ldr	r0, [r7, #4]
 801acca:	f7fd fcbf 	bl	801864c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	895a      	ldrh	r2, [r3, #10]
 801acd2:	4b71      	ldr	r3, [pc, #452]	; (801ae98 <tcp_input+0x29c>)
 801acd4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801acd6:	4b6e      	ldr	r3, [pc, #440]	; (801ae90 <tcp_input+0x294>)
 801acd8:	881a      	ldrh	r2, [r3, #0]
 801acda:	4b6f      	ldr	r3, [pc, #444]	; (801ae98 <tcp_input+0x29c>)
 801acdc:	881b      	ldrh	r3, [r3, #0]
 801acde:	1ad3      	subs	r3, r2, r3
 801ace0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801ace2:	4b6d      	ldr	r3, [pc, #436]	; (801ae98 <tcp_input+0x29c>)
 801ace4:	881b      	ldrh	r3, [r3, #0]
 801ace6:	4619      	mov	r1, r3
 801ace8:	6878      	ldr	r0, [r7, #4]
 801acea:	f7fd fcaf 	bl	801864c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	681b      	ldr	r3, [r3, #0]
 801acf2:	895b      	ldrh	r3, [r3, #10]
 801acf4:	8a3a      	ldrh	r2, [r7, #16]
 801acf6:	429a      	cmp	r2, r3
 801acf8:	f200 835f 	bhi.w	801b3ba <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	681b      	ldr	r3, [r3, #0]
 801ad00:	685b      	ldr	r3, [r3, #4]
 801ad02:	4a64      	ldr	r2, [pc, #400]	; (801ae94 <tcp_input+0x298>)
 801ad04:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801ad06:	687b      	ldr	r3, [r7, #4]
 801ad08:	681b      	ldr	r3, [r3, #0]
 801ad0a:	8a3a      	ldrh	r2, [r7, #16]
 801ad0c:	4611      	mov	r1, r2
 801ad0e:	4618      	mov	r0, r3
 801ad10:	f7fd fc9c 	bl	801864c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	891a      	ldrh	r2, [r3, #8]
 801ad18:	8a3b      	ldrh	r3, [r7, #16]
 801ad1a:	1ad3      	subs	r3, r2, r3
 801ad1c:	b29a      	uxth	r2, r3
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	895b      	ldrh	r3, [r3, #10]
 801ad26:	2b00      	cmp	r3, #0
 801ad28:	d005      	beq.n	801ad36 <tcp_input+0x13a>
 801ad2a:	4b54      	ldr	r3, [pc, #336]	; (801ae7c <tcp_input+0x280>)
 801ad2c:	22df      	movs	r2, #223	; 0xdf
 801ad2e:	495c      	ldr	r1, [pc, #368]	; (801aea0 <tcp_input+0x2a4>)
 801ad30:	4854      	ldr	r0, [pc, #336]	; (801ae84 <tcp_input+0x288>)
 801ad32:	f00b fe31 	bl	8026998 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801ad36:	687b      	ldr	r3, [r7, #4]
 801ad38:	891a      	ldrh	r2, [r3, #8]
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	681b      	ldr	r3, [r3, #0]
 801ad3e:	891b      	ldrh	r3, [r3, #8]
 801ad40:	429a      	cmp	r2, r3
 801ad42:	d005      	beq.n	801ad50 <tcp_input+0x154>
 801ad44:	4b4d      	ldr	r3, [pc, #308]	; (801ae7c <tcp_input+0x280>)
 801ad46:	22e0      	movs	r2, #224	; 0xe0
 801ad48:	4956      	ldr	r1, [pc, #344]	; (801aea4 <tcp_input+0x2a8>)
 801ad4a:	484e      	ldr	r0, [pc, #312]	; (801ae84 <tcp_input+0x288>)
 801ad4c:	f00b fe24 	bl	8026998 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801ad50:	4b4d      	ldr	r3, [pc, #308]	; (801ae88 <tcp_input+0x28c>)
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	881b      	ldrh	r3, [r3, #0]
 801ad56:	b29a      	uxth	r2, r3
 801ad58:	4b4b      	ldr	r3, [pc, #300]	; (801ae88 <tcp_input+0x28c>)
 801ad5a:	681c      	ldr	r4, [r3, #0]
 801ad5c:	4610      	mov	r0, r2
 801ad5e:	f7fc f909 	bl	8016f74 <lwip_htons>
 801ad62:	4603      	mov	r3, r0
 801ad64:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801ad66:	4b48      	ldr	r3, [pc, #288]	; (801ae88 <tcp_input+0x28c>)
 801ad68:	681b      	ldr	r3, [r3, #0]
 801ad6a:	885b      	ldrh	r3, [r3, #2]
 801ad6c:	b29a      	uxth	r2, r3
 801ad6e:	4b46      	ldr	r3, [pc, #280]	; (801ae88 <tcp_input+0x28c>)
 801ad70:	681c      	ldr	r4, [r3, #0]
 801ad72:	4610      	mov	r0, r2
 801ad74:	f7fc f8fe 	bl	8016f74 <lwip_htons>
 801ad78:	4603      	mov	r3, r0
 801ad7a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801ad7c:	4b42      	ldr	r3, [pc, #264]	; (801ae88 <tcp_input+0x28c>)
 801ad7e:	681b      	ldr	r3, [r3, #0]
 801ad80:	685a      	ldr	r2, [r3, #4]
 801ad82:	4b41      	ldr	r3, [pc, #260]	; (801ae88 <tcp_input+0x28c>)
 801ad84:	681c      	ldr	r4, [r3, #0]
 801ad86:	4610      	mov	r0, r2
 801ad88:	f7fc f909 	bl	8016f9e <lwip_htonl>
 801ad8c:	4603      	mov	r3, r0
 801ad8e:	6063      	str	r3, [r4, #4]
 801ad90:	6863      	ldr	r3, [r4, #4]
 801ad92:	4a45      	ldr	r2, [pc, #276]	; (801aea8 <tcp_input+0x2ac>)
 801ad94:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801ad96:	4b3c      	ldr	r3, [pc, #240]	; (801ae88 <tcp_input+0x28c>)
 801ad98:	681b      	ldr	r3, [r3, #0]
 801ad9a:	689a      	ldr	r2, [r3, #8]
 801ad9c:	4b3a      	ldr	r3, [pc, #232]	; (801ae88 <tcp_input+0x28c>)
 801ad9e:	681c      	ldr	r4, [r3, #0]
 801ada0:	4610      	mov	r0, r2
 801ada2:	f7fc f8fc 	bl	8016f9e <lwip_htonl>
 801ada6:	4603      	mov	r3, r0
 801ada8:	60a3      	str	r3, [r4, #8]
 801adaa:	68a3      	ldr	r3, [r4, #8]
 801adac:	4a3f      	ldr	r2, [pc, #252]	; (801aeac <tcp_input+0x2b0>)
 801adae:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801adb0:	4b35      	ldr	r3, [pc, #212]	; (801ae88 <tcp_input+0x28c>)
 801adb2:	681b      	ldr	r3, [r3, #0]
 801adb4:	89db      	ldrh	r3, [r3, #14]
 801adb6:	b29a      	uxth	r2, r3
 801adb8:	4b33      	ldr	r3, [pc, #204]	; (801ae88 <tcp_input+0x28c>)
 801adba:	681c      	ldr	r4, [r3, #0]
 801adbc:	4610      	mov	r0, r2
 801adbe:	f7fc f8d9 	bl	8016f74 <lwip_htons>
 801adc2:	4603      	mov	r3, r0
 801adc4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801adc6:	4b30      	ldr	r3, [pc, #192]	; (801ae88 <tcp_input+0x28c>)
 801adc8:	681b      	ldr	r3, [r3, #0]
 801adca:	899b      	ldrh	r3, [r3, #12]
 801adcc:	b29b      	uxth	r3, r3
 801adce:	4618      	mov	r0, r3
 801add0:	f7fc f8d0 	bl	8016f74 <lwip_htons>
 801add4:	4603      	mov	r3, r0
 801add6:	b2db      	uxtb	r3, r3
 801add8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801addc:	b2da      	uxtb	r2, r3
 801adde:	4b34      	ldr	r3, [pc, #208]	; (801aeb0 <tcp_input+0x2b4>)
 801ade0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	891a      	ldrh	r2, [r3, #8]
 801ade6:	4b33      	ldr	r3, [pc, #204]	; (801aeb4 <tcp_input+0x2b8>)
 801ade8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801adea:	4b31      	ldr	r3, [pc, #196]	; (801aeb0 <tcp_input+0x2b4>)
 801adec:	781b      	ldrb	r3, [r3, #0]
 801adee:	f003 0303 	and.w	r3, r3, #3
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	d00c      	beq.n	801ae10 <tcp_input+0x214>
    tcplen++;
 801adf6:	4b2f      	ldr	r3, [pc, #188]	; (801aeb4 <tcp_input+0x2b8>)
 801adf8:	881b      	ldrh	r3, [r3, #0]
 801adfa:	3301      	adds	r3, #1
 801adfc:	b29a      	uxth	r2, r3
 801adfe:	4b2d      	ldr	r3, [pc, #180]	; (801aeb4 <tcp_input+0x2b8>)
 801ae00:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	891a      	ldrh	r2, [r3, #8]
 801ae06:	4b2b      	ldr	r3, [pc, #172]	; (801aeb4 <tcp_input+0x2b8>)
 801ae08:	881b      	ldrh	r3, [r3, #0]
 801ae0a:	429a      	cmp	r2, r3
 801ae0c:	f200 82d7 	bhi.w	801b3be <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801ae10:	2300      	movs	r3, #0
 801ae12:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ae14:	4b28      	ldr	r3, [pc, #160]	; (801aeb8 <tcp_input+0x2bc>)
 801ae16:	681b      	ldr	r3, [r3, #0]
 801ae18:	61fb      	str	r3, [r7, #28]
 801ae1a:	e09d      	b.n	801af58 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801ae1c:	69fb      	ldr	r3, [r7, #28]
 801ae1e:	7d1b      	ldrb	r3, [r3, #20]
 801ae20:	2b00      	cmp	r3, #0
 801ae22:	d105      	bne.n	801ae30 <tcp_input+0x234>
 801ae24:	4b15      	ldr	r3, [pc, #84]	; (801ae7c <tcp_input+0x280>)
 801ae26:	22fb      	movs	r2, #251	; 0xfb
 801ae28:	4924      	ldr	r1, [pc, #144]	; (801aebc <tcp_input+0x2c0>)
 801ae2a:	4816      	ldr	r0, [pc, #88]	; (801ae84 <tcp_input+0x288>)
 801ae2c:	f00b fdb4 	bl	8026998 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801ae30:	69fb      	ldr	r3, [r7, #28]
 801ae32:	7d1b      	ldrb	r3, [r3, #20]
 801ae34:	2b0a      	cmp	r3, #10
 801ae36:	d105      	bne.n	801ae44 <tcp_input+0x248>
 801ae38:	4b10      	ldr	r3, [pc, #64]	; (801ae7c <tcp_input+0x280>)
 801ae3a:	22fc      	movs	r2, #252	; 0xfc
 801ae3c:	4920      	ldr	r1, [pc, #128]	; (801aec0 <tcp_input+0x2c4>)
 801ae3e:	4811      	ldr	r0, [pc, #68]	; (801ae84 <tcp_input+0x288>)
 801ae40:	f00b fdaa 	bl	8026998 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801ae44:	69fb      	ldr	r3, [r7, #28]
 801ae46:	7d1b      	ldrb	r3, [r3, #20]
 801ae48:	2b01      	cmp	r3, #1
 801ae4a:	d105      	bne.n	801ae58 <tcp_input+0x25c>
 801ae4c:	4b0b      	ldr	r3, [pc, #44]	; (801ae7c <tcp_input+0x280>)
 801ae4e:	22fd      	movs	r2, #253	; 0xfd
 801ae50:	491c      	ldr	r1, [pc, #112]	; (801aec4 <tcp_input+0x2c8>)
 801ae52:	480c      	ldr	r0, [pc, #48]	; (801ae84 <tcp_input+0x288>)
 801ae54:	f00b fda0 	bl	8026998 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ae58:	69fb      	ldr	r3, [r7, #28]
 801ae5a:	7a1b      	ldrb	r3, [r3, #8]
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	d033      	beq.n	801aec8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ae60:	69fb      	ldr	r3, [r7, #28]
 801ae62:	7a1a      	ldrb	r2, [r3, #8]
 801ae64:	4b09      	ldr	r3, [pc, #36]	; (801ae8c <tcp_input+0x290>)
 801ae66:	685b      	ldr	r3, [r3, #4]
 801ae68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ae6c:	3301      	adds	r3, #1
 801ae6e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ae70:	429a      	cmp	r2, r3
 801ae72:	d029      	beq.n	801aec8 <tcp_input+0x2cc>
      prev = pcb;
 801ae74:	69fb      	ldr	r3, [r7, #28]
 801ae76:	61bb      	str	r3, [r7, #24]
      continue;
 801ae78:	e06b      	b.n	801af52 <tcp_input+0x356>
 801ae7a:	bf00      	nop
 801ae7c:	08029e7c 	.word	0x08029e7c
 801ae80:	08029eb0 	.word	0x08029eb0
 801ae84:	08029ec8 	.word	0x08029ec8
 801ae88:	200131d4 	.word	0x200131d4
 801ae8c:	20016b40 	.word	0x20016b40
 801ae90:	200131d8 	.word	0x200131d8
 801ae94:	200131dc 	.word	0x200131dc
 801ae98:	200131da 	.word	0x200131da
 801ae9c:	08029ef0 	.word	0x08029ef0
 801aea0:	08029f00 	.word	0x08029f00
 801aea4:	08029f0c 	.word	0x08029f0c
 801aea8:	200131e4 	.word	0x200131e4
 801aeac:	200131e8 	.word	0x200131e8
 801aeb0:	200131f0 	.word	0x200131f0
 801aeb4:	200131ee 	.word	0x200131ee
 801aeb8:	20019ff4 	.word	0x20019ff4
 801aebc:	08029f2c 	.word	0x08029f2c
 801aec0:	08029f54 	.word	0x08029f54
 801aec4:	08029f80 	.word	0x08029f80
    }

    if (pcb->remote_port == tcphdr->src &&
 801aec8:	69fb      	ldr	r3, [r7, #28]
 801aeca:	8b1a      	ldrh	r2, [r3, #24]
 801aecc:	4b94      	ldr	r3, [pc, #592]	; (801b120 <tcp_input+0x524>)
 801aece:	681b      	ldr	r3, [r3, #0]
 801aed0:	881b      	ldrh	r3, [r3, #0]
 801aed2:	b29b      	uxth	r3, r3
 801aed4:	429a      	cmp	r2, r3
 801aed6:	d13a      	bne.n	801af4e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801aed8:	69fb      	ldr	r3, [r7, #28]
 801aeda:	8ada      	ldrh	r2, [r3, #22]
 801aedc:	4b90      	ldr	r3, [pc, #576]	; (801b120 <tcp_input+0x524>)
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	885b      	ldrh	r3, [r3, #2]
 801aee2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801aee4:	429a      	cmp	r2, r3
 801aee6:	d132      	bne.n	801af4e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801aee8:	69fb      	ldr	r3, [r7, #28]
 801aeea:	685a      	ldr	r2, [r3, #4]
 801aeec:	4b8d      	ldr	r3, [pc, #564]	; (801b124 <tcp_input+0x528>)
 801aeee:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801aef0:	429a      	cmp	r2, r3
 801aef2:	d12c      	bne.n	801af4e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801aef4:	69fb      	ldr	r3, [r7, #28]
 801aef6:	681a      	ldr	r2, [r3, #0]
 801aef8:	4b8a      	ldr	r3, [pc, #552]	; (801b124 <tcp_input+0x528>)
 801aefa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801aefc:	429a      	cmp	r2, r3
 801aefe:	d126      	bne.n	801af4e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801af00:	69fb      	ldr	r3, [r7, #28]
 801af02:	68db      	ldr	r3, [r3, #12]
 801af04:	69fa      	ldr	r2, [r7, #28]
 801af06:	429a      	cmp	r2, r3
 801af08:	d106      	bne.n	801af18 <tcp_input+0x31c>
 801af0a:	4b87      	ldr	r3, [pc, #540]	; (801b128 <tcp_input+0x52c>)
 801af0c:	f240 120d 	movw	r2, #269	; 0x10d
 801af10:	4986      	ldr	r1, [pc, #536]	; (801b12c <tcp_input+0x530>)
 801af12:	4887      	ldr	r0, [pc, #540]	; (801b130 <tcp_input+0x534>)
 801af14:	f00b fd40 	bl	8026998 <iprintf>
      if (prev != NULL) {
 801af18:	69bb      	ldr	r3, [r7, #24]
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	d00a      	beq.n	801af34 <tcp_input+0x338>
        prev->next = pcb->next;
 801af1e:	69fb      	ldr	r3, [r7, #28]
 801af20:	68da      	ldr	r2, [r3, #12]
 801af22:	69bb      	ldr	r3, [r7, #24]
 801af24:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801af26:	4b83      	ldr	r3, [pc, #524]	; (801b134 <tcp_input+0x538>)
 801af28:	681a      	ldr	r2, [r3, #0]
 801af2a:	69fb      	ldr	r3, [r7, #28]
 801af2c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801af2e:	4a81      	ldr	r2, [pc, #516]	; (801b134 <tcp_input+0x538>)
 801af30:	69fb      	ldr	r3, [r7, #28]
 801af32:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801af34:	69fb      	ldr	r3, [r7, #28]
 801af36:	68db      	ldr	r3, [r3, #12]
 801af38:	69fa      	ldr	r2, [r7, #28]
 801af3a:	429a      	cmp	r2, r3
 801af3c:	d111      	bne.n	801af62 <tcp_input+0x366>
 801af3e:	4b7a      	ldr	r3, [pc, #488]	; (801b128 <tcp_input+0x52c>)
 801af40:	f240 1215 	movw	r2, #277	; 0x115
 801af44:	497c      	ldr	r1, [pc, #496]	; (801b138 <tcp_input+0x53c>)
 801af46:	487a      	ldr	r0, [pc, #488]	; (801b130 <tcp_input+0x534>)
 801af48:	f00b fd26 	bl	8026998 <iprintf>
      break;
 801af4c:	e009      	b.n	801af62 <tcp_input+0x366>
    }
    prev = pcb;
 801af4e:	69fb      	ldr	r3, [r7, #28]
 801af50:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801af52:	69fb      	ldr	r3, [r7, #28]
 801af54:	68db      	ldr	r3, [r3, #12]
 801af56:	61fb      	str	r3, [r7, #28]
 801af58:	69fb      	ldr	r3, [r7, #28]
 801af5a:	2b00      	cmp	r3, #0
 801af5c:	f47f af5e 	bne.w	801ae1c <tcp_input+0x220>
 801af60:	e000      	b.n	801af64 <tcp_input+0x368>
      break;
 801af62:	bf00      	nop
  }

  if (pcb == NULL) {
 801af64:	69fb      	ldr	r3, [r7, #28]
 801af66:	2b00      	cmp	r3, #0
 801af68:	f040 8095 	bne.w	801b096 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801af6c:	4b73      	ldr	r3, [pc, #460]	; (801b13c <tcp_input+0x540>)
 801af6e:	681b      	ldr	r3, [r3, #0]
 801af70:	61fb      	str	r3, [r7, #28]
 801af72:	e03f      	b.n	801aff4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801af74:	69fb      	ldr	r3, [r7, #28]
 801af76:	7d1b      	ldrb	r3, [r3, #20]
 801af78:	2b0a      	cmp	r3, #10
 801af7a:	d006      	beq.n	801af8a <tcp_input+0x38e>
 801af7c:	4b6a      	ldr	r3, [pc, #424]	; (801b128 <tcp_input+0x52c>)
 801af7e:	f240 121f 	movw	r2, #287	; 0x11f
 801af82:	496f      	ldr	r1, [pc, #444]	; (801b140 <tcp_input+0x544>)
 801af84:	486a      	ldr	r0, [pc, #424]	; (801b130 <tcp_input+0x534>)
 801af86:	f00b fd07 	bl	8026998 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801af8a:	69fb      	ldr	r3, [r7, #28]
 801af8c:	7a1b      	ldrb	r3, [r3, #8]
 801af8e:	2b00      	cmp	r3, #0
 801af90:	d009      	beq.n	801afa6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801af92:	69fb      	ldr	r3, [r7, #28]
 801af94:	7a1a      	ldrb	r2, [r3, #8]
 801af96:	4b63      	ldr	r3, [pc, #396]	; (801b124 <tcp_input+0x528>)
 801af98:	685b      	ldr	r3, [r3, #4]
 801af9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801af9e:	3301      	adds	r3, #1
 801afa0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801afa2:	429a      	cmp	r2, r3
 801afa4:	d122      	bne.n	801afec <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801afa6:	69fb      	ldr	r3, [r7, #28]
 801afa8:	8b1a      	ldrh	r2, [r3, #24]
 801afaa:	4b5d      	ldr	r3, [pc, #372]	; (801b120 <tcp_input+0x524>)
 801afac:	681b      	ldr	r3, [r3, #0]
 801afae:	881b      	ldrh	r3, [r3, #0]
 801afb0:	b29b      	uxth	r3, r3
 801afb2:	429a      	cmp	r2, r3
 801afb4:	d11b      	bne.n	801afee <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801afb6:	69fb      	ldr	r3, [r7, #28]
 801afb8:	8ada      	ldrh	r2, [r3, #22]
 801afba:	4b59      	ldr	r3, [pc, #356]	; (801b120 <tcp_input+0x524>)
 801afbc:	681b      	ldr	r3, [r3, #0]
 801afbe:	885b      	ldrh	r3, [r3, #2]
 801afc0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801afc2:	429a      	cmp	r2, r3
 801afc4:	d113      	bne.n	801afee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801afc6:	69fb      	ldr	r3, [r7, #28]
 801afc8:	685a      	ldr	r2, [r3, #4]
 801afca:	4b56      	ldr	r3, [pc, #344]	; (801b124 <tcp_input+0x528>)
 801afcc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801afce:	429a      	cmp	r2, r3
 801afd0:	d10d      	bne.n	801afee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801afd2:	69fb      	ldr	r3, [r7, #28]
 801afd4:	681a      	ldr	r2, [r3, #0]
 801afd6:	4b53      	ldr	r3, [pc, #332]	; (801b124 <tcp_input+0x528>)
 801afd8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801afda:	429a      	cmp	r2, r3
 801afdc:	d107      	bne.n	801afee <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801afde:	69f8      	ldr	r0, [r7, #28]
 801afe0:	f000 fb52 	bl	801b688 <tcp_timewait_input>
        }
        pbuf_free(p);
 801afe4:	6878      	ldr	r0, [r7, #4]
 801afe6:	f7fd fbe9 	bl	80187bc <pbuf_free>
        return;
 801afea:	e1ee      	b.n	801b3ca <tcp_input+0x7ce>
        continue;
 801afec:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801afee:	69fb      	ldr	r3, [r7, #28]
 801aff0:	68db      	ldr	r3, [r3, #12]
 801aff2:	61fb      	str	r3, [r7, #28]
 801aff4:	69fb      	ldr	r3, [r7, #28]
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	d1bc      	bne.n	801af74 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801affa:	2300      	movs	r3, #0
 801affc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801affe:	4b51      	ldr	r3, [pc, #324]	; (801b144 <tcp_input+0x548>)
 801b000:	681b      	ldr	r3, [r3, #0]
 801b002:	617b      	str	r3, [r7, #20]
 801b004:	e02a      	b.n	801b05c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801b006:	697b      	ldr	r3, [r7, #20]
 801b008:	7a1b      	ldrb	r3, [r3, #8]
 801b00a:	2b00      	cmp	r3, #0
 801b00c:	d00c      	beq.n	801b028 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b00e:	697b      	ldr	r3, [r7, #20]
 801b010:	7a1a      	ldrb	r2, [r3, #8]
 801b012:	4b44      	ldr	r3, [pc, #272]	; (801b124 <tcp_input+0x528>)
 801b014:	685b      	ldr	r3, [r3, #4]
 801b016:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b01a:	3301      	adds	r3, #1
 801b01c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801b01e:	429a      	cmp	r2, r3
 801b020:	d002      	beq.n	801b028 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801b022:	697b      	ldr	r3, [r7, #20]
 801b024:	61bb      	str	r3, [r7, #24]
        continue;
 801b026:	e016      	b.n	801b056 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801b028:	697b      	ldr	r3, [r7, #20]
 801b02a:	8ada      	ldrh	r2, [r3, #22]
 801b02c:	4b3c      	ldr	r3, [pc, #240]	; (801b120 <tcp_input+0x524>)
 801b02e:	681b      	ldr	r3, [r3, #0]
 801b030:	885b      	ldrh	r3, [r3, #2]
 801b032:	b29b      	uxth	r3, r3
 801b034:	429a      	cmp	r2, r3
 801b036:	d10c      	bne.n	801b052 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801b038:	697b      	ldr	r3, [r7, #20]
 801b03a:	681a      	ldr	r2, [r3, #0]
 801b03c:	4b39      	ldr	r3, [pc, #228]	; (801b124 <tcp_input+0x528>)
 801b03e:	695b      	ldr	r3, [r3, #20]
 801b040:	429a      	cmp	r2, r3
 801b042:	d00f      	beq.n	801b064 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801b044:	697b      	ldr	r3, [r7, #20]
 801b046:	2b00      	cmp	r3, #0
 801b048:	d00d      	beq.n	801b066 <tcp_input+0x46a>
 801b04a:	697b      	ldr	r3, [r7, #20]
 801b04c:	681b      	ldr	r3, [r3, #0]
 801b04e:	2b00      	cmp	r3, #0
 801b050:	d009      	beq.n	801b066 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801b052:	697b      	ldr	r3, [r7, #20]
 801b054:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b056:	697b      	ldr	r3, [r7, #20]
 801b058:	68db      	ldr	r3, [r3, #12]
 801b05a:	617b      	str	r3, [r7, #20]
 801b05c:	697b      	ldr	r3, [r7, #20]
 801b05e:	2b00      	cmp	r3, #0
 801b060:	d1d1      	bne.n	801b006 <tcp_input+0x40a>
 801b062:	e000      	b.n	801b066 <tcp_input+0x46a>
            break;
 801b064:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801b066:	697b      	ldr	r3, [r7, #20]
 801b068:	2b00      	cmp	r3, #0
 801b06a:	d014      	beq.n	801b096 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801b06c:	69bb      	ldr	r3, [r7, #24]
 801b06e:	2b00      	cmp	r3, #0
 801b070:	d00a      	beq.n	801b088 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801b072:	697b      	ldr	r3, [r7, #20]
 801b074:	68da      	ldr	r2, [r3, #12]
 801b076:	69bb      	ldr	r3, [r7, #24]
 801b078:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801b07a:	4b32      	ldr	r3, [pc, #200]	; (801b144 <tcp_input+0x548>)
 801b07c:	681a      	ldr	r2, [r3, #0]
 801b07e:	697b      	ldr	r3, [r7, #20]
 801b080:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801b082:	4a30      	ldr	r2, [pc, #192]	; (801b144 <tcp_input+0x548>)
 801b084:	697b      	ldr	r3, [r7, #20]
 801b086:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801b088:	6978      	ldr	r0, [r7, #20]
 801b08a:	f000 f9ff 	bl	801b48c <tcp_listen_input>
      }
      pbuf_free(p);
 801b08e:	6878      	ldr	r0, [r7, #4]
 801b090:	f7fd fb94 	bl	80187bc <pbuf_free>
      return;
 801b094:	e199      	b.n	801b3ca <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801b096:	69fb      	ldr	r3, [r7, #28]
 801b098:	2b00      	cmp	r3, #0
 801b09a:	f000 8160 	beq.w	801b35e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801b09e:	4b2a      	ldr	r3, [pc, #168]	; (801b148 <tcp_input+0x54c>)
 801b0a0:	2200      	movs	r2, #0
 801b0a2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	891a      	ldrh	r2, [r3, #8]
 801b0a8:	4b27      	ldr	r3, [pc, #156]	; (801b148 <tcp_input+0x54c>)
 801b0aa:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801b0ac:	4a26      	ldr	r2, [pc, #152]	; (801b148 <tcp_input+0x54c>)
 801b0ae:	687b      	ldr	r3, [r7, #4]
 801b0b0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801b0b2:	4b1b      	ldr	r3, [pc, #108]	; (801b120 <tcp_input+0x524>)
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	4a24      	ldr	r2, [pc, #144]	; (801b148 <tcp_input+0x54c>)
 801b0b8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801b0ba:	4b24      	ldr	r3, [pc, #144]	; (801b14c <tcp_input+0x550>)
 801b0bc:	2200      	movs	r2, #0
 801b0be:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801b0c0:	4b23      	ldr	r3, [pc, #140]	; (801b150 <tcp_input+0x554>)
 801b0c2:	2200      	movs	r2, #0
 801b0c4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801b0c6:	4b23      	ldr	r3, [pc, #140]	; (801b154 <tcp_input+0x558>)
 801b0c8:	2200      	movs	r2, #0
 801b0ca:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801b0cc:	4b22      	ldr	r3, [pc, #136]	; (801b158 <tcp_input+0x55c>)
 801b0ce:	781b      	ldrb	r3, [r3, #0]
 801b0d0:	f003 0308 	and.w	r3, r3, #8
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d006      	beq.n	801b0e6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	7b5b      	ldrb	r3, [r3, #13]
 801b0dc:	f043 0301 	orr.w	r3, r3, #1
 801b0e0:	b2da      	uxtb	r2, r3
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801b0e6:	69fb      	ldr	r3, [r7, #28]
 801b0e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	d038      	beq.n	801b160 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b0ee:	69f8      	ldr	r0, [r7, #28]
 801b0f0:	f7ff f872 	bl	801a1d8 <tcp_process_refused_data>
 801b0f4:	4603      	mov	r3, r0
 801b0f6:	f113 0f0d 	cmn.w	r3, #13
 801b0fa:	d007      	beq.n	801b10c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b0fc:	69fb      	ldr	r3, [r7, #28]
 801b0fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b100:	2b00      	cmp	r3, #0
 801b102:	d02d      	beq.n	801b160 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b104:	4b15      	ldr	r3, [pc, #84]	; (801b15c <tcp_input+0x560>)
 801b106:	881b      	ldrh	r3, [r3, #0]
 801b108:	2b00      	cmp	r3, #0
 801b10a:	d029      	beq.n	801b160 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801b10c:	69fb      	ldr	r3, [r7, #28]
 801b10e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b110:	2b00      	cmp	r3, #0
 801b112:	f040 8104 	bne.w	801b31e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801b116:	69f8      	ldr	r0, [r7, #28]
 801b118:	f003 fe24 	bl	801ed64 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801b11c:	e0ff      	b.n	801b31e <tcp_input+0x722>
 801b11e:	bf00      	nop
 801b120:	200131d4 	.word	0x200131d4
 801b124:	20016b40 	.word	0x20016b40
 801b128:	08029e7c 	.word	0x08029e7c
 801b12c:	08029fa8 	.word	0x08029fa8
 801b130:	08029ec8 	.word	0x08029ec8
 801b134:	20019ff4 	.word	0x20019ff4
 801b138:	08029fd4 	.word	0x08029fd4
 801b13c:	2001a004 	.word	0x2001a004
 801b140:	0802a000 	.word	0x0802a000
 801b144:	20019ffc 	.word	0x20019ffc
 801b148:	200131c4 	.word	0x200131c4
 801b14c:	200131f4 	.word	0x200131f4
 801b150:	200131f1 	.word	0x200131f1
 801b154:	200131ec 	.word	0x200131ec
 801b158:	200131f0 	.word	0x200131f0
 801b15c:	200131ee 	.word	0x200131ee
      }
    }
    tcp_input_pcb = pcb;
 801b160:	4a9b      	ldr	r2, [pc, #620]	; (801b3d0 <tcp_input+0x7d4>)
 801b162:	69fb      	ldr	r3, [r7, #28]
 801b164:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801b166:	69f8      	ldr	r0, [r7, #28]
 801b168:	f000 fb0a 	bl	801b780 <tcp_process>
 801b16c:	4603      	mov	r3, r0
 801b16e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801b170:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b174:	f113 0f0d 	cmn.w	r3, #13
 801b178:	f000 80d3 	beq.w	801b322 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 801b17c:	4b95      	ldr	r3, [pc, #596]	; (801b3d4 <tcp_input+0x7d8>)
 801b17e:	781b      	ldrb	r3, [r3, #0]
 801b180:	f003 0308 	and.w	r3, r3, #8
 801b184:	2b00      	cmp	r3, #0
 801b186:	d015      	beq.n	801b1b4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801b188:	69fb      	ldr	r3, [r7, #28]
 801b18a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b18e:	2b00      	cmp	r3, #0
 801b190:	d008      	beq.n	801b1a4 <tcp_input+0x5a8>
 801b192:	69fb      	ldr	r3, [r7, #28]
 801b194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b198:	69fa      	ldr	r2, [r7, #28]
 801b19a:	6912      	ldr	r2, [r2, #16]
 801b19c:	f06f 010d 	mvn.w	r1, #13
 801b1a0:	4610      	mov	r0, r2
 801b1a2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801b1a4:	69f9      	ldr	r1, [r7, #28]
 801b1a6:	488c      	ldr	r0, [pc, #560]	; (801b3d8 <tcp_input+0x7dc>)
 801b1a8:	f7ff fbb0 	bl	801a90c <tcp_pcb_remove>
        tcp_free(pcb);
 801b1ac:	69f8      	ldr	r0, [r7, #28]
 801b1ae:	f7fd fdc1 	bl	8018d34 <tcp_free>
 801b1b2:	e0c1      	b.n	801b338 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 801b1b4:	2300      	movs	r3, #0
 801b1b6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801b1b8:	4b88      	ldr	r3, [pc, #544]	; (801b3dc <tcp_input+0x7e0>)
 801b1ba:	881b      	ldrh	r3, [r3, #0]
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d01d      	beq.n	801b1fc <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801b1c0:	4b86      	ldr	r3, [pc, #536]	; (801b3dc <tcp_input+0x7e0>)
 801b1c2:	881b      	ldrh	r3, [r3, #0]
 801b1c4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801b1c6:	69fb      	ldr	r3, [r7, #28]
 801b1c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b1cc:	2b00      	cmp	r3, #0
 801b1ce:	d00a      	beq.n	801b1e6 <tcp_input+0x5ea>
 801b1d0:	69fb      	ldr	r3, [r7, #28]
 801b1d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b1d6:	69fa      	ldr	r2, [r7, #28]
 801b1d8:	6910      	ldr	r0, [r2, #16]
 801b1da:	89fa      	ldrh	r2, [r7, #14]
 801b1dc:	69f9      	ldr	r1, [r7, #28]
 801b1de:	4798      	blx	r3
 801b1e0:	4603      	mov	r3, r0
 801b1e2:	74fb      	strb	r3, [r7, #19]
 801b1e4:	e001      	b.n	801b1ea <tcp_input+0x5ee>
 801b1e6:	2300      	movs	r3, #0
 801b1e8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801b1ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b1ee:	f113 0f0d 	cmn.w	r3, #13
 801b1f2:	f000 8098 	beq.w	801b326 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801b1f6:	4b79      	ldr	r3, [pc, #484]	; (801b3dc <tcp_input+0x7e0>)
 801b1f8:	2200      	movs	r2, #0
 801b1fa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801b1fc:	69f8      	ldr	r0, [r7, #28]
 801b1fe:	f000 f905 	bl	801b40c <tcp_input_delayed_close>
 801b202:	4603      	mov	r3, r0
 801b204:	2b00      	cmp	r3, #0
 801b206:	f040 8090 	bne.w	801b32a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801b20a:	4b75      	ldr	r3, [pc, #468]	; (801b3e0 <tcp_input+0x7e4>)
 801b20c:	681b      	ldr	r3, [r3, #0]
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d041      	beq.n	801b296 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801b212:	69fb      	ldr	r3, [r7, #28]
 801b214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b216:	2b00      	cmp	r3, #0
 801b218:	d006      	beq.n	801b228 <tcp_input+0x62c>
 801b21a:	4b72      	ldr	r3, [pc, #456]	; (801b3e4 <tcp_input+0x7e8>)
 801b21c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801b220:	4971      	ldr	r1, [pc, #452]	; (801b3e8 <tcp_input+0x7ec>)
 801b222:	4872      	ldr	r0, [pc, #456]	; (801b3ec <tcp_input+0x7f0>)
 801b224:	f00b fbb8 	bl	8026998 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801b228:	69fb      	ldr	r3, [r7, #28]
 801b22a:	8b5b      	ldrh	r3, [r3, #26]
 801b22c:	f003 0310 	and.w	r3, r3, #16
 801b230:	2b00      	cmp	r3, #0
 801b232:	d008      	beq.n	801b246 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801b234:	4b6a      	ldr	r3, [pc, #424]	; (801b3e0 <tcp_input+0x7e4>)
 801b236:	681b      	ldr	r3, [r3, #0]
 801b238:	4618      	mov	r0, r3
 801b23a:	f7fd fabf 	bl	80187bc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801b23e:	69f8      	ldr	r0, [r7, #28]
 801b240:	f7fe f8b2 	bl	80193a8 <tcp_abort>
            goto aborted;
 801b244:	e078      	b.n	801b338 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801b246:	69fb      	ldr	r3, [r7, #28]
 801b248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	d00c      	beq.n	801b26a <tcp_input+0x66e>
 801b250:	69fb      	ldr	r3, [r7, #28]
 801b252:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801b256:	69fb      	ldr	r3, [r7, #28]
 801b258:	6918      	ldr	r0, [r3, #16]
 801b25a:	4b61      	ldr	r3, [pc, #388]	; (801b3e0 <tcp_input+0x7e4>)
 801b25c:	681a      	ldr	r2, [r3, #0]
 801b25e:	2300      	movs	r3, #0
 801b260:	69f9      	ldr	r1, [r7, #28]
 801b262:	47a0      	blx	r4
 801b264:	4603      	mov	r3, r0
 801b266:	74fb      	strb	r3, [r7, #19]
 801b268:	e008      	b.n	801b27c <tcp_input+0x680>
 801b26a:	4b5d      	ldr	r3, [pc, #372]	; (801b3e0 <tcp_input+0x7e4>)
 801b26c:	681a      	ldr	r2, [r3, #0]
 801b26e:	2300      	movs	r3, #0
 801b270:	69f9      	ldr	r1, [r7, #28]
 801b272:	2000      	movs	r0, #0
 801b274:	f7ff f884 	bl	801a380 <tcp_recv_null>
 801b278:	4603      	mov	r3, r0
 801b27a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801b27c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b280:	f113 0f0d 	cmn.w	r3, #13
 801b284:	d053      	beq.n	801b32e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801b286:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d003      	beq.n	801b296 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801b28e:	4b54      	ldr	r3, [pc, #336]	; (801b3e0 <tcp_input+0x7e4>)
 801b290:	681a      	ldr	r2, [r3, #0]
 801b292:	69fb      	ldr	r3, [r7, #28]
 801b294:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801b296:	4b4f      	ldr	r3, [pc, #316]	; (801b3d4 <tcp_input+0x7d8>)
 801b298:	781b      	ldrb	r3, [r3, #0]
 801b29a:	f003 0320 	and.w	r3, r3, #32
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d030      	beq.n	801b304 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801b2a2:	69fb      	ldr	r3, [r7, #28]
 801b2a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b2a6:	2b00      	cmp	r3, #0
 801b2a8:	d009      	beq.n	801b2be <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801b2aa:	69fb      	ldr	r3, [r7, #28]
 801b2ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b2ae:	7b5a      	ldrb	r2, [r3, #13]
 801b2b0:	69fb      	ldr	r3, [r7, #28]
 801b2b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b2b4:	f042 0220 	orr.w	r2, r2, #32
 801b2b8:	b2d2      	uxtb	r2, r2
 801b2ba:	735a      	strb	r2, [r3, #13]
 801b2bc:	e022      	b.n	801b304 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801b2be:	69fb      	ldr	r3, [r7, #28]
 801b2c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b2c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b2c6:	d005      	beq.n	801b2d4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 801b2c8:	69fb      	ldr	r3, [r7, #28]
 801b2ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b2cc:	3301      	adds	r3, #1
 801b2ce:	b29a      	uxth	r2, r3
 801b2d0:	69fb      	ldr	r3, [r7, #28]
 801b2d2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801b2d4:	69fb      	ldr	r3, [r7, #28]
 801b2d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	d00b      	beq.n	801b2f6 <tcp_input+0x6fa>
 801b2de:	69fb      	ldr	r3, [r7, #28]
 801b2e0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801b2e4:	69fb      	ldr	r3, [r7, #28]
 801b2e6:	6918      	ldr	r0, [r3, #16]
 801b2e8:	2300      	movs	r3, #0
 801b2ea:	2200      	movs	r2, #0
 801b2ec:	69f9      	ldr	r1, [r7, #28]
 801b2ee:	47a0      	blx	r4
 801b2f0:	4603      	mov	r3, r0
 801b2f2:	74fb      	strb	r3, [r7, #19]
 801b2f4:	e001      	b.n	801b2fa <tcp_input+0x6fe>
 801b2f6:	2300      	movs	r3, #0
 801b2f8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801b2fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b2fe:	f113 0f0d 	cmn.w	r3, #13
 801b302:	d016      	beq.n	801b332 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801b304:	4b32      	ldr	r3, [pc, #200]	; (801b3d0 <tcp_input+0x7d4>)
 801b306:	2200      	movs	r2, #0
 801b308:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801b30a:	69f8      	ldr	r0, [r7, #28]
 801b30c:	f000 f87e 	bl	801b40c <tcp_input_delayed_close>
 801b310:	4603      	mov	r3, r0
 801b312:	2b00      	cmp	r3, #0
 801b314:	d10f      	bne.n	801b336 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801b316:	69f8      	ldr	r0, [r7, #28]
 801b318:	f002 ff10 	bl	801e13c <tcp_output>
 801b31c:	e00c      	b.n	801b338 <tcp_input+0x73c>
        goto aborted;
 801b31e:	bf00      	nop
 801b320:	e00a      	b.n	801b338 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801b322:	bf00      	nop
 801b324:	e008      	b.n	801b338 <tcp_input+0x73c>
              goto aborted;
 801b326:	bf00      	nop
 801b328:	e006      	b.n	801b338 <tcp_input+0x73c>
          goto aborted;
 801b32a:	bf00      	nop
 801b32c:	e004      	b.n	801b338 <tcp_input+0x73c>
            goto aborted;
 801b32e:	bf00      	nop
 801b330:	e002      	b.n	801b338 <tcp_input+0x73c>
              goto aborted;
 801b332:	bf00      	nop
 801b334:	e000      	b.n	801b338 <tcp_input+0x73c>
          goto aborted;
 801b336:	bf00      	nop
    tcp_input_pcb = NULL;
 801b338:	4b25      	ldr	r3, [pc, #148]	; (801b3d0 <tcp_input+0x7d4>)
 801b33a:	2200      	movs	r2, #0
 801b33c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801b33e:	4b28      	ldr	r3, [pc, #160]	; (801b3e0 <tcp_input+0x7e4>)
 801b340:	2200      	movs	r2, #0
 801b342:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801b344:	4b2a      	ldr	r3, [pc, #168]	; (801b3f0 <tcp_input+0x7f4>)
 801b346:	685b      	ldr	r3, [r3, #4]
 801b348:	2b00      	cmp	r3, #0
 801b34a:	d03d      	beq.n	801b3c8 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 801b34c:	4b28      	ldr	r3, [pc, #160]	; (801b3f0 <tcp_input+0x7f4>)
 801b34e:	685b      	ldr	r3, [r3, #4]
 801b350:	4618      	mov	r0, r3
 801b352:	f7fd fa33 	bl	80187bc <pbuf_free>
      inseg.p = NULL;
 801b356:	4b26      	ldr	r3, [pc, #152]	; (801b3f0 <tcp_input+0x7f4>)
 801b358:	2200      	movs	r2, #0
 801b35a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801b35c:	e034      	b.n	801b3c8 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801b35e:	4b25      	ldr	r3, [pc, #148]	; (801b3f4 <tcp_input+0x7f8>)
 801b360:	681b      	ldr	r3, [r3, #0]
 801b362:	899b      	ldrh	r3, [r3, #12]
 801b364:	b29b      	uxth	r3, r3
 801b366:	4618      	mov	r0, r3
 801b368:	f7fb fe04 	bl	8016f74 <lwip_htons>
 801b36c:	4603      	mov	r3, r0
 801b36e:	b2db      	uxtb	r3, r3
 801b370:	f003 0304 	and.w	r3, r3, #4
 801b374:	2b00      	cmp	r3, #0
 801b376:	d118      	bne.n	801b3aa <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b378:	4b1f      	ldr	r3, [pc, #124]	; (801b3f8 <tcp_input+0x7fc>)
 801b37a:	6819      	ldr	r1, [r3, #0]
 801b37c:	4b1f      	ldr	r3, [pc, #124]	; (801b3fc <tcp_input+0x800>)
 801b37e:	881b      	ldrh	r3, [r3, #0]
 801b380:	461a      	mov	r2, r3
 801b382:	4b1f      	ldr	r3, [pc, #124]	; (801b400 <tcp_input+0x804>)
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b388:	4b1a      	ldr	r3, [pc, #104]	; (801b3f4 <tcp_input+0x7f8>)
 801b38a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b38c:	885b      	ldrh	r3, [r3, #2]
 801b38e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b390:	4a18      	ldr	r2, [pc, #96]	; (801b3f4 <tcp_input+0x7f8>)
 801b392:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b394:	8812      	ldrh	r2, [r2, #0]
 801b396:	b292      	uxth	r2, r2
 801b398:	9202      	str	r2, [sp, #8]
 801b39a:	9301      	str	r3, [sp, #4]
 801b39c:	4b19      	ldr	r3, [pc, #100]	; (801b404 <tcp_input+0x808>)
 801b39e:	9300      	str	r3, [sp, #0]
 801b3a0:	4b19      	ldr	r3, [pc, #100]	; (801b408 <tcp_input+0x80c>)
 801b3a2:	4602      	mov	r2, r0
 801b3a4:	2000      	movs	r0, #0
 801b3a6:	f003 fc8d 	bl	801ecc4 <tcp_rst>
    pbuf_free(p);
 801b3aa:	6878      	ldr	r0, [r7, #4]
 801b3ac:	f7fd fa06 	bl	80187bc <pbuf_free>
  return;
 801b3b0:	e00a      	b.n	801b3c8 <tcp_input+0x7cc>
    goto dropped;
 801b3b2:	bf00      	nop
 801b3b4:	e004      	b.n	801b3c0 <tcp_input+0x7c4>
dropped:
 801b3b6:	bf00      	nop
 801b3b8:	e002      	b.n	801b3c0 <tcp_input+0x7c4>
      goto dropped;
 801b3ba:	bf00      	nop
 801b3bc:	e000      	b.n	801b3c0 <tcp_input+0x7c4>
      goto dropped;
 801b3be:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801b3c0:	6878      	ldr	r0, [r7, #4]
 801b3c2:	f7fd f9fb 	bl	80187bc <pbuf_free>
 801b3c6:	e000      	b.n	801b3ca <tcp_input+0x7ce>
  return;
 801b3c8:	bf00      	nop
}
 801b3ca:	3724      	adds	r7, #36	; 0x24
 801b3cc:	46bd      	mov	sp, r7
 801b3ce:	bd90      	pop	{r4, r7, pc}
 801b3d0:	2001a008 	.word	0x2001a008
 801b3d4:	200131f1 	.word	0x200131f1
 801b3d8:	20019ff4 	.word	0x20019ff4
 801b3dc:	200131ec 	.word	0x200131ec
 801b3e0:	200131f4 	.word	0x200131f4
 801b3e4:	08029e7c 	.word	0x08029e7c
 801b3e8:	0802a030 	.word	0x0802a030
 801b3ec:	08029ec8 	.word	0x08029ec8
 801b3f0:	200131c4 	.word	0x200131c4
 801b3f4:	200131d4 	.word	0x200131d4
 801b3f8:	200131e8 	.word	0x200131e8
 801b3fc:	200131ee 	.word	0x200131ee
 801b400:	200131e4 	.word	0x200131e4
 801b404:	20016b50 	.word	0x20016b50
 801b408:	20016b54 	.word	0x20016b54

0801b40c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801b40c:	b580      	push	{r7, lr}
 801b40e:	b082      	sub	sp, #8
 801b410:	af00      	add	r7, sp, #0
 801b412:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801b414:	687b      	ldr	r3, [r7, #4]
 801b416:	2b00      	cmp	r3, #0
 801b418:	d106      	bne.n	801b428 <tcp_input_delayed_close+0x1c>
 801b41a:	4b17      	ldr	r3, [pc, #92]	; (801b478 <tcp_input_delayed_close+0x6c>)
 801b41c:	f240 225a 	movw	r2, #602	; 0x25a
 801b420:	4916      	ldr	r1, [pc, #88]	; (801b47c <tcp_input_delayed_close+0x70>)
 801b422:	4817      	ldr	r0, [pc, #92]	; (801b480 <tcp_input_delayed_close+0x74>)
 801b424:	f00b fab8 	bl	8026998 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801b428:	4b16      	ldr	r3, [pc, #88]	; (801b484 <tcp_input_delayed_close+0x78>)
 801b42a:	781b      	ldrb	r3, [r3, #0]
 801b42c:	f003 0310 	and.w	r3, r3, #16
 801b430:	2b00      	cmp	r3, #0
 801b432:	d01c      	beq.n	801b46e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	8b5b      	ldrh	r3, [r3, #26]
 801b438:	f003 0310 	and.w	r3, r3, #16
 801b43c:	2b00      	cmp	r3, #0
 801b43e:	d10d      	bne.n	801b45c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b446:	2b00      	cmp	r3, #0
 801b448:	d008      	beq.n	801b45c <tcp_input_delayed_close+0x50>
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b450:	687a      	ldr	r2, [r7, #4]
 801b452:	6912      	ldr	r2, [r2, #16]
 801b454:	f06f 010e 	mvn.w	r1, #14
 801b458:	4610      	mov	r0, r2
 801b45a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801b45c:	6879      	ldr	r1, [r7, #4]
 801b45e:	480a      	ldr	r0, [pc, #40]	; (801b488 <tcp_input_delayed_close+0x7c>)
 801b460:	f7ff fa54 	bl	801a90c <tcp_pcb_remove>
    tcp_free(pcb);
 801b464:	6878      	ldr	r0, [r7, #4]
 801b466:	f7fd fc65 	bl	8018d34 <tcp_free>
    return 1;
 801b46a:	2301      	movs	r3, #1
 801b46c:	e000      	b.n	801b470 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801b46e:	2300      	movs	r3, #0
}
 801b470:	4618      	mov	r0, r3
 801b472:	3708      	adds	r7, #8
 801b474:	46bd      	mov	sp, r7
 801b476:	bd80      	pop	{r7, pc}
 801b478:	08029e7c 	.word	0x08029e7c
 801b47c:	0802a04c 	.word	0x0802a04c
 801b480:	08029ec8 	.word	0x08029ec8
 801b484:	200131f1 	.word	0x200131f1
 801b488:	20019ff4 	.word	0x20019ff4

0801b48c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801b48c:	b590      	push	{r4, r7, lr}
 801b48e:	b08b      	sub	sp, #44	; 0x2c
 801b490:	af04      	add	r7, sp, #16
 801b492:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801b494:	4b6f      	ldr	r3, [pc, #444]	; (801b654 <tcp_listen_input+0x1c8>)
 801b496:	781b      	ldrb	r3, [r3, #0]
 801b498:	f003 0304 	and.w	r3, r3, #4
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	f040 80d3 	bne.w	801b648 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	2b00      	cmp	r3, #0
 801b4a6:	d106      	bne.n	801b4b6 <tcp_listen_input+0x2a>
 801b4a8:	4b6b      	ldr	r3, [pc, #428]	; (801b658 <tcp_listen_input+0x1cc>)
 801b4aa:	f240 2281 	movw	r2, #641	; 0x281
 801b4ae:	496b      	ldr	r1, [pc, #428]	; (801b65c <tcp_listen_input+0x1d0>)
 801b4b0:	486b      	ldr	r0, [pc, #428]	; (801b660 <tcp_listen_input+0x1d4>)
 801b4b2:	f00b fa71 	bl	8026998 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801b4b6:	4b67      	ldr	r3, [pc, #412]	; (801b654 <tcp_listen_input+0x1c8>)
 801b4b8:	781b      	ldrb	r3, [r3, #0]
 801b4ba:	f003 0310 	and.w	r3, r3, #16
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	d019      	beq.n	801b4f6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b4c2:	4b68      	ldr	r3, [pc, #416]	; (801b664 <tcp_listen_input+0x1d8>)
 801b4c4:	6819      	ldr	r1, [r3, #0]
 801b4c6:	4b68      	ldr	r3, [pc, #416]	; (801b668 <tcp_listen_input+0x1dc>)
 801b4c8:	881b      	ldrh	r3, [r3, #0]
 801b4ca:	461a      	mov	r2, r3
 801b4cc:	4b67      	ldr	r3, [pc, #412]	; (801b66c <tcp_listen_input+0x1e0>)
 801b4ce:	681b      	ldr	r3, [r3, #0]
 801b4d0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b4d2:	4b67      	ldr	r3, [pc, #412]	; (801b670 <tcp_listen_input+0x1e4>)
 801b4d4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b4d6:	885b      	ldrh	r3, [r3, #2]
 801b4d8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b4da:	4a65      	ldr	r2, [pc, #404]	; (801b670 <tcp_listen_input+0x1e4>)
 801b4dc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b4de:	8812      	ldrh	r2, [r2, #0]
 801b4e0:	b292      	uxth	r2, r2
 801b4e2:	9202      	str	r2, [sp, #8]
 801b4e4:	9301      	str	r3, [sp, #4]
 801b4e6:	4b63      	ldr	r3, [pc, #396]	; (801b674 <tcp_listen_input+0x1e8>)
 801b4e8:	9300      	str	r3, [sp, #0]
 801b4ea:	4b63      	ldr	r3, [pc, #396]	; (801b678 <tcp_listen_input+0x1ec>)
 801b4ec:	4602      	mov	r2, r0
 801b4ee:	6878      	ldr	r0, [r7, #4]
 801b4f0:	f003 fbe8 	bl	801ecc4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801b4f4:	e0aa      	b.n	801b64c <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 801b4f6:	4b57      	ldr	r3, [pc, #348]	; (801b654 <tcp_listen_input+0x1c8>)
 801b4f8:	781b      	ldrb	r3, [r3, #0]
 801b4fa:	f003 0302 	and.w	r3, r3, #2
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	f000 80a4 	beq.w	801b64c <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	7d5b      	ldrb	r3, [r3, #21]
 801b508:	4618      	mov	r0, r3
 801b50a:	f7ff f85d 	bl	801a5c8 <tcp_alloc>
 801b50e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801b510:	697b      	ldr	r3, [r7, #20]
 801b512:	2b00      	cmp	r3, #0
 801b514:	d111      	bne.n	801b53a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	699b      	ldr	r3, [r3, #24]
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	d00a      	beq.n	801b534 <tcp_listen_input+0xa8>
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	699b      	ldr	r3, [r3, #24]
 801b522:	687a      	ldr	r2, [r7, #4]
 801b524:	6910      	ldr	r0, [r2, #16]
 801b526:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b52a:	2100      	movs	r1, #0
 801b52c:	4798      	blx	r3
 801b52e:	4603      	mov	r3, r0
 801b530:	73bb      	strb	r3, [r7, #14]
      return;
 801b532:	e08c      	b.n	801b64e <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801b534:	23f0      	movs	r3, #240	; 0xf0
 801b536:	73bb      	strb	r3, [r7, #14]
      return;
 801b538:	e089      	b.n	801b64e <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801b53a:	4b50      	ldr	r3, [pc, #320]	; (801b67c <tcp_listen_input+0x1f0>)
 801b53c:	695a      	ldr	r2, [r3, #20]
 801b53e:	697b      	ldr	r3, [r7, #20]
 801b540:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801b542:	4b4e      	ldr	r3, [pc, #312]	; (801b67c <tcp_listen_input+0x1f0>)
 801b544:	691a      	ldr	r2, [r3, #16]
 801b546:	697b      	ldr	r3, [r7, #20]
 801b548:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	8ada      	ldrh	r2, [r3, #22]
 801b54e:	697b      	ldr	r3, [r7, #20]
 801b550:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801b552:	4b47      	ldr	r3, [pc, #284]	; (801b670 <tcp_listen_input+0x1e4>)
 801b554:	681b      	ldr	r3, [r3, #0]
 801b556:	881b      	ldrh	r3, [r3, #0]
 801b558:	b29a      	uxth	r2, r3
 801b55a:	697b      	ldr	r3, [r7, #20]
 801b55c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801b55e:	697b      	ldr	r3, [r7, #20]
 801b560:	2203      	movs	r2, #3
 801b562:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801b564:	4b41      	ldr	r3, [pc, #260]	; (801b66c <tcp_listen_input+0x1e0>)
 801b566:	681b      	ldr	r3, [r3, #0]
 801b568:	1c5a      	adds	r2, r3, #1
 801b56a:	697b      	ldr	r3, [r7, #20]
 801b56c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801b56e:	697b      	ldr	r3, [r7, #20]
 801b570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b572:	697b      	ldr	r3, [r7, #20]
 801b574:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801b576:	6978      	ldr	r0, [r7, #20]
 801b578:	f7ff fa5c 	bl	801aa34 <tcp_next_iss>
 801b57c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801b57e:	697b      	ldr	r3, [r7, #20]
 801b580:	693a      	ldr	r2, [r7, #16]
 801b582:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801b584:	697b      	ldr	r3, [r7, #20]
 801b586:	693a      	ldr	r2, [r7, #16]
 801b588:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801b58a:	697b      	ldr	r3, [r7, #20]
 801b58c:	693a      	ldr	r2, [r7, #16]
 801b58e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801b590:	697b      	ldr	r3, [r7, #20]
 801b592:	693a      	ldr	r2, [r7, #16]
 801b594:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801b596:	4b35      	ldr	r3, [pc, #212]	; (801b66c <tcp_listen_input+0x1e0>)
 801b598:	681b      	ldr	r3, [r3, #0]
 801b59a:	1e5a      	subs	r2, r3, #1
 801b59c:	697b      	ldr	r3, [r7, #20]
 801b59e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801b5a0:	687b      	ldr	r3, [r7, #4]
 801b5a2:	691a      	ldr	r2, [r3, #16]
 801b5a4:	697b      	ldr	r3, [r7, #20]
 801b5a6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801b5a8:	697b      	ldr	r3, [r7, #20]
 801b5aa:	687a      	ldr	r2, [r7, #4]
 801b5ac:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801b5ae:	687b      	ldr	r3, [r7, #4]
 801b5b0:	7a5b      	ldrb	r3, [r3, #9]
 801b5b2:	f003 030c 	and.w	r3, r3, #12
 801b5b6:	b2da      	uxtb	r2, r3
 801b5b8:	697b      	ldr	r3, [r7, #20]
 801b5ba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	7a1a      	ldrb	r2, [r3, #8]
 801b5c0:	697b      	ldr	r3, [r7, #20]
 801b5c2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801b5c4:	4b2e      	ldr	r3, [pc, #184]	; (801b680 <tcp_listen_input+0x1f4>)
 801b5c6:	681a      	ldr	r2, [r3, #0]
 801b5c8:	697b      	ldr	r3, [r7, #20]
 801b5ca:	60da      	str	r2, [r3, #12]
 801b5cc:	4a2c      	ldr	r2, [pc, #176]	; (801b680 <tcp_listen_input+0x1f4>)
 801b5ce:	697b      	ldr	r3, [r7, #20]
 801b5d0:	6013      	str	r3, [r2, #0]
 801b5d2:	f003 fd37 	bl	801f044 <tcp_timer_needed>
 801b5d6:	4b2b      	ldr	r3, [pc, #172]	; (801b684 <tcp_listen_input+0x1f8>)
 801b5d8:	2201      	movs	r2, #1
 801b5da:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801b5dc:	6978      	ldr	r0, [r7, #20]
 801b5de:	f001 fd8f 	bl	801d100 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801b5e2:	4b23      	ldr	r3, [pc, #140]	; (801b670 <tcp_listen_input+0x1e4>)
 801b5e4:	681b      	ldr	r3, [r3, #0]
 801b5e6:	89db      	ldrh	r3, [r3, #14]
 801b5e8:	b29a      	uxth	r2, r3
 801b5ea:	697b      	ldr	r3, [r7, #20]
 801b5ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801b5f0:	697b      	ldr	r3, [r7, #20]
 801b5f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b5f6:	697b      	ldr	r3, [r7, #20]
 801b5f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801b5fc:	697b      	ldr	r3, [r7, #20]
 801b5fe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801b600:	697b      	ldr	r3, [r7, #20]
 801b602:	3304      	adds	r3, #4
 801b604:	4618      	mov	r0, r3
 801b606:	f007 fb6b 	bl	8022ce0 <ip4_route>
 801b60a:	4601      	mov	r1, r0
 801b60c:	697b      	ldr	r3, [r7, #20]
 801b60e:	3304      	adds	r3, #4
 801b610:	461a      	mov	r2, r3
 801b612:	4620      	mov	r0, r4
 801b614:	f7ff fa34 	bl	801aa80 <tcp_eff_send_mss_netif>
 801b618:	4603      	mov	r3, r0
 801b61a:	461a      	mov	r2, r3
 801b61c:	697b      	ldr	r3, [r7, #20]
 801b61e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801b620:	2112      	movs	r1, #18
 801b622:	6978      	ldr	r0, [r7, #20]
 801b624:	f002 fc9c 	bl	801df60 <tcp_enqueue_flags>
 801b628:	4603      	mov	r3, r0
 801b62a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801b62c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b630:	2b00      	cmp	r3, #0
 801b632:	d004      	beq.n	801b63e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801b634:	2100      	movs	r1, #0
 801b636:	6978      	ldr	r0, [r7, #20]
 801b638:	f7fd fdf8 	bl	801922c <tcp_abandon>
      return;
 801b63c:	e007      	b.n	801b64e <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 801b63e:	6978      	ldr	r0, [r7, #20]
 801b640:	f002 fd7c 	bl	801e13c <tcp_output>
  return;
 801b644:	bf00      	nop
 801b646:	e001      	b.n	801b64c <tcp_listen_input+0x1c0>
    return;
 801b648:	bf00      	nop
 801b64a:	e000      	b.n	801b64e <tcp_listen_input+0x1c2>
  return;
 801b64c:	bf00      	nop
}
 801b64e:	371c      	adds	r7, #28
 801b650:	46bd      	mov	sp, r7
 801b652:	bd90      	pop	{r4, r7, pc}
 801b654:	200131f0 	.word	0x200131f0
 801b658:	08029e7c 	.word	0x08029e7c
 801b65c:	0802a074 	.word	0x0802a074
 801b660:	08029ec8 	.word	0x08029ec8
 801b664:	200131e8 	.word	0x200131e8
 801b668:	200131ee 	.word	0x200131ee
 801b66c:	200131e4 	.word	0x200131e4
 801b670:	200131d4 	.word	0x200131d4
 801b674:	20016b50 	.word	0x20016b50
 801b678:	20016b54 	.word	0x20016b54
 801b67c:	20016b40 	.word	0x20016b40
 801b680:	20019ff4 	.word	0x20019ff4
 801b684:	20019ff0 	.word	0x20019ff0

0801b688 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801b688:	b580      	push	{r7, lr}
 801b68a:	b086      	sub	sp, #24
 801b68c:	af04      	add	r7, sp, #16
 801b68e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801b690:	4b30      	ldr	r3, [pc, #192]	; (801b754 <tcp_timewait_input+0xcc>)
 801b692:	781b      	ldrb	r3, [r3, #0]
 801b694:	f003 0304 	and.w	r3, r3, #4
 801b698:	2b00      	cmp	r3, #0
 801b69a:	d154      	bne.n	801b746 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801b69c:	687b      	ldr	r3, [r7, #4]
 801b69e:	2b00      	cmp	r3, #0
 801b6a0:	d106      	bne.n	801b6b0 <tcp_timewait_input+0x28>
 801b6a2:	4b2d      	ldr	r3, [pc, #180]	; (801b758 <tcp_timewait_input+0xd0>)
 801b6a4:	f240 22ee 	movw	r2, #750	; 0x2ee
 801b6a8:	492c      	ldr	r1, [pc, #176]	; (801b75c <tcp_timewait_input+0xd4>)
 801b6aa:	482d      	ldr	r0, [pc, #180]	; (801b760 <tcp_timewait_input+0xd8>)
 801b6ac:	f00b f974 	bl	8026998 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801b6b0:	4b28      	ldr	r3, [pc, #160]	; (801b754 <tcp_timewait_input+0xcc>)
 801b6b2:	781b      	ldrb	r3, [r3, #0]
 801b6b4:	f003 0302 	and.w	r3, r3, #2
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	d02a      	beq.n	801b712 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801b6bc:	4b29      	ldr	r3, [pc, #164]	; (801b764 <tcp_timewait_input+0xdc>)
 801b6be:	681a      	ldr	r2, [r3, #0]
 801b6c0:	687b      	ldr	r3, [r7, #4]
 801b6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b6c4:	1ad3      	subs	r3, r2, r3
 801b6c6:	2b00      	cmp	r3, #0
 801b6c8:	db2d      	blt.n	801b726 <tcp_timewait_input+0x9e>
 801b6ca:	4b26      	ldr	r3, [pc, #152]	; (801b764 <tcp_timewait_input+0xdc>)
 801b6cc:	681a      	ldr	r2, [r3, #0]
 801b6ce:	687b      	ldr	r3, [r7, #4]
 801b6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b6d2:	6879      	ldr	r1, [r7, #4]
 801b6d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b6d6:	440b      	add	r3, r1
 801b6d8:	1ad3      	subs	r3, r2, r3
 801b6da:	2b00      	cmp	r3, #0
 801b6dc:	dc23      	bgt.n	801b726 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b6de:	4b22      	ldr	r3, [pc, #136]	; (801b768 <tcp_timewait_input+0xe0>)
 801b6e0:	6819      	ldr	r1, [r3, #0]
 801b6e2:	4b22      	ldr	r3, [pc, #136]	; (801b76c <tcp_timewait_input+0xe4>)
 801b6e4:	881b      	ldrh	r3, [r3, #0]
 801b6e6:	461a      	mov	r2, r3
 801b6e8:	4b1e      	ldr	r3, [pc, #120]	; (801b764 <tcp_timewait_input+0xdc>)
 801b6ea:	681b      	ldr	r3, [r3, #0]
 801b6ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b6ee:	4b20      	ldr	r3, [pc, #128]	; (801b770 <tcp_timewait_input+0xe8>)
 801b6f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b6f2:	885b      	ldrh	r3, [r3, #2]
 801b6f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b6f6:	4a1e      	ldr	r2, [pc, #120]	; (801b770 <tcp_timewait_input+0xe8>)
 801b6f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b6fa:	8812      	ldrh	r2, [r2, #0]
 801b6fc:	b292      	uxth	r2, r2
 801b6fe:	9202      	str	r2, [sp, #8]
 801b700:	9301      	str	r3, [sp, #4]
 801b702:	4b1c      	ldr	r3, [pc, #112]	; (801b774 <tcp_timewait_input+0xec>)
 801b704:	9300      	str	r3, [sp, #0]
 801b706:	4b1c      	ldr	r3, [pc, #112]	; (801b778 <tcp_timewait_input+0xf0>)
 801b708:	4602      	mov	r2, r0
 801b70a:	6878      	ldr	r0, [r7, #4]
 801b70c:	f003 fada 	bl	801ecc4 <tcp_rst>
      return;
 801b710:	e01c      	b.n	801b74c <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 801b712:	4b10      	ldr	r3, [pc, #64]	; (801b754 <tcp_timewait_input+0xcc>)
 801b714:	781b      	ldrb	r3, [r3, #0]
 801b716:	f003 0301 	and.w	r3, r3, #1
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	d003      	beq.n	801b726 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801b71e:	4b17      	ldr	r3, [pc, #92]	; (801b77c <tcp_timewait_input+0xf4>)
 801b720:	681a      	ldr	r2, [r3, #0]
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801b726:	4b11      	ldr	r3, [pc, #68]	; (801b76c <tcp_timewait_input+0xe4>)
 801b728:	881b      	ldrh	r3, [r3, #0]
 801b72a:	2b00      	cmp	r3, #0
 801b72c:	d00d      	beq.n	801b74a <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801b72e:	687b      	ldr	r3, [r7, #4]
 801b730:	8b5b      	ldrh	r3, [r3, #26]
 801b732:	f043 0302 	orr.w	r3, r3, #2
 801b736:	b29a      	uxth	r2, r3
 801b738:	687b      	ldr	r3, [r7, #4]
 801b73a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801b73c:	6878      	ldr	r0, [r7, #4]
 801b73e:	f002 fcfd 	bl	801e13c <tcp_output>
  }
  return;
 801b742:	bf00      	nop
 801b744:	e001      	b.n	801b74a <tcp_timewait_input+0xc2>
    return;
 801b746:	bf00      	nop
 801b748:	e000      	b.n	801b74c <tcp_timewait_input+0xc4>
  return;
 801b74a:	bf00      	nop
}
 801b74c:	3708      	adds	r7, #8
 801b74e:	46bd      	mov	sp, r7
 801b750:	bd80      	pop	{r7, pc}
 801b752:	bf00      	nop
 801b754:	200131f0 	.word	0x200131f0
 801b758:	08029e7c 	.word	0x08029e7c
 801b75c:	0802a094 	.word	0x0802a094
 801b760:	08029ec8 	.word	0x08029ec8
 801b764:	200131e4 	.word	0x200131e4
 801b768:	200131e8 	.word	0x200131e8
 801b76c:	200131ee 	.word	0x200131ee
 801b770:	200131d4 	.word	0x200131d4
 801b774:	20016b50 	.word	0x20016b50
 801b778:	20016b54 	.word	0x20016b54
 801b77c:	20019ff8 	.word	0x20019ff8

0801b780 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801b780:	b590      	push	{r4, r7, lr}
 801b782:	b08d      	sub	sp, #52	; 0x34
 801b784:	af04      	add	r7, sp, #16
 801b786:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801b788:	2300      	movs	r3, #0
 801b78a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801b78c:	2300      	movs	r3, #0
 801b78e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	2b00      	cmp	r3, #0
 801b794:	d106      	bne.n	801b7a4 <tcp_process+0x24>
 801b796:	4ba5      	ldr	r3, [pc, #660]	; (801ba2c <tcp_process+0x2ac>)
 801b798:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801b79c:	49a4      	ldr	r1, [pc, #656]	; (801ba30 <tcp_process+0x2b0>)
 801b79e:	48a5      	ldr	r0, [pc, #660]	; (801ba34 <tcp_process+0x2b4>)
 801b7a0:	f00b f8fa 	bl	8026998 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801b7a4:	4ba4      	ldr	r3, [pc, #656]	; (801ba38 <tcp_process+0x2b8>)
 801b7a6:	781b      	ldrb	r3, [r3, #0]
 801b7a8:	f003 0304 	and.w	r3, r3, #4
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	d04e      	beq.n	801b84e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	7d1b      	ldrb	r3, [r3, #20]
 801b7b4:	2b02      	cmp	r3, #2
 801b7b6:	d108      	bne.n	801b7ca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801b7b8:	687b      	ldr	r3, [r7, #4]
 801b7ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b7bc:	4b9f      	ldr	r3, [pc, #636]	; (801ba3c <tcp_process+0x2bc>)
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	429a      	cmp	r2, r3
 801b7c2:	d123      	bne.n	801b80c <tcp_process+0x8c>
        acceptable = 1;
 801b7c4:	2301      	movs	r3, #1
 801b7c6:	76fb      	strb	r3, [r7, #27]
 801b7c8:	e020      	b.n	801b80c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b7ce:	4b9c      	ldr	r3, [pc, #624]	; (801ba40 <tcp_process+0x2c0>)
 801b7d0:	681b      	ldr	r3, [r3, #0]
 801b7d2:	429a      	cmp	r2, r3
 801b7d4:	d102      	bne.n	801b7dc <tcp_process+0x5c>
        acceptable = 1;
 801b7d6:	2301      	movs	r3, #1
 801b7d8:	76fb      	strb	r3, [r7, #27]
 801b7da:	e017      	b.n	801b80c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801b7dc:	4b98      	ldr	r3, [pc, #608]	; (801ba40 <tcp_process+0x2c0>)
 801b7de:	681a      	ldr	r2, [r3, #0]
 801b7e0:	687b      	ldr	r3, [r7, #4]
 801b7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b7e4:	1ad3      	subs	r3, r2, r3
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	db10      	blt.n	801b80c <tcp_process+0x8c>
 801b7ea:	4b95      	ldr	r3, [pc, #596]	; (801ba40 <tcp_process+0x2c0>)
 801b7ec:	681a      	ldr	r2, [r3, #0]
 801b7ee:	687b      	ldr	r3, [r7, #4]
 801b7f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b7f2:	6879      	ldr	r1, [r7, #4]
 801b7f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b7f6:	440b      	add	r3, r1
 801b7f8:	1ad3      	subs	r3, r2, r3
 801b7fa:	2b00      	cmp	r3, #0
 801b7fc:	dc06      	bgt.n	801b80c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801b7fe:	687b      	ldr	r3, [r7, #4]
 801b800:	8b5b      	ldrh	r3, [r3, #26]
 801b802:	f043 0302 	orr.w	r3, r3, #2
 801b806:	b29a      	uxth	r2, r3
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801b80c:	7efb      	ldrb	r3, [r7, #27]
 801b80e:	2b00      	cmp	r3, #0
 801b810:	d01b      	beq.n	801b84a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	7d1b      	ldrb	r3, [r3, #20]
 801b816:	2b00      	cmp	r3, #0
 801b818:	d106      	bne.n	801b828 <tcp_process+0xa8>
 801b81a:	4b84      	ldr	r3, [pc, #528]	; (801ba2c <tcp_process+0x2ac>)
 801b81c:	f44f 724e 	mov.w	r2, #824	; 0x338
 801b820:	4988      	ldr	r1, [pc, #544]	; (801ba44 <tcp_process+0x2c4>)
 801b822:	4884      	ldr	r0, [pc, #528]	; (801ba34 <tcp_process+0x2b4>)
 801b824:	f00b f8b8 	bl	8026998 <iprintf>
      recv_flags |= TF_RESET;
 801b828:	4b87      	ldr	r3, [pc, #540]	; (801ba48 <tcp_process+0x2c8>)
 801b82a:	781b      	ldrb	r3, [r3, #0]
 801b82c:	f043 0308 	orr.w	r3, r3, #8
 801b830:	b2da      	uxtb	r2, r3
 801b832:	4b85      	ldr	r3, [pc, #532]	; (801ba48 <tcp_process+0x2c8>)
 801b834:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	8b5b      	ldrh	r3, [r3, #26]
 801b83a:	f023 0301 	bic.w	r3, r3, #1
 801b83e:	b29a      	uxth	r2, r3
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801b844:	f06f 030d 	mvn.w	r3, #13
 801b848:	e37a      	b.n	801bf40 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801b84a:	2300      	movs	r3, #0
 801b84c:	e378      	b.n	801bf40 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801b84e:	4b7a      	ldr	r3, [pc, #488]	; (801ba38 <tcp_process+0x2b8>)
 801b850:	781b      	ldrb	r3, [r3, #0]
 801b852:	f003 0302 	and.w	r3, r3, #2
 801b856:	2b00      	cmp	r3, #0
 801b858:	d010      	beq.n	801b87c <tcp_process+0xfc>
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	7d1b      	ldrb	r3, [r3, #20]
 801b85e:	2b02      	cmp	r3, #2
 801b860:	d00c      	beq.n	801b87c <tcp_process+0xfc>
 801b862:	687b      	ldr	r3, [r7, #4]
 801b864:	7d1b      	ldrb	r3, [r3, #20]
 801b866:	2b03      	cmp	r3, #3
 801b868:	d008      	beq.n	801b87c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	8b5b      	ldrh	r3, [r3, #26]
 801b86e:	f043 0302 	orr.w	r3, r3, #2
 801b872:	b29a      	uxth	r2, r3
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801b878:	2300      	movs	r3, #0
 801b87a:	e361      	b.n	801bf40 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	8b5b      	ldrh	r3, [r3, #26]
 801b880:	f003 0310 	and.w	r3, r3, #16
 801b884:	2b00      	cmp	r3, #0
 801b886:	d103      	bne.n	801b890 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801b888:	4b70      	ldr	r3, [pc, #448]	; (801ba4c <tcp_process+0x2cc>)
 801b88a:	681a      	ldr	r2, [r3, #0]
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	2200      	movs	r2, #0
 801b894:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	2200      	movs	r2, #0
 801b89c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801b8a0:	6878      	ldr	r0, [r7, #4]
 801b8a2:	f001 fc2d 	bl	801d100 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	7d1b      	ldrb	r3, [r3, #20]
 801b8aa:	3b02      	subs	r3, #2
 801b8ac:	2b07      	cmp	r3, #7
 801b8ae:	f200 8337 	bhi.w	801bf20 <tcp_process+0x7a0>
 801b8b2:	a201      	add	r2, pc, #4	; (adr r2, 801b8b8 <tcp_process+0x138>)
 801b8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b8b8:	0801b8d9 	.word	0x0801b8d9
 801b8bc:	0801bb09 	.word	0x0801bb09
 801b8c0:	0801bc81 	.word	0x0801bc81
 801b8c4:	0801bcab 	.word	0x0801bcab
 801b8c8:	0801bdcf 	.word	0x0801bdcf
 801b8cc:	0801bc81 	.word	0x0801bc81
 801b8d0:	0801be5b 	.word	0x0801be5b
 801b8d4:	0801beeb 	.word	0x0801beeb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801b8d8:	4b57      	ldr	r3, [pc, #348]	; (801ba38 <tcp_process+0x2b8>)
 801b8da:	781b      	ldrb	r3, [r3, #0]
 801b8dc:	f003 0310 	and.w	r3, r3, #16
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	f000 80e4 	beq.w	801baae <tcp_process+0x32e>
 801b8e6:	4b54      	ldr	r3, [pc, #336]	; (801ba38 <tcp_process+0x2b8>)
 801b8e8:	781b      	ldrb	r3, [r3, #0]
 801b8ea:	f003 0302 	and.w	r3, r3, #2
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	f000 80dd 	beq.w	801baae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b8f8:	1c5a      	adds	r2, r3, #1
 801b8fa:	4b50      	ldr	r3, [pc, #320]	; (801ba3c <tcp_process+0x2bc>)
 801b8fc:	681b      	ldr	r3, [r3, #0]
 801b8fe:	429a      	cmp	r2, r3
 801b900:	f040 80d5 	bne.w	801baae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801b904:	4b4e      	ldr	r3, [pc, #312]	; (801ba40 <tcp_process+0x2c0>)
 801b906:	681b      	ldr	r3, [r3, #0]
 801b908:	1c5a      	adds	r2, r3, #1
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801b916:	4b49      	ldr	r3, [pc, #292]	; (801ba3c <tcp_process+0x2bc>)
 801b918:	681a      	ldr	r2, [r3, #0]
 801b91a:	687b      	ldr	r3, [r7, #4]
 801b91c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801b91e:	4b4c      	ldr	r3, [pc, #304]	; (801ba50 <tcp_process+0x2d0>)
 801b920:	681b      	ldr	r3, [r3, #0]
 801b922:	89db      	ldrh	r3, [r3, #14]
 801b924:	b29a      	uxth	r2, r3
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801b938:	4b41      	ldr	r3, [pc, #260]	; (801ba40 <tcp_process+0x2c0>)
 801b93a:	681b      	ldr	r3, [r3, #0]
 801b93c:	1e5a      	subs	r2, r3, #1
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	2204      	movs	r2, #4
 801b946:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801b94c:	687b      	ldr	r3, [r7, #4]
 801b94e:	3304      	adds	r3, #4
 801b950:	4618      	mov	r0, r3
 801b952:	f007 f9c5 	bl	8022ce0 <ip4_route>
 801b956:	4601      	mov	r1, r0
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	3304      	adds	r3, #4
 801b95c:	461a      	mov	r2, r3
 801b95e:	4620      	mov	r0, r4
 801b960:	f7ff f88e 	bl	801aa80 <tcp_eff_send_mss_netif>
 801b964:	4603      	mov	r3, r0
 801b966:	461a      	mov	r2, r3
 801b968:	687b      	ldr	r3, [r7, #4]
 801b96a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b970:	009a      	lsls	r2, r3, #2
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b976:	005b      	lsls	r3, r3, #1
 801b978:	f241 111c 	movw	r1, #4380	; 0x111c
 801b97c:	428b      	cmp	r3, r1
 801b97e:	bf38      	it	cc
 801b980:	460b      	movcc	r3, r1
 801b982:	429a      	cmp	r2, r3
 801b984:	d204      	bcs.n	801b990 <tcp_process+0x210>
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b98a:	009b      	lsls	r3, r3, #2
 801b98c:	b29b      	uxth	r3, r3
 801b98e:	e00d      	b.n	801b9ac <tcp_process+0x22c>
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b994:	005b      	lsls	r3, r3, #1
 801b996:	f241 121c 	movw	r2, #4380	; 0x111c
 801b99a:	4293      	cmp	r3, r2
 801b99c:	d904      	bls.n	801b9a8 <tcp_process+0x228>
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b9a2:	005b      	lsls	r3, r3, #1
 801b9a4:	b29b      	uxth	r3, r3
 801b9a6:	e001      	b.n	801b9ac <tcp_process+0x22c>
 801b9a8:	f241 131c 	movw	r3, #4380	; 0x111c
 801b9ac:	687a      	ldr	r2, [r7, #4]
 801b9ae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	d106      	bne.n	801b9ca <tcp_process+0x24a>
 801b9bc:	4b1b      	ldr	r3, [pc, #108]	; (801ba2c <tcp_process+0x2ac>)
 801b9be:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801b9c2:	4924      	ldr	r1, [pc, #144]	; (801ba54 <tcp_process+0x2d4>)
 801b9c4:	481b      	ldr	r0, [pc, #108]	; (801ba34 <tcp_process+0x2b4>)
 801b9c6:	f00a ffe7 	bl	8026998 <iprintf>
        --pcb->snd_queuelen;
 801b9ca:	687b      	ldr	r3, [r7, #4]
 801b9cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b9d0:	3b01      	subs	r3, #1
 801b9d2:	b29a      	uxth	r2, r3
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801b9da:	687b      	ldr	r3, [r7, #4]
 801b9dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b9de:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801b9e0:	69fb      	ldr	r3, [r7, #28]
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	d111      	bne.n	801ba0a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b9ea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801b9ec:	69fb      	ldr	r3, [r7, #28]
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	d106      	bne.n	801ba00 <tcp_process+0x280>
 801b9f2:	4b0e      	ldr	r3, [pc, #56]	; (801ba2c <tcp_process+0x2ac>)
 801b9f4:	f44f 725d 	mov.w	r2, #884	; 0x374
 801b9f8:	4917      	ldr	r1, [pc, #92]	; (801ba58 <tcp_process+0x2d8>)
 801b9fa:	480e      	ldr	r0, [pc, #56]	; (801ba34 <tcp_process+0x2b4>)
 801b9fc:	f00a ffcc 	bl	8026998 <iprintf>
          pcb->unsent = rseg->next;
 801ba00:	69fb      	ldr	r3, [r7, #28]
 801ba02:	681a      	ldr	r2, [r3, #0]
 801ba04:	687b      	ldr	r3, [r7, #4]
 801ba06:	66da      	str	r2, [r3, #108]	; 0x6c
 801ba08:	e003      	b.n	801ba12 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801ba0a:	69fb      	ldr	r3, [r7, #28]
 801ba0c:	681a      	ldr	r2, [r3, #0]
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801ba12:	69f8      	ldr	r0, [r7, #28]
 801ba14:	f7fe fc70 	bl	801a2f8 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d11d      	bne.n	801ba5c <tcp_process+0x2dc>
          pcb->rtime = -1;
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ba26:	861a      	strh	r2, [r3, #48]	; 0x30
 801ba28:	e01f      	b.n	801ba6a <tcp_process+0x2ea>
 801ba2a:	bf00      	nop
 801ba2c:	08029e7c 	.word	0x08029e7c
 801ba30:	0802a0b4 	.word	0x0802a0b4
 801ba34:	08029ec8 	.word	0x08029ec8
 801ba38:	200131f0 	.word	0x200131f0
 801ba3c:	200131e8 	.word	0x200131e8
 801ba40:	200131e4 	.word	0x200131e4
 801ba44:	0802a0d0 	.word	0x0802a0d0
 801ba48:	200131f1 	.word	0x200131f1
 801ba4c:	20019ff8 	.word	0x20019ff8
 801ba50:	200131d4 	.word	0x200131d4
 801ba54:	0802a0f0 	.word	0x0802a0f0
 801ba58:	0802a108 	.word	0x0802a108
        } else {
          pcb->rtime = 0;
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	2200      	movs	r2, #0
 801ba60:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	2200      	movs	r2, #0
 801ba66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ba70:	2b00      	cmp	r3, #0
 801ba72:	d00a      	beq.n	801ba8a <tcp_process+0x30a>
 801ba74:	687b      	ldr	r3, [r7, #4]
 801ba76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ba7a:	687a      	ldr	r2, [r7, #4]
 801ba7c:	6910      	ldr	r0, [r2, #16]
 801ba7e:	2200      	movs	r2, #0
 801ba80:	6879      	ldr	r1, [r7, #4]
 801ba82:	4798      	blx	r3
 801ba84:	4603      	mov	r3, r0
 801ba86:	76bb      	strb	r3, [r7, #26]
 801ba88:	e001      	b.n	801ba8e <tcp_process+0x30e>
 801ba8a:	2300      	movs	r3, #0
 801ba8c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801ba8e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801ba92:	f113 0f0d 	cmn.w	r3, #13
 801ba96:	d102      	bne.n	801ba9e <tcp_process+0x31e>
          return ERR_ABRT;
 801ba98:	f06f 030c 	mvn.w	r3, #12
 801ba9c:	e250      	b.n	801bf40 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	8b5b      	ldrh	r3, [r3, #26]
 801baa2:	f043 0302 	orr.w	r3, r3, #2
 801baa6:	b29a      	uxth	r2, r3
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801baac:	e23a      	b.n	801bf24 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801baae:	4b9d      	ldr	r3, [pc, #628]	; (801bd24 <tcp_process+0x5a4>)
 801bab0:	781b      	ldrb	r3, [r3, #0]
 801bab2:	f003 0310 	and.w	r3, r3, #16
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	f000 8234 	beq.w	801bf24 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801babc:	4b9a      	ldr	r3, [pc, #616]	; (801bd28 <tcp_process+0x5a8>)
 801babe:	6819      	ldr	r1, [r3, #0]
 801bac0:	4b9a      	ldr	r3, [pc, #616]	; (801bd2c <tcp_process+0x5ac>)
 801bac2:	881b      	ldrh	r3, [r3, #0]
 801bac4:	461a      	mov	r2, r3
 801bac6:	4b9a      	ldr	r3, [pc, #616]	; (801bd30 <tcp_process+0x5b0>)
 801bac8:	681b      	ldr	r3, [r3, #0]
 801baca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bacc:	4b99      	ldr	r3, [pc, #612]	; (801bd34 <tcp_process+0x5b4>)
 801bace:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bad0:	885b      	ldrh	r3, [r3, #2]
 801bad2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bad4:	4a97      	ldr	r2, [pc, #604]	; (801bd34 <tcp_process+0x5b4>)
 801bad6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bad8:	8812      	ldrh	r2, [r2, #0]
 801bada:	b292      	uxth	r2, r2
 801badc:	9202      	str	r2, [sp, #8]
 801bade:	9301      	str	r3, [sp, #4]
 801bae0:	4b95      	ldr	r3, [pc, #596]	; (801bd38 <tcp_process+0x5b8>)
 801bae2:	9300      	str	r3, [sp, #0]
 801bae4:	4b95      	ldr	r3, [pc, #596]	; (801bd3c <tcp_process+0x5bc>)
 801bae6:	4602      	mov	r2, r0
 801bae8:	6878      	ldr	r0, [r7, #4]
 801baea:	f003 f8eb 	bl	801ecc4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801baf4:	2b05      	cmp	r3, #5
 801baf6:	f200 8215 	bhi.w	801bf24 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	2200      	movs	r2, #0
 801bafe:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801bb00:	6878      	ldr	r0, [r7, #4]
 801bb02:	f002 feab 	bl	801e85c <tcp_rexmit_rto>
      break;
 801bb06:	e20d      	b.n	801bf24 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801bb08:	4b86      	ldr	r3, [pc, #536]	; (801bd24 <tcp_process+0x5a4>)
 801bb0a:	781b      	ldrb	r3, [r3, #0]
 801bb0c:	f003 0310 	and.w	r3, r3, #16
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	f000 80a1 	beq.w	801bc58 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801bb16:	4b84      	ldr	r3, [pc, #528]	; (801bd28 <tcp_process+0x5a8>)
 801bb18:	681a      	ldr	r2, [r3, #0]
 801bb1a:	687b      	ldr	r3, [r7, #4]
 801bb1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bb1e:	1ad3      	subs	r3, r2, r3
 801bb20:	3b01      	subs	r3, #1
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	db7e      	blt.n	801bc24 <tcp_process+0x4a4>
 801bb26:	4b80      	ldr	r3, [pc, #512]	; (801bd28 <tcp_process+0x5a8>)
 801bb28:	681a      	ldr	r2, [r3, #0]
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bb2e:	1ad3      	subs	r3, r2, r3
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	dc77      	bgt.n	801bc24 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	2204      	movs	r2, #4
 801bb38:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bb3e:	2b00      	cmp	r3, #0
 801bb40:	d102      	bne.n	801bb48 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801bb42:	23fa      	movs	r3, #250	; 0xfa
 801bb44:	76bb      	strb	r3, [r7, #26]
 801bb46:	e01d      	b.n	801bb84 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bb4c:	699b      	ldr	r3, [r3, #24]
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	d106      	bne.n	801bb60 <tcp_process+0x3e0>
 801bb52:	4b7b      	ldr	r3, [pc, #492]	; (801bd40 <tcp_process+0x5c0>)
 801bb54:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801bb58:	497a      	ldr	r1, [pc, #488]	; (801bd44 <tcp_process+0x5c4>)
 801bb5a:	487b      	ldr	r0, [pc, #492]	; (801bd48 <tcp_process+0x5c8>)
 801bb5c:	f00a ff1c 	bl	8026998 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bb64:	699b      	ldr	r3, [r3, #24]
 801bb66:	2b00      	cmp	r3, #0
 801bb68:	d00a      	beq.n	801bb80 <tcp_process+0x400>
 801bb6a:	687b      	ldr	r3, [r7, #4]
 801bb6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bb6e:	699b      	ldr	r3, [r3, #24]
 801bb70:	687a      	ldr	r2, [r7, #4]
 801bb72:	6910      	ldr	r0, [r2, #16]
 801bb74:	2200      	movs	r2, #0
 801bb76:	6879      	ldr	r1, [r7, #4]
 801bb78:	4798      	blx	r3
 801bb7a:	4603      	mov	r3, r0
 801bb7c:	76bb      	strb	r3, [r7, #26]
 801bb7e:	e001      	b.n	801bb84 <tcp_process+0x404>
 801bb80:	23f0      	movs	r3, #240	; 0xf0
 801bb82:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801bb84:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	d00a      	beq.n	801bba2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801bb8c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801bb90:	f113 0f0d 	cmn.w	r3, #13
 801bb94:	d002      	beq.n	801bb9c <tcp_process+0x41c>
              tcp_abort(pcb);
 801bb96:	6878      	ldr	r0, [r7, #4]
 801bb98:	f7fd fc06 	bl	80193a8 <tcp_abort>
            }
            return ERR_ABRT;
 801bb9c:	f06f 030c 	mvn.w	r3, #12
 801bba0:	e1ce      	b.n	801bf40 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801bba2:	6878      	ldr	r0, [r7, #4]
 801bba4:	f000 fae0 	bl	801c168 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801bba8:	4b68      	ldr	r3, [pc, #416]	; (801bd4c <tcp_process+0x5cc>)
 801bbaa:	881b      	ldrh	r3, [r3, #0]
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	d005      	beq.n	801bbbc <tcp_process+0x43c>
            recv_acked--;
 801bbb0:	4b66      	ldr	r3, [pc, #408]	; (801bd4c <tcp_process+0x5cc>)
 801bbb2:	881b      	ldrh	r3, [r3, #0]
 801bbb4:	3b01      	subs	r3, #1
 801bbb6:	b29a      	uxth	r2, r3
 801bbb8:	4b64      	ldr	r3, [pc, #400]	; (801bd4c <tcp_process+0x5cc>)
 801bbba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bbc0:	009a      	lsls	r2, r3, #2
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bbc6:	005b      	lsls	r3, r3, #1
 801bbc8:	f241 111c 	movw	r1, #4380	; 0x111c
 801bbcc:	428b      	cmp	r3, r1
 801bbce:	bf38      	it	cc
 801bbd0:	460b      	movcc	r3, r1
 801bbd2:	429a      	cmp	r2, r3
 801bbd4:	d204      	bcs.n	801bbe0 <tcp_process+0x460>
 801bbd6:	687b      	ldr	r3, [r7, #4]
 801bbd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bbda:	009b      	lsls	r3, r3, #2
 801bbdc:	b29b      	uxth	r3, r3
 801bbde:	e00d      	b.n	801bbfc <tcp_process+0x47c>
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bbe4:	005b      	lsls	r3, r3, #1
 801bbe6:	f241 121c 	movw	r2, #4380	; 0x111c
 801bbea:	4293      	cmp	r3, r2
 801bbec:	d904      	bls.n	801bbf8 <tcp_process+0x478>
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bbf2:	005b      	lsls	r3, r3, #1
 801bbf4:	b29b      	uxth	r3, r3
 801bbf6:	e001      	b.n	801bbfc <tcp_process+0x47c>
 801bbf8:	f241 131c 	movw	r3, #4380	; 0x111c
 801bbfc:	687a      	ldr	r2, [r7, #4]
 801bbfe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801bc02:	4b53      	ldr	r3, [pc, #332]	; (801bd50 <tcp_process+0x5d0>)
 801bc04:	781b      	ldrb	r3, [r3, #0]
 801bc06:	f003 0320 	and.w	r3, r3, #32
 801bc0a:	2b00      	cmp	r3, #0
 801bc0c:	d037      	beq.n	801bc7e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	8b5b      	ldrh	r3, [r3, #26]
 801bc12:	f043 0302 	orr.w	r3, r3, #2
 801bc16:	b29a      	uxth	r2, r3
 801bc18:	687b      	ldr	r3, [r7, #4]
 801bc1a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	2207      	movs	r2, #7
 801bc20:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801bc22:	e02c      	b.n	801bc7e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bc24:	4b40      	ldr	r3, [pc, #256]	; (801bd28 <tcp_process+0x5a8>)
 801bc26:	6819      	ldr	r1, [r3, #0]
 801bc28:	4b40      	ldr	r3, [pc, #256]	; (801bd2c <tcp_process+0x5ac>)
 801bc2a:	881b      	ldrh	r3, [r3, #0]
 801bc2c:	461a      	mov	r2, r3
 801bc2e:	4b40      	ldr	r3, [pc, #256]	; (801bd30 <tcp_process+0x5b0>)
 801bc30:	681b      	ldr	r3, [r3, #0]
 801bc32:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bc34:	4b3f      	ldr	r3, [pc, #252]	; (801bd34 <tcp_process+0x5b4>)
 801bc36:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bc38:	885b      	ldrh	r3, [r3, #2]
 801bc3a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bc3c:	4a3d      	ldr	r2, [pc, #244]	; (801bd34 <tcp_process+0x5b4>)
 801bc3e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bc40:	8812      	ldrh	r2, [r2, #0]
 801bc42:	b292      	uxth	r2, r2
 801bc44:	9202      	str	r2, [sp, #8]
 801bc46:	9301      	str	r3, [sp, #4]
 801bc48:	4b3b      	ldr	r3, [pc, #236]	; (801bd38 <tcp_process+0x5b8>)
 801bc4a:	9300      	str	r3, [sp, #0]
 801bc4c:	4b3b      	ldr	r3, [pc, #236]	; (801bd3c <tcp_process+0x5bc>)
 801bc4e:	4602      	mov	r2, r0
 801bc50:	6878      	ldr	r0, [r7, #4]
 801bc52:	f003 f837 	bl	801ecc4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801bc56:	e167      	b.n	801bf28 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801bc58:	4b32      	ldr	r3, [pc, #200]	; (801bd24 <tcp_process+0x5a4>)
 801bc5a:	781b      	ldrb	r3, [r3, #0]
 801bc5c:	f003 0302 	and.w	r3, r3, #2
 801bc60:	2b00      	cmp	r3, #0
 801bc62:	f000 8161 	beq.w	801bf28 <tcp_process+0x7a8>
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc6a:	1e5a      	subs	r2, r3, #1
 801bc6c:	4b30      	ldr	r3, [pc, #192]	; (801bd30 <tcp_process+0x5b0>)
 801bc6e:	681b      	ldr	r3, [r3, #0]
 801bc70:	429a      	cmp	r2, r3
 801bc72:	f040 8159 	bne.w	801bf28 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801bc76:	6878      	ldr	r0, [r7, #4]
 801bc78:	f002 fe12 	bl	801e8a0 <tcp_rexmit>
      break;
 801bc7c:	e154      	b.n	801bf28 <tcp_process+0x7a8>
 801bc7e:	e153      	b.n	801bf28 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801bc80:	6878      	ldr	r0, [r7, #4]
 801bc82:	f000 fa71 	bl	801c168 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801bc86:	4b32      	ldr	r3, [pc, #200]	; (801bd50 <tcp_process+0x5d0>)
 801bc88:	781b      	ldrb	r3, [r3, #0]
 801bc8a:	f003 0320 	and.w	r3, r3, #32
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	f000 814c 	beq.w	801bf2c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801bc94:	687b      	ldr	r3, [r7, #4]
 801bc96:	8b5b      	ldrh	r3, [r3, #26]
 801bc98:	f043 0302 	orr.w	r3, r3, #2
 801bc9c:	b29a      	uxth	r2, r3
 801bc9e:	687b      	ldr	r3, [r7, #4]
 801bca0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801bca2:	687b      	ldr	r3, [r7, #4]
 801bca4:	2207      	movs	r2, #7
 801bca6:	751a      	strb	r2, [r3, #20]
      }
      break;
 801bca8:	e140      	b.n	801bf2c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801bcaa:	6878      	ldr	r0, [r7, #4]
 801bcac:	f000 fa5c 	bl	801c168 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801bcb0:	4b27      	ldr	r3, [pc, #156]	; (801bd50 <tcp_process+0x5d0>)
 801bcb2:	781b      	ldrb	r3, [r3, #0]
 801bcb4:	f003 0320 	and.w	r3, r3, #32
 801bcb8:	2b00      	cmp	r3, #0
 801bcba:	d071      	beq.n	801bda0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801bcbc:	4b19      	ldr	r3, [pc, #100]	; (801bd24 <tcp_process+0x5a4>)
 801bcbe:	781b      	ldrb	r3, [r3, #0]
 801bcc0:	f003 0310 	and.w	r3, r3, #16
 801bcc4:	2b00      	cmp	r3, #0
 801bcc6:	d060      	beq.n	801bd8a <tcp_process+0x60a>
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bccc:	4b16      	ldr	r3, [pc, #88]	; (801bd28 <tcp_process+0x5a8>)
 801bcce:	681b      	ldr	r3, [r3, #0]
 801bcd0:	429a      	cmp	r2, r3
 801bcd2:	d15a      	bne.n	801bd8a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801bcd4:	687b      	ldr	r3, [r7, #4]
 801bcd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801bcd8:	2b00      	cmp	r3, #0
 801bcda:	d156      	bne.n	801bd8a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	8b5b      	ldrh	r3, [r3, #26]
 801bce0:	f043 0302 	orr.w	r3, r3, #2
 801bce4:	b29a      	uxth	r2, r3
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801bcea:	6878      	ldr	r0, [r7, #4]
 801bcec:	f7fe fdbe 	bl	801a86c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801bcf0:	4b18      	ldr	r3, [pc, #96]	; (801bd54 <tcp_process+0x5d4>)
 801bcf2:	681b      	ldr	r3, [r3, #0]
 801bcf4:	687a      	ldr	r2, [r7, #4]
 801bcf6:	429a      	cmp	r2, r3
 801bcf8:	d105      	bne.n	801bd06 <tcp_process+0x586>
 801bcfa:	4b16      	ldr	r3, [pc, #88]	; (801bd54 <tcp_process+0x5d4>)
 801bcfc:	681b      	ldr	r3, [r3, #0]
 801bcfe:	68db      	ldr	r3, [r3, #12]
 801bd00:	4a14      	ldr	r2, [pc, #80]	; (801bd54 <tcp_process+0x5d4>)
 801bd02:	6013      	str	r3, [r2, #0]
 801bd04:	e02e      	b.n	801bd64 <tcp_process+0x5e4>
 801bd06:	4b13      	ldr	r3, [pc, #76]	; (801bd54 <tcp_process+0x5d4>)
 801bd08:	681b      	ldr	r3, [r3, #0]
 801bd0a:	617b      	str	r3, [r7, #20]
 801bd0c:	e027      	b.n	801bd5e <tcp_process+0x5de>
 801bd0e:	697b      	ldr	r3, [r7, #20]
 801bd10:	68db      	ldr	r3, [r3, #12]
 801bd12:	687a      	ldr	r2, [r7, #4]
 801bd14:	429a      	cmp	r2, r3
 801bd16:	d11f      	bne.n	801bd58 <tcp_process+0x5d8>
 801bd18:	687b      	ldr	r3, [r7, #4]
 801bd1a:	68da      	ldr	r2, [r3, #12]
 801bd1c:	697b      	ldr	r3, [r7, #20]
 801bd1e:	60da      	str	r2, [r3, #12]
 801bd20:	e020      	b.n	801bd64 <tcp_process+0x5e4>
 801bd22:	bf00      	nop
 801bd24:	200131f0 	.word	0x200131f0
 801bd28:	200131e8 	.word	0x200131e8
 801bd2c:	200131ee 	.word	0x200131ee
 801bd30:	200131e4 	.word	0x200131e4
 801bd34:	200131d4 	.word	0x200131d4
 801bd38:	20016b50 	.word	0x20016b50
 801bd3c:	20016b54 	.word	0x20016b54
 801bd40:	08029e7c 	.word	0x08029e7c
 801bd44:	0802a11c 	.word	0x0802a11c
 801bd48:	08029ec8 	.word	0x08029ec8
 801bd4c:	200131ec 	.word	0x200131ec
 801bd50:	200131f1 	.word	0x200131f1
 801bd54:	20019ff4 	.word	0x20019ff4
 801bd58:	697b      	ldr	r3, [r7, #20]
 801bd5a:	68db      	ldr	r3, [r3, #12]
 801bd5c:	617b      	str	r3, [r7, #20]
 801bd5e:	697b      	ldr	r3, [r7, #20]
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	d1d4      	bne.n	801bd0e <tcp_process+0x58e>
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	2200      	movs	r2, #0
 801bd68:	60da      	str	r2, [r3, #12]
 801bd6a:	4b77      	ldr	r3, [pc, #476]	; (801bf48 <tcp_process+0x7c8>)
 801bd6c:	2201      	movs	r2, #1
 801bd6e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801bd70:	687b      	ldr	r3, [r7, #4]
 801bd72:	220a      	movs	r2, #10
 801bd74:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801bd76:	4b75      	ldr	r3, [pc, #468]	; (801bf4c <tcp_process+0x7cc>)
 801bd78:	681a      	ldr	r2, [r3, #0]
 801bd7a:	687b      	ldr	r3, [r7, #4]
 801bd7c:	60da      	str	r2, [r3, #12]
 801bd7e:	4a73      	ldr	r2, [pc, #460]	; (801bf4c <tcp_process+0x7cc>)
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	6013      	str	r3, [r2, #0]
 801bd84:	f003 f95e 	bl	801f044 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801bd88:	e0d2      	b.n	801bf30 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	8b5b      	ldrh	r3, [r3, #26]
 801bd8e:	f043 0302 	orr.w	r3, r3, #2
 801bd92:	b29a      	uxth	r2, r3
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801bd98:	687b      	ldr	r3, [r7, #4]
 801bd9a:	2208      	movs	r2, #8
 801bd9c:	751a      	strb	r2, [r3, #20]
      break;
 801bd9e:	e0c7      	b.n	801bf30 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801bda0:	4b6b      	ldr	r3, [pc, #428]	; (801bf50 <tcp_process+0x7d0>)
 801bda2:	781b      	ldrb	r3, [r3, #0]
 801bda4:	f003 0310 	and.w	r3, r3, #16
 801bda8:	2b00      	cmp	r3, #0
 801bdaa:	f000 80c1 	beq.w	801bf30 <tcp_process+0x7b0>
 801bdae:	687b      	ldr	r3, [r7, #4]
 801bdb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bdb2:	4b68      	ldr	r3, [pc, #416]	; (801bf54 <tcp_process+0x7d4>)
 801bdb4:	681b      	ldr	r3, [r3, #0]
 801bdb6:	429a      	cmp	r2, r3
 801bdb8:	f040 80ba 	bne.w	801bf30 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801bdbc:	687b      	ldr	r3, [r7, #4]
 801bdbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	f040 80b5 	bne.w	801bf30 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	2206      	movs	r2, #6
 801bdca:	751a      	strb	r2, [r3, #20]
      break;
 801bdcc:	e0b0      	b.n	801bf30 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801bdce:	6878      	ldr	r0, [r7, #4]
 801bdd0:	f000 f9ca 	bl	801c168 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801bdd4:	4b60      	ldr	r3, [pc, #384]	; (801bf58 <tcp_process+0x7d8>)
 801bdd6:	781b      	ldrb	r3, [r3, #0]
 801bdd8:	f003 0320 	and.w	r3, r3, #32
 801bddc:	2b00      	cmp	r3, #0
 801bdde:	f000 80a9 	beq.w	801bf34 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	8b5b      	ldrh	r3, [r3, #26]
 801bde6:	f043 0302 	orr.w	r3, r3, #2
 801bdea:	b29a      	uxth	r2, r3
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801bdf0:	6878      	ldr	r0, [r7, #4]
 801bdf2:	f7fe fd3b 	bl	801a86c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801bdf6:	4b59      	ldr	r3, [pc, #356]	; (801bf5c <tcp_process+0x7dc>)
 801bdf8:	681b      	ldr	r3, [r3, #0]
 801bdfa:	687a      	ldr	r2, [r7, #4]
 801bdfc:	429a      	cmp	r2, r3
 801bdfe:	d105      	bne.n	801be0c <tcp_process+0x68c>
 801be00:	4b56      	ldr	r3, [pc, #344]	; (801bf5c <tcp_process+0x7dc>)
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	68db      	ldr	r3, [r3, #12]
 801be06:	4a55      	ldr	r2, [pc, #340]	; (801bf5c <tcp_process+0x7dc>)
 801be08:	6013      	str	r3, [r2, #0]
 801be0a:	e013      	b.n	801be34 <tcp_process+0x6b4>
 801be0c:	4b53      	ldr	r3, [pc, #332]	; (801bf5c <tcp_process+0x7dc>)
 801be0e:	681b      	ldr	r3, [r3, #0]
 801be10:	613b      	str	r3, [r7, #16]
 801be12:	e00c      	b.n	801be2e <tcp_process+0x6ae>
 801be14:	693b      	ldr	r3, [r7, #16]
 801be16:	68db      	ldr	r3, [r3, #12]
 801be18:	687a      	ldr	r2, [r7, #4]
 801be1a:	429a      	cmp	r2, r3
 801be1c:	d104      	bne.n	801be28 <tcp_process+0x6a8>
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	68da      	ldr	r2, [r3, #12]
 801be22:	693b      	ldr	r3, [r7, #16]
 801be24:	60da      	str	r2, [r3, #12]
 801be26:	e005      	b.n	801be34 <tcp_process+0x6b4>
 801be28:	693b      	ldr	r3, [r7, #16]
 801be2a:	68db      	ldr	r3, [r3, #12]
 801be2c:	613b      	str	r3, [r7, #16]
 801be2e:	693b      	ldr	r3, [r7, #16]
 801be30:	2b00      	cmp	r3, #0
 801be32:	d1ef      	bne.n	801be14 <tcp_process+0x694>
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	2200      	movs	r2, #0
 801be38:	60da      	str	r2, [r3, #12]
 801be3a:	4b43      	ldr	r3, [pc, #268]	; (801bf48 <tcp_process+0x7c8>)
 801be3c:	2201      	movs	r2, #1
 801be3e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	220a      	movs	r2, #10
 801be44:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801be46:	4b41      	ldr	r3, [pc, #260]	; (801bf4c <tcp_process+0x7cc>)
 801be48:	681a      	ldr	r2, [r3, #0]
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	60da      	str	r2, [r3, #12]
 801be4e:	4a3f      	ldr	r2, [pc, #252]	; (801bf4c <tcp_process+0x7cc>)
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	6013      	str	r3, [r2, #0]
 801be54:	f003 f8f6 	bl	801f044 <tcp_timer_needed>
      }
      break;
 801be58:	e06c      	b.n	801bf34 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801be5a:	6878      	ldr	r0, [r7, #4]
 801be5c:	f000 f984 	bl	801c168 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801be60:	4b3b      	ldr	r3, [pc, #236]	; (801bf50 <tcp_process+0x7d0>)
 801be62:	781b      	ldrb	r3, [r3, #0]
 801be64:	f003 0310 	and.w	r3, r3, #16
 801be68:	2b00      	cmp	r3, #0
 801be6a:	d065      	beq.n	801bf38 <tcp_process+0x7b8>
 801be6c:	687b      	ldr	r3, [r7, #4]
 801be6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801be70:	4b38      	ldr	r3, [pc, #224]	; (801bf54 <tcp_process+0x7d4>)
 801be72:	681b      	ldr	r3, [r3, #0]
 801be74:	429a      	cmp	r2, r3
 801be76:	d15f      	bne.n	801bf38 <tcp_process+0x7b8>
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	d15b      	bne.n	801bf38 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801be80:	6878      	ldr	r0, [r7, #4]
 801be82:	f7fe fcf3 	bl	801a86c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801be86:	4b35      	ldr	r3, [pc, #212]	; (801bf5c <tcp_process+0x7dc>)
 801be88:	681b      	ldr	r3, [r3, #0]
 801be8a:	687a      	ldr	r2, [r7, #4]
 801be8c:	429a      	cmp	r2, r3
 801be8e:	d105      	bne.n	801be9c <tcp_process+0x71c>
 801be90:	4b32      	ldr	r3, [pc, #200]	; (801bf5c <tcp_process+0x7dc>)
 801be92:	681b      	ldr	r3, [r3, #0]
 801be94:	68db      	ldr	r3, [r3, #12]
 801be96:	4a31      	ldr	r2, [pc, #196]	; (801bf5c <tcp_process+0x7dc>)
 801be98:	6013      	str	r3, [r2, #0]
 801be9a:	e013      	b.n	801bec4 <tcp_process+0x744>
 801be9c:	4b2f      	ldr	r3, [pc, #188]	; (801bf5c <tcp_process+0x7dc>)
 801be9e:	681b      	ldr	r3, [r3, #0]
 801bea0:	60fb      	str	r3, [r7, #12]
 801bea2:	e00c      	b.n	801bebe <tcp_process+0x73e>
 801bea4:	68fb      	ldr	r3, [r7, #12]
 801bea6:	68db      	ldr	r3, [r3, #12]
 801bea8:	687a      	ldr	r2, [r7, #4]
 801beaa:	429a      	cmp	r2, r3
 801beac:	d104      	bne.n	801beb8 <tcp_process+0x738>
 801beae:	687b      	ldr	r3, [r7, #4]
 801beb0:	68da      	ldr	r2, [r3, #12]
 801beb2:	68fb      	ldr	r3, [r7, #12]
 801beb4:	60da      	str	r2, [r3, #12]
 801beb6:	e005      	b.n	801bec4 <tcp_process+0x744>
 801beb8:	68fb      	ldr	r3, [r7, #12]
 801beba:	68db      	ldr	r3, [r3, #12]
 801bebc:	60fb      	str	r3, [r7, #12]
 801bebe:	68fb      	ldr	r3, [r7, #12]
 801bec0:	2b00      	cmp	r3, #0
 801bec2:	d1ef      	bne.n	801bea4 <tcp_process+0x724>
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	2200      	movs	r2, #0
 801bec8:	60da      	str	r2, [r3, #12]
 801beca:	4b1f      	ldr	r3, [pc, #124]	; (801bf48 <tcp_process+0x7c8>)
 801becc:	2201      	movs	r2, #1
 801bece:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	220a      	movs	r2, #10
 801bed4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801bed6:	4b1d      	ldr	r3, [pc, #116]	; (801bf4c <tcp_process+0x7cc>)
 801bed8:	681a      	ldr	r2, [r3, #0]
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	60da      	str	r2, [r3, #12]
 801bede:	4a1b      	ldr	r2, [pc, #108]	; (801bf4c <tcp_process+0x7cc>)
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	6013      	str	r3, [r2, #0]
 801bee4:	f003 f8ae 	bl	801f044 <tcp_timer_needed>
      }
      break;
 801bee8:	e026      	b.n	801bf38 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801beea:	6878      	ldr	r0, [r7, #4]
 801beec:	f000 f93c 	bl	801c168 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801bef0:	4b17      	ldr	r3, [pc, #92]	; (801bf50 <tcp_process+0x7d0>)
 801bef2:	781b      	ldrb	r3, [r3, #0]
 801bef4:	f003 0310 	and.w	r3, r3, #16
 801bef8:	2b00      	cmp	r3, #0
 801befa:	d01f      	beq.n	801bf3c <tcp_process+0x7bc>
 801befc:	687b      	ldr	r3, [r7, #4]
 801befe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bf00:	4b14      	ldr	r3, [pc, #80]	; (801bf54 <tcp_process+0x7d4>)
 801bf02:	681b      	ldr	r3, [r3, #0]
 801bf04:	429a      	cmp	r2, r3
 801bf06:	d119      	bne.n	801bf3c <tcp_process+0x7bc>
 801bf08:	687b      	ldr	r3, [r7, #4]
 801bf0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bf0c:	2b00      	cmp	r3, #0
 801bf0e:	d115      	bne.n	801bf3c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801bf10:	4b11      	ldr	r3, [pc, #68]	; (801bf58 <tcp_process+0x7d8>)
 801bf12:	781b      	ldrb	r3, [r3, #0]
 801bf14:	f043 0310 	orr.w	r3, r3, #16
 801bf18:	b2da      	uxtb	r2, r3
 801bf1a:	4b0f      	ldr	r3, [pc, #60]	; (801bf58 <tcp_process+0x7d8>)
 801bf1c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801bf1e:	e00d      	b.n	801bf3c <tcp_process+0x7bc>
    default:
      break;
 801bf20:	bf00      	nop
 801bf22:	e00c      	b.n	801bf3e <tcp_process+0x7be>
      break;
 801bf24:	bf00      	nop
 801bf26:	e00a      	b.n	801bf3e <tcp_process+0x7be>
      break;
 801bf28:	bf00      	nop
 801bf2a:	e008      	b.n	801bf3e <tcp_process+0x7be>
      break;
 801bf2c:	bf00      	nop
 801bf2e:	e006      	b.n	801bf3e <tcp_process+0x7be>
      break;
 801bf30:	bf00      	nop
 801bf32:	e004      	b.n	801bf3e <tcp_process+0x7be>
      break;
 801bf34:	bf00      	nop
 801bf36:	e002      	b.n	801bf3e <tcp_process+0x7be>
      break;
 801bf38:	bf00      	nop
 801bf3a:	e000      	b.n	801bf3e <tcp_process+0x7be>
      break;
 801bf3c:	bf00      	nop
  }
  return ERR_OK;
 801bf3e:	2300      	movs	r3, #0
}
 801bf40:	4618      	mov	r0, r3
 801bf42:	3724      	adds	r7, #36	; 0x24
 801bf44:	46bd      	mov	sp, r7
 801bf46:	bd90      	pop	{r4, r7, pc}
 801bf48:	20019ff0 	.word	0x20019ff0
 801bf4c:	2001a004 	.word	0x2001a004
 801bf50:	200131f0 	.word	0x200131f0
 801bf54:	200131e8 	.word	0x200131e8
 801bf58:	200131f1 	.word	0x200131f1
 801bf5c:	20019ff4 	.word	0x20019ff4

0801bf60 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801bf60:	b590      	push	{r4, r7, lr}
 801bf62:	b085      	sub	sp, #20
 801bf64:	af00      	add	r7, sp, #0
 801bf66:	6078      	str	r0, [r7, #4]
 801bf68:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801bf6a:	687b      	ldr	r3, [r7, #4]
 801bf6c:	2b00      	cmp	r3, #0
 801bf6e:	d106      	bne.n	801bf7e <tcp_oos_insert_segment+0x1e>
 801bf70:	4b3b      	ldr	r3, [pc, #236]	; (801c060 <tcp_oos_insert_segment+0x100>)
 801bf72:	f240 421f 	movw	r2, #1055	; 0x41f
 801bf76:	493b      	ldr	r1, [pc, #236]	; (801c064 <tcp_oos_insert_segment+0x104>)
 801bf78:	483b      	ldr	r0, [pc, #236]	; (801c068 <tcp_oos_insert_segment+0x108>)
 801bf7a:	f00a fd0d 	bl	8026998 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	68db      	ldr	r3, [r3, #12]
 801bf82:	899b      	ldrh	r3, [r3, #12]
 801bf84:	b29b      	uxth	r3, r3
 801bf86:	4618      	mov	r0, r3
 801bf88:	f7fa fff4 	bl	8016f74 <lwip_htons>
 801bf8c:	4603      	mov	r3, r0
 801bf8e:	b2db      	uxtb	r3, r3
 801bf90:	f003 0301 	and.w	r3, r3, #1
 801bf94:	2b00      	cmp	r3, #0
 801bf96:	d028      	beq.n	801bfea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801bf98:	6838      	ldr	r0, [r7, #0]
 801bf9a:	f7fe f999 	bl	801a2d0 <tcp_segs_free>
    next = NULL;
 801bf9e:	2300      	movs	r3, #0
 801bfa0:	603b      	str	r3, [r7, #0]
 801bfa2:	e056      	b.n	801c052 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801bfa4:	683b      	ldr	r3, [r7, #0]
 801bfa6:	68db      	ldr	r3, [r3, #12]
 801bfa8:	899b      	ldrh	r3, [r3, #12]
 801bfaa:	b29b      	uxth	r3, r3
 801bfac:	4618      	mov	r0, r3
 801bfae:	f7fa ffe1 	bl	8016f74 <lwip_htons>
 801bfb2:	4603      	mov	r3, r0
 801bfb4:	b2db      	uxtb	r3, r3
 801bfb6:	f003 0301 	and.w	r3, r3, #1
 801bfba:	2b00      	cmp	r3, #0
 801bfbc:	d00d      	beq.n	801bfda <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801bfbe:	687b      	ldr	r3, [r7, #4]
 801bfc0:	68db      	ldr	r3, [r3, #12]
 801bfc2:	899b      	ldrh	r3, [r3, #12]
 801bfc4:	b29c      	uxth	r4, r3
 801bfc6:	2001      	movs	r0, #1
 801bfc8:	f7fa ffd4 	bl	8016f74 <lwip_htons>
 801bfcc:	4603      	mov	r3, r0
 801bfce:	461a      	mov	r2, r3
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	68db      	ldr	r3, [r3, #12]
 801bfd4:	4322      	orrs	r2, r4
 801bfd6:	b292      	uxth	r2, r2
 801bfd8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801bfda:	683b      	ldr	r3, [r7, #0]
 801bfdc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801bfde:	683b      	ldr	r3, [r7, #0]
 801bfe0:	681b      	ldr	r3, [r3, #0]
 801bfe2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801bfe4:	68f8      	ldr	r0, [r7, #12]
 801bfe6:	f7fe f987 	bl	801a2f8 <tcp_seg_free>
    while (next &&
 801bfea:	683b      	ldr	r3, [r7, #0]
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	d00e      	beq.n	801c00e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801bff0:	687b      	ldr	r3, [r7, #4]
 801bff2:	891b      	ldrh	r3, [r3, #8]
 801bff4:	461a      	mov	r2, r3
 801bff6:	4b1d      	ldr	r3, [pc, #116]	; (801c06c <tcp_oos_insert_segment+0x10c>)
 801bff8:	681b      	ldr	r3, [r3, #0]
 801bffa:	441a      	add	r2, r3
 801bffc:	683b      	ldr	r3, [r7, #0]
 801bffe:	68db      	ldr	r3, [r3, #12]
 801c000:	685b      	ldr	r3, [r3, #4]
 801c002:	6839      	ldr	r1, [r7, #0]
 801c004:	8909      	ldrh	r1, [r1, #8]
 801c006:	440b      	add	r3, r1
 801c008:	1ad3      	subs	r3, r2, r3
    while (next &&
 801c00a:	2b00      	cmp	r3, #0
 801c00c:	daca      	bge.n	801bfa4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801c00e:	683b      	ldr	r3, [r7, #0]
 801c010:	2b00      	cmp	r3, #0
 801c012:	d01e      	beq.n	801c052 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	891b      	ldrh	r3, [r3, #8]
 801c018:	461a      	mov	r2, r3
 801c01a:	4b14      	ldr	r3, [pc, #80]	; (801c06c <tcp_oos_insert_segment+0x10c>)
 801c01c:	681b      	ldr	r3, [r3, #0]
 801c01e:	441a      	add	r2, r3
 801c020:	683b      	ldr	r3, [r7, #0]
 801c022:	68db      	ldr	r3, [r3, #12]
 801c024:	685b      	ldr	r3, [r3, #4]
 801c026:	1ad3      	subs	r3, r2, r3
    if (next &&
 801c028:	2b00      	cmp	r3, #0
 801c02a:	dd12      	ble.n	801c052 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801c02c:	683b      	ldr	r3, [r7, #0]
 801c02e:	68db      	ldr	r3, [r3, #12]
 801c030:	685b      	ldr	r3, [r3, #4]
 801c032:	b29a      	uxth	r2, r3
 801c034:	4b0d      	ldr	r3, [pc, #52]	; (801c06c <tcp_oos_insert_segment+0x10c>)
 801c036:	681b      	ldr	r3, [r3, #0]
 801c038:	b29b      	uxth	r3, r3
 801c03a:	1ad3      	subs	r3, r2, r3
 801c03c:	b29a      	uxth	r2, r3
 801c03e:	687b      	ldr	r3, [r7, #4]
 801c040:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	685a      	ldr	r2, [r3, #4]
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	891b      	ldrh	r3, [r3, #8]
 801c04a:	4619      	mov	r1, r3
 801c04c:	4610      	mov	r0, r2
 801c04e:	f7fc f9fd 	bl	801844c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801c052:	687b      	ldr	r3, [r7, #4]
 801c054:	683a      	ldr	r2, [r7, #0]
 801c056:	601a      	str	r2, [r3, #0]
}
 801c058:	bf00      	nop
 801c05a:	3714      	adds	r7, #20
 801c05c:	46bd      	mov	sp, r7
 801c05e:	bd90      	pop	{r4, r7, pc}
 801c060:	08029e7c 	.word	0x08029e7c
 801c064:	0802a13c 	.word	0x0802a13c
 801c068:	08029ec8 	.word	0x08029ec8
 801c06c:	200131e4 	.word	0x200131e4

0801c070 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801c070:	b5b0      	push	{r4, r5, r7, lr}
 801c072:	b086      	sub	sp, #24
 801c074:	af00      	add	r7, sp, #0
 801c076:	60f8      	str	r0, [r7, #12]
 801c078:	60b9      	str	r1, [r7, #8]
 801c07a:	607a      	str	r2, [r7, #4]
 801c07c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801c07e:	e03e      	b.n	801c0fe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801c080:	68bb      	ldr	r3, [r7, #8]
 801c082:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801c084:	68bb      	ldr	r3, [r7, #8]
 801c086:	681b      	ldr	r3, [r3, #0]
 801c088:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801c08a:	697b      	ldr	r3, [r7, #20]
 801c08c:	685b      	ldr	r3, [r3, #4]
 801c08e:	4618      	mov	r0, r3
 801c090:	f7fc fc22 	bl	80188d8 <pbuf_clen>
 801c094:	4603      	mov	r3, r0
 801c096:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801c098:	68fb      	ldr	r3, [r7, #12]
 801c09a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c09e:	8a7a      	ldrh	r2, [r7, #18]
 801c0a0:	429a      	cmp	r2, r3
 801c0a2:	d906      	bls.n	801c0b2 <tcp_free_acked_segments+0x42>
 801c0a4:	4b2a      	ldr	r3, [pc, #168]	; (801c150 <tcp_free_acked_segments+0xe0>)
 801c0a6:	f240 4257 	movw	r2, #1111	; 0x457
 801c0aa:	492a      	ldr	r1, [pc, #168]	; (801c154 <tcp_free_acked_segments+0xe4>)
 801c0ac:	482a      	ldr	r0, [pc, #168]	; (801c158 <tcp_free_acked_segments+0xe8>)
 801c0ae:	f00a fc73 	bl	8026998 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801c0b2:	68fb      	ldr	r3, [r7, #12]
 801c0b4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801c0b8:	8a7b      	ldrh	r3, [r7, #18]
 801c0ba:	1ad3      	subs	r3, r2, r3
 801c0bc:	b29a      	uxth	r2, r3
 801c0be:	68fb      	ldr	r3, [r7, #12]
 801c0c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801c0c4:	697b      	ldr	r3, [r7, #20]
 801c0c6:	891a      	ldrh	r2, [r3, #8]
 801c0c8:	4b24      	ldr	r3, [pc, #144]	; (801c15c <tcp_free_acked_segments+0xec>)
 801c0ca:	881b      	ldrh	r3, [r3, #0]
 801c0cc:	4413      	add	r3, r2
 801c0ce:	b29a      	uxth	r2, r3
 801c0d0:	4b22      	ldr	r3, [pc, #136]	; (801c15c <tcp_free_acked_segments+0xec>)
 801c0d2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801c0d4:	6978      	ldr	r0, [r7, #20]
 801c0d6:	f7fe f90f 	bl	801a2f8 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801c0da:	68fb      	ldr	r3, [r7, #12]
 801c0dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	d00c      	beq.n	801c0fe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801c0e4:	68bb      	ldr	r3, [r7, #8]
 801c0e6:	2b00      	cmp	r3, #0
 801c0e8:	d109      	bne.n	801c0fe <tcp_free_acked_segments+0x8e>
 801c0ea:	683b      	ldr	r3, [r7, #0]
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	d106      	bne.n	801c0fe <tcp_free_acked_segments+0x8e>
 801c0f0:	4b17      	ldr	r3, [pc, #92]	; (801c150 <tcp_free_acked_segments+0xe0>)
 801c0f2:	f240 4262 	movw	r2, #1122	; 0x462
 801c0f6:	491a      	ldr	r1, [pc, #104]	; (801c160 <tcp_free_acked_segments+0xf0>)
 801c0f8:	4817      	ldr	r0, [pc, #92]	; (801c158 <tcp_free_acked_segments+0xe8>)
 801c0fa:	f00a fc4d 	bl	8026998 <iprintf>
  while (seg_list != NULL &&
 801c0fe:	68bb      	ldr	r3, [r7, #8]
 801c100:	2b00      	cmp	r3, #0
 801c102:	d020      	beq.n	801c146 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801c104:	68bb      	ldr	r3, [r7, #8]
 801c106:	68db      	ldr	r3, [r3, #12]
 801c108:	685b      	ldr	r3, [r3, #4]
 801c10a:	4618      	mov	r0, r3
 801c10c:	f7fa ff47 	bl	8016f9e <lwip_htonl>
 801c110:	4604      	mov	r4, r0
 801c112:	68bb      	ldr	r3, [r7, #8]
 801c114:	891b      	ldrh	r3, [r3, #8]
 801c116:	461d      	mov	r5, r3
 801c118:	68bb      	ldr	r3, [r7, #8]
 801c11a:	68db      	ldr	r3, [r3, #12]
 801c11c:	899b      	ldrh	r3, [r3, #12]
 801c11e:	b29b      	uxth	r3, r3
 801c120:	4618      	mov	r0, r3
 801c122:	f7fa ff27 	bl	8016f74 <lwip_htons>
 801c126:	4603      	mov	r3, r0
 801c128:	b2db      	uxtb	r3, r3
 801c12a:	f003 0303 	and.w	r3, r3, #3
 801c12e:	2b00      	cmp	r3, #0
 801c130:	d001      	beq.n	801c136 <tcp_free_acked_segments+0xc6>
 801c132:	2301      	movs	r3, #1
 801c134:	e000      	b.n	801c138 <tcp_free_acked_segments+0xc8>
 801c136:	2300      	movs	r3, #0
 801c138:	442b      	add	r3, r5
 801c13a:	18e2      	adds	r2, r4, r3
 801c13c:	4b09      	ldr	r3, [pc, #36]	; (801c164 <tcp_free_acked_segments+0xf4>)
 801c13e:	681b      	ldr	r3, [r3, #0]
 801c140:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801c142:	2b00      	cmp	r3, #0
 801c144:	dd9c      	ble.n	801c080 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801c146:	68bb      	ldr	r3, [r7, #8]
}
 801c148:	4618      	mov	r0, r3
 801c14a:	3718      	adds	r7, #24
 801c14c:	46bd      	mov	sp, r7
 801c14e:	bdb0      	pop	{r4, r5, r7, pc}
 801c150:	08029e7c 	.word	0x08029e7c
 801c154:	0802a164 	.word	0x0802a164
 801c158:	08029ec8 	.word	0x08029ec8
 801c15c:	200131ec 	.word	0x200131ec
 801c160:	0802a18c 	.word	0x0802a18c
 801c164:	200131e8 	.word	0x200131e8

0801c168 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801c168:	b5b0      	push	{r4, r5, r7, lr}
 801c16a:	b094      	sub	sp, #80	; 0x50
 801c16c:	af00      	add	r7, sp, #0
 801c16e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801c170:	2300      	movs	r3, #0
 801c172:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	2b00      	cmp	r3, #0
 801c178:	d106      	bne.n	801c188 <tcp_receive+0x20>
 801c17a:	4ba6      	ldr	r3, [pc, #664]	; (801c414 <tcp_receive+0x2ac>)
 801c17c:	f240 427b 	movw	r2, #1147	; 0x47b
 801c180:	49a5      	ldr	r1, [pc, #660]	; (801c418 <tcp_receive+0x2b0>)
 801c182:	48a6      	ldr	r0, [pc, #664]	; (801c41c <tcp_receive+0x2b4>)
 801c184:	f00a fc08 	bl	8026998 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801c188:	687b      	ldr	r3, [r7, #4]
 801c18a:	7d1b      	ldrb	r3, [r3, #20]
 801c18c:	2b03      	cmp	r3, #3
 801c18e:	d806      	bhi.n	801c19e <tcp_receive+0x36>
 801c190:	4ba0      	ldr	r3, [pc, #640]	; (801c414 <tcp_receive+0x2ac>)
 801c192:	f240 427c 	movw	r2, #1148	; 0x47c
 801c196:	49a2      	ldr	r1, [pc, #648]	; (801c420 <tcp_receive+0x2b8>)
 801c198:	48a0      	ldr	r0, [pc, #640]	; (801c41c <tcp_receive+0x2b4>)
 801c19a:	f00a fbfd 	bl	8026998 <iprintf>

  if (flags & TCP_ACK) {
 801c19e:	4ba1      	ldr	r3, [pc, #644]	; (801c424 <tcp_receive+0x2bc>)
 801c1a0:	781b      	ldrb	r3, [r3, #0]
 801c1a2:	f003 0310 	and.w	r3, r3, #16
 801c1a6:	2b00      	cmp	r3, #0
 801c1a8:	f000 8263 	beq.w	801c672 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c1b2:	461a      	mov	r2, r3
 801c1b4:	687b      	ldr	r3, [r7, #4]
 801c1b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c1b8:	4413      	add	r3, r2
 801c1ba:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c1bc:	687b      	ldr	r3, [r7, #4]
 801c1be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801c1c0:	4b99      	ldr	r3, [pc, #612]	; (801c428 <tcp_receive+0x2c0>)
 801c1c2:	681b      	ldr	r3, [r3, #0]
 801c1c4:	1ad3      	subs	r3, r2, r3
 801c1c6:	2b00      	cmp	r3, #0
 801c1c8:	db1b      	blt.n	801c202 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801c1ce:	4b96      	ldr	r3, [pc, #600]	; (801c428 <tcp_receive+0x2c0>)
 801c1d0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c1d2:	429a      	cmp	r2, r3
 801c1d4:	d106      	bne.n	801c1e4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c1d6:	687b      	ldr	r3, [r7, #4]
 801c1d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801c1da:	4b94      	ldr	r3, [pc, #592]	; (801c42c <tcp_receive+0x2c4>)
 801c1dc:	681b      	ldr	r3, [r3, #0]
 801c1de:	1ad3      	subs	r3, r2, r3
 801c1e0:	2b00      	cmp	r3, #0
 801c1e2:	db0e      	blt.n	801c202 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c1e4:	687b      	ldr	r3, [r7, #4]
 801c1e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801c1e8:	4b90      	ldr	r3, [pc, #576]	; (801c42c <tcp_receive+0x2c4>)
 801c1ea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c1ec:	429a      	cmp	r2, r3
 801c1ee:	d125      	bne.n	801c23c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c1f0:	4b8f      	ldr	r3, [pc, #572]	; (801c430 <tcp_receive+0x2c8>)
 801c1f2:	681b      	ldr	r3, [r3, #0]
 801c1f4:	89db      	ldrh	r3, [r3, #14]
 801c1f6:	b29a      	uxth	r2, r3
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c1fe:	429a      	cmp	r2, r3
 801c200:	d91c      	bls.n	801c23c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801c202:	4b8b      	ldr	r3, [pc, #556]	; (801c430 <tcp_receive+0x2c8>)
 801c204:	681b      	ldr	r3, [r3, #0]
 801c206:	89db      	ldrh	r3, [r3, #14]
 801c208:	b29a      	uxth	r2, r3
 801c20a:	687b      	ldr	r3, [r7, #4]
 801c20c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801c210:	687b      	ldr	r3, [r7, #4]
 801c212:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801c216:	687b      	ldr	r3, [r7, #4]
 801c218:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c21c:	429a      	cmp	r2, r3
 801c21e:	d205      	bcs.n	801c22c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801c22c:	4b7e      	ldr	r3, [pc, #504]	; (801c428 <tcp_receive+0x2c0>)
 801c22e:	681a      	ldr	r2, [r3, #0]
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801c234:	4b7d      	ldr	r3, [pc, #500]	; (801c42c <tcp_receive+0x2c4>)
 801c236:	681a      	ldr	r2, [r3, #0]
 801c238:	687b      	ldr	r3, [r7, #4]
 801c23a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801c23c:	4b7b      	ldr	r3, [pc, #492]	; (801c42c <tcp_receive+0x2c4>)
 801c23e:	681a      	ldr	r2, [r3, #0]
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c244:	1ad3      	subs	r3, r2, r3
 801c246:	2b00      	cmp	r3, #0
 801c248:	dc58      	bgt.n	801c2fc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801c24a:	4b7a      	ldr	r3, [pc, #488]	; (801c434 <tcp_receive+0x2cc>)
 801c24c:	881b      	ldrh	r3, [r3, #0]
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d14b      	bne.n	801c2ea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c256:	687a      	ldr	r2, [r7, #4]
 801c258:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801c25c:	4413      	add	r3, r2
 801c25e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c260:	429a      	cmp	r2, r3
 801c262:	d142      	bne.n	801c2ea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801c26a:	2b00      	cmp	r3, #0
 801c26c:	db3d      	blt.n	801c2ea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c272:	4b6e      	ldr	r3, [pc, #440]	; (801c42c <tcp_receive+0x2c4>)
 801c274:	681b      	ldr	r3, [r3, #0]
 801c276:	429a      	cmp	r2, r3
 801c278:	d137      	bne.n	801c2ea <tcp_receive+0x182>
              found_dupack = 1;
 801c27a:	2301      	movs	r3, #1
 801c27c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c284:	2bff      	cmp	r3, #255	; 0xff
 801c286:	d007      	beq.n	801c298 <tcp_receive+0x130>
                ++pcb->dupacks;
 801c288:	687b      	ldr	r3, [r7, #4]
 801c28a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c28e:	3301      	adds	r3, #1
 801c290:	b2da      	uxtb	r2, r3
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801c298:	687b      	ldr	r3, [r7, #4]
 801c29a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c29e:	2b03      	cmp	r3, #3
 801c2a0:	d91b      	bls.n	801c2da <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c2a8:	687b      	ldr	r3, [r7, #4]
 801c2aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c2ac:	4413      	add	r3, r2
 801c2ae:	b29a      	uxth	r2, r3
 801c2b0:	687b      	ldr	r3, [r7, #4]
 801c2b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c2b6:	429a      	cmp	r2, r3
 801c2b8:	d30a      	bcc.n	801c2d0 <tcp_receive+0x168>
 801c2ba:	687b      	ldr	r3, [r7, #4]
 801c2bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c2c0:	687b      	ldr	r3, [r7, #4]
 801c2c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c2c4:	4413      	add	r3, r2
 801c2c6:	b29a      	uxth	r2, r3
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c2ce:	e004      	b.n	801c2da <tcp_receive+0x172>
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c2d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801c2da:	687b      	ldr	r3, [r7, #4]
 801c2dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c2e0:	2b02      	cmp	r3, #2
 801c2e2:	d902      	bls.n	801c2ea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801c2e4:	6878      	ldr	r0, [r7, #4]
 801c2e6:	f002 fb47 	bl	801e978 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801c2ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c2ec:	2b00      	cmp	r3, #0
 801c2ee:	f040 8160 	bne.w	801c5b2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	2200      	movs	r2, #0
 801c2f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801c2fa:	e15a      	b.n	801c5b2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c2fc:	4b4b      	ldr	r3, [pc, #300]	; (801c42c <tcp_receive+0x2c4>)
 801c2fe:	681a      	ldr	r2, [r3, #0]
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c304:	1ad3      	subs	r3, r2, r3
 801c306:	3b01      	subs	r3, #1
 801c308:	2b00      	cmp	r3, #0
 801c30a:	f2c0 814d 	blt.w	801c5a8 <tcp_receive+0x440>
 801c30e:	4b47      	ldr	r3, [pc, #284]	; (801c42c <tcp_receive+0x2c4>)
 801c310:	681a      	ldr	r2, [r3, #0]
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c316:	1ad3      	subs	r3, r2, r3
 801c318:	2b00      	cmp	r3, #0
 801c31a:	f300 8145 	bgt.w	801c5a8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	8b5b      	ldrh	r3, [r3, #26]
 801c322:	f003 0304 	and.w	r3, r3, #4
 801c326:	2b00      	cmp	r3, #0
 801c328:	d010      	beq.n	801c34c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	8b5b      	ldrh	r3, [r3, #26]
 801c32e:	f023 0304 	bic.w	r3, r3, #4
 801c332:	b29a      	uxth	r2, r3
 801c334:	687b      	ldr	r3, [r7, #4]
 801c336:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801c338:	687b      	ldr	r3, [r7, #4]
 801c33a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801c33e:	687b      	ldr	r3, [r7, #4]
 801c340:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801c344:	687b      	ldr	r3, [r7, #4]
 801c346:	2200      	movs	r2, #0
 801c348:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801c34c:	687b      	ldr	r3, [r7, #4]
 801c34e:	2200      	movs	r2, #0
 801c350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c35a:	10db      	asrs	r3, r3, #3
 801c35c:	b21b      	sxth	r3, r3
 801c35e:	b29a      	uxth	r2, r3
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c366:	b29b      	uxth	r3, r3
 801c368:	4413      	add	r3, r2
 801c36a:	b29b      	uxth	r3, r3
 801c36c:	b21a      	sxth	r2, r3
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801c374:	4b2d      	ldr	r3, [pc, #180]	; (801c42c <tcp_receive+0x2c4>)
 801c376:	681b      	ldr	r3, [r3, #0]
 801c378:	b29a      	uxth	r2, r3
 801c37a:	687b      	ldr	r3, [r7, #4]
 801c37c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c37e:	b29b      	uxth	r3, r3
 801c380:	1ad3      	subs	r3, r2, r3
 801c382:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801c384:	687b      	ldr	r3, [r7, #4]
 801c386:	2200      	movs	r2, #0
 801c388:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801c38c:	4b27      	ldr	r3, [pc, #156]	; (801c42c <tcp_receive+0x2c4>)
 801c38e:	681a      	ldr	r2, [r3, #0]
 801c390:	687b      	ldr	r3, [r7, #4]
 801c392:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	7d1b      	ldrb	r3, [r3, #20]
 801c398:	2b03      	cmp	r3, #3
 801c39a:	f240 8096 	bls.w	801c4ca <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801c39e:	687b      	ldr	r3, [r7, #4]
 801c3a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c3a4:	687b      	ldr	r3, [r7, #4]
 801c3a6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801c3aa:	429a      	cmp	r2, r3
 801c3ac:	d244      	bcs.n	801c438 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801c3ae:	687b      	ldr	r3, [r7, #4]
 801c3b0:	8b5b      	ldrh	r3, [r3, #26]
 801c3b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c3b6:	2b00      	cmp	r3, #0
 801c3b8:	d001      	beq.n	801c3be <tcp_receive+0x256>
 801c3ba:	2301      	movs	r3, #1
 801c3bc:	e000      	b.n	801c3c0 <tcp_receive+0x258>
 801c3be:	2302      	movs	r3, #2
 801c3c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801c3c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801c3c8:	b29a      	uxth	r2, r3
 801c3ca:	687b      	ldr	r3, [r7, #4]
 801c3cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c3ce:	fb12 f303 	smulbb	r3, r2, r3
 801c3d2:	b29b      	uxth	r3, r3
 801c3d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c3d6:	4293      	cmp	r3, r2
 801c3d8:	bf28      	it	cs
 801c3da:	4613      	movcs	r3, r2
 801c3dc:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c3e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c3e6:	4413      	add	r3, r2
 801c3e8:	b29a      	uxth	r2, r3
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c3f0:	429a      	cmp	r2, r3
 801c3f2:	d309      	bcc.n	801c408 <tcp_receive+0x2a0>
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c3fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c3fc:	4413      	add	r3, r2
 801c3fe:	b29a      	uxth	r2, r3
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c406:	e060      	b.n	801c4ca <tcp_receive+0x362>
 801c408:	687b      	ldr	r3, [r7, #4]
 801c40a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c40e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c412:	e05a      	b.n	801c4ca <tcp_receive+0x362>
 801c414:	08029e7c 	.word	0x08029e7c
 801c418:	0802a1ac 	.word	0x0802a1ac
 801c41c:	08029ec8 	.word	0x08029ec8
 801c420:	0802a1c8 	.word	0x0802a1c8
 801c424:	200131f0 	.word	0x200131f0
 801c428:	200131e4 	.word	0x200131e4
 801c42c:	200131e8 	.word	0x200131e8
 801c430:	200131d4 	.word	0x200131d4
 801c434:	200131ee 	.word	0x200131ee
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801c438:	687b      	ldr	r3, [r7, #4]
 801c43a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c43e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c440:	4413      	add	r3, r2
 801c442:	b29a      	uxth	r2, r3
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801c44a:	429a      	cmp	r2, r3
 801c44c:	d309      	bcc.n	801c462 <tcp_receive+0x2fa>
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c454:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c456:	4413      	add	r3, r2
 801c458:	b29a      	uxth	r2, r3
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801c460:	e004      	b.n	801c46c <tcp_receive+0x304>
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c468:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801c46c:	687b      	ldr	r3, [r7, #4]
 801c46e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c478:	429a      	cmp	r2, r3
 801c47a:	d326      	bcc.n	801c4ca <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801c47c:	687b      	ldr	r3, [r7, #4]
 801c47e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c482:	687b      	ldr	r3, [r7, #4]
 801c484:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c488:	1ad3      	subs	r3, r2, r3
 801c48a:	b29a      	uxth	r2, r3
 801c48c:	687b      	ldr	r3, [r7, #4]
 801c48e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c498:	687b      	ldr	r3, [r7, #4]
 801c49a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c49c:	4413      	add	r3, r2
 801c49e:	b29a      	uxth	r2, r3
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c4a6:	429a      	cmp	r2, r3
 801c4a8:	d30a      	bcc.n	801c4c0 <tcp_receive+0x358>
 801c4aa:	687b      	ldr	r3, [r7, #4]
 801c4ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c4b0:	687b      	ldr	r3, [r7, #4]
 801c4b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c4b4:	4413      	add	r3, r2
 801c4b6:	b29a      	uxth	r2, r3
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c4be:	e004      	b.n	801c4ca <tcp_receive+0x362>
 801c4c0:	687b      	ldr	r3, [r7, #4]
 801c4c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c4c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c4d2:	4a98      	ldr	r2, [pc, #608]	; (801c734 <tcp_receive+0x5cc>)
 801c4d4:	6878      	ldr	r0, [r7, #4]
 801c4d6:	f7ff fdcb 	bl	801c070 <tcp_free_acked_segments>
 801c4da:	4602      	mov	r2, r0
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c4e8:	4a93      	ldr	r2, [pc, #588]	; (801c738 <tcp_receive+0x5d0>)
 801c4ea:	6878      	ldr	r0, [r7, #4]
 801c4ec:	f7ff fdc0 	bl	801c070 <tcp_free_acked_segments>
 801c4f0:	4602      	mov	r2, r0
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801c4f6:	687b      	ldr	r3, [r7, #4]
 801c4f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c4fa:	2b00      	cmp	r3, #0
 801c4fc:	d104      	bne.n	801c508 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c504:	861a      	strh	r2, [r3, #48]	; 0x30
 801c506:	e002      	b.n	801c50e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	2200      	movs	r2, #0
 801c50c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801c50e:	687b      	ldr	r3, [r7, #4]
 801c510:	2200      	movs	r2, #0
 801c512:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c518:	2b00      	cmp	r3, #0
 801c51a:	d103      	bne.n	801c524 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	2200      	movs	r2, #0
 801c520:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801c52a:	4b84      	ldr	r3, [pc, #528]	; (801c73c <tcp_receive+0x5d4>)
 801c52c:	881b      	ldrh	r3, [r3, #0]
 801c52e:	4413      	add	r3, r2
 801c530:	b29a      	uxth	r2, r3
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	8b5b      	ldrh	r3, [r3, #26]
 801c53c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c540:	2b00      	cmp	r3, #0
 801c542:	d035      	beq.n	801c5b0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c548:	2b00      	cmp	r3, #0
 801c54a:	d118      	bne.n	801c57e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c550:	2b00      	cmp	r3, #0
 801c552:	d00c      	beq.n	801c56e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801c558:	687b      	ldr	r3, [r7, #4]
 801c55a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c55c:	68db      	ldr	r3, [r3, #12]
 801c55e:	685b      	ldr	r3, [r3, #4]
 801c560:	4618      	mov	r0, r3
 801c562:	f7fa fd1c 	bl	8016f9e <lwip_htonl>
 801c566:	4603      	mov	r3, r0
 801c568:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	dc20      	bgt.n	801c5b0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	8b5b      	ldrh	r3, [r3, #26]
 801c572:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c576:	b29a      	uxth	r2, r3
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c57c:	e018      	b.n	801c5b0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801c57e:	687b      	ldr	r3, [r7, #4]
 801c580:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801c582:	687b      	ldr	r3, [r7, #4]
 801c584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c586:	68db      	ldr	r3, [r3, #12]
 801c588:	685b      	ldr	r3, [r3, #4]
 801c58a:	4618      	mov	r0, r3
 801c58c:	f7fa fd07 	bl	8016f9e <lwip_htonl>
 801c590:	4603      	mov	r3, r0
 801c592:	1ae3      	subs	r3, r4, r3
 801c594:	2b00      	cmp	r3, #0
 801c596:	dc0b      	bgt.n	801c5b0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 801c598:	687b      	ldr	r3, [r7, #4]
 801c59a:	8b5b      	ldrh	r3, [r3, #26]
 801c59c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c5a0:	b29a      	uxth	r2, r3
 801c5a2:	687b      	ldr	r3, [r7, #4]
 801c5a4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c5a6:	e003      	b.n	801c5b0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801c5a8:	6878      	ldr	r0, [r7, #4]
 801c5aa:	f002 fbdb 	bl	801ed64 <tcp_send_empty_ack>
 801c5ae:	e000      	b.n	801c5b2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c5b0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	d05b      	beq.n	801c672 <tcp_receive+0x50a>
 801c5ba:	687b      	ldr	r3, [r7, #4]
 801c5bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c5be:	4b60      	ldr	r3, [pc, #384]	; (801c740 <tcp_receive+0x5d8>)
 801c5c0:	681b      	ldr	r3, [r3, #0]
 801c5c2:	1ad3      	subs	r3, r2, r3
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	da54      	bge.n	801c672 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801c5c8:	4b5e      	ldr	r3, [pc, #376]	; (801c744 <tcp_receive+0x5dc>)
 801c5ca:	681b      	ldr	r3, [r3, #0]
 801c5cc:	b29a      	uxth	r2, r3
 801c5ce:	687b      	ldr	r3, [r7, #4]
 801c5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c5d2:	b29b      	uxth	r3, r3
 801c5d4:	1ad3      	subs	r3, r2, r3
 801c5d6:	b29b      	uxth	r3, r3
 801c5d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801c5dc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c5e6:	10db      	asrs	r3, r3, #3
 801c5e8:	b21b      	sxth	r3, r3
 801c5ea:	b29b      	uxth	r3, r3
 801c5ec:	1ad3      	subs	r3, r2, r3
 801c5ee:	b29b      	uxth	r3, r3
 801c5f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c5fa:	b29a      	uxth	r2, r3
 801c5fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801c600:	4413      	add	r3, r2
 801c602:	b29b      	uxth	r3, r3
 801c604:	b21a      	sxth	r2, r3
 801c606:	687b      	ldr	r3, [r7, #4]
 801c608:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801c60a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801c60e:	2b00      	cmp	r3, #0
 801c610:	da05      	bge.n	801c61e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801c612:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801c616:	425b      	negs	r3, r3
 801c618:	b29b      	uxth	r3, r3
 801c61a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801c61e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801c622:	687b      	ldr	r3, [r7, #4]
 801c624:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c628:	109b      	asrs	r3, r3, #2
 801c62a:	b21b      	sxth	r3, r3
 801c62c:	b29b      	uxth	r3, r3
 801c62e:	1ad3      	subs	r3, r2, r3
 801c630:	b29b      	uxth	r3, r3
 801c632:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c63c:	b29a      	uxth	r2, r3
 801c63e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801c642:	4413      	add	r3, r2
 801c644:	b29b      	uxth	r3, r3
 801c646:	b21a      	sxth	r2, r3
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c64c:	687b      	ldr	r3, [r7, #4]
 801c64e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c652:	10db      	asrs	r3, r3, #3
 801c654:	b21b      	sxth	r3, r3
 801c656:	b29a      	uxth	r2, r3
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c65e:	b29b      	uxth	r3, r3
 801c660:	4413      	add	r3, r2
 801c662:	b29b      	uxth	r3, r3
 801c664:	b21a      	sxth	r2, r3
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801c66c:	687b      	ldr	r3, [r7, #4]
 801c66e:	2200      	movs	r2, #0
 801c670:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c672:	4b35      	ldr	r3, [pc, #212]	; (801c748 <tcp_receive+0x5e0>)
 801c674:	881b      	ldrh	r3, [r3, #0]
 801c676:	2b00      	cmp	r3, #0
 801c678:	f000 84e1 	beq.w	801d03e <tcp_receive+0xed6>
 801c67c:	687b      	ldr	r3, [r7, #4]
 801c67e:	7d1b      	ldrb	r3, [r3, #20]
 801c680:	2b06      	cmp	r3, #6
 801c682:	f200 84dc 	bhi.w	801d03e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c686:	687b      	ldr	r3, [r7, #4]
 801c688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c68a:	4b30      	ldr	r3, [pc, #192]	; (801c74c <tcp_receive+0x5e4>)
 801c68c:	681b      	ldr	r3, [r3, #0]
 801c68e:	1ad3      	subs	r3, r2, r3
 801c690:	3b01      	subs	r3, #1
 801c692:	2b00      	cmp	r3, #0
 801c694:	f2c0 808e 	blt.w	801c7b4 <tcp_receive+0x64c>
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c69c:	4b2a      	ldr	r3, [pc, #168]	; (801c748 <tcp_receive+0x5e0>)
 801c69e:	881b      	ldrh	r3, [r3, #0]
 801c6a0:	4619      	mov	r1, r3
 801c6a2:	4b2a      	ldr	r3, [pc, #168]	; (801c74c <tcp_receive+0x5e4>)
 801c6a4:	681b      	ldr	r3, [r3, #0]
 801c6a6:	440b      	add	r3, r1
 801c6a8:	1ad3      	subs	r3, r2, r3
 801c6aa:	3301      	adds	r3, #1
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	f300 8081 	bgt.w	801c7b4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801c6b2:	4b27      	ldr	r3, [pc, #156]	; (801c750 <tcp_receive+0x5e8>)
 801c6b4:	685b      	ldr	r3, [r3, #4]
 801c6b6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801c6b8:	687b      	ldr	r3, [r7, #4]
 801c6ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c6bc:	4b23      	ldr	r3, [pc, #140]	; (801c74c <tcp_receive+0x5e4>)
 801c6be:	681b      	ldr	r3, [r3, #0]
 801c6c0:	1ad3      	subs	r3, r2, r3
 801c6c2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801c6c4:	4b22      	ldr	r3, [pc, #136]	; (801c750 <tcp_receive+0x5e8>)
 801c6c6:	685b      	ldr	r3, [r3, #4]
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	d106      	bne.n	801c6da <tcp_receive+0x572>
 801c6cc:	4b21      	ldr	r3, [pc, #132]	; (801c754 <tcp_receive+0x5ec>)
 801c6ce:	f240 5294 	movw	r2, #1428	; 0x594
 801c6d2:	4921      	ldr	r1, [pc, #132]	; (801c758 <tcp_receive+0x5f0>)
 801c6d4:	4821      	ldr	r0, [pc, #132]	; (801c75c <tcp_receive+0x5f4>)
 801c6d6:	f00a f95f 	bl	8026998 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801c6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c6e0:	4293      	cmp	r3, r2
 801c6e2:	d906      	bls.n	801c6f2 <tcp_receive+0x58a>
 801c6e4:	4b1b      	ldr	r3, [pc, #108]	; (801c754 <tcp_receive+0x5ec>)
 801c6e6:	f240 5295 	movw	r2, #1429	; 0x595
 801c6ea:	491d      	ldr	r1, [pc, #116]	; (801c760 <tcp_receive+0x5f8>)
 801c6ec:	481b      	ldr	r0, [pc, #108]	; (801c75c <tcp_receive+0x5f4>)
 801c6ee:	f00a f953 	bl	8026998 <iprintf>
      off = (u16_t)off32;
 801c6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801c6f8:	4b15      	ldr	r3, [pc, #84]	; (801c750 <tcp_receive+0x5e8>)
 801c6fa:	685b      	ldr	r3, [r3, #4]
 801c6fc:	891b      	ldrh	r3, [r3, #8]
 801c6fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c702:	429a      	cmp	r2, r3
 801c704:	d906      	bls.n	801c714 <tcp_receive+0x5ac>
 801c706:	4b13      	ldr	r3, [pc, #76]	; (801c754 <tcp_receive+0x5ec>)
 801c708:	f240 5297 	movw	r2, #1431	; 0x597
 801c70c:	4915      	ldr	r1, [pc, #84]	; (801c764 <tcp_receive+0x5fc>)
 801c70e:	4813      	ldr	r0, [pc, #76]	; (801c75c <tcp_receive+0x5f4>)
 801c710:	f00a f942 	bl	8026998 <iprintf>
      inseg.len -= off;
 801c714:	4b0e      	ldr	r3, [pc, #56]	; (801c750 <tcp_receive+0x5e8>)
 801c716:	891a      	ldrh	r2, [r3, #8]
 801c718:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c71c:	1ad3      	subs	r3, r2, r3
 801c71e:	b29a      	uxth	r2, r3
 801c720:	4b0b      	ldr	r3, [pc, #44]	; (801c750 <tcp_receive+0x5e8>)
 801c722:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801c724:	4b0a      	ldr	r3, [pc, #40]	; (801c750 <tcp_receive+0x5e8>)
 801c726:	685b      	ldr	r3, [r3, #4]
 801c728:	891a      	ldrh	r2, [r3, #8]
 801c72a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c72e:	1ad3      	subs	r3, r2, r3
 801c730:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801c732:	e029      	b.n	801c788 <tcp_receive+0x620>
 801c734:	0802a1e4 	.word	0x0802a1e4
 801c738:	0802a1ec 	.word	0x0802a1ec
 801c73c:	200131ec 	.word	0x200131ec
 801c740:	200131e8 	.word	0x200131e8
 801c744:	20019ff8 	.word	0x20019ff8
 801c748:	200131ee 	.word	0x200131ee
 801c74c:	200131e4 	.word	0x200131e4
 801c750:	200131c4 	.word	0x200131c4
 801c754:	08029e7c 	.word	0x08029e7c
 801c758:	0802a1f4 	.word	0x0802a1f4
 801c75c:	08029ec8 	.word	0x08029ec8
 801c760:	0802a204 	.word	0x0802a204
 801c764:	0802a214 	.word	0x0802a214
        off -= p->len;
 801c768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c76a:	895b      	ldrh	r3, [r3, #10]
 801c76c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c770:	1ad3      	subs	r3, r2, r3
 801c772:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801c776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c778:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c77a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801c77c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c77e:	2200      	movs	r2, #0
 801c780:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801c782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c784:	681b      	ldr	r3, [r3, #0]
 801c786:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801c788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c78a:	895b      	ldrh	r3, [r3, #10]
 801c78c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c790:	429a      	cmp	r2, r3
 801c792:	d8e9      	bhi.n	801c768 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801c794:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c798:	4619      	mov	r1, r3
 801c79a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801c79c:	f7fb ff56 	bl	801864c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801c7a0:	687b      	ldr	r3, [r7, #4]
 801c7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c7a4:	4a91      	ldr	r2, [pc, #580]	; (801c9ec <tcp_receive+0x884>)
 801c7a6:	6013      	str	r3, [r2, #0]
 801c7a8:	4b91      	ldr	r3, [pc, #580]	; (801c9f0 <tcp_receive+0x888>)
 801c7aa:	68db      	ldr	r3, [r3, #12]
 801c7ac:	4a8f      	ldr	r2, [pc, #572]	; (801c9ec <tcp_receive+0x884>)
 801c7ae:	6812      	ldr	r2, [r2, #0]
 801c7b0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c7b2:	e00d      	b.n	801c7d0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801c7b4:	4b8d      	ldr	r3, [pc, #564]	; (801c9ec <tcp_receive+0x884>)
 801c7b6:	681a      	ldr	r2, [r3, #0]
 801c7b8:	687b      	ldr	r3, [r7, #4]
 801c7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c7bc:	1ad3      	subs	r3, r2, r3
 801c7be:	2b00      	cmp	r3, #0
 801c7c0:	da06      	bge.n	801c7d0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801c7c2:	687b      	ldr	r3, [r7, #4]
 801c7c4:	8b5b      	ldrh	r3, [r3, #26]
 801c7c6:	f043 0302 	orr.w	r3, r3, #2
 801c7ca:	b29a      	uxth	r2, r3
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801c7d0:	4b86      	ldr	r3, [pc, #536]	; (801c9ec <tcp_receive+0x884>)
 801c7d2:	681a      	ldr	r2, [r3, #0]
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c7d8:	1ad3      	subs	r3, r2, r3
 801c7da:	2b00      	cmp	r3, #0
 801c7dc:	f2c0 842a 	blt.w	801d034 <tcp_receive+0xecc>
 801c7e0:	4b82      	ldr	r3, [pc, #520]	; (801c9ec <tcp_receive+0x884>)
 801c7e2:	681a      	ldr	r2, [r3, #0]
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c7e8:	6879      	ldr	r1, [r7, #4]
 801c7ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c7ec:	440b      	add	r3, r1
 801c7ee:	1ad3      	subs	r3, r2, r3
 801c7f0:	3301      	adds	r3, #1
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	f300 841e 	bgt.w	801d034 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801c7f8:	687b      	ldr	r3, [r7, #4]
 801c7fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c7fc:	4b7b      	ldr	r3, [pc, #492]	; (801c9ec <tcp_receive+0x884>)
 801c7fe:	681b      	ldr	r3, [r3, #0]
 801c800:	429a      	cmp	r2, r3
 801c802:	f040 829a 	bne.w	801cd3a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801c806:	4b7a      	ldr	r3, [pc, #488]	; (801c9f0 <tcp_receive+0x888>)
 801c808:	891c      	ldrh	r4, [r3, #8]
 801c80a:	4b79      	ldr	r3, [pc, #484]	; (801c9f0 <tcp_receive+0x888>)
 801c80c:	68db      	ldr	r3, [r3, #12]
 801c80e:	899b      	ldrh	r3, [r3, #12]
 801c810:	b29b      	uxth	r3, r3
 801c812:	4618      	mov	r0, r3
 801c814:	f7fa fbae 	bl	8016f74 <lwip_htons>
 801c818:	4603      	mov	r3, r0
 801c81a:	b2db      	uxtb	r3, r3
 801c81c:	f003 0303 	and.w	r3, r3, #3
 801c820:	2b00      	cmp	r3, #0
 801c822:	d001      	beq.n	801c828 <tcp_receive+0x6c0>
 801c824:	2301      	movs	r3, #1
 801c826:	e000      	b.n	801c82a <tcp_receive+0x6c2>
 801c828:	2300      	movs	r3, #0
 801c82a:	4423      	add	r3, r4
 801c82c:	b29a      	uxth	r2, r3
 801c82e:	4b71      	ldr	r3, [pc, #452]	; (801c9f4 <tcp_receive+0x88c>)
 801c830:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801c832:	687b      	ldr	r3, [r7, #4]
 801c834:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801c836:	4b6f      	ldr	r3, [pc, #444]	; (801c9f4 <tcp_receive+0x88c>)
 801c838:	881b      	ldrh	r3, [r3, #0]
 801c83a:	429a      	cmp	r2, r3
 801c83c:	d275      	bcs.n	801c92a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801c83e:	4b6c      	ldr	r3, [pc, #432]	; (801c9f0 <tcp_receive+0x888>)
 801c840:	68db      	ldr	r3, [r3, #12]
 801c842:	899b      	ldrh	r3, [r3, #12]
 801c844:	b29b      	uxth	r3, r3
 801c846:	4618      	mov	r0, r3
 801c848:	f7fa fb94 	bl	8016f74 <lwip_htons>
 801c84c:	4603      	mov	r3, r0
 801c84e:	b2db      	uxtb	r3, r3
 801c850:	f003 0301 	and.w	r3, r3, #1
 801c854:	2b00      	cmp	r3, #0
 801c856:	d01f      	beq.n	801c898 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801c858:	4b65      	ldr	r3, [pc, #404]	; (801c9f0 <tcp_receive+0x888>)
 801c85a:	68db      	ldr	r3, [r3, #12]
 801c85c:	899b      	ldrh	r3, [r3, #12]
 801c85e:	b29b      	uxth	r3, r3
 801c860:	b21b      	sxth	r3, r3
 801c862:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c866:	b21c      	sxth	r4, r3
 801c868:	4b61      	ldr	r3, [pc, #388]	; (801c9f0 <tcp_receive+0x888>)
 801c86a:	68db      	ldr	r3, [r3, #12]
 801c86c:	899b      	ldrh	r3, [r3, #12]
 801c86e:	b29b      	uxth	r3, r3
 801c870:	4618      	mov	r0, r3
 801c872:	f7fa fb7f 	bl	8016f74 <lwip_htons>
 801c876:	4603      	mov	r3, r0
 801c878:	b2db      	uxtb	r3, r3
 801c87a:	b29b      	uxth	r3, r3
 801c87c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801c880:	b29b      	uxth	r3, r3
 801c882:	4618      	mov	r0, r3
 801c884:	f7fa fb76 	bl	8016f74 <lwip_htons>
 801c888:	4603      	mov	r3, r0
 801c88a:	b21b      	sxth	r3, r3
 801c88c:	4323      	orrs	r3, r4
 801c88e:	b21a      	sxth	r2, r3
 801c890:	4b57      	ldr	r3, [pc, #348]	; (801c9f0 <tcp_receive+0x888>)
 801c892:	68db      	ldr	r3, [r3, #12]
 801c894:	b292      	uxth	r2, r2
 801c896:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801c898:	687b      	ldr	r3, [r7, #4]
 801c89a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801c89c:	4b54      	ldr	r3, [pc, #336]	; (801c9f0 <tcp_receive+0x888>)
 801c89e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801c8a0:	4b53      	ldr	r3, [pc, #332]	; (801c9f0 <tcp_receive+0x888>)
 801c8a2:	68db      	ldr	r3, [r3, #12]
 801c8a4:	899b      	ldrh	r3, [r3, #12]
 801c8a6:	b29b      	uxth	r3, r3
 801c8a8:	4618      	mov	r0, r3
 801c8aa:	f7fa fb63 	bl	8016f74 <lwip_htons>
 801c8ae:	4603      	mov	r3, r0
 801c8b0:	b2db      	uxtb	r3, r3
 801c8b2:	f003 0302 	and.w	r3, r3, #2
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	d005      	beq.n	801c8c6 <tcp_receive+0x75e>
            inseg.len -= 1;
 801c8ba:	4b4d      	ldr	r3, [pc, #308]	; (801c9f0 <tcp_receive+0x888>)
 801c8bc:	891b      	ldrh	r3, [r3, #8]
 801c8be:	3b01      	subs	r3, #1
 801c8c0:	b29a      	uxth	r2, r3
 801c8c2:	4b4b      	ldr	r3, [pc, #300]	; (801c9f0 <tcp_receive+0x888>)
 801c8c4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801c8c6:	4b4a      	ldr	r3, [pc, #296]	; (801c9f0 <tcp_receive+0x888>)
 801c8c8:	685a      	ldr	r2, [r3, #4]
 801c8ca:	4b49      	ldr	r3, [pc, #292]	; (801c9f0 <tcp_receive+0x888>)
 801c8cc:	891b      	ldrh	r3, [r3, #8]
 801c8ce:	4619      	mov	r1, r3
 801c8d0:	4610      	mov	r0, r2
 801c8d2:	f7fb fdbb 	bl	801844c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801c8d6:	4b46      	ldr	r3, [pc, #280]	; (801c9f0 <tcp_receive+0x888>)
 801c8d8:	891c      	ldrh	r4, [r3, #8]
 801c8da:	4b45      	ldr	r3, [pc, #276]	; (801c9f0 <tcp_receive+0x888>)
 801c8dc:	68db      	ldr	r3, [r3, #12]
 801c8de:	899b      	ldrh	r3, [r3, #12]
 801c8e0:	b29b      	uxth	r3, r3
 801c8e2:	4618      	mov	r0, r3
 801c8e4:	f7fa fb46 	bl	8016f74 <lwip_htons>
 801c8e8:	4603      	mov	r3, r0
 801c8ea:	b2db      	uxtb	r3, r3
 801c8ec:	f003 0303 	and.w	r3, r3, #3
 801c8f0:	2b00      	cmp	r3, #0
 801c8f2:	d001      	beq.n	801c8f8 <tcp_receive+0x790>
 801c8f4:	2301      	movs	r3, #1
 801c8f6:	e000      	b.n	801c8fa <tcp_receive+0x792>
 801c8f8:	2300      	movs	r3, #0
 801c8fa:	4423      	add	r3, r4
 801c8fc:	b29a      	uxth	r2, r3
 801c8fe:	4b3d      	ldr	r3, [pc, #244]	; (801c9f4 <tcp_receive+0x88c>)
 801c900:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801c902:	4b3c      	ldr	r3, [pc, #240]	; (801c9f4 <tcp_receive+0x88c>)
 801c904:	881b      	ldrh	r3, [r3, #0]
 801c906:	461a      	mov	r2, r3
 801c908:	4b38      	ldr	r3, [pc, #224]	; (801c9ec <tcp_receive+0x884>)
 801c90a:	681b      	ldr	r3, [r3, #0]
 801c90c:	441a      	add	r2, r3
 801c90e:	687b      	ldr	r3, [r7, #4]
 801c910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c912:	6879      	ldr	r1, [r7, #4]
 801c914:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c916:	440b      	add	r3, r1
 801c918:	429a      	cmp	r2, r3
 801c91a:	d006      	beq.n	801c92a <tcp_receive+0x7c2>
 801c91c:	4b36      	ldr	r3, [pc, #216]	; (801c9f8 <tcp_receive+0x890>)
 801c91e:	f240 52cc 	movw	r2, #1484	; 0x5cc
 801c922:	4936      	ldr	r1, [pc, #216]	; (801c9fc <tcp_receive+0x894>)
 801c924:	4836      	ldr	r0, [pc, #216]	; (801ca00 <tcp_receive+0x898>)
 801c926:	f00a f837 	bl	8026998 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801c92a:	687b      	ldr	r3, [r7, #4]
 801c92c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c92e:	2b00      	cmp	r3, #0
 801c930:	f000 80e7 	beq.w	801cb02 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801c934:	4b2e      	ldr	r3, [pc, #184]	; (801c9f0 <tcp_receive+0x888>)
 801c936:	68db      	ldr	r3, [r3, #12]
 801c938:	899b      	ldrh	r3, [r3, #12]
 801c93a:	b29b      	uxth	r3, r3
 801c93c:	4618      	mov	r0, r3
 801c93e:	f7fa fb19 	bl	8016f74 <lwip_htons>
 801c942:	4603      	mov	r3, r0
 801c944:	b2db      	uxtb	r3, r3
 801c946:	f003 0301 	and.w	r3, r3, #1
 801c94a:	2b00      	cmp	r3, #0
 801c94c:	d010      	beq.n	801c970 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801c94e:	e00a      	b.n	801c966 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801c950:	687b      	ldr	r3, [r7, #4]
 801c952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c954:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801c956:	687b      	ldr	r3, [r7, #4]
 801c958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c95a:	681a      	ldr	r2, [r3, #0]
 801c95c:	687b      	ldr	r3, [r7, #4]
 801c95e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801c960:	68f8      	ldr	r0, [r7, #12]
 801c962:	f7fd fcc9 	bl	801a2f8 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c96a:	2b00      	cmp	r3, #0
 801c96c:	d1f0      	bne.n	801c950 <tcp_receive+0x7e8>
 801c96e:	e0c8      	b.n	801cb02 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801c970:	687b      	ldr	r3, [r7, #4]
 801c972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c974:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801c976:	e052      	b.n	801ca1e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801c978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c97a:	68db      	ldr	r3, [r3, #12]
 801c97c:	899b      	ldrh	r3, [r3, #12]
 801c97e:	b29b      	uxth	r3, r3
 801c980:	4618      	mov	r0, r3
 801c982:	f7fa faf7 	bl	8016f74 <lwip_htons>
 801c986:	4603      	mov	r3, r0
 801c988:	b2db      	uxtb	r3, r3
 801c98a:	f003 0301 	and.w	r3, r3, #1
 801c98e:	2b00      	cmp	r3, #0
 801c990:	d03d      	beq.n	801ca0e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801c992:	4b17      	ldr	r3, [pc, #92]	; (801c9f0 <tcp_receive+0x888>)
 801c994:	68db      	ldr	r3, [r3, #12]
 801c996:	899b      	ldrh	r3, [r3, #12]
 801c998:	b29b      	uxth	r3, r3
 801c99a:	4618      	mov	r0, r3
 801c99c:	f7fa faea 	bl	8016f74 <lwip_htons>
 801c9a0:	4603      	mov	r3, r0
 801c9a2:	b2db      	uxtb	r3, r3
 801c9a4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	d130      	bne.n	801ca0e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801c9ac:	4b10      	ldr	r3, [pc, #64]	; (801c9f0 <tcp_receive+0x888>)
 801c9ae:	68db      	ldr	r3, [r3, #12]
 801c9b0:	899b      	ldrh	r3, [r3, #12]
 801c9b2:	b29c      	uxth	r4, r3
 801c9b4:	2001      	movs	r0, #1
 801c9b6:	f7fa fadd 	bl	8016f74 <lwip_htons>
 801c9ba:	4603      	mov	r3, r0
 801c9bc:	461a      	mov	r2, r3
 801c9be:	4b0c      	ldr	r3, [pc, #48]	; (801c9f0 <tcp_receive+0x888>)
 801c9c0:	68db      	ldr	r3, [r3, #12]
 801c9c2:	4322      	orrs	r2, r4
 801c9c4:	b292      	uxth	r2, r2
 801c9c6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801c9c8:	4b09      	ldr	r3, [pc, #36]	; (801c9f0 <tcp_receive+0x888>)
 801c9ca:	891c      	ldrh	r4, [r3, #8]
 801c9cc:	4b08      	ldr	r3, [pc, #32]	; (801c9f0 <tcp_receive+0x888>)
 801c9ce:	68db      	ldr	r3, [r3, #12]
 801c9d0:	899b      	ldrh	r3, [r3, #12]
 801c9d2:	b29b      	uxth	r3, r3
 801c9d4:	4618      	mov	r0, r3
 801c9d6:	f7fa facd 	bl	8016f74 <lwip_htons>
 801c9da:	4603      	mov	r3, r0
 801c9dc:	b2db      	uxtb	r3, r3
 801c9de:	f003 0303 	and.w	r3, r3, #3
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d00e      	beq.n	801ca04 <tcp_receive+0x89c>
 801c9e6:	2301      	movs	r3, #1
 801c9e8:	e00d      	b.n	801ca06 <tcp_receive+0x89e>
 801c9ea:	bf00      	nop
 801c9ec:	200131e4 	.word	0x200131e4
 801c9f0:	200131c4 	.word	0x200131c4
 801c9f4:	200131ee 	.word	0x200131ee
 801c9f8:	08029e7c 	.word	0x08029e7c
 801c9fc:	0802a224 	.word	0x0802a224
 801ca00:	08029ec8 	.word	0x08029ec8
 801ca04:	2300      	movs	r3, #0
 801ca06:	4423      	add	r3, r4
 801ca08:	b29a      	uxth	r2, r3
 801ca0a:	4b98      	ldr	r3, [pc, #608]	; (801cc6c <tcp_receive+0xb04>)
 801ca0c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801ca0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca10:	613b      	str	r3, [r7, #16]
              next = next->next;
 801ca12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca14:	681b      	ldr	r3, [r3, #0]
 801ca16:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801ca18:	6938      	ldr	r0, [r7, #16]
 801ca1a:	f7fd fc6d 	bl	801a2f8 <tcp_seg_free>
            while (next &&
 801ca1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca20:	2b00      	cmp	r3, #0
 801ca22:	d00e      	beq.n	801ca42 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801ca24:	4b91      	ldr	r3, [pc, #580]	; (801cc6c <tcp_receive+0xb04>)
 801ca26:	881b      	ldrh	r3, [r3, #0]
 801ca28:	461a      	mov	r2, r3
 801ca2a:	4b91      	ldr	r3, [pc, #580]	; (801cc70 <tcp_receive+0xb08>)
 801ca2c:	681b      	ldr	r3, [r3, #0]
 801ca2e:	441a      	add	r2, r3
 801ca30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca32:	68db      	ldr	r3, [r3, #12]
 801ca34:	685b      	ldr	r3, [r3, #4]
 801ca36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801ca38:	8909      	ldrh	r1, [r1, #8]
 801ca3a:	440b      	add	r3, r1
 801ca3c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	da9a      	bge.n	801c978 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801ca42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca44:	2b00      	cmp	r3, #0
 801ca46:	d059      	beq.n	801cafc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801ca48:	4b88      	ldr	r3, [pc, #544]	; (801cc6c <tcp_receive+0xb04>)
 801ca4a:	881b      	ldrh	r3, [r3, #0]
 801ca4c:	461a      	mov	r2, r3
 801ca4e:	4b88      	ldr	r3, [pc, #544]	; (801cc70 <tcp_receive+0xb08>)
 801ca50:	681b      	ldr	r3, [r3, #0]
 801ca52:	441a      	add	r2, r3
 801ca54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca56:	68db      	ldr	r3, [r3, #12]
 801ca58:	685b      	ldr	r3, [r3, #4]
 801ca5a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	dd4d      	ble.n	801cafc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801ca60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca62:	68db      	ldr	r3, [r3, #12]
 801ca64:	685b      	ldr	r3, [r3, #4]
 801ca66:	b29a      	uxth	r2, r3
 801ca68:	4b81      	ldr	r3, [pc, #516]	; (801cc70 <tcp_receive+0xb08>)
 801ca6a:	681b      	ldr	r3, [r3, #0]
 801ca6c:	b29b      	uxth	r3, r3
 801ca6e:	1ad3      	subs	r3, r2, r3
 801ca70:	b29a      	uxth	r2, r3
 801ca72:	4b80      	ldr	r3, [pc, #512]	; (801cc74 <tcp_receive+0xb0c>)
 801ca74:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801ca76:	4b7f      	ldr	r3, [pc, #508]	; (801cc74 <tcp_receive+0xb0c>)
 801ca78:	68db      	ldr	r3, [r3, #12]
 801ca7a:	899b      	ldrh	r3, [r3, #12]
 801ca7c:	b29b      	uxth	r3, r3
 801ca7e:	4618      	mov	r0, r3
 801ca80:	f7fa fa78 	bl	8016f74 <lwip_htons>
 801ca84:	4603      	mov	r3, r0
 801ca86:	b2db      	uxtb	r3, r3
 801ca88:	f003 0302 	and.w	r3, r3, #2
 801ca8c:	2b00      	cmp	r3, #0
 801ca8e:	d005      	beq.n	801ca9c <tcp_receive+0x934>
                inseg.len -= 1;
 801ca90:	4b78      	ldr	r3, [pc, #480]	; (801cc74 <tcp_receive+0xb0c>)
 801ca92:	891b      	ldrh	r3, [r3, #8]
 801ca94:	3b01      	subs	r3, #1
 801ca96:	b29a      	uxth	r2, r3
 801ca98:	4b76      	ldr	r3, [pc, #472]	; (801cc74 <tcp_receive+0xb0c>)
 801ca9a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801ca9c:	4b75      	ldr	r3, [pc, #468]	; (801cc74 <tcp_receive+0xb0c>)
 801ca9e:	685a      	ldr	r2, [r3, #4]
 801caa0:	4b74      	ldr	r3, [pc, #464]	; (801cc74 <tcp_receive+0xb0c>)
 801caa2:	891b      	ldrh	r3, [r3, #8]
 801caa4:	4619      	mov	r1, r3
 801caa6:	4610      	mov	r0, r2
 801caa8:	f7fb fcd0 	bl	801844c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801caac:	4b71      	ldr	r3, [pc, #452]	; (801cc74 <tcp_receive+0xb0c>)
 801caae:	891c      	ldrh	r4, [r3, #8]
 801cab0:	4b70      	ldr	r3, [pc, #448]	; (801cc74 <tcp_receive+0xb0c>)
 801cab2:	68db      	ldr	r3, [r3, #12]
 801cab4:	899b      	ldrh	r3, [r3, #12]
 801cab6:	b29b      	uxth	r3, r3
 801cab8:	4618      	mov	r0, r3
 801caba:	f7fa fa5b 	bl	8016f74 <lwip_htons>
 801cabe:	4603      	mov	r3, r0
 801cac0:	b2db      	uxtb	r3, r3
 801cac2:	f003 0303 	and.w	r3, r3, #3
 801cac6:	2b00      	cmp	r3, #0
 801cac8:	d001      	beq.n	801cace <tcp_receive+0x966>
 801caca:	2301      	movs	r3, #1
 801cacc:	e000      	b.n	801cad0 <tcp_receive+0x968>
 801cace:	2300      	movs	r3, #0
 801cad0:	4423      	add	r3, r4
 801cad2:	b29a      	uxth	r2, r3
 801cad4:	4b65      	ldr	r3, [pc, #404]	; (801cc6c <tcp_receive+0xb04>)
 801cad6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801cad8:	4b64      	ldr	r3, [pc, #400]	; (801cc6c <tcp_receive+0xb04>)
 801cada:	881b      	ldrh	r3, [r3, #0]
 801cadc:	461a      	mov	r2, r3
 801cade:	4b64      	ldr	r3, [pc, #400]	; (801cc70 <tcp_receive+0xb08>)
 801cae0:	681b      	ldr	r3, [r3, #0]
 801cae2:	441a      	add	r2, r3
 801cae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cae6:	68db      	ldr	r3, [r3, #12]
 801cae8:	685b      	ldr	r3, [r3, #4]
 801caea:	429a      	cmp	r2, r3
 801caec:	d006      	beq.n	801cafc <tcp_receive+0x994>
 801caee:	4b62      	ldr	r3, [pc, #392]	; (801cc78 <tcp_receive+0xb10>)
 801caf0:	f240 52fd 	movw	r2, #1533	; 0x5fd
 801caf4:	4961      	ldr	r1, [pc, #388]	; (801cc7c <tcp_receive+0xb14>)
 801caf6:	4862      	ldr	r0, [pc, #392]	; (801cc80 <tcp_receive+0xb18>)
 801caf8:	f009 ff4e 	bl	8026998 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cb00:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801cb02:	4b5a      	ldr	r3, [pc, #360]	; (801cc6c <tcp_receive+0xb04>)
 801cb04:	881b      	ldrh	r3, [r3, #0]
 801cb06:	461a      	mov	r2, r3
 801cb08:	4b59      	ldr	r3, [pc, #356]	; (801cc70 <tcp_receive+0xb08>)
 801cb0a:	681b      	ldr	r3, [r3, #0]
 801cb0c:	441a      	add	r2, r3
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801cb12:	687b      	ldr	r3, [r7, #4]
 801cb14:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801cb16:	4b55      	ldr	r3, [pc, #340]	; (801cc6c <tcp_receive+0xb04>)
 801cb18:	881b      	ldrh	r3, [r3, #0]
 801cb1a:	429a      	cmp	r2, r3
 801cb1c:	d206      	bcs.n	801cb2c <tcp_receive+0x9c4>
 801cb1e:	4b56      	ldr	r3, [pc, #344]	; (801cc78 <tcp_receive+0xb10>)
 801cb20:	f240 6207 	movw	r2, #1543	; 0x607
 801cb24:	4957      	ldr	r1, [pc, #348]	; (801cc84 <tcp_receive+0xb1c>)
 801cb26:	4856      	ldr	r0, [pc, #344]	; (801cc80 <tcp_receive+0xb18>)
 801cb28:	f009 ff36 	bl	8026998 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801cb2c:	687b      	ldr	r3, [r7, #4]
 801cb2e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801cb30:	4b4e      	ldr	r3, [pc, #312]	; (801cc6c <tcp_receive+0xb04>)
 801cb32:	881b      	ldrh	r3, [r3, #0]
 801cb34:	1ad3      	subs	r3, r2, r3
 801cb36:	b29a      	uxth	r2, r3
 801cb38:	687b      	ldr	r3, [r7, #4]
 801cb3a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801cb3c:	6878      	ldr	r0, [r7, #4]
 801cb3e:	f7fc fda1 	bl	8019684 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801cb42:	4b4c      	ldr	r3, [pc, #304]	; (801cc74 <tcp_receive+0xb0c>)
 801cb44:	685b      	ldr	r3, [r3, #4]
 801cb46:	891b      	ldrh	r3, [r3, #8]
 801cb48:	2b00      	cmp	r3, #0
 801cb4a:	d006      	beq.n	801cb5a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801cb4c:	4b49      	ldr	r3, [pc, #292]	; (801cc74 <tcp_receive+0xb0c>)
 801cb4e:	685b      	ldr	r3, [r3, #4]
 801cb50:	4a4d      	ldr	r2, [pc, #308]	; (801cc88 <tcp_receive+0xb20>)
 801cb52:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801cb54:	4b47      	ldr	r3, [pc, #284]	; (801cc74 <tcp_receive+0xb0c>)
 801cb56:	2200      	movs	r2, #0
 801cb58:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801cb5a:	4b46      	ldr	r3, [pc, #280]	; (801cc74 <tcp_receive+0xb0c>)
 801cb5c:	68db      	ldr	r3, [r3, #12]
 801cb5e:	899b      	ldrh	r3, [r3, #12]
 801cb60:	b29b      	uxth	r3, r3
 801cb62:	4618      	mov	r0, r3
 801cb64:	f7fa fa06 	bl	8016f74 <lwip_htons>
 801cb68:	4603      	mov	r3, r0
 801cb6a:	b2db      	uxtb	r3, r3
 801cb6c:	f003 0301 	and.w	r3, r3, #1
 801cb70:	2b00      	cmp	r3, #0
 801cb72:	f000 80b8 	beq.w	801cce6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801cb76:	4b45      	ldr	r3, [pc, #276]	; (801cc8c <tcp_receive+0xb24>)
 801cb78:	781b      	ldrb	r3, [r3, #0]
 801cb7a:	f043 0320 	orr.w	r3, r3, #32
 801cb7e:	b2da      	uxtb	r2, r3
 801cb80:	4b42      	ldr	r3, [pc, #264]	; (801cc8c <tcp_receive+0xb24>)
 801cb82:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801cb84:	e0af      	b.n	801cce6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cb8a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801cb8c:	687b      	ldr	r3, [r7, #4]
 801cb8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cb90:	68db      	ldr	r3, [r3, #12]
 801cb92:	685b      	ldr	r3, [r3, #4]
 801cb94:	4a36      	ldr	r2, [pc, #216]	; (801cc70 <tcp_receive+0xb08>)
 801cb96:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801cb98:	68bb      	ldr	r3, [r7, #8]
 801cb9a:	891b      	ldrh	r3, [r3, #8]
 801cb9c:	461c      	mov	r4, r3
 801cb9e:	68bb      	ldr	r3, [r7, #8]
 801cba0:	68db      	ldr	r3, [r3, #12]
 801cba2:	899b      	ldrh	r3, [r3, #12]
 801cba4:	b29b      	uxth	r3, r3
 801cba6:	4618      	mov	r0, r3
 801cba8:	f7fa f9e4 	bl	8016f74 <lwip_htons>
 801cbac:	4603      	mov	r3, r0
 801cbae:	b2db      	uxtb	r3, r3
 801cbb0:	f003 0303 	and.w	r3, r3, #3
 801cbb4:	2b00      	cmp	r3, #0
 801cbb6:	d001      	beq.n	801cbbc <tcp_receive+0xa54>
 801cbb8:	2301      	movs	r3, #1
 801cbba:	e000      	b.n	801cbbe <tcp_receive+0xa56>
 801cbbc:	2300      	movs	r3, #0
 801cbbe:	191a      	adds	r2, r3, r4
 801cbc0:	687b      	ldr	r3, [r7, #4]
 801cbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cbc4:	441a      	add	r2, r3
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801cbca:	687b      	ldr	r3, [r7, #4]
 801cbcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cbce:	461c      	mov	r4, r3
 801cbd0:	68bb      	ldr	r3, [r7, #8]
 801cbd2:	891b      	ldrh	r3, [r3, #8]
 801cbd4:	461d      	mov	r5, r3
 801cbd6:	68bb      	ldr	r3, [r7, #8]
 801cbd8:	68db      	ldr	r3, [r3, #12]
 801cbda:	899b      	ldrh	r3, [r3, #12]
 801cbdc:	b29b      	uxth	r3, r3
 801cbde:	4618      	mov	r0, r3
 801cbe0:	f7fa f9c8 	bl	8016f74 <lwip_htons>
 801cbe4:	4603      	mov	r3, r0
 801cbe6:	b2db      	uxtb	r3, r3
 801cbe8:	f003 0303 	and.w	r3, r3, #3
 801cbec:	2b00      	cmp	r3, #0
 801cbee:	d001      	beq.n	801cbf4 <tcp_receive+0xa8c>
 801cbf0:	2301      	movs	r3, #1
 801cbf2:	e000      	b.n	801cbf6 <tcp_receive+0xa8e>
 801cbf4:	2300      	movs	r3, #0
 801cbf6:	442b      	add	r3, r5
 801cbf8:	429c      	cmp	r4, r3
 801cbfa:	d206      	bcs.n	801cc0a <tcp_receive+0xaa2>
 801cbfc:	4b1e      	ldr	r3, [pc, #120]	; (801cc78 <tcp_receive+0xb10>)
 801cbfe:	f240 622c 	movw	r2, #1580	; 0x62c
 801cc02:	4923      	ldr	r1, [pc, #140]	; (801cc90 <tcp_receive+0xb28>)
 801cc04:	481e      	ldr	r0, [pc, #120]	; (801cc80 <tcp_receive+0xb18>)
 801cc06:	f009 fec7 	bl	8026998 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801cc0a:	68bb      	ldr	r3, [r7, #8]
 801cc0c:	891b      	ldrh	r3, [r3, #8]
 801cc0e:	461c      	mov	r4, r3
 801cc10:	68bb      	ldr	r3, [r7, #8]
 801cc12:	68db      	ldr	r3, [r3, #12]
 801cc14:	899b      	ldrh	r3, [r3, #12]
 801cc16:	b29b      	uxth	r3, r3
 801cc18:	4618      	mov	r0, r3
 801cc1a:	f7fa f9ab 	bl	8016f74 <lwip_htons>
 801cc1e:	4603      	mov	r3, r0
 801cc20:	b2db      	uxtb	r3, r3
 801cc22:	f003 0303 	and.w	r3, r3, #3
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	d001      	beq.n	801cc2e <tcp_receive+0xac6>
 801cc2a:	2301      	movs	r3, #1
 801cc2c:	e000      	b.n	801cc30 <tcp_receive+0xac8>
 801cc2e:	2300      	movs	r3, #0
 801cc30:	1919      	adds	r1, r3, r4
 801cc32:	687b      	ldr	r3, [r7, #4]
 801cc34:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801cc36:	b28b      	uxth	r3, r1
 801cc38:	1ad3      	subs	r3, r2, r3
 801cc3a:	b29a      	uxth	r2, r3
 801cc3c:	687b      	ldr	r3, [r7, #4]
 801cc3e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801cc40:	6878      	ldr	r0, [r7, #4]
 801cc42:	f7fc fd1f 	bl	8019684 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801cc46:	68bb      	ldr	r3, [r7, #8]
 801cc48:	685b      	ldr	r3, [r3, #4]
 801cc4a:	891b      	ldrh	r3, [r3, #8]
 801cc4c:	2b00      	cmp	r3, #0
 801cc4e:	d028      	beq.n	801cca2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801cc50:	4b0d      	ldr	r3, [pc, #52]	; (801cc88 <tcp_receive+0xb20>)
 801cc52:	681b      	ldr	r3, [r3, #0]
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	d01d      	beq.n	801cc94 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801cc58:	4b0b      	ldr	r3, [pc, #44]	; (801cc88 <tcp_receive+0xb20>)
 801cc5a:	681a      	ldr	r2, [r3, #0]
 801cc5c:	68bb      	ldr	r3, [r7, #8]
 801cc5e:	685b      	ldr	r3, [r3, #4]
 801cc60:	4619      	mov	r1, r3
 801cc62:	4610      	mov	r0, r2
 801cc64:	f7fb fe78 	bl	8018958 <pbuf_cat>
 801cc68:	e018      	b.n	801cc9c <tcp_receive+0xb34>
 801cc6a:	bf00      	nop
 801cc6c:	200131ee 	.word	0x200131ee
 801cc70:	200131e4 	.word	0x200131e4
 801cc74:	200131c4 	.word	0x200131c4
 801cc78:	08029e7c 	.word	0x08029e7c
 801cc7c:	0802a25c 	.word	0x0802a25c
 801cc80:	08029ec8 	.word	0x08029ec8
 801cc84:	0802a298 	.word	0x0802a298
 801cc88:	200131f4 	.word	0x200131f4
 801cc8c:	200131f1 	.word	0x200131f1
 801cc90:	0802a2b8 	.word	0x0802a2b8
            } else {
              recv_data = cseg->p;
 801cc94:	68bb      	ldr	r3, [r7, #8]
 801cc96:	685b      	ldr	r3, [r3, #4]
 801cc98:	4a70      	ldr	r2, [pc, #448]	; (801ce5c <tcp_receive+0xcf4>)
 801cc9a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801cc9c:	68bb      	ldr	r3, [r7, #8]
 801cc9e:	2200      	movs	r2, #0
 801cca0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801cca2:	68bb      	ldr	r3, [r7, #8]
 801cca4:	68db      	ldr	r3, [r3, #12]
 801cca6:	899b      	ldrh	r3, [r3, #12]
 801cca8:	b29b      	uxth	r3, r3
 801ccaa:	4618      	mov	r0, r3
 801ccac:	f7fa f962 	bl	8016f74 <lwip_htons>
 801ccb0:	4603      	mov	r3, r0
 801ccb2:	b2db      	uxtb	r3, r3
 801ccb4:	f003 0301 	and.w	r3, r3, #1
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	d00d      	beq.n	801ccd8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801ccbc:	4b68      	ldr	r3, [pc, #416]	; (801ce60 <tcp_receive+0xcf8>)
 801ccbe:	781b      	ldrb	r3, [r3, #0]
 801ccc0:	f043 0320 	orr.w	r3, r3, #32
 801ccc4:	b2da      	uxtb	r2, r3
 801ccc6:	4b66      	ldr	r3, [pc, #408]	; (801ce60 <tcp_receive+0xcf8>)
 801ccc8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801ccca:	687b      	ldr	r3, [r7, #4]
 801cccc:	7d1b      	ldrb	r3, [r3, #20]
 801ccce:	2b04      	cmp	r3, #4
 801ccd0:	d102      	bne.n	801ccd8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	2207      	movs	r2, #7
 801ccd6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801ccd8:	68bb      	ldr	r3, [r7, #8]
 801ccda:	681a      	ldr	r2, [r3, #0]
 801ccdc:	687b      	ldr	r3, [r7, #4]
 801ccde:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801cce0:	68b8      	ldr	r0, [r7, #8]
 801cce2:	f7fd fb09 	bl	801a2f8 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ccea:	2b00      	cmp	r3, #0
 801ccec:	d008      	beq.n	801cd00 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801ccee:	687b      	ldr	r3, [r7, #4]
 801ccf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ccf2:	68db      	ldr	r3, [r3, #12]
 801ccf4:	685a      	ldr	r2, [r3, #4]
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801ccfa:	429a      	cmp	r2, r3
 801ccfc:	f43f af43 	beq.w	801cb86 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801cd00:	687b      	ldr	r3, [r7, #4]
 801cd02:	8b5b      	ldrh	r3, [r3, #26]
 801cd04:	f003 0301 	and.w	r3, r3, #1
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	d00e      	beq.n	801cd2a <tcp_receive+0xbc2>
 801cd0c:	687b      	ldr	r3, [r7, #4]
 801cd0e:	8b5b      	ldrh	r3, [r3, #26]
 801cd10:	f023 0301 	bic.w	r3, r3, #1
 801cd14:	b29a      	uxth	r2, r3
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	835a      	strh	r2, [r3, #26]
 801cd1a:	687b      	ldr	r3, [r7, #4]
 801cd1c:	8b5b      	ldrh	r3, [r3, #26]
 801cd1e:	f043 0302 	orr.w	r3, r3, #2
 801cd22:	b29a      	uxth	r2, r3
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801cd28:	e188      	b.n	801d03c <tcp_receive+0xed4>
        tcp_ack(pcb);
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	8b5b      	ldrh	r3, [r3, #26]
 801cd2e:	f043 0301 	orr.w	r3, r3, #1
 801cd32:	b29a      	uxth	r2, r3
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801cd38:	e180      	b.n	801d03c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801cd3a:	687b      	ldr	r3, [r7, #4]
 801cd3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	d106      	bne.n	801cd50 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801cd42:	4848      	ldr	r0, [pc, #288]	; (801ce64 <tcp_receive+0xcfc>)
 801cd44:	f7fd faf0 	bl	801a328 <tcp_seg_copy>
 801cd48:	4602      	mov	r2, r0
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	675a      	str	r2, [r3, #116]	; 0x74
 801cd4e:	e16d      	b.n	801d02c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801cd50:	2300      	movs	r3, #0
 801cd52:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801cd54:	687b      	ldr	r3, [r7, #4]
 801cd56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cd58:	63bb      	str	r3, [r7, #56]	; 0x38
 801cd5a:	e157      	b.n	801d00c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801cd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cd5e:	68db      	ldr	r3, [r3, #12]
 801cd60:	685a      	ldr	r2, [r3, #4]
 801cd62:	4b41      	ldr	r3, [pc, #260]	; (801ce68 <tcp_receive+0xd00>)
 801cd64:	681b      	ldr	r3, [r3, #0]
 801cd66:	429a      	cmp	r2, r3
 801cd68:	d11d      	bne.n	801cda6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801cd6a:	4b3e      	ldr	r3, [pc, #248]	; (801ce64 <tcp_receive+0xcfc>)
 801cd6c:	891a      	ldrh	r2, [r3, #8]
 801cd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cd70:	891b      	ldrh	r3, [r3, #8]
 801cd72:	429a      	cmp	r2, r3
 801cd74:	f240 814f 	bls.w	801d016 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801cd78:	483a      	ldr	r0, [pc, #232]	; (801ce64 <tcp_receive+0xcfc>)
 801cd7a:	f7fd fad5 	bl	801a328 <tcp_seg_copy>
 801cd7e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801cd80:	697b      	ldr	r3, [r7, #20]
 801cd82:	2b00      	cmp	r3, #0
 801cd84:	f000 8149 	beq.w	801d01a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801cd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cd8a:	2b00      	cmp	r3, #0
 801cd8c:	d003      	beq.n	801cd96 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801cd8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cd90:	697a      	ldr	r2, [r7, #20]
 801cd92:	601a      	str	r2, [r3, #0]
 801cd94:	e002      	b.n	801cd9c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801cd96:	687b      	ldr	r3, [r7, #4]
 801cd98:	697a      	ldr	r2, [r7, #20]
 801cd9a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801cd9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801cd9e:	6978      	ldr	r0, [r7, #20]
 801cda0:	f7ff f8de 	bl	801bf60 <tcp_oos_insert_segment>
                }
                break;
 801cda4:	e139      	b.n	801d01a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801cda6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cda8:	2b00      	cmp	r3, #0
 801cdaa:	d117      	bne.n	801cddc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801cdac:	4b2e      	ldr	r3, [pc, #184]	; (801ce68 <tcp_receive+0xd00>)
 801cdae:	681a      	ldr	r2, [r3, #0]
 801cdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cdb2:	68db      	ldr	r3, [r3, #12]
 801cdb4:	685b      	ldr	r3, [r3, #4]
 801cdb6:	1ad3      	subs	r3, r2, r3
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	da57      	bge.n	801ce6c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801cdbc:	4829      	ldr	r0, [pc, #164]	; (801ce64 <tcp_receive+0xcfc>)
 801cdbe:	f7fd fab3 	bl	801a328 <tcp_seg_copy>
 801cdc2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801cdc4:	69bb      	ldr	r3, [r7, #24]
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	f000 8129 	beq.w	801d01e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801cdcc:	687b      	ldr	r3, [r7, #4]
 801cdce:	69ba      	ldr	r2, [r7, #24]
 801cdd0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801cdd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801cdd4:	69b8      	ldr	r0, [r7, #24]
 801cdd6:	f7ff f8c3 	bl	801bf60 <tcp_oos_insert_segment>
                  }
                  break;
 801cdda:	e120      	b.n	801d01e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801cddc:	4b22      	ldr	r3, [pc, #136]	; (801ce68 <tcp_receive+0xd00>)
 801cdde:	681a      	ldr	r2, [r3, #0]
 801cde0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cde2:	68db      	ldr	r3, [r3, #12]
 801cde4:	685b      	ldr	r3, [r3, #4]
 801cde6:	1ad3      	subs	r3, r2, r3
 801cde8:	3b01      	subs	r3, #1
 801cdea:	2b00      	cmp	r3, #0
 801cdec:	db3e      	blt.n	801ce6c <tcp_receive+0xd04>
 801cdee:	4b1e      	ldr	r3, [pc, #120]	; (801ce68 <tcp_receive+0xd00>)
 801cdf0:	681a      	ldr	r2, [r3, #0]
 801cdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cdf4:	68db      	ldr	r3, [r3, #12]
 801cdf6:	685b      	ldr	r3, [r3, #4]
 801cdf8:	1ad3      	subs	r3, r2, r3
 801cdfa:	3301      	adds	r3, #1
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	dc35      	bgt.n	801ce6c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801ce00:	4818      	ldr	r0, [pc, #96]	; (801ce64 <tcp_receive+0xcfc>)
 801ce02:	f7fd fa91 	bl	801a328 <tcp_seg_copy>
 801ce06:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801ce08:	69fb      	ldr	r3, [r7, #28]
 801ce0a:	2b00      	cmp	r3, #0
 801ce0c:	f000 8109 	beq.w	801d022 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801ce10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce12:	68db      	ldr	r3, [r3, #12]
 801ce14:	685b      	ldr	r3, [r3, #4]
 801ce16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ce18:	8912      	ldrh	r2, [r2, #8]
 801ce1a:	441a      	add	r2, r3
 801ce1c:	4b12      	ldr	r3, [pc, #72]	; (801ce68 <tcp_receive+0xd00>)
 801ce1e:	681b      	ldr	r3, [r3, #0]
 801ce20:	1ad3      	subs	r3, r2, r3
 801ce22:	2b00      	cmp	r3, #0
 801ce24:	dd12      	ble.n	801ce4c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801ce26:	4b10      	ldr	r3, [pc, #64]	; (801ce68 <tcp_receive+0xd00>)
 801ce28:	681b      	ldr	r3, [r3, #0]
 801ce2a:	b29a      	uxth	r2, r3
 801ce2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce2e:	68db      	ldr	r3, [r3, #12]
 801ce30:	685b      	ldr	r3, [r3, #4]
 801ce32:	b29b      	uxth	r3, r3
 801ce34:	1ad3      	subs	r3, r2, r3
 801ce36:	b29a      	uxth	r2, r3
 801ce38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce3a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801ce3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce3e:	685a      	ldr	r2, [r3, #4]
 801ce40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce42:	891b      	ldrh	r3, [r3, #8]
 801ce44:	4619      	mov	r1, r3
 801ce46:	4610      	mov	r0, r2
 801ce48:	f7fb fb00 	bl	801844c <pbuf_realloc>
                    }
                    prev->next = cseg;
 801ce4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce4e:	69fa      	ldr	r2, [r7, #28]
 801ce50:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801ce52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801ce54:	69f8      	ldr	r0, [r7, #28]
 801ce56:	f7ff f883 	bl	801bf60 <tcp_oos_insert_segment>
                  }
                  break;
 801ce5a:	e0e2      	b.n	801d022 <tcp_receive+0xeba>
 801ce5c:	200131f4 	.word	0x200131f4
 801ce60:	200131f1 	.word	0x200131f1
 801ce64:	200131c4 	.word	0x200131c4
 801ce68:	200131e4 	.word	0x200131e4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801ce6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ce6e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801ce70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ce72:	681b      	ldr	r3, [r3, #0]
 801ce74:	2b00      	cmp	r3, #0
 801ce76:	f040 80c6 	bne.w	801d006 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801ce7a:	4b80      	ldr	r3, [pc, #512]	; (801d07c <tcp_receive+0xf14>)
 801ce7c:	681a      	ldr	r2, [r3, #0]
 801ce7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ce80:	68db      	ldr	r3, [r3, #12]
 801ce82:	685b      	ldr	r3, [r3, #4]
 801ce84:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	f340 80bd 	ble.w	801d006 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801ce8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ce8e:	68db      	ldr	r3, [r3, #12]
 801ce90:	899b      	ldrh	r3, [r3, #12]
 801ce92:	b29b      	uxth	r3, r3
 801ce94:	4618      	mov	r0, r3
 801ce96:	f7fa f86d 	bl	8016f74 <lwip_htons>
 801ce9a:	4603      	mov	r3, r0
 801ce9c:	b2db      	uxtb	r3, r3
 801ce9e:	f003 0301 	and.w	r3, r3, #1
 801cea2:	2b00      	cmp	r3, #0
 801cea4:	f040 80bf 	bne.w	801d026 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801cea8:	4875      	ldr	r0, [pc, #468]	; (801d080 <tcp_receive+0xf18>)
 801ceaa:	f7fd fa3d 	bl	801a328 <tcp_seg_copy>
 801ceae:	4602      	mov	r2, r0
 801ceb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ceb2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801ceb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ceb6:	681b      	ldr	r3, [r3, #0]
 801ceb8:	2b00      	cmp	r3, #0
 801ceba:	f000 80b6 	beq.w	801d02a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801cebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cec0:	68db      	ldr	r3, [r3, #12]
 801cec2:	685b      	ldr	r3, [r3, #4]
 801cec4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801cec6:	8912      	ldrh	r2, [r2, #8]
 801cec8:	441a      	add	r2, r3
 801ceca:	4b6c      	ldr	r3, [pc, #432]	; (801d07c <tcp_receive+0xf14>)
 801cecc:	681b      	ldr	r3, [r3, #0]
 801cece:	1ad3      	subs	r3, r2, r3
 801ced0:	2b00      	cmp	r3, #0
 801ced2:	dd12      	ble.n	801cefa <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801ced4:	4b69      	ldr	r3, [pc, #420]	; (801d07c <tcp_receive+0xf14>)
 801ced6:	681b      	ldr	r3, [r3, #0]
 801ced8:	b29a      	uxth	r2, r3
 801ceda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cedc:	68db      	ldr	r3, [r3, #12]
 801cede:	685b      	ldr	r3, [r3, #4]
 801cee0:	b29b      	uxth	r3, r3
 801cee2:	1ad3      	subs	r3, r2, r3
 801cee4:	b29a      	uxth	r2, r3
 801cee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cee8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801ceea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ceec:	685a      	ldr	r2, [r3, #4]
 801ceee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cef0:	891b      	ldrh	r3, [r3, #8]
 801cef2:	4619      	mov	r1, r3
 801cef4:	4610      	mov	r0, r2
 801cef6:	f7fb faa9 	bl	801844c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801cefa:	4b62      	ldr	r3, [pc, #392]	; (801d084 <tcp_receive+0xf1c>)
 801cefc:	881b      	ldrh	r3, [r3, #0]
 801cefe:	461a      	mov	r2, r3
 801cf00:	4b5e      	ldr	r3, [pc, #376]	; (801d07c <tcp_receive+0xf14>)
 801cf02:	681b      	ldr	r3, [r3, #0]
 801cf04:	441a      	add	r2, r3
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf0a:	6879      	ldr	r1, [r7, #4]
 801cf0c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801cf0e:	440b      	add	r3, r1
 801cf10:	1ad3      	subs	r3, r2, r3
 801cf12:	2b00      	cmp	r3, #0
 801cf14:	f340 8089 	ble.w	801d02a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801cf18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf1a:	681b      	ldr	r3, [r3, #0]
 801cf1c:	68db      	ldr	r3, [r3, #12]
 801cf1e:	899b      	ldrh	r3, [r3, #12]
 801cf20:	b29b      	uxth	r3, r3
 801cf22:	4618      	mov	r0, r3
 801cf24:	f7fa f826 	bl	8016f74 <lwip_htons>
 801cf28:	4603      	mov	r3, r0
 801cf2a:	b2db      	uxtb	r3, r3
 801cf2c:	f003 0301 	and.w	r3, r3, #1
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	d022      	beq.n	801cf7a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801cf34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf36:	681b      	ldr	r3, [r3, #0]
 801cf38:	68db      	ldr	r3, [r3, #12]
 801cf3a:	899b      	ldrh	r3, [r3, #12]
 801cf3c:	b29b      	uxth	r3, r3
 801cf3e:	b21b      	sxth	r3, r3
 801cf40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801cf44:	b21c      	sxth	r4, r3
 801cf46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf48:	681b      	ldr	r3, [r3, #0]
 801cf4a:	68db      	ldr	r3, [r3, #12]
 801cf4c:	899b      	ldrh	r3, [r3, #12]
 801cf4e:	b29b      	uxth	r3, r3
 801cf50:	4618      	mov	r0, r3
 801cf52:	f7fa f80f 	bl	8016f74 <lwip_htons>
 801cf56:	4603      	mov	r3, r0
 801cf58:	b2db      	uxtb	r3, r3
 801cf5a:	b29b      	uxth	r3, r3
 801cf5c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801cf60:	b29b      	uxth	r3, r3
 801cf62:	4618      	mov	r0, r3
 801cf64:	f7fa f806 	bl	8016f74 <lwip_htons>
 801cf68:	4603      	mov	r3, r0
 801cf6a:	b21b      	sxth	r3, r3
 801cf6c:	4323      	orrs	r3, r4
 801cf6e:	b21a      	sxth	r2, r3
 801cf70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf72:	681b      	ldr	r3, [r3, #0]
 801cf74:	68db      	ldr	r3, [r3, #12]
 801cf76:	b292      	uxth	r2, r2
 801cf78:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801cf7a:	687b      	ldr	r3, [r7, #4]
 801cf7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf7e:	b29a      	uxth	r2, r3
 801cf80:	687b      	ldr	r3, [r7, #4]
 801cf82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cf84:	4413      	add	r3, r2
 801cf86:	b299      	uxth	r1, r3
 801cf88:	4b3c      	ldr	r3, [pc, #240]	; (801d07c <tcp_receive+0xf14>)
 801cf8a:	681b      	ldr	r3, [r3, #0]
 801cf8c:	b29a      	uxth	r2, r3
 801cf8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf90:	681b      	ldr	r3, [r3, #0]
 801cf92:	1a8a      	subs	r2, r1, r2
 801cf94:	b292      	uxth	r2, r2
 801cf96:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801cf98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf9a:	681b      	ldr	r3, [r3, #0]
 801cf9c:	685a      	ldr	r2, [r3, #4]
 801cf9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfa0:	681b      	ldr	r3, [r3, #0]
 801cfa2:	891b      	ldrh	r3, [r3, #8]
 801cfa4:	4619      	mov	r1, r3
 801cfa6:	4610      	mov	r0, r2
 801cfa8:	f7fb fa50 	bl	801844c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801cfac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfae:	681b      	ldr	r3, [r3, #0]
 801cfb0:	891c      	ldrh	r4, [r3, #8]
 801cfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfb4:	681b      	ldr	r3, [r3, #0]
 801cfb6:	68db      	ldr	r3, [r3, #12]
 801cfb8:	899b      	ldrh	r3, [r3, #12]
 801cfba:	b29b      	uxth	r3, r3
 801cfbc:	4618      	mov	r0, r3
 801cfbe:	f7f9 ffd9 	bl	8016f74 <lwip_htons>
 801cfc2:	4603      	mov	r3, r0
 801cfc4:	b2db      	uxtb	r3, r3
 801cfc6:	f003 0303 	and.w	r3, r3, #3
 801cfca:	2b00      	cmp	r3, #0
 801cfcc:	d001      	beq.n	801cfd2 <tcp_receive+0xe6a>
 801cfce:	2301      	movs	r3, #1
 801cfd0:	e000      	b.n	801cfd4 <tcp_receive+0xe6c>
 801cfd2:	2300      	movs	r3, #0
 801cfd4:	4423      	add	r3, r4
 801cfd6:	b29a      	uxth	r2, r3
 801cfd8:	4b2a      	ldr	r3, [pc, #168]	; (801d084 <tcp_receive+0xf1c>)
 801cfda:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801cfdc:	4b29      	ldr	r3, [pc, #164]	; (801d084 <tcp_receive+0xf1c>)
 801cfde:	881b      	ldrh	r3, [r3, #0]
 801cfe0:	461a      	mov	r2, r3
 801cfe2:	4b26      	ldr	r3, [pc, #152]	; (801d07c <tcp_receive+0xf14>)
 801cfe4:	681b      	ldr	r3, [r3, #0]
 801cfe6:	441a      	add	r2, r3
 801cfe8:	687b      	ldr	r3, [r7, #4]
 801cfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cfec:	6879      	ldr	r1, [r7, #4]
 801cfee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801cff0:	440b      	add	r3, r1
 801cff2:	429a      	cmp	r2, r3
 801cff4:	d019      	beq.n	801d02a <tcp_receive+0xec2>
 801cff6:	4b24      	ldr	r3, [pc, #144]	; (801d088 <tcp_receive+0xf20>)
 801cff8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801cffc:	4923      	ldr	r1, [pc, #140]	; (801d08c <tcp_receive+0xf24>)
 801cffe:	4824      	ldr	r0, [pc, #144]	; (801d090 <tcp_receive+0xf28>)
 801d000:	f009 fcca 	bl	8026998 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801d004:	e011      	b.n	801d02a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801d006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d008:	681b      	ldr	r3, [r3, #0]
 801d00a:	63bb      	str	r3, [r7, #56]	; 0x38
 801d00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d00e:	2b00      	cmp	r3, #0
 801d010:	f47f aea4 	bne.w	801cd5c <tcp_receive+0xbf4>
 801d014:	e00a      	b.n	801d02c <tcp_receive+0xec4>
                break;
 801d016:	bf00      	nop
 801d018:	e008      	b.n	801d02c <tcp_receive+0xec4>
                break;
 801d01a:	bf00      	nop
 801d01c:	e006      	b.n	801d02c <tcp_receive+0xec4>
                  break;
 801d01e:	bf00      	nop
 801d020:	e004      	b.n	801d02c <tcp_receive+0xec4>
                  break;
 801d022:	bf00      	nop
 801d024:	e002      	b.n	801d02c <tcp_receive+0xec4>
                  break;
 801d026:	bf00      	nop
 801d028:	e000      	b.n	801d02c <tcp_receive+0xec4>
                break;
 801d02a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801d02c:	6878      	ldr	r0, [r7, #4]
 801d02e:	f001 fe99 	bl	801ed64 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801d032:	e003      	b.n	801d03c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801d034:	6878      	ldr	r0, [r7, #4]
 801d036:	f001 fe95 	bl	801ed64 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d03a:	e01a      	b.n	801d072 <tcp_receive+0xf0a>
 801d03c:	e019      	b.n	801d072 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801d03e:	4b0f      	ldr	r3, [pc, #60]	; (801d07c <tcp_receive+0xf14>)
 801d040:	681a      	ldr	r2, [r3, #0]
 801d042:	687b      	ldr	r3, [r7, #4]
 801d044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d046:	1ad3      	subs	r3, r2, r3
 801d048:	2b00      	cmp	r3, #0
 801d04a:	db0a      	blt.n	801d062 <tcp_receive+0xefa>
 801d04c:	4b0b      	ldr	r3, [pc, #44]	; (801d07c <tcp_receive+0xf14>)
 801d04e:	681a      	ldr	r2, [r3, #0]
 801d050:	687b      	ldr	r3, [r7, #4]
 801d052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d054:	6879      	ldr	r1, [r7, #4]
 801d056:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d058:	440b      	add	r3, r1
 801d05a:	1ad3      	subs	r3, r2, r3
 801d05c:	3301      	adds	r3, #1
 801d05e:	2b00      	cmp	r3, #0
 801d060:	dd07      	ble.n	801d072 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801d062:	687b      	ldr	r3, [r7, #4]
 801d064:	8b5b      	ldrh	r3, [r3, #26]
 801d066:	f043 0302 	orr.w	r3, r3, #2
 801d06a:	b29a      	uxth	r2, r3
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801d070:	e7ff      	b.n	801d072 <tcp_receive+0xf0a>
 801d072:	bf00      	nop
 801d074:	3750      	adds	r7, #80	; 0x50
 801d076:	46bd      	mov	sp, r7
 801d078:	bdb0      	pop	{r4, r5, r7, pc}
 801d07a:	bf00      	nop
 801d07c:	200131e4 	.word	0x200131e4
 801d080:	200131c4 	.word	0x200131c4
 801d084:	200131ee 	.word	0x200131ee
 801d088:	08029e7c 	.word	0x08029e7c
 801d08c:	0802a224 	.word	0x0802a224
 801d090:	08029ec8 	.word	0x08029ec8

0801d094 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801d094:	b480      	push	{r7}
 801d096:	b083      	sub	sp, #12
 801d098:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801d09a:	4b15      	ldr	r3, [pc, #84]	; (801d0f0 <tcp_get_next_optbyte+0x5c>)
 801d09c:	881b      	ldrh	r3, [r3, #0]
 801d09e:	1c5a      	adds	r2, r3, #1
 801d0a0:	b291      	uxth	r1, r2
 801d0a2:	4a13      	ldr	r2, [pc, #76]	; (801d0f0 <tcp_get_next_optbyte+0x5c>)
 801d0a4:	8011      	strh	r1, [r2, #0]
 801d0a6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d0a8:	4b12      	ldr	r3, [pc, #72]	; (801d0f4 <tcp_get_next_optbyte+0x60>)
 801d0aa:	681b      	ldr	r3, [r3, #0]
 801d0ac:	2b00      	cmp	r3, #0
 801d0ae:	d004      	beq.n	801d0ba <tcp_get_next_optbyte+0x26>
 801d0b0:	4b11      	ldr	r3, [pc, #68]	; (801d0f8 <tcp_get_next_optbyte+0x64>)
 801d0b2:	881b      	ldrh	r3, [r3, #0]
 801d0b4:	88fa      	ldrh	r2, [r7, #6]
 801d0b6:	429a      	cmp	r2, r3
 801d0b8:	d208      	bcs.n	801d0cc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d0ba:	4b10      	ldr	r3, [pc, #64]	; (801d0fc <tcp_get_next_optbyte+0x68>)
 801d0bc:	681b      	ldr	r3, [r3, #0]
 801d0be:	3314      	adds	r3, #20
 801d0c0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801d0c2:	88fb      	ldrh	r3, [r7, #6]
 801d0c4:	683a      	ldr	r2, [r7, #0]
 801d0c6:	4413      	add	r3, r2
 801d0c8:	781b      	ldrb	r3, [r3, #0]
 801d0ca:	e00b      	b.n	801d0e4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d0cc:	88fb      	ldrh	r3, [r7, #6]
 801d0ce:	b2da      	uxtb	r2, r3
 801d0d0:	4b09      	ldr	r3, [pc, #36]	; (801d0f8 <tcp_get_next_optbyte+0x64>)
 801d0d2:	881b      	ldrh	r3, [r3, #0]
 801d0d4:	b2db      	uxtb	r3, r3
 801d0d6:	1ad3      	subs	r3, r2, r3
 801d0d8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801d0da:	4b06      	ldr	r3, [pc, #24]	; (801d0f4 <tcp_get_next_optbyte+0x60>)
 801d0dc:	681a      	ldr	r2, [r3, #0]
 801d0de:	797b      	ldrb	r3, [r7, #5]
 801d0e0:	4413      	add	r3, r2
 801d0e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d0e4:	4618      	mov	r0, r3
 801d0e6:	370c      	adds	r7, #12
 801d0e8:	46bd      	mov	sp, r7
 801d0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0ee:	4770      	bx	lr
 801d0f0:	200131e0 	.word	0x200131e0
 801d0f4:	200131dc 	.word	0x200131dc
 801d0f8:	200131da 	.word	0x200131da
 801d0fc:	200131d4 	.word	0x200131d4

0801d100 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801d100:	b580      	push	{r7, lr}
 801d102:	b084      	sub	sp, #16
 801d104:	af00      	add	r7, sp, #0
 801d106:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801d108:	687b      	ldr	r3, [r7, #4]
 801d10a:	2b00      	cmp	r3, #0
 801d10c:	d106      	bne.n	801d11c <tcp_parseopt+0x1c>
 801d10e:	4b31      	ldr	r3, [pc, #196]	; (801d1d4 <tcp_parseopt+0xd4>)
 801d110:	f240 727d 	movw	r2, #1917	; 0x77d
 801d114:	4930      	ldr	r1, [pc, #192]	; (801d1d8 <tcp_parseopt+0xd8>)
 801d116:	4831      	ldr	r0, [pc, #196]	; (801d1dc <tcp_parseopt+0xdc>)
 801d118:	f009 fc3e 	bl	8026998 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801d11c:	4b30      	ldr	r3, [pc, #192]	; (801d1e0 <tcp_parseopt+0xe0>)
 801d11e:	881b      	ldrh	r3, [r3, #0]
 801d120:	2b00      	cmp	r3, #0
 801d122:	d053      	beq.n	801d1cc <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d124:	4b2f      	ldr	r3, [pc, #188]	; (801d1e4 <tcp_parseopt+0xe4>)
 801d126:	2200      	movs	r2, #0
 801d128:	801a      	strh	r2, [r3, #0]
 801d12a:	e043      	b.n	801d1b4 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 801d12c:	f7ff ffb2 	bl	801d094 <tcp_get_next_optbyte>
 801d130:	4603      	mov	r3, r0
 801d132:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801d134:	7bfb      	ldrb	r3, [r7, #15]
 801d136:	2b01      	cmp	r3, #1
 801d138:	d03c      	beq.n	801d1b4 <tcp_parseopt+0xb4>
 801d13a:	2b02      	cmp	r3, #2
 801d13c:	d002      	beq.n	801d144 <tcp_parseopt+0x44>
 801d13e:	2b00      	cmp	r3, #0
 801d140:	d03f      	beq.n	801d1c2 <tcp_parseopt+0xc2>
 801d142:	e026      	b.n	801d192 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801d144:	f7ff ffa6 	bl	801d094 <tcp_get_next_optbyte>
 801d148:	4603      	mov	r3, r0
 801d14a:	2b04      	cmp	r3, #4
 801d14c:	d13b      	bne.n	801d1c6 <tcp_parseopt+0xc6>
 801d14e:	4b25      	ldr	r3, [pc, #148]	; (801d1e4 <tcp_parseopt+0xe4>)
 801d150:	881b      	ldrh	r3, [r3, #0]
 801d152:	3302      	adds	r3, #2
 801d154:	4a22      	ldr	r2, [pc, #136]	; (801d1e0 <tcp_parseopt+0xe0>)
 801d156:	8812      	ldrh	r2, [r2, #0]
 801d158:	4293      	cmp	r3, r2
 801d15a:	dc34      	bgt.n	801d1c6 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d15c:	f7ff ff9a 	bl	801d094 <tcp_get_next_optbyte>
 801d160:	4603      	mov	r3, r0
 801d162:	b29b      	uxth	r3, r3
 801d164:	021b      	lsls	r3, r3, #8
 801d166:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801d168:	f7ff ff94 	bl	801d094 <tcp_get_next_optbyte>
 801d16c:	4603      	mov	r3, r0
 801d16e:	b29a      	uxth	r2, r3
 801d170:	89bb      	ldrh	r3, [r7, #12]
 801d172:	4313      	orrs	r3, r2
 801d174:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801d176:	89bb      	ldrh	r3, [r7, #12]
 801d178:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 801d17c:	d804      	bhi.n	801d188 <tcp_parseopt+0x88>
 801d17e:	89bb      	ldrh	r3, [r7, #12]
 801d180:	2b00      	cmp	r3, #0
 801d182:	d001      	beq.n	801d188 <tcp_parseopt+0x88>
 801d184:	89ba      	ldrh	r2, [r7, #12]
 801d186:	e001      	b.n	801d18c <tcp_parseopt+0x8c>
 801d188:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801d18c:	687b      	ldr	r3, [r7, #4]
 801d18e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801d190:	e010      	b.n	801d1b4 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801d192:	f7ff ff7f 	bl	801d094 <tcp_get_next_optbyte>
 801d196:	4603      	mov	r3, r0
 801d198:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801d19a:	7afb      	ldrb	r3, [r7, #11]
 801d19c:	2b01      	cmp	r3, #1
 801d19e:	d914      	bls.n	801d1ca <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801d1a0:	7afb      	ldrb	r3, [r7, #11]
 801d1a2:	b29a      	uxth	r2, r3
 801d1a4:	4b0f      	ldr	r3, [pc, #60]	; (801d1e4 <tcp_parseopt+0xe4>)
 801d1a6:	881b      	ldrh	r3, [r3, #0]
 801d1a8:	4413      	add	r3, r2
 801d1aa:	b29b      	uxth	r3, r3
 801d1ac:	3b02      	subs	r3, #2
 801d1ae:	b29a      	uxth	r2, r3
 801d1b0:	4b0c      	ldr	r3, [pc, #48]	; (801d1e4 <tcp_parseopt+0xe4>)
 801d1b2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d1b4:	4b0b      	ldr	r3, [pc, #44]	; (801d1e4 <tcp_parseopt+0xe4>)
 801d1b6:	881a      	ldrh	r2, [r3, #0]
 801d1b8:	4b09      	ldr	r3, [pc, #36]	; (801d1e0 <tcp_parseopt+0xe0>)
 801d1ba:	881b      	ldrh	r3, [r3, #0]
 801d1bc:	429a      	cmp	r2, r3
 801d1be:	d3b5      	bcc.n	801d12c <tcp_parseopt+0x2c>
 801d1c0:	e004      	b.n	801d1cc <tcp_parseopt+0xcc>
          return;
 801d1c2:	bf00      	nop
 801d1c4:	e002      	b.n	801d1cc <tcp_parseopt+0xcc>
            return;
 801d1c6:	bf00      	nop
 801d1c8:	e000      	b.n	801d1cc <tcp_parseopt+0xcc>
            return;
 801d1ca:	bf00      	nop
      }
    }
  }
}
 801d1cc:	3710      	adds	r7, #16
 801d1ce:	46bd      	mov	sp, r7
 801d1d0:	bd80      	pop	{r7, pc}
 801d1d2:	bf00      	nop
 801d1d4:	08029e7c 	.word	0x08029e7c
 801d1d8:	0802a2e0 	.word	0x0802a2e0
 801d1dc:	08029ec8 	.word	0x08029ec8
 801d1e0:	200131d8 	.word	0x200131d8
 801d1e4:	200131e0 	.word	0x200131e0

0801d1e8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801d1e8:	b480      	push	{r7}
 801d1ea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801d1ec:	4b05      	ldr	r3, [pc, #20]	; (801d204 <tcp_trigger_input_pcb_close+0x1c>)
 801d1ee:	781b      	ldrb	r3, [r3, #0]
 801d1f0:	f043 0310 	orr.w	r3, r3, #16
 801d1f4:	b2da      	uxtb	r2, r3
 801d1f6:	4b03      	ldr	r3, [pc, #12]	; (801d204 <tcp_trigger_input_pcb_close+0x1c>)
 801d1f8:	701a      	strb	r2, [r3, #0]
}
 801d1fa:	bf00      	nop
 801d1fc:	46bd      	mov	sp, r7
 801d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d202:	4770      	bx	lr
 801d204:	200131f1 	.word	0x200131f1

0801d208 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801d208:	b580      	push	{r7, lr}
 801d20a:	b084      	sub	sp, #16
 801d20c:	af00      	add	r7, sp, #0
 801d20e:	60f8      	str	r0, [r7, #12]
 801d210:	60b9      	str	r1, [r7, #8]
 801d212:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801d214:	68fb      	ldr	r3, [r7, #12]
 801d216:	2b00      	cmp	r3, #0
 801d218:	d00a      	beq.n	801d230 <tcp_route+0x28>
 801d21a:	68fb      	ldr	r3, [r7, #12]
 801d21c:	7a1b      	ldrb	r3, [r3, #8]
 801d21e:	2b00      	cmp	r3, #0
 801d220:	d006      	beq.n	801d230 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801d222:	68fb      	ldr	r3, [r7, #12]
 801d224:	7a1b      	ldrb	r3, [r3, #8]
 801d226:	4618      	mov	r0, r3
 801d228:	f7fa ff0c 	bl	8018044 <netif_get_by_index>
 801d22c:	4603      	mov	r3, r0
 801d22e:	e003      	b.n	801d238 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801d230:	6878      	ldr	r0, [r7, #4]
 801d232:	f005 fd55 	bl	8022ce0 <ip4_route>
 801d236:	4603      	mov	r3, r0
  }
}
 801d238:	4618      	mov	r0, r3
 801d23a:	3710      	adds	r7, #16
 801d23c:	46bd      	mov	sp, r7
 801d23e:	bd80      	pop	{r7, pc}

0801d240 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801d240:	b590      	push	{r4, r7, lr}
 801d242:	b087      	sub	sp, #28
 801d244:	af00      	add	r7, sp, #0
 801d246:	60f8      	str	r0, [r7, #12]
 801d248:	60b9      	str	r1, [r7, #8]
 801d24a:	603b      	str	r3, [r7, #0]
 801d24c:	4613      	mov	r3, r2
 801d24e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801d250:	68fb      	ldr	r3, [r7, #12]
 801d252:	2b00      	cmp	r3, #0
 801d254:	d105      	bne.n	801d262 <tcp_create_segment+0x22>
 801d256:	4b44      	ldr	r3, [pc, #272]	; (801d368 <tcp_create_segment+0x128>)
 801d258:	22a3      	movs	r2, #163	; 0xa3
 801d25a:	4944      	ldr	r1, [pc, #272]	; (801d36c <tcp_create_segment+0x12c>)
 801d25c:	4844      	ldr	r0, [pc, #272]	; (801d370 <tcp_create_segment+0x130>)
 801d25e:	f009 fb9b 	bl	8026998 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801d262:	68bb      	ldr	r3, [r7, #8]
 801d264:	2b00      	cmp	r3, #0
 801d266:	d105      	bne.n	801d274 <tcp_create_segment+0x34>
 801d268:	4b3f      	ldr	r3, [pc, #252]	; (801d368 <tcp_create_segment+0x128>)
 801d26a:	22a4      	movs	r2, #164	; 0xa4
 801d26c:	4941      	ldr	r1, [pc, #260]	; (801d374 <tcp_create_segment+0x134>)
 801d26e:	4840      	ldr	r0, [pc, #256]	; (801d370 <tcp_create_segment+0x130>)
 801d270:	f009 fb92 	bl	8026998 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d274:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d278:	009b      	lsls	r3, r3, #2
 801d27a:	b2db      	uxtb	r3, r3
 801d27c:	f003 0304 	and.w	r3, r3, #4
 801d280:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801d282:	2003      	movs	r0, #3
 801d284:	f7fa fb9a 	bl	80179bc <memp_malloc>
 801d288:	6138      	str	r0, [r7, #16]
 801d28a:	693b      	ldr	r3, [r7, #16]
 801d28c:	2b00      	cmp	r3, #0
 801d28e:	d104      	bne.n	801d29a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801d290:	68b8      	ldr	r0, [r7, #8]
 801d292:	f7fb fa93 	bl	80187bc <pbuf_free>
    return NULL;
 801d296:	2300      	movs	r3, #0
 801d298:	e061      	b.n	801d35e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801d29a:	693b      	ldr	r3, [r7, #16]
 801d29c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801d2a0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801d2a2:	693b      	ldr	r3, [r7, #16]
 801d2a4:	2200      	movs	r2, #0
 801d2a6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801d2a8:	693b      	ldr	r3, [r7, #16]
 801d2aa:	68ba      	ldr	r2, [r7, #8]
 801d2ac:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801d2ae:	68bb      	ldr	r3, [r7, #8]
 801d2b0:	891a      	ldrh	r2, [r3, #8]
 801d2b2:	7dfb      	ldrb	r3, [r7, #23]
 801d2b4:	b29b      	uxth	r3, r3
 801d2b6:	429a      	cmp	r2, r3
 801d2b8:	d205      	bcs.n	801d2c6 <tcp_create_segment+0x86>
 801d2ba:	4b2b      	ldr	r3, [pc, #172]	; (801d368 <tcp_create_segment+0x128>)
 801d2bc:	22b0      	movs	r2, #176	; 0xb0
 801d2be:	492e      	ldr	r1, [pc, #184]	; (801d378 <tcp_create_segment+0x138>)
 801d2c0:	482b      	ldr	r0, [pc, #172]	; (801d370 <tcp_create_segment+0x130>)
 801d2c2:	f009 fb69 	bl	8026998 <iprintf>
  seg->len = p->tot_len - optlen;
 801d2c6:	68bb      	ldr	r3, [r7, #8]
 801d2c8:	891a      	ldrh	r2, [r3, #8]
 801d2ca:	7dfb      	ldrb	r3, [r7, #23]
 801d2cc:	b29b      	uxth	r3, r3
 801d2ce:	1ad3      	subs	r3, r2, r3
 801d2d0:	b29a      	uxth	r2, r3
 801d2d2:	693b      	ldr	r3, [r7, #16]
 801d2d4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801d2d6:	2114      	movs	r1, #20
 801d2d8:	68b8      	ldr	r0, [r7, #8]
 801d2da:	f7fb f9a7 	bl	801862c <pbuf_add_header>
 801d2de:	4603      	mov	r3, r0
 801d2e0:	2b00      	cmp	r3, #0
 801d2e2:	d004      	beq.n	801d2ee <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801d2e4:	6938      	ldr	r0, [r7, #16]
 801d2e6:	f7fd f807 	bl	801a2f8 <tcp_seg_free>
    return NULL;
 801d2ea:	2300      	movs	r3, #0
 801d2ec:	e037      	b.n	801d35e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801d2ee:	693b      	ldr	r3, [r7, #16]
 801d2f0:	685b      	ldr	r3, [r3, #4]
 801d2f2:	685a      	ldr	r2, [r3, #4]
 801d2f4:	693b      	ldr	r3, [r7, #16]
 801d2f6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801d2f8:	68fb      	ldr	r3, [r7, #12]
 801d2fa:	8ada      	ldrh	r2, [r3, #22]
 801d2fc:	693b      	ldr	r3, [r7, #16]
 801d2fe:	68dc      	ldr	r4, [r3, #12]
 801d300:	4610      	mov	r0, r2
 801d302:	f7f9 fe37 	bl	8016f74 <lwip_htons>
 801d306:	4603      	mov	r3, r0
 801d308:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801d30a:	68fb      	ldr	r3, [r7, #12]
 801d30c:	8b1a      	ldrh	r2, [r3, #24]
 801d30e:	693b      	ldr	r3, [r7, #16]
 801d310:	68dc      	ldr	r4, [r3, #12]
 801d312:	4610      	mov	r0, r2
 801d314:	f7f9 fe2e 	bl	8016f74 <lwip_htons>
 801d318:	4603      	mov	r3, r0
 801d31a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801d31c:	693b      	ldr	r3, [r7, #16]
 801d31e:	68dc      	ldr	r4, [r3, #12]
 801d320:	6838      	ldr	r0, [r7, #0]
 801d322:	f7f9 fe3c 	bl	8016f9e <lwip_htonl>
 801d326:	4603      	mov	r3, r0
 801d328:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801d32a:	7dfb      	ldrb	r3, [r7, #23]
 801d32c:	089b      	lsrs	r3, r3, #2
 801d32e:	b2db      	uxtb	r3, r3
 801d330:	b29b      	uxth	r3, r3
 801d332:	3305      	adds	r3, #5
 801d334:	b29b      	uxth	r3, r3
 801d336:	031b      	lsls	r3, r3, #12
 801d338:	b29a      	uxth	r2, r3
 801d33a:	79fb      	ldrb	r3, [r7, #7]
 801d33c:	b29b      	uxth	r3, r3
 801d33e:	4313      	orrs	r3, r2
 801d340:	b29a      	uxth	r2, r3
 801d342:	693b      	ldr	r3, [r7, #16]
 801d344:	68dc      	ldr	r4, [r3, #12]
 801d346:	4610      	mov	r0, r2
 801d348:	f7f9 fe14 	bl	8016f74 <lwip_htons>
 801d34c:	4603      	mov	r3, r0
 801d34e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801d350:	693b      	ldr	r3, [r7, #16]
 801d352:	68db      	ldr	r3, [r3, #12]
 801d354:	2200      	movs	r2, #0
 801d356:	749a      	strb	r2, [r3, #18]
 801d358:	2200      	movs	r2, #0
 801d35a:	74da      	strb	r2, [r3, #19]
  return seg;
 801d35c:	693b      	ldr	r3, [r7, #16]
}
 801d35e:	4618      	mov	r0, r3
 801d360:	371c      	adds	r7, #28
 801d362:	46bd      	mov	sp, r7
 801d364:	bd90      	pop	{r4, r7, pc}
 801d366:	bf00      	nop
 801d368:	0802a2fc 	.word	0x0802a2fc
 801d36c:	0802a330 	.word	0x0802a330
 801d370:	0802a350 	.word	0x0802a350
 801d374:	0802a378 	.word	0x0802a378
 801d378:	0802a39c 	.word	0x0802a39c

0801d37c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801d37c:	b580      	push	{r7, lr}
 801d37e:	b086      	sub	sp, #24
 801d380:	af00      	add	r7, sp, #0
 801d382:	607b      	str	r3, [r7, #4]
 801d384:	4603      	mov	r3, r0
 801d386:	73fb      	strb	r3, [r7, #15]
 801d388:	460b      	mov	r3, r1
 801d38a:	81bb      	strh	r3, [r7, #12]
 801d38c:	4613      	mov	r3, r2
 801d38e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801d390:	89bb      	ldrh	r3, [r7, #12]
 801d392:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	2b00      	cmp	r3, #0
 801d398:	d105      	bne.n	801d3a6 <tcp_pbuf_prealloc+0x2a>
 801d39a:	4b30      	ldr	r3, [pc, #192]	; (801d45c <tcp_pbuf_prealloc+0xe0>)
 801d39c:	22e8      	movs	r2, #232	; 0xe8
 801d39e:	4930      	ldr	r1, [pc, #192]	; (801d460 <tcp_pbuf_prealloc+0xe4>)
 801d3a0:	4830      	ldr	r0, [pc, #192]	; (801d464 <tcp_pbuf_prealloc+0xe8>)
 801d3a2:	f009 faf9 	bl	8026998 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801d3a6:	6a3b      	ldr	r3, [r7, #32]
 801d3a8:	2b00      	cmp	r3, #0
 801d3aa:	d105      	bne.n	801d3b8 <tcp_pbuf_prealloc+0x3c>
 801d3ac:	4b2b      	ldr	r3, [pc, #172]	; (801d45c <tcp_pbuf_prealloc+0xe0>)
 801d3ae:	22e9      	movs	r2, #233	; 0xe9
 801d3b0:	492d      	ldr	r1, [pc, #180]	; (801d468 <tcp_pbuf_prealloc+0xec>)
 801d3b2:	482c      	ldr	r0, [pc, #176]	; (801d464 <tcp_pbuf_prealloc+0xe8>)
 801d3b4:	f009 faf0 	bl	8026998 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801d3b8:	89ba      	ldrh	r2, [r7, #12]
 801d3ba:	897b      	ldrh	r3, [r7, #10]
 801d3bc:	429a      	cmp	r2, r3
 801d3be:	d221      	bcs.n	801d404 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801d3c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d3c4:	f003 0302 	and.w	r3, r3, #2
 801d3c8:	2b00      	cmp	r3, #0
 801d3ca:	d111      	bne.n	801d3f0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801d3cc:	6a3b      	ldr	r3, [r7, #32]
 801d3ce:	8b5b      	ldrh	r3, [r3, #26]
 801d3d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801d3d4:	2b00      	cmp	r3, #0
 801d3d6:	d115      	bne.n	801d404 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801d3d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d3dc:	2b00      	cmp	r3, #0
 801d3de:	d007      	beq.n	801d3f0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801d3e0:	6a3b      	ldr	r3, [r7, #32]
 801d3e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801d3e4:	2b00      	cmp	r3, #0
 801d3e6:	d103      	bne.n	801d3f0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801d3e8:	6a3b      	ldr	r3, [r7, #32]
 801d3ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801d3ec:	2b00      	cmp	r3, #0
 801d3ee:	d009      	beq.n	801d404 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801d3f0:	89bb      	ldrh	r3, [r7, #12]
 801d3f2:	f203 13cf 	addw	r3, r3, #463	; 0x1cf
 801d3f6:	f023 0203 	bic.w	r2, r3, #3
 801d3fa:	897b      	ldrh	r3, [r7, #10]
 801d3fc:	4293      	cmp	r3, r2
 801d3fe:	bf28      	it	cs
 801d400:	4613      	movcs	r3, r2
 801d402:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801d404:	8af9      	ldrh	r1, [r7, #22]
 801d406:	7bfb      	ldrb	r3, [r7, #15]
 801d408:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d40c:	4618      	mov	r0, r3
 801d40e:	f7fa fec3 	bl	8018198 <pbuf_alloc>
 801d412:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801d414:	693b      	ldr	r3, [r7, #16]
 801d416:	2b00      	cmp	r3, #0
 801d418:	d101      	bne.n	801d41e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801d41a:	2300      	movs	r3, #0
 801d41c:	e019      	b.n	801d452 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801d41e:	693b      	ldr	r3, [r7, #16]
 801d420:	681b      	ldr	r3, [r3, #0]
 801d422:	2b00      	cmp	r3, #0
 801d424:	d006      	beq.n	801d434 <tcp_pbuf_prealloc+0xb8>
 801d426:	4b0d      	ldr	r3, [pc, #52]	; (801d45c <tcp_pbuf_prealloc+0xe0>)
 801d428:	f240 120b 	movw	r2, #267	; 0x10b
 801d42c:	490f      	ldr	r1, [pc, #60]	; (801d46c <tcp_pbuf_prealloc+0xf0>)
 801d42e:	480d      	ldr	r0, [pc, #52]	; (801d464 <tcp_pbuf_prealloc+0xe8>)
 801d430:	f009 fab2 	bl	8026998 <iprintf>
  *oversize = p->len - length;
 801d434:	693b      	ldr	r3, [r7, #16]
 801d436:	895a      	ldrh	r2, [r3, #10]
 801d438:	89bb      	ldrh	r3, [r7, #12]
 801d43a:	1ad3      	subs	r3, r2, r3
 801d43c:	b29a      	uxth	r2, r3
 801d43e:	687b      	ldr	r3, [r7, #4]
 801d440:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801d442:	693b      	ldr	r3, [r7, #16]
 801d444:	89ba      	ldrh	r2, [r7, #12]
 801d446:	811a      	strh	r2, [r3, #8]
 801d448:	693b      	ldr	r3, [r7, #16]
 801d44a:	891a      	ldrh	r2, [r3, #8]
 801d44c:	693b      	ldr	r3, [r7, #16]
 801d44e:	815a      	strh	r2, [r3, #10]
  return p;
 801d450:	693b      	ldr	r3, [r7, #16]
}
 801d452:	4618      	mov	r0, r3
 801d454:	3718      	adds	r7, #24
 801d456:	46bd      	mov	sp, r7
 801d458:	bd80      	pop	{r7, pc}
 801d45a:	bf00      	nop
 801d45c:	0802a2fc 	.word	0x0802a2fc
 801d460:	0802a3b4 	.word	0x0802a3b4
 801d464:	0802a350 	.word	0x0802a350
 801d468:	0802a3d8 	.word	0x0802a3d8
 801d46c:	0802a3f8 	.word	0x0802a3f8

0801d470 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801d470:	b580      	push	{r7, lr}
 801d472:	b082      	sub	sp, #8
 801d474:	af00      	add	r7, sp, #0
 801d476:	6078      	str	r0, [r7, #4]
 801d478:	460b      	mov	r3, r1
 801d47a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801d47c:	687b      	ldr	r3, [r7, #4]
 801d47e:	2b00      	cmp	r3, #0
 801d480:	d106      	bne.n	801d490 <tcp_write_checks+0x20>
 801d482:	4b33      	ldr	r3, [pc, #204]	; (801d550 <tcp_write_checks+0xe0>)
 801d484:	f240 1233 	movw	r2, #307	; 0x133
 801d488:	4932      	ldr	r1, [pc, #200]	; (801d554 <tcp_write_checks+0xe4>)
 801d48a:	4833      	ldr	r0, [pc, #204]	; (801d558 <tcp_write_checks+0xe8>)
 801d48c:	f009 fa84 	bl	8026998 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801d490:	687b      	ldr	r3, [r7, #4]
 801d492:	7d1b      	ldrb	r3, [r3, #20]
 801d494:	2b04      	cmp	r3, #4
 801d496:	d00e      	beq.n	801d4b6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801d49c:	2b07      	cmp	r3, #7
 801d49e:	d00a      	beq.n	801d4b6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801d4a0:	687b      	ldr	r3, [r7, #4]
 801d4a2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801d4a4:	2b02      	cmp	r3, #2
 801d4a6:	d006      	beq.n	801d4b6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801d4a8:	687b      	ldr	r3, [r7, #4]
 801d4aa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801d4ac:	2b03      	cmp	r3, #3
 801d4ae:	d002      	beq.n	801d4b6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801d4b0:	f06f 030a 	mvn.w	r3, #10
 801d4b4:	e048      	b.n	801d548 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801d4b6:	887b      	ldrh	r3, [r7, #2]
 801d4b8:	2b00      	cmp	r3, #0
 801d4ba:	d101      	bne.n	801d4c0 <tcp_write_checks+0x50>
    return ERR_OK;
 801d4bc:	2300      	movs	r3, #0
 801d4be:	e043      	b.n	801d548 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801d4c0:	687b      	ldr	r3, [r7, #4]
 801d4c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801d4c6:	887a      	ldrh	r2, [r7, #2]
 801d4c8:	429a      	cmp	r2, r3
 801d4ca:	d909      	bls.n	801d4e0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d4cc:	687b      	ldr	r3, [r7, #4]
 801d4ce:	8b5b      	ldrh	r3, [r3, #26]
 801d4d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d4d4:	b29a      	uxth	r2, r3
 801d4d6:	687b      	ldr	r3, [r7, #4]
 801d4d8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801d4da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d4de:	e033      	b.n	801d548 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801d4e0:	687b      	ldr	r3, [r7, #4]
 801d4e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d4e6:	2b0f      	cmp	r3, #15
 801d4e8:	d909      	bls.n	801d4fe <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d4ea:	687b      	ldr	r3, [r7, #4]
 801d4ec:	8b5b      	ldrh	r3, [r3, #26]
 801d4ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d4f2:	b29a      	uxth	r2, r3
 801d4f4:	687b      	ldr	r3, [r7, #4]
 801d4f6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801d4f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d4fc:	e024      	b.n	801d548 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801d4fe:	687b      	ldr	r3, [r7, #4]
 801d500:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d504:	2b00      	cmp	r3, #0
 801d506:	d00f      	beq.n	801d528 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801d508:	687b      	ldr	r3, [r7, #4]
 801d50a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d50c:	2b00      	cmp	r3, #0
 801d50e:	d11a      	bne.n	801d546 <tcp_write_checks+0xd6>
 801d510:	687b      	ldr	r3, [r7, #4]
 801d512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d514:	2b00      	cmp	r3, #0
 801d516:	d116      	bne.n	801d546 <tcp_write_checks+0xd6>
 801d518:	4b0d      	ldr	r3, [pc, #52]	; (801d550 <tcp_write_checks+0xe0>)
 801d51a:	f44f 72ab 	mov.w	r2, #342	; 0x156
 801d51e:	490f      	ldr	r1, [pc, #60]	; (801d55c <tcp_write_checks+0xec>)
 801d520:	480d      	ldr	r0, [pc, #52]	; (801d558 <tcp_write_checks+0xe8>)
 801d522:	f009 fa39 	bl	8026998 <iprintf>
 801d526:	e00e      	b.n	801d546 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801d528:	687b      	ldr	r3, [r7, #4]
 801d52a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d52c:	2b00      	cmp	r3, #0
 801d52e:	d103      	bne.n	801d538 <tcp_write_checks+0xc8>
 801d530:	687b      	ldr	r3, [r7, #4]
 801d532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d534:	2b00      	cmp	r3, #0
 801d536:	d006      	beq.n	801d546 <tcp_write_checks+0xd6>
 801d538:	4b05      	ldr	r3, [pc, #20]	; (801d550 <tcp_write_checks+0xe0>)
 801d53a:	f240 1259 	movw	r2, #345	; 0x159
 801d53e:	4908      	ldr	r1, [pc, #32]	; (801d560 <tcp_write_checks+0xf0>)
 801d540:	4805      	ldr	r0, [pc, #20]	; (801d558 <tcp_write_checks+0xe8>)
 801d542:	f009 fa29 	bl	8026998 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801d546:	2300      	movs	r3, #0
}
 801d548:	4618      	mov	r0, r3
 801d54a:	3708      	adds	r7, #8
 801d54c:	46bd      	mov	sp, r7
 801d54e:	bd80      	pop	{r7, pc}
 801d550:	0802a2fc 	.word	0x0802a2fc
 801d554:	0802a40c 	.word	0x0802a40c
 801d558:	0802a350 	.word	0x0802a350
 801d55c:	0802a42c 	.word	0x0802a42c
 801d560:	0802a468 	.word	0x0802a468

0801d564 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801d564:	b590      	push	{r4, r7, lr}
 801d566:	b09b      	sub	sp, #108	; 0x6c
 801d568:	af04      	add	r7, sp, #16
 801d56a:	60f8      	str	r0, [r7, #12]
 801d56c:	60b9      	str	r1, [r7, #8]
 801d56e:	4611      	mov	r1, r2
 801d570:	461a      	mov	r2, r3
 801d572:	460b      	mov	r3, r1
 801d574:	80fb      	strh	r3, [r7, #6]
 801d576:	4613      	mov	r3, r2
 801d578:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801d57a:	2300      	movs	r3, #0
 801d57c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801d57e:	2300      	movs	r3, #0
 801d580:	653b      	str	r3, [r7, #80]	; 0x50
 801d582:	2300      	movs	r3, #0
 801d584:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d586:	2300      	movs	r3, #0
 801d588:	64bb      	str	r3, [r7, #72]	; 0x48
 801d58a:	2300      	movs	r3, #0
 801d58c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801d58e:	2300      	movs	r3, #0
 801d590:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801d594:	2300      	movs	r3, #0
 801d596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801d59a:	2300      	movs	r3, #0
 801d59c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801d59e:	2300      	movs	r3, #0
 801d5a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801d5a2:	2300      	movs	r3, #0
 801d5a4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801d5a6:	68fb      	ldr	r3, [r7, #12]
 801d5a8:	2b00      	cmp	r3, #0
 801d5aa:	d109      	bne.n	801d5c0 <tcp_write+0x5c>
 801d5ac:	4ba5      	ldr	r3, [pc, #660]	; (801d844 <tcp_write+0x2e0>)
 801d5ae:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801d5b2:	49a5      	ldr	r1, [pc, #660]	; (801d848 <tcp_write+0x2e4>)
 801d5b4:	48a5      	ldr	r0, [pc, #660]	; (801d84c <tcp_write+0x2e8>)
 801d5b6:	f009 f9ef 	bl	8026998 <iprintf>
 801d5ba:	f06f 030f 	mvn.w	r3, #15
 801d5be:	e32c      	b.n	801dc1a <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801d5c0:	68fb      	ldr	r3, [r7, #12]
 801d5c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801d5c6:	085b      	lsrs	r3, r3, #1
 801d5c8:	b29a      	uxth	r2, r3
 801d5ca:	68fb      	ldr	r3, [r7, #12]
 801d5cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d5ce:	4293      	cmp	r3, r2
 801d5d0:	bf28      	it	cs
 801d5d2:	4613      	movcs	r3, r2
 801d5d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801d5d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d5d8:	2b00      	cmp	r3, #0
 801d5da:	d102      	bne.n	801d5e2 <tcp_write+0x7e>
 801d5dc:	68fb      	ldr	r3, [r7, #12]
 801d5de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d5e0:	e000      	b.n	801d5e4 <tcp_write+0x80>
 801d5e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d5e4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801d5e6:	68bb      	ldr	r3, [r7, #8]
 801d5e8:	2b00      	cmp	r3, #0
 801d5ea:	d109      	bne.n	801d600 <tcp_write+0x9c>
 801d5ec:	4b95      	ldr	r3, [pc, #596]	; (801d844 <tcp_write+0x2e0>)
 801d5ee:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 801d5f2:	4997      	ldr	r1, [pc, #604]	; (801d850 <tcp_write+0x2ec>)
 801d5f4:	4895      	ldr	r0, [pc, #596]	; (801d84c <tcp_write+0x2e8>)
 801d5f6:	f009 f9cf 	bl	8026998 <iprintf>
 801d5fa:	f06f 030f 	mvn.w	r3, #15
 801d5fe:	e30c      	b.n	801dc1a <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801d600:	88fb      	ldrh	r3, [r7, #6]
 801d602:	4619      	mov	r1, r3
 801d604:	68f8      	ldr	r0, [r7, #12]
 801d606:	f7ff ff33 	bl	801d470 <tcp_write_checks>
 801d60a:	4603      	mov	r3, r0
 801d60c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801d610:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801d614:	2b00      	cmp	r3, #0
 801d616:	d002      	beq.n	801d61e <tcp_write+0xba>
    return err;
 801d618:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801d61c:	e2fd      	b.n	801dc1a <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 801d61e:	68fb      	ldr	r3, [r7, #12]
 801d620:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d624:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801d628:	2300      	movs	r3, #0
 801d62a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801d62e:	68fb      	ldr	r3, [r7, #12]
 801d630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d632:	2b00      	cmp	r3, #0
 801d634:	f000 80f7 	beq.w	801d826 <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d638:	68fb      	ldr	r3, [r7, #12]
 801d63a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d63c:	653b      	str	r3, [r7, #80]	; 0x50
 801d63e:	e002      	b.n	801d646 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801d640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d642:	681b      	ldr	r3, [r3, #0]
 801d644:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d648:	681b      	ldr	r3, [r3, #0]
 801d64a:	2b00      	cmp	r3, #0
 801d64c:	d1f8      	bne.n	801d640 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801d64e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d650:	7a9b      	ldrb	r3, [r3, #10]
 801d652:	009b      	lsls	r3, r3, #2
 801d654:	b29b      	uxth	r3, r3
 801d656:	f003 0304 	and.w	r3, r3, #4
 801d65a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801d65c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d65e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d660:	891b      	ldrh	r3, [r3, #8]
 801d662:	4619      	mov	r1, r3
 801d664:	8c3b      	ldrh	r3, [r7, #32]
 801d666:	440b      	add	r3, r1
 801d668:	429a      	cmp	r2, r3
 801d66a:	da06      	bge.n	801d67a <tcp_write+0x116>
 801d66c:	4b75      	ldr	r3, [pc, #468]	; (801d844 <tcp_write+0x2e0>)
 801d66e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801d672:	4978      	ldr	r1, [pc, #480]	; (801d854 <tcp_write+0x2f0>)
 801d674:	4875      	ldr	r0, [pc, #468]	; (801d84c <tcp_write+0x2e8>)
 801d676:	f009 f98f 	bl	8026998 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801d67a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d67c:	891a      	ldrh	r2, [r3, #8]
 801d67e:	8c3b      	ldrh	r3, [r7, #32]
 801d680:	4413      	add	r3, r2
 801d682:	b29b      	uxth	r3, r3
 801d684:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d686:	1ad3      	subs	r3, r2, r3
 801d688:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801d68a:	68fb      	ldr	r3, [r7, #12]
 801d68c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801d690:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801d692:	8a7b      	ldrh	r3, [r7, #18]
 801d694:	2b00      	cmp	r3, #0
 801d696:	d027      	beq.n	801d6e8 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801d698:	8a7b      	ldrh	r3, [r7, #18]
 801d69a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d69c:	429a      	cmp	r2, r3
 801d69e:	d206      	bcs.n	801d6ae <tcp_write+0x14a>
 801d6a0:	4b68      	ldr	r3, [pc, #416]	; (801d844 <tcp_write+0x2e0>)
 801d6a2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801d6a6:	496c      	ldr	r1, [pc, #432]	; (801d858 <tcp_write+0x2f4>)
 801d6a8:	4868      	ldr	r0, [pc, #416]	; (801d84c <tcp_write+0x2e8>)
 801d6aa:	f009 f975 	bl	8026998 <iprintf>
      seg = last_unsent;
 801d6ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d6b0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801d6b2:	8a7b      	ldrh	r3, [r7, #18]
 801d6b4:	88fa      	ldrh	r2, [r7, #6]
 801d6b6:	429a      	cmp	r2, r3
 801d6b8:	d901      	bls.n	801d6be <tcp_write+0x15a>
 801d6ba:	8a7b      	ldrh	r3, [r7, #18]
 801d6bc:	e000      	b.n	801d6c0 <tcp_write+0x15c>
 801d6be:	88fb      	ldrh	r3, [r7, #6]
 801d6c0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d6c2:	4293      	cmp	r3, r2
 801d6c4:	bfa8      	it	ge
 801d6c6:	4613      	movge	r3, r2
 801d6c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801d6ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d6ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d6d0:	4413      	add	r3, r2
 801d6d2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801d6d6:	8a7a      	ldrh	r2, [r7, #18]
 801d6d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d6da:	1ad3      	subs	r3, r2, r3
 801d6dc:	b29b      	uxth	r3, r3
 801d6de:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801d6e0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d6e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d6e4:	1ad3      	subs	r3, r2, r3
 801d6e6:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801d6e8:	8a7b      	ldrh	r3, [r7, #18]
 801d6ea:	2b00      	cmp	r3, #0
 801d6ec:	d00b      	beq.n	801d706 <tcp_write+0x1a2>
 801d6ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d6f2:	88fb      	ldrh	r3, [r7, #6]
 801d6f4:	429a      	cmp	r2, r3
 801d6f6:	d006      	beq.n	801d706 <tcp_write+0x1a2>
 801d6f8:	4b52      	ldr	r3, [pc, #328]	; (801d844 <tcp_write+0x2e0>)
 801d6fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d6fe:	4957      	ldr	r1, [pc, #348]	; (801d85c <tcp_write+0x2f8>)
 801d700:	4852      	ldr	r0, [pc, #328]	; (801d84c <tcp_write+0x2e8>)
 801d702:	f009 f949 	bl	8026998 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801d706:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d70a:	88fb      	ldrh	r3, [r7, #6]
 801d70c:	429a      	cmp	r2, r3
 801d70e:	f080 8168 	bcs.w	801d9e2 <tcp_write+0x47e>
 801d712:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d714:	2b00      	cmp	r3, #0
 801d716:	f000 8164 	beq.w	801d9e2 <tcp_write+0x47e>
 801d71a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d71c:	891b      	ldrh	r3, [r3, #8]
 801d71e:	2b00      	cmp	r3, #0
 801d720:	f000 815f 	beq.w	801d9e2 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801d724:	88fa      	ldrh	r2, [r7, #6]
 801d726:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d72a:	1ad2      	subs	r2, r2, r3
 801d72c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d72e:	4293      	cmp	r3, r2
 801d730:	bfa8      	it	ge
 801d732:	4613      	movge	r3, r2
 801d734:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801d736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d738:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801d73a:	797b      	ldrb	r3, [r7, #5]
 801d73c:	f003 0301 	and.w	r3, r3, #1
 801d740:	2b00      	cmp	r3, #0
 801d742:	d027      	beq.n	801d794 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801d744:	f107 0012 	add.w	r0, r7, #18
 801d748:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d74a:	8bf9      	ldrh	r1, [r7, #30]
 801d74c:	2301      	movs	r3, #1
 801d74e:	9302      	str	r3, [sp, #8]
 801d750:	797b      	ldrb	r3, [r7, #5]
 801d752:	9301      	str	r3, [sp, #4]
 801d754:	68fb      	ldr	r3, [r7, #12]
 801d756:	9300      	str	r3, [sp, #0]
 801d758:	4603      	mov	r3, r0
 801d75a:	2000      	movs	r0, #0
 801d75c:	f7ff fe0e 	bl	801d37c <tcp_pbuf_prealloc>
 801d760:	6578      	str	r0, [r7, #84]	; 0x54
 801d762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d764:	2b00      	cmp	r3, #0
 801d766:	f000 8226 	beq.w	801dbb6 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801d76a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d76c:	6858      	ldr	r0, [r3, #4]
 801d76e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d772:	68ba      	ldr	r2, [r7, #8]
 801d774:	4413      	add	r3, r2
 801d776:	8bfa      	ldrh	r2, [r7, #30]
 801d778:	4619      	mov	r1, r3
 801d77a:	f009 f852 	bl	8026822 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801d77e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801d780:	f7fb f8aa 	bl	80188d8 <pbuf_clen>
 801d784:	4603      	mov	r3, r0
 801d786:	461a      	mov	r2, r3
 801d788:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d78c:	4413      	add	r3, r2
 801d78e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801d792:	e041      	b.n	801d818 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801d794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d796:	685b      	ldr	r3, [r3, #4]
 801d798:	637b      	str	r3, [r7, #52]	; 0x34
 801d79a:	e002      	b.n	801d7a2 <tcp_write+0x23e>
 801d79c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d79e:	681b      	ldr	r3, [r3, #0]
 801d7a0:	637b      	str	r3, [r7, #52]	; 0x34
 801d7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d7a4:	681b      	ldr	r3, [r3, #0]
 801d7a6:	2b00      	cmp	r3, #0
 801d7a8:	d1f8      	bne.n	801d79c <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801d7aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d7ac:	7b1b      	ldrb	r3, [r3, #12]
 801d7ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801d7b2:	2b00      	cmp	r3, #0
 801d7b4:	d115      	bne.n	801d7e2 <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801d7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d7b8:	685b      	ldr	r3, [r3, #4]
 801d7ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d7bc:	8952      	ldrh	r2, [r2, #10]
 801d7be:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801d7c0:	68ba      	ldr	r2, [r7, #8]
 801d7c2:	429a      	cmp	r2, r3
 801d7c4:	d10d      	bne.n	801d7e2 <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801d7c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d7ca:	2b00      	cmp	r3, #0
 801d7cc:	d006      	beq.n	801d7dc <tcp_write+0x278>
 801d7ce:	4b1d      	ldr	r3, [pc, #116]	; (801d844 <tcp_write+0x2e0>)
 801d7d0:	f240 2231 	movw	r2, #561	; 0x231
 801d7d4:	4922      	ldr	r1, [pc, #136]	; (801d860 <tcp_write+0x2fc>)
 801d7d6:	481d      	ldr	r0, [pc, #116]	; (801d84c <tcp_write+0x2e8>)
 801d7d8:	f009 f8de 	bl	8026998 <iprintf>
          extendlen = seglen;
 801d7dc:	8bfb      	ldrh	r3, [r7, #30]
 801d7de:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801d7e0:	e01a      	b.n	801d818 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801d7e2:	8bfb      	ldrh	r3, [r7, #30]
 801d7e4:	2201      	movs	r2, #1
 801d7e6:	4619      	mov	r1, r3
 801d7e8:	2000      	movs	r0, #0
 801d7ea:	f7fa fcd5 	bl	8018198 <pbuf_alloc>
 801d7ee:	6578      	str	r0, [r7, #84]	; 0x54
 801d7f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d7f2:	2b00      	cmp	r3, #0
 801d7f4:	f000 81e1 	beq.w	801dbba <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801d7f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d7fc:	68ba      	ldr	r2, [r7, #8]
 801d7fe:	441a      	add	r2, r3
 801d800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d802:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801d804:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801d806:	f7fb f867 	bl	80188d8 <pbuf_clen>
 801d80a:	4603      	mov	r3, r0
 801d80c:	461a      	mov	r2, r3
 801d80e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d812:	4413      	add	r3, r2
 801d814:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801d818:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d81c:	8bfb      	ldrh	r3, [r7, #30]
 801d81e:	4413      	add	r3, r2
 801d820:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801d824:	e0dd      	b.n	801d9e2 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801d826:	68fb      	ldr	r3, [r7, #12]
 801d828:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801d82c:	2b00      	cmp	r3, #0
 801d82e:	f000 80d8 	beq.w	801d9e2 <tcp_write+0x47e>
 801d832:	4b04      	ldr	r3, [pc, #16]	; (801d844 <tcp_write+0x2e0>)
 801d834:	f240 224b 	movw	r2, #587	; 0x24b
 801d838:	490a      	ldr	r1, [pc, #40]	; (801d864 <tcp_write+0x300>)
 801d83a:	4804      	ldr	r0, [pc, #16]	; (801d84c <tcp_write+0x2e8>)
 801d83c:	f009 f8ac 	bl	8026998 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801d840:	e0cf      	b.n	801d9e2 <tcp_write+0x47e>
 801d842:	bf00      	nop
 801d844:	0802a2fc 	.word	0x0802a2fc
 801d848:	0802a49c 	.word	0x0802a49c
 801d84c:	0802a350 	.word	0x0802a350
 801d850:	0802a4b4 	.word	0x0802a4b4
 801d854:	0802a4e8 	.word	0x0802a4e8
 801d858:	0802a500 	.word	0x0802a500
 801d85c:	0802a520 	.word	0x0802a520
 801d860:	0802a540 	.word	0x0802a540
 801d864:	0802a56c 	.word	0x0802a56c
    struct pbuf *p;
    u16_t left = len - pos;
 801d868:	88fa      	ldrh	r2, [r7, #6]
 801d86a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d86e:	1ad3      	subs	r3, r2, r3
 801d870:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801d872:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d876:	b29b      	uxth	r3, r3
 801d878:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d87a:	1ad3      	subs	r3, r2, r3
 801d87c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801d87e:	8b7a      	ldrh	r2, [r7, #26]
 801d880:	8bbb      	ldrh	r3, [r7, #28]
 801d882:	4293      	cmp	r3, r2
 801d884:	bf28      	it	cs
 801d886:	4613      	movcs	r3, r2
 801d888:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801d88a:	797b      	ldrb	r3, [r7, #5]
 801d88c:	f003 0301 	and.w	r3, r3, #1
 801d890:	2b00      	cmp	r3, #0
 801d892:	d036      	beq.n	801d902 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801d894:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d898:	b29a      	uxth	r2, r3
 801d89a:	8b3b      	ldrh	r3, [r7, #24]
 801d89c:	4413      	add	r3, r2
 801d89e:	b299      	uxth	r1, r3
 801d8a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	bf0c      	ite	eq
 801d8a6:	2301      	moveq	r3, #1
 801d8a8:	2300      	movne	r3, #0
 801d8aa:	b2db      	uxtb	r3, r3
 801d8ac:	f107 0012 	add.w	r0, r7, #18
 801d8b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d8b2:	9302      	str	r3, [sp, #8]
 801d8b4:	797b      	ldrb	r3, [r7, #5]
 801d8b6:	9301      	str	r3, [sp, #4]
 801d8b8:	68fb      	ldr	r3, [r7, #12]
 801d8ba:	9300      	str	r3, [sp, #0]
 801d8bc:	4603      	mov	r3, r0
 801d8be:	2036      	movs	r0, #54	; 0x36
 801d8c0:	f7ff fd5c 	bl	801d37c <tcp_pbuf_prealloc>
 801d8c4:	6338      	str	r0, [r7, #48]	; 0x30
 801d8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8c8:	2b00      	cmp	r3, #0
 801d8ca:	f000 8178 	beq.w	801dbbe <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801d8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8d0:	895b      	ldrh	r3, [r3, #10]
 801d8d2:	8b3a      	ldrh	r2, [r7, #24]
 801d8d4:	429a      	cmp	r2, r3
 801d8d6:	d906      	bls.n	801d8e6 <tcp_write+0x382>
 801d8d8:	4b8c      	ldr	r3, [pc, #560]	; (801db0c <tcp_write+0x5a8>)
 801d8da:	f240 2267 	movw	r2, #615	; 0x267
 801d8de:	498c      	ldr	r1, [pc, #560]	; (801db10 <tcp_write+0x5ac>)
 801d8e0:	488c      	ldr	r0, [pc, #560]	; (801db14 <tcp_write+0x5b0>)
 801d8e2:	f009 f859 	bl	8026998 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801d8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8e8:	685a      	ldr	r2, [r3, #4]
 801d8ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d8ee:	18d0      	adds	r0, r2, r3
 801d8f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d8f4:	68ba      	ldr	r2, [r7, #8]
 801d8f6:	4413      	add	r3, r2
 801d8f8:	8b3a      	ldrh	r2, [r7, #24]
 801d8fa:	4619      	mov	r1, r3
 801d8fc:	f008 ff91 	bl	8026822 <memcpy>
 801d900:	e02f      	b.n	801d962 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801d902:	8a7b      	ldrh	r3, [r7, #18]
 801d904:	2b00      	cmp	r3, #0
 801d906:	d006      	beq.n	801d916 <tcp_write+0x3b2>
 801d908:	4b80      	ldr	r3, [pc, #512]	; (801db0c <tcp_write+0x5a8>)
 801d90a:	f240 2271 	movw	r2, #625	; 0x271
 801d90e:	4982      	ldr	r1, [pc, #520]	; (801db18 <tcp_write+0x5b4>)
 801d910:	4880      	ldr	r0, [pc, #512]	; (801db14 <tcp_write+0x5b0>)
 801d912:	f009 f841 	bl	8026998 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801d916:	8b3b      	ldrh	r3, [r7, #24]
 801d918:	2201      	movs	r2, #1
 801d91a:	4619      	mov	r1, r3
 801d91c:	2036      	movs	r0, #54	; 0x36
 801d91e:	f7fa fc3b 	bl	8018198 <pbuf_alloc>
 801d922:	6178      	str	r0, [r7, #20]
 801d924:	697b      	ldr	r3, [r7, #20]
 801d926:	2b00      	cmp	r3, #0
 801d928:	f000 814b 	beq.w	801dbc2 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801d92c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d930:	68ba      	ldr	r2, [r7, #8]
 801d932:	441a      	add	r2, r3
 801d934:	697b      	ldr	r3, [r7, #20]
 801d936:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801d938:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d93c:	b29b      	uxth	r3, r3
 801d93e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d942:	4619      	mov	r1, r3
 801d944:	2036      	movs	r0, #54	; 0x36
 801d946:	f7fa fc27 	bl	8018198 <pbuf_alloc>
 801d94a:	6338      	str	r0, [r7, #48]	; 0x30
 801d94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d94e:	2b00      	cmp	r3, #0
 801d950:	d103      	bne.n	801d95a <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801d952:	6978      	ldr	r0, [r7, #20]
 801d954:	f7fa ff32 	bl	80187bc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801d958:	e136      	b.n	801dbc8 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801d95a:	6979      	ldr	r1, [r7, #20]
 801d95c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d95e:	f7fa fffb 	bl	8018958 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801d962:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d964:	f7fa ffb8 	bl	80188d8 <pbuf_clen>
 801d968:	4603      	mov	r3, r0
 801d96a:	461a      	mov	r2, r3
 801d96c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d970:	4413      	add	r3, r2
 801d972:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801d976:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d97a:	2b10      	cmp	r3, #16
 801d97c:	d903      	bls.n	801d986 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801d97e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d980:	f7fa ff1c 	bl	80187bc <pbuf_free>
      goto memerr;
 801d984:	e120      	b.n	801dbc8 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801d986:	68fb      	ldr	r3, [r7, #12]
 801d988:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801d98a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d98e:	441a      	add	r2, r3
 801d990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d994:	9300      	str	r3, [sp, #0]
 801d996:	4613      	mov	r3, r2
 801d998:	2200      	movs	r2, #0
 801d99a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d99c:	68f8      	ldr	r0, [r7, #12]
 801d99e:	f7ff fc4f 	bl	801d240 <tcp_create_segment>
 801d9a2:	64f8      	str	r0, [r7, #76]	; 0x4c
 801d9a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d9a6:	2b00      	cmp	r3, #0
 801d9a8:	f000 810d 	beq.w	801dbc6 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801d9ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d9ae:	2b00      	cmp	r3, #0
 801d9b0:	d102      	bne.n	801d9b8 <tcp_write+0x454>
      queue = seg;
 801d9b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d9b4:	647b      	str	r3, [r7, #68]	; 0x44
 801d9b6:	e00c      	b.n	801d9d2 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801d9b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	d106      	bne.n	801d9cc <tcp_write+0x468>
 801d9be:	4b53      	ldr	r3, [pc, #332]	; (801db0c <tcp_write+0x5a8>)
 801d9c0:	f240 22ab 	movw	r2, #683	; 0x2ab
 801d9c4:	4955      	ldr	r1, [pc, #340]	; (801db1c <tcp_write+0x5b8>)
 801d9c6:	4853      	ldr	r0, [pc, #332]	; (801db14 <tcp_write+0x5b0>)
 801d9c8:	f008 ffe6 	bl	8026998 <iprintf>
      prev_seg->next = seg;
 801d9cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d9ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d9d0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801d9d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d9d4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801d9d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d9da:	8b3b      	ldrh	r3, [r7, #24]
 801d9dc:	4413      	add	r3, r2
 801d9de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801d9e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d9e6:	88fb      	ldrh	r3, [r7, #6]
 801d9e8:	429a      	cmp	r2, r3
 801d9ea:	f4ff af3d 	bcc.w	801d868 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801d9ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d9f0:	2b00      	cmp	r3, #0
 801d9f2:	d02c      	beq.n	801da4e <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801d9f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d9f6:	685b      	ldr	r3, [r3, #4]
 801d9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d9fa:	e01e      	b.n	801da3a <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 801d9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d9fe:	891a      	ldrh	r2, [r3, #8]
 801da00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801da02:	4413      	add	r3, r2
 801da04:	b29a      	uxth	r2, r3
 801da06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da08:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801da0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da0c:	681b      	ldr	r3, [r3, #0]
 801da0e:	2b00      	cmp	r3, #0
 801da10:	d110      	bne.n	801da34 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801da12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da14:	685b      	ldr	r3, [r3, #4]
 801da16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801da18:	8952      	ldrh	r2, [r2, #10]
 801da1a:	4413      	add	r3, r2
 801da1c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801da1e:	68b9      	ldr	r1, [r7, #8]
 801da20:	4618      	mov	r0, r3
 801da22:	f008 fefe 	bl	8026822 <memcpy>
        p->len += oversize_used;
 801da26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da28:	895a      	ldrh	r2, [r3, #10]
 801da2a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801da2c:	4413      	add	r3, r2
 801da2e:	b29a      	uxth	r2, r3
 801da30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da32:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801da34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da36:	681b      	ldr	r3, [r3, #0]
 801da38:	62fb      	str	r3, [r7, #44]	; 0x2c
 801da3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da3c:	2b00      	cmp	r3, #0
 801da3e:	d1dd      	bne.n	801d9fc <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 801da40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da42:	891a      	ldrh	r2, [r3, #8]
 801da44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801da46:	4413      	add	r3, r2
 801da48:	b29a      	uxth	r2, r3
 801da4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da4c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801da4e:	8a7a      	ldrh	r2, [r7, #18]
 801da50:	68fb      	ldr	r3, [r7, #12]
 801da52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801da56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801da58:	2b00      	cmp	r3, #0
 801da5a:	d018      	beq.n	801da8e <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801da5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da5e:	2b00      	cmp	r3, #0
 801da60:	d106      	bne.n	801da70 <tcp_write+0x50c>
 801da62:	4b2a      	ldr	r3, [pc, #168]	; (801db0c <tcp_write+0x5a8>)
 801da64:	f240 22e1 	movw	r2, #737	; 0x2e1
 801da68:	492d      	ldr	r1, [pc, #180]	; (801db20 <tcp_write+0x5bc>)
 801da6a:	482a      	ldr	r0, [pc, #168]	; (801db14 <tcp_write+0x5b0>)
 801da6c:	f008 ff94 	bl	8026998 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801da70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da72:	685b      	ldr	r3, [r3, #4]
 801da74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801da76:	4618      	mov	r0, r3
 801da78:	f7fa ff6e 	bl	8018958 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801da7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da7e:	891a      	ldrh	r2, [r3, #8]
 801da80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801da82:	891b      	ldrh	r3, [r3, #8]
 801da84:	4413      	add	r3, r2
 801da86:	b29a      	uxth	r2, r3
 801da88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da8a:	811a      	strh	r2, [r3, #8]
 801da8c:	e037      	b.n	801dafe <tcp_write+0x59a>
  } else if (extendlen > 0) {
 801da8e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801da90:	2b00      	cmp	r3, #0
 801da92:	d034      	beq.n	801dafe <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801da94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da96:	2b00      	cmp	r3, #0
 801da98:	d003      	beq.n	801daa2 <tcp_write+0x53e>
 801da9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da9c:	685b      	ldr	r3, [r3, #4]
 801da9e:	2b00      	cmp	r3, #0
 801daa0:	d106      	bne.n	801dab0 <tcp_write+0x54c>
 801daa2:	4b1a      	ldr	r3, [pc, #104]	; (801db0c <tcp_write+0x5a8>)
 801daa4:	f240 22e7 	movw	r2, #743	; 0x2e7
 801daa8:	491e      	ldr	r1, [pc, #120]	; (801db24 <tcp_write+0x5c0>)
 801daaa:	481a      	ldr	r0, [pc, #104]	; (801db14 <tcp_write+0x5b0>)
 801daac:	f008 ff74 	bl	8026998 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801dab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dab2:	685b      	ldr	r3, [r3, #4]
 801dab4:	62bb      	str	r3, [r7, #40]	; 0x28
 801dab6:	e009      	b.n	801dacc <tcp_write+0x568>
      p->tot_len += extendlen;
 801dab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801daba:	891a      	ldrh	r2, [r3, #8]
 801dabc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dabe:	4413      	add	r3, r2
 801dac0:	b29a      	uxth	r2, r3
 801dac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dac4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801dac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dac8:	681b      	ldr	r3, [r3, #0]
 801daca:	62bb      	str	r3, [r7, #40]	; 0x28
 801dacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dace:	681b      	ldr	r3, [r3, #0]
 801dad0:	2b00      	cmp	r3, #0
 801dad2:	d1f1      	bne.n	801dab8 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 801dad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dad6:	891a      	ldrh	r2, [r3, #8]
 801dad8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dada:	4413      	add	r3, r2
 801dadc:	b29a      	uxth	r2, r3
 801dade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dae0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801dae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dae4:	895a      	ldrh	r2, [r3, #10]
 801dae6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dae8:	4413      	add	r3, r2
 801daea:	b29a      	uxth	r2, r3
 801daec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801daee:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801daf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801daf2:	891a      	ldrh	r2, [r3, #8]
 801daf4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801daf6:	4413      	add	r3, r2
 801daf8:	b29a      	uxth	r2, r3
 801dafa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dafc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801dafe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801db00:	2b00      	cmp	r3, #0
 801db02:	d111      	bne.n	801db28 <tcp_write+0x5c4>
    pcb->unsent = queue;
 801db04:	68fb      	ldr	r3, [r7, #12]
 801db06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801db08:	66da      	str	r2, [r3, #108]	; 0x6c
 801db0a:	e010      	b.n	801db2e <tcp_write+0x5ca>
 801db0c:	0802a2fc 	.word	0x0802a2fc
 801db10:	0802a59c 	.word	0x0802a59c
 801db14:	0802a350 	.word	0x0802a350
 801db18:	0802a5dc 	.word	0x0802a5dc
 801db1c:	0802a5ec 	.word	0x0802a5ec
 801db20:	0802a600 	.word	0x0802a600
 801db24:	0802a638 	.word	0x0802a638
  } else {
    last_unsent->next = queue;
 801db28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801db2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801db2c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801db2e:	68fb      	ldr	r3, [r7, #12]
 801db30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801db32:	88fb      	ldrh	r3, [r7, #6]
 801db34:	441a      	add	r2, r3
 801db36:	68fb      	ldr	r3, [r7, #12]
 801db38:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801db3a:	68fb      	ldr	r3, [r7, #12]
 801db3c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801db40:	88fb      	ldrh	r3, [r7, #6]
 801db42:	1ad3      	subs	r3, r2, r3
 801db44:	b29a      	uxth	r2, r3
 801db46:	68fb      	ldr	r3, [r7, #12]
 801db48:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801db4c:	68fb      	ldr	r3, [r7, #12]
 801db4e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801db52:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801db56:	68fb      	ldr	r3, [r7, #12]
 801db58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801db5c:	2b00      	cmp	r3, #0
 801db5e:	d00e      	beq.n	801db7e <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 801db60:	68fb      	ldr	r3, [r7, #12]
 801db62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801db64:	2b00      	cmp	r3, #0
 801db66:	d10a      	bne.n	801db7e <tcp_write+0x61a>
 801db68:	68fb      	ldr	r3, [r7, #12]
 801db6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801db6c:	2b00      	cmp	r3, #0
 801db6e:	d106      	bne.n	801db7e <tcp_write+0x61a>
 801db70:	4b2c      	ldr	r3, [pc, #176]	; (801dc24 <tcp_write+0x6c0>)
 801db72:	f240 3213 	movw	r2, #787	; 0x313
 801db76:	492c      	ldr	r1, [pc, #176]	; (801dc28 <tcp_write+0x6c4>)
 801db78:	482c      	ldr	r0, [pc, #176]	; (801dc2c <tcp_write+0x6c8>)
 801db7a:	f008 ff0d 	bl	8026998 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801db7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db80:	2b00      	cmp	r3, #0
 801db82:	d016      	beq.n	801dbb2 <tcp_write+0x64e>
 801db84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db86:	68db      	ldr	r3, [r3, #12]
 801db88:	2b00      	cmp	r3, #0
 801db8a:	d012      	beq.n	801dbb2 <tcp_write+0x64e>
 801db8c:	797b      	ldrb	r3, [r7, #5]
 801db8e:	f003 0302 	and.w	r3, r3, #2
 801db92:	2b00      	cmp	r3, #0
 801db94:	d10d      	bne.n	801dbb2 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801db96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db98:	68db      	ldr	r3, [r3, #12]
 801db9a:	899b      	ldrh	r3, [r3, #12]
 801db9c:	b29c      	uxth	r4, r3
 801db9e:	2008      	movs	r0, #8
 801dba0:	f7f9 f9e8 	bl	8016f74 <lwip_htons>
 801dba4:	4603      	mov	r3, r0
 801dba6:	461a      	mov	r2, r3
 801dba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dbaa:	68db      	ldr	r3, [r3, #12]
 801dbac:	4322      	orrs	r2, r4
 801dbae:	b292      	uxth	r2, r2
 801dbb0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801dbb2:	2300      	movs	r3, #0
 801dbb4:	e031      	b.n	801dc1a <tcp_write+0x6b6>
          goto memerr;
 801dbb6:	bf00      	nop
 801dbb8:	e006      	b.n	801dbc8 <tcp_write+0x664>
            goto memerr;
 801dbba:	bf00      	nop
 801dbbc:	e004      	b.n	801dbc8 <tcp_write+0x664>
        goto memerr;
 801dbbe:	bf00      	nop
 801dbc0:	e002      	b.n	801dbc8 <tcp_write+0x664>
        goto memerr;
 801dbc2:	bf00      	nop
 801dbc4:	e000      	b.n	801dbc8 <tcp_write+0x664>
      goto memerr;
 801dbc6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801dbc8:	68fb      	ldr	r3, [r7, #12]
 801dbca:	8b5b      	ldrh	r3, [r3, #26]
 801dbcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dbd0:	b29a      	uxth	r2, r3
 801dbd2:	68fb      	ldr	r3, [r7, #12]
 801dbd4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801dbd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dbd8:	2b00      	cmp	r3, #0
 801dbda:	d002      	beq.n	801dbe2 <tcp_write+0x67e>
    pbuf_free(concat_p);
 801dbdc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801dbde:	f7fa fded 	bl	80187bc <pbuf_free>
  }
  if (queue != NULL) {
 801dbe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dbe4:	2b00      	cmp	r3, #0
 801dbe6:	d002      	beq.n	801dbee <tcp_write+0x68a>
    tcp_segs_free(queue);
 801dbe8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801dbea:	f7fc fb71 	bl	801a2d0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801dbee:	68fb      	ldr	r3, [r7, #12]
 801dbf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801dbf4:	2b00      	cmp	r3, #0
 801dbf6:	d00e      	beq.n	801dc16 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801dbf8:	68fb      	ldr	r3, [r7, #12]
 801dbfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dbfc:	2b00      	cmp	r3, #0
 801dbfe:	d10a      	bne.n	801dc16 <tcp_write+0x6b2>
 801dc00:	68fb      	ldr	r3, [r7, #12]
 801dc02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	d106      	bne.n	801dc16 <tcp_write+0x6b2>
 801dc08:	4b06      	ldr	r3, [pc, #24]	; (801dc24 <tcp_write+0x6c0>)
 801dc0a:	f44f 724a 	mov.w	r2, #808	; 0x328
 801dc0e:	4906      	ldr	r1, [pc, #24]	; (801dc28 <tcp_write+0x6c4>)
 801dc10:	4806      	ldr	r0, [pc, #24]	; (801dc2c <tcp_write+0x6c8>)
 801dc12:	f008 fec1 	bl	8026998 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801dc16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801dc1a:	4618      	mov	r0, r3
 801dc1c:	375c      	adds	r7, #92	; 0x5c
 801dc1e:	46bd      	mov	sp, r7
 801dc20:	bd90      	pop	{r4, r7, pc}
 801dc22:	bf00      	nop
 801dc24:	0802a2fc 	.word	0x0802a2fc
 801dc28:	0802a670 	.word	0x0802a670
 801dc2c:	0802a350 	.word	0x0802a350

0801dc30 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801dc30:	b590      	push	{r4, r7, lr}
 801dc32:	b08b      	sub	sp, #44	; 0x2c
 801dc34:	af02      	add	r7, sp, #8
 801dc36:	6078      	str	r0, [r7, #4]
 801dc38:	460b      	mov	r3, r1
 801dc3a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801dc3c:	2300      	movs	r3, #0
 801dc3e:	61fb      	str	r3, [r7, #28]
 801dc40:	2300      	movs	r3, #0
 801dc42:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801dc44:	2300      	movs	r3, #0
 801dc46:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801dc48:	687b      	ldr	r3, [r7, #4]
 801dc4a:	2b00      	cmp	r3, #0
 801dc4c:	d106      	bne.n	801dc5c <tcp_split_unsent_seg+0x2c>
 801dc4e:	4b95      	ldr	r3, [pc, #596]	; (801dea4 <tcp_split_unsent_seg+0x274>)
 801dc50:	f240 324b 	movw	r2, #843	; 0x34b
 801dc54:	4994      	ldr	r1, [pc, #592]	; (801dea8 <tcp_split_unsent_seg+0x278>)
 801dc56:	4895      	ldr	r0, [pc, #596]	; (801deac <tcp_split_unsent_seg+0x27c>)
 801dc58:	f008 fe9e 	bl	8026998 <iprintf>

  useg = pcb->unsent;
 801dc5c:	687b      	ldr	r3, [r7, #4]
 801dc5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dc60:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801dc62:	697b      	ldr	r3, [r7, #20]
 801dc64:	2b00      	cmp	r3, #0
 801dc66:	d102      	bne.n	801dc6e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801dc68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dc6c:	e116      	b.n	801de9c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801dc6e:	887b      	ldrh	r3, [r7, #2]
 801dc70:	2b00      	cmp	r3, #0
 801dc72:	d109      	bne.n	801dc88 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801dc74:	4b8b      	ldr	r3, [pc, #556]	; (801dea4 <tcp_split_unsent_seg+0x274>)
 801dc76:	f240 3253 	movw	r2, #851	; 0x353
 801dc7a:	498d      	ldr	r1, [pc, #564]	; (801deb0 <tcp_split_unsent_seg+0x280>)
 801dc7c:	488b      	ldr	r0, [pc, #556]	; (801deac <tcp_split_unsent_seg+0x27c>)
 801dc7e:	f008 fe8b 	bl	8026998 <iprintf>
    return ERR_VAL;
 801dc82:	f06f 0305 	mvn.w	r3, #5
 801dc86:	e109      	b.n	801de9c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801dc88:	697b      	ldr	r3, [r7, #20]
 801dc8a:	891b      	ldrh	r3, [r3, #8]
 801dc8c:	887a      	ldrh	r2, [r7, #2]
 801dc8e:	429a      	cmp	r2, r3
 801dc90:	d301      	bcc.n	801dc96 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801dc92:	2300      	movs	r3, #0
 801dc94:	e102      	b.n	801de9c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801dc96:	687b      	ldr	r3, [r7, #4]
 801dc98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801dc9a:	887a      	ldrh	r2, [r7, #2]
 801dc9c:	429a      	cmp	r2, r3
 801dc9e:	d906      	bls.n	801dcae <tcp_split_unsent_seg+0x7e>
 801dca0:	4b80      	ldr	r3, [pc, #512]	; (801dea4 <tcp_split_unsent_seg+0x274>)
 801dca2:	f240 325b 	movw	r2, #859	; 0x35b
 801dca6:	4983      	ldr	r1, [pc, #524]	; (801deb4 <tcp_split_unsent_seg+0x284>)
 801dca8:	4880      	ldr	r0, [pc, #512]	; (801deac <tcp_split_unsent_seg+0x27c>)
 801dcaa:	f008 fe75 	bl	8026998 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801dcae:	697b      	ldr	r3, [r7, #20]
 801dcb0:	891b      	ldrh	r3, [r3, #8]
 801dcb2:	2b00      	cmp	r3, #0
 801dcb4:	d106      	bne.n	801dcc4 <tcp_split_unsent_seg+0x94>
 801dcb6:	4b7b      	ldr	r3, [pc, #492]	; (801dea4 <tcp_split_unsent_seg+0x274>)
 801dcb8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801dcbc:	497e      	ldr	r1, [pc, #504]	; (801deb8 <tcp_split_unsent_seg+0x288>)
 801dcbe:	487b      	ldr	r0, [pc, #492]	; (801deac <tcp_split_unsent_seg+0x27c>)
 801dcc0:	f008 fe6a 	bl	8026998 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801dcc4:	697b      	ldr	r3, [r7, #20]
 801dcc6:	7a9b      	ldrb	r3, [r3, #10]
 801dcc8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801dcca:	7bfb      	ldrb	r3, [r7, #15]
 801dccc:	009b      	lsls	r3, r3, #2
 801dcce:	b2db      	uxtb	r3, r3
 801dcd0:	f003 0304 	and.w	r3, r3, #4
 801dcd4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801dcd6:	697b      	ldr	r3, [r7, #20]
 801dcd8:	891a      	ldrh	r2, [r3, #8]
 801dcda:	887b      	ldrh	r3, [r7, #2]
 801dcdc:	1ad3      	subs	r3, r2, r3
 801dcde:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801dce0:	7bbb      	ldrb	r3, [r7, #14]
 801dce2:	b29a      	uxth	r2, r3
 801dce4:	89bb      	ldrh	r3, [r7, #12]
 801dce6:	4413      	add	r3, r2
 801dce8:	b29b      	uxth	r3, r3
 801dcea:	f44f 7220 	mov.w	r2, #640	; 0x280
 801dcee:	4619      	mov	r1, r3
 801dcf0:	2036      	movs	r0, #54	; 0x36
 801dcf2:	f7fa fa51 	bl	8018198 <pbuf_alloc>
 801dcf6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801dcf8:	693b      	ldr	r3, [r7, #16]
 801dcfa:	2b00      	cmp	r3, #0
 801dcfc:	f000 80b7 	beq.w	801de6e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801dd00:	697b      	ldr	r3, [r7, #20]
 801dd02:	685b      	ldr	r3, [r3, #4]
 801dd04:	891a      	ldrh	r2, [r3, #8]
 801dd06:	697b      	ldr	r3, [r7, #20]
 801dd08:	891b      	ldrh	r3, [r3, #8]
 801dd0a:	1ad3      	subs	r3, r2, r3
 801dd0c:	b29a      	uxth	r2, r3
 801dd0e:	887b      	ldrh	r3, [r7, #2]
 801dd10:	4413      	add	r3, r2
 801dd12:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801dd14:	697b      	ldr	r3, [r7, #20]
 801dd16:	6858      	ldr	r0, [r3, #4]
 801dd18:	693b      	ldr	r3, [r7, #16]
 801dd1a:	685a      	ldr	r2, [r3, #4]
 801dd1c:	7bbb      	ldrb	r3, [r7, #14]
 801dd1e:	18d1      	adds	r1, r2, r3
 801dd20:	897b      	ldrh	r3, [r7, #10]
 801dd22:	89ba      	ldrh	r2, [r7, #12]
 801dd24:	f7fa ff50 	bl	8018bc8 <pbuf_copy_partial>
 801dd28:	4603      	mov	r3, r0
 801dd2a:	461a      	mov	r2, r3
 801dd2c:	89bb      	ldrh	r3, [r7, #12]
 801dd2e:	4293      	cmp	r3, r2
 801dd30:	f040 809f 	bne.w	801de72 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801dd34:	697b      	ldr	r3, [r7, #20]
 801dd36:	68db      	ldr	r3, [r3, #12]
 801dd38:	899b      	ldrh	r3, [r3, #12]
 801dd3a:	b29b      	uxth	r3, r3
 801dd3c:	4618      	mov	r0, r3
 801dd3e:	f7f9 f919 	bl	8016f74 <lwip_htons>
 801dd42:	4603      	mov	r3, r0
 801dd44:	b2db      	uxtb	r3, r3
 801dd46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801dd4a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801dd4c:	2300      	movs	r3, #0
 801dd4e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801dd50:	7efb      	ldrb	r3, [r7, #27]
 801dd52:	f003 0308 	and.w	r3, r3, #8
 801dd56:	2b00      	cmp	r3, #0
 801dd58:	d007      	beq.n	801dd6a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801dd5a:	7efb      	ldrb	r3, [r7, #27]
 801dd5c:	f023 0308 	bic.w	r3, r3, #8
 801dd60:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801dd62:	7ebb      	ldrb	r3, [r7, #26]
 801dd64:	f043 0308 	orr.w	r3, r3, #8
 801dd68:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801dd6a:	7efb      	ldrb	r3, [r7, #27]
 801dd6c:	f003 0301 	and.w	r3, r3, #1
 801dd70:	2b00      	cmp	r3, #0
 801dd72:	d007      	beq.n	801dd84 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801dd74:	7efb      	ldrb	r3, [r7, #27]
 801dd76:	f023 0301 	bic.w	r3, r3, #1
 801dd7a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801dd7c:	7ebb      	ldrb	r3, [r7, #26]
 801dd7e:	f043 0301 	orr.w	r3, r3, #1
 801dd82:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801dd84:	697b      	ldr	r3, [r7, #20]
 801dd86:	68db      	ldr	r3, [r3, #12]
 801dd88:	685b      	ldr	r3, [r3, #4]
 801dd8a:	4618      	mov	r0, r3
 801dd8c:	f7f9 f907 	bl	8016f9e <lwip_htonl>
 801dd90:	4602      	mov	r2, r0
 801dd92:	887b      	ldrh	r3, [r7, #2]
 801dd94:	18d1      	adds	r1, r2, r3
 801dd96:	7eba      	ldrb	r2, [r7, #26]
 801dd98:	7bfb      	ldrb	r3, [r7, #15]
 801dd9a:	9300      	str	r3, [sp, #0]
 801dd9c:	460b      	mov	r3, r1
 801dd9e:	6939      	ldr	r1, [r7, #16]
 801dda0:	6878      	ldr	r0, [r7, #4]
 801dda2:	f7ff fa4d 	bl	801d240 <tcp_create_segment>
 801dda6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801dda8:	69fb      	ldr	r3, [r7, #28]
 801ddaa:	2b00      	cmp	r3, #0
 801ddac:	d063      	beq.n	801de76 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801ddae:	697b      	ldr	r3, [r7, #20]
 801ddb0:	685b      	ldr	r3, [r3, #4]
 801ddb2:	4618      	mov	r0, r3
 801ddb4:	f7fa fd90 	bl	80188d8 <pbuf_clen>
 801ddb8:	4603      	mov	r3, r0
 801ddba:	461a      	mov	r2, r3
 801ddbc:	687b      	ldr	r3, [r7, #4]
 801ddbe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ddc2:	1a9b      	subs	r3, r3, r2
 801ddc4:	b29a      	uxth	r2, r3
 801ddc6:	687b      	ldr	r3, [r7, #4]
 801ddc8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801ddcc:	697b      	ldr	r3, [r7, #20]
 801ddce:	6858      	ldr	r0, [r3, #4]
 801ddd0:	697b      	ldr	r3, [r7, #20]
 801ddd2:	685b      	ldr	r3, [r3, #4]
 801ddd4:	891a      	ldrh	r2, [r3, #8]
 801ddd6:	89bb      	ldrh	r3, [r7, #12]
 801ddd8:	1ad3      	subs	r3, r2, r3
 801ddda:	b29b      	uxth	r3, r3
 801dddc:	4619      	mov	r1, r3
 801ddde:	f7fa fb35 	bl	801844c <pbuf_realloc>
  useg->len -= remainder;
 801dde2:	697b      	ldr	r3, [r7, #20]
 801dde4:	891a      	ldrh	r2, [r3, #8]
 801dde6:	89bb      	ldrh	r3, [r7, #12]
 801dde8:	1ad3      	subs	r3, r2, r3
 801ddea:	b29a      	uxth	r2, r3
 801ddec:	697b      	ldr	r3, [r7, #20]
 801ddee:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801ddf0:	697b      	ldr	r3, [r7, #20]
 801ddf2:	68db      	ldr	r3, [r3, #12]
 801ddf4:	899b      	ldrh	r3, [r3, #12]
 801ddf6:	b29c      	uxth	r4, r3
 801ddf8:	7efb      	ldrb	r3, [r7, #27]
 801ddfa:	b29b      	uxth	r3, r3
 801ddfc:	4618      	mov	r0, r3
 801ddfe:	f7f9 f8b9 	bl	8016f74 <lwip_htons>
 801de02:	4603      	mov	r3, r0
 801de04:	461a      	mov	r2, r3
 801de06:	697b      	ldr	r3, [r7, #20]
 801de08:	68db      	ldr	r3, [r3, #12]
 801de0a:	4322      	orrs	r2, r4
 801de0c:	b292      	uxth	r2, r2
 801de0e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801de10:	697b      	ldr	r3, [r7, #20]
 801de12:	685b      	ldr	r3, [r3, #4]
 801de14:	4618      	mov	r0, r3
 801de16:	f7fa fd5f 	bl	80188d8 <pbuf_clen>
 801de1a:	4603      	mov	r3, r0
 801de1c:	461a      	mov	r2, r3
 801de1e:	687b      	ldr	r3, [r7, #4]
 801de20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801de24:	4413      	add	r3, r2
 801de26:	b29a      	uxth	r2, r3
 801de28:	687b      	ldr	r3, [r7, #4]
 801de2a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801de2e:	69fb      	ldr	r3, [r7, #28]
 801de30:	685b      	ldr	r3, [r3, #4]
 801de32:	4618      	mov	r0, r3
 801de34:	f7fa fd50 	bl	80188d8 <pbuf_clen>
 801de38:	4603      	mov	r3, r0
 801de3a:	461a      	mov	r2, r3
 801de3c:	687b      	ldr	r3, [r7, #4]
 801de3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801de42:	4413      	add	r3, r2
 801de44:	b29a      	uxth	r2, r3
 801de46:	687b      	ldr	r3, [r7, #4]
 801de48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801de4c:	697b      	ldr	r3, [r7, #20]
 801de4e:	681a      	ldr	r2, [r3, #0]
 801de50:	69fb      	ldr	r3, [r7, #28]
 801de52:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801de54:	697b      	ldr	r3, [r7, #20]
 801de56:	69fa      	ldr	r2, [r7, #28]
 801de58:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801de5a:	69fb      	ldr	r3, [r7, #28]
 801de5c:	681b      	ldr	r3, [r3, #0]
 801de5e:	2b00      	cmp	r3, #0
 801de60:	d103      	bne.n	801de6a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801de62:	687b      	ldr	r3, [r7, #4]
 801de64:	2200      	movs	r2, #0
 801de66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801de6a:	2300      	movs	r3, #0
 801de6c:	e016      	b.n	801de9c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801de6e:	bf00      	nop
 801de70:	e002      	b.n	801de78 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801de72:	bf00      	nop
 801de74:	e000      	b.n	801de78 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801de76:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801de78:	69fb      	ldr	r3, [r7, #28]
 801de7a:	2b00      	cmp	r3, #0
 801de7c:	d006      	beq.n	801de8c <tcp_split_unsent_seg+0x25c>
 801de7e:	4b09      	ldr	r3, [pc, #36]	; (801dea4 <tcp_split_unsent_seg+0x274>)
 801de80:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801de84:	490d      	ldr	r1, [pc, #52]	; (801debc <tcp_split_unsent_seg+0x28c>)
 801de86:	4809      	ldr	r0, [pc, #36]	; (801deac <tcp_split_unsent_seg+0x27c>)
 801de88:	f008 fd86 	bl	8026998 <iprintf>
  if (p != NULL) {
 801de8c:	693b      	ldr	r3, [r7, #16]
 801de8e:	2b00      	cmp	r3, #0
 801de90:	d002      	beq.n	801de98 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801de92:	6938      	ldr	r0, [r7, #16]
 801de94:	f7fa fc92 	bl	80187bc <pbuf_free>
  }

  return ERR_MEM;
 801de98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801de9c:	4618      	mov	r0, r3
 801de9e:	3724      	adds	r7, #36	; 0x24
 801dea0:	46bd      	mov	sp, r7
 801dea2:	bd90      	pop	{r4, r7, pc}
 801dea4:	0802a2fc 	.word	0x0802a2fc
 801dea8:	0802a690 	.word	0x0802a690
 801deac:	0802a350 	.word	0x0802a350
 801deb0:	0802a6b4 	.word	0x0802a6b4
 801deb4:	0802a6d8 	.word	0x0802a6d8
 801deb8:	0802a6e8 	.word	0x0802a6e8
 801debc:	0802a6f8 	.word	0x0802a6f8

0801dec0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801dec0:	b590      	push	{r4, r7, lr}
 801dec2:	b085      	sub	sp, #20
 801dec4:	af00      	add	r7, sp, #0
 801dec6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	2b00      	cmp	r3, #0
 801decc:	d106      	bne.n	801dedc <tcp_send_fin+0x1c>
 801dece:	4b21      	ldr	r3, [pc, #132]	; (801df54 <tcp_send_fin+0x94>)
 801ded0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801ded4:	4920      	ldr	r1, [pc, #128]	; (801df58 <tcp_send_fin+0x98>)
 801ded6:	4821      	ldr	r0, [pc, #132]	; (801df5c <tcp_send_fin+0x9c>)
 801ded8:	f008 fd5e 	bl	8026998 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801dedc:	687b      	ldr	r3, [r7, #4]
 801dede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dee0:	2b00      	cmp	r3, #0
 801dee2:	d02e      	beq.n	801df42 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801dee4:	687b      	ldr	r3, [r7, #4]
 801dee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dee8:	60fb      	str	r3, [r7, #12]
 801deea:	e002      	b.n	801def2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801deec:	68fb      	ldr	r3, [r7, #12]
 801deee:	681b      	ldr	r3, [r3, #0]
 801def0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801def2:	68fb      	ldr	r3, [r7, #12]
 801def4:	681b      	ldr	r3, [r3, #0]
 801def6:	2b00      	cmp	r3, #0
 801def8:	d1f8      	bne.n	801deec <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801defa:	68fb      	ldr	r3, [r7, #12]
 801defc:	68db      	ldr	r3, [r3, #12]
 801defe:	899b      	ldrh	r3, [r3, #12]
 801df00:	b29b      	uxth	r3, r3
 801df02:	4618      	mov	r0, r3
 801df04:	f7f9 f836 	bl	8016f74 <lwip_htons>
 801df08:	4603      	mov	r3, r0
 801df0a:	b2db      	uxtb	r3, r3
 801df0c:	f003 0307 	and.w	r3, r3, #7
 801df10:	2b00      	cmp	r3, #0
 801df12:	d116      	bne.n	801df42 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801df14:	68fb      	ldr	r3, [r7, #12]
 801df16:	68db      	ldr	r3, [r3, #12]
 801df18:	899b      	ldrh	r3, [r3, #12]
 801df1a:	b29c      	uxth	r4, r3
 801df1c:	2001      	movs	r0, #1
 801df1e:	f7f9 f829 	bl	8016f74 <lwip_htons>
 801df22:	4603      	mov	r3, r0
 801df24:	461a      	mov	r2, r3
 801df26:	68fb      	ldr	r3, [r7, #12]
 801df28:	68db      	ldr	r3, [r3, #12]
 801df2a:	4322      	orrs	r2, r4
 801df2c:	b292      	uxth	r2, r2
 801df2e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801df30:	687b      	ldr	r3, [r7, #4]
 801df32:	8b5b      	ldrh	r3, [r3, #26]
 801df34:	f043 0320 	orr.w	r3, r3, #32
 801df38:	b29a      	uxth	r2, r3
 801df3a:	687b      	ldr	r3, [r7, #4]
 801df3c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801df3e:	2300      	movs	r3, #0
 801df40:	e004      	b.n	801df4c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801df42:	2101      	movs	r1, #1
 801df44:	6878      	ldr	r0, [r7, #4]
 801df46:	f000 f80b 	bl	801df60 <tcp_enqueue_flags>
 801df4a:	4603      	mov	r3, r0
}
 801df4c:	4618      	mov	r0, r3
 801df4e:	3714      	adds	r7, #20
 801df50:	46bd      	mov	sp, r7
 801df52:	bd90      	pop	{r4, r7, pc}
 801df54:	0802a2fc 	.word	0x0802a2fc
 801df58:	0802a704 	.word	0x0802a704
 801df5c:	0802a350 	.word	0x0802a350

0801df60 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801df60:	b580      	push	{r7, lr}
 801df62:	b08a      	sub	sp, #40	; 0x28
 801df64:	af02      	add	r7, sp, #8
 801df66:	6078      	str	r0, [r7, #4]
 801df68:	460b      	mov	r3, r1
 801df6a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801df6c:	2300      	movs	r3, #0
 801df6e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801df70:	2300      	movs	r3, #0
 801df72:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801df74:	78fb      	ldrb	r3, [r7, #3]
 801df76:	f003 0303 	and.w	r3, r3, #3
 801df7a:	2b00      	cmp	r3, #0
 801df7c:	d106      	bne.n	801df8c <tcp_enqueue_flags+0x2c>
 801df7e:	4b67      	ldr	r3, [pc, #412]	; (801e11c <tcp_enqueue_flags+0x1bc>)
 801df80:	f240 4212 	movw	r2, #1042	; 0x412
 801df84:	4966      	ldr	r1, [pc, #408]	; (801e120 <tcp_enqueue_flags+0x1c0>)
 801df86:	4867      	ldr	r0, [pc, #412]	; (801e124 <tcp_enqueue_flags+0x1c4>)
 801df88:	f008 fd06 	bl	8026998 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801df8c:	687b      	ldr	r3, [r7, #4]
 801df8e:	2b00      	cmp	r3, #0
 801df90:	d106      	bne.n	801dfa0 <tcp_enqueue_flags+0x40>
 801df92:	4b62      	ldr	r3, [pc, #392]	; (801e11c <tcp_enqueue_flags+0x1bc>)
 801df94:	f240 4213 	movw	r2, #1043	; 0x413
 801df98:	4963      	ldr	r1, [pc, #396]	; (801e128 <tcp_enqueue_flags+0x1c8>)
 801df9a:	4862      	ldr	r0, [pc, #392]	; (801e124 <tcp_enqueue_flags+0x1c4>)
 801df9c:	f008 fcfc 	bl	8026998 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801dfa0:	78fb      	ldrb	r3, [r7, #3]
 801dfa2:	f003 0302 	and.w	r3, r3, #2
 801dfa6:	2b00      	cmp	r3, #0
 801dfa8:	d001      	beq.n	801dfae <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801dfaa:	2301      	movs	r3, #1
 801dfac:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801dfae:	7ffb      	ldrb	r3, [r7, #31]
 801dfb0:	009b      	lsls	r3, r3, #2
 801dfb2:	b2db      	uxtb	r3, r3
 801dfb4:	f003 0304 	and.w	r3, r3, #4
 801dfb8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801dfba:	7dfb      	ldrb	r3, [r7, #23]
 801dfbc:	b29b      	uxth	r3, r3
 801dfbe:	f44f 7220 	mov.w	r2, #640	; 0x280
 801dfc2:	4619      	mov	r1, r3
 801dfc4:	2036      	movs	r0, #54	; 0x36
 801dfc6:	f7fa f8e7 	bl	8018198 <pbuf_alloc>
 801dfca:	6138      	str	r0, [r7, #16]
 801dfcc:	693b      	ldr	r3, [r7, #16]
 801dfce:	2b00      	cmp	r3, #0
 801dfd0:	d109      	bne.n	801dfe6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801dfd2:	687b      	ldr	r3, [r7, #4]
 801dfd4:	8b5b      	ldrh	r3, [r3, #26]
 801dfd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dfda:	b29a      	uxth	r2, r3
 801dfdc:	687b      	ldr	r3, [r7, #4]
 801dfde:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801dfe0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dfe4:	e095      	b.n	801e112 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801dfe6:	693b      	ldr	r3, [r7, #16]
 801dfe8:	895a      	ldrh	r2, [r3, #10]
 801dfea:	7dfb      	ldrb	r3, [r7, #23]
 801dfec:	b29b      	uxth	r3, r3
 801dfee:	429a      	cmp	r2, r3
 801dff0:	d206      	bcs.n	801e000 <tcp_enqueue_flags+0xa0>
 801dff2:	4b4a      	ldr	r3, [pc, #296]	; (801e11c <tcp_enqueue_flags+0x1bc>)
 801dff4:	f240 423a 	movw	r2, #1082	; 0x43a
 801dff8:	494c      	ldr	r1, [pc, #304]	; (801e12c <tcp_enqueue_flags+0x1cc>)
 801dffa:	484a      	ldr	r0, [pc, #296]	; (801e124 <tcp_enqueue_flags+0x1c4>)
 801dffc:	f008 fccc 	bl	8026998 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801e000:	687b      	ldr	r3, [r7, #4]
 801e002:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801e004:	78fa      	ldrb	r2, [r7, #3]
 801e006:	7ffb      	ldrb	r3, [r7, #31]
 801e008:	9300      	str	r3, [sp, #0]
 801e00a:	460b      	mov	r3, r1
 801e00c:	6939      	ldr	r1, [r7, #16]
 801e00e:	6878      	ldr	r0, [r7, #4]
 801e010:	f7ff f916 	bl	801d240 <tcp_create_segment>
 801e014:	60f8      	str	r0, [r7, #12]
 801e016:	68fb      	ldr	r3, [r7, #12]
 801e018:	2b00      	cmp	r3, #0
 801e01a:	d109      	bne.n	801e030 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e01c:	687b      	ldr	r3, [r7, #4]
 801e01e:	8b5b      	ldrh	r3, [r3, #26]
 801e020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e024:	b29a      	uxth	r2, r3
 801e026:	687b      	ldr	r3, [r7, #4]
 801e028:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801e02a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e02e:	e070      	b.n	801e112 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801e030:	68fb      	ldr	r3, [r7, #12]
 801e032:	68db      	ldr	r3, [r3, #12]
 801e034:	f003 0303 	and.w	r3, r3, #3
 801e038:	2b00      	cmp	r3, #0
 801e03a:	d006      	beq.n	801e04a <tcp_enqueue_flags+0xea>
 801e03c:	4b37      	ldr	r3, [pc, #220]	; (801e11c <tcp_enqueue_flags+0x1bc>)
 801e03e:	f240 4242 	movw	r2, #1090	; 0x442
 801e042:	493b      	ldr	r1, [pc, #236]	; (801e130 <tcp_enqueue_flags+0x1d0>)
 801e044:	4837      	ldr	r0, [pc, #220]	; (801e124 <tcp_enqueue_flags+0x1c4>)
 801e046:	f008 fca7 	bl	8026998 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801e04a:	68fb      	ldr	r3, [r7, #12]
 801e04c:	891b      	ldrh	r3, [r3, #8]
 801e04e:	2b00      	cmp	r3, #0
 801e050:	d006      	beq.n	801e060 <tcp_enqueue_flags+0x100>
 801e052:	4b32      	ldr	r3, [pc, #200]	; (801e11c <tcp_enqueue_flags+0x1bc>)
 801e054:	f240 4243 	movw	r2, #1091	; 0x443
 801e058:	4936      	ldr	r1, [pc, #216]	; (801e134 <tcp_enqueue_flags+0x1d4>)
 801e05a:	4832      	ldr	r0, [pc, #200]	; (801e124 <tcp_enqueue_flags+0x1c4>)
 801e05c:	f008 fc9c 	bl	8026998 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801e060:	687b      	ldr	r3, [r7, #4]
 801e062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e064:	2b00      	cmp	r3, #0
 801e066:	d103      	bne.n	801e070 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801e068:	687b      	ldr	r3, [r7, #4]
 801e06a:	68fa      	ldr	r2, [r7, #12]
 801e06c:	66da      	str	r2, [r3, #108]	; 0x6c
 801e06e:	e00d      	b.n	801e08c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801e070:	687b      	ldr	r3, [r7, #4]
 801e072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e074:	61bb      	str	r3, [r7, #24]
 801e076:	e002      	b.n	801e07e <tcp_enqueue_flags+0x11e>
 801e078:	69bb      	ldr	r3, [r7, #24]
 801e07a:	681b      	ldr	r3, [r3, #0]
 801e07c:	61bb      	str	r3, [r7, #24]
 801e07e:	69bb      	ldr	r3, [r7, #24]
 801e080:	681b      	ldr	r3, [r3, #0]
 801e082:	2b00      	cmp	r3, #0
 801e084:	d1f8      	bne.n	801e078 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801e086:	69bb      	ldr	r3, [r7, #24]
 801e088:	68fa      	ldr	r2, [r7, #12]
 801e08a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801e08c:	687b      	ldr	r3, [r7, #4]
 801e08e:	2200      	movs	r2, #0
 801e090:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801e094:	78fb      	ldrb	r3, [r7, #3]
 801e096:	f003 0302 	and.w	r3, r3, #2
 801e09a:	2b00      	cmp	r3, #0
 801e09c:	d104      	bne.n	801e0a8 <tcp_enqueue_flags+0x148>
 801e09e:	78fb      	ldrb	r3, [r7, #3]
 801e0a0:	f003 0301 	and.w	r3, r3, #1
 801e0a4:	2b00      	cmp	r3, #0
 801e0a6:	d004      	beq.n	801e0b2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801e0a8:	687b      	ldr	r3, [r7, #4]
 801e0aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e0ac:	1c5a      	adds	r2, r3, #1
 801e0ae:	687b      	ldr	r3, [r7, #4]
 801e0b0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801e0b2:	78fb      	ldrb	r3, [r7, #3]
 801e0b4:	f003 0301 	and.w	r3, r3, #1
 801e0b8:	2b00      	cmp	r3, #0
 801e0ba:	d006      	beq.n	801e0ca <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801e0bc:	687b      	ldr	r3, [r7, #4]
 801e0be:	8b5b      	ldrh	r3, [r3, #26]
 801e0c0:	f043 0320 	orr.w	r3, r3, #32
 801e0c4:	b29a      	uxth	r2, r3
 801e0c6:	687b      	ldr	r3, [r7, #4]
 801e0c8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e0ca:	68fb      	ldr	r3, [r7, #12]
 801e0cc:	685b      	ldr	r3, [r3, #4]
 801e0ce:	4618      	mov	r0, r3
 801e0d0:	f7fa fc02 	bl	80188d8 <pbuf_clen>
 801e0d4:	4603      	mov	r3, r0
 801e0d6:	461a      	mov	r2, r3
 801e0d8:	687b      	ldr	r3, [r7, #4]
 801e0da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e0de:	4413      	add	r3, r2
 801e0e0:	b29a      	uxth	r2, r3
 801e0e2:	687b      	ldr	r3, [r7, #4]
 801e0e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801e0e8:	687b      	ldr	r3, [r7, #4]
 801e0ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e0ee:	2b00      	cmp	r3, #0
 801e0f0:	d00e      	beq.n	801e110 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801e0f2:	687b      	ldr	r3, [r7, #4]
 801e0f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e0f6:	2b00      	cmp	r3, #0
 801e0f8:	d10a      	bne.n	801e110 <tcp_enqueue_flags+0x1b0>
 801e0fa:	687b      	ldr	r3, [r7, #4]
 801e0fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e0fe:	2b00      	cmp	r3, #0
 801e100:	d106      	bne.n	801e110 <tcp_enqueue_flags+0x1b0>
 801e102:	4b06      	ldr	r3, [pc, #24]	; (801e11c <tcp_enqueue_flags+0x1bc>)
 801e104:	f240 4266 	movw	r2, #1126	; 0x466
 801e108:	490b      	ldr	r1, [pc, #44]	; (801e138 <tcp_enqueue_flags+0x1d8>)
 801e10a:	4806      	ldr	r0, [pc, #24]	; (801e124 <tcp_enqueue_flags+0x1c4>)
 801e10c:	f008 fc44 	bl	8026998 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801e110:	2300      	movs	r3, #0
}
 801e112:	4618      	mov	r0, r3
 801e114:	3720      	adds	r7, #32
 801e116:	46bd      	mov	sp, r7
 801e118:	bd80      	pop	{r7, pc}
 801e11a:	bf00      	nop
 801e11c:	0802a2fc 	.word	0x0802a2fc
 801e120:	0802a720 	.word	0x0802a720
 801e124:	0802a350 	.word	0x0802a350
 801e128:	0802a778 	.word	0x0802a778
 801e12c:	0802a798 	.word	0x0802a798
 801e130:	0802a7d4 	.word	0x0802a7d4
 801e134:	0802a7ec 	.word	0x0802a7ec
 801e138:	0802a818 	.word	0x0802a818

0801e13c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801e13c:	b5b0      	push	{r4, r5, r7, lr}
 801e13e:	b08a      	sub	sp, #40	; 0x28
 801e140:	af00      	add	r7, sp, #0
 801e142:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	2b00      	cmp	r3, #0
 801e148:	d106      	bne.n	801e158 <tcp_output+0x1c>
 801e14a:	4ba0      	ldr	r3, [pc, #640]	; (801e3cc <tcp_output+0x290>)
 801e14c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801e150:	499f      	ldr	r1, [pc, #636]	; (801e3d0 <tcp_output+0x294>)
 801e152:	48a0      	ldr	r0, [pc, #640]	; (801e3d4 <tcp_output+0x298>)
 801e154:	f008 fc20 	bl	8026998 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801e158:	687b      	ldr	r3, [r7, #4]
 801e15a:	7d1b      	ldrb	r3, [r3, #20]
 801e15c:	2b01      	cmp	r3, #1
 801e15e:	d106      	bne.n	801e16e <tcp_output+0x32>
 801e160:	4b9a      	ldr	r3, [pc, #616]	; (801e3cc <tcp_output+0x290>)
 801e162:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801e166:	499c      	ldr	r1, [pc, #624]	; (801e3d8 <tcp_output+0x29c>)
 801e168:	489a      	ldr	r0, [pc, #616]	; (801e3d4 <tcp_output+0x298>)
 801e16a:	f008 fc15 	bl	8026998 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801e16e:	4b9b      	ldr	r3, [pc, #620]	; (801e3dc <tcp_output+0x2a0>)
 801e170:	681b      	ldr	r3, [r3, #0]
 801e172:	687a      	ldr	r2, [r7, #4]
 801e174:	429a      	cmp	r2, r3
 801e176:	d101      	bne.n	801e17c <tcp_output+0x40>
    return ERR_OK;
 801e178:	2300      	movs	r3, #0
 801e17a:	e1d2      	b.n	801e522 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801e182:	687b      	ldr	r3, [r7, #4]
 801e184:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801e188:	429a      	cmp	r2, r3
 801e18a:	d203      	bcs.n	801e194 <tcp_output+0x58>
 801e18c:	687b      	ldr	r3, [r7, #4]
 801e18e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801e192:	e002      	b.n	801e19a <tcp_output+0x5e>
 801e194:	687b      	ldr	r3, [r7, #4]
 801e196:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801e19a:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801e19c:	687b      	ldr	r3, [r7, #4]
 801e19e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e1a0:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801e1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1a4:	2b00      	cmp	r3, #0
 801e1a6:	d10b      	bne.n	801e1c0 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801e1a8:	687b      	ldr	r3, [r7, #4]
 801e1aa:	8b5b      	ldrh	r3, [r3, #26]
 801e1ac:	f003 0302 	and.w	r3, r3, #2
 801e1b0:	2b00      	cmp	r3, #0
 801e1b2:	f000 81a9 	beq.w	801e508 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801e1b6:	6878      	ldr	r0, [r7, #4]
 801e1b8:	f000 fdd4 	bl	801ed64 <tcp_send_empty_ack>
 801e1bc:	4603      	mov	r3, r0
 801e1be:	e1b0      	b.n	801e522 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801e1c0:	6879      	ldr	r1, [r7, #4]
 801e1c2:	687b      	ldr	r3, [r7, #4]
 801e1c4:	3304      	adds	r3, #4
 801e1c6:	461a      	mov	r2, r3
 801e1c8:	6878      	ldr	r0, [r7, #4]
 801e1ca:	f7ff f81d 	bl	801d208 <tcp_route>
 801e1ce:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801e1d0:	697b      	ldr	r3, [r7, #20]
 801e1d2:	2b00      	cmp	r3, #0
 801e1d4:	d102      	bne.n	801e1dc <tcp_output+0xa0>
    return ERR_RTE;
 801e1d6:	f06f 0303 	mvn.w	r3, #3
 801e1da:	e1a2      	b.n	801e522 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801e1dc:	687b      	ldr	r3, [r7, #4]
 801e1de:	2b00      	cmp	r3, #0
 801e1e0:	d003      	beq.n	801e1ea <tcp_output+0xae>
 801e1e2:	687b      	ldr	r3, [r7, #4]
 801e1e4:	681b      	ldr	r3, [r3, #0]
 801e1e6:	2b00      	cmp	r3, #0
 801e1e8:	d111      	bne.n	801e20e <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801e1ea:	697b      	ldr	r3, [r7, #20]
 801e1ec:	2b00      	cmp	r3, #0
 801e1ee:	d002      	beq.n	801e1f6 <tcp_output+0xba>
 801e1f0:	697b      	ldr	r3, [r7, #20]
 801e1f2:	3304      	adds	r3, #4
 801e1f4:	e000      	b.n	801e1f8 <tcp_output+0xbc>
 801e1f6:	2300      	movs	r3, #0
 801e1f8:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801e1fa:	693b      	ldr	r3, [r7, #16]
 801e1fc:	2b00      	cmp	r3, #0
 801e1fe:	d102      	bne.n	801e206 <tcp_output+0xca>
      return ERR_RTE;
 801e200:	f06f 0303 	mvn.w	r3, #3
 801e204:	e18d      	b.n	801e522 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801e206:	693b      	ldr	r3, [r7, #16]
 801e208:	681a      	ldr	r2, [r3, #0]
 801e20a:	687b      	ldr	r3, [r7, #4]
 801e20c:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801e20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e210:	68db      	ldr	r3, [r3, #12]
 801e212:	685b      	ldr	r3, [r3, #4]
 801e214:	4618      	mov	r0, r3
 801e216:	f7f8 fec2 	bl	8016f9e <lwip_htonl>
 801e21a:	4602      	mov	r2, r0
 801e21c:	687b      	ldr	r3, [r7, #4]
 801e21e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e220:	1ad3      	subs	r3, r2, r3
 801e222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e224:	8912      	ldrh	r2, [r2, #8]
 801e226:	4413      	add	r3, r2
 801e228:	69ba      	ldr	r2, [r7, #24]
 801e22a:	429a      	cmp	r2, r3
 801e22c:	d227      	bcs.n	801e27e <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801e22e:	687b      	ldr	r3, [r7, #4]
 801e230:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801e234:	461a      	mov	r2, r3
 801e236:	69bb      	ldr	r3, [r7, #24]
 801e238:	4293      	cmp	r3, r2
 801e23a:	d114      	bne.n	801e266 <tcp_output+0x12a>
 801e23c:	687b      	ldr	r3, [r7, #4]
 801e23e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e240:	2b00      	cmp	r3, #0
 801e242:	d110      	bne.n	801e266 <tcp_output+0x12a>
 801e244:	687b      	ldr	r3, [r7, #4]
 801e246:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801e24a:	2b00      	cmp	r3, #0
 801e24c:	d10b      	bne.n	801e266 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 801e24e:	687b      	ldr	r3, [r7, #4]
 801e250:	2200      	movs	r2, #0
 801e252:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801e256:	687b      	ldr	r3, [r7, #4]
 801e258:	2201      	movs	r2, #1
 801e25a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801e25e:	687b      	ldr	r3, [r7, #4]
 801e260:	2200      	movs	r2, #0
 801e262:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801e266:	687b      	ldr	r3, [r7, #4]
 801e268:	8b5b      	ldrh	r3, [r3, #26]
 801e26a:	f003 0302 	and.w	r3, r3, #2
 801e26e:	2b00      	cmp	r3, #0
 801e270:	f000 814c 	beq.w	801e50c <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 801e274:	6878      	ldr	r0, [r7, #4]
 801e276:	f000 fd75 	bl	801ed64 <tcp_send_empty_ack>
 801e27a:	4603      	mov	r3, r0
 801e27c:	e151      	b.n	801e522 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801e27e:	687b      	ldr	r3, [r7, #4]
 801e280:	2200      	movs	r2, #0
 801e282:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801e286:	687b      	ldr	r3, [r7, #4]
 801e288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e28a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801e28c:	6a3b      	ldr	r3, [r7, #32]
 801e28e:	2b00      	cmp	r3, #0
 801e290:	f000 811b 	beq.w	801e4ca <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 801e294:	e002      	b.n	801e29c <tcp_output+0x160>
 801e296:	6a3b      	ldr	r3, [r7, #32]
 801e298:	681b      	ldr	r3, [r3, #0]
 801e29a:	623b      	str	r3, [r7, #32]
 801e29c:	6a3b      	ldr	r3, [r7, #32]
 801e29e:	681b      	ldr	r3, [r3, #0]
 801e2a0:	2b00      	cmp	r3, #0
 801e2a2:	d1f8      	bne.n	801e296 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801e2a4:	e111      	b.n	801e4ca <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801e2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e2a8:	68db      	ldr	r3, [r3, #12]
 801e2aa:	899b      	ldrh	r3, [r3, #12]
 801e2ac:	b29b      	uxth	r3, r3
 801e2ae:	4618      	mov	r0, r3
 801e2b0:	f7f8 fe60 	bl	8016f74 <lwip_htons>
 801e2b4:	4603      	mov	r3, r0
 801e2b6:	b2db      	uxtb	r3, r3
 801e2b8:	f003 0304 	and.w	r3, r3, #4
 801e2bc:	2b00      	cmp	r3, #0
 801e2be:	d006      	beq.n	801e2ce <tcp_output+0x192>
 801e2c0:	4b42      	ldr	r3, [pc, #264]	; (801e3cc <tcp_output+0x290>)
 801e2c2:	f240 5237 	movw	r2, #1335	; 0x537
 801e2c6:	4946      	ldr	r1, [pc, #280]	; (801e3e0 <tcp_output+0x2a4>)
 801e2c8:	4842      	ldr	r0, [pc, #264]	; (801e3d4 <tcp_output+0x298>)
 801e2ca:	f008 fb65 	bl	8026998 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801e2ce:	687b      	ldr	r3, [r7, #4]
 801e2d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e2d2:	2b00      	cmp	r3, #0
 801e2d4:	d01f      	beq.n	801e316 <tcp_output+0x1da>
 801e2d6:	687b      	ldr	r3, [r7, #4]
 801e2d8:	8b5b      	ldrh	r3, [r3, #26]
 801e2da:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801e2de:	2b00      	cmp	r3, #0
 801e2e0:	d119      	bne.n	801e316 <tcp_output+0x1da>
 801e2e2:	687b      	ldr	r3, [r7, #4]
 801e2e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e2e6:	2b00      	cmp	r3, #0
 801e2e8:	d00b      	beq.n	801e302 <tcp_output+0x1c6>
 801e2ea:	687b      	ldr	r3, [r7, #4]
 801e2ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e2ee:	681b      	ldr	r3, [r3, #0]
 801e2f0:	2b00      	cmp	r3, #0
 801e2f2:	d110      	bne.n	801e316 <tcp_output+0x1da>
 801e2f4:	687b      	ldr	r3, [r7, #4]
 801e2f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e2f8:	891a      	ldrh	r2, [r3, #8]
 801e2fa:	687b      	ldr	r3, [r7, #4]
 801e2fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e2fe:	429a      	cmp	r2, r3
 801e300:	d209      	bcs.n	801e316 <tcp_output+0x1da>
 801e302:	687b      	ldr	r3, [r7, #4]
 801e304:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801e308:	2b00      	cmp	r3, #0
 801e30a:	d004      	beq.n	801e316 <tcp_output+0x1da>
 801e30c:	687b      	ldr	r3, [r7, #4]
 801e30e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e312:	2b0f      	cmp	r3, #15
 801e314:	d901      	bls.n	801e31a <tcp_output+0x1de>
 801e316:	2301      	movs	r3, #1
 801e318:	e000      	b.n	801e31c <tcp_output+0x1e0>
 801e31a:	2300      	movs	r3, #0
 801e31c:	2b00      	cmp	r3, #0
 801e31e:	d106      	bne.n	801e32e <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801e320:	687b      	ldr	r3, [r7, #4]
 801e322:	8b5b      	ldrh	r3, [r3, #26]
 801e324:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801e328:	2b00      	cmp	r3, #0
 801e32a:	f000 80e3 	beq.w	801e4f4 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801e32e:	687b      	ldr	r3, [r7, #4]
 801e330:	7d1b      	ldrb	r3, [r3, #20]
 801e332:	2b02      	cmp	r3, #2
 801e334:	d00d      	beq.n	801e352 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801e336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e338:	68db      	ldr	r3, [r3, #12]
 801e33a:	899b      	ldrh	r3, [r3, #12]
 801e33c:	b29c      	uxth	r4, r3
 801e33e:	2010      	movs	r0, #16
 801e340:	f7f8 fe18 	bl	8016f74 <lwip_htons>
 801e344:	4603      	mov	r3, r0
 801e346:	461a      	mov	r2, r3
 801e348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e34a:	68db      	ldr	r3, [r3, #12]
 801e34c:	4322      	orrs	r2, r4
 801e34e:	b292      	uxth	r2, r2
 801e350:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801e352:	697a      	ldr	r2, [r7, #20]
 801e354:	6879      	ldr	r1, [r7, #4]
 801e356:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e358:	f000 f908 	bl	801e56c <tcp_output_segment>
 801e35c:	4603      	mov	r3, r0
 801e35e:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801e360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e364:	2b00      	cmp	r3, #0
 801e366:	d009      	beq.n	801e37c <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e368:	687b      	ldr	r3, [r7, #4]
 801e36a:	8b5b      	ldrh	r3, [r3, #26]
 801e36c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e370:	b29a      	uxth	r2, r3
 801e372:	687b      	ldr	r3, [r7, #4]
 801e374:	835a      	strh	r2, [r3, #26]
      return err;
 801e376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e37a:	e0d2      	b.n	801e522 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801e37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e37e:	681a      	ldr	r2, [r3, #0]
 801e380:	687b      	ldr	r3, [r7, #4]
 801e382:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801e384:	687b      	ldr	r3, [r7, #4]
 801e386:	7d1b      	ldrb	r3, [r3, #20]
 801e388:	2b02      	cmp	r3, #2
 801e38a:	d006      	beq.n	801e39a <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e38c:	687b      	ldr	r3, [r7, #4]
 801e38e:	8b5b      	ldrh	r3, [r3, #26]
 801e390:	f023 0303 	bic.w	r3, r3, #3
 801e394:	b29a      	uxth	r2, r3
 801e396:	687b      	ldr	r3, [r7, #4]
 801e398:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e39c:	68db      	ldr	r3, [r3, #12]
 801e39e:	685b      	ldr	r3, [r3, #4]
 801e3a0:	4618      	mov	r0, r3
 801e3a2:	f7f8 fdfc 	bl	8016f9e <lwip_htonl>
 801e3a6:	4604      	mov	r4, r0
 801e3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e3aa:	891b      	ldrh	r3, [r3, #8]
 801e3ac:	461d      	mov	r5, r3
 801e3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e3b0:	68db      	ldr	r3, [r3, #12]
 801e3b2:	899b      	ldrh	r3, [r3, #12]
 801e3b4:	b29b      	uxth	r3, r3
 801e3b6:	4618      	mov	r0, r3
 801e3b8:	f7f8 fddc 	bl	8016f74 <lwip_htons>
 801e3bc:	4603      	mov	r3, r0
 801e3be:	b2db      	uxtb	r3, r3
 801e3c0:	f003 0303 	and.w	r3, r3, #3
 801e3c4:	2b00      	cmp	r3, #0
 801e3c6:	d00d      	beq.n	801e3e4 <tcp_output+0x2a8>
 801e3c8:	2301      	movs	r3, #1
 801e3ca:	e00c      	b.n	801e3e6 <tcp_output+0x2aa>
 801e3cc:	0802a2fc 	.word	0x0802a2fc
 801e3d0:	0802a840 	.word	0x0802a840
 801e3d4:	0802a350 	.word	0x0802a350
 801e3d8:	0802a858 	.word	0x0802a858
 801e3dc:	2001a008 	.word	0x2001a008
 801e3e0:	0802a880 	.word	0x0802a880
 801e3e4:	2300      	movs	r3, #0
 801e3e6:	442b      	add	r3, r5
 801e3e8:	4423      	add	r3, r4
 801e3ea:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801e3ec:	687b      	ldr	r3, [r7, #4]
 801e3ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e3f0:	68bb      	ldr	r3, [r7, #8]
 801e3f2:	1ad3      	subs	r3, r2, r3
 801e3f4:	2b00      	cmp	r3, #0
 801e3f6:	da02      	bge.n	801e3fe <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 801e3f8:	687b      	ldr	r3, [r7, #4]
 801e3fa:	68ba      	ldr	r2, [r7, #8]
 801e3fc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801e3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e400:	891b      	ldrh	r3, [r3, #8]
 801e402:	461c      	mov	r4, r3
 801e404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e406:	68db      	ldr	r3, [r3, #12]
 801e408:	899b      	ldrh	r3, [r3, #12]
 801e40a:	b29b      	uxth	r3, r3
 801e40c:	4618      	mov	r0, r3
 801e40e:	f7f8 fdb1 	bl	8016f74 <lwip_htons>
 801e412:	4603      	mov	r3, r0
 801e414:	b2db      	uxtb	r3, r3
 801e416:	f003 0303 	and.w	r3, r3, #3
 801e41a:	2b00      	cmp	r3, #0
 801e41c:	d001      	beq.n	801e422 <tcp_output+0x2e6>
 801e41e:	2301      	movs	r3, #1
 801e420:	e000      	b.n	801e424 <tcp_output+0x2e8>
 801e422:	2300      	movs	r3, #0
 801e424:	4423      	add	r3, r4
 801e426:	2b00      	cmp	r3, #0
 801e428:	d049      	beq.n	801e4be <tcp_output+0x382>
      seg->next = NULL;
 801e42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e42c:	2200      	movs	r2, #0
 801e42e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801e430:	687b      	ldr	r3, [r7, #4]
 801e432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e434:	2b00      	cmp	r3, #0
 801e436:	d105      	bne.n	801e444 <tcp_output+0x308>
        pcb->unacked = seg;
 801e438:	687b      	ldr	r3, [r7, #4]
 801e43a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e43c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801e43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e440:	623b      	str	r3, [r7, #32]
 801e442:	e03f      	b.n	801e4c4 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801e444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e446:	68db      	ldr	r3, [r3, #12]
 801e448:	685b      	ldr	r3, [r3, #4]
 801e44a:	4618      	mov	r0, r3
 801e44c:	f7f8 fda7 	bl	8016f9e <lwip_htonl>
 801e450:	4604      	mov	r4, r0
 801e452:	6a3b      	ldr	r3, [r7, #32]
 801e454:	68db      	ldr	r3, [r3, #12]
 801e456:	685b      	ldr	r3, [r3, #4]
 801e458:	4618      	mov	r0, r3
 801e45a:	f7f8 fda0 	bl	8016f9e <lwip_htonl>
 801e45e:	4603      	mov	r3, r0
 801e460:	1ae3      	subs	r3, r4, r3
 801e462:	2b00      	cmp	r3, #0
 801e464:	da24      	bge.n	801e4b0 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801e466:	687b      	ldr	r3, [r7, #4]
 801e468:	3370      	adds	r3, #112	; 0x70
 801e46a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801e46c:	e002      	b.n	801e474 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801e46e:	69fb      	ldr	r3, [r7, #28]
 801e470:	681b      	ldr	r3, [r3, #0]
 801e472:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801e474:	69fb      	ldr	r3, [r7, #28]
 801e476:	681b      	ldr	r3, [r3, #0]
 801e478:	2b00      	cmp	r3, #0
 801e47a:	d011      	beq.n	801e4a0 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801e47c:	69fb      	ldr	r3, [r7, #28]
 801e47e:	681b      	ldr	r3, [r3, #0]
 801e480:	68db      	ldr	r3, [r3, #12]
 801e482:	685b      	ldr	r3, [r3, #4]
 801e484:	4618      	mov	r0, r3
 801e486:	f7f8 fd8a 	bl	8016f9e <lwip_htonl>
 801e48a:	4604      	mov	r4, r0
 801e48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e48e:	68db      	ldr	r3, [r3, #12]
 801e490:	685b      	ldr	r3, [r3, #4]
 801e492:	4618      	mov	r0, r3
 801e494:	f7f8 fd83 	bl	8016f9e <lwip_htonl>
 801e498:	4603      	mov	r3, r0
 801e49a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801e49c:	2b00      	cmp	r3, #0
 801e49e:	dbe6      	blt.n	801e46e <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 801e4a0:	69fb      	ldr	r3, [r7, #28]
 801e4a2:	681a      	ldr	r2, [r3, #0]
 801e4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4a6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801e4a8:	69fb      	ldr	r3, [r7, #28]
 801e4aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e4ac:	601a      	str	r2, [r3, #0]
 801e4ae:	e009      	b.n	801e4c4 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801e4b0:	6a3b      	ldr	r3, [r7, #32]
 801e4b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e4b4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801e4b6:	6a3b      	ldr	r3, [r7, #32]
 801e4b8:	681b      	ldr	r3, [r3, #0]
 801e4ba:	623b      	str	r3, [r7, #32]
 801e4bc:	e002      	b.n	801e4c4 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801e4be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e4c0:	f7fb ff1a 	bl	801a2f8 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801e4c4:	687b      	ldr	r3, [r7, #4]
 801e4c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e4c8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801e4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4cc:	2b00      	cmp	r3, #0
 801e4ce:	d012      	beq.n	801e4f6 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801e4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4d2:	68db      	ldr	r3, [r3, #12]
 801e4d4:	685b      	ldr	r3, [r3, #4]
 801e4d6:	4618      	mov	r0, r3
 801e4d8:	f7f8 fd61 	bl	8016f9e <lwip_htonl>
 801e4dc:	4602      	mov	r2, r0
 801e4de:	687b      	ldr	r3, [r7, #4]
 801e4e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e4e2:	1ad3      	subs	r3, r2, r3
 801e4e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e4e6:	8912      	ldrh	r2, [r2, #8]
 801e4e8:	4413      	add	r3, r2
  while (seg != NULL &&
 801e4ea:	69ba      	ldr	r2, [r7, #24]
 801e4ec:	429a      	cmp	r2, r3
 801e4ee:	f4bf aeda 	bcs.w	801e2a6 <tcp_output+0x16a>
 801e4f2:	e000      	b.n	801e4f6 <tcp_output+0x3ba>
      break;
 801e4f4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801e4f6:	687b      	ldr	r3, [r7, #4]
 801e4f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e4fa:	2b00      	cmp	r3, #0
 801e4fc:	d108      	bne.n	801e510 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801e4fe:	687b      	ldr	r3, [r7, #4]
 801e500:	2200      	movs	r2, #0
 801e502:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801e506:	e004      	b.n	801e512 <tcp_output+0x3d6>
    goto output_done;
 801e508:	bf00      	nop
 801e50a:	e002      	b.n	801e512 <tcp_output+0x3d6>
    goto output_done;
 801e50c:	bf00      	nop
 801e50e:	e000      	b.n	801e512 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801e510:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801e512:	687b      	ldr	r3, [r7, #4]
 801e514:	8b5b      	ldrh	r3, [r3, #26]
 801e516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801e51a:	b29a      	uxth	r2, r3
 801e51c:	687b      	ldr	r3, [r7, #4]
 801e51e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801e520:	2300      	movs	r3, #0
}
 801e522:	4618      	mov	r0, r3
 801e524:	3728      	adds	r7, #40	; 0x28
 801e526:	46bd      	mov	sp, r7
 801e528:	bdb0      	pop	{r4, r5, r7, pc}
 801e52a:	bf00      	nop

0801e52c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801e52c:	b580      	push	{r7, lr}
 801e52e:	b082      	sub	sp, #8
 801e530:	af00      	add	r7, sp, #0
 801e532:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801e534:	687b      	ldr	r3, [r7, #4]
 801e536:	2b00      	cmp	r3, #0
 801e538:	d106      	bne.n	801e548 <tcp_output_segment_busy+0x1c>
 801e53a:	4b09      	ldr	r3, [pc, #36]	; (801e560 <tcp_output_segment_busy+0x34>)
 801e53c:	f240 529a 	movw	r2, #1434	; 0x59a
 801e540:	4908      	ldr	r1, [pc, #32]	; (801e564 <tcp_output_segment_busy+0x38>)
 801e542:	4809      	ldr	r0, [pc, #36]	; (801e568 <tcp_output_segment_busy+0x3c>)
 801e544:	f008 fa28 	bl	8026998 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801e548:	687b      	ldr	r3, [r7, #4]
 801e54a:	685b      	ldr	r3, [r3, #4]
 801e54c:	7b9b      	ldrb	r3, [r3, #14]
 801e54e:	2b01      	cmp	r3, #1
 801e550:	d001      	beq.n	801e556 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801e552:	2301      	movs	r3, #1
 801e554:	e000      	b.n	801e558 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801e556:	2300      	movs	r3, #0
}
 801e558:	4618      	mov	r0, r3
 801e55a:	3708      	adds	r7, #8
 801e55c:	46bd      	mov	sp, r7
 801e55e:	bd80      	pop	{r7, pc}
 801e560:	0802a2fc 	.word	0x0802a2fc
 801e564:	0802a898 	.word	0x0802a898
 801e568:	0802a350 	.word	0x0802a350

0801e56c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801e56c:	b5b0      	push	{r4, r5, r7, lr}
 801e56e:	b08c      	sub	sp, #48	; 0x30
 801e570:	af04      	add	r7, sp, #16
 801e572:	60f8      	str	r0, [r7, #12]
 801e574:	60b9      	str	r1, [r7, #8]
 801e576:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801e578:	68fb      	ldr	r3, [r7, #12]
 801e57a:	2b00      	cmp	r3, #0
 801e57c:	d106      	bne.n	801e58c <tcp_output_segment+0x20>
 801e57e:	4b64      	ldr	r3, [pc, #400]	; (801e710 <tcp_output_segment+0x1a4>)
 801e580:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801e584:	4963      	ldr	r1, [pc, #396]	; (801e714 <tcp_output_segment+0x1a8>)
 801e586:	4864      	ldr	r0, [pc, #400]	; (801e718 <tcp_output_segment+0x1ac>)
 801e588:	f008 fa06 	bl	8026998 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801e58c:	68bb      	ldr	r3, [r7, #8]
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d106      	bne.n	801e5a0 <tcp_output_segment+0x34>
 801e592:	4b5f      	ldr	r3, [pc, #380]	; (801e710 <tcp_output_segment+0x1a4>)
 801e594:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801e598:	4960      	ldr	r1, [pc, #384]	; (801e71c <tcp_output_segment+0x1b0>)
 801e59a:	485f      	ldr	r0, [pc, #380]	; (801e718 <tcp_output_segment+0x1ac>)
 801e59c:	f008 f9fc 	bl	8026998 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801e5a0:	687b      	ldr	r3, [r7, #4]
 801e5a2:	2b00      	cmp	r3, #0
 801e5a4:	d106      	bne.n	801e5b4 <tcp_output_segment+0x48>
 801e5a6:	4b5a      	ldr	r3, [pc, #360]	; (801e710 <tcp_output_segment+0x1a4>)
 801e5a8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801e5ac:	495c      	ldr	r1, [pc, #368]	; (801e720 <tcp_output_segment+0x1b4>)
 801e5ae:	485a      	ldr	r0, [pc, #360]	; (801e718 <tcp_output_segment+0x1ac>)
 801e5b0:	f008 f9f2 	bl	8026998 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801e5b4:	68f8      	ldr	r0, [r7, #12]
 801e5b6:	f7ff ffb9 	bl	801e52c <tcp_output_segment_busy>
 801e5ba:	4603      	mov	r3, r0
 801e5bc:	2b00      	cmp	r3, #0
 801e5be:	d001      	beq.n	801e5c4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801e5c0:	2300      	movs	r3, #0
 801e5c2:	e0a0      	b.n	801e706 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801e5c4:	68bb      	ldr	r3, [r7, #8]
 801e5c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e5c8:	68fb      	ldr	r3, [r7, #12]
 801e5ca:	68dc      	ldr	r4, [r3, #12]
 801e5cc:	4610      	mov	r0, r2
 801e5ce:	f7f8 fce6 	bl	8016f9e <lwip_htonl>
 801e5d2:	4603      	mov	r3, r0
 801e5d4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801e5d6:	68bb      	ldr	r3, [r7, #8]
 801e5d8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801e5da:	68fb      	ldr	r3, [r7, #12]
 801e5dc:	68dc      	ldr	r4, [r3, #12]
 801e5de:	4610      	mov	r0, r2
 801e5e0:	f7f8 fcc8 	bl	8016f74 <lwip_htons>
 801e5e4:	4603      	mov	r3, r0
 801e5e6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801e5e8:	68bb      	ldr	r3, [r7, #8]
 801e5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e5ec:	68ba      	ldr	r2, [r7, #8]
 801e5ee:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801e5f0:	441a      	add	r2, r3
 801e5f2:	68bb      	ldr	r3, [r7, #8]
 801e5f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801e5f6:	68fb      	ldr	r3, [r7, #12]
 801e5f8:	68db      	ldr	r3, [r3, #12]
 801e5fa:	3314      	adds	r3, #20
 801e5fc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801e5fe:	68fb      	ldr	r3, [r7, #12]
 801e600:	7a9b      	ldrb	r3, [r3, #10]
 801e602:	f003 0301 	and.w	r3, r3, #1
 801e606:	2b00      	cmp	r3, #0
 801e608:	d015      	beq.n	801e636 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801e60a:	68bb      	ldr	r3, [r7, #8]
 801e60c:	3304      	adds	r3, #4
 801e60e:	461a      	mov	r2, r3
 801e610:	6879      	ldr	r1, [r7, #4]
 801e612:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 801e616:	f7fc fa33 	bl	801aa80 <tcp_eff_send_mss_netif>
 801e61a:	4603      	mov	r3, r0
 801e61c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801e61e:	8b7b      	ldrh	r3, [r7, #26]
 801e620:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801e624:	4618      	mov	r0, r3
 801e626:	f7f8 fcba 	bl	8016f9e <lwip_htonl>
 801e62a:	4602      	mov	r2, r0
 801e62c:	69fb      	ldr	r3, [r7, #28]
 801e62e:	601a      	str	r2, [r3, #0]
    opts += 1;
 801e630:	69fb      	ldr	r3, [r7, #28]
 801e632:	3304      	adds	r3, #4
 801e634:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801e636:	68bb      	ldr	r3, [r7, #8]
 801e638:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801e63c:	2b00      	cmp	r3, #0
 801e63e:	da02      	bge.n	801e646 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801e640:	68bb      	ldr	r3, [r7, #8]
 801e642:	2200      	movs	r2, #0
 801e644:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801e646:	68bb      	ldr	r3, [r7, #8]
 801e648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e64a:	2b00      	cmp	r3, #0
 801e64c:	d10c      	bne.n	801e668 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801e64e:	4b35      	ldr	r3, [pc, #212]	; (801e724 <tcp_output_segment+0x1b8>)
 801e650:	681a      	ldr	r2, [r3, #0]
 801e652:	68bb      	ldr	r3, [r7, #8]
 801e654:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801e656:	68fb      	ldr	r3, [r7, #12]
 801e658:	68db      	ldr	r3, [r3, #12]
 801e65a:	685b      	ldr	r3, [r3, #4]
 801e65c:	4618      	mov	r0, r3
 801e65e:	f7f8 fc9e 	bl	8016f9e <lwip_htonl>
 801e662:	4602      	mov	r2, r0
 801e664:	68bb      	ldr	r3, [r7, #8]
 801e666:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801e668:	68fb      	ldr	r3, [r7, #12]
 801e66a:	68db      	ldr	r3, [r3, #12]
 801e66c:	461a      	mov	r2, r3
 801e66e:	68fb      	ldr	r3, [r7, #12]
 801e670:	685b      	ldr	r3, [r3, #4]
 801e672:	685b      	ldr	r3, [r3, #4]
 801e674:	1ad3      	subs	r3, r2, r3
 801e676:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801e678:	68fb      	ldr	r3, [r7, #12]
 801e67a:	685b      	ldr	r3, [r3, #4]
 801e67c:	8959      	ldrh	r1, [r3, #10]
 801e67e:	68fb      	ldr	r3, [r7, #12]
 801e680:	685b      	ldr	r3, [r3, #4]
 801e682:	8b3a      	ldrh	r2, [r7, #24]
 801e684:	1a8a      	subs	r2, r1, r2
 801e686:	b292      	uxth	r2, r2
 801e688:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801e68a:	68fb      	ldr	r3, [r7, #12]
 801e68c:	685b      	ldr	r3, [r3, #4]
 801e68e:	8919      	ldrh	r1, [r3, #8]
 801e690:	68fb      	ldr	r3, [r7, #12]
 801e692:	685b      	ldr	r3, [r3, #4]
 801e694:	8b3a      	ldrh	r2, [r7, #24]
 801e696:	1a8a      	subs	r2, r1, r2
 801e698:	b292      	uxth	r2, r2
 801e69a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801e69c:	68fb      	ldr	r3, [r7, #12]
 801e69e:	685b      	ldr	r3, [r3, #4]
 801e6a0:	68fa      	ldr	r2, [r7, #12]
 801e6a2:	68d2      	ldr	r2, [r2, #12]
 801e6a4:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801e6a6:	68fb      	ldr	r3, [r7, #12]
 801e6a8:	68db      	ldr	r3, [r3, #12]
 801e6aa:	2200      	movs	r2, #0
 801e6ac:	741a      	strb	r2, [r3, #16]
 801e6ae:	2200      	movs	r2, #0
 801e6b0:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801e6b2:	68fb      	ldr	r3, [r7, #12]
 801e6b4:	68db      	ldr	r3, [r3, #12]
 801e6b6:	f103 0214 	add.w	r2, r3, #20
 801e6ba:	68fb      	ldr	r3, [r7, #12]
 801e6bc:	7a9b      	ldrb	r3, [r3, #10]
 801e6be:	009b      	lsls	r3, r3, #2
 801e6c0:	f003 0304 	and.w	r3, r3, #4
 801e6c4:	4413      	add	r3, r2
 801e6c6:	69fa      	ldr	r2, [r7, #28]
 801e6c8:	429a      	cmp	r2, r3
 801e6ca:	d006      	beq.n	801e6da <tcp_output_segment+0x16e>
 801e6cc:	4b10      	ldr	r3, [pc, #64]	; (801e710 <tcp_output_segment+0x1a4>)
 801e6ce:	f240 621c 	movw	r2, #1564	; 0x61c
 801e6d2:	4915      	ldr	r1, [pc, #84]	; (801e728 <tcp_output_segment+0x1bc>)
 801e6d4:	4810      	ldr	r0, [pc, #64]	; (801e718 <tcp_output_segment+0x1ac>)
 801e6d6:	f008 f95f 	bl	8026998 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801e6da:	68fb      	ldr	r3, [r7, #12]
 801e6dc:	6858      	ldr	r0, [r3, #4]
 801e6de:	68b9      	ldr	r1, [r7, #8]
 801e6e0:	68bb      	ldr	r3, [r7, #8]
 801e6e2:	1d1c      	adds	r4, r3, #4
 801e6e4:	68bb      	ldr	r3, [r7, #8]
 801e6e6:	7add      	ldrb	r5, [r3, #11]
 801e6e8:	68bb      	ldr	r3, [r7, #8]
 801e6ea:	7a9b      	ldrb	r3, [r3, #10]
 801e6ec:	687a      	ldr	r2, [r7, #4]
 801e6ee:	9202      	str	r2, [sp, #8]
 801e6f0:	2206      	movs	r2, #6
 801e6f2:	9201      	str	r2, [sp, #4]
 801e6f4:	9300      	str	r3, [sp, #0]
 801e6f6:	462b      	mov	r3, r5
 801e6f8:	4622      	mov	r2, r4
 801e6fa:	f004 fcd7 	bl	80230ac <ip4_output_if>
 801e6fe:	4603      	mov	r3, r0
 801e700:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801e702:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801e706:	4618      	mov	r0, r3
 801e708:	3720      	adds	r7, #32
 801e70a:	46bd      	mov	sp, r7
 801e70c:	bdb0      	pop	{r4, r5, r7, pc}
 801e70e:	bf00      	nop
 801e710:	0802a2fc 	.word	0x0802a2fc
 801e714:	0802a8c0 	.word	0x0802a8c0
 801e718:	0802a350 	.word	0x0802a350
 801e71c:	0802a8e0 	.word	0x0802a8e0
 801e720:	0802a900 	.word	0x0802a900
 801e724:	20019ff8 	.word	0x20019ff8
 801e728:	0802a924 	.word	0x0802a924

0801e72c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801e72c:	b5b0      	push	{r4, r5, r7, lr}
 801e72e:	b084      	sub	sp, #16
 801e730:	af00      	add	r7, sp, #0
 801e732:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801e734:	687b      	ldr	r3, [r7, #4]
 801e736:	2b00      	cmp	r3, #0
 801e738:	d106      	bne.n	801e748 <tcp_rexmit_rto_prepare+0x1c>
 801e73a:	4b31      	ldr	r3, [pc, #196]	; (801e800 <tcp_rexmit_rto_prepare+0xd4>)
 801e73c:	f240 6263 	movw	r2, #1635	; 0x663
 801e740:	4930      	ldr	r1, [pc, #192]	; (801e804 <tcp_rexmit_rto_prepare+0xd8>)
 801e742:	4831      	ldr	r0, [pc, #196]	; (801e808 <tcp_rexmit_rto_prepare+0xdc>)
 801e744:	f008 f928 	bl	8026998 <iprintf>

  if (pcb->unacked == NULL) {
 801e748:	687b      	ldr	r3, [r7, #4]
 801e74a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e74c:	2b00      	cmp	r3, #0
 801e74e:	d102      	bne.n	801e756 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801e750:	f06f 0305 	mvn.w	r3, #5
 801e754:	e050      	b.n	801e7f8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801e756:	687b      	ldr	r3, [r7, #4]
 801e758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e75a:	60fb      	str	r3, [r7, #12]
 801e75c:	e00b      	b.n	801e776 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801e75e:	68f8      	ldr	r0, [r7, #12]
 801e760:	f7ff fee4 	bl	801e52c <tcp_output_segment_busy>
 801e764:	4603      	mov	r3, r0
 801e766:	2b00      	cmp	r3, #0
 801e768:	d002      	beq.n	801e770 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801e76a:	f06f 0305 	mvn.w	r3, #5
 801e76e:	e043      	b.n	801e7f8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801e770:	68fb      	ldr	r3, [r7, #12]
 801e772:	681b      	ldr	r3, [r3, #0]
 801e774:	60fb      	str	r3, [r7, #12]
 801e776:	68fb      	ldr	r3, [r7, #12]
 801e778:	681b      	ldr	r3, [r3, #0]
 801e77a:	2b00      	cmp	r3, #0
 801e77c:	d1ef      	bne.n	801e75e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801e77e:	68f8      	ldr	r0, [r7, #12]
 801e780:	f7ff fed4 	bl	801e52c <tcp_output_segment_busy>
 801e784:	4603      	mov	r3, r0
 801e786:	2b00      	cmp	r3, #0
 801e788:	d002      	beq.n	801e790 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801e78a:	f06f 0305 	mvn.w	r3, #5
 801e78e:	e033      	b.n	801e7f8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801e790:	687b      	ldr	r3, [r7, #4]
 801e792:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801e794:	68fb      	ldr	r3, [r7, #12]
 801e796:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801e798:	687b      	ldr	r3, [r7, #4]
 801e79a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801e79c:	687b      	ldr	r3, [r7, #4]
 801e79e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801e7a0:	687b      	ldr	r3, [r7, #4]
 801e7a2:	2200      	movs	r2, #0
 801e7a4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801e7a6:	687b      	ldr	r3, [r7, #4]
 801e7a8:	8b5b      	ldrh	r3, [r3, #26]
 801e7aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801e7ae:	b29a      	uxth	r2, r3
 801e7b0:	687b      	ldr	r3, [r7, #4]
 801e7b2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e7b4:	68fb      	ldr	r3, [r7, #12]
 801e7b6:	68db      	ldr	r3, [r3, #12]
 801e7b8:	685b      	ldr	r3, [r3, #4]
 801e7ba:	4618      	mov	r0, r3
 801e7bc:	f7f8 fbef 	bl	8016f9e <lwip_htonl>
 801e7c0:	4604      	mov	r4, r0
 801e7c2:	68fb      	ldr	r3, [r7, #12]
 801e7c4:	891b      	ldrh	r3, [r3, #8]
 801e7c6:	461d      	mov	r5, r3
 801e7c8:	68fb      	ldr	r3, [r7, #12]
 801e7ca:	68db      	ldr	r3, [r3, #12]
 801e7cc:	899b      	ldrh	r3, [r3, #12]
 801e7ce:	b29b      	uxth	r3, r3
 801e7d0:	4618      	mov	r0, r3
 801e7d2:	f7f8 fbcf 	bl	8016f74 <lwip_htons>
 801e7d6:	4603      	mov	r3, r0
 801e7d8:	b2db      	uxtb	r3, r3
 801e7da:	f003 0303 	and.w	r3, r3, #3
 801e7de:	2b00      	cmp	r3, #0
 801e7e0:	d001      	beq.n	801e7e6 <tcp_rexmit_rto_prepare+0xba>
 801e7e2:	2301      	movs	r3, #1
 801e7e4:	e000      	b.n	801e7e8 <tcp_rexmit_rto_prepare+0xbc>
 801e7e6:	2300      	movs	r3, #0
 801e7e8:	442b      	add	r3, r5
 801e7ea:	18e2      	adds	r2, r4, r3
 801e7ec:	687b      	ldr	r3, [r7, #4]
 801e7ee:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801e7f0:	687b      	ldr	r3, [r7, #4]
 801e7f2:	2200      	movs	r2, #0
 801e7f4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801e7f6:	2300      	movs	r3, #0
}
 801e7f8:	4618      	mov	r0, r3
 801e7fa:	3710      	adds	r7, #16
 801e7fc:	46bd      	mov	sp, r7
 801e7fe:	bdb0      	pop	{r4, r5, r7, pc}
 801e800:	0802a2fc 	.word	0x0802a2fc
 801e804:	0802a938 	.word	0x0802a938
 801e808:	0802a350 	.word	0x0802a350

0801e80c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801e80c:	b580      	push	{r7, lr}
 801e80e:	b082      	sub	sp, #8
 801e810:	af00      	add	r7, sp, #0
 801e812:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801e814:	687b      	ldr	r3, [r7, #4]
 801e816:	2b00      	cmp	r3, #0
 801e818:	d106      	bne.n	801e828 <tcp_rexmit_rto_commit+0x1c>
 801e81a:	4b0d      	ldr	r3, [pc, #52]	; (801e850 <tcp_rexmit_rto_commit+0x44>)
 801e81c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801e820:	490c      	ldr	r1, [pc, #48]	; (801e854 <tcp_rexmit_rto_commit+0x48>)
 801e822:	480d      	ldr	r0, [pc, #52]	; (801e858 <tcp_rexmit_rto_commit+0x4c>)
 801e824:	f008 f8b8 	bl	8026998 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801e828:	687b      	ldr	r3, [r7, #4]
 801e82a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e82e:	2bff      	cmp	r3, #255	; 0xff
 801e830:	d007      	beq.n	801e842 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801e832:	687b      	ldr	r3, [r7, #4]
 801e834:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e838:	3301      	adds	r3, #1
 801e83a:	b2da      	uxtb	r2, r3
 801e83c:	687b      	ldr	r3, [r7, #4]
 801e83e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801e842:	6878      	ldr	r0, [r7, #4]
 801e844:	f7ff fc7a 	bl	801e13c <tcp_output>
}
 801e848:	bf00      	nop
 801e84a:	3708      	adds	r7, #8
 801e84c:	46bd      	mov	sp, r7
 801e84e:	bd80      	pop	{r7, pc}
 801e850:	0802a2fc 	.word	0x0802a2fc
 801e854:	0802a95c 	.word	0x0802a95c
 801e858:	0802a350 	.word	0x0802a350

0801e85c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801e85c:	b580      	push	{r7, lr}
 801e85e:	b082      	sub	sp, #8
 801e860:	af00      	add	r7, sp, #0
 801e862:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801e864:	687b      	ldr	r3, [r7, #4]
 801e866:	2b00      	cmp	r3, #0
 801e868:	d106      	bne.n	801e878 <tcp_rexmit_rto+0x1c>
 801e86a:	4b0a      	ldr	r3, [pc, #40]	; (801e894 <tcp_rexmit_rto+0x38>)
 801e86c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801e870:	4909      	ldr	r1, [pc, #36]	; (801e898 <tcp_rexmit_rto+0x3c>)
 801e872:	480a      	ldr	r0, [pc, #40]	; (801e89c <tcp_rexmit_rto+0x40>)
 801e874:	f008 f890 	bl	8026998 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801e878:	6878      	ldr	r0, [r7, #4]
 801e87a:	f7ff ff57 	bl	801e72c <tcp_rexmit_rto_prepare>
 801e87e:	4603      	mov	r3, r0
 801e880:	2b00      	cmp	r3, #0
 801e882:	d102      	bne.n	801e88a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801e884:	6878      	ldr	r0, [r7, #4]
 801e886:	f7ff ffc1 	bl	801e80c <tcp_rexmit_rto_commit>
  }
}
 801e88a:	bf00      	nop
 801e88c:	3708      	adds	r7, #8
 801e88e:	46bd      	mov	sp, r7
 801e890:	bd80      	pop	{r7, pc}
 801e892:	bf00      	nop
 801e894:	0802a2fc 	.word	0x0802a2fc
 801e898:	0802a980 	.word	0x0802a980
 801e89c:	0802a350 	.word	0x0802a350

0801e8a0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801e8a0:	b590      	push	{r4, r7, lr}
 801e8a2:	b085      	sub	sp, #20
 801e8a4:	af00      	add	r7, sp, #0
 801e8a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801e8a8:	687b      	ldr	r3, [r7, #4]
 801e8aa:	2b00      	cmp	r3, #0
 801e8ac:	d106      	bne.n	801e8bc <tcp_rexmit+0x1c>
 801e8ae:	4b2f      	ldr	r3, [pc, #188]	; (801e96c <tcp_rexmit+0xcc>)
 801e8b0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801e8b4:	492e      	ldr	r1, [pc, #184]	; (801e970 <tcp_rexmit+0xd0>)
 801e8b6:	482f      	ldr	r0, [pc, #188]	; (801e974 <tcp_rexmit+0xd4>)
 801e8b8:	f008 f86e 	bl	8026998 <iprintf>

  if (pcb->unacked == NULL) {
 801e8bc:	687b      	ldr	r3, [r7, #4]
 801e8be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e8c0:	2b00      	cmp	r3, #0
 801e8c2:	d102      	bne.n	801e8ca <tcp_rexmit+0x2a>
    return ERR_VAL;
 801e8c4:	f06f 0305 	mvn.w	r3, #5
 801e8c8:	e04c      	b.n	801e964 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801e8ca:	687b      	ldr	r3, [r7, #4]
 801e8cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e8ce:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801e8d0:	68b8      	ldr	r0, [r7, #8]
 801e8d2:	f7ff fe2b 	bl	801e52c <tcp_output_segment_busy>
 801e8d6:	4603      	mov	r3, r0
 801e8d8:	2b00      	cmp	r3, #0
 801e8da:	d002      	beq.n	801e8e2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801e8dc:	f06f 0305 	mvn.w	r3, #5
 801e8e0:	e040      	b.n	801e964 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801e8e2:	68bb      	ldr	r3, [r7, #8]
 801e8e4:	681a      	ldr	r2, [r3, #0]
 801e8e6:	687b      	ldr	r3, [r7, #4]
 801e8e8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801e8ea:	687b      	ldr	r3, [r7, #4]
 801e8ec:	336c      	adds	r3, #108	; 0x6c
 801e8ee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801e8f0:	e002      	b.n	801e8f8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801e8f2:	68fb      	ldr	r3, [r7, #12]
 801e8f4:	681b      	ldr	r3, [r3, #0]
 801e8f6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801e8f8:	68fb      	ldr	r3, [r7, #12]
 801e8fa:	681b      	ldr	r3, [r3, #0]
 801e8fc:	2b00      	cmp	r3, #0
 801e8fe:	d011      	beq.n	801e924 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801e900:	68fb      	ldr	r3, [r7, #12]
 801e902:	681b      	ldr	r3, [r3, #0]
 801e904:	68db      	ldr	r3, [r3, #12]
 801e906:	685b      	ldr	r3, [r3, #4]
 801e908:	4618      	mov	r0, r3
 801e90a:	f7f8 fb48 	bl	8016f9e <lwip_htonl>
 801e90e:	4604      	mov	r4, r0
 801e910:	68bb      	ldr	r3, [r7, #8]
 801e912:	68db      	ldr	r3, [r3, #12]
 801e914:	685b      	ldr	r3, [r3, #4]
 801e916:	4618      	mov	r0, r3
 801e918:	f7f8 fb41 	bl	8016f9e <lwip_htonl>
 801e91c:	4603      	mov	r3, r0
 801e91e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801e920:	2b00      	cmp	r3, #0
 801e922:	dbe6      	blt.n	801e8f2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801e924:	68fb      	ldr	r3, [r7, #12]
 801e926:	681a      	ldr	r2, [r3, #0]
 801e928:	68bb      	ldr	r3, [r7, #8]
 801e92a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801e92c:	68fb      	ldr	r3, [r7, #12]
 801e92e:	68ba      	ldr	r2, [r7, #8]
 801e930:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801e932:	68bb      	ldr	r3, [r7, #8]
 801e934:	681b      	ldr	r3, [r3, #0]
 801e936:	2b00      	cmp	r3, #0
 801e938:	d103      	bne.n	801e942 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801e93a:	687b      	ldr	r3, [r7, #4]
 801e93c:	2200      	movs	r2, #0
 801e93e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801e942:	687b      	ldr	r3, [r7, #4]
 801e944:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e948:	2bff      	cmp	r3, #255	; 0xff
 801e94a:	d007      	beq.n	801e95c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801e94c:	687b      	ldr	r3, [r7, #4]
 801e94e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e952:	3301      	adds	r3, #1
 801e954:	b2da      	uxtb	r2, r3
 801e956:	687b      	ldr	r3, [r7, #4]
 801e958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801e95c:	687b      	ldr	r3, [r7, #4]
 801e95e:	2200      	movs	r2, #0
 801e960:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801e962:	2300      	movs	r3, #0
}
 801e964:	4618      	mov	r0, r3
 801e966:	3714      	adds	r7, #20
 801e968:	46bd      	mov	sp, r7
 801e96a:	bd90      	pop	{r4, r7, pc}
 801e96c:	0802a2fc 	.word	0x0802a2fc
 801e970:	0802a99c 	.word	0x0802a99c
 801e974:	0802a350 	.word	0x0802a350

0801e978 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801e978:	b580      	push	{r7, lr}
 801e97a:	b082      	sub	sp, #8
 801e97c:	af00      	add	r7, sp, #0
 801e97e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801e980:	687b      	ldr	r3, [r7, #4]
 801e982:	2b00      	cmp	r3, #0
 801e984:	d106      	bne.n	801e994 <tcp_rexmit_fast+0x1c>
 801e986:	4b2e      	ldr	r3, [pc, #184]	; (801ea40 <tcp_rexmit_fast+0xc8>)
 801e988:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801e98c:	492d      	ldr	r1, [pc, #180]	; (801ea44 <tcp_rexmit_fast+0xcc>)
 801e98e:	482e      	ldr	r0, [pc, #184]	; (801ea48 <tcp_rexmit_fast+0xd0>)
 801e990:	f008 f802 	bl	8026998 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801e994:	687b      	ldr	r3, [r7, #4]
 801e996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e998:	2b00      	cmp	r3, #0
 801e99a:	d04d      	beq.n	801ea38 <tcp_rexmit_fast+0xc0>
 801e99c:	687b      	ldr	r3, [r7, #4]
 801e99e:	8b5b      	ldrh	r3, [r3, #26]
 801e9a0:	f003 0304 	and.w	r3, r3, #4
 801e9a4:	2b00      	cmp	r3, #0
 801e9a6:	d147      	bne.n	801ea38 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801e9a8:	6878      	ldr	r0, [r7, #4]
 801e9aa:	f7ff ff79 	bl	801e8a0 <tcp_rexmit>
 801e9ae:	4603      	mov	r3, r0
 801e9b0:	2b00      	cmp	r3, #0
 801e9b2:	d141      	bne.n	801ea38 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801e9b4:	687b      	ldr	r3, [r7, #4]
 801e9b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801e9ba:	687b      	ldr	r3, [r7, #4]
 801e9bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801e9c0:	429a      	cmp	r2, r3
 801e9c2:	d207      	bcs.n	801e9d4 <tcp_rexmit_fast+0x5c>
 801e9c4:	687b      	ldr	r3, [r7, #4]
 801e9c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801e9ca:	0fda      	lsrs	r2, r3, #31
 801e9cc:	4413      	add	r3, r2
 801e9ce:	105b      	asrs	r3, r3, #1
 801e9d0:	b29b      	uxth	r3, r3
 801e9d2:	e006      	b.n	801e9e2 <tcp_rexmit_fast+0x6a>
 801e9d4:	687b      	ldr	r3, [r7, #4]
 801e9d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801e9da:	0fda      	lsrs	r2, r3, #31
 801e9dc:	4413      	add	r3, r2
 801e9de:	105b      	asrs	r3, r3, #1
 801e9e0:	b29b      	uxth	r3, r3
 801e9e2:	687a      	ldr	r2, [r7, #4]
 801e9e4:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801e9e8:	687b      	ldr	r3, [r7, #4]
 801e9ea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801e9ee:	461a      	mov	r2, r3
 801e9f0:	687b      	ldr	r3, [r7, #4]
 801e9f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e9f4:	005b      	lsls	r3, r3, #1
 801e9f6:	429a      	cmp	r2, r3
 801e9f8:	d206      	bcs.n	801ea08 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801e9fa:	687b      	ldr	r3, [r7, #4]
 801e9fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e9fe:	005b      	lsls	r3, r3, #1
 801ea00:	b29a      	uxth	r2, r3
 801ea02:	687b      	ldr	r3, [r7, #4]
 801ea04:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801ea08:	687b      	ldr	r3, [r7, #4]
 801ea0a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801ea0e:	687b      	ldr	r3, [r7, #4]
 801ea10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ea12:	4619      	mov	r1, r3
 801ea14:	0049      	lsls	r1, r1, #1
 801ea16:	440b      	add	r3, r1
 801ea18:	b29b      	uxth	r3, r3
 801ea1a:	4413      	add	r3, r2
 801ea1c:	b29a      	uxth	r2, r3
 801ea1e:	687b      	ldr	r3, [r7, #4]
 801ea20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801ea24:	687b      	ldr	r3, [r7, #4]
 801ea26:	8b5b      	ldrh	r3, [r3, #26]
 801ea28:	f043 0304 	orr.w	r3, r3, #4
 801ea2c:	b29a      	uxth	r2, r3
 801ea2e:	687b      	ldr	r3, [r7, #4]
 801ea30:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801ea32:	687b      	ldr	r3, [r7, #4]
 801ea34:	2200      	movs	r2, #0
 801ea36:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801ea38:	bf00      	nop
 801ea3a:	3708      	adds	r7, #8
 801ea3c:	46bd      	mov	sp, r7
 801ea3e:	bd80      	pop	{r7, pc}
 801ea40:	0802a2fc 	.word	0x0802a2fc
 801ea44:	0802a9b4 	.word	0x0802a9b4
 801ea48:	0802a350 	.word	0x0802a350

0801ea4c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801ea4c:	b580      	push	{r7, lr}
 801ea4e:	b086      	sub	sp, #24
 801ea50:	af00      	add	r7, sp, #0
 801ea52:	60f8      	str	r0, [r7, #12]
 801ea54:	607b      	str	r3, [r7, #4]
 801ea56:	460b      	mov	r3, r1
 801ea58:	817b      	strh	r3, [r7, #10]
 801ea5a:	4613      	mov	r3, r2
 801ea5c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801ea5e:	897a      	ldrh	r2, [r7, #10]
 801ea60:	893b      	ldrh	r3, [r7, #8]
 801ea62:	4413      	add	r3, r2
 801ea64:	b29b      	uxth	r3, r3
 801ea66:	3314      	adds	r3, #20
 801ea68:	b29b      	uxth	r3, r3
 801ea6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ea6e:	4619      	mov	r1, r3
 801ea70:	2022      	movs	r0, #34	; 0x22
 801ea72:	f7f9 fb91 	bl	8018198 <pbuf_alloc>
 801ea76:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801ea78:	697b      	ldr	r3, [r7, #20]
 801ea7a:	2b00      	cmp	r3, #0
 801ea7c:	d04e      	beq.n	801eb1c <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801ea7e:	697b      	ldr	r3, [r7, #20]
 801ea80:	895b      	ldrh	r3, [r3, #10]
 801ea82:	461a      	mov	r2, r3
 801ea84:	897b      	ldrh	r3, [r7, #10]
 801ea86:	3314      	adds	r3, #20
 801ea88:	429a      	cmp	r2, r3
 801ea8a:	da06      	bge.n	801ea9a <tcp_output_alloc_header_common+0x4e>
 801ea8c:	4b26      	ldr	r3, [pc, #152]	; (801eb28 <tcp_output_alloc_header_common+0xdc>)
 801ea8e:	f240 7224 	movw	r2, #1828	; 0x724
 801ea92:	4926      	ldr	r1, [pc, #152]	; (801eb2c <tcp_output_alloc_header_common+0xe0>)
 801ea94:	4826      	ldr	r0, [pc, #152]	; (801eb30 <tcp_output_alloc_header_common+0xe4>)
 801ea96:	f007 ff7f 	bl	8026998 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801ea9a:	697b      	ldr	r3, [r7, #20]
 801ea9c:	685b      	ldr	r3, [r3, #4]
 801ea9e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801eaa0:	8c3b      	ldrh	r3, [r7, #32]
 801eaa2:	4618      	mov	r0, r3
 801eaa4:	f7f8 fa66 	bl	8016f74 <lwip_htons>
 801eaa8:	4603      	mov	r3, r0
 801eaaa:	461a      	mov	r2, r3
 801eaac:	693b      	ldr	r3, [r7, #16]
 801eaae:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801eab0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801eab2:	4618      	mov	r0, r3
 801eab4:	f7f8 fa5e 	bl	8016f74 <lwip_htons>
 801eab8:	4603      	mov	r3, r0
 801eaba:	461a      	mov	r2, r3
 801eabc:	693b      	ldr	r3, [r7, #16]
 801eabe:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801eac0:	693b      	ldr	r3, [r7, #16]
 801eac2:	687a      	ldr	r2, [r7, #4]
 801eac4:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801eac6:	68f8      	ldr	r0, [r7, #12]
 801eac8:	f7f8 fa69 	bl	8016f9e <lwip_htonl>
 801eacc:	4602      	mov	r2, r0
 801eace:	693b      	ldr	r3, [r7, #16]
 801ead0:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801ead2:	897b      	ldrh	r3, [r7, #10]
 801ead4:	089b      	lsrs	r3, r3, #2
 801ead6:	b29b      	uxth	r3, r3
 801ead8:	3305      	adds	r3, #5
 801eada:	b29b      	uxth	r3, r3
 801eadc:	031b      	lsls	r3, r3, #12
 801eade:	b29a      	uxth	r2, r3
 801eae0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801eae4:	b29b      	uxth	r3, r3
 801eae6:	4313      	orrs	r3, r2
 801eae8:	b29b      	uxth	r3, r3
 801eaea:	4618      	mov	r0, r3
 801eaec:	f7f8 fa42 	bl	8016f74 <lwip_htons>
 801eaf0:	4603      	mov	r3, r0
 801eaf2:	461a      	mov	r2, r3
 801eaf4:	693b      	ldr	r3, [r7, #16]
 801eaf6:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801eaf8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801eafa:	4618      	mov	r0, r3
 801eafc:	f7f8 fa3a 	bl	8016f74 <lwip_htons>
 801eb00:	4603      	mov	r3, r0
 801eb02:	461a      	mov	r2, r3
 801eb04:	693b      	ldr	r3, [r7, #16]
 801eb06:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801eb08:	693b      	ldr	r3, [r7, #16]
 801eb0a:	2200      	movs	r2, #0
 801eb0c:	741a      	strb	r2, [r3, #16]
 801eb0e:	2200      	movs	r2, #0
 801eb10:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801eb12:	693b      	ldr	r3, [r7, #16]
 801eb14:	2200      	movs	r2, #0
 801eb16:	749a      	strb	r2, [r3, #18]
 801eb18:	2200      	movs	r2, #0
 801eb1a:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801eb1c:	697b      	ldr	r3, [r7, #20]
}
 801eb1e:	4618      	mov	r0, r3
 801eb20:	3718      	adds	r7, #24
 801eb22:	46bd      	mov	sp, r7
 801eb24:	bd80      	pop	{r7, pc}
 801eb26:	bf00      	nop
 801eb28:	0802a2fc 	.word	0x0802a2fc
 801eb2c:	0802a9d4 	.word	0x0802a9d4
 801eb30:	0802a350 	.word	0x0802a350

0801eb34 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801eb34:	b5b0      	push	{r4, r5, r7, lr}
 801eb36:	b08a      	sub	sp, #40	; 0x28
 801eb38:	af04      	add	r7, sp, #16
 801eb3a:	60f8      	str	r0, [r7, #12]
 801eb3c:	607b      	str	r3, [r7, #4]
 801eb3e:	460b      	mov	r3, r1
 801eb40:	817b      	strh	r3, [r7, #10]
 801eb42:	4613      	mov	r3, r2
 801eb44:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801eb46:	68fb      	ldr	r3, [r7, #12]
 801eb48:	2b00      	cmp	r3, #0
 801eb4a:	d106      	bne.n	801eb5a <tcp_output_alloc_header+0x26>
 801eb4c:	4b15      	ldr	r3, [pc, #84]	; (801eba4 <tcp_output_alloc_header+0x70>)
 801eb4e:	f240 7242 	movw	r2, #1858	; 0x742
 801eb52:	4915      	ldr	r1, [pc, #84]	; (801eba8 <tcp_output_alloc_header+0x74>)
 801eb54:	4815      	ldr	r0, [pc, #84]	; (801ebac <tcp_output_alloc_header+0x78>)
 801eb56:	f007 ff1f 	bl	8026998 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801eb5a:	68fb      	ldr	r3, [r7, #12]
 801eb5c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801eb5e:	68fb      	ldr	r3, [r7, #12]
 801eb60:	8adb      	ldrh	r3, [r3, #22]
 801eb62:	68fa      	ldr	r2, [r7, #12]
 801eb64:	8b12      	ldrh	r2, [r2, #24]
 801eb66:	68f9      	ldr	r1, [r7, #12]
 801eb68:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801eb6a:	893d      	ldrh	r5, [r7, #8]
 801eb6c:	897c      	ldrh	r4, [r7, #10]
 801eb6e:	9103      	str	r1, [sp, #12]
 801eb70:	2110      	movs	r1, #16
 801eb72:	9102      	str	r1, [sp, #8]
 801eb74:	9201      	str	r2, [sp, #4]
 801eb76:	9300      	str	r3, [sp, #0]
 801eb78:	687b      	ldr	r3, [r7, #4]
 801eb7a:	462a      	mov	r2, r5
 801eb7c:	4621      	mov	r1, r4
 801eb7e:	f7ff ff65 	bl	801ea4c <tcp_output_alloc_header_common>
 801eb82:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801eb84:	697b      	ldr	r3, [r7, #20]
 801eb86:	2b00      	cmp	r3, #0
 801eb88:	d006      	beq.n	801eb98 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801eb8a:	68fb      	ldr	r3, [r7, #12]
 801eb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eb8e:	68fa      	ldr	r2, [r7, #12]
 801eb90:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801eb92:	441a      	add	r2, r3
 801eb94:	68fb      	ldr	r3, [r7, #12]
 801eb96:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801eb98:	697b      	ldr	r3, [r7, #20]
}
 801eb9a:	4618      	mov	r0, r3
 801eb9c:	3718      	adds	r7, #24
 801eb9e:	46bd      	mov	sp, r7
 801eba0:	bdb0      	pop	{r4, r5, r7, pc}
 801eba2:	bf00      	nop
 801eba4:	0802a2fc 	.word	0x0802a2fc
 801eba8:	0802aa04 	.word	0x0802aa04
 801ebac:	0802a350 	.word	0x0802a350

0801ebb0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801ebb0:	b580      	push	{r7, lr}
 801ebb2:	b088      	sub	sp, #32
 801ebb4:	af00      	add	r7, sp, #0
 801ebb6:	60f8      	str	r0, [r7, #12]
 801ebb8:	60b9      	str	r1, [r7, #8]
 801ebba:	4611      	mov	r1, r2
 801ebbc:	461a      	mov	r2, r3
 801ebbe:	460b      	mov	r3, r1
 801ebc0:	71fb      	strb	r3, [r7, #7]
 801ebc2:	4613      	mov	r3, r2
 801ebc4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801ebc6:	2300      	movs	r3, #0
 801ebc8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801ebca:	68bb      	ldr	r3, [r7, #8]
 801ebcc:	2b00      	cmp	r3, #0
 801ebce:	d106      	bne.n	801ebde <tcp_output_fill_options+0x2e>
 801ebd0:	4b13      	ldr	r3, [pc, #76]	; (801ec20 <tcp_output_fill_options+0x70>)
 801ebd2:	f240 7256 	movw	r2, #1878	; 0x756
 801ebd6:	4913      	ldr	r1, [pc, #76]	; (801ec24 <tcp_output_fill_options+0x74>)
 801ebd8:	4813      	ldr	r0, [pc, #76]	; (801ec28 <tcp_output_fill_options+0x78>)
 801ebda:	f007 fedd 	bl	8026998 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801ebde:	68bb      	ldr	r3, [r7, #8]
 801ebe0:	685b      	ldr	r3, [r3, #4]
 801ebe2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801ebe4:	69bb      	ldr	r3, [r7, #24]
 801ebe6:	3314      	adds	r3, #20
 801ebe8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801ebea:	69bb      	ldr	r3, [r7, #24]
 801ebec:	f103 0214 	add.w	r2, r3, #20
 801ebf0:	8bfb      	ldrh	r3, [r7, #30]
 801ebf2:	009b      	lsls	r3, r3, #2
 801ebf4:	4619      	mov	r1, r3
 801ebf6:	79fb      	ldrb	r3, [r7, #7]
 801ebf8:	009b      	lsls	r3, r3, #2
 801ebfa:	f003 0304 	and.w	r3, r3, #4
 801ebfe:	440b      	add	r3, r1
 801ec00:	4413      	add	r3, r2
 801ec02:	697a      	ldr	r2, [r7, #20]
 801ec04:	429a      	cmp	r2, r3
 801ec06:	d006      	beq.n	801ec16 <tcp_output_fill_options+0x66>
 801ec08:	4b05      	ldr	r3, [pc, #20]	; (801ec20 <tcp_output_fill_options+0x70>)
 801ec0a:	f240 7275 	movw	r2, #1909	; 0x775
 801ec0e:	4907      	ldr	r1, [pc, #28]	; (801ec2c <tcp_output_fill_options+0x7c>)
 801ec10:	4805      	ldr	r0, [pc, #20]	; (801ec28 <tcp_output_fill_options+0x78>)
 801ec12:	f007 fec1 	bl	8026998 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801ec16:	bf00      	nop
 801ec18:	3720      	adds	r7, #32
 801ec1a:	46bd      	mov	sp, r7
 801ec1c:	bd80      	pop	{r7, pc}
 801ec1e:	bf00      	nop
 801ec20:	0802a2fc 	.word	0x0802a2fc
 801ec24:	0802aa2c 	.word	0x0802aa2c
 801ec28:	0802a350 	.word	0x0802a350
 801ec2c:	0802a924 	.word	0x0802a924

0801ec30 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801ec30:	b580      	push	{r7, lr}
 801ec32:	b08a      	sub	sp, #40	; 0x28
 801ec34:	af04      	add	r7, sp, #16
 801ec36:	60f8      	str	r0, [r7, #12]
 801ec38:	60b9      	str	r1, [r7, #8]
 801ec3a:	607a      	str	r2, [r7, #4]
 801ec3c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801ec3e:	68bb      	ldr	r3, [r7, #8]
 801ec40:	2b00      	cmp	r3, #0
 801ec42:	d106      	bne.n	801ec52 <tcp_output_control_segment+0x22>
 801ec44:	4b1c      	ldr	r3, [pc, #112]	; (801ecb8 <tcp_output_control_segment+0x88>)
 801ec46:	f240 7287 	movw	r2, #1927	; 0x787
 801ec4a:	491c      	ldr	r1, [pc, #112]	; (801ecbc <tcp_output_control_segment+0x8c>)
 801ec4c:	481c      	ldr	r0, [pc, #112]	; (801ecc0 <tcp_output_control_segment+0x90>)
 801ec4e:	f007 fea3 	bl	8026998 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801ec52:	683a      	ldr	r2, [r7, #0]
 801ec54:	6879      	ldr	r1, [r7, #4]
 801ec56:	68f8      	ldr	r0, [r7, #12]
 801ec58:	f7fe fad6 	bl	801d208 <tcp_route>
 801ec5c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801ec5e:	693b      	ldr	r3, [r7, #16]
 801ec60:	2b00      	cmp	r3, #0
 801ec62:	d102      	bne.n	801ec6a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801ec64:	23fc      	movs	r3, #252	; 0xfc
 801ec66:	75fb      	strb	r3, [r7, #23]
 801ec68:	e01c      	b.n	801eca4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801ec6a:	68fb      	ldr	r3, [r7, #12]
 801ec6c:	2b00      	cmp	r3, #0
 801ec6e:	d006      	beq.n	801ec7e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801ec70:	68fb      	ldr	r3, [r7, #12]
 801ec72:	7adb      	ldrb	r3, [r3, #11]
 801ec74:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801ec76:	68fb      	ldr	r3, [r7, #12]
 801ec78:	7a9b      	ldrb	r3, [r3, #10]
 801ec7a:	757b      	strb	r3, [r7, #21]
 801ec7c:	e003      	b.n	801ec86 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801ec7e:	23ff      	movs	r3, #255	; 0xff
 801ec80:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801ec82:	2300      	movs	r3, #0
 801ec84:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801ec86:	7dba      	ldrb	r2, [r7, #22]
 801ec88:	693b      	ldr	r3, [r7, #16]
 801ec8a:	9302      	str	r3, [sp, #8]
 801ec8c:	2306      	movs	r3, #6
 801ec8e:	9301      	str	r3, [sp, #4]
 801ec90:	7d7b      	ldrb	r3, [r7, #21]
 801ec92:	9300      	str	r3, [sp, #0]
 801ec94:	4613      	mov	r3, r2
 801ec96:	683a      	ldr	r2, [r7, #0]
 801ec98:	6879      	ldr	r1, [r7, #4]
 801ec9a:	68b8      	ldr	r0, [r7, #8]
 801ec9c:	f004 fa06 	bl	80230ac <ip4_output_if>
 801eca0:	4603      	mov	r3, r0
 801eca2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801eca4:	68b8      	ldr	r0, [r7, #8]
 801eca6:	f7f9 fd89 	bl	80187bc <pbuf_free>
  return err;
 801ecaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ecae:	4618      	mov	r0, r3
 801ecb0:	3718      	adds	r7, #24
 801ecb2:	46bd      	mov	sp, r7
 801ecb4:	bd80      	pop	{r7, pc}
 801ecb6:	bf00      	nop
 801ecb8:	0802a2fc 	.word	0x0802a2fc
 801ecbc:	0802aa54 	.word	0x0802aa54
 801ecc0:	0802a350 	.word	0x0802a350

0801ecc4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801ecc4:	b590      	push	{r4, r7, lr}
 801ecc6:	b08b      	sub	sp, #44	; 0x2c
 801ecc8:	af04      	add	r7, sp, #16
 801ecca:	60f8      	str	r0, [r7, #12]
 801eccc:	60b9      	str	r1, [r7, #8]
 801ecce:	607a      	str	r2, [r7, #4]
 801ecd0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801ecd2:	683b      	ldr	r3, [r7, #0]
 801ecd4:	2b00      	cmp	r3, #0
 801ecd6:	d106      	bne.n	801ece6 <tcp_rst+0x22>
 801ecd8:	4b1e      	ldr	r3, [pc, #120]	; (801ed54 <tcp_rst+0x90>)
 801ecda:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801ecde:	491e      	ldr	r1, [pc, #120]	; (801ed58 <tcp_rst+0x94>)
 801ece0:	481e      	ldr	r0, [pc, #120]	; (801ed5c <tcp_rst+0x98>)
 801ece2:	f007 fe59 	bl	8026998 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801ece6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ece8:	2b00      	cmp	r3, #0
 801ecea:	d106      	bne.n	801ecfa <tcp_rst+0x36>
 801ecec:	4b19      	ldr	r3, [pc, #100]	; (801ed54 <tcp_rst+0x90>)
 801ecee:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801ecf2:	491b      	ldr	r1, [pc, #108]	; (801ed60 <tcp_rst+0x9c>)
 801ecf4:	4819      	ldr	r0, [pc, #100]	; (801ed5c <tcp_rst+0x98>)
 801ecf6:	f007 fe4f 	bl	8026998 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ecfa:	2300      	movs	r3, #0
 801ecfc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801ecfe:	2308      	movs	r3, #8
 801ed00:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801ed02:	7dfb      	ldrb	r3, [r7, #23]
 801ed04:	b29c      	uxth	r4, r3
 801ed06:	68b8      	ldr	r0, [r7, #8]
 801ed08:	f7f8 f949 	bl	8016f9e <lwip_htonl>
 801ed0c:	4602      	mov	r2, r0
 801ed0e:	8abb      	ldrh	r3, [r7, #20]
 801ed10:	9303      	str	r3, [sp, #12]
 801ed12:	2314      	movs	r3, #20
 801ed14:	9302      	str	r3, [sp, #8]
 801ed16:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801ed18:	9301      	str	r3, [sp, #4]
 801ed1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801ed1c:	9300      	str	r3, [sp, #0]
 801ed1e:	4613      	mov	r3, r2
 801ed20:	2200      	movs	r2, #0
 801ed22:	4621      	mov	r1, r4
 801ed24:	6878      	ldr	r0, [r7, #4]
 801ed26:	f7ff fe91 	bl	801ea4c <tcp_output_alloc_header_common>
 801ed2a:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801ed2c:	693b      	ldr	r3, [r7, #16]
 801ed2e:	2b00      	cmp	r3, #0
 801ed30:	d00c      	beq.n	801ed4c <tcp_rst+0x88>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801ed32:	7dfb      	ldrb	r3, [r7, #23]
 801ed34:	2200      	movs	r2, #0
 801ed36:	6939      	ldr	r1, [r7, #16]
 801ed38:	68f8      	ldr	r0, [r7, #12]
 801ed3a:	f7ff ff39 	bl	801ebb0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801ed3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ed40:	683a      	ldr	r2, [r7, #0]
 801ed42:	6939      	ldr	r1, [r7, #16]
 801ed44:	68f8      	ldr	r0, [r7, #12]
 801ed46:	f7ff ff73 	bl	801ec30 <tcp_output_control_segment>
 801ed4a:	e000      	b.n	801ed4e <tcp_rst+0x8a>
    return;
 801ed4c:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801ed4e:	371c      	adds	r7, #28
 801ed50:	46bd      	mov	sp, r7
 801ed52:	bd90      	pop	{r4, r7, pc}
 801ed54:	0802a2fc 	.word	0x0802a2fc
 801ed58:	0802aa80 	.word	0x0802aa80
 801ed5c:	0802a350 	.word	0x0802a350
 801ed60:	0802aa9c 	.word	0x0802aa9c

0801ed64 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801ed64:	b590      	push	{r4, r7, lr}
 801ed66:	b087      	sub	sp, #28
 801ed68:	af00      	add	r7, sp, #0
 801ed6a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801ed6c:	2300      	movs	r3, #0
 801ed6e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801ed70:	2300      	movs	r3, #0
 801ed72:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801ed74:	687b      	ldr	r3, [r7, #4]
 801ed76:	2b00      	cmp	r3, #0
 801ed78:	d106      	bne.n	801ed88 <tcp_send_empty_ack+0x24>
 801ed7a:	4b28      	ldr	r3, [pc, #160]	; (801ee1c <tcp_send_empty_ack+0xb8>)
 801ed7c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801ed80:	4927      	ldr	r1, [pc, #156]	; (801ee20 <tcp_send_empty_ack+0xbc>)
 801ed82:	4828      	ldr	r0, [pc, #160]	; (801ee24 <tcp_send_empty_ack+0xc0>)
 801ed84:	f007 fe08 	bl	8026998 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801ed88:	7dfb      	ldrb	r3, [r7, #23]
 801ed8a:	009b      	lsls	r3, r3, #2
 801ed8c:	b2db      	uxtb	r3, r3
 801ed8e:	f003 0304 	and.w	r3, r3, #4
 801ed92:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801ed94:	7d7b      	ldrb	r3, [r7, #21]
 801ed96:	b29c      	uxth	r4, r3
 801ed98:	687b      	ldr	r3, [r7, #4]
 801ed9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ed9c:	4618      	mov	r0, r3
 801ed9e:	f7f8 f8fe 	bl	8016f9e <lwip_htonl>
 801eda2:	4603      	mov	r3, r0
 801eda4:	2200      	movs	r2, #0
 801eda6:	4621      	mov	r1, r4
 801eda8:	6878      	ldr	r0, [r7, #4]
 801edaa:	f7ff fec3 	bl	801eb34 <tcp_output_alloc_header>
 801edae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801edb0:	693b      	ldr	r3, [r7, #16]
 801edb2:	2b00      	cmp	r3, #0
 801edb4:	d109      	bne.n	801edca <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801edb6:	687b      	ldr	r3, [r7, #4]
 801edb8:	8b5b      	ldrh	r3, [r3, #26]
 801edba:	f043 0303 	orr.w	r3, r3, #3
 801edbe:	b29a      	uxth	r2, r3
 801edc0:	687b      	ldr	r3, [r7, #4]
 801edc2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801edc4:	f06f 0301 	mvn.w	r3, #1
 801edc8:	e023      	b.n	801ee12 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801edca:	7dbb      	ldrb	r3, [r7, #22]
 801edcc:	7dfa      	ldrb	r2, [r7, #23]
 801edce:	6939      	ldr	r1, [r7, #16]
 801edd0:	6878      	ldr	r0, [r7, #4]
 801edd2:	f7ff feed 	bl	801ebb0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801edd6:	687a      	ldr	r2, [r7, #4]
 801edd8:	687b      	ldr	r3, [r7, #4]
 801edda:	3304      	adds	r3, #4
 801eddc:	6939      	ldr	r1, [r7, #16]
 801edde:	6878      	ldr	r0, [r7, #4]
 801ede0:	f7ff ff26 	bl	801ec30 <tcp_output_control_segment>
 801ede4:	4603      	mov	r3, r0
 801ede6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801ede8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801edec:	2b00      	cmp	r3, #0
 801edee:	d007      	beq.n	801ee00 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801edf0:	687b      	ldr	r3, [r7, #4]
 801edf2:	8b5b      	ldrh	r3, [r3, #26]
 801edf4:	f043 0303 	orr.w	r3, r3, #3
 801edf8:	b29a      	uxth	r2, r3
 801edfa:	687b      	ldr	r3, [r7, #4]
 801edfc:	835a      	strh	r2, [r3, #26]
 801edfe:	e006      	b.n	801ee0e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ee00:	687b      	ldr	r3, [r7, #4]
 801ee02:	8b5b      	ldrh	r3, [r3, #26]
 801ee04:	f023 0303 	bic.w	r3, r3, #3
 801ee08:	b29a      	uxth	r2, r3
 801ee0a:	687b      	ldr	r3, [r7, #4]
 801ee0c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801ee0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ee12:	4618      	mov	r0, r3
 801ee14:	371c      	adds	r7, #28
 801ee16:	46bd      	mov	sp, r7
 801ee18:	bd90      	pop	{r4, r7, pc}
 801ee1a:	bf00      	nop
 801ee1c:	0802a2fc 	.word	0x0802a2fc
 801ee20:	0802aab8 	.word	0x0802aab8
 801ee24:	0802a350 	.word	0x0802a350

0801ee28 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801ee28:	b590      	push	{r4, r7, lr}
 801ee2a:	b087      	sub	sp, #28
 801ee2c:	af00      	add	r7, sp, #0
 801ee2e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ee30:	2300      	movs	r3, #0
 801ee32:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801ee34:	687b      	ldr	r3, [r7, #4]
 801ee36:	2b00      	cmp	r3, #0
 801ee38:	d106      	bne.n	801ee48 <tcp_keepalive+0x20>
 801ee3a:	4b18      	ldr	r3, [pc, #96]	; (801ee9c <tcp_keepalive+0x74>)
 801ee3c:	f640 0224 	movw	r2, #2084	; 0x824
 801ee40:	4917      	ldr	r1, [pc, #92]	; (801eea0 <tcp_keepalive+0x78>)
 801ee42:	4818      	ldr	r0, [pc, #96]	; (801eea4 <tcp_keepalive+0x7c>)
 801ee44:	f007 fda8 	bl	8026998 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801ee48:	7dfb      	ldrb	r3, [r7, #23]
 801ee4a:	b29c      	uxth	r4, r3
 801ee4c:	687b      	ldr	r3, [r7, #4]
 801ee4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ee50:	3b01      	subs	r3, #1
 801ee52:	4618      	mov	r0, r3
 801ee54:	f7f8 f8a3 	bl	8016f9e <lwip_htonl>
 801ee58:	4603      	mov	r3, r0
 801ee5a:	2200      	movs	r2, #0
 801ee5c:	4621      	mov	r1, r4
 801ee5e:	6878      	ldr	r0, [r7, #4]
 801ee60:	f7ff fe68 	bl	801eb34 <tcp_output_alloc_header>
 801ee64:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ee66:	693b      	ldr	r3, [r7, #16]
 801ee68:	2b00      	cmp	r3, #0
 801ee6a:	d102      	bne.n	801ee72 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801ee6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ee70:	e010      	b.n	801ee94 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801ee72:	7dfb      	ldrb	r3, [r7, #23]
 801ee74:	2200      	movs	r2, #0
 801ee76:	6939      	ldr	r1, [r7, #16]
 801ee78:	6878      	ldr	r0, [r7, #4]
 801ee7a:	f7ff fe99 	bl	801ebb0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ee7e:	687a      	ldr	r2, [r7, #4]
 801ee80:	687b      	ldr	r3, [r7, #4]
 801ee82:	3304      	adds	r3, #4
 801ee84:	6939      	ldr	r1, [r7, #16]
 801ee86:	6878      	ldr	r0, [r7, #4]
 801ee88:	f7ff fed2 	bl	801ec30 <tcp_output_control_segment>
 801ee8c:	4603      	mov	r3, r0
 801ee8e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801ee90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ee94:	4618      	mov	r0, r3
 801ee96:	371c      	adds	r7, #28
 801ee98:	46bd      	mov	sp, r7
 801ee9a:	bd90      	pop	{r4, r7, pc}
 801ee9c:	0802a2fc 	.word	0x0802a2fc
 801eea0:	0802aad8 	.word	0x0802aad8
 801eea4:	0802a350 	.word	0x0802a350

0801eea8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801eea8:	b590      	push	{r4, r7, lr}
 801eeaa:	b08b      	sub	sp, #44	; 0x2c
 801eeac:	af00      	add	r7, sp, #0
 801eeae:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801eeb0:	2300      	movs	r3, #0
 801eeb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801eeb6:	687b      	ldr	r3, [r7, #4]
 801eeb8:	2b00      	cmp	r3, #0
 801eeba:	d106      	bne.n	801eeca <tcp_zero_window_probe+0x22>
 801eebc:	4b4c      	ldr	r3, [pc, #304]	; (801eff0 <tcp_zero_window_probe+0x148>)
 801eebe:	f640 024f 	movw	r2, #2127	; 0x84f
 801eec2:	494c      	ldr	r1, [pc, #304]	; (801eff4 <tcp_zero_window_probe+0x14c>)
 801eec4:	484c      	ldr	r0, [pc, #304]	; (801eff8 <tcp_zero_window_probe+0x150>)
 801eec6:	f007 fd67 	bl	8026998 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801eeca:	687b      	ldr	r3, [r7, #4]
 801eecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801eece:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801eed0:	6a3b      	ldr	r3, [r7, #32]
 801eed2:	2b00      	cmp	r3, #0
 801eed4:	d101      	bne.n	801eeda <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801eed6:	2300      	movs	r3, #0
 801eed8:	e086      	b.n	801efe8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801eeda:	687b      	ldr	r3, [r7, #4]
 801eedc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801eee0:	2bff      	cmp	r3, #255	; 0xff
 801eee2:	d007      	beq.n	801eef4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801eee4:	687b      	ldr	r3, [r7, #4]
 801eee6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801eeea:	3301      	adds	r3, #1
 801eeec:	b2da      	uxtb	r2, r3
 801eeee:	687b      	ldr	r3, [r7, #4]
 801eef0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801eef4:	6a3b      	ldr	r3, [r7, #32]
 801eef6:	68db      	ldr	r3, [r3, #12]
 801eef8:	899b      	ldrh	r3, [r3, #12]
 801eefa:	b29b      	uxth	r3, r3
 801eefc:	4618      	mov	r0, r3
 801eefe:	f7f8 f839 	bl	8016f74 <lwip_htons>
 801ef02:	4603      	mov	r3, r0
 801ef04:	b2db      	uxtb	r3, r3
 801ef06:	f003 0301 	and.w	r3, r3, #1
 801ef0a:	2b00      	cmp	r3, #0
 801ef0c:	d005      	beq.n	801ef1a <tcp_zero_window_probe+0x72>
 801ef0e:	6a3b      	ldr	r3, [r7, #32]
 801ef10:	891b      	ldrh	r3, [r3, #8]
 801ef12:	2b00      	cmp	r3, #0
 801ef14:	d101      	bne.n	801ef1a <tcp_zero_window_probe+0x72>
 801ef16:	2301      	movs	r3, #1
 801ef18:	e000      	b.n	801ef1c <tcp_zero_window_probe+0x74>
 801ef1a:	2300      	movs	r3, #0
 801ef1c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801ef1e:	7ffb      	ldrb	r3, [r7, #31]
 801ef20:	2b00      	cmp	r3, #0
 801ef22:	bf0c      	ite	eq
 801ef24:	2301      	moveq	r3, #1
 801ef26:	2300      	movne	r3, #0
 801ef28:	b2db      	uxtb	r3, r3
 801ef2a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801ef2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ef30:	b299      	uxth	r1, r3
 801ef32:	6a3b      	ldr	r3, [r7, #32]
 801ef34:	68db      	ldr	r3, [r3, #12]
 801ef36:	685b      	ldr	r3, [r3, #4]
 801ef38:	8bba      	ldrh	r2, [r7, #28]
 801ef3a:	6878      	ldr	r0, [r7, #4]
 801ef3c:	f7ff fdfa 	bl	801eb34 <tcp_output_alloc_header>
 801ef40:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801ef42:	69bb      	ldr	r3, [r7, #24]
 801ef44:	2b00      	cmp	r3, #0
 801ef46:	d102      	bne.n	801ef4e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801ef48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ef4c:	e04c      	b.n	801efe8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801ef4e:	69bb      	ldr	r3, [r7, #24]
 801ef50:	685b      	ldr	r3, [r3, #4]
 801ef52:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801ef54:	7ffb      	ldrb	r3, [r7, #31]
 801ef56:	2b00      	cmp	r3, #0
 801ef58:	d011      	beq.n	801ef7e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801ef5a:	697b      	ldr	r3, [r7, #20]
 801ef5c:	899b      	ldrh	r3, [r3, #12]
 801ef5e:	b29b      	uxth	r3, r3
 801ef60:	b21b      	sxth	r3, r3
 801ef62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801ef66:	b21c      	sxth	r4, r3
 801ef68:	2011      	movs	r0, #17
 801ef6a:	f7f8 f803 	bl	8016f74 <lwip_htons>
 801ef6e:	4603      	mov	r3, r0
 801ef70:	b21b      	sxth	r3, r3
 801ef72:	4323      	orrs	r3, r4
 801ef74:	b21b      	sxth	r3, r3
 801ef76:	b29a      	uxth	r2, r3
 801ef78:	697b      	ldr	r3, [r7, #20]
 801ef7a:	819a      	strh	r2, [r3, #12]
 801ef7c:	e010      	b.n	801efa0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801ef7e:	69bb      	ldr	r3, [r7, #24]
 801ef80:	685b      	ldr	r3, [r3, #4]
 801ef82:	3314      	adds	r3, #20
 801ef84:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801ef86:	6a3b      	ldr	r3, [r7, #32]
 801ef88:	6858      	ldr	r0, [r3, #4]
 801ef8a:	6a3b      	ldr	r3, [r7, #32]
 801ef8c:	685b      	ldr	r3, [r3, #4]
 801ef8e:	891a      	ldrh	r2, [r3, #8]
 801ef90:	6a3b      	ldr	r3, [r7, #32]
 801ef92:	891b      	ldrh	r3, [r3, #8]
 801ef94:	1ad3      	subs	r3, r2, r3
 801ef96:	b29b      	uxth	r3, r3
 801ef98:	2201      	movs	r2, #1
 801ef9a:	6939      	ldr	r1, [r7, #16]
 801ef9c:	f7f9 fe14 	bl	8018bc8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801efa0:	6a3b      	ldr	r3, [r7, #32]
 801efa2:	68db      	ldr	r3, [r3, #12]
 801efa4:	685b      	ldr	r3, [r3, #4]
 801efa6:	4618      	mov	r0, r3
 801efa8:	f7f7 fff9 	bl	8016f9e <lwip_htonl>
 801efac:	4603      	mov	r3, r0
 801efae:	3301      	adds	r3, #1
 801efb0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801efb2:	687b      	ldr	r3, [r7, #4]
 801efb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801efb6:	68fb      	ldr	r3, [r7, #12]
 801efb8:	1ad3      	subs	r3, r2, r3
 801efba:	2b00      	cmp	r3, #0
 801efbc:	da02      	bge.n	801efc4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801efbe:	687b      	ldr	r3, [r7, #4]
 801efc0:	68fa      	ldr	r2, [r7, #12]
 801efc2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801efc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801efc8:	2200      	movs	r2, #0
 801efca:	69b9      	ldr	r1, [r7, #24]
 801efcc:	6878      	ldr	r0, [r7, #4]
 801efce:	f7ff fdef 	bl	801ebb0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801efd2:	687a      	ldr	r2, [r7, #4]
 801efd4:	687b      	ldr	r3, [r7, #4]
 801efd6:	3304      	adds	r3, #4
 801efd8:	69b9      	ldr	r1, [r7, #24]
 801efda:	6878      	ldr	r0, [r7, #4]
 801efdc:	f7ff fe28 	bl	801ec30 <tcp_output_control_segment>
 801efe0:	4603      	mov	r3, r0
 801efe2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801efe4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801efe8:	4618      	mov	r0, r3
 801efea:	372c      	adds	r7, #44	; 0x2c
 801efec:	46bd      	mov	sp, r7
 801efee:	bd90      	pop	{r4, r7, pc}
 801eff0:	0802a2fc 	.word	0x0802a2fc
 801eff4:	0802aaf4 	.word	0x0802aaf4
 801eff8:	0802a350 	.word	0x0802a350

0801effc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801effc:	b580      	push	{r7, lr}
 801effe:	b082      	sub	sp, #8
 801f000:	af00      	add	r7, sp, #0
 801f002:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801f004:	f7f9 fece 	bl	8018da4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801f008:	4b0a      	ldr	r3, [pc, #40]	; (801f034 <tcpip_tcp_timer+0x38>)
 801f00a:	681b      	ldr	r3, [r3, #0]
 801f00c:	2b00      	cmp	r3, #0
 801f00e:	d103      	bne.n	801f018 <tcpip_tcp_timer+0x1c>
 801f010:	4b09      	ldr	r3, [pc, #36]	; (801f038 <tcpip_tcp_timer+0x3c>)
 801f012:	681b      	ldr	r3, [r3, #0]
 801f014:	2b00      	cmp	r3, #0
 801f016:	d005      	beq.n	801f024 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801f018:	2200      	movs	r2, #0
 801f01a:	4908      	ldr	r1, [pc, #32]	; (801f03c <tcpip_tcp_timer+0x40>)
 801f01c:	20fa      	movs	r0, #250	; 0xfa
 801f01e:	f000 f8f1 	bl	801f204 <sys_timeout>
 801f022:	e002      	b.n	801f02a <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801f024:	4b06      	ldr	r3, [pc, #24]	; (801f040 <tcpip_tcp_timer+0x44>)
 801f026:	2200      	movs	r2, #0
 801f028:	601a      	str	r2, [r3, #0]
  }
}
 801f02a:	bf00      	nop
 801f02c:	3708      	adds	r7, #8
 801f02e:	46bd      	mov	sp, r7
 801f030:	bd80      	pop	{r7, pc}
 801f032:	bf00      	nop
 801f034:	20019ff4 	.word	0x20019ff4
 801f038:	2001a004 	.word	0x2001a004
 801f03c:	0801effd 	.word	0x0801effd
 801f040:	20013200 	.word	0x20013200

0801f044 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801f044:	b580      	push	{r7, lr}
 801f046:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801f048:	4b0a      	ldr	r3, [pc, #40]	; (801f074 <tcp_timer_needed+0x30>)
 801f04a:	681b      	ldr	r3, [r3, #0]
 801f04c:	2b00      	cmp	r3, #0
 801f04e:	d10f      	bne.n	801f070 <tcp_timer_needed+0x2c>
 801f050:	4b09      	ldr	r3, [pc, #36]	; (801f078 <tcp_timer_needed+0x34>)
 801f052:	681b      	ldr	r3, [r3, #0]
 801f054:	2b00      	cmp	r3, #0
 801f056:	d103      	bne.n	801f060 <tcp_timer_needed+0x1c>
 801f058:	4b08      	ldr	r3, [pc, #32]	; (801f07c <tcp_timer_needed+0x38>)
 801f05a:	681b      	ldr	r3, [r3, #0]
 801f05c:	2b00      	cmp	r3, #0
 801f05e:	d007      	beq.n	801f070 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801f060:	4b04      	ldr	r3, [pc, #16]	; (801f074 <tcp_timer_needed+0x30>)
 801f062:	2201      	movs	r2, #1
 801f064:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801f066:	2200      	movs	r2, #0
 801f068:	4905      	ldr	r1, [pc, #20]	; (801f080 <tcp_timer_needed+0x3c>)
 801f06a:	20fa      	movs	r0, #250	; 0xfa
 801f06c:	f000 f8ca 	bl	801f204 <sys_timeout>
  }
}
 801f070:	bf00      	nop
 801f072:	bd80      	pop	{r7, pc}
 801f074:	20013200 	.word	0x20013200
 801f078:	20019ff4 	.word	0x20019ff4
 801f07c:	2001a004 	.word	0x2001a004
 801f080:	0801effd 	.word	0x0801effd

0801f084 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801f084:	b580      	push	{r7, lr}
 801f086:	b086      	sub	sp, #24
 801f088:	af00      	add	r7, sp, #0
 801f08a:	60f8      	str	r0, [r7, #12]
 801f08c:	60b9      	str	r1, [r7, #8]
 801f08e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f090:	200a      	movs	r0, #10
 801f092:	f7f8 fc93 	bl	80179bc <memp_malloc>
 801f096:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801f098:	693b      	ldr	r3, [r7, #16]
 801f09a:	2b00      	cmp	r3, #0
 801f09c:	d109      	bne.n	801f0b2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801f09e:	693b      	ldr	r3, [r7, #16]
 801f0a0:	2b00      	cmp	r3, #0
 801f0a2:	d151      	bne.n	801f148 <sys_timeout_abs+0xc4>
 801f0a4:	4b2a      	ldr	r3, [pc, #168]	; (801f150 <sys_timeout_abs+0xcc>)
 801f0a6:	22be      	movs	r2, #190	; 0xbe
 801f0a8:	492a      	ldr	r1, [pc, #168]	; (801f154 <sys_timeout_abs+0xd0>)
 801f0aa:	482b      	ldr	r0, [pc, #172]	; (801f158 <sys_timeout_abs+0xd4>)
 801f0ac:	f007 fc74 	bl	8026998 <iprintf>
    return;
 801f0b0:	e04a      	b.n	801f148 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801f0b2:	693b      	ldr	r3, [r7, #16]
 801f0b4:	2200      	movs	r2, #0
 801f0b6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801f0b8:	693b      	ldr	r3, [r7, #16]
 801f0ba:	68ba      	ldr	r2, [r7, #8]
 801f0bc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801f0be:	693b      	ldr	r3, [r7, #16]
 801f0c0:	687a      	ldr	r2, [r7, #4]
 801f0c2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801f0c4:	693b      	ldr	r3, [r7, #16]
 801f0c6:	68fa      	ldr	r2, [r7, #12]
 801f0c8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801f0ca:	4b24      	ldr	r3, [pc, #144]	; (801f15c <sys_timeout_abs+0xd8>)
 801f0cc:	681b      	ldr	r3, [r3, #0]
 801f0ce:	2b00      	cmp	r3, #0
 801f0d0:	d103      	bne.n	801f0da <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801f0d2:	4a22      	ldr	r2, [pc, #136]	; (801f15c <sys_timeout_abs+0xd8>)
 801f0d4:	693b      	ldr	r3, [r7, #16]
 801f0d6:	6013      	str	r3, [r2, #0]
    return;
 801f0d8:	e037      	b.n	801f14a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801f0da:	693b      	ldr	r3, [r7, #16]
 801f0dc:	685a      	ldr	r2, [r3, #4]
 801f0de:	4b1f      	ldr	r3, [pc, #124]	; (801f15c <sys_timeout_abs+0xd8>)
 801f0e0:	681b      	ldr	r3, [r3, #0]
 801f0e2:	685b      	ldr	r3, [r3, #4]
 801f0e4:	1ad3      	subs	r3, r2, r3
 801f0e6:	0fdb      	lsrs	r3, r3, #31
 801f0e8:	f003 0301 	and.w	r3, r3, #1
 801f0ec:	b2db      	uxtb	r3, r3
 801f0ee:	2b00      	cmp	r3, #0
 801f0f0:	d007      	beq.n	801f102 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801f0f2:	4b1a      	ldr	r3, [pc, #104]	; (801f15c <sys_timeout_abs+0xd8>)
 801f0f4:	681a      	ldr	r2, [r3, #0]
 801f0f6:	693b      	ldr	r3, [r7, #16]
 801f0f8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801f0fa:	4a18      	ldr	r2, [pc, #96]	; (801f15c <sys_timeout_abs+0xd8>)
 801f0fc:	693b      	ldr	r3, [r7, #16]
 801f0fe:	6013      	str	r3, [r2, #0]
 801f100:	e023      	b.n	801f14a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801f102:	4b16      	ldr	r3, [pc, #88]	; (801f15c <sys_timeout_abs+0xd8>)
 801f104:	681b      	ldr	r3, [r3, #0]
 801f106:	617b      	str	r3, [r7, #20]
 801f108:	e01a      	b.n	801f140 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801f10a:	697b      	ldr	r3, [r7, #20]
 801f10c:	681b      	ldr	r3, [r3, #0]
 801f10e:	2b00      	cmp	r3, #0
 801f110:	d00b      	beq.n	801f12a <sys_timeout_abs+0xa6>
 801f112:	693b      	ldr	r3, [r7, #16]
 801f114:	685a      	ldr	r2, [r3, #4]
 801f116:	697b      	ldr	r3, [r7, #20]
 801f118:	681b      	ldr	r3, [r3, #0]
 801f11a:	685b      	ldr	r3, [r3, #4]
 801f11c:	1ad3      	subs	r3, r2, r3
 801f11e:	0fdb      	lsrs	r3, r3, #31
 801f120:	f003 0301 	and.w	r3, r3, #1
 801f124:	b2db      	uxtb	r3, r3
 801f126:	2b00      	cmp	r3, #0
 801f128:	d007      	beq.n	801f13a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801f12a:	697b      	ldr	r3, [r7, #20]
 801f12c:	681a      	ldr	r2, [r3, #0]
 801f12e:	693b      	ldr	r3, [r7, #16]
 801f130:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801f132:	697b      	ldr	r3, [r7, #20]
 801f134:	693a      	ldr	r2, [r7, #16]
 801f136:	601a      	str	r2, [r3, #0]
        break;
 801f138:	e007      	b.n	801f14a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801f13a:	697b      	ldr	r3, [r7, #20]
 801f13c:	681b      	ldr	r3, [r3, #0]
 801f13e:	617b      	str	r3, [r7, #20]
 801f140:	697b      	ldr	r3, [r7, #20]
 801f142:	2b00      	cmp	r3, #0
 801f144:	d1e1      	bne.n	801f10a <sys_timeout_abs+0x86>
 801f146:	e000      	b.n	801f14a <sys_timeout_abs+0xc6>
    return;
 801f148:	bf00      	nop
      }
    }
  }
}
 801f14a:	3718      	adds	r7, #24
 801f14c:	46bd      	mov	sp, r7
 801f14e:	bd80      	pop	{r7, pc}
 801f150:	0802ab18 	.word	0x0802ab18
 801f154:	0802ab4c 	.word	0x0802ab4c
 801f158:	0802ab8c 	.word	0x0802ab8c
 801f15c:	200131f8 	.word	0x200131f8

0801f160 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801f160:	b580      	push	{r7, lr}
 801f162:	b086      	sub	sp, #24
 801f164:	af00      	add	r7, sp, #0
 801f166:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801f168:	687b      	ldr	r3, [r7, #4]
 801f16a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801f16c:	697b      	ldr	r3, [r7, #20]
 801f16e:	685b      	ldr	r3, [r3, #4]
 801f170:	4798      	blx	r3

  now = sys_now();
 801f172:	f7f0 f8c5 	bl	800f300 <sys_now>
 801f176:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801f178:	697b      	ldr	r3, [r7, #20]
 801f17a:	681a      	ldr	r2, [r3, #0]
 801f17c:	4b0f      	ldr	r3, [pc, #60]	; (801f1bc <lwip_cyclic_timer+0x5c>)
 801f17e:	681b      	ldr	r3, [r3, #0]
 801f180:	4413      	add	r3, r2
 801f182:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801f184:	68fa      	ldr	r2, [r7, #12]
 801f186:	693b      	ldr	r3, [r7, #16]
 801f188:	1ad3      	subs	r3, r2, r3
 801f18a:	0fdb      	lsrs	r3, r3, #31
 801f18c:	f003 0301 	and.w	r3, r3, #1
 801f190:	b2db      	uxtb	r3, r3
 801f192:	2b00      	cmp	r3, #0
 801f194:	d009      	beq.n	801f1aa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f196:	697b      	ldr	r3, [r7, #20]
 801f198:	681a      	ldr	r2, [r3, #0]
 801f19a:	693b      	ldr	r3, [r7, #16]
 801f19c:	4413      	add	r3, r2
 801f19e:	687a      	ldr	r2, [r7, #4]
 801f1a0:	4907      	ldr	r1, [pc, #28]	; (801f1c0 <lwip_cyclic_timer+0x60>)
 801f1a2:	4618      	mov	r0, r3
 801f1a4:	f7ff ff6e 	bl	801f084 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801f1a8:	e004      	b.n	801f1b4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801f1aa:	687a      	ldr	r2, [r7, #4]
 801f1ac:	4904      	ldr	r1, [pc, #16]	; (801f1c0 <lwip_cyclic_timer+0x60>)
 801f1ae:	68f8      	ldr	r0, [r7, #12]
 801f1b0:	f7ff ff68 	bl	801f084 <sys_timeout_abs>
}
 801f1b4:	bf00      	nop
 801f1b6:	3718      	adds	r7, #24
 801f1b8:	46bd      	mov	sp, r7
 801f1ba:	bd80      	pop	{r7, pc}
 801f1bc:	200131fc 	.word	0x200131fc
 801f1c0:	0801f161 	.word	0x0801f161

0801f1c4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801f1c4:	b580      	push	{r7, lr}
 801f1c6:	b082      	sub	sp, #8
 801f1c8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f1ca:	2301      	movs	r3, #1
 801f1cc:	607b      	str	r3, [r7, #4]
 801f1ce:	e00e      	b.n	801f1ee <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801f1d0:	4a0a      	ldr	r2, [pc, #40]	; (801f1fc <sys_timeouts_init+0x38>)
 801f1d2:	687b      	ldr	r3, [r7, #4]
 801f1d4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801f1d8:	687b      	ldr	r3, [r7, #4]
 801f1da:	00db      	lsls	r3, r3, #3
 801f1dc:	4a07      	ldr	r2, [pc, #28]	; (801f1fc <sys_timeouts_init+0x38>)
 801f1de:	4413      	add	r3, r2
 801f1e0:	461a      	mov	r2, r3
 801f1e2:	4907      	ldr	r1, [pc, #28]	; (801f200 <sys_timeouts_init+0x3c>)
 801f1e4:	f000 f80e 	bl	801f204 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f1e8:	687b      	ldr	r3, [r7, #4]
 801f1ea:	3301      	adds	r3, #1
 801f1ec:	607b      	str	r3, [r7, #4]
 801f1ee:	687b      	ldr	r3, [r7, #4]
 801f1f0:	2b04      	cmp	r3, #4
 801f1f2:	d9ed      	bls.n	801f1d0 <sys_timeouts_init+0xc>
  }
}
 801f1f4:	bf00      	nop
 801f1f6:	3708      	adds	r7, #8
 801f1f8:	46bd      	mov	sp, r7
 801f1fa:	bd80      	pop	{r7, pc}
 801f1fc:	0802bdb0 	.word	0x0802bdb0
 801f200:	0801f161 	.word	0x0801f161

0801f204 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801f204:	b580      	push	{r7, lr}
 801f206:	b086      	sub	sp, #24
 801f208:	af00      	add	r7, sp, #0
 801f20a:	60f8      	str	r0, [r7, #12]
 801f20c:	60b9      	str	r1, [r7, #8]
 801f20e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f210:	68fb      	ldr	r3, [r7, #12]
 801f212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f216:	d306      	bcc.n	801f226 <sys_timeout+0x22>
 801f218:	4b0a      	ldr	r3, [pc, #40]	; (801f244 <sys_timeout+0x40>)
 801f21a:	f240 1229 	movw	r2, #297	; 0x129
 801f21e:	490a      	ldr	r1, [pc, #40]	; (801f248 <sys_timeout+0x44>)
 801f220:	480a      	ldr	r0, [pc, #40]	; (801f24c <sys_timeout+0x48>)
 801f222:	f007 fbb9 	bl	8026998 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f226:	f7f0 f86b 	bl	800f300 <sys_now>
 801f22a:	4602      	mov	r2, r0
 801f22c:	68fb      	ldr	r3, [r7, #12]
 801f22e:	4413      	add	r3, r2
 801f230:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f232:	687a      	ldr	r2, [r7, #4]
 801f234:	68b9      	ldr	r1, [r7, #8]
 801f236:	6978      	ldr	r0, [r7, #20]
 801f238:	f7ff ff24 	bl	801f084 <sys_timeout_abs>
#endif
}
 801f23c:	bf00      	nop
 801f23e:	3718      	adds	r7, #24
 801f240:	46bd      	mov	sp, r7
 801f242:	bd80      	pop	{r7, pc}
 801f244:	0802ab18 	.word	0x0802ab18
 801f248:	0802abb4 	.word	0x0802abb4
 801f24c:	0802ab8c 	.word	0x0802ab8c

0801f250 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801f250:	b580      	push	{r7, lr}
 801f252:	b084      	sub	sp, #16
 801f254:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801f256:	f7f0 f853 	bl	800f300 <sys_now>
 801f25a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801f25c:	4b17      	ldr	r3, [pc, #92]	; (801f2bc <sys_check_timeouts+0x6c>)
 801f25e:	681b      	ldr	r3, [r3, #0]
 801f260:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801f262:	68bb      	ldr	r3, [r7, #8]
 801f264:	2b00      	cmp	r3, #0
 801f266:	d022      	beq.n	801f2ae <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801f268:	68bb      	ldr	r3, [r7, #8]
 801f26a:	685b      	ldr	r3, [r3, #4]
 801f26c:	68fa      	ldr	r2, [r7, #12]
 801f26e:	1ad3      	subs	r3, r2, r3
 801f270:	0fdb      	lsrs	r3, r3, #31
 801f272:	f003 0301 	and.w	r3, r3, #1
 801f276:	b2db      	uxtb	r3, r3
 801f278:	2b00      	cmp	r3, #0
 801f27a:	d11a      	bne.n	801f2b2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801f27c:	68bb      	ldr	r3, [r7, #8]
 801f27e:	681b      	ldr	r3, [r3, #0]
 801f280:	4a0e      	ldr	r2, [pc, #56]	; (801f2bc <sys_check_timeouts+0x6c>)
 801f282:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801f284:	68bb      	ldr	r3, [r7, #8]
 801f286:	689b      	ldr	r3, [r3, #8]
 801f288:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801f28a:	68bb      	ldr	r3, [r7, #8]
 801f28c:	68db      	ldr	r3, [r3, #12]
 801f28e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801f290:	68bb      	ldr	r3, [r7, #8]
 801f292:	685b      	ldr	r3, [r3, #4]
 801f294:	4a0a      	ldr	r2, [pc, #40]	; (801f2c0 <sys_check_timeouts+0x70>)
 801f296:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801f298:	68b9      	ldr	r1, [r7, #8]
 801f29a:	200a      	movs	r0, #10
 801f29c:	f7f8 fbe0 	bl	8017a60 <memp_free>
    if (handler != NULL) {
 801f2a0:	687b      	ldr	r3, [r7, #4]
 801f2a2:	2b00      	cmp	r3, #0
 801f2a4:	d0da      	beq.n	801f25c <sys_check_timeouts+0xc>
      handler(arg);
 801f2a6:	687b      	ldr	r3, [r7, #4]
 801f2a8:	6838      	ldr	r0, [r7, #0]
 801f2aa:	4798      	blx	r3
  do {
 801f2ac:	e7d6      	b.n	801f25c <sys_check_timeouts+0xc>
      return;
 801f2ae:	bf00      	nop
 801f2b0:	e000      	b.n	801f2b4 <sys_check_timeouts+0x64>
      return;
 801f2b2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801f2b4:	3710      	adds	r7, #16
 801f2b6:	46bd      	mov	sp, r7
 801f2b8:	bd80      	pop	{r7, pc}
 801f2ba:	bf00      	nop
 801f2bc:	200131f8 	.word	0x200131f8
 801f2c0:	200131fc 	.word	0x200131fc

0801f2c4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801f2c4:	b580      	push	{r7, lr}
 801f2c6:	b082      	sub	sp, #8
 801f2c8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801f2ca:	4b16      	ldr	r3, [pc, #88]	; (801f324 <sys_timeouts_sleeptime+0x60>)
 801f2cc:	681b      	ldr	r3, [r3, #0]
 801f2ce:	2b00      	cmp	r3, #0
 801f2d0:	d102      	bne.n	801f2d8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801f2d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f2d6:	e020      	b.n	801f31a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801f2d8:	f7f0 f812 	bl	800f300 <sys_now>
 801f2dc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801f2de:	4b11      	ldr	r3, [pc, #68]	; (801f324 <sys_timeouts_sleeptime+0x60>)
 801f2e0:	681b      	ldr	r3, [r3, #0]
 801f2e2:	685a      	ldr	r2, [r3, #4]
 801f2e4:	687b      	ldr	r3, [r7, #4]
 801f2e6:	1ad3      	subs	r3, r2, r3
 801f2e8:	0fdb      	lsrs	r3, r3, #31
 801f2ea:	f003 0301 	and.w	r3, r3, #1
 801f2ee:	b2db      	uxtb	r3, r3
 801f2f0:	2b00      	cmp	r3, #0
 801f2f2:	d001      	beq.n	801f2f8 <sys_timeouts_sleeptime+0x34>
    return 0;
 801f2f4:	2300      	movs	r3, #0
 801f2f6:	e010      	b.n	801f31a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801f2f8:	4b0a      	ldr	r3, [pc, #40]	; (801f324 <sys_timeouts_sleeptime+0x60>)
 801f2fa:	681b      	ldr	r3, [r3, #0]
 801f2fc:	685a      	ldr	r2, [r3, #4]
 801f2fe:	687b      	ldr	r3, [r7, #4]
 801f300:	1ad3      	subs	r3, r2, r3
 801f302:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801f304:	683b      	ldr	r3, [r7, #0]
 801f306:	2b00      	cmp	r3, #0
 801f308:	da06      	bge.n	801f318 <sys_timeouts_sleeptime+0x54>
 801f30a:	4b07      	ldr	r3, [pc, #28]	; (801f328 <sys_timeouts_sleeptime+0x64>)
 801f30c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801f310:	4906      	ldr	r1, [pc, #24]	; (801f32c <sys_timeouts_sleeptime+0x68>)
 801f312:	4807      	ldr	r0, [pc, #28]	; (801f330 <sys_timeouts_sleeptime+0x6c>)
 801f314:	f007 fb40 	bl	8026998 <iprintf>
    return ret;
 801f318:	683b      	ldr	r3, [r7, #0]
  }
}
 801f31a:	4618      	mov	r0, r3
 801f31c:	3708      	adds	r7, #8
 801f31e:	46bd      	mov	sp, r7
 801f320:	bd80      	pop	{r7, pc}
 801f322:	bf00      	nop
 801f324:	200131f8 	.word	0x200131f8
 801f328:	0802ab18 	.word	0x0802ab18
 801f32c:	0802abec 	.word	0x0802abec
 801f330:	0802ab8c 	.word	0x0802ab8c

0801f334 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801f334:	b580      	push	{r7, lr}
 801f336:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801f338:	f007 fb46 	bl	80269c8 <rand>
 801f33c:	4603      	mov	r3, r0
 801f33e:	b29b      	uxth	r3, r3
 801f340:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801f344:	b29b      	uxth	r3, r3
 801f346:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801f34a:	b29a      	uxth	r2, r3
 801f34c:	4b01      	ldr	r3, [pc, #4]	; (801f354 <udp_init+0x20>)
 801f34e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801f350:	bf00      	nop
 801f352:	bd80      	pop	{r7, pc}
 801f354:	20000018 	.word	0x20000018

0801f358 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801f358:	b480      	push	{r7}
 801f35a:	b083      	sub	sp, #12
 801f35c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801f35e:	2300      	movs	r3, #0
 801f360:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801f362:	4b17      	ldr	r3, [pc, #92]	; (801f3c0 <udp_new_port+0x68>)
 801f364:	881b      	ldrh	r3, [r3, #0]
 801f366:	1c5a      	adds	r2, r3, #1
 801f368:	b291      	uxth	r1, r2
 801f36a:	4a15      	ldr	r2, [pc, #84]	; (801f3c0 <udp_new_port+0x68>)
 801f36c:	8011      	strh	r1, [r2, #0]
 801f36e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f372:	4293      	cmp	r3, r2
 801f374:	d103      	bne.n	801f37e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801f376:	4b12      	ldr	r3, [pc, #72]	; (801f3c0 <udp_new_port+0x68>)
 801f378:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801f37c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f37e:	4b11      	ldr	r3, [pc, #68]	; (801f3c4 <udp_new_port+0x6c>)
 801f380:	681b      	ldr	r3, [r3, #0]
 801f382:	603b      	str	r3, [r7, #0]
 801f384:	e011      	b.n	801f3aa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801f386:	683b      	ldr	r3, [r7, #0]
 801f388:	8a5a      	ldrh	r2, [r3, #18]
 801f38a:	4b0d      	ldr	r3, [pc, #52]	; (801f3c0 <udp_new_port+0x68>)
 801f38c:	881b      	ldrh	r3, [r3, #0]
 801f38e:	429a      	cmp	r2, r3
 801f390:	d108      	bne.n	801f3a4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801f392:	88fb      	ldrh	r3, [r7, #6]
 801f394:	3301      	adds	r3, #1
 801f396:	80fb      	strh	r3, [r7, #6]
 801f398:	88fb      	ldrh	r3, [r7, #6]
 801f39a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801f39e:	d3e0      	bcc.n	801f362 <udp_new_port+0xa>
        return 0;
 801f3a0:	2300      	movs	r3, #0
 801f3a2:	e007      	b.n	801f3b4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f3a4:	683b      	ldr	r3, [r7, #0]
 801f3a6:	68db      	ldr	r3, [r3, #12]
 801f3a8:	603b      	str	r3, [r7, #0]
 801f3aa:	683b      	ldr	r3, [r7, #0]
 801f3ac:	2b00      	cmp	r3, #0
 801f3ae:	d1ea      	bne.n	801f386 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801f3b0:	4b03      	ldr	r3, [pc, #12]	; (801f3c0 <udp_new_port+0x68>)
 801f3b2:	881b      	ldrh	r3, [r3, #0]
}
 801f3b4:	4618      	mov	r0, r3
 801f3b6:	370c      	adds	r7, #12
 801f3b8:	46bd      	mov	sp, r7
 801f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3be:	4770      	bx	lr
 801f3c0:	20000018 	.word	0x20000018
 801f3c4:	2001a00c 	.word	0x2001a00c

0801f3c8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801f3c8:	b580      	push	{r7, lr}
 801f3ca:	b084      	sub	sp, #16
 801f3cc:	af00      	add	r7, sp, #0
 801f3ce:	60f8      	str	r0, [r7, #12]
 801f3d0:	60b9      	str	r1, [r7, #8]
 801f3d2:	4613      	mov	r3, r2
 801f3d4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801f3d6:	68fb      	ldr	r3, [r7, #12]
 801f3d8:	2b00      	cmp	r3, #0
 801f3da:	d105      	bne.n	801f3e8 <udp_input_local_match+0x20>
 801f3dc:	4b27      	ldr	r3, [pc, #156]	; (801f47c <udp_input_local_match+0xb4>)
 801f3de:	2287      	movs	r2, #135	; 0x87
 801f3e0:	4927      	ldr	r1, [pc, #156]	; (801f480 <udp_input_local_match+0xb8>)
 801f3e2:	4828      	ldr	r0, [pc, #160]	; (801f484 <udp_input_local_match+0xbc>)
 801f3e4:	f007 fad8 	bl	8026998 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801f3e8:	68bb      	ldr	r3, [r7, #8]
 801f3ea:	2b00      	cmp	r3, #0
 801f3ec:	d105      	bne.n	801f3fa <udp_input_local_match+0x32>
 801f3ee:	4b23      	ldr	r3, [pc, #140]	; (801f47c <udp_input_local_match+0xb4>)
 801f3f0:	2288      	movs	r2, #136	; 0x88
 801f3f2:	4925      	ldr	r1, [pc, #148]	; (801f488 <udp_input_local_match+0xc0>)
 801f3f4:	4823      	ldr	r0, [pc, #140]	; (801f484 <udp_input_local_match+0xbc>)
 801f3f6:	f007 facf 	bl	8026998 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f3fa:	68fb      	ldr	r3, [r7, #12]
 801f3fc:	7a1b      	ldrb	r3, [r3, #8]
 801f3fe:	2b00      	cmp	r3, #0
 801f400:	d00b      	beq.n	801f41a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f402:	68fb      	ldr	r3, [r7, #12]
 801f404:	7a1a      	ldrb	r2, [r3, #8]
 801f406:	4b21      	ldr	r3, [pc, #132]	; (801f48c <udp_input_local_match+0xc4>)
 801f408:	685b      	ldr	r3, [r3, #4]
 801f40a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801f40e:	3301      	adds	r3, #1
 801f410:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f412:	429a      	cmp	r2, r3
 801f414:	d001      	beq.n	801f41a <udp_input_local_match+0x52>
    return 0;
 801f416:	2300      	movs	r3, #0
 801f418:	e02b      	b.n	801f472 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801f41a:	79fb      	ldrb	r3, [r7, #7]
 801f41c:	2b00      	cmp	r3, #0
 801f41e:	d018      	beq.n	801f452 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f420:	68fb      	ldr	r3, [r7, #12]
 801f422:	2b00      	cmp	r3, #0
 801f424:	d013      	beq.n	801f44e <udp_input_local_match+0x86>
 801f426:	68fb      	ldr	r3, [r7, #12]
 801f428:	681b      	ldr	r3, [r3, #0]
 801f42a:	2b00      	cmp	r3, #0
 801f42c:	d00f      	beq.n	801f44e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f42e:	4b17      	ldr	r3, [pc, #92]	; (801f48c <udp_input_local_match+0xc4>)
 801f430:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f436:	d00a      	beq.n	801f44e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801f438:	68fb      	ldr	r3, [r7, #12]
 801f43a:	681a      	ldr	r2, [r3, #0]
 801f43c:	4b13      	ldr	r3, [pc, #76]	; (801f48c <udp_input_local_match+0xc4>)
 801f43e:	695b      	ldr	r3, [r3, #20]
 801f440:	405a      	eors	r2, r3
 801f442:	68bb      	ldr	r3, [r7, #8]
 801f444:	3308      	adds	r3, #8
 801f446:	681b      	ldr	r3, [r3, #0]
 801f448:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f44a:	2b00      	cmp	r3, #0
 801f44c:	d110      	bne.n	801f470 <udp_input_local_match+0xa8>
          return 1;
 801f44e:	2301      	movs	r3, #1
 801f450:	e00f      	b.n	801f472 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801f452:	68fb      	ldr	r3, [r7, #12]
 801f454:	2b00      	cmp	r3, #0
 801f456:	d009      	beq.n	801f46c <udp_input_local_match+0xa4>
 801f458:	68fb      	ldr	r3, [r7, #12]
 801f45a:	681b      	ldr	r3, [r3, #0]
 801f45c:	2b00      	cmp	r3, #0
 801f45e:	d005      	beq.n	801f46c <udp_input_local_match+0xa4>
 801f460:	68fb      	ldr	r3, [r7, #12]
 801f462:	681a      	ldr	r2, [r3, #0]
 801f464:	4b09      	ldr	r3, [pc, #36]	; (801f48c <udp_input_local_match+0xc4>)
 801f466:	695b      	ldr	r3, [r3, #20]
 801f468:	429a      	cmp	r2, r3
 801f46a:	d101      	bne.n	801f470 <udp_input_local_match+0xa8>
        return 1;
 801f46c:	2301      	movs	r3, #1
 801f46e:	e000      	b.n	801f472 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801f470:	2300      	movs	r3, #0
}
 801f472:	4618      	mov	r0, r3
 801f474:	3710      	adds	r7, #16
 801f476:	46bd      	mov	sp, r7
 801f478:	bd80      	pop	{r7, pc}
 801f47a:	bf00      	nop
 801f47c:	0802ac00 	.word	0x0802ac00
 801f480:	0802ac30 	.word	0x0802ac30
 801f484:	0802ac54 	.word	0x0802ac54
 801f488:	0802ac7c 	.word	0x0802ac7c
 801f48c:	20016b40 	.word	0x20016b40

0801f490 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801f490:	b590      	push	{r4, r7, lr}
 801f492:	b08d      	sub	sp, #52	; 0x34
 801f494:	af02      	add	r7, sp, #8
 801f496:	6078      	str	r0, [r7, #4]
 801f498:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801f49a:	2300      	movs	r3, #0
 801f49c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801f49e:	687b      	ldr	r3, [r7, #4]
 801f4a0:	2b00      	cmp	r3, #0
 801f4a2:	d105      	bne.n	801f4b0 <udp_input+0x20>
 801f4a4:	4b7c      	ldr	r3, [pc, #496]	; (801f698 <udp_input+0x208>)
 801f4a6:	22cf      	movs	r2, #207	; 0xcf
 801f4a8:	497c      	ldr	r1, [pc, #496]	; (801f69c <udp_input+0x20c>)
 801f4aa:	487d      	ldr	r0, [pc, #500]	; (801f6a0 <udp_input+0x210>)
 801f4ac:	f007 fa74 	bl	8026998 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801f4b0:	683b      	ldr	r3, [r7, #0]
 801f4b2:	2b00      	cmp	r3, #0
 801f4b4:	d105      	bne.n	801f4c2 <udp_input+0x32>
 801f4b6:	4b78      	ldr	r3, [pc, #480]	; (801f698 <udp_input+0x208>)
 801f4b8:	22d0      	movs	r2, #208	; 0xd0
 801f4ba:	497a      	ldr	r1, [pc, #488]	; (801f6a4 <udp_input+0x214>)
 801f4bc:	4878      	ldr	r0, [pc, #480]	; (801f6a0 <udp_input+0x210>)
 801f4be:	f007 fa6b 	bl	8026998 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801f4c2:	687b      	ldr	r3, [r7, #4]
 801f4c4:	895b      	ldrh	r3, [r3, #10]
 801f4c6:	2b07      	cmp	r3, #7
 801f4c8:	d803      	bhi.n	801f4d2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801f4ca:	6878      	ldr	r0, [r7, #4]
 801f4cc:	f7f9 f976 	bl	80187bc <pbuf_free>
    goto end;
 801f4d0:	e0de      	b.n	801f690 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801f4d2:	687b      	ldr	r3, [r7, #4]
 801f4d4:	685b      	ldr	r3, [r3, #4]
 801f4d6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801f4d8:	4b73      	ldr	r3, [pc, #460]	; (801f6a8 <udp_input+0x218>)
 801f4da:	695a      	ldr	r2, [r3, #20]
 801f4dc:	4b72      	ldr	r3, [pc, #456]	; (801f6a8 <udp_input+0x218>)
 801f4de:	681b      	ldr	r3, [r3, #0]
 801f4e0:	4619      	mov	r1, r3
 801f4e2:	4610      	mov	r0, r2
 801f4e4:	f003 ff20 	bl	8023328 <ip4_addr_isbroadcast_u32>
 801f4e8:	4603      	mov	r3, r0
 801f4ea:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801f4ec:	697b      	ldr	r3, [r7, #20]
 801f4ee:	881b      	ldrh	r3, [r3, #0]
 801f4f0:	b29b      	uxth	r3, r3
 801f4f2:	4618      	mov	r0, r3
 801f4f4:	f7f7 fd3e 	bl	8016f74 <lwip_htons>
 801f4f8:	4603      	mov	r3, r0
 801f4fa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801f4fc:	697b      	ldr	r3, [r7, #20]
 801f4fe:	885b      	ldrh	r3, [r3, #2]
 801f500:	b29b      	uxth	r3, r3
 801f502:	4618      	mov	r0, r3
 801f504:	f7f7 fd36 	bl	8016f74 <lwip_htons>
 801f508:	4603      	mov	r3, r0
 801f50a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801f50c:	2300      	movs	r3, #0
 801f50e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801f510:	2300      	movs	r3, #0
 801f512:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801f514:	2300      	movs	r3, #0
 801f516:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f518:	4b64      	ldr	r3, [pc, #400]	; (801f6ac <udp_input+0x21c>)
 801f51a:	681b      	ldr	r3, [r3, #0]
 801f51c:	627b      	str	r3, [r7, #36]	; 0x24
 801f51e:	e054      	b.n	801f5ca <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801f520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f522:	8a5b      	ldrh	r3, [r3, #18]
 801f524:	89fa      	ldrh	r2, [r7, #14]
 801f526:	429a      	cmp	r2, r3
 801f528:	d14a      	bne.n	801f5c0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801f52a:	7cfb      	ldrb	r3, [r7, #19]
 801f52c:	461a      	mov	r2, r3
 801f52e:	6839      	ldr	r1, [r7, #0]
 801f530:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f532:	f7ff ff49 	bl	801f3c8 <udp_input_local_match>
 801f536:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801f538:	2b00      	cmp	r3, #0
 801f53a:	d041      	beq.n	801f5c0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801f53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f53e:	7c1b      	ldrb	r3, [r3, #16]
 801f540:	f003 0304 	and.w	r3, r3, #4
 801f544:	2b00      	cmp	r3, #0
 801f546:	d11d      	bne.n	801f584 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801f548:	69fb      	ldr	r3, [r7, #28]
 801f54a:	2b00      	cmp	r3, #0
 801f54c:	d102      	bne.n	801f554 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801f54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f550:	61fb      	str	r3, [r7, #28]
 801f552:	e017      	b.n	801f584 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801f554:	7cfb      	ldrb	r3, [r7, #19]
 801f556:	2b00      	cmp	r3, #0
 801f558:	d014      	beq.n	801f584 <udp_input+0xf4>
 801f55a:	4b53      	ldr	r3, [pc, #332]	; (801f6a8 <udp_input+0x218>)
 801f55c:	695b      	ldr	r3, [r3, #20]
 801f55e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f562:	d10f      	bne.n	801f584 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801f564:	69fb      	ldr	r3, [r7, #28]
 801f566:	681a      	ldr	r2, [r3, #0]
 801f568:	683b      	ldr	r3, [r7, #0]
 801f56a:	3304      	adds	r3, #4
 801f56c:	681b      	ldr	r3, [r3, #0]
 801f56e:	429a      	cmp	r2, r3
 801f570:	d008      	beq.n	801f584 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801f572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f574:	681a      	ldr	r2, [r3, #0]
 801f576:	683b      	ldr	r3, [r7, #0]
 801f578:	3304      	adds	r3, #4
 801f57a:	681b      	ldr	r3, [r3, #0]
 801f57c:	429a      	cmp	r2, r3
 801f57e:	d101      	bne.n	801f584 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801f580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f582:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801f584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f586:	8a9b      	ldrh	r3, [r3, #20]
 801f588:	8a3a      	ldrh	r2, [r7, #16]
 801f58a:	429a      	cmp	r2, r3
 801f58c:	d118      	bne.n	801f5c0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f590:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801f592:	2b00      	cmp	r3, #0
 801f594:	d005      	beq.n	801f5a2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801f596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f598:	685a      	ldr	r2, [r3, #4]
 801f59a:	4b43      	ldr	r3, [pc, #268]	; (801f6a8 <udp_input+0x218>)
 801f59c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f59e:	429a      	cmp	r2, r3
 801f5a0:	d10e      	bne.n	801f5c0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801f5a2:	6a3b      	ldr	r3, [r7, #32]
 801f5a4:	2b00      	cmp	r3, #0
 801f5a6:	d014      	beq.n	801f5d2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801f5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5aa:	68da      	ldr	r2, [r3, #12]
 801f5ac:	6a3b      	ldr	r3, [r7, #32]
 801f5ae:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801f5b0:	4b3e      	ldr	r3, [pc, #248]	; (801f6ac <udp_input+0x21c>)
 801f5b2:	681a      	ldr	r2, [r3, #0]
 801f5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5b6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801f5b8:	4a3c      	ldr	r2, [pc, #240]	; (801f6ac <udp_input+0x21c>)
 801f5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5bc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801f5be:	e008      	b.n	801f5d2 <udp_input+0x142>
      }
    }

    prev = pcb;
 801f5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5c2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5c6:	68db      	ldr	r3, [r3, #12]
 801f5c8:	627b      	str	r3, [r7, #36]	; 0x24
 801f5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5cc:	2b00      	cmp	r3, #0
 801f5ce:	d1a7      	bne.n	801f520 <udp_input+0x90>
 801f5d0:	e000      	b.n	801f5d4 <udp_input+0x144>
        break;
 801f5d2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801f5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5d6:	2b00      	cmp	r3, #0
 801f5d8:	d101      	bne.n	801f5de <udp_input+0x14e>
    pcb = uncon_pcb;
 801f5da:	69fb      	ldr	r3, [r7, #28]
 801f5dc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801f5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5e0:	2b00      	cmp	r3, #0
 801f5e2:	d002      	beq.n	801f5ea <udp_input+0x15a>
    for_us = 1;
 801f5e4:	2301      	movs	r3, #1
 801f5e6:	76fb      	strb	r3, [r7, #27]
 801f5e8:	e00a      	b.n	801f600 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801f5ea:	683b      	ldr	r3, [r7, #0]
 801f5ec:	3304      	adds	r3, #4
 801f5ee:	681a      	ldr	r2, [r3, #0]
 801f5f0:	4b2d      	ldr	r3, [pc, #180]	; (801f6a8 <udp_input+0x218>)
 801f5f2:	695b      	ldr	r3, [r3, #20]
 801f5f4:	429a      	cmp	r2, r3
 801f5f6:	bf0c      	ite	eq
 801f5f8:	2301      	moveq	r3, #1
 801f5fa:	2300      	movne	r3, #0
 801f5fc:	b2db      	uxtb	r3, r3
 801f5fe:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801f600:	7efb      	ldrb	r3, [r7, #27]
 801f602:	2b00      	cmp	r3, #0
 801f604:	d041      	beq.n	801f68a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801f606:	2108      	movs	r1, #8
 801f608:	6878      	ldr	r0, [r7, #4]
 801f60a:	f7f9 f81f 	bl	801864c <pbuf_remove_header>
 801f60e:	4603      	mov	r3, r0
 801f610:	2b00      	cmp	r3, #0
 801f612:	d00a      	beq.n	801f62a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801f614:	4b20      	ldr	r3, [pc, #128]	; (801f698 <udp_input+0x208>)
 801f616:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801f61a:	4925      	ldr	r1, [pc, #148]	; (801f6b0 <udp_input+0x220>)
 801f61c:	4820      	ldr	r0, [pc, #128]	; (801f6a0 <udp_input+0x210>)
 801f61e:	f007 f9bb 	bl	8026998 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801f622:	6878      	ldr	r0, [r7, #4]
 801f624:	f7f9 f8ca 	bl	80187bc <pbuf_free>
      goto end;
 801f628:	e032      	b.n	801f690 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801f62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f62c:	2b00      	cmp	r3, #0
 801f62e:	d012      	beq.n	801f656 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801f630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f632:	699b      	ldr	r3, [r3, #24]
 801f634:	2b00      	cmp	r3, #0
 801f636:	d00a      	beq.n	801f64e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801f638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f63a:	699c      	ldr	r4, [r3, #24]
 801f63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f63e:	69d8      	ldr	r0, [r3, #28]
 801f640:	8a3b      	ldrh	r3, [r7, #16]
 801f642:	9300      	str	r3, [sp, #0]
 801f644:	4b1b      	ldr	r3, [pc, #108]	; (801f6b4 <udp_input+0x224>)
 801f646:	687a      	ldr	r2, [r7, #4]
 801f648:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f64a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801f64c:	e021      	b.n	801f692 <udp_input+0x202>
        pbuf_free(p);
 801f64e:	6878      	ldr	r0, [r7, #4]
 801f650:	f7f9 f8b4 	bl	80187bc <pbuf_free>
        goto end;
 801f654:	e01c      	b.n	801f690 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801f656:	7cfb      	ldrb	r3, [r7, #19]
 801f658:	2b00      	cmp	r3, #0
 801f65a:	d112      	bne.n	801f682 <udp_input+0x1f2>
 801f65c:	4b12      	ldr	r3, [pc, #72]	; (801f6a8 <udp_input+0x218>)
 801f65e:	695b      	ldr	r3, [r3, #20]
 801f660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f664:	2be0      	cmp	r3, #224	; 0xe0
 801f666:	d00c      	beq.n	801f682 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801f668:	4b0f      	ldr	r3, [pc, #60]	; (801f6a8 <udp_input+0x218>)
 801f66a:	899b      	ldrh	r3, [r3, #12]
 801f66c:	3308      	adds	r3, #8
 801f66e:	b29b      	uxth	r3, r3
 801f670:	b21b      	sxth	r3, r3
 801f672:	4619      	mov	r1, r3
 801f674:	6878      	ldr	r0, [r7, #4]
 801f676:	f7f9 f85c 	bl	8018732 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801f67a:	2103      	movs	r1, #3
 801f67c:	6878      	ldr	r0, [r7, #4]
 801f67e:	f003 faa5 	bl	8022bcc <icmp_dest_unreach>
      pbuf_free(p);
 801f682:	6878      	ldr	r0, [r7, #4]
 801f684:	f7f9 f89a 	bl	80187bc <pbuf_free>
  return;
 801f688:	e003      	b.n	801f692 <udp_input+0x202>
    pbuf_free(p);
 801f68a:	6878      	ldr	r0, [r7, #4]
 801f68c:	f7f9 f896 	bl	80187bc <pbuf_free>
  return;
 801f690:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801f692:	372c      	adds	r7, #44	; 0x2c
 801f694:	46bd      	mov	sp, r7
 801f696:	bd90      	pop	{r4, r7, pc}
 801f698:	0802ac00 	.word	0x0802ac00
 801f69c:	0802aca4 	.word	0x0802aca4
 801f6a0:	0802ac54 	.word	0x0802ac54
 801f6a4:	0802acbc 	.word	0x0802acbc
 801f6a8:	20016b40 	.word	0x20016b40
 801f6ac:	2001a00c 	.word	0x2001a00c
 801f6b0:	0802acd8 	.word	0x0802acd8
 801f6b4:	20016b50 	.word	0x20016b50

0801f6b8 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801f6b8:	b580      	push	{r7, lr}
 801f6ba:	b082      	sub	sp, #8
 801f6bc:	af00      	add	r7, sp, #0
 801f6be:	6078      	str	r0, [r7, #4]
 801f6c0:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801f6c2:	687b      	ldr	r3, [r7, #4]
 801f6c4:	2b00      	cmp	r3, #0
 801f6c6:	d109      	bne.n	801f6dc <udp_send+0x24>
 801f6c8:	4b11      	ldr	r3, [pc, #68]	; (801f710 <udp_send+0x58>)
 801f6ca:	f240 12d5 	movw	r2, #469	; 0x1d5
 801f6ce:	4911      	ldr	r1, [pc, #68]	; (801f714 <udp_send+0x5c>)
 801f6d0:	4811      	ldr	r0, [pc, #68]	; (801f718 <udp_send+0x60>)
 801f6d2:	f007 f961 	bl	8026998 <iprintf>
 801f6d6:	f06f 030f 	mvn.w	r3, #15
 801f6da:	e015      	b.n	801f708 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801f6dc:	683b      	ldr	r3, [r7, #0]
 801f6de:	2b00      	cmp	r3, #0
 801f6e0:	d109      	bne.n	801f6f6 <udp_send+0x3e>
 801f6e2:	4b0b      	ldr	r3, [pc, #44]	; (801f710 <udp_send+0x58>)
 801f6e4:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801f6e8:	490c      	ldr	r1, [pc, #48]	; (801f71c <udp_send+0x64>)
 801f6ea:	480b      	ldr	r0, [pc, #44]	; (801f718 <udp_send+0x60>)
 801f6ec:	f007 f954 	bl	8026998 <iprintf>
 801f6f0:	f06f 030f 	mvn.w	r3, #15
 801f6f4:	e008      	b.n	801f708 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801f6f6:	687b      	ldr	r3, [r7, #4]
 801f6f8:	1d1a      	adds	r2, r3, #4
 801f6fa:	687b      	ldr	r3, [r7, #4]
 801f6fc:	8a9b      	ldrh	r3, [r3, #20]
 801f6fe:	6839      	ldr	r1, [r7, #0]
 801f700:	6878      	ldr	r0, [r7, #4]
 801f702:	f000 f80d 	bl	801f720 <udp_sendto>
 801f706:	4603      	mov	r3, r0
}
 801f708:	4618      	mov	r0, r3
 801f70a:	3708      	adds	r7, #8
 801f70c:	46bd      	mov	sp, r7
 801f70e:	bd80      	pop	{r7, pc}
 801f710:	0802ac00 	.word	0x0802ac00
 801f714:	0802acf4 	.word	0x0802acf4
 801f718:	0802ac54 	.word	0x0802ac54
 801f71c:	0802ad0c 	.word	0x0802ad0c

0801f720 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801f720:	b580      	push	{r7, lr}
 801f722:	b088      	sub	sp, #32
 801f724:	af02      	add	r7, sp, #8
 801f726:	60f8      	str	r0, [r7, #12]
 801f728:	60b9      	str	r1, [r7, #8]
 801f72a:	607a      	str	r2, [r7, #4]
 801f72c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801f72e:	68fb      	ldr	r3, [r7, #12]
 801f730:	2b00      	cmp	r3, #0
 801f732:	d109      	bne.n	801f748 <udp_sendto+0x28>
 801f734:	4b23      	ldr	r3, [pc, #140]	; (801f7c4 <udp_sendto+0xa4>)
 801f736:	f44f 7206 	mov.w	r2, #536	; 0x218
 801f73a:	4923      	ldr	r1, [pc, #140]	; (801f7c8 <udp_sendto+0xa8>)
 801f73c:	4823      	ldr	r0, [pc, #140]	; (801f7cc <udp_sendto+0xac>)
 801f73e:	f007 f92b 	bl	8026998 <iprintf>
 801f742:	f06f 030f 	mvn.w	r3, #15
 801f746:	e038      	b.n	801f7ba <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801f748:	68bb      	ldr	r3, [r7, #8]
 801f74a:	2b00      	cmp	r3, #0
 801f74c:	d109      	bne.n	801f762 <udp_sendto+0x42>
 801f74e:	4b1d      	ldr	r3, [pc, #116]	; (801f7c4 <udp_sendto+0xa4>)
 801f750:	f240 2219 	movw	r2, #537	; 0x219
 801f754:	491e      	ldr	r1, [pc, #120]	; (801f7d0 <udp_sendto+0xb0>)
 801f756:	481d      	ldr	r0, [pc, #116]	; (801f7cc <udp_sendto+0xac>)
 801f758:	f007 f91e 	bl	8026998 <iprintf>
 801f75c:	f06f 030f 	mvn.w	r3, #15
 801f760:	e02b      	b.n	801f7ba <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f762:	687b      	ldr	r3, [r7, #4]
 801f764:	2b00      	cmp	r3, #0
 801f766:	d109      	bne.n	801f77c <udp_sendto+0x5c>
 801f768:	4b16      	ldr	r3, [pc, #88]	; (801f7c4 <udp_sendto+0xa4>)
 801f76a:	f240 221a 	movw	r2, #538	; 0x21a
 801f76e:	4919      	ldr	r1, [pc, #100]	; (801f7d4 <udp_sendto+0xb4>)
 801f770:	4816      	ldr	r0, [pc, #88]	; (801f7cc <udp_sendto+0xac>)
 801f772:	f007 f911 	bl	8026998 <iprintf>
 801f776:	f06f 030f 	mvn.w	r3, #15
 801f77a:	e01e      	b.n	801f7ba <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801f77c:	68fb      	ldr	r3, [r7, #12]
 801f77e:	7a1b      	ldrb	r3, [r3, #8]
 801f780:	2b00      	cmp	r3, #0
 801f782:	d006      	beq.n	801f792 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801f784:	68fb      	ldr	r3, [r7, #12]
 801f786:	7a1b      	ldrb	r3, [r3, #8]
 801f788:	4618      	mov	r0, r3
 801f78a:	f7f8 fc5b 	bl	8018044 <netif_get_by_index>
 801f78e:	6178      	str	r0, [r7, #20]
 801f790:	e003      	b.n	801f79a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801f792:	6878      	ldr	r0, [r7, #4]
 801f794:	f003 faa4 	bl	8022ce0 <ip4_route>
 801f798:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801f79a:	697b      	ldr	r3, [r7, #20]
 801f79c:	2b00      	cmp	r3, #0
 801f79e:	d102      	bne.n	801f7a6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801f7a0:	f06f 0303 	mvn.w	r3, #3
 801f7a4:	e009      	b.n	801f7ba <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801f7a6:	887a      	ldrh	r2, [r7, #2]
 801f7a8:	697b      	ldr	r3, [r7, #20]
 801f7aa:	9300      	str	r3, [sp, #0]
 801f7ac:	4613      	mov	r3, r2
 801f7ae:	687a      	ldr	r2, [r7, #4]
 801f7b0:	68b9      	ldr	r1, [r7, #8]
 801f7b2:	68f8      	ldr	r0, [r7, #12]
 801f7b4:	f000 f810 	bl	801f7d8 <udp_sendto_if>
 801f7b8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801f7ba:	4618      	mov	r0, r3
 801f7bc:	3718      	adds	r7, #24
 801f7be:	46bd      	mov	sp, r7
 801f7c0:	bd80      	pop	{r7, pc}
 801f7c2:	bf00      	nop
 801f7c4:	0802ac00 	.word	0x0802ac00
 801f7c8:	0802ad24 	.word	0x0802ad24
 801f7cc:	0802ac54 	.word	0x0802ac54
 801f7d0:	0802ad3c 	.word	0x0802ad3c
 801f7d4:	0802ad58 	.word	0x0802ad58

0801f7d8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801f7d8:	b580      	push	{r7, lr}
 801f7da:	b088      	sub	sp, #32
 801f7dc:	af02      	add	r7, sp, #8
 801f7de:	60f8      	str	r0, [r7, #12]
 801f7e0:	60b9      	str	r1, [r7, #8]
 801f7e2:	607a      	str	r2, [r7, #4]
 801f7e4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801f7e6:	68fb      	ldr	r3, [r7, #12]
 801f7e8:	2b00      	cmp	r3, #0
 801f7ea:	d109      	bne.n	801f800 <udp_sendto_if+0x28>
 801f7ec:	4b2e      	ldr	r3, [pc, #184]	; (801f8a8 <udp_sendto_if+0xd0>)
 801f7ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f7f2:	492e      	ldr	r1, [pc, #184]	; (801f8ac <udp_sendto_if+0xd4>)
 801f7f4:	482e      	ldr	r0, [pc, #184]	; (801f8b0 <udp_sendto_if+0xd8>)
 801f7f6:	f007 f8cf 	bl	8026998 <iprintf>
 801f7fa:	f06f 030f 	mvn.w	r3, #15
 801f7fe:	e04f      	b.n	801f8a0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801f800:	68bb      	ldr	r3, [r7, #8]
 801f802:	2b00      	cmp	r3, #0
 801f804:	d109      	bne.n	801f81a <udp_sendto_if+0x42>
 801f806:	4b28      	ldr	r3, [pc, #160]	; (801f8a8 <udp_sendto_if+0xd0>)
 801f808:	f240 2281 	movw	r2, #641	; 0x281
 801f80c:	4929      	ldr	r1, [pc, #164]	; (801f8b4 <udp_sendto_if+0xdc>)
 801f80e:	4828      	ldr	r0, [pc, #160]	; (801f8b0 <udp_sendto_if+0xd8>)
 801f810:	f007 f8c2 	bl	8026998 <iprintf>
 801f814:	f06f 030f 	mvn.w	r3, #15
 801f818:	e042      	b.n	801f8a0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f81a:	687b      	ldr	r3, [r7, #4]
 801f81c:	2b00      	cmp	r3, #0
 801f81e:	d109      	bne.n	801f834 <udp_sendto_if+0x5c>
 801f820:	4b21      	ldr	r3, [pc, #132]	; (801f8a8 <udp_sendto_if+0xd0>)
 801f822:	f240 2282 	movw	r2, #642	; 0x282
 801f826:	4924      	ldr	r1, [pc, #144]	; (801f8b8 <udp_sendto_if+0xe0>)
 801f828:	4821      	ldr	r0, [pc, #132]	; (801f8b0 <udp_sendto_if+0xd8>)
 801f82a:	f007 f8b5 	bl	8026998 <iprintf>
 801f82e:	f06f 030f 	mvn.w	r3, #15
 801f832:	e035      	b.n	801f8a0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801f834:	6a3b      	ldr	r3, [r7, #32]
 801f836:	2b00      	cmp	r3, #0
 801f838:	d109      	bne.n	801f84e <udp_sendto_if+0x76>
 801f83a:	4b1b      	ldr	r3, [pc, #108]	; (801f8a8 <udp_sendto_if+0xd0>)
 801f83c:	f240 2283 	movw	r2, #643	; 0x283
 801f840:	491e      	ldr	r1, [pc, #120]	; (801f8bc <udp_sendto_if+0xe4>)
 801f842:	481b      	ldr	r0, [pc, #108]	; (801f8b0 <udp_sendto_if+0xd8>)
 801f844:	f007 f8a8 	bl	8026998 <iprintf>
 801f848:	f06f 030f 	mvn.w	r3, #15
 801f84c:	e028      	b.n	801f8a0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f84e:	68fb      	ldr	r3, [r7, #12]
 801f850:	2b00      	cmp	r3, #0
 801f852:	d009      	beq.n	801f868 <udp_sendto_if+0x90>
 801f854:	68fb      	ldr	r3, [r7, #12]
 801f856:	681b      	ldr	r3, [r3, #0]
 801f858:	2b00      	cmp	r3, #0
 801f85a:	d005      	beq.n	801f868 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801f85c:	68fb      	ldr	r3, [r7, #12]
 801f85e:	681b      	ldr	r3, [r3, #0]
 801f860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f864:	2be0      	cmp	r3, #224	; 0xe0
 801f866:	d103      	bne.n	801f870 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801f868:	6a3b      	ldr	r3, [r7, #32]
 801f86a:	3304      	adds	r3, #4
 801f86c:	617b      	str	r3, [r7, #20]
 801f86e:	e00b      	b.n	801f888 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801f870:	68fb      	ldr	r3, [r7, #12]
 801f872:	681a      	ldr	r2, [r3, #0]
 801f874:	6a3b      	ldr	r3, [r7, #32]
 801f876:	3304      	adds	r3, #4
 801f878:	681b      	ldr	r3, [r3, #0]
 801f87a:	429a      	cmp	r2, r3
 801f87c:	d002      	beq.n	801f884 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801f87e:	f06f 0303 	mvn.w	r3, #3
 801f882:	e00d      	b.n	801f8a0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801f884:	68fb      	ldr	r3, [r7, #12]
 801f886:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801f888:	887a      	ldrh	r2, [r7, #2]
 801f88a:	697b      	ldr	r3, [r7, #20]
 801f88c:	9301      	str	r3, [sp, #4]
 801f88e:	6a3b      	ldr	r3, [r7, #32]
 801f890:	9300      	str	r3, [sp, #0]
 801f892:	4613      	mov	r3, r2
 801f894:	687a      	ldr	r2, [r7, #4]
 801f896:	68b9      	ldr	r1, [r7, #8]
 801f898:	68f8      	ldr	r0, [r7, #12]
 801f89a:	f000 f811 	bl	801f8c0 <udp_sendto_if_src>
 801f89e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801f8a0:	4618      	mov	r0, r3
 801f8a2:	3718      	adds	r7, #24
 801f8a4:	46bd      	mov	sp, r7
 801f8a6:	bd80      	pop	{r7, pc}
 801f8a8:	0802ac00 	.word	0x0802ac00
 801f8ac:	0802ad74 	.word	0x0802ad74
 801f8b0:	0802ac54 	.word	0x0802ac54
 801f8b4:	0802ad90 	.word	0x0802ad90
 801f8b8:	0802adac 	.word	0x0802adac
 801f8bc:	0802adcc 	.word	0x0802adcc

0801f8c0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801f8c0:	b580      	push	{r7, lr}
 801f8c2:	b08c      	sub	sp, #48	; 0x30
 801f8c4:	af04      	add	r7, sp, #16
 801f8c6:	60f8      	str	r0, [r7, #12]
 801f8c8:	60b9      	str	r1, [r7, #8]
 801f8ca:	607a      	str	r2, [r7, #4]
 801f8cc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801f8ce:	68fb      	ldr	r3, [r7, #12]
 801f8d0:	2b00      	cmp	r3, #0
 801f8d2:	d109      	bne.n	801f8e8 <udp_sendto_if_src+0x28>
 801f8d4:	4b65      	ldr	r3, [pc, #404]	; (801fa6c <udp_sendto_if_src+0x1ac>)
 801f8d6:	f240 22d1 	movw	r2, #721	; 0x2d1
 801f8da:	4965      	ldr	r1, [pc, #404]	; (801fa70 <udp_sendto_if_src+0x1b0>)
 801f8dc:	4865      	ldr	r0, [pc, #404]	; (801fa74 <udp_sendto_if_src+0x1b4>)
 801f8de:	f007 f85b 	bl	8026998 <iprintf>
 801f8e2:	f06f 030f 	mvn.w	r3, #15
 801f8e6:	e0bc      	b.n	801fa62 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801f8e8:	68bb      	ldr	r3, [r7, #8]
 801f8ea:	2b00      	cmp	r3, #0
 801f8ec:	d109      	bne.n	801f902 <udp_sendto_if_src+0x42>
 801f8ee:	4b5f      	ldr	r3, [pc, #380]	; (801fa6c <udp_sendto_if_src+0x1ac>)
 801f8f0:	f240 22d2 	movw	r2, #722	; 0x2d2
 801f8f4:	4960      	ldr	r1, [pc, #384]	; (801fa78 <udp_sendto_if_src+0x1b8>)
 801f8f6:	485f      	ldr	r0, [pc, #380]	; (801fa74 <udp_sendto_if_src+0x1b4>)
 801f8f8:	f007 f84e 	bl	8026998 <iprintf>
 801f8fc:	f06f 030f 	mvn.w	r3, #15
 801f900:	e0af      	b.n	801fa62 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f902:	687b      	ldr	r3, [r7, #4]
 801f904:	2b00      	cmp	r3, #0
 801f906:	d109      	bne.n	801f91c <udp_sendto_if_src+0x5c>
 801f908:	4b58      	ldr	r3, [pc, #352]	; (801fa6c <udp_sendto_if_src+0x1ac>)
 801f90a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801f90e:	495b      	ldr	r1, [pc, #364]	; (801fa7c <udp_sendto_if_src+0x1bc>)
 801f910:	4858      	ldr	r0, [pc, #352]	; (801fa74 <udp_sendto_if_src+0x1b4>)
 801f912:	f007 f841 	bl	8026998 <iprintf>
 801f916:	f06f 030f 	mvn.w	r3, #15
 801f91a:	e0a2      	b.n	801fa62 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801f91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f91e:	2b00      	cmp	r3, #0
 801f920:	d109      	bne.n	801f936 <udp_sendto_if_src+0x76>
 801f922:	4b52      	ldr	r3, [pc, #328]	; (801fa6c <udp_sendto_if_src+0x1ac>)
 801f924:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801f928:	4955      	ldr	r1, [pc, #340]	; (801fa80 <udp_sendto_if_src+0x1c0>)
 801f92a:	4852      	ldr	r0, [pc, #328]	; (801fa74 <udp_sendto_if_src+0x1b4>)
 801f92c:	f007 f834 	bl	8026998 <iprintf>
 801f930:	f06f 030f 	mvn.w	r3, #15
 801f934:	e095      	b.n	801fa62 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801f936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f938:	2b00      	cmp	r3, #0
 801f93a:	d109      	bne.n	801f950 <udp_sendto_if_src+0x90>
 801f93c:	4b4b      	ldr	r3, [pc, #300]	; (801fa6c <udp_sendto_if_src+0x1ac>)
 801f93e:	f240 22d5 	movw	r2, #725	; 0x2d5
 801f942:	4950      	ldr	r1, [pc, #320]	; (801fa84 <udp_sendto_if_src+0x1c4>)
 801f944:	484b      	ldr	r0, [pc, #300]	; (801fa74 <udp_sendto_if_src+0x1b4>)
 801f946:	f007 f827 	bl	8026998 <iprintf>
 801f94a:	f06f 030f 	mvn.w	r3, #15
 801f94e:	e088      	b.n	801fa62 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801f950:	68fb      	ldr	r3, [r7, #12]
 801f952:	8a5b      	ldrh	r3, [r3, #18]
 801f954:	2b00      	cmp	r3, #0
 801f956:	d10f      	bne.n	801f978 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801f958:	68f9      	ldr	r1, [r7, #12]
 801f95a:	68fb      	ldr	r3, [r7, #12]
 801f95c:	8a5b      	ldrh	r3, [r3, #18]
 801f95e:	461a      	mov	r2, r3
 801f960:	68f8      	ldr	r0, [r7, #12]
 801f962:	f000 f893 	bl	801fa8c <udp_bind>
 801f966:	4603      	mov	r3, r0
 801f968:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801f96a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801f96e:	2b00      	cmp	r3, #0
 801f970:	d002      	beq.n	801f978 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801f972:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801f976:	e074      	b.n	801fa62 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801f978:	68bb      	ldr	r3, [r7, #8]
 801f97a:	891b      	ldrh	r3, [r3, #8]
 801f97c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801f980:	4293      	cmp	r3, r2
 801f982:	d902      	bls.n	801f98a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801f984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f988:	e06b      	b.n	801fa62 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801f98a:	2108      	movs	r1, #8
 801f98c:	68b8      	ldr	r0, [r7, #8]
 801f98e:	f7f8 fe4d 	bl	801862c <pbuf_add_header>
 801f992:	4603      	mov	r3, r0
 801f994:	2b00      	cmp	r3, #0
 801f996:	d015      	beq.n	801f9c4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801f998:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f99c:	2108      	movs	r1, #8
 801f99e:	2022      	movs	r0, #34	; 0x22
 801f9a0:	f7f8 fbfa 	bl	8018198 <pbuf_alloc>
 801f9a4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801f9a6:	69fb      	ldr	r3, [r7, #28]
 801f9a8:	2b00      	cmp	r3, #0
 801f9aa:	d102      	bne.n	801f9b2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801f9ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f9b0:	e057      	b.n	801fa62 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801f9b2:	68bb      	ldr	r3, [r7, #8]
 801f9b4:	891b      	ldrh	r3, [r3, #8]
 801f9b6:	2b00      	cmp	r3, #0
 801f9b8:	d006      	beq.n	801f9c8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801f9ba:	68b9      	ldr	r1, [r7, #8]
 801f9bc:	69f8      	ldr	r0, [r7, #28]
 801f9be:	f7f9 f821 	bl	8018a04 <pbuf_chain>
 801f9c2:	e001      	b.n	801f9c8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801f9c4:	68bb      	ldr	r3, [r7, #8]
 801f9c6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801f9c8:	69fb      	ldr	r3, [r7, #28]
 801f9ca:	895b      	ldrh	r3, [r3, #10]
 801f9cc:	2b07      	cmp	r3, #7
 801f9ce:	d806      	bhi.n	801f9de <udp_sendto_if_src+0x11e>
 801f9d0:	4b26      	ldr	r3, [pc, #152]	; (801fa6c <udp_sendto_if_src+0x1ac>)
 801f9d2:	f240 320e 	movw	r2, #782	; 0x30e
 801f9d6:	492c      	ldr	r1, [pc, #176]	; (801fa88 <udp_sendto_if_src+0x1c8>)
 801f9d8:	4826      	ldr	r0, [pc, #152]	; (801fa74 <udp_sendto_if_src+0x1b4>)
 801f9da:	f006 ffdd 	bl	8026998 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801f9de:	69fb      	ldr	r3, [r7, #28]
 801f9e0:	685b      	ldr	r3, [r3, #4]
 801f9e2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801f9e4:	68fb      	ldr	r3, [r7, #12]
 801f9e6:	8a5b      	ldrh	r3, [r3, #18]
 801f9e8:	4618      	mov	r0, r3
 801f9ea:	f7f7 fac3 	bl	8016f74 <lwip_htons>
 801f9ee:	4603      	mov	r3, r0
 801f9f0:	461a      	mov	r2, r3
 801f9f2:	697b      	ldr	r3, [r7, #20]
 801f9f4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801f9f6:	887b      	ldrh	r3, [r7, #2]
 801f9f8:	4618      	mov	r0, r3
 801f9fa:	f7f7 fabb 	bl	8016f74 <lwip_htons>
 801f9fe:	4603      	mov	r3, r0
 801fa00:	461a      	mov	r2, r3
 801fa02:	697b      	ldr	r3, [r7, #20]
 801fa04:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801fa06:	697b      	ldr	r3, [r7, #20]
 801fa08:	2200      	movs	r2, #0
 801fa0a:	719a      	strb	r2, [r3, #6]
 801fa0c:	2200      	movs	r2, #0
 801fa0e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801fa10:	69fb      	ldr	r3, [r7, #28]
 801fa12:	891b      	ldrh	r3, [r3, #8]
 801fa14:	4618      	mov	r0, r3
 801fa16:	f7f7 faad 	bl	8016f74 <lwip_htons>
 801fa1a:	4603      	mov	r3, r0
 801fa1c:	461a      	mov	r2, r3
 801fa1e:	697b      	ldr	r3, [r7, #20]
 801fa20:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801fa22:	2311      	movs	r3, #17
 801fa24:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801fa26:	68fb      	ldr	r3, [r7, #12]
 801fa28:	7adb      	ldrb	r3, [r3, #11]
 801fa2a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801fa2c:	68fb      	ldr	r3, [r7, #12]
 801fa2e:	7a9b      	ldrb	r3, [r3, #10]
 801fa30:	7cb9      	ldrb	r1, [r7, #18]
 801fa32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801fa34:	9202      	str	r2, [sp, #8]
 801fa36:	7cfa      	ldrb	r2, [r7, #19]
 801fa38:	9201      	str	r2, [sp, #4]
 801fa3a:	9300      	str	r3, [sp, #0]
 801fa3c:	460b      	mov	r3, r1
 801fa3e:	687a      	ldr	r2, [r7, #4]
 801fa40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801fa42:	69f8      	ldr	r0, [r7, #28]
 801fa44:	f003 fb5c 	bl	8023100 <ip4_output_if_src>
 801fa48:	4603      	mov	r3, r0
 801fa4a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801fa4c:	69fa      	ldr	r2, [r7, #28]
 801fa4e:	68bb      	ldr	r3, [r7, #8]
 801fa50:	429a      	cmp	r2, r3
 801fa52:	d004      	beq.n	801fa5e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801fa54:	69f8      	ldr	r0, [r7, #28]
 801fa56:	f7f8 feb1 	bl	80187bc <pbuf_free>
    q = NULL;
 801fa5a:	2300      	movs	r3, #0
 801fa5c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801fa5e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801fa62:	4618      	mov	r0, r3
 801fa64:	3720      	adds	r7, #32
 801fa66:	46bd      	mov	sp, r7
 801fa68:	bd80      	pop	{r7, pc}
 801fa6a:	bf00      	nop
 801fa6c:	0802ac00 	.word	0x0802ac00
 801fa70:	0802adec 	.word	0x0802adec
 801fa74:	0802ac54 	.word	0x0802ac54
 801fa78:	0802ae0c 	.word	0x0802ae0c
 801fa7c:	0802ae2c 	.word	0x0802ae2c
 801fa80:	0802ae50 	.word	0x0802ae50
 801fa84:	0802ae74 	.word	0x0802ae74
 801fa88:	0802ae98 	.word	0x0802ae98

0801fa8c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801fa8c:	b580      	push	{r7, lr}
 801fa8e:	b086      	sub	sp, #24
 801fa90:	af00      	add	r7, sp, #0
 801fa92:	60f8      	str	r0, [r7, #12]
 801fa94:	60b9      	str	r1, [r7, #8]
 801fa96:	4613      	mov	r3, r2
 801fa98:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801fa9a:	68bb      	ldr	r3, [r7, #8]
 801fa9c:	2b00      	cmp	r3, #0
 801fa9e:	d101      	bne.n	801faa4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801faa0:	4b39      	ldr	r3, [pc, #228]	; (801fb88 <udp_bind+0xfc>)
 801faa2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801faa4:	68fb      	ldr	r3, [r7, #12]
 801faa6:	2b00      	cmp	r3, #0
 801faa8:	d109      	bne.n	801fabe <udp_bind+0x32>
 801faaa:	4b38      	ldr	r3, [pc, #224]	; (801fb8c <udp_bind+0x100>)
 801faac:	f240 32b7 	movw	r2, #951	; 0x3b7
 801fab0:	4937      	ldr	r1, [pc, #220]	; (801fb90 <udp_bind+0x104>)
 801fab2:	4838      	ldr	r0, [pc, #224]	; (801fb94 <udp_bind+0x108>)
 801fab4:	f006 ff70 	bl	8026998 <iprintf>
 801fab8:	f06f 030f 	mvn.w	r3, #15
 801fabc:	e060      	b.n	801fb80 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801fabe:	2300      	movs	r3, #0
 801fac0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fac2:	4b35      	ldr	r3, [pc, #212]	; (801fb98 <udp_bind+0x10c>)
 801fac4:	681b      	ldr	r3, [r3, #0]
 801fac6:	617b      	str	r3, [r7, #20]
 801fac8:	e009      	b.n	801fade <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801faca:	68fa      	ldr	r2, [r7, #12]
 801facc:	697b      	ldr	r3, [r7, #20]
 801face:	429a      	cmp	r2, r3
 801fad0:	d102      	bne.n	801fad8 <udp_bind+0x4c>
      rebind = 1;
 801fad2:	2301      	movs	r3, #1
 801fad4:	74fb      	strb	r3, [r7, #19]
      break;
 801fad6:	e005      	b.n	801fae4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fad8:	697b      	ldr	r3, [r7, #20]
 801fada:	68db      	ldr	r3, [r3, #12]
 801fadc:	617b      	str	r3, [r7, #20]
 801fade:	697b      	ldr	r3, [r7, #20]
 801fae0:	2b00      	cmp	r3, #0
 801fae2:	d1f2      	bne.n	801faca <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801fae4:	88fb      	ldrh	r3, [r7, #6]
 801fae6:	2b00      	cmp	r3, #0
 801fae8:	d109      	bne.n	801fafe <udp_bind+0x72>
    port = udp_new_port();
 801faea:	f7ff fc35 	bl	801f358 <udp_new_port>
 801faee:	4603      	mov	r3, r0
 801faf0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801faf2:	88fb      	ldrh	r3, [r7, #6]
 801faf4:	2b00      	cmp	r3, #0
 801faf6:	d12c      	bne.n	801fb52 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801faf8:	f06f 0307 	mvn.w	r3, #7
 801fafc:	e040      	b.n	801fb80 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fafe:	4b26      	ldr	r3, [pc, #152]	; (801fb98 <udp_bind+0x10c>)
 801fb00:	681b      	ldr	r3, [r3, #0]
 801fb02:	617b      	str	r3, [r7, #20]
 801fb04:	e022      	b.n	801fb4c <udp_bind+0xc0>
      if (pcb != ipcb) {
 801fb06:	68fa      	ldr	r2, [r7, #12]
 801fb08:	697b      	ldr	r3, [r7, #20]
 801fb0a:	429a      	cmp	r2, r3
 801fb0c:	d01b      	beq.n	801fb46 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801fb0e:	697b      	ldr	r3, [r7, #20]
 801fb10:	8a5b      	ldrh	r3, [r3, #18]
 801fb12:	88fa      	ldrh	r2, [r7, #6]
 801fb14:	429a      	cmp	r2, r3
 801fb16:	d116      	bne.n	801fb46 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fb18:	697b      	ldr	r3, [r7, #20]
 801fb1a:	681a      	ldr	r2, [r3, #0]
 801fb1c:	68bb      	ldr	r3, [r7, #8]
 801fb1e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801fb20:	429a      	cmp	r2, r3
 801fb22:	d00d      	beq.n	801fb40 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fb24:	68bb      	ldr	r3, [r7, #8]
 801fb26:	2b00      	cmp	r3, #0
 801fb28:	d00a      	beq.n	801fb40 <udp_bind+0xb4>
 801fb2a:	68bb      	ldr	r3, [r7, #8]
 801fb2c:	681b      	ldr	r3, [r3, #0]
 801fb2e:	2b00      	cmp	r3, #0
 801fb30:	d006      	beq.n	801fb40 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801fb32:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fb34:	2b00      	cmp	r3, #0
 801fb36:	d003      	beq.n	801fb40 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801fb38:	697b      	ldr	r3, [r7, #20]
 801fb3a:	681b      	ldr	r3, [r3, #0]
 801fb3c:	2b00      	cmp	r3, #0
 801fb3e:	d102      	bne.n	801fb46 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801fb40:	f06f 0307 	mvn.w	r3, #7
 801fb44:	e01c      	b.n	801fb80 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fb46:	697b      	ldr	r3, [r7, #20]
 801fb48:	68db      	ldr	r3, [r3, #12]
 801fb4a:	617b      	str	r3, [r7, #20]
 801fb4c:	697b      	ldr	r3, [r7, #20]
 801fb4e:	2b00      	cmp	r3, #0
 801fb50:	d1d9      	bne.n	801fb06 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801fb52:	68bb      	ldr	r3, [r7, #8]
 801fb54:	2b00      	cmp	r3, #0
 801fb56:	d002      	beq.n	801fb5e <udp_bind+0xd2>
 801fb58:	68bb      	ldr	r3, [r7, #8]
 801fb5a:	681b      	ldr	r3, [r3, #0]
 801fb5c:	e000      	b.n	801fb60 <udp_bind+0xd4>
 801fb5e:	2300      	movs	r3, #0
 801fb60:	68fa      	ldr	r2, [r7, #12]
 801fb62:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801fb64:	68fb      	ldr	r3, [r7, #12]
 801fb66:	88fa      	ldrh	r2, [r7, #6]
 801fb68:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801fb6a:	7cfb      	ldrb	r3, [r7, #19]
 801fb6c:	2b00      	cmp	r3, #0
 801fb6e:	d106      	bne.n	801fb7e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801fb70:	4b09      	ldr	r3, [pc, #36]	; (801fb98 <udp_bind+0x10c>)
 801fb72:	681a      	ldr	r2, [r3, #0]
 801fb74:	68fb      	ldr	r3, [r7, #12]
 801fb76:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801fb78:	4a07      	ldr	r2, [pc, #28]	; (801fb98 <udp_bind+0x10c>)
 801fb7a:	68fb      	ldr	r3, [r7, #12]
 801fb7c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801fb7e:	2300      	movs	r3, #0
}
 801fb80:	4618      	mov	r0, r3
 801fb82:	3718      	adds	r7, #24
 801fb84:	46bd      	mov	sp, r7
 801fb86:	bd80      	pop	{r7, pc}
 801fb88:	0802bdd8 	.word	0x0802bdd8
 801fb8c:	0802ac00 	.word	0x0802ac00
 801fb90:	0802aec8 	.word	0x0802aec8
 801fb94:	0802ac54 	.word	0x0802ac54
 801fb98:	2001a00c 	.word	0x2001a00c

0801fb9c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801fb9c:	b580      	push	{r7, lr}
 801fb9e:	b086      	sub	sp, #24
 801fba0:	af00      	add	r7, sp, #0
 801fba2:	60f8      	str	r0, [r7, #12]
 801fba4:	60b9      	str	r1, [r7, #8]
 801fba6:	4613      	mov	r3, r2
 801fba8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801fbaa:	68fb      	ldr	r3, [r7, #12]
 801fbac:	2b00      	cmp	r3, #0
 801fbae:	d109      	bne.n	801fbc4 <udp_connect+0x28>
 801fbb0:	4b2c      	ldr	r3, [pc, #176]	; (801fc64 <udp_connect+0xc8>)
 801fbb2:	f240 4235 	movw	r2, #1077	; 0x435
 801fbb6:	492c      	ldr	r1, [pc, #176]	; (801fc68 <udp_connect+0xcc>)
 801fbb8:	482c      	ldr	r0, [pc, #176]	; (801fc6c <udp_connect+0xd0>)
 801fbba:	f006 feed 	bl	8026998 <iprintf>
 801fbbe:	f06f 030f 	mvn.w	r3, #15
 801fbc2:	e04b      	b.n	801fc5c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801fbc4:	68bb      	ldr	r3, [r7, #8]
 801fbc6:	2b00      	cmp	r3, #0
 801fbc8:	d109      	bne.n	801fbde <udp_connect+0x42>
 801fbca:	4b26      	ldr	r3, [pc, #152]	; (801fc64 <udp_connect+0xc8>)
 801fbcc:	f240 4236 	movw	r2, #1078	; 0x436
 801fbd0:	4927      	ldr	r1, [pc, #156]	; (801fc70 <udp_connect+0xd4>)
 801fbd2:	4826      	ldr	r0, [pc, #152]	; (801fc6c <udp_connect+0xd0>)
 801fbd4:	f006 fee0 	bl	8026998 <iprintf>
 801fbd8:	f06f 030f 	mvn.w	r3, #15
 801fbdc:	e03e      	b.n	801fc5c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801fbde:	68fb      	ldr	r3, [r7, #12]
 801fbe0:	8a5b      	ldrh	r3, [r3, #18]
 801fbe2:	2b00      	cmp	r3, #0
 801fbe4:	d10f      	bne.n	801fc06 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801fbe6:	68f9      	ldr	r1, [r7, #12]
 801fbe8:	68fb      	ldr	r3, [r7, #12]
 801fbea:	8a5b      	ldrh	r3, [r3, #18]
 801fbec:	461a      	mov	r2, r3
 801fbee:	68f8      	ldr	r0, [r7, #12]
 801fbf0:	f7ff ff4c 	bl	801fa8c <udp_bind>
 801fbf4:	4603      	mov	r3, r0
 801fbf6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801fbf8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801fbfc:	2b00      	cmp	r3, #0
 801fbfe:	d002      	beq.n	801fc06 <udp_connect+0x6a>
      return err;
 801fc00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801fc04:	e02a      	b.n	801fc5c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801fc06:	68bb      	ldr	r3, [r7, #8]
 801fc08:	2b00      	cmp	r3, #0
 801fc0a:	d002      	beq.n	801fc12 <udp_connect+0x76>
 801fc0c:	68bb      	ldr	r3, [r7, #8]
 801fc0e:	681b      	ldr	r3, [r3, #0]
 801fc10:	e000      	b.n	801fc14 <udp_connect+0x78>
 801fc12:	2300      	movs	r3, #0
 801fc14:	68fa      	ldr	r2, [r7, #12]
 801fc16:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801fc18:	68fb      	ldr	r3, [r7, #12]
 801fc1a:	88fa      	ldrh	r2, [r7, #6]
 801fc1c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801fc1e:	68fb      	ldr	r3, [r7, #12]
 801fc20:	7c1b      	ldrb	r3, [r3, #16]
 801fc22:	f043 0304 	orr.w	r3, r3, #4
 801fc26:	b2da      	uxtb	r2, r3
 801fc28:	68fb      	ldr	r3, [r7, #12]
 801fc2a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fc2c:	4b11      	ldr	r3, [pc, #68]	; (801fc74 <udp_connect+0xd8>)
 801fc2e:	681b      	ldr	r3, [r3, #0]
 801fc30:	617b      	str	r3, [r7, #20]
 801fc32:	e008      	b.n	801fc46 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801fc34:	68fa      	ldr	r2, [r7, #12]
 801fc36:	697b      	ldr	r3, [r7, #20]
 801fc38:	429a      	cmp	r2, r3
 801fc3a:	d101      	bne.n	801fc40 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801fc3c:	2300      	movs	r3, #0
 801fc3e:	e00d      	b.n	801fc5c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fc40:	697b      	ldr	r3, [r7, #20]
 801fc42:	68db      	ldr	r3, [r3, #12]
 801fc44:	617b      	str	r3, [r7, #20]
 801fc46:	697b      	ldr	r3, [r7, #20]
 801fc48:	2b00      	cmp	r3, #0
 801fc4a:	d1f3      	bne.n	801fc34 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801fc4c:	4b09      	ldr	r3, [pc, #36]	; (801fc74 <udp_connect+0xd8>)
 801fc4e:	681a      	ldr	r2, [r3, #0]
 801fc50:	68fb      	ldr	r3, [r7, #12]
 801fc52:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801fc54:	4a07      	ldr	r2, [pc, #28]	; (801fc74 <udp_connect+0xd8>)
 801fc56:	68fb      	ldr	r3, [r7, #12]
 801fc58:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801fc5a:	2300      	movs	r3, #0
}
 801fc5c:	4618      	mov	r0, r3
 801fc5e:	3718      	adds	r7, #24
 801fc60:	46bd      	mov	sp, r7
 801fc62:	bd80      	pop	{r7, pc}
 801fc64:	0802ac00 	.word	0x0802ac00
 801fc68:	0802aee0 	.word	0x0802aee0
 801fc6c:	0802ac54 	.word	0x0802ac54
 801fc70:	0802aefc 	.word	0x0802aefc
 801fc74:	2001a00c 	.word	0x2001a00c

0801fc78 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801fc78:	b580      	push	{r7, lr}
 801fc7a:	b082      	sub	sp, #8
 801fc7c:	af00      	add	r7, sp, #0
 801fc7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801fc80:	687b      	ldr	r3, [r7, #4]
 801fc82:	2b00      	cmp	r3, #0
 801fc84:	d107      	bne.n	801fc96 <udp_disconnect+0x1e>
 801fc86:	4b0d      	ldr	r3, [pc, #52]	; (801fcbc <udp_disconnect+0x44>)
 801fc88:	f240 426a 	movw	r2, #1130	; 0x46a
 801fc8c:	490c      	ldr	r1, [pc, #48]	; (801fcc0 <udp_disconnect+0x48>)
 801fc8e:	480d      	ldr	r0, [pc, #52]	; (801fcc4 <udp_disconnect+0x4c>)
 801fc90:	f006 fe82 	bl	8026998 <iprintf>
 801fc94:	e00f      	b.n	801fcb6 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801fc96:	687b      	ldr	r3, [r7, #4]
 801fc98:	2200      	movs	r2, #0
 801fc9a:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 801fc9c:	687b      	ldr	r3, [r7, #4]
 801fc9e:	2200      	movs	r2, #0
 801fca0:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801fca2:	687b      	ldr	r3, [r7, #4]
 801fca4:	2200      	movs	r2, #0
 801fca6:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801fca8:	687b      	ldr	r3, [r7, #4]
 801fcaa:	7c1b      	ldrb	r3, [r3, #16]
 801fcac:	f023 0304 	bic.w	r3, r3, #4
 801fcb0:	b2da      	uxtb	r2, r3
 801fcb2:	687b      	ldr	r3, [r7, #4]
 801fcb4:	741a      	strb	r2, [r3, #16]
}
 801fcb6:	3708      	adds	r7, #8
 801fcb8:	46bd      	mov	sp, r7
 801fcba:	bd80      	pop	{r7, pc}
 801fcbc:	0802ac00 	.word	0x0802ac00
 801fcc0:	0802af18 	.word	0x0802af18
 801fcc4:	0802ac54 	.word	0x0802ac54

0801fcc8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801fcc8:	b580      	push	{r7, lr}
 801fcca:	b084      	sub	sp, #16
 801fccc:	af00      	add	r7, sp, #0
 801fcce:	60f8      	str	r0, [r7, #12]
 801fcd0:	60b9      	str	r1, [r7, #8]
 801fcd2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801fcd4:	68fb      	ldr	r3, [r7, #12]
 801fcd6:	2b00      	cmp	r3, #0
 801fcd8:	d107      	bne.n	801fcea <udp_recv+0x22>
 801fcda:	4b08      	ldr	r3, [pc, #32]	; (801fcfc <udp_recv+0x34>)
 801fcdc:	f240 428a 	movw	r2, #1162	; 0x48a
 801fce0:	4907      	ldr	r1, [pc, #28]	; (801fd00 <udp_recv+0x38>)
 801fce2:	4808      	ldr	r0, [pc, #32]	; (801fd04 <udp_recv+0x3c>)
 801fce4:	f006 fe58 	bl	8026998 <iprintf>
 801fce8:	e005      	b.n	801fcf6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801fcea:	68fb      	ldr	r3, [r7, #12]
 801fcec:	68ba      	ldr	r2, [r7, #8]
 801fcee:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801fcf0:	68fb      	ldr	r3, [r7, #12]
 801fcf2:	687a      	ldr	r2, [r7, #4]
 801fcf4:	61da      	str	r2, [r3, #28]
}
 801fcf6:	3710      	adds	r7, #16
 801fcf8:	46bd      	mov	sp, r7
 801fcfa:	bd80      	pop	{r7, pc}
 801fcfc:	0802ac00 	.word	0x0802ac00
 801fd00:	0802af34 	.word	0x0802af34
 801fd04:	0802ac54 	.word	0x0802ac54

0801fd08 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801fd08:	b580      	push	{r7, lr}
 801fd0a:	b084      	sub	sp, #16
 801fd0c:	af00      	add	r7, sp, #0
 801fd0e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801fd10:	687b      	ldr	r3, [r7, #4]
 801fd12:	2b00      	cmp	r3, #0
 801fd14:	d107      	bne.n	801fd26 <udp_remove+0x1e>
 801fd16:	4b19      	ldr	r3, [pc, #100]	; (801fd7c <udp_remove+0x74>)
 801fd18:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801fd1c:	4918      	ldr	r1, [pc, #96]	; (801fd80 <udp_remove+0x78>)
 801fd1e:	4819      	ldr	r0, [pc, #100]	; (801fd84 <udp_remove+0x7c>)
 801fd20:	f006 fe3a 	bl	8026998 <iprintf>
 801fd24:	e026      	b.n	801fd74 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801fd26:	4b18      	ldr	r3, [pc, #96]	; (801fd88 <udp_remove+0x80>)
 801fd28:	681b      	ldr	r3, [r3, #0]
 801fd2a:	687a      	ldr	r2, [r7, #4]
 801fd2c:	429a      	cmp	r2, r3
 801fd2e:	d105      	bne.n	801fd3c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801fd30:	4b15      	ldr	r3, [pc, #84]	; (801fd88 <udp_remove+0x80>)
 801fd32:	681b      	ldr	r3, [r3, #0]
 801fd34:	68db      	ldr	r3, [r3, #12]
 801fd36:	4a14      	ldr	r2, [pc, #80]	; (801fd88 <udp_remove+0x80>)
 801fd38:	6013      	str	r3, [r2, #0]
 801fd3a:	e017      	b.n	801fd6c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801fd3c:	4b12      	ldr	r3, [pc, #72]	; (801fd88 <udp_remove+0x80>)
 801fd3e:	681b      	ldr	r3, [r3, #0]
 801fd40:	60fb      	str	r3, [r7, #12]
 801fd42:	e010      	b.n	801fd66 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801fd44:	68fb      	ldr	r3, [r7, #12]
 801fd46:	68db      	ldr	r3, [r3, #12]
 801fd48:	2b00      	cmp	r3, #0
 801fd4a:	d009      	beq.n	801fd60 <udp_remove+0x58>
 801fd4c:	68fb      	ldr	r3, [r7, #12]
 801fd4e:	68db      	ldr	r3, [r3, #12]
 801fd50:	687a      	ldr	r2, [r7, #4]
 801fd52:	429a      	cmp	r2, r3
 801fd54:	d104      	bne.n	801fd60 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801fd56:	687b      	ldr	r3, [r7, #4]
 801fd58:	68da      	ldr	r2, [r3, #12]
 801fd5a:	68fb      	ldr	r3, [r7, #12]
 801fd5c:	60da      	str	r2, [r3, #12]
        break;
 801fd5e:	e005      	b.n	801fd6c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801fd60:	68fb      	ldr	r3, [r7, #12]
 801fd62:	68db      	ldr	r3, [r3, #12]
 801fd64:	60fb      	str	r3, [r7, #12]
 801fd66:	68fb      	ldr	r3, [r7, #12]
 801fd68:	2b00      	cmp	r3, #0
 801fd6a:	d1eb      	bne.n	801fd44 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801fd6c:	6879      	ldr	r1, [r7, #4]
 801fd6e:	2000      	movs	r0, #0
 801fd70:	f7f7 fe76 	bl	8017a60 <memp_free>
}
 801fd74:	3710      	adds	r7, #16
 801fd76:	46bd      	mov	sp, r7
 801fd78:	bd80      	pop	{r7, pc}
 801fd7a:	bf00      	nop
 801fd7c:	0802ac00 	.word	0x0802ac00
 801fd80:	0802af4c 	.word	0x0802af4c
 801fd84:	0802ac54 	.word	0x0802ac54
 801fd88:	2001a00c 	.word	0x2001a00c

0801fd8c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801fd8c:	b580      	push	{r7, lr}
 801fd8e:	b082      	sub	sp, #8
 801fd90:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801fd92:	2000      	movs	r0, #0
 801fd94:	f7f7 fe12 	bl	80179bc <memp_malloc>
 801fd98:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801fd9a:	687b      	ldr	r3, [r7, #4]
 801fd9c:	2b00      	cmp	r3, #0
 801fd9e:	d007      	beq.n	801fdb0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801fda0:	2220      	movs	r2, #32
 801fda2:	2100      	movs	r1, #0
 801fda4:	6878      	ldr	r0, [r7, #4]
 801fda6:	f006 fd47 	bl	8026838 <memset>
    pcb->ttl = UDP_TTL;
 801fdaa:	687b      	ldr	r3, [r7, #4]
 801fdac:	22ff      	movs	r2, #255	; 0xff
 801fdae:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801fdb0:	687b      	ldr	r3, [r7, #4]
}
 801fdb2:	4618      	mov	r0, r3
 801fdb4:	3708      	adds	r7, #8
 801fdb6:	46bd      	mov	sp, r7
 801fdb8:	bd80      	pop	{r7, pc}

0801fdba <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801fdba:	b580      	push	{r7, lr}
 801fdbc:	b084      	sub	sp, #16
 801fdbe:	af00      	add	r7, sp, #0
 801fdc0:	4603      	mov	r3, r0
 801fdc2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801fdc4:	f7ff ffe2 	bl	801fd8c <udp_new>
 801fdc8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801fdca:	68fb      	ldr	r3, [r7, #12]
}
 801fdcc:	4618      	mov	r0, r3
 801fdce:	3710      	adds	r7, #16
 801fdd0:	46bd      	mov	sp, r7
 801fdd2:	bd80      	pop	{r7, pc}

0801fdd4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801fdd4:	b480      	push	{r7}
 801fdd6:	b085      	sub	sp, #20
 801fdd8:	af00      	add	r7, sp, #0
 801fdda:	6078      	str	r0, [r7, #4]
 801fddc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801fdde:	687b      	ldr	r3, [r7, #4]
 801fde0:	2b00      	cmp	r3, #0
 801fde2:	d01e      	beq.n	801fe22 <udp_netif_ip_addr_changed+0x4e>
 801fde4:	687b      	ldr	r3, [r7, #4]
 801fde6:	681b      	ldr	r3, [r3, #0]
 801fde8:	2b00      	cmp	r3, #0
 801fdea:	d01a      	beq.n	801fe22 <udp_netif_ip_addr_changed+0x4e>
 801fdec:	683b      	ldr	r3, [r7, #0]
 801fdee:	2b00      	cmp	r3, #0
 801fdf0:	d017      	beq.n	801fe22 <udp_netif_ip_addr_changed+0x4e>
 801fdf2:	683b      	ldr	r3, [r7, #0]
 801fdf4:	681b      	ldr	r3, [r3, #0]
 801fdf6:	2b00      	cmp	r3, #0
 801fdf8:	d013      	beq.n	801fe22 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801fdfa:	4b0d      	ldr	r3, [pc, #52]	; (801fe30 <udp_netif_ip_addr_changed+0x5c>)
 801fdfc:	681b      	ldr	r3, [r3, #0]
 801fdfe:	60fb      	str	r3, [r7, #12]
 801fe00:	e00c      	b.n	801fe1c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801fe02:	68fb      	ldr	r3, [r7, #12]
 801fe04:	681a      	ldr	r2, [r3, #0]
 801fe06:	687b      	ldr	r3, [r7, #4]
 801fe08:	681b      	ldr	r3, [r3, #0]
 801fe0a:	429a      	cmp	r2, r3
 801fe0c:	d103      	bne.n	801fe16 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801fe0e:	683b      	ldr	r3, [r7, #0]
 801fe10:	681a      	ldr	r2, [r3, #0]
 801fe12:	68fb      	ldr	r3, [r7, #12]
 801fe14:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801fe16:	68fb      	ldr	r3, [r7, #12]
 801fe18:	68db      	ldr	r3, [r3, #12]
 801fe1a:	60fb      	str	r3, [r7, #12]
 801fe1c:	68fb      	ldr	r3, [r7, #12]
 801fe1e:	2b00      	cmp	r3, #0
 801fe20:	d1ef      	bne.n	801fe02 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801fe22:	bf00      	nop
 801fe24:	3714      	adds	r7, #20
 801fe26:	46bd      	mov	sp, r7
 801fe28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe2c:	4770      	bx	lr
 801fe2e:	bf00      	nop
 801fe30:	2001a00c 	.word	0x2001a00c

0801fe34 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801fe34:	b580      	push	{r7, lr}
 801fe36:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801fe38:	4b20      	ldr	r3, [pc, #128]	; (801febc <dhcp_inc_pcb_refcount+0x88>)
 801fe3a:	781b      	ldrb	r3, [r3, #0]
 801fe3c:	2b00      	cmp	r3, #0
 801fe3e:	d133      	bne.n	801fea8 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801fe40:	4b1f      	ldr	r3, [pc, #124]	; (801fec0 <dhcp_inc_pcb_refcount+0x8c>)
 801fe42:	681b      	ldr	r3, [r3, #0]
 801fe44:	2b00      	cmp	r3, #0
 801fe46:	d005      	beq.n	801fe54 <dhcp_inc_pcb_refcount+0x20>
 801fe48:	4b1e      	ldr	r3, [pc, #120]	; (801fec4 <dhcp_inc_pcb_refcount+0x90>)
 801fe4a:	22e5      	movs	r2, #229	; 0xe5
 801fe4c:	491e      	ldr	r1, [pc, #120]	; (801fec8 <dhcp_inc_pcb_refcount+0x94>)
 801fe4e:	481f      	ldr	r0, [pc, #124]	; (801fecc <dhcp_inc_pcb_refcount+0x98>)
 801fe50:	f006 fda2 	bl	8026998 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801fe54:	f7ff ff9a 	bl	801fd8c <udp_new>
 801fe58:	4602      	mov	r2, r0
 801fe5a:	4b19      	ldr	r3, [pc, #100]	; (801fec0 <dhcp_inc_pcb_refcount+0x8c>)
 801fe5c:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 801fe5e:	4b18      	ldr	r3, [pc, #96]	; (801fec0 <dhcp_inc_pcb_refcount+0x8c>)
 801fe60:	681b      	ldr	r3, [r3, #0]
 801fe62:	2b00      	cmp	r3, #0
 801fe64:	d102      	bne.n	801fe6c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801fe66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fe6a:	e024      	b.n	801feb6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801fe6c:	4b14      	ldr	r3, [pc, #80]	; (801fec0 <dhcp_inc_pcb_refcount+0x8c>)
 801fe6e:	681b      	ldr	r3, [r3, #0]
 801fe70:	7a5a      	ldrb	r2, [r3, #9]
 801fe72:	4b13      	ldr	r3, [pc, #76]	; (801fec0 <dhcp_inc_pcb_refcount+0x8c>)
 801fe74:	681b      	ldr	r3, [r3, #0]
 801fe76:	f042 0220 	orr.w	r2, r2, #32
 801fe7a:	b2d2      	uxtb	r2, r2
 801fe7c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801fe7e:	4b10      	ldr	r3, [pc, #64]	; (801fec0 <dhcp_inc_pcb_refcount+0x8c>)
 801fe80:	681b      	ldr	r3, [r3, #0]
 801fe82:	2244      	movs	r2, #68	; 0x44
 801fe84:	4912      	ldr	r1, [pc, #72]	; (801fed0 <dhcp_inc_pcb_refcount+0x9c>)
 801fe86:	4618      	mov	r0, r3
 801fe88:	f7ff fe00 	bl	801fa8c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801fe8c:	4b0c      	ldr	r3, [pc, #48]	; (801fec0 <dhcp_inc_pcb_refcount+0x8c>)
 801fe8e:	681b      	ldr	r3, [r3, #0]
 801fe90:	2243      	movs	r2, #67	; 0x43
 801fe92:	490f      	ldr	r1, [pc, #60]	; (801fed0 <dhcp_inc_pcb_refcount+0x9c>)
 801fe94:	4618      	mov	r0, r3
 801fe96:	f7ff fe81 	bl	801fb9c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801fe9a:	4b09      	ldr	r3, [pc, #36]	; (801fec0 <dhcp_inc_pcb_refcount+0x8c>)
 801fe9c:	681b      	ldr	r3, [r3, #0]
 801fe9e:	2200      	movs	r2, #0
 801fea0:	490c      	ldr	r1, [pc, #48]	; (801fed4 <dhcp_inc_pcb_refcount+0xa0>)
 801fea2:	4618      	mov	r0, r3
 801fea4:	f7ff ff10 	bl	801fcc8 <udp_recv>
  }

  dhcp_pcb_refcount++;
 801fea8:	4b04      	ldr	r3, [pc, #16]	; (801febc <dhcp_inc_pcb_refcount+0x88>)
 801feaa:	781b      	ldrb	r3, [r3, #0]
 801feac:	3301      	adds	r3, #1
 801feae:	b2da      	uxtb	r2, r3
 801feb0:	4b02      	ldr	r3, [pc, #8]	; (801febc <dhcp_inc_pcb_refcount+0x88>)
 801feb2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801feb4:	2300      	movs	r3, #0
}
 801feb6:	4618      	mov	r0, r3
 801feb8:	bd80      	pop	{r7, pc}
 801feba:	bf00      	nop
 801febc:	20013208 	.word	0x20013208
 801fec0:	20013204 	.word	0x20013204
 801fec4:	0802af64 	.word	0x0802af64
 801fec8:	0802af9c 	.word	0x0802af9c
 801fecc:	0802afc4 	.word	0x0802afc4
 801fed0:	0802bdd8 	.word	0x0802bdd8
 801fed4:	08021721 	.word	0x08021721

0801fed8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801fed8:	b580      	push	{r7, lr}
 801feda:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801fedc:	4b0e      	ldr	r3, [pc, #56]	; (801ff18 <dhcp_dec_pcb_refcount+0x40>)
 801fede:	781b      	ldrb	r3, [r3, #0]
 801fee0:	2b00      	cmp	r3, #0
 801fee2:	d105      	bne.n	801fef0 <dhcp_dec_pcb_refcount+0x18>
 801fee4:	4b0d      	ldr	r3, [pc, #52]	; (801ff1c <dhcp_dec_pcb_refcount+0x44>)
 801fee6:	22ff      	movs	r2, #255	; 0xff
 801fee8:	490d      	ldr	r1, [pc, #52]	; (801ff20 <dhcp_dec_pcb_refcount+0x48>)
 801feea:	480e      	ldr	r0, [pc, #56]	; (801ff24 <dhcp_dec_pcb_refcount+0x4c>)
 801feec:	f006 fd54 	bl	8026998 <iprintf>
  dhcp_pcb_refcount--;
 801fef0:	4b09      	ldr	r3, [pc, #36]	; (801ff18 <dhcp_dec_pcb_refcount+0x40>)
 801fef2:	781b      	ldrb	r3, [r3, #0]
 801fef4:	3b01      	subs	r3, #1
 801fef6:	b2da      	uxtb	r2, r3
 801fef8:	4b07      	ldr	r3, [pc, #28]	; (801ff18 <dhcp_dec_pcb_refcount+0x40>)
 801fefa:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801fefc:	4b06      	ldr	r3, [pc, #24]	; (801ff18 <dhcp_dec_pcb_refcount+0x40>)
 801fefe:	781b      	ldrb	r3, [r3, #0]
 801ff00:	2b00      	cmp	r3, #0
 801ff02:	d107      	bne.n	801ff14 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801ff04:	4b08      	ldr	r3, [pc, #32]	; (801ff28 <dhcp_dec_pcb_refcount+0x50>)
 801ff06:	681b      	ldr	r3, [r3, #0]
 801ff08:	4618      	mov	r0, r3
 801ff0a:	f7ff fefd 	bl	801fd08 <udp_remove>
    dhcp_pcb = NULL;
 801ff0e:	4b06      	ldr	r3, [pc, #24]	; (801ff28 <dhcp_dec_pcb_refcount+0x50>)
 801ff10:	2200      	movs	r2, #0
 801ff12:	601a      	str	r2, [r3, #0]
  }
}
 801ff14:	bf00      	nop
 801ff16:	bd80      	pop	{r7, pc}
 801ff18:	20013208 	.word	0x20013208
 801ff1c:	0802af64 	.word	0x0802af64
 801ff20:	0802afec 	.word	0x0802afec
 801ff24:	0802afc4 	.word	0x0802afc4
 801ff28:	20013204 	.word	0x20013204

0801ff2c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801ff2c:	b580      	push	{r7, lr}
 801ff2e:	b084      	sub	sp, #16
 801ff30:	af00      	add	r7, sp, #0
 801ff32:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ff34:	687b      	ldr	r3, [r7, #4]
 801ff36:	6a1b      	ldr	r3, [r3, #32]
 801ff38:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801ff3a:	210c      	movs	r1, #12
 801ff3c:	68f8      	ldr	r0, [r7, #12]
 801ff3e:	f001 f830 	bl	8020fa2 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801ff42:	4b06      	ldr	r3, [pc, #24]	; (801ff5c <dhcp_handle_nak+0x30>)
 801ff44:	4a05      	ldr	r2, [pc, #20]	; (801ff5c <dhcp_handle_nak+0x30>)
 801ff46:	4905      	ldr	r1, [pc, #20]	; (801ff5c <dhcp_handle_nak+0x30>)
 801ff48:	6878      	ldr	r0, [r7, #4]
 801ff4a:	f7f7 ff27 	bl	8017d9c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801ff4e:	6878      	ldr	r0, [r7, #4]
 801ff50:	f000 fc0c 	bl	802076c <dhcp_discover>
}
 801ff54:	bf00      	nop
 801ff56:	3710      	adds	r7, #16
 801ff58:	46bd      	mov	sp, r7
 801ff5a:	bd80      	pop	{r7, pc}
 801ff5c:	0802bdd8 	.word	0x0802bdd8

0801ff60 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801ff60:	b580      	push	{r7, lr}
 801ff62:	b084      	sub	sp, #16
 801ff64:	af00      	add	r7, sp, #0
 801ff66:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ff68:	687b      	ldr	r3, [r7, #4]
 801ff6a:	6a1b      	ldr	r3, [r3, #32]
 801ff6c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801ff6e:	2108      	movs	r1, #8
 801ff70:	68f8      	ldr	r0, [r7, #12]
 801ff72:	f001 f816 	bl	8020fa2 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801ff76:	68fb      	ldr	r3, [r7, #12]
 801ff78:	331c      	adds	r3, #28
 801ff7a:	2200      	movs	r2, #0
 801ff7c:	4619      	mov	r1, r3
 801ff7e:	6878      	ldr	r0, [r7, #4]
 801ff80:	f002 fb18 	bl	80225b4 <etharp_query>
 801ff84:	4603      	mov	r3, r0
 801ff86:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801ff88:	68fb      	ldr	r3, [r7, #12]
 801ff8a:	799b      	ldrb	r3, [r3, #6]
 801ff8c:	2bff      	cmp	r3, #255	; 0xff
 801ff8e:	d005      	beq.n	801ff9c <dhcp_check+0x3c>
    dhcp->tries++;
 801ff90:	68fb      	ldr	r3, [r7, #12]
 801ff92:	799b      	ldrb	r3, [r3, #6]
 801ff94:	3301      	adds	r3, #1
 801ff96:	b2da      	uxtb	r2, r3
 801ff98:	68fb      	ldr	r3, [r7, #12]
 801ff9a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801ff9c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801ffa0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801ffa2:	893b      	ldrh	r3, [r7, #8]
 801ffa4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801ffa8:	4a06      	ldr	r2, [pc, #24]	; (801ffc4 <dhcp_check+0x64>)
 801ffaa:	fb82 1203 	smull	r1, r2, r2, r3
 801ffae:	1152      	asrs	r2, r2, #5
 801ffb0:	17db      	asrs	r3, r3, #31
 801ffb2:	1ad3      	subs	r3, r2, r3
 801ffb4:	b29a      	uxth	r2, r3
 801ffb6:	68fb      	ldr	r3, [r7, #12]
 801ffb8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801ffba:	bf00      	nop
 801ffbc:	3710      	adds	r7, #16
 801ffbe:	46bd      	mov	sp, r7
 801ffc0:	bd80      	pop	{r7, pc}
 801ffc2:	bf00      	nop
 801ffc4:	10624dd3 	.word	0x10624dd3

0801ffc8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801ffc8:	b580      	push	{r7, lr}
 801ffca:	b084      	sub	sp, #16
 801ffcc:	af00      	add	r7, sp, #0
 801ffce:	6078      	str	r0, [r7, #4]
 801ffd0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ffd2:	687b      	ldr	r3, [r7, #4]
 801ffd4:	6a1b      	ldr	r3, [r3, #32]
 801ffd6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801ffd8:	4b0c      	ldr	r3, [pc, #48]	; (802000c <dhcp_handle_offer+0x44>)
 801ffda:	789b      	ldrb	r3, [r3, #2]
 801ffdc:	2b00      	cmp	r3, #0
 801ffde:	d011      	beq.n	8020004 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801ffe0:	68fb      	ldr	r3, [r7, #12]
 801ffe2:	2200      	movs	r2, #0
 801ffe4:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801ffe6:	4b0a      	ldr	r3, [pc, #40]	; (8020010 <dhcp_handle_offer+0x48>)
 801ffe8:	689b      	ldr	r3, [r3, #8]
 801ffea:	4618      	mov	r0, r3
 801ffec:	f7f6 ffd7 	bl	8016f9e <lwip_htonl>
 801fff0:	4602      	mov	r2, r0
 801fff2:	68fb      	ldr	r3, [r7, #12]
 801fff4:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801fff6:	683b      	ldr	r3, [r7, #0]
 801fff8:	691a      	ldr	r2, [r3, #16]
 801fffa:	68fb      	ldr	r3, [r7, #12]
 801fffc:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801fffe:	6878      	ldr	r0, [r7, #4]
 8020000:	f000 f808 	bl	8020014 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8020004:	bf00      	nop
 8020006:	3710      	adds	r7, #16
 8020008:	46bd      	mov	sp, r7
 802000a:	bd80      	pop	{r7, pc}
 802000c:	2001a010 	.word	0x2001a010
 8020010:	2001a018 	.word	0x2001a018

08020014 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8020014:	b5b0      	push	{r4, r5, r7, lr}
 8020016:	b08a      	sub	sp, #40	; 0x28
 8020018:	af02      	add	r7, sp, #8
 802001a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 802001c:	687b      	ldr	r3, [r7, #4]
 802001e:	2b00      	cmp	r3, #0
 8020020:	d109      	bne.n	8020036 <dhcp_select+0x22>
 8020022:	4b71      	ldr	r3, [pc, #452]	; (80201e8 <dhcp_select+0x1d4>)
 8020024:	f240 1277 	movw	r2, #375	; 0x177
 8020028:	4970      	ldr	r1, [pc, #448]	; (80201ec <dhcp_select+0x1d8>)
 802002a:	4871      	ldr	r0, [pc, #452]	; (80201f0 <dhcp_select+0x1dc>)
 802002c:	f006 fcb4 	bl	8026998 <iprintf>
 8020030:	f06f 030f 	mvn.w	r3, #15
 8020034:	e0d3      	b.n	80201de <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8020036:	687b      	ldr	r3, [r7, #4]
 8020038:	6a1b      	ldr	r3, [r3, #32]
 802003a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 802003c:	69bb      	ldr	r3, [r7, #24]
 802003e:	2b00      	cmp	r3, #0
 8020040:	d109      	bne.n	8020056 <dhcp_select+0x42>
 8020042:	4b69      	ldr	r3, [pc, #420]	; (80201e8 <dhcp_select+0x1d4>)
 8020044:	f240 1279 	movw	r2, #377	; 0x179
 8020048:	496a      	ldr	r1, [pc, #424]	; (80201f4 <dhcp_select+0x1e0>)
 802004a:	4869      	ldr	r0, [pc, #420]	; (80201f0 <dhcp_select+0x1dc>)
 802004c:	f006 fca4 	bl	8026998 <iprintf>
 8020050:	f06f 0305 	mvn.w	r3, #5
 8020054:	e0c3      	b.n	80201de <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8020056:	2101      	movs	r1, #1
 8020058:	69b8      	ldr	r0, [r7, #24]
 802005a:	f000 ffa2 	bl	8020fa2 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 802005e:	f107 030c 	add.w	r3, r7, #12
 8020062:	2203      	movs	r2, #3
 8020064:	69b9      	ldr	r1, [r7, #24]
 8020066:	6878      	ldr	r0, [r7, #4]
 8020068:	f001 fc26 	bl	80218b8 <dhcp_create_msg>
 802006c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 802006e:	697b      	ldr	r3, [r7, #20]
 8020070:	2b00      	cmp	r3, #0
 8020072:	f000 8085 	beq.w	8020180 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8020076:	697b      	ldr	r3, [r7, #20]
 8020078:	685b      	ldr	r3, [r3, #4]
 802007a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 802007c:	89b8      	ldrh	r0, [r7, #12]
 802007e:	693b      	ldr	r3, [r7, #16]
 8020080:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020084:	2302      	movs	r3, #2
 8020086:	2239      	movs	r2, #57	; 0x39
 8020088:	f000 ffa6 	bl	8020fd8 <dhcp_option>
 802008c:	4603      	mov	r3, r0
 802008e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020090:	89b8      	ldrh	r0, [r7, #12]
 8020092:	693b      	ldr	r3, [r7, #16]
 8020094:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020098:	687b      	ldr	r3, [r7, #4]
 802009a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 802009c:	461a      	mov	r2, r3
 802009e:	f000 fff5 	bl	802108c <dhcp_option_short>
 80200a2:	4603      	mov	r3, r0
 80200a4:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80200a6:	89b8      	ldrh	r0, [r7, #12]
 80200a8:	693b      	ldr	r3, [r7, #16]
 80200aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80200ae:	2304      	movs	r3, #4
 80200b0:	2232      	movs	r2, #50	; 0x32
 80200b2:	f000 ff91 	bl	8020fd8 <dhcp_option>
 80200b6:	4603      	mov	r3, r0
 80200b8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80200ba:	89bc      	ldrh	r4, [r7, #12]
 80200bc:	693b      	ldr	r3, [r7, #16]
 80200be:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80200c2:	69bb      	ldr	r3, [r7, #24]
 80200c4:	69db      	ldr	r3, [r3, #28]
 80200c6:	4618      	mov	r0, r3
 80200c8:	f7f6 ff69 	bl	8016f9e <lwip_htonl>
 80200cc:	4603      	mov	r3, r0
 80200ce:	461a      	mov	r2, r3
 80200d0:	4629      	mov	r1, r5
 80200d2:	4620      	mov	r0, r4
 80200d4:	f001 f80c 	bl	80210f0 <dhcp_option_long>
 80200d8:	4603      	mov	r3, r0
 80200da:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80200dc:	89b8      	ldrh	r0, [r7, #12]
 80200de:	693b      	ldr	r3, [r7, #16]
 80200e0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80200e4:	2304      	movs	r3, #4
 80200e6:	2236      	movs	r2, #54	; 0x36
 80200e8:	f000 ff76 	bl	8020fd8 <dhcp_option>
 80200ec:	4603      	mov	r3, r0
 80200ee:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80200f0:	89bc      	ldrh	r4, [r7, #12]
 80200f2:	693b      	ldr	r3, [r7, #16]
 80200f4:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80200f8:	69bb      	ldr	r3, [r7, #24]
 80200fa:	699b      	ldr	r3, [r3, #24]
 80200fc:	4618      	mov	r0, r3
 80200fe:	f7f6 ff4e 	bl	8016f9e <lwip_htonl>
 8020102:	4603      	mov	r3, r0
 8020104:	461a      	mov	r2, r3
 8020106:	4629      	mov	r1, r5
 8020108:	4620      	mov	r0, r4
 802010a:	f000 fff1 	bl	80210f0 <dhcp_option_long>
 802010e:	4603      	mov	r3, r0
 8020110:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020112:	89b8      	ldrh	r0, [r7, #12]
 8020114:	693b      	ldr	r3, [r7, #16]
 8020116:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 802011a:	2303      	movs	r3, #3
 802011c:	2237      	movs	r2, #55	; 0x37
 802011e:	f000 ff5b 	bl	8020fd8 <dhcp_option>
 8020122:	4603      	mov	r3, r0
 8020124:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020126:	2300      	movs	r3, #0
 8020128:	77bb      	strb	r3, [r7, #30]
 802012a:	e00e      	b.n	802014a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 802012c:	89b8      	ldrh	r0, [r7, #12]
 802012e:	693b      	ldr	r3, [r7, #16]
 8020130:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020134:	7fbb      	ldrb	r3, [r7, #30]
 8020136:	4a30      	ldr	r2, [pc, #192]	; (80201f8 <dhcp_select+0x1e4>)
 8020138:	5cd3      	ldrb	r3, [r2, r3]
 802013a:	461a      	mov	r2, r3
 802013c:	f000 ff80 	bl	8021040 <dhcp_option_byte>
 8020140:	4603      	mov	r3, r0
 8020142:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020144:	7fbb      	ldrb	r3, [r7, #30]
 8020146:	3301      	adds	r3, #1
 8020148:	77bb      	strb	r3, [r7, #30]
 802014a:	7fbb      	ldrb	r3, [r7, #30]
 802014c:	2b02      	cmp	r3, #2
 802014e:	d9ed      	bls.n	802012c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8020150:	89b8      	ldrh	r0, [r7, #12]
 8020152:	693b      	ldr	r3, [r7, #16]
 8020154:	33f0      	adds	r3, #240	; 0xf0
 8020156:	697a      	ldr	r2, [r7, #20]
 8020158:	4619      	mov	r1, r3
 802015a:	f001 fc83 	bl	8021a64 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 802015e:	4b27      	ldr	r3, [pc, #156]	; (80201fc <dhcp_select+0x1e8>)
 8020160:	6818      	ldr	r0, [r3, #0]
 8020162:	4b27      	ldr	r3, [pc, #156]	; (8020200 <dhcp_select+0x1ec>)
 8020164:	9301      	str	r3, [sp, #4]
 8020166:	687b      	ldr	r3, [r7, #4]
 8020168:	9300      	str	r3, [sp, #0]
 802016a:	2343      	movs	r3, #67	; 0x43
 802016c:	4a25      	ldr	r2, [pc, #148]	; (8020204 <dhcp_select+0x1f0>)
 802016e:	6979      	ldr	r1, [r7, #20]
 8020170:	f7ff fba6 	bl	801f8c0 <udp_sendto_if_src>
 8020174:	4603      	mov	r3, r0
 8020176:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8020178:	6978      	ldr	r0, [r7, #20]
 802017a:	f7f8 fb1f 	bl	80187bc <pbuf_free>
 802017e:	e001      	b.n	8020184 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8020180:	23ff      	movs	r3, #255	; 0xff
 8020182:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8020184:	69bb      	ldr	r3, [r7, #24]
 8020186:	799b      	ldrb	r3, [r3, #6]
 8020188:	2bff      	cmp	r3, #255	; 0xff
 802018a:	d005      	beq.n	8020198 <dhcp_select+0x184>
    dhcp->tries++;
 802018c:	69bb      	ldr	r3, [r7, #24]
 802018e:	799b      	ldrb	r3, [r3, #6]
 8020190:	3301      	adds	r3, #1
 8020192:	b2da      	uxtb	r2, r3
 8020194:	69bb      	ldr	r3, [r7, #24]
 8020196:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8020198:	69bb      	ldr	r3, [r7, #24]
 802019a:	799b      	ldrb	r3, [r3, #6]
 802019c:	2b05      	cmp	r3, #5
 802019e:	d80d      	bhi.n	80201bc <dhcp_select+0x1a8>
 80201a0:	69bb      	ldr	r3, [r7, #24]
 80201a2:	799b      	ldrb	r3, [r3, #6]
 80201a4:	461a      	mov	r2, r3
 80201a6:	2301      	movs	r3, #1
 80201a8:	4093      	lsls	r3, r2
 80201aa:	b29b      	uxth	r3, r3
 80201ac:	461a      	mov	r2, r3
 80201ae:	0152      	lsls	r2, r2, #5
 80201b0:	1ad2      	subs	r2, r2, r3
 80201b2:	0092      	lsls	r2, r2, #2
 80201b4:	4413      	add	r3, r2
 80201b6:	00db      	lsls	r3, r3, #3
 80201b8:	b29b      	uxth	r3, r3
 80201ba:	e001      	b.n	80201c0 <dhcp_select+0x1ac>
 80201bc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80201c0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80201c2:	89fb      	ldrh	r3, [r7, #14]
 80201c4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80201c8:	4a0f      	ldr	r2, [pc, #60]	; (8020208 <dhcp_select+0x1f4>)
 80201ca:	fb82 1203 	smull	r1, r2, r2, r3
 80201ce:	1152      	asrs	r2, r2, #5
 80201d0:	17db      	asrs	r3, r3, #31
 80201d2:	1ad3      	subs	r3, r2, r3
 80201d4:	b29a      	uxth	r2, r3
 80201d6:	69bb      	ldr	r3, [r7, #24]
 80201d8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80201da:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80201de:	4618      	mov	r0, r3
 80201e0:	3720      	adds	r7, #32
 80201e2:	46bd      	mov	sp, r7
 80201e4:	bdb0      	pop	{r4, r5, r7, pc}
 80201e6:	bf00      	nop
 80201e8:	0802af64 	.word	0x0802af64
 80201ec:	0802b010 	.word	0x0802b010
 80201f0:	0802afc4 	.word	0x0802afc4
 80201f4:	0802b02c 	.word	0x0802b02c
 80201f8:	2000001c 	.word	0x2000001c
 80201fc:	20013204 	.word	0x20013204
 8020200:	0802bdd8 	.word	0x0802bdd8
 8020204:	0802bddc 	.word	0x0802bddc
 8020208:	10624dd3 	.word	0x10624dd3

0802020c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 802020c:	b580      	push	{r7, lr}
 802020e:	b082      	sub	sp, #8
 8020210:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8020212:	4b27      	ldr	r3, [pc, #156]	; (80202b0 <dhcp_coarse_tmr+0xa4>)
 8020214:	681b      	ldr	r3, [r3, #0]
 8020216:	607b      	str	r3, [r7, #4]
 8020218:	e042      	b.n	80202a0 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 802021a:	687b      	ldr	r3, [r7, #4]
 802021c:	6a1b      	ldr	r3, [r3, #32]
 802021e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8020220:	683b      	ldr	r3, [r7, #0]
 8020222:	2b00      	cmp	r3, #0
 8020224:	d039      	beq.n	802029a <dhcp_coarse_tmr+0x8e>
 8020226:	683b      	ldr	r3, [r7, #0]
 8020228:	795b      	ldrb	r3, [r3, #5]
 802022a:	2b00      	cmp	r3, #0
 802022c:	d035      	beq.n	802029a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 802022e:	683b      	ldr	r3, [r7, #0]
 8020230:	8a9b      	ldrh	r3, [r3, #20]
 8020232:	2b00      	cmp	r3, #0
 8020234:	d012      	beq.n	802025c <dhcp_coarse_tmr+0x50>
 8020236:	683b      	ldr	r3, [r7, #0]
 8020238:	8a5b      	ldrh	r3, [r3, #18]
 802023a:	3301      	adds	r3, #1
 802023c:	b29a      	uxth	r2, r3
 802023e:	683b      	ldr	r3, [r7, #0]
 8020240:	825a      	strh	r2, [r3, #18]
 8020242:	683b      	ldr	r3, [r7, #0]
 8020244:	8a5a      	ldrh	r2, [r3, #18]
 8020246:	683b      	ldr	r3, [r7, #0]
 8020248:	8a9b      	ldrh	r3, [r3, #20]
 802024a:	429a      	cmp	r2, r3
 802024c:	d106      	bne.n	802025c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 802024e:	6878      	ldr	r0, [r7, #4]
 8020250:	f000 fdf6 	bl	8020e40 <dhcp_release_and_stop>
        dhcp_start(netif);
 8020254:	6878      	ldr	r0, [r7, #4]
 8020256:	f000 f969 	bl	802052c <dhcp_start>
 802025a:	e01e      	b.n	802029a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 802025c:	683b      	ldr	r3, [r7, #0]
 802025e:	8a1b      	ldrh	r3, [r3, #16]
 8020260:	2b00      	cmp	r3, #0
 8020262:	d00b      	beq.n	802027c <dhcp_coarse_tmr+0x70>
 8020264:	683b      	ldr	r3, [r7, #0]
 8020266:	8a1b      	ldrh	r3, [r3, #16]
 8020268:	1e5a      	subs	r2, r3, #1
 802026a:	b291      	uxth	r1, r2
 802026c:	683a      	ldr	r2, [r7, #0]
 802026e:	8211      	strh	r1, [r2, #16]
 8020270:	2b01      	cmp	r3, #1
 8020272:	d103      	bne.n	802027c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8020274:	6878      	ldr	r0, [r7, #4]
 8020276:	f000 f8c6 	bl	8020406 <dhcp_t2_timeout>
 802027a:	e00e      	b.n	802029a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 802027c:	683b      	ldr	r3, [r7, #0]
 802027e:	89db      	ldrh	r3, [r3, #14]
 8020280:	2b00      	cmp	r3, #0
 8020282:	d00a      	beq.n	802029a <dhcp_coarse_tmr+0x8e>
 8020284:	683b      	ldr	r3, [r7, #0]
 8020286:	89db      	ldrh	r3, [r3, #14]
 8020288:	1e5a      	subs	r2, r3, #1
 802028a:	b291      	uxth	r1, r2
 802028c:	683a      	ldr	r2, [r7, #0]
 802028e:	81d1      	strh	r1, [r2, #14]
 8020290:	2b01      	cmp	r3, #1
 8020292:	d102      	bne.n	802029a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8020294:	6878      	ldr	r0, [r7, #4]
 8020296:	f000 f888 	bl	80203aa <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 802029a:	687b      	ldr	r3, [r7, #4]
 802029c:	681b      	ldr	r3, [r3, #0]
 802029e:	607b      	str	r3, [r7, #4]
 80202a0:	687b      	ldr	r3, [r7, #4]
 80202a2:	2b00      	cmp	r3, #0
 80202a4:	d1b9      	bne.n	802021a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80202a6:	bf00      	nop
 80202a8:	3708      	adds	r7, #8
 80202aa:	46bd      	mov	sp, r7
 80202ac:	bd80      	pop	{r7, pc}
 80202ae:	bf00      	nop
 80202b0:	20019fe4 	.word	0x20019fe4

080202b4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80202b4:	b580      	push	{r7, lr}
 80202b6:	b082      	sub	sp, #8
 80202b8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80202ba:	4b16      	ldr	r3, [pc, #88]	; (8020314 <dhcp_fine_tmr+0x60>)
 80202bc:	681b      	ldr	r3, [r3, #0]
 80202be:	607b      	str	r3, [r7, #4]
 80202c0:	e020      	b.n	8020304 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80202c2:	687b      	ldr	r3, [r7, #4]
 80202c4:	6a1b      	ldr	r3, [r3, #32]
 80202c6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80202c8:	683b      	ldr	r3, [r7, #0]
 80202ca:	2b00      	cmp	r3, #0
 80202cc:	d017      	beq.n	80202fe <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80202ce:	683b      	ldr	r3, [r7, #0]
 80202d0:	891b      	ldrh	r3, [r3, #8]
 80202d2:	2b01      	cmp	r3, #1
 80202d4:	d906      	bls.n	80202e4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80202d6:	683b      	ldr	r3, [r7, #0]
 80202d8:	891b      	ldrh	r3, [r3, #8]
 80202da:	3b01      	subs	r3, #1
 80202dc:	b29a      	uxth	r2, r3
 80202de:	683b      	ldr	r3, [r7, #0]
 80202e0:	811a      	strh	r2, [r3, #8]
 80202e2:	e00c      	b.n	80202fe <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80202e4:	683b      	ldr	r3, [r7, #0]
 80202e6:	891b      	ldrh	r3, [r3, #8]
 80202e8:	2b01      	cmp	r3, #1
 80202ea:	d108      	bne.n	80202fe <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80202ec:	683b      	ldr	r3, [r7, #0]
 80202ee:	891b      	ldrh	r3, [r3, #8]
 80202f0:	3b01      	subs	r3, #1
 80202f2:	b29a      	uxth	r2, r3
 80202f4:	683b      	ldr	r3, [r7, #0]
 80202f6:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80202f8:	6878      	ldr	r0, [r7, #4]
 80202fa:	f000 f80d 	bl	8020318 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80202fe:	687b      	ldr	r3, [r7, #4]
 8020300:	681b      	ldr	r3, [r3, #0]
 8020302:	607b      	str	r3, [r7, #4]
 8020304:	687b      	ldr	r3, [r7, #4]
 8020306:	2b00      	cmp	r3, #0
 8020308:	d1db      	bne.n	80202c2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 802030a:	bf00      	nop
 802030c:	3708      	adds	r7, #8
 802030e:	46bd      	mov	sp, r7
 8020310:	bd80      	pop	{r7, pc}
 8020312:	bf00      	nop
 8020314:	20019fe4 	.word	0x20019fe4

08020318 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8020318:	b580      	push	{r7, lr}
 802031a:	b084      	sub	sp, #16
 802031c:	af00      	add	r7, sp, #0
 802031e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020320:	687b      	ldr	r3, [r7, #4]
 8020322:	6a1b      	ldr	r3, [r3, #32]
 8020324:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8020326:	68fb      	ldr	r3, [r7, #12]
 8020328:	795b      	ldrb	r3, [r3, #5]
 802032a:	2b0c      	cmp	r3, #12
 802032c:	d003      	beq.n	8020336 <dhcp_timeout+0x1e>
 802032e:	68fb      	ldr	r3, [r7, #12]
 8020330:	795b      	ldrb	r3, [r3, #5]
 8020332:	2b06      	cmp	r3, #6
 8020334:	d103      	bne.n	802033e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8020336:	6878      	ldr	r0, [r7, #4]
 8020338:	f000 fa18 	bl	802076c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 802033c:	e031      	b.n	80203a2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 802033e:	68fb      	ldr	r3, [r7, #12]
 8020340:	795b      	ldrb	r3, [r3, #5]
 8020342:	2b01      	cmp	r3, #1
 8020344:	d10e      	bne.n	8020364 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8020346:	68fb      	ldr	r3, [r7, #12]
 8020348:	799b      	ldrb	r3, [r3, #6]
 802034a:	2b05      	cmp	r3, #5
 802034c:	d803      	bhi.n	8020356 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 802034e:	6878      	ldr	r0, [r7, #4]
 8020350:	f7ff fe60 	bl	8020014 <dhcp_select>
}
 8020354:	e025      	b.n	80203a2 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8020356:	6878      	ldr	r0, [r7, #4]
 8020358:	f000 fd72 	bl	8020e40 <dhcp_release_and_stop>
      dhcp_start(netif);
 802035c:	6878      	ldr	r0, [r7, #4]
 802035e:	f000 f8e5 	bl	802052c <dhcp_start>
}
 8020362:	e01e      	b.n	80203a2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8020364:	68fb      	ldr	r3, [r7, #12]
 8020366:	795b      	ldrb	r3, [r3, #5]
 8020368:	2b08      	cmp	r3, #8
 802036a:	d10b      	bne.n	8020384 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 802036c:	68fb      	ldr	r3, [r7, #12]
 802036e:	799b      	ldrb	r3, [r3, #6]
 8020370:	2b01      	cmp	r3, #1
 8020372:	d803      	bhi.n	802037c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8020374:	6878      	ldr	r0, [r7, #4]
 8020376:	f7ff fdf3 	bl	801ff60 <dhcp_check>
}
 802037a:	e012      	b.n	80203a2 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 802037c:	6878      	ldr	r0, [r7, #4]
 802037e:	f000 fa97 	bl	80208b0 <dhcp_bind>
}
 8020382:	e00e      	b.n	80203a2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8020384:	68fb      	ldr	r3, [r7, #12]
 8020386:	795b      	ldrb	r3, [r3, #5]
 8020388:	2b03      	cmp	r3, #3
 802038a:	d10a      	bne.n	80203a2 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 802038c:	68fb      	ldr	r3, [r7, #12]
 802038e:	799b      	ldrb	r3, [r3, #6]
 8020390:	2b01      	cmp	r3, #1
 8020392:	d803      	bhi.n	802039c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8020394:	6878      	ldr	r0, [r7, #4]
 8020396:	f000 fc9d 	bl	8020cd4 <dhcp_reboot>
}
 802039a:	e002      	b.n	80203a2 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 802039c:	6878      	ldr	r0, [r7, #4]
 802039e:	f000 f9e5 	bl	802076c <dhcp_discover>
}
 80203a2:	bf00      	nop
 80203a4:	3710      	adds	r7, #16
 80203a6:	46bd      	mov	sp, r7
 80203a8:	bd80      	pop	{r7, pc}

080203aa <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80203aa:	b580      	push	{r7, lr}
 80203ac:	b084      	sub	sp, #16
 80203ae:	af00      	add	r7, sp, #0
 80203b0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80203b2:	687b      	ldr	r3, [r7, #4]
 80203b4:	6a1b      	ldr	r3, [r3, #32]
 80203b6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80203b8:	68fb      	ldr	r3, [r7, #12]
 80203ba:	795b      	ldrb	r3, [r3, #5]
 80203bc:	2b01      	cmp	r3, #1
 80203be:	d007      	beq.n	80203d0 <dhcp_t1_timeout+0x26>
 80203c0:	68fb      	ldr	r3, [r7, #12]
 80203c2:	795b      	ldrb	r3, [r3, #5]
 80203c4:	2b0a      	cmp	r3, #10
 80203c6:	d003      	beq.n	80203d0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80203c8:	68fb      	ldr	r3, [r7, #12]
 80203ca:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80203cc:	2b05      	cmp	r3, #5
 80203ce:	d116      	bne.n	80203fe <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80203d0:	6878      	ldr	r0, [r7, #4]
 80203d2:	f000 fb47 	bl	8020a64 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80203d6:	68fb      	ldr	r3, [r7, #12]
 80203d8:	899b      	ldrh	r3, [r3, #12]
 80203da:	461a      	mov	r2, r3
 80203dc:	68fb      	ldr	r3, [r7, #12]
 80203de:	8a5b      	ldrh	r3, [r3, #18]
 80203e0:	1ad3      	subs	r3, r2, r3
 80203e2:	2b01      	cmp	r3, #1
 80203e4:	dd0b      	ble.n	80203fe <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80203e6:	68fb      	ldr	r3, [r7, #12]
 80203e8:	899b      	ldrh	r3, [r3, #12]
 80203ea:	461a      	mov	r2, r3
 80203ec:	68fb      	ldr	r3, [r7, #12]
 80203ee:	8a5b      	ldrh	r3, [r3, #18]
 80203f0:	1ad3      	subs	r3, r2, r3
 80203f2:	0fda      	lsrs	r2, r3, #31
 80203f4:	4413      	add	r3, r2
 80203f6:	105b      	asrs	r3, r3, #1
 80203f8:	b29a      	uxth	r2, r3
 80203fa:	68fb      	ldr	r3, [r7, #12]
 80203fc:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80203fe:	bf00      	nop
 8020400:	3710      	adds	r7, #16
 8020402:	46bd      	mov	sp, r7
 8020404:	bd80      	pop	{r7, pc}

08020406 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8020406:	b580      	push	{r7, lr}
 8020408:	b084      	sub	sp, #16
 802040a:	af00      	add	r7, sp, #0
 802040c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802040e:	687b      	ldr	r3, [r7, #4]
 8020410:	6a1b      	ldr	r3, [r3, #32]
 8020412:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8020414:	68fb      	ldr	r3, [r7, #12]
 8020416:	795b      	ldrb	r3, [r3, #5]
 8020418:	2b01      	cmp	r3, #1
 802041a:	d00b      	beq.n	8020434 <dhcp_t2_timeout+0x2e>
 802041c:	68fb      	ldr	r3, [r7, #12]
 802041e:	795b      	ldrb	r3, [r3, #5]
 8020420:	2b0a      	cmp	r3, #10
 8020422:	d007      	beq.n	8020434 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8020424:	68fb      	ldr	r3, [r7, #12]
 8020426:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8020428:	2b05      	cmp	r3, #5
 802042a:	d003      	beq.n	8020434 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 802042c:	68fb      	ldr	r3, [r7, #12]
 802042e:	795b      	ldrb	r3, [r3, #5]
 8020430:	2b04      	cmp	r3, #4
 8020432:	d116      	bne.n	8020462 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8020434:	6878      	ldr	r0, [r7, #4]
 8020436:	f000 fbb1 	bl	8020b9c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 802043a:	68fb      	ldr	r3, [r7, #12]
 802043c:	8a9b      	ldrh	r3, [r3, #20]
 802043e:	461a      	mov	r2, r3
 8020440:	68fb      	ldr	r3, [r7, #12]
 8020442:	8a5b      	ldrh	r3, [r3, #18]
 8020444:	1ad3      	subs	r3, r2, r3
 8020446:	2b01      	cmp	r3, #1
 8020448:	dd0b      	ble.n	8020462 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 802044a:	68fb      	ldr	r3, [r7, #12]
 802044c:	8a9b      	ldrh	r3, [r3, #20]
 802044e:	461a      	mov	r2, r3
 8020450:	68fb      	ldr	r3, [r7, #12]
 8020452:	8a5b      	ldrh	r3, [r3, #18]
 8020454:	1ad3      	subs	r3, r2, r3
 8020456:	0fda      	lsrs	r2, r3, #31
 8020458:	4413      	add	r3, r2
 802045a:	105b      	asrs	r3, r3, #1
 802045c:	b29a      	uxth	r2, r3
 802045e:	68fb      	ldr	r3, [r7, #12]
 8020460:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8020462:	bf00      	nop
 8020464:	3710      	adds	r7, #16
 8020466:	46bd      	mov	sp, r7
 8020468:	bd80      	pop	{r7, pc}
	...

0802046c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 802046c:	b580      	push	{r7, lr}
 802046e:	b084      	sub	sp, #16
 8020470:	af00      	add	r7, sp, #0
 8020472:	6078      	str	r0, [r7, #4]
 8020474:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020476:	687b      	ldr	r3, [r7, #4]
 8020478:	6a1b      	ldr	r3, [r3, #32]
 802047a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 802047c:	68fb      	ldr	r3, [r7, #12]
 802047e:	2200      	movs	r2, #0
 8020480:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8020482:	68fb      	ldr	r3, [r7, #12]
 8020484:	2200      	movs	r2, #0
 8020486:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8020488:	4b26      	ldr	r3, [pc, #152]	; (8020524 <dhcp_handle_ack+0xb8>)
 802048a:	78db      	ldrb	r3, [r3, #3]
 802048c:	2b00      	cmp	r3, #0
 802048e:	d003      	beq.n	8020498 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8020490:	4b25      	ldr	r3, [pc, #148]	; (8020528 <dhcp_handle_ack+0xbc>)
 8020492:	68da      	ldr	r2, [r3, #12]
 8020494:	68fb      	ldr	r3, [r7, #12]
 8020496:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8020498:	4b22      	ldr	r3, [pc, #136]	; (8020524 <dhcp_handle_ack+0xb8>)
 802049a:	791b      	ldrb	r3, [r3, #4]
 802049c:	2b00      	cmp	r3, #0
 802049e:	d004      	beq.n	80204aa <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80204a0:	4b21      	ldr	r3, [pc, #132]	; (8020528 <dhcp_handle_ack+0xbc>)
 80204a2:	691a      	ldr	r2, [r3, #16]
 80204a4:	68fb      	ldr	r3, [r7, #12]
 80204a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80204a8:	e004      	b.n	80204b4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80204aa:	68fb      	ldr	r3, [r7, #12]
 80204ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80204ae:	085a      	lsrs	r2, r3, #1
 80204b0:	68fb      	ldr	r3, [r7, #12]
 80204b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80204b4:	4b1b      	ldr	r3, [pc, #108]	; (8020524 <dhcp_handle_ack+0xb8>)
 80204b6:	795b      	ldrb	r3, [r3, #5]
 80204b8:	2b00      	cmp	r3, #0
 80204ba:	d004      	beq.n	80204c6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80204bc:	4b1a      	ldr	r3, [pc, #104]	; (8020528 <dhcp_handle_ack+0xbc>)
 80204be:	695a      	ldr	r2, [r3, #20]
 80204c0:	68fb      	ldr	r3, [r7, #12]
 80204c2:	631a      	str	r2, [r3, #48]	; 0x30
 80204c4:	e007      	b.n	80204d6 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80204c6:	68fb      	ldr	r3, [r7, #12]
 80204c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80204ca:	4613      	mov	r3, r2
 80204cc:	00db      	lsls	r3, r3, #3
 80204ce:	1a9b      	subs	r3, r3, r2
 80204d0:	08da      	lsrs	r2, r3, #3
 80204d2:	68fb      	ldr	r3, [r7, #12]
 80204d4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80204d6:	683b      	ldr	r3, [r7, #0]
 80204d8:	691a      	ldr	r2, [r3, #16]
 80204da:	68fb      	ldr	r3, [r7, #12]
 80204dc:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80204de:	4b11      	ldr	r3, [pc, #68]	; (8020524 <dhcp_handle_ack+0xb8>)
 80204e0:	799b      	ldrb	r3, [r3, #6]
 80204e2:	2b00      	cmp	r3, #0
 80204e4:	d00b      	beq.n	80204fe <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80204e6:	4b10      	ldr	r3, [pc, #64]	; (8020528 <dhcp_handle_ack+0xbc>)
 80204e8:	699b      	ldr	r3, [r3, #24]
 80204ea:	4618      	mov	r0, r3
 80204ec:	f7f6 fd57 	bl	8016f9e <lwip_htonl>
 80204f0:	4602      	mov	r2, r0
 80204f2:	68fb      	ldr	r3, [r7, #12]
 80204f4:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80204f6:	68fb      	ldr	r3, [r7, #12]
 80204f8:	2201      	movs	r2, #1
 80204fa:	71da      	strb	r2, [r3, #7]
 80204fc:	e002      	b.n	8020504 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80204fe:	68fb      	ldr	r3, [r7, #12]
 8020500:	2200      	movs	r2, #0
 8020502:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8020504:	4b07      	ldr	r3, [pc, #28]	; (8020524 <dhcp_handle_ack+0xb8>)
 8020506:	79db      	ldrb	r3, [r3, #7]
 8020508:	2b00      	cmp	r3, #0
 802050a:	d007      	beq.n	802051c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 802050c:	4b06      	ldr	r3, [pc, #24]	; (8020528 <dhcp_handle_ack+0xbc>)
 802050e:	69db      	ldr	r3, [r3, #28]
 8020510:	4618      	mov	r0, r3
 8020512:	f7f6 fd44 	bl	8016f9e <lwip_htonl>
 8020516:	4602      	mov	r2, r0
 8020518:	68fb      	ldr	r3, [r7, #12]
 802051a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 802051c:	bf00      	nop
 802051e:	3710      	adds	r7, #16
 8020520:	46bd      	mov	sp, r7
 8020522:	bd80      	pop	{r7, pc}
 8020524:	2001a010 	.word	0x2001a010
 8020528:	2001a018 	.word	0x2001a018

0802052c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 802052c:	b580      	push	{r7, lr}
 802052e:	b084      	sub	sp, #16
 8020530:	af00      	add	r7, sp, #0
 8020532:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8020534:	687b      	ldr	r3, [r7, #4]
 8020536:	2b00      	cmp	r3, #0
 8020538:	d109      	bne.n	802054e <dhcp_start+0x22>
 802053a:	4b37      	ldr	r3, [pc, #220]	; (8020618 <dhcp_start+0xec>)
 802053c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8020540:	4936      	ldr	r1, [pc, #216]	; (802061c <dhcp_start+0xf0>)
 8020542:	4837      	ldr	r0, [pc, #220]	; (8020620 <dhcp_start+0xf4>)
 8020544:	f006 fa28 	bl	8026998 <iprintf>
 8020548:	f06f 030f 	mvn.w	r3, #15
 802054c:	e060      	b.n	8020610 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 802054e:	687b      	ldr	r3, [r7, #4]
 8020550:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8020554:	f003 0301 	and.w	r3, r3, #1
 8020558:	2b00      	cmp	r3, #0
 802055a:	d109      	bne.n	8020570 <dhcp_start+0x44>
 802055c:	4b2e      	ldr	r3, [pc, #184]	; (8020618 <dhcp_start+0xec>)
 802055e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8020562:	4930      	ldr	r1, [pc, #192]	; (8020624 <dhcp_start+0xf8>)
 8020564:	482e      	ldr	r0, [pc, #184]	; (8020620 <dhcp_start+0xf4>)
 8020566:	f006 fa17 	bl	8026998 <iprintf>
 802056a:	f06f 030f 	mvn.w	r3, #15
 802056e:	e04f      	b.n	8020610 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8020570:	687b      	ldr	r3, [r7, #4]
 8020572:	6a1b      	ldr	r3, [r3, #32]
 8020574:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8020576:	687b      	ldr	r3, [r7, #4]
 8020578:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 802057a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 802057e:	d202      	bcs.n	8020586 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8020580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020584:	e044      	b.n	8020610 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8020586:	68fb      	ldr	r3, [r7, #12]
 8020588:	2b00      	cmp	r3, #0
 802058a:	d10d      	bne.n	80205a8 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 802058c:	2034      	movs	r0, #52	; 0x34
 802058e:	f7f7 f893 	bl	80176b8 <mem_malloc>
 8020592:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8020594:	68fb      	ldr	r3, [r7, #12]
 8020596:	2b00      	cmp	r3, #0
 8020598:	d102      	bne.n	80205a0 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 802059a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802059e:	e037      	b.n	8020610 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80205a0:	687b      	ldr	r3, [r7, #4]
 80205a2:	68fa      	ldr	r2, [r7, #12]
 80205a4:	621a      	str	r2, [r3, #32]
 80205a6:	e005      	b.n	80205b4 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80205a8:	68fb      	ldr	r3, [r7, #12]
 80205aa:	791b      	ldrb	r3, [r3, #4]
 80205ac:	2b00      	cmp	r3, #0
 80205ae:	d001      	beq.n	80205b4 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80205b0:	f7ff fc92 	bl	801fed8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80205b4:	2234      	movs	r2, #52	; 0x34
 80205b6:	2100      	movs	r1, #0
 80205b8:	68f8      	ldr	r0, [r7, #12]
 80205ba:	f006 f93d 	bl	8026838 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80205be:	f7ff fc39 	bl	801fe34 <dhcp_inc_pcb_refcount>
 80205c2:	4603      	mov	r3, r0
 80205c4:	2b00      	cmp	r3, #0
 80205c6:	d002      	beq.n	80205ce <dhcp_start+0xa2>
    return ERR_MEM;
 80205c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80205cc:	e020      	b.n	8020610 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80205ce:	68fb      	ldr	r3, [r7, #12]
 80205d0:	2201      	movs	r2, #1
 80205d2:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80205d4:	687b      	ldr	r3, [r7, #4]
 80205d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80205da:	f003 0304 	and.w	r3, r3, #4
 80205de:	2b00      	cmp	r3, #0
 80205e0:	d105      	bne.n	80205ee <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80205e2:	2102      	movs	r1, #2
 80205e4:	68f8      	ldr	r0, [r7, #12]
 80205e6:	f000 fcdc 	bl	8020fa2 <dhcp_set_state>
    return ERR_OK;
 80205ea:	2300      	movs	r3, #0
 80205ec:	e010      	b.n	8020610 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80205ee:	6878      	ldr	r0, [r7, #4]
 80205f0:	f000 f8bc 	bl	802076c <dhcp_discover>
 80205f4:	4603      	mov	r3, r0
 80205f6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80205f8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80205fc:	2b00      	cmp	r3, #0
 80205fe:	d005      	beq.n	802060c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8020600:	6878      	ldr	r0, [r7, #4]
 8020602:	f000 fc1d 	bl	8020e40 <dhcp_release_and_stop>
    return ERR_MEM;
 8020606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802060a:	e001      	b.n	8020610 <dhcp_start+0xe4>
  }
  return result;
 802060c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8020610:	4618      	mov	r0, r3
 8020612:	3710      	adds	r7, #16
 8020614:	46bd      	mov	sp, r7
 8020616:	bd80      	pop	{r7, pc}
 8020618:	0802af64 	.word	0x0802af64
 802061c:	0802b048 	.word	0x0802b048
 8020620:	0802afc4 	.word	0x0802afc4
 8020624:	0802b08c 	.word	0x0802b08c

08020628 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8020628:	b580      	push	{r7, lr}
 802062a:	b084      	sub	sp, #16
 802062c:	af00      	add	r7, sp, #0
 802062e:	6078      	str	r0, [r7, #4]
 8020630:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8020632:	687b      	ldr	r3, [r7, #4]
 8020634:	2b00      	cmp	r3, #0
 8020636:	d107      	bne.n	8020648 <dhcp_arp_reply+0x20>
 8020638:	4b0e      	ldr	r3, [pc, #56]	; (8020674 <dhcp_arp_reply+0x4c>)
 802063a:	f240 328b 	movw	r2, #907	; 0x38b
 802063e:	490e      	ldr	r1, [pc, #56]	; (8020678 <dhcp_arp_reply+0x50>)
 8020640:	480e      	ldr	r0, [pc, #56]	; (802067c <dhcp_arp_reply+0x54>)
 8020642:	f006 f9a9 	bl	8026998 <iprintf>
 8020646:	e012      	b.n	802066e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8020648:	687b      	ldr	r3, [r7, #4]
 802064a:	6a1b      	ldr	r3, [r3, #32]
 802064c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 802064e:	68fb      	ldr	r3, [r7, #12]
 8020650:	2b00      	cmp	r3, #0
 8020652:	d00c      	beq.n	802066e <dhcp_arp_reply+0x46>
 8020654:	68fb      	ldr	r3, [r7, #12]
 8020656:	795b      	ldrb	r3, [r3, #5]
 8020658:	2b08      	cmp	r3, #8
 802065a:	d108      	bne.n	802066e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 802065c:	683b      	ldr	r3, [r7, #0]
 802065e:	681a      	ldr	r2, [r3, #0]
 8020660:	68fb      	ldr	r3, [r7, #12]
 8020662:	69db      	ldr	r3, [r3, #28]
 8020664:	429a      	cmp	r2, r3
 8020666:	d102      	bne.n	802066e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8020668:	6878      	ldr	r0, [r7, #4]
 802066a:	f000 f809 	bl	8020680 <dhcp_decline>
    }
  }
}
 802066e:	3710      	adds	r7, #16
 8020670:	46bd      	mov	sp, r7
 8020672:	bd80      	pop	{r7, pc}
 8020674:	0802af64 	.word	0x0802af64
 8020678:	0802b048 	.word	0x0802b048
 802067c:	0802afc4 	.word	0x0802afc4

08020680 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8020680:	b5b0      	push	{r4, r5, r7, lr}
 8020682:	b08a      	sub	sp, #40	; 0x28
 8020684:	af02      	add	r7, sp, #8
 8020686:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020688:	687b      	ldr	r3, [r7, #4]
 802068a:	6a1b      	ldr	r3, [r3, #32]
 802068c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 802068e:	210c      	movs	r1, #12
 8020690:	69b8      	ldr	r0, [r7, #24]
 8020692:	f000 fc86 	bl	8020fa2 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8020696:	f107 030c 	add.w	r3, r7, #12
 802069a:	2204      	movs	r2, #4
 802069c:	69b9      	ldr	r1, [r7, #24]
 802069e:	6878      	ldr	r0, [r7, #4]
 80206a0:	f001 f90a 	bl	80218b8 <dhcp_create_msg>
 80206a4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80206a6:	697b      	ldr	r3, [r7, #20]
 80206a8:	2b00      	cmp	r3, #0
 80206aa:	d035      	beq.n	8020718 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80206ac:	697b      	ldr	r3, [r7, #20]
 80206ae:	685b      	ldr	r3, [r3, #4]
 80206b0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80206b2:	89b8      	ldrh	r0, [r7, #12]
 80206b4:	693b      	ldr	r3, [r7, #16]
 80206b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80206ba:	2304      	movs	r3, #4
 80206bc:	2232      	movs	r2, #50	; 0x32
 80206be:	f000 fc8b 	bl	8020fd8 <dhcp_option>
 80206c2:	4603      	mov	r3, r0
 80206c4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80206c6:	89bc      	ldrh	r4, [r7, #12]
 80206c8:	693b      	ldr	r3, [r7, #16]
 80206ca:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80206ce:	69bb      	ldr	r3, [r7, #24]
 80206d0:	69db      	ldr	r3, [r3, #28]
 80206d2:	4618      	mov	r0, r3
 80206d4:	f7f6 fc63 	bl	8016f9e <lwip_htonl>
 80206d8:	4603      	mov	r3, r0
 80206da:	461a      	mov	r2, r3
 80206dc:	4629      	mov	r1, r5
 80206de:	4620      	mov	r0, r4
 80206e0:	f000 fd06 	bl	80210f0 <dhcp_option_long>
 80206e4:	4603      	mov	r3, r0
 80206e6:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80206e8:	89b8      	ldrh	r0, [r7, #12]
 80206ea:	693b      	ldr	r3, [r7, #16]
 80206ec:	33f0      	adds	r3, #240	; 0xf0
 80206ee:	697a      	ldr	r2, [r7, #20]
 80206f0:	4619      	mov	r1, r3
 80206f2:	f001 f9b7 	bl	8021a64 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80206f6:	4b19      	ldr	r3, [pc, #100]	; (802075c <dhcp_decline+0xdc>)
 80206f8:	6818      	ldr	r0, [r3, #0]
 80206fa:	4b19      	ldr	r3, [pc, #100]	; (8020760 <dhcp_decline+0xe0>)
 80206fc:	9301      	str	r3, [sp, #4]
 80206fe:	687b      	ldr	r3, [r7, #4]
 8020700:	9300      	str	r3, [sp, #0]
 8020702:	2343      	movs	r3, #67	; 0x43
 8020704:	4a17      	ldr	r2, [pc, #92]	; (8020764 <dhcp_decline+0xe4>)
 8020706:	6979      	ldr	r1, [r7, #20]
 8020708:	f7ff f8da 	bl	801f8c0 <udp_sendto_if_src>
 802070c:	4603      	mov	r3, r0
 802070e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8020710:	6978      	ldr	r0, [r7, #20]
 8020712:	f7f8 f853 	bl	80187bc <pbuf_free>
 8020716:	e001      	b.n	802071c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8020718:	23ff      	movs	r3, #255	; 0xff
 802071a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 802071c:	69bb      	ldr	r3, [r7, #24]
 802071e:	799b      	ldrb	r3, [r3, #6]
 8020720:	2bff      	cmp	r3, #255	; 0xff
 8020722:	d005      	beq.n	8020730 <dhcp_decline+0xb0>
    dhcp->tries++;
 8020724:	69bb      	ldr	r3, [r7, #24]
 8020726:	799b      	ldrb	r3, [r3, #6]
 8020728:	3301      	adds	r3, #1
 802072a:	b2da      	uxtb	r2, r3
 802072c:	69bb      	ldr	r3, [r7, #24]
 802072e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8020730:	f242 7310 	movw	r3, #10000	; 0x2710
 8020734:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020736:	89fb      	ldrh	r3, [r7, #14]
 8020738:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 802073c:	4a0a      	ldr	r2, [pc, #40]	; (8020768 <dhcp_decline+0xe8>)
 802073e:	fb82 1203 	smull	r1, r2, r2, r3
 8020742:	1152      	asrs	r2, r2, #5
 8020744:	17db      	asrs	r3, r3, #31
 8020746:	1ad3      	subs	r3, r2, r3
 8020748:	b29a      	uxth	r2, r3
 802074a:	69bb      	ldr	r3, [r7, #24]
 802074c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 802074e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8020752:	4618      	mov	r0, r3
 8020754:	3720      	adds	r7, #32
 8020756:	46bd      	mov	sp, r7
 8020758:	bdb0      	pop	{r4, r5, r7, pc}
 802075a:	bf00      	nop
 802075c:	20013204 	.word	0x20013204
 8020760:	0802bdd8 	.word	0x0802bdd8
 8020764:	0802bddc 	.word	0x0802bddc
 8020768:	10624dd3 	.word	0x10624dd3

0802076c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 802076c:	b580      	push	{r7, lr}
 802076e:	b08a      	sub	sp, #40	; 0x28
 8020770:	af02      	add	r7, sp, #8
 8020772:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020774:	687b      	ldr	r3, [r7, #4]
 8020776:	6a1b      	ldr	r3, [r3, #32]
 8020778:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 802077a:	2300      	movs	r3, #0
 802077c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 802077e:	69bb      	ldr	r3, [r7, #24]
 8020780:	2200      	movs	r2, #0
 8020782:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8020784:	2106      	movs	r1, #6
 8020786:	69b8      	ldr	r0, [r7, #24]
 8020788:	f000 fc0b 	bl	8020fa2 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 802078c:	f107 0308 	add.w	r3, r7, #8
 8020790:	2201      	movs	r2, #1
 8020792:	69b9      	ldr	r1, [r7, #24]
 8020794:	6878      	ldr	r0, [r7, #4]
 8020796:	f001 f88f 	bl	80218b8 <dhcp_create_msg>
 802079a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 802079c:	693b      	ldr	r3, [r7, #16]
 802079e:	2b00      	cmp	r3, #0
 80207a0:	d04b      	beq.n	802083a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80207a2:	693b      	ldr	r3, [r7, #16]
 80207a4:	685b      	ldr	r3, [r3, #4]
 80207a6:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80207a8:	8938      	ldrh	r0, [r7, #8]
 80207aa:	68fb      	ldr	r3, [r7, #12]
 80207ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80207b0:	2302      	movs	r3, #2
 80207b2:	2239      	movs	r2, #57	; 0x39
 80207b4:	f000 fc10 	bl	8020fd8 <dhcp_option>
 80207b8:	4603      	mov	r3, r0
 80207ba:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80207bc:	8938      	ldrh	r0, [r7, #8]
 80207be:	68fb      	ldr	r3, [r7, #12]
 80207c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80207c4:	687b      	ldr	r3, [r7, #4]
 80207c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80207c8:	461a      	mov	r2, r3
 80207ca:	f000 fc5f 	bl	802108c <dhcp_option_short>
 80207ce:	4603      	mov	r3, r0
 80207d0:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80207d2:	8938      	ldrh	r0, [r7, #8]
 80207d4:	68fb      	ldr	r3, [r7, #12]
 80207d6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80207da:	2303      	movs	r3, #3
 80207dc:	2237      	movs	r2, #55	; 0x37
 80207de:	f000 fbfb 	bl	8020fd8 <dhcp_option>
 80207e2:	4603      	mov	r3, r0
 80207e4:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80207e6:	2300      	movs	r3, #0
 80207e8:	77fb      	strb	r3, [r7, #31]
 80207ea:	e00e      	b.n	802080a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80207ec:	8938      	ldrh	r0, [r7, #8]
 80207ee:	68fb      	ldr	r3, [r7, #12]
 80207f0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80207f4:	7ffb      	ldrb	r3, [r7, #31]
 80207f6:	4a29      	ldr	r2, [pc, #164]	; (802089c <dhcp_discover+0x130>)
 80207f8:	5cd3      	ldrb	r3, [r2, r3]
 80207fa:	461a      	mov	r2, r3
 80207fc:	f000 fc20 	bl	8021040 <dhcp_option_byte>
 8020800:	4603      	mov	r3, r0
 8020802:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020804:	7ffb      	ldrb	r3, [r7, #31]
 8020806:	3301      	adds	r3, #1
 8020808:	77fb      	strb	r3, [r7, #31]
 802080a:	7ffb      	ldrb	r3, [r7, #31]
 802080c:	2b02      	cmp	r3, #2
 802080e:	d9ed      	bls.n	80207ec <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8020810:	8938      	ldrh	r0, [r7, #8]
 8020812:	68fb      	ldr	r3, [r7, #12]
 8020814:	33f0      	adds	r3, #240	; 0xf0
 8020816:	693a      	ldr	r2, [r7, #16]
 8020818:	4619      	mov	r1, r3
 802081a:	f001 f923 	bl	8021a64 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 802081e:	4b20      	ldr	r3, [pc, #128]	; (80208a0 <dhcp_discover+0x134>)
 8020820:	6818      	ldr	r0, [r3, #0]
 8020822:	4b20      	ldr	r3, [pc, #128]	; (80208a4 <dhcp_discover+0x138>)
 8020824:	9301      	str	r3, [sp, #4]
 8020826:	687b      	ldr	r3, [r7, #4]
 8020828:	9300      	str	r3, [sp, #0]
 802082a:	2343      	movs	r3, #67	; 0x43
 802082c:	4a1e      	ldr	r2, [pc, #120]	; (80208a8 <dhcp_discover+0x13c>)
 802082e:	6939      	ldr	r1, [r7, #16]
 8020830:	f7ff f846 	bl	801f8c0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8020834:	6938      	ldr	r0, [r7, #16]
 8020836:	f7f7 ffc1 	bl	80187bc <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 802083a:	69bb      	ldr	r3, [r7, #24]
 802083c:	799b      	ldrb	r3, [r3, #6]
 802083e:	2bff      	cmp	r3, #255	; 0xff
 8020840:	d005      	beq.n	802084e <dhcp_discover+0xe2>
    dhcp->tries++;
 8020842:	69bb      	ldr	r3, [r7, #24]
 8020844:	799b      	ldrb	r3, [r3, #6]
 8020846:	3301      	adds	r3, #1
 8020848:	b2da      	uxtb	r2, r3
 802084a:	69bb      	ldr	r3, [r7, #24]
 802084c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 802084e:	69bb      	ldr	r3, [r7, #24]
 8020850:	799b      	ldrb	r3, [r3, #6]
 8020852:	2b05      	cmp	r3, #5
 8020854:	d80d      	bhi.n	8020872 <dhcp_discover+0x106>
 8020856:	69bb      	ldr	r3, [r7, #24]
 8020858:	799b      	ldrb	r3, [r3, #6]
 802085a:	461a      	mov	r2, r3
 802085c:	2301      	movs	r3, #1
 802085e:	4093      	lsls	r3, r2
 8020860:	b29b      	uxth	r3, r3
 8020862:	461a      	mov	r2, r3
 8020864:	0152      	lsls	r2, r2, #5
 8020866:	1ad2      	subs	r2, r2, r3
 8020868:	0092      	lsls	r2, r2, #2
 802086a:	4413      	add	r3, r2
 802086c:	00db      	lsls	r3, r3, #3
 802086e:	b29b      	uxth	r3, r3
 8020870:	e001      	b.n	8020876 <dhcp_discover+0x10a>
 8020872:	f64e 2360 	movw	r3, #60000	; 0xea60
 8020876:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020878:	897b      	ldrh	r3, [r7, #10]
 802087a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 802087e:	4a0b      	ldr	r2, [pc, #44]	; (80208ac <dhcp_discover+0x140>)
 8020880:	fb82 1203 	smull	r1, r2, r2, r3
 8020884:	1152      	asrs	r2, r2, #5
 8020886:	17db      	asrs	r3, r3, #31
 8020888:	1ad3      	subs	r3, r2, r3
 802088a:	b29a      	uxth	r2, r3
 802088c:	69bb      	ldr	r3, [r7, #24]
 802088e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8020890:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8020894:	4618      	mov	r0, r3
 8020896:	3720      	adds	r7, #32
 8020898:	46bd      	mov	sp, r7
 802089a:	bd80      	pop	{r7, pc}
 802089c:	2000001c 	.word	0x2000001c
 80208a0:	20013204 	.word	0x20013204
 80208a4:	0802bdd8 	.word	0x0802bdd8
 80208a8:	0802bddc 	.word	0x0802bddc
 80208ac:	10624dd3 	.word	0x10624dd3

080208b0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80208b0:	b580      	push	{r7, lr}
 80208b2:	b088      	sub	sp, #32
 80208b4:	af00      	add	r7, sp, #0
 80208b6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80208b8:	687b      	ldr	r3, [r7, #4]
 80208ba:	2b00      	cmp	r3, #0
 80208bc:	d107      	bne.n	80208ce <dhcp_bind+0x1e>
 80208be:	4b64      	ldr	r3, [pc, #400]	; (8020a50 <dhcp_bind+0x1a0>)
 80208c0:	f240 4215 	movw	r2, #1045	; 0x415
 80208c4:	4963      	ldr	r1, [pc, #396]	; (8020a54 <dhcp_bind+0x1a4>)
 80208c6:	4864      	ldr	r0, [pc, #400]	; (8020a58 <dhcp_bind+0x1a8>)
 80208c8:	f006 f866 	bl	8026998 <iprintf>
 80208cc:	e0bc      	b.n	8020a48 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80208ce:	687b      	ldr	r3, [r7, #4]
 80208d0:	6a1b      	ldr	r3, [r3, #32]
 80208d2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80208d4:	69bb      	ldr	r3, [r7, #24]
 80208d6:	2b00      	cmp	r3, #0
 80208d8:	d107      	bne.n	80208ea <dhcp_bind+0x3a>
 80208da:	4b5d      	ldr	r3, [pc, #372]	; (8020a50 <dhcp_bind+0x1a0>)
 80208dc:	f240 4217 	movw	r2, #1047	; 0x417
 80208e0:	495e      	ldr	r1, [pc, #376]	; (8020a5c <dhcp_bind+0x1ac>)
 80208e2:	485d      	ldr	r0, [pc, #372]	; (8020a58 <dhcp_bind+0x1a8>)
 80208e4:	f006 f858 	bl	8026998 <iprintf>
 80208e8:	e0ae      	b.n	8020a48 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80208ea:	69bb      	ldr	r3, [r7, #24]
 80208ec:	2200      	movs	r2, #0
 80208ee:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80208f0:	69bb      	ldr	r3, [r7, #24]
 80208f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80208f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80208f8:	d019      	beq.n	802092e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80208fa:	69bb      	ldr	r3, [r7, #24]
 80208fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80208fe:	331e      	adds	r3, #30
 8020900:	4a57      	ldr	r2, [pc, #348]	; (8020a60 <dhcp_bind+0x1b0>)
 8020902:	fba2 2303 	umull	r2, r3, r2, r3
 8020906:	095b      	lsrs	r3, r3, #5
 8020908:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 802090a:	69fb      	ldr	r3, [r7, #28]
 802090c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020910:	d302      	bcc.n	8020918 <dhcp_bind+0x68>
      timeout = 0xffff;
 8020912:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020916:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8020918:	69fb      	ldr	r3, [r7, #28]
 802091a:	b29a      	uxth	r2, r3
 802091c:	69bb      	ldr	r3, [r7, #24]
 802091e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8020920:	69bb      	ldr	r3, [r7, #24]
 8020922:	8a9b      	ldrh	r3, [r3, #20]
 8020924:	2b00      	cmp	r3, #0
 8020926:	d102      	bne.n	802092e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8020928:	69bb      	ldr	r3, [r7, #24]
 802092a:	2201      	movs	r2, #1
 802092c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 802092e:	69bb      	ldr	r3, [r7, #24]
 8020930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8020936:	d01d      	beq.n	8020974 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8020938:	69bb      	ldr	r3, [r7, #24]
 802093a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802093c:	331e      	adds	r3, #30
 802093e:	4a48      	ldr	r2, [pc, #288]	; (8020a60 <dhcp_bind+0x1b0>)
 8020940:	fba2 2303 	umull	r2, r3, r2, r3
 8020944:	095b      	lsrs	r3, r3, #5
 8020946:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8020948:	69fb      	ldr	r3, [r7, #28]
 802094a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802094e:	d302      	bcc.n	8020956 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8020950:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020954:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8020956:	69fb      	ldr	r3, [r7, #28]
 8020958:	b29a      	uxth	r2, r3
 802095a:	69bb      	ldr	r3, [r7, #24]
 802095c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 802095e:	69bb      	ldr	r3, [r7, #24]
 8020960:	895b      	ldrh	r3, [r3, #10]
 8020962:	2b00      	cmp	r3, #0
 8020964:	d102      	bne.n	802096c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8020966:	69bb      	ldr	r3, [r7, #24]
 8020968:	2201      	movs	r2, #1
 802096a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 802096c:	69bb      	ldr	r3, [r7, #24]
 802096e:	895a      	ldrh	r2, [r3, #10]
 8020970:	69bb      	ldr	r3, [r7, #24]
 8020972:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8020974:	69bb      	ldr	r3, [r7, #24]
 8020976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802097c:	d01d      	beq.n	80209ba <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802097e:	69bb      	ldr	r3, [r7, #24]
 8020980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020982:	331e      	adds	r3, #30
 8020984:	4a36      	ldr	r2, [pc, #216]	; (8020a60 <dhcp_bind+0x1b0>)
 8020986:	fba2 2303 	umull	r2, r3, r2, r3
 802098a:	095b      	lsrs	r3, r3, #5
 802098c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 802098e:	69fb      	ldr	r3, [r7, #28]
 8020990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020994:	d302      	bcc.n	802099c <dhcp_bind+0xec>
      timeout = 0xffff;
 8020996:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802099a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 802099c:	69fb      	ldr	r3, [r7, #28]
 802099e:	b29a      	uxth	r2, r3
 80209a0:	69bb      	ldr	r3, [r7, #24]
 80209a2:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80209a4:	69bb      	ldr	r3, [r7, #24]
 80209a6:	899b      	ldrh	r3, [r3, #12]
 80209a8:	2b00      	cmp	r3, #0
 80209aa:	d102      	bne.n	80209b2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80209ac:	69bb      	ldr	r3, [r7, #24]
 80209ae:	2201      	movs	r2, #1
 80209b0:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80209b2:	69bb      	ldr	r3, [r7, #24]
 80209b4:	899a      	ldrh	r2, [r3, #12]
 80209b6:	69bb      	ldr	r3, [r7, #24]
 80209b8:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80209ba:	69bb      	ldr	r3, [r7, #24]
 80209bc:	895a      	ldrh	r2, [r3, #10]
 80209be:	69bb      	ldr	r3, [r7, #24]
 80209c0:	899b      	ldrh	r3, [r3, #12]
 80209c2:	429a      	cmp	r2, r3
 80209c4:	d306      	bcc.n	80209d4 <dhcp_bind+0x124>
 80209c6:	69bb      	ldr	r3, [r7, #24]
 80209c8:	899b      	ldrh	r3, [r3, #12]
 80209ca:	2b00      	cmp	r3, #0
 80209cc:	d002      	beq.n	80209d4 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80209ce:	69bb      	ldr	r3, [r7, #24]
 80209d0:	2200      	movs	r2, #0
 80209d2:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80209d4:	69bb      	ldr	r3, [r7, #24]
 80209d6:	79db      	ldrb	r3, [r3, #7]
 80209d8:	2b00      	cmp	r3, #0
 80209da:	d003      	beq.n	80209e4 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80209dc:	69bb      	ldr	r3, [r7, #24]
 80209de:	6a1b      	ldr	r3, [r3, #32]
 80209e0:	613b      	str	r3, [r7, #16]
 80209e2:	e014      	b.n	8020a0e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80209e4:	69bb      	ldr	r3, [r7, #24]
 80209e6:	331c      	adds	r3, #28
 80209e8:	781b      	ldrb	r3, [r3, #0]
 80209ea:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80209ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80209f0:	2b00      	cmp	r3, #0
 80209f2:	db02      	blt.n	80209fa <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80209f4:	23ff      	movs	r3, #255	; 0xff
 80209f6:	613b      	str	r3, [r7, #16]
 80209f8:	e009      	b.n	8020a0e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80209fa:	7dfb      	ldrb	r3, [r7, #23]
 80209fc:	2bbf      	cmp	r3, #191	; 0xbf
 80209fe:	d903      	bls.n	8020a08 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8020a00:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8020a04:	613b      	str	r3, [r7, #16]
 8020a06:	e002      	b.n	8020a0e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8020a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020a0c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8020a0e:	69bb      	ldr	r3, [r7, #24]
 8020a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020a12:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8020a14:	68fb      	ldr	r3, [r7, #12]
 8020a16:	2b00      	cmp	r3, #0
 8020a18:	d108      	bne.n	8020a2c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8020a1a:	69bb      	ldr	r3, [r7, #24]
 8020a1c:	69da      	ldr	r2, [r3, #28]
 8020a1e:	693b      	ldr	r3, [r7, #16]
 8020a20:	4013      	ands	r3, r2
 8020a22:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8020a24:	68fb      	ldr	r3, [r7, #12]
 8020a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8020a2a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8020a2c:	210a      	movs	r1, #10
 8020a2e:	69b8      	ldr	r0, [r7, #24]
 8020a30:	f000 fab7 	bl	8020fa2 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8020a34:	69bb      	ldr	r3, [r7, #24]
 8020a36:	f103 011c 	add.w	r1, r3, #28
 8020a3a:	f107 030c 	add.w	r3, r7, #12
 8020a3e:	f107 0210 	add.w	r2, r7, #16
 8020a42:	6878      	ldr	r0, [r7, #4]
 8020a44:	f7f7 f9aa 	bl	8017d9c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8020a48:	3720      	adds	r7, #32
 8020a4a:	46bd      	mov	sp, r7
 8020a4c:	bd80      	pop	{r7, pc}
 8020a4e:	bf00      	nop
 8020a50:	0802af64 	.word	0x0802af64
 8020a54:	0802b0c4 	.word	0x0802b0c4
 8020a58:	0802afc4 	.word	0x0802afc4
 8020a5c:	0802b0e0 	.word	0x0802b0e0
 8020a60:	88888889 	.word	0x88888889

08020a64 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8020a64:	b580      	push	{r7, lr}
 8020a66:	b08a      	sub	sp, #40	; 0x28
 8020a68:	af02      	add	r7, sp, #8
 8020a6a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020a6c:	687b      	ldr	r3, [r7, #4]
 8020a6e:	6a1b      	ldr	r3, [r3, #32]
 8020a70:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8020a72:	2105      	movs	r1, #5
 8020a74:	69b8      	ldr	r0, [r7, #24]
 8020a76:	f000 fa94 	bl	8020fa2 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8020a7a:	f107 030c 	add.w	r3, r7, #12
 8020a7e:	2203      	movs	r2, #3
 8020a80:	69b9      	ldr	r1, [r7, #24]
 8020a82:	6878      	ldr	r0, [r7, #4]
 8020a84:	f000 ff18 	bl	80218b8 <dhcp_create_msg>
 8020a88:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8020a8a:	697b      	ldr	r3, [r7, #20]
 8020a8c:	2b00      	cmp	r3, #0
 8020a8e:	d04e      	beq.n	8020b2e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8020a90:	697b      	ldr	r3, [r7, #20]
 8020a92:	685b      	ldr	r3, [r3, #4]
 8020a94:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020a96:	89b8      	ldrh	r0, [r7, #12]
 8020a98:	693b      	ldr	r3, [r7, #16]
 8020a9a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020a9e:	2302      	movs	r3, #2
 8020aa0:	2239      	movs	r2, #57	; 0x39
 8020aa2:	f000 fa99 	bl	8020fd8 <dhcp_option>
 8020aa6:	4603      	mov	r3, r0
 8020aa8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020aaa:	89b8      	ldrh	r0, [r7, #12]
 8020aac:	693b      	ldr	r3, [r7, #16]
 8020aae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020ab2:	687b      	ldr	r3, [r7, #4]
 8020ab4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8020ab6:	461a      	mov	r2, r3
 8020ab8:	f000 fae8 	bl	802108c <dhcp_option_short>
 8020abc:	4603      	mov	r3, r0
 8020abe:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020ac0:	89b8      	ldrh	r0, [r7, #12]
 8020ac2:	693b      	ldr	r3, [r7, #16]
 8020ac4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020ac8:	2303      	movs	r3, #3
 8020aca:	2237      	movs	r2, #55	; 0x37
 8020acc:	f000 fa84 	bl	8020fd8 <dhcp_option>
 8020ad0:	4603      	mov	r3, r0
 8020ad2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020ad4:	2300      	movs	r3, #0
 8020ad6:	77bb      	strb	r3, [r7, #30]
 8020ad8:	e00e      	b.n	8020af8 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020ada:	89b8      	ldrh	r0, [r7, #12]
 8020adc:	693b      	ldr	r3, [r7, #16]
 8020ade:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020ae2:	7fbb      	ldrb	r3, [r7, #30]
 8020ae4:	4a2a      	ldr	r2, [pc, #168]	; (8020b90 <dhcp_renew+0x12c>)
 8020ae6:	5cd3      	ldrb	r3, [r2, r3]
 8020ae8:	461a      	mov	r2, r3
 8020aea:	f000 faa9 	bl	8021040 <dhcp_option_byte>
 8020aee:	4603      	mov	r3, r0
 8020af0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020af2:	7fbb      	ldrb	r3, [r7, #30]
 8020af4:	3301      	adds	r3, #1
 8020af6:	77bb      	strb	r3, [r7, #30]
 8020af8:	7fbb      	ldrb	r3, [r7, #30]
 8020afa:	2b02      	cmp	r3, #2
 8020afc:	d9ed      	bls.n	8020ada <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8020afe:	89b8      	ldrh	r0, [r7, #12]
 8020b00:	693b      	ldr	r3, [r7, #16]
 8020b02:	33f0      	adds	r3, #240	; 0xf0
 8020b04:	697a      	ldr	r2, [r7, #20]
 8020b06:	4619      	mov	r1, r3
 8020b08:	f000 ffac 	bl	8021a64 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8020b0c:	4b21      	ldr	r3, [pc, #132]	; (8020b94 <dhcp_renew+0x130>)
 8020b0e:	6818      	ldr	r0, [r3, #0]
 8020b10:	69bb      	ldr	r3, [r7, #24]
 8020b12:	f103 0218 	add.w	r2, r3, #24
 8020b16:	687b      	ldr	r3, [r7, #4]
 8020b18:	9300      	str	r3, [sp, #0]
 8020b1a:	2343      	movs	r3, #67	; 0x43
 8020b1c:	6979      	ldr	r1, [r7, #20]
 8020b1e:	f7fe fe5b 	bl	801f7d8 <udp_sendto_if>
 8020b22:	4603      	mov	r3, r0
 8020b24:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8020b26:	6978      	ldr	r0, [r7, #20]
 8020b28:	f7f7 fe48 	bl	80187bc <pbuf_free>
 8020b2c:	e001      	b.n	8020b32 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8020b2e:	23ff      	movs	r3, #255	; 0xff
 8020b30:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8020b32:	69bb      	ldr	r3, [r7, #24]
 8020b34:	799b      	ldrb	r3, [r3, #6]
 8020b36:	2bff      	cmp	r3, #255	; 0xff
 8020b38:	d005      	beq.n	8020b46 <dhcp_renew+0xe2>
    dhcp->tries++;
 8020b3a:	69bb      	ldr	r3, [r7, #24]
 8020b3c:	799b      	ldrb	r3, [r3, #6]
 8020b3e:	3301      	adds	r3, #1
 8020b40:	b2da      	uxtb	r2, r3
 8020b42:	69bb      	ldr	r3, [r7, #24]
 8020b44:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8020b46:	69bb      	ldr	r3, [r7, #24]
 8020b48:	799b      	ldrb	r3, [r3, #6]
 8020b4a:	2b09      	cmp	r3, #9
 8020b4c:	d80a      	bhi.n	8020b64 <dhcp_renew+0x100>
 8020b4e:	69bb      	ldr	r3, [r7, #24]
 8020b50:	799b      	ldrb	r3, [r3, #6]
 8020b52:	b29b      	uxth	r3, r3
 8020b54:	461a      	mov	r2, r3
 8020b56:	0152      	lsls	r2, r2, #5
 8020b58:	1ad2      	subs	r2, r2, r3
 8020b5a:	0092      	lsls	r2, r2, #2
 8020b5c:	4413      	add	r3, r2
 8020b5e:	011b      	lsls	r3, r3, #4
 8020b60:	b29b      	uxth	r3, r3
 8020b62:	e001      	b.n	8020b68 <dhcp_renew+0x104>
 8020b64:	f644 6320 	movw	r3, #20000	; 0x4e20
 8020b68:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020b6a:	89fb      	ldrh	r3, [r7, #14]
 8020b6c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8020b70:	4a09      	ldr	r2, [pc, #36]	; (8020b98 <dhcp_renew+0x134>)
 8020b72:	fb82 1203 	smull	r1, r2, r2, r3
 8020b76:	1152      	asrs	r2, r2, #5
 8020b78:	17db      	asrs	r3, r3, #31
 8020b7a:	1ad3      	subs	r3, r2, r3
 8020b7c:	b29a      	uxth	r2, r3
 8020b7e:	69bb      	ldr	r3, [r7, #24]
 8020b80:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8020b82:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8020b86:	4618      	mov	r0, r3
 8020b88:	3720      	adds	r7, #32
 8020b8a:	46bd      	mov	sp, r7
 8020b8c:	bd80      	pop	{r7, pc}
 8020b8e:	bf00      	nop
 8020b90:	2000001c 	.word	0x2000001c
 8020b94:	20013204 	.word	0x20013204
 8020b98:	10624dd3 	.word	0x10624dd3

08020b9c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8020b9c:	b580      	push	{r7, lr}
 8020b9e:	b08a      	sub	sp, #40	; 0x28
 8020ba0:	af02      	add	r7, sp, #8
 8020ba2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020ba4:	687b      	ldr	r3, [r7, #4]
 8020ba6:	6a1b      	ldr	r3, [r3, #32]
 8020ba8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8020baa:	2104      	movs	r1, #4
 8020bac:	69b8      	ldr	r0, [r7, #24]
 8020bae:	f000 f9f8 	bl	8020fa2 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8020bb2:	f107 030c 	add.w	r3, r7, #12
 8020bb6:	2203      	movs	r2, #3
 8020bb8:	69b9      	ldr	r1, [r7, #24]
 8020bba:	6878      	ldr	r0, [r7, #4]
 8020bbc:	f000 fe7c 	bl	80218b8 <dhcp_create_msg>
 8020bc0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8020bc2:	697b      	ldr	r3, [r7, #20]
 8020bc4:	2b00      	cmp	r3, #0
 8020bc6:	d04c      	beq.n	8020c62 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8020bc8:	697b      	ldr	r3, [r7, #20]
 8020bca:	685b      	ldr	r3, [r3, #4]
 8020bcc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020bce:	89b8      	ldrh	r0, [r7, #12]
 8020bd0:	693b      	ldr	r3, [r7, #16]
 8020bd2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020bd6:	2302      	movs	r3, #2
 8020bd8:	2239      	movs	r2, #57	; 0x39
 8020bda:	f000 f9fd 	bl	8020fd8 <dhcp_option>
 8020bde:	4603      	mov	r3, r0
 8020be0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020be2:	89b8      	ldrh	r0, [r7, #12]
 8020be4:	693b      	ldr	r3, [r7, #16]
 8020be6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020bea:	687b      	ldr	r3, [r7, #4]
 8020bec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8020bee:	461a      	mov	r2, r3
 8020bf0:	f000 fa4c 	bl	802108c <dhcp_option_short>
 8020bf4:	4603      	mov	r3, r0
 8020bf6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020bf8:	89b8      	ldrh	r0, [r7, #12]
 8020bfa:	693b      	ldr	r3, [r7, #16]
 8020bfc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020c00:	2303      	movs	r3, #3
 8020c02:	2237      	movs	r2, #55	; 0x37
 8020c04:	f000 f9e8 	bl	8020fd8 <dhcp_option>
 8020c08:	4603      	mov	r3, r0
 8020c0a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020c0c:	2300      	movs	r3, #0
 8020c0e:	77bb      	strb	r3, [r7, #30]
 8020c10:	e00e      	b.n	8020c30 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020c12:	89b8      	ldrh	r0, [r7, #12]
 8020c14:	693b      	ldr	r3, [r7, #16]
 8020c16:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020c1a:	7fbb      	ldrb	r3, [r7, #30]
 8020c1c:	4a29      	ldr	r2, [pc, #164]	; (8020cc4 <dhcp_rebind+0x128>)
 8020c1e:	5cd3      	ldrb	r3, [r2, r3]
 8020c20:	461a      	mov	r2, r3
 8020c22:	f000 fa0d 	bl	8021040 <dhcp_option_byte>
 8020c26:	4603      	mov	r3, r0
 8020c28:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020c2a:	7fbb      	ldrb	r3, [r7, #30]
 8020c2c:	3301      	adds	r3, #1
 8020c2e:	77bb      	strb	r3, [r7, #30]
 8020c30:	7fbb      	ldrb	r3, [r7, #30]
 8020c32:	2b02      	cmp	r3, #2
 8020c34:	d9ed      	bls.n	8020c12 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8020c36:	89b8      	ldrh	r0, [r7, #12]
 8020c38:	693b      	ldr	r3, [r7, #16]
 8020c3a:	33f0      	adds	r3, #240	; 0xf0
 8020c3c:	697a      	ldr	r2, [r7, #20]
 8020c3e:	4619      	mov	r1, r3
 8020c40:	f000 ff10 	bl	8021a64 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8020c44:	4b20      	ldr	r3, [pc, #128]	; (8020cc8 <dhcp_rebind+0x12c>)
 8020c46:	6818      	ldr	r0, [r3, #0]
 8020c48:	687b      	ldr	r3, [r7, #4]
 8020c4a:	9300      	str	r3, [sp, #0]
 8020c4c:	2343      	movs	r3, #67	; 0x43
 8020c4e:	4a1f      	ldr	r2, [pc, #124]	; (8020ccc <dhcp_rebind+0x130>)
 8020c50:	6979      	ldr	r1, [r7, #20]
 8020c52:	f7fe fdc1 	bl	801f7d8 <udp_sendto_if>
 8020c56:	4603      	mov	r3, r0
 8020c58:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8020c5a:	6978      	ldr	r0, [r7, #20]
 8020c5c:	f7f7 fdae 	bl	80187bc <pbuf_free>
 8020c60:	e001      	b.n	8020c66 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8020c62:	23ff      	movs	r3, #255	; 0xff
 8020c64:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8020c66:	69bb      	ldr	r3, [r7, #24]
 8020c68:	799b      	ldrb	r3, [r3, #6]
 8020c6a:	2bff      	cmp	r3, #255	; 0xff
 8020c6c:	d005      	beq.n	8020c7a <dhcp_rebind+0xde>
    dhcp->tries++;
 8020c6e:	69bb      	ldr	r3, [r7, #24]
 8020c70:	799b      	ldrb	r3, [r3, #6]
 8020c72:	3301      	adds	r3, #1
 8020c74:	b2da      	uxtb	r2, r3
 8020c76:	69bb      	ldr	r3, [r7, #24]
 8020c78:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8020c7a:	69bb      	ldr	r3, [r7, #24]
 8020c7c:	799b      	ldrb	r3, [r3, #6]
 8020c7e:	2b09      	cmp	r3, #9
 8020c80:	d80a      	bhi.n	8020c98 <dhcp_rebind+0xfc>
 8020c82:	69bb      	ldr	r3, [r7, #24]
 8020c84:	799b      	ldrb	r3, [r3, #6]
 8020c86:	b29b      	uxth	r3, r3
 8020c88:	461a      	mov	r2, r3
 8020c8a:	0152      	lsls	r2, r2, #5
 8020c8c:	1ad2      	subs	r2, r2, r3
 8020c8e:	0092      	lsls	r2, r2, #2
 8020c90:	4413      	add	r3, r2
 8020c92:	00db      	lsls	r3, r3, #3
 8020c94:	b29b      	uxth	r3, r3
 8020c96:	e001      	b.n	8020c9c <dhcp_rebind+0x100>
 8020c98:	f242 7310 	movw	r3, #10000	; 0x2710
 8020c9c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020c9e:	89fb      	ldrh	r3, [r7, #14]
 8020ca0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8020ca4:	4a0a      	ldr	r2, [pc, #40]	; (8020cd0 <dhcp_rebind+0x134>)
 8020ca6:	fb82 1203 	smull	r1, r2, r2, r3
 8020caa:	1152      	asrs	r2, r2, #5
 8020cac:	17db      	asrs	r3, r3, #31
 8020cae:	1ad3      	subs	r3, r2, r3
 8020cb0:	b29a      	uxth	r2, r3
 8020cb2:	69bb      	ldr	r3, [r7, #24]
 8020cb4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8020cb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8020cba:	4618      	mov	r0, r3
 8020cbc:	3720      	adds	r7, #32
 8020cbe:	46bd      	mov	sp, r7
 8020cc0:	bd80      	pop	{r7, pc}
 8020cc2:	bf00      	nop
 8020cc4:	2000001c 	.word	0x2000001c
 8020cc8:	20013204 	.word	0x20013204
 8020ccc:	0802bddc 	.word	0x0802bddc
 8020cd0:	10624dd3 	.word	0x10624dd3

08020cd4 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8020cd4:	b5b0      	push	{r4, r5, r7, lr}
 8020cd6:	b08a      	sub	sp, #40	; 0x28
 8020cd8:	af02      	add	r7, sp, #8
 8020cda:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020cdc:	687b      	ldr	r3, [r7, #4]
 8020cde:	6a1b      	ldr	r3, [r3, #32]
 8020ce0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8020ce2:	2103      	movs	r1, #3
 8020ce4:	69b8      	ldr	r0, [r7, #24]
 8020ce6:	f000 f95c 	bl	8020fa2 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8020cea:	f107 030c 	add.w	r3, r7, #12
 8020cee:	2203      	movs	r2, #3
 8020cf0:	69b9      	ldr	r1, [r7, #24]
 8020cf2:	6878      	ldr	r0, [r7, #4]
 8020cf4:	f000 fde0 	bl	80218b8 <dhcp_create_msg>
 8020cf8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8020cfa:	697b      	ldr	r3, [r7, #20]
 8020cfc:	2b00      	cmp	r3, #0
 8020cfe:	d066      	beq.n	8020dce <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8020d00:	697b      	ldr	r3, [r7, #20]
 8020d02:	685b      	ldr	r3, [r3, #4]
 8020d04:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020d06:	89b8      	ldrh	r0, [r7, #12]
 8020d08:	693b      	ldr	r3, [r7, #16]
 8020d0a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020d0e:	2302      	movs	r3, #2
 8020d10:	2239      	movs	r2, #57	; 0x39
 8020d12:	f000 f961 	bl	8020fd8 <dhcp_option>
 8020d16:	4603      	mov	r3, r0
 8020d18:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8020d1a:	89b8      	ldrh	r0, [r7, #12]
 8020d1c:	693b      	ldr	r3, [r7, #16]
 8020d1e:	33f0      	adds	r3, #240	; 0xf0
 8020d20:	f44f 7210 	mov.w	r2, #576	; 0x240
 8020d24:	4619      	mov	r1, r3
 8020d26:	f000 f9b1 	bl	802108c <dhcp_option_short>
 8020d2a:	4603      	mov	r3, r0
 8020d2c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8020d2e:	89b8      	ldrh	r0, [r7, #12]
 8020d30:	693b      	ldr	r3, [r7, #16]
 8020d32:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020d36:	2304      	movs	r3, #4
 8020d38:	2232      	movs	r2, #50	; 0x32
 8020d3a:	f000 f94d 	bl	8020fd8 <dhcp_option>
 8020d3e:	4603      	mov	r3, r0
 8020d40:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020d42:	89bc      	ldrh	r4, [r7, #12]
 8020d44:	693b      	ldr	r3, [r7, #16]
 8020d46:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8020d4a:	69bb      	ldr	r3, [r7, #24]
 8020d4c:	69db      	ldr	r3, [r3, #28]
 8020d4e:	4618      	mov	r0, r3
 8020d50:	f7f6 f925 	bl	8016f9e <lwip_htonl>
 8020d54:	4603      	mov	r3, r0
 8020d56:	461a      	mov	r2, r3
 8020d58:	4629      	mov	r1, r5
 8020d5a:	4620      	mov	r0, r4
 8020d5c:	f000 f9c8 	bl	80210f0 <dhcp_option_long>
 8020d60:	4603      	mov	r3, r0
 8020d62:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020d64:	89b8      	ldrh	r0, [r7, #12]
 8020d66:	693b      	ldr	r3, [r7, #16]
 8020d68:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020d6c:	2303      	movs	r3, #3
 8020d6e:	2237      	movs	r2, #55	; 0x37
 8020d70:	f000 f932 	bl	8020fd8 <dhcp_option>
 8020d74:	4603      	mov	r3, r0
 8020d76:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020d78:	2300      	movs	r3, #0
 8020d7a:	77bb      	strb	r3, [r7, #30]
 8020d7c:	e00e      	b.n	8020d9c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020d7e:	89b8      	ldrh	r0, [r7, #12]
 8020d80:	693b      	ldr	r3, [r7, #16]
 8020d82:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020d86:	7fbb      	ldrb	r3, [r7, #30]
 8020d88:	4a29      	ldr	r2, [pc, #164]	; (8020e30 <dhcp_reboot+0x15c>)
 8020d8a:	5cd3      	ldrb	r3, [r2, r3]
 8020d8c:	461a      	mov	r2, r3
 8020d8e:	f000 f957 	bl	8021040 <dhcp_option_byte>
 8020d92:	4603      	mov	r3, r0
 8020d94:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020d96:	7fbb      	ldrb	r3, [r7, #30]
 8020d98:	3301      	adds	r3, #1
 8020d9a:	77bb      	strb	r3, [r7, #30]
 8020d9c:	7fbb      	ldrb	r3, [r7, #30]
 8020d9e:	2b02      	cmp	r3, #2
 8020da0:	d9ed      	bls.n	8020d7e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8020da2:	89b8      	ldrh	r0, [r7, #12]
 8020da4:	693b      	ldr	r3, [r7, #16]
 8020da6:	33f0      	adds	r3, #240	; 0xf0
 8020da8:	697a      	ldr	r2, [r7, #20]
 8020daa:	4619      	mov	r1, r3
 8020dac:	f000 fe5a 	bl	8021a64 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8020db0:	4b20      	ldr	r3, [pc, #128]	; (8020e34 <dhcp_reboot+0x160>)
 8020db2:	6818      	ldr	r0, [r3, #0]
 8020db4:	687b      	ldr	r3, [r7, #4]
 8020db6:	9300      	str	r3, [sp, #0]
 8020db8:	2343      	movs	r3, #67	; 0x43
 8020dba:	4a1f      	ldr	r2, [pc, #124]	; (8020e38 <dhcp_reboot+0x164>)
 8020dbc:	6979      	ldr	r1, [r7, #20]
 8020dbe:	f7fe fd0b 	bl	801f7d8 <udp_sendto_if>
 8020dc2:	4603      	mov	r3, r0
 8020dc4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8020dc6:	6978      	ldr	r0, [r7, #20]
 8020dc8:	f7f7 fcf8 	bl	80187bc <pbuf_free>
 8020dcc:	e001      	b.n	8020dd2 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8020dce:	23ff      	movs	r3, #255	; 0xff
 8020dd0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8020dd2:	69bb      	ldr	r3, [r7, #24]
 8020dd4:	799b      	ldrb	r3, [r3, #6]
 8020dd6:	2bff      	cmp	r3, #255	; 0xff
 8020dd8:	d005      	beq.n	8020de6 <dhcp_reboot+0x112>
    dhcp->tries++;
 8020dda:	69bb      	ldr	r3, [r7, #24]
 8020ddc:	799b      	ldrb	r3, [r3, #6]
 8020dde:	3301      	adds	r3, #1
 8020de0:	b2da      	uxtb	r2, r3
 8020de2:	69bb      	ldr	r3, [r7, #24]
 8020de4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8020de6:	69bb      	ldr	r3, [r7, #24]
 8020de8:	799b      	ldrb	r3, [r3, #6]
 8020dea:	2b09      	cmp	r3, #9
 8020dec:	d80a      	bhi.n	8020e04 <dhcp_reboot+0x130>
 8020dee:	69bb      	ldr	r3, [r7, #24]
 8020df0:	799b      	ldrb	r3, [r3, #6]
 8020df2:	b29b      	uxth	r3, r3
 8020df4:	461a      	mov	r2, r3
 8020df6:	0152      	lsls	r2, r2, #5
 8020df8:	1ad2      	subs	r2, r2, r3
 8020dfa:	0092      	lsls	r2, r2, #2
 8020dfc:	4413      	add	r3, r2
 8020dfe:	00db      	lsls	r3, r3, #3
 8020e00:	b29b      	uxth	r3, r3
 8020e02:	e001      	b.n	8020e08 <dhcp_reboot+0x134>
 8020e04:	f242 7310 	movw	r3, #10000	; 0x2710
 8020e08:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020e0a:	89fb      	ldrh	r3, [r7, #14]
 8020e0c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8020e10:	4a0a      	ldr	r2, [pc, #40]	; (8020e3c <dhcp_reboot+0x168>)
 8020e12:	fb82 1203 	smull	r1, r2, r2, r3
 8020e16:	1152      	asrs	r2, r2, #5
 8020e18:	17db      	asrs	r3, r3, #31
 8020e1a:	1ad3      	subs	r3, r2, r3
 8020e1c:	b29a      	uxth	r2, r3
 8020e1e:	69bb      	ldr	r3, [r7, #24]
 8020e20:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8020e22:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8020e26:	4618      	mov	r0, r3
 8020e28:	3720      	adds	r7, #32
 8020e2a:	46bd      	mov	sp, r7
 8020e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8020e2e:	bf00      	nop
 8020e30:	2000001c 	.word	0x2000001c
 8020e34:	20013204 	.word	0x20013204
 8020e38:	0802bddc 	.word	0x0802bddc
 8020e3c:	10624dd3 	.word	0x10624dd3

08020e40 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8020e40:	b5b0      	push	{r4, r5, r7, lr}
 8020e42:	b08a      	sub	sp, #40	; 0x28
 8020e44:	af02      	add	r7, sp, #8
 8020e46:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020e48:	687b      	ldr	r3, [r7, #4]
 8020e4a:	6a1b      	ldr	r3, [r3, #32]
 8020e4c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8020e4e:	69fb      	ldr	r3, [r7, #28]
 8020e50:	2b00      	cmp	r3, #0
 8020e52:	f000 8084 	beq.w	8020f5e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8020e56:	69fb      	ldr	r3, [r7, #28]
 8020e58:	795b      	ldrb	r3, [r3, #5]
 8020e5a:	2b00      	cmp	r3, #0
 8020e5c:	f000 8081 	beq.w	8020f62 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8020e60:	69fb      	ldr	r3, [r7, #28]
 8020e62:	699b      	ldr	r3, [r3, #24]
 8020e64:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8020e66:	69fb      	ldr	r3, [r7, #28]
 8020e68:	2200      	movs	r2, #0
 8020e6a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8020e6c:	69fb      	ldr	r3, [r7, #28]
 8020e6e:	2200      	movs	r2, #0
 8020e70:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8020e72:	69fb      	ldr	r3, [r7, #28]
 8020e74:	2200      	movs	r2, #0
 8020e76:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8020e78:	69fb      	ldr	r3, [r7, #28]
 8020e7a:	2200      	movs	r2, #0
 8020e7c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8020e7e:	69fb      	ldr	r3, [r7, #28]
 8020e80:	2200      	movs	r2, #0
 8020e82:	631a      	str	r2, [r3, #48]	; 0x30
 8020e84:	69fb      	ldr	r3, [r7, #28]
 8020e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020e88:	69fb      	ldr	r3, [r7, #28]
 8020e8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8020e8c:	69fb      	ldr	r3, [r7, #28]
 8020e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020e90:	69fb      	ldr	r3, [r7, #28]
 8020e92:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8020e94:	69fb      	ldr	r3, [r7, #28]
 8020e96:	2200      	movs	r2, #0
 8020e98:	829a      	strh	r2, [r3, #20]
 8020e9a:	69fb      	ldr	r3, [r7, #28]
 8020e9c:	8a9a      	ldrh	r2, [r3, #20]
 8020e9e:	69fb      	ldr	r3, [r7, #28]
 8020ea0:	825a      	strh	r2, [r3, #18]
 8020ea2:	69fb      	ldr	r3, [r7, #28]
 8020ea4:	8a5a      	ldrh	r2, [r3, #18]
 8020ea6:	69fb      	ldr	r3, [r7, #28]
 8020ea8:	821a      	strh	r2, [r3, #16]
 8020eaa:	69fb      	ldr	r3, [r7, #28]
 8020eac:	8a1a      	ldrh	r2, [r3, #16]
 8020eae:	69fb      	ldr	r3, [r7, #28]
 8020eb0:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8020eb2:	6878      	ldr	r0, [r7, #4]
 8020eb4:	f000 fe04 	bl	8021ac0 <dhcp_supplied_address>
 8020eb8:	4603      	mov	r3, r0
 8020eba:	2b00      	cmp	r3, #0
 8020ebc:	d03b      	beq.n	8020f36 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8020ebe:	f107 030e 	add.w	r3, r7, #14
 8020ec2:	2207      	movs	r2, #7
 8020ec4:	69f9      	ldr	r1, [r7, #28]
 8020ec6:	6878      	ldr	r0, [r7, #4]
 8020ec8:	f000 fcf6 	bl	80218b8 <dhcp_create_msg>
 8020ecc:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8020ece:	69bb      	ldr	r3, [r7, #24]
 8020ed0:	2b00      	cmp	r3, #0
 8020ed2:	d030      	beq.n	8020f36 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8020ed4:	69bb      	ldr	r3, [r7, #24]
 8020ed6:	685b      	ldr	r3, [r3, #4]
 8020ed8:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8020eda:	89f8      	ldrh	r0, [r7, #14]
 8020edc:	697b      	ldr	r3, [r7, #20]
 8020ede:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8020ee2:	2304      	movs	r3, #4
 8020ee4:	2236      	movs	r2, #54	; 0x36
 8020ee6:	f000 f877 	bl	8020fd8 <dhcp_option>
 8020eea:	4603      	mov	r3, r0
 8020eec:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8020eee:	89fc      	ldrh	r4, [r7, #14]
 8020ef0:	697b      	ldr	r3, [r7, #20]
 8020ef2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8020ef6:	693b      	ldr	r3, [r7, #16]
 8020ef8:	4618      	mov	r0, r3
 8020efa:	f7f6 f850 	bl	8016f9e <lwip_htonl>
 8020efe:	4603      	mov	r3, r0
 8020f00:	461a      	mov	r2, r3
 8020f02:	4629      	mov	r1, r5
 8020f04:	4620      	mov	r0, r4
 8020f06:	f000 f8f3 	bl	80210f0 <dhcp_option_long>
 8020f0a:	4603      	mov	r3, r0
 8020f0c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8020f0e:	89f8      	ldrh	r0, [r7, #14]
 8020f10:	697b      	ldr	r3, [r7, #20]
 8020f12:	33f0      	adds	r3, #240	; 0xf0
 8020f14:	69ba      	ldr	r2, [r7, #24]
 8020f16:	4619      	mov	r1, r3
 8020f18:	f000 fda4 	bl	8021a64 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8020f1c:	4b13      	ldr	r3, [pc, #76]	; (8020f6c <dhcp_release_and_stop+0x12c>)
 8020f1e:	6818      	ldr	r0, [r3, #0]
 8020f20:	f107 0210 	add.w	r2, r7, #16
 8020f24:	687b      	ldr	r3, [r7, #4]
 8020f26:	9300      	str	r3, [sp, #0]
 8020f28:	2343      	movs	r3, #67	; 0x43
 8020f2a:	69b9      	ldr	r1, [r7, #24]
 8020f2c:	f7fe fc54 	bl	801f7d8 <udp_sendto_if>
      pbuf_free(p_out);
 8020f30:	69b8      	ldr	r0, [r7, #24]
 8020f32:	f7f7 fc43 	bl	80187bc <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8020f36:	4b0e      	ldr	r3, [pc, #56]	; (8020f70 <dhcp_release_and_stop+0x130>)
 8020f38:	4a0d      	ldr	r2, [pc, #52]	; (8020f70 <dhcp_release_and_stop+0x130>)
 8020f3a:	490d      	ldr	r1, [pc, #52]	; (8020f70 <dhcp_release_and_stop+0x130>)
 8020f3c:	6878      	ldr	r0, [r7, #4]
 8020f3e:	f7f6 ff2d 	bl	8017d9c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8020f42:	2100      	movs	r1, #0
 8020f44:	69f8      	ldr	r0, [r7, #28]
 8020f46:	f000 f82c 	bl	8020fa2 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8020f4a:	69fb      	ldr	r3, [r7, #28]
 8020f4c:	791b      	ldrb	r3, [r3, #4]
 8020f4e:	2b00      	cmp	r3, #0
 8020f50:	d008      	beq.n	8020f64 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8020f52:	f7fe ffc1 	bl	801fed8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8020f56:	69fb      	ldr	r3, [r7, #28]
 8020f58:	2200      	movs	r2, #0
 8020f5a:	711a      	strb	r2, [r3, #4]
 8020f5c:	e002      	b.n	8020f64 <dhcp_release_and_stop+0x124>
    return;
 8020f5e:	bf00      	nop
 8020f60:	e000      	b.n	8020f64 <dhcp_release_and_stop+0x124>
    return;
 8020f62:	bf00      	nop
  }
}
 8020f64:	3720      	adds	r7, #32
 8020f66:	46bd      	mov	sp, r7
 8020f68:	bdb0      	pop	{r4, r5, r7, pc}
 8020f6a:	bf00      	nop
 8020f6c:	20013204 	.word	0x20013204
 8020f70:	0802bdd8 	.word	0x0802bdd8

08020f74 <dhcp_release>:
 * This function calls dhcp_release_and_stop() internally.
 * @deprecated Use dhcp_release_and_stop() instead.
 */
err_t
dhcp_release(struct netif *netif)
{
 8020f74:	b580      	push	{r7, lr}
 8020f76:	b082      	sub	sp, #8
 8020f78:	af00      	add	r7, sp, #0
 8020f7a:	6078      	str	r0, [r7, #4]
  dhcp_release_and_stop(netif);
 8020f7c:	6878      	ldr	r0, [r7, #4]
 8020f7e:	f7ff ff5f 	bl	8020e40 <dhcp_release_and_stop>
  return ERR_OK;
 8020f82:	2300      	movs	r3, #0
}
 8020f84:	4618      	mov	r0, r3
 8020f86:	3708      	adds	r7, #8
 8020f88:	46bd      	mov	sp, r7
 8020f8a:	bd80      	pop	{r7, pc}

08020f8c <dhcp_stop>:
 * This function calls dhcp_release_and_stop() internally.
 * @deprecated Use dhcp_release_and_stop() instead.
 */
void
dhcp_stop(struct netif *netif)
{
 8020f8c:	b580      	push	{r7, lr}
 8020f8e:	b082      	sub	sp, #8
 8020f90:	af00      	add	r7, sp, #0
 8020f92:	6078      	str	r0, [r7, #4]
  dhcp_release_and_stop(netif);
 8020f94:	6878      	ldr	r0, [r7, #4]
 8020f96:	f7ff ff53 	bl	8020e40 <dhcp_release_and_stop>
}
 8020f9a:	bf00      	nop
 8020f9c:	3708      	adds	r7, #8
 8020f9e:	46bd      	mov	sp, r7
 8020fa0:	bd80      	pop	{r7, pc}

08020fa2 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8020fa2:	b480      	push	{r7}
 8020fa4:	b083      	sub	sp, #12
 8020fa6:	af00      	add	r7, sp, #0
 8020fa8:	6078      	str	r0, [r7, #4]
 8020faa:	460b      	mov	r3, r1
 8020fac:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8020fae:	687b      	ldr	r3, [r7, #4]
 8020fb0:	795b      	ldrb	r3, [r3, #5]
 8020fb2:	78fa      	ldrb	r2, [r7, #3]
 8020fb4:	429a      	cmp	r2, r3
 8020fb6:	d008      	beq.n	8020fca <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8020fb8:	687b      	ldr	r3, [r7, #4]
 8020fba:	78fa      	ldrb	r2, [r7, #3]
 8020fbc:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8020fbe:	687b      	ldr	r3, [r7, #4]
 8020fc0:	2200      	movs	r2, #0
 8020fc2:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8020fc4:	687b      	ldr	r3, [r7, #4]
 8020fc6:	2200      	movs	r2, #0
 8020fc8:	811a      	strh	r2, [r3, #8]
  }
}
 8020fca:	bf00      	nop
 8020fcc:	370c      	adds	r7, #12
 8020fce:	46bd      	mov	sp, r7
 8020fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fd4:	4770      	bx	lr
	...

08020fd8 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8020fd8:	b580      	push	{r7, lr}
 8020fda:	b082      	sub	sp, #8
 8020fdc:	af00      	add	r7, sp, #0
 8020fde:	6039      	str	r1, [r7, #0]
 8020fe0:	4611      	mov	r1, r2
 8020fe2:	461a      	mov	r2, r3
 8020fe4:	4603      	mov	r3, r0
 8020fe6:	80fb      	strh	r3, [r7, #6]
 8020fe8:	460b      	mov	r3, r1
 8020fea:	717b      	strb	r3, [r7, #5]
 8020fec:	4613      	mov	r3, r2
 8020fee:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020ff0:	88fa      	ldrh	r2, [r7, #6]
 8020ff2:	793b      	ldrb	r3, [r7, #4]
 8020ff4:	4413      	add	r3, r2
 8020ff6:	3302      	adds	r3, #2
 8020ff8:	2b44      	cmp	r3, #68	; 0x44
 8020ffa:	d906      	bls.n	802100a <dhcp_option+0x32>
 8020ffc:	4b0d      	ldr	r3, [pc, #52]	; (8021034 <dhcp_option+0x5c>)
 8020ffe:	f240 529a 	movw	r2, #1434	; 0x59a
 8021002:	490d      	ldr	r1, [pc, #52]	; (8021038 <dhcp_option+0x60>)
 8021004:	480d      	ldr	r0, [pc, #52]	; (802103c <dhcp_option+0x64>)
 8021006:	f005 fcc7 	bl	8026998 <iprintf>
  options[options_out_len++] = option_type;
 802100a:	88fb      	ldrh	r3, [r7, #6]
 802100c:	1c5a      	adds	r2, r3, #1
 802100e:	80fa      	strh	r2, [r7, #6]
 8021010:	461a      	mov	r2, r3
 8021012:	683b      	ldr	r3, [r7, #0]
 8021014:	4413      	add	r3, r2
 8021016:	797a      	ldrb	r2, [r7, #5]
 8021018:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 802101a:	88fb      	ldrh	r3, [r7, #6]
 802101c:	1c5a      	adds	r2, r3, #1
 802101e:	80fa      	strh	r2, [r7, #6]
 8021020:	461a      	mov	r2, r3
 8021022:	683b      	ldr	r3, [r7, #0]
 8021024:	4413      	add	r3, r2
 8021026:	793a      	ldrb	r2, [r7, #4]
 8021028:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 802102a:	88fb      	ldrh	r3, [r7, #6]
}
 802102c:	4618      	mov	r0, r3
 802102e:	3708      	adds	r7, #8
 8021030:	46bd      	mov	sp, r7
 8021032:	bd80      	pop	{r7, pc}
 8021034:	0802af64 	.word	0x0802af64
 8021038:	0802b0f8 	.word	0x0802b0f8
 802103c:	0802afc4 	.word	0x0802afc4

08021040 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8021040:	b580      	push	{r7, lr}
 8021042:	b082      	sub	sp, #8
 8021044:	af00      	add	r7, sp, #0
 8021046:	4603      	mov	r3, r0
 8021048:	6039      	str	r1, [r7, #0]
 802104a:	80fb      	strh	r3, [r7, #6]
 802104c:	4613      	mov	r3, r2
 802104e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021050:	88fb      	ldrh	r3, [r7, #6]
 8021052:	2b43      	cmp	r3, #67	; 0x43
 8021054:	d906      	bls.n	8021064 <dhcp_option_byte+0x24>
 8021056:	4b0a      	ldr	r3, [pc, #40]	; (8021080 <dhcp_option_byte+0x40>)
 8021058:	f240 52a6 	movw	r2, #1446	; 0x5a6
 802105c:	4909      	ldr	r1, [pc, #36]	; (8021084 <dhcp_option_byte+0x44>)
 802105e:	480a      	ldr	r0, [pc, #40]	; (8021088 <dhcp_option_byte+0x48>)
 8021060:	f005 fc9a 	bl	8026998 <iprintf>
  options[options_out_len++] = value;
 8021064:	88fb      	ldrh	r3, [r7, #6]
 8021066:	1c5a      	adds	r2, r3, #1
 8021068:	80fa      	strh	r2, [r7, #6]
 802106a:	461a      	mov	r2, r3
 802106c:	683b      	ldr	r3, [r7, #0]
 802106e:	4413      	add	r3, r2
 8021070:	797a      	ldrb	r2, [r7, #5]
 8021072:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8021074:	88fb      	ldrh	r3, [r7, #6]
}
 8021076:	4618      	mov	r0, r3
 8021078:	3708      	adds	r7, #8
 802107a:	46bd      	mov	sp, r7
 802107c:	bd80      	pop	{r7, pc}
 802107e:	bf00      	nop
 8021080:	0802af64 	.word	0x0802af64
 8021084:	0802b13c 	.word	0x0802b13c
 8021088:	0802afc4 	.word	0x0802afc4

0802108c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 802108c:	b580      	push	{r7, lr}
 802108e:	b082      	sub	sp, #8
 8021090:	af00      	add	r7, sp, #0
 8021092:	4603      	mov	r3, r0
 8021094:	6039      	str	r1, [r7, #0]
 8021096:	80fb      	strh	r3, [r7, #6]
 8021098:	4613      	mov	r3, r2
 802109a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802109c:	88fb      	ldrh	r3, [r7, #6]
 802109e:	3302      	adds	r3, #2
 80210a0:	2b44      	cmp	r3, #68	; 0x44
 80210a2:	d906      	bls.n	80210b2 <dhcp_option_short+0x26>
 80210a4:	4b0f      	ldr	r3, [pc, #60]	; (80210e4 <dhcp_option_short+0x58>)
 80210a6:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80210aa:	490f      	ldr	r1, [pc, #60]	; (80210e8 <dhcp_option_short+0x5c>)
 80210ac:	480f      	ldr	r0, [pc, #60]	; (80210ec <dhcp_option_short+0x60>)
 80210ae:	f005 fc73 	bl	8026998 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80210b2:	88bb      	ldrh	r3, [r7, #4]
 80210b4:	0a1b      	lsrs	r3, r3, #8
 80210b6:	b29a      	uxth	r2, r3
 80210b8:	88fb      	ldrh	r3, [r7, #6]
 80210ba:	1c59      	adds	r1, r3, #1
 80210bc:	80f9      	strh	r1, [r7, #6]
 80210be:	4619      	mov	r1, r3
 80210c0:	683b      	ldr	r3, [r7, #0]
 80210c2:	440b      	add	r3, r1
 80210c4:	b2d2      	uxtb	r2, r2
 80210c6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80210c8:	88fb      	ldrh	r3, [r7, #6]
 80210ca:	1c5a      	adds	r2, r3, #1
 80210cc:	80fa      	strh	r2, [r7, #6]
 80210ce:	461a      	mov	r2, r3
 80210d0:	683b      	ldr	r3, [r7, #0]
 80210d2:	4413      	add	r3, r2
 80210d4:	88ba      	ldrh	r2, [r7, #4]
 80210d6:	b2d2      	uxtb	r2, r2
 80210d8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80210da:	88fb      	ldrh	r3, [r7, #6]
}
 80210dc:	4618      	mov	r0, r3
 80210de:	3708      	adds	r7, #8
 80210e0:	46bd      	mov	sp, r7
 80210e2:	bd80      	pop	{r7, pc}
 80210e4:	0802af64 	.word	0x0802af64
 80210e8:	0802b174 	.word	0x0802b174
 80210ec:	0802afc4 	.word	0x0802afc4

080210f0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80210f0:	b580      	push	{r7, lr}
 80210f2:	b084      	sub	sp, #16
 80210f4:	af00      	add	r7, sp, #0
 80210f6:	4603      	mov	r3, r0
 80210f8:	60b9      	str	r1, [r7, #8]
 80210fa:	607a      	str	r2, [r7, #4]
 80210fc:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80210fe:	89fb      	ldrh	r3, [r7, #14]
 8021100:	3304      	adds	r3, #4
 8021102:	2b44      	cmp	r3, #68	; 0x44
 8021104:	d906      	bls.n	8021114 <dhcp_option_long+0x24>
 8021106:	4b19      	ldr	r3, [pc, #100]	; (802116c <dhcp_option_long+0x7c>)
 8021108:	f240 52b7 	movw	r2, #1463	; 0x5b7
 802110c:	4918      	ldr	r1, [pc, #96]	; (8021170 <dhcp_option_long+0x80>)
 802110e:	4819      	ldr	r0, [pc, #100]	; (8021174 <dhcp_option_long+0x84>)
 8021110:	f005 fc42 	bl	8026998 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8021114:	687b      	ldr	r3, [r7, #4]
 8021116:	0e1a      	lsrs	r2, r3, #24
 8021118:	89fb      	ldrh	r3, [r7, #14]
 802111a:	1c59      	adds	r1, r3, #1
 802111c:	81f9      	strh	r1, [r7, #14]
 802111e:	4619      	mov	r1, r3
 8021120:	68bb      	ldr	r3, [r7, #8]
 8021122:	440b      	add	r3, r1
 8021124:	b2d2      	uxtb	r2, r2
 8021126:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8021128:	687b      	ldr	r3, [r7, #4]
 802112a:	0c1a      	lsrs	r2, r3, #16
 802112c:	89fb      	ldrh	r3, [r7, #14]
 802112e:	1c59      	adds	r1, r3, #1
 8021130:	81f9      	strh	r1, [r7, #14]
 8021132:	4619      	mov	r1, r3
 8021134:	68bb      	ldr	r3, [r7, #8]
 8021136:	440b      	add	r3, r1
 8021138:	b2d2      	uxtb	r2, r2
 802113a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 802113c:	687b      	ldr	r3, [r7, #4]
 802113e:	0a1a      	lsrs	r2, r3, #8
 8021140:	89fb      	ldrh	r3, [r7, #14]
 8021142:	1c59      	adds	r1, r3, #1
 8021144:	81f9      	strh	r1, [r7, #14]
 8021146:	4619      	mov	r1, r3
 8021148:	68bb      	ldr	r3, [r7, #8]
 802114a:	440b      	add	r3, r1
 802114c:	b2d2      	uxtb	r2, r2
 802114e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8021150:	89fb      	ldrh	r3, [r7, #14]
 8021152:	1c5a      	adds	r2, r3, #1
 8021154:	81fa      	strh	r2, [r7, #14]
 8021156:	461a      	mov	r2, r3
 8021158:	68bb      	ldr	r3, [r7, #8]
 802115a:	4413      	add	r3, r2
 802115c:	687a      	ldr	r2, [r7, #4]
 802115e:	b2d2      	uxtb	r2, r2
 8021160:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8021162:	89fb      	ldrh	r3, [r7, #14]
}
 8021164:	4618      	mov	r0, r3
 8021166:	3710      	adds	r7, #16
 8021168:	46bd      	mov	sp, r7
 802116a:	bd80      	pop	{r7, pc}
 802116c:	0802af64 	.word	0x0802af64
 8021170:	0802b1b0 	.word	0x0802b1b0
 8021174:	0802afc4 	.word	0x0802afc4

08021178 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8021178:	b580      	push	{r7, lr}
 802117a:	b090      	sub	sp, #64	; 0x40
 802117c:	af00      	add	r7, sp, #0
 802117e:	6078      	str	r0, [r7, #4]
 8021180:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8021182:	2300      	movs	r3, #0
 8021184:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8021186:	2300      	movs	r3, #0
 8021188:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 802118a:	2208      	movs	r2, #8
 802118c:	2100      	movs	r1, #0
 802118e:	48be      	ldr	r0, [pc, #760]	; (8021488 <dhcp_parse_reply+0x310>)
 8021190:	f005 fb52 	bl	8026838 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8021194:	687b      	ldr	r3, [r7, #4]
 8021196:	895b      	ldrh	r3, [r3, #10]
 8021198:	2b2b      	cmp	r3, #43	; 0x2b
 802119a:	d802      	bhi.n	80211a2 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 802119c:	f06f 0301 	mvn.w	r3, #1
 80211a0:	e2a8      	b.n	80216f4 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80211a2:	687b      	ldr	r3, [r7, #4]
 80211a4:	685b      	ldr	r3, [r3, #4]
 80211a6:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80211a8:	23f0      	movs	r3, #240	; 0xf0
 80211aa:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80211ac:	687b      	ldr	r3, [r7, #4]
 80211ae:	891b      	ldrh	r3, [r3, #8]
 80211b0:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80211b2:	687b      	ldr	r3, [r7, #4]
 80211b4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80211b6:	e00c      	b.n	80211d2 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80211b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211ba:	895b      	ldrh	r3, [r3, #10]
 80211bc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80211be:	1ad3      	subs	r3, r2, r3
 80211c0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80211c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211c4:	895b      	ldrh	r3, [r3, #10]
 80211c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80211c8:	1ad3      	subs	r3, r2, r3
 80211ca:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80211cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211ce:	681b      	ldr	r3, [r3, #0]
 80211d0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80211d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211d4:	2b00      	cmp	r3, #0
 80211d6:	d004      	beq.n	80211e2 <dhcp_parse_reply+0x6a>
 80211d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211da:	895b      	ldrh	r3, [r3, #10]
 80211dc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80211de:	429a      	cmp	r2, r3
 80211e0:	d2ea      	bcs.n	80211b8 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80211e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211e4:	2b00      	cmp	r3, #0
 80211e6:	d102      	bne.n	80211ee <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80211e8:	f06f 0301 	mvn.w	r3, #1
 80211ec:	e282      	b.n	80216f4 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 80211ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80211f0:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80211f2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80211f4:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80211f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211f8:	685b      	ldr	r3, [r3, #4]
 80211fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80211fc:	e23a      	b.n	8021674 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 80211fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021200:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8021202:	4413      	add	r3, r2
 8021204:	781b      	ldrb	r3, [r3, #0]
 8021206:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8021208:	2300      	movs	r3, #0
 802120a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 802120e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021212:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8021214:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021216:	3302      	adds	r3, #2
 8021218:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 802121a:	8bfa      	ldrh	r2, [r7, #30]
 802121c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802121e:	429a      	cmp	r2, r3
 8021220:	d202      	bcs.n	8021228 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8021222:	f06f 0301 	mvn.w	r3, #1
 8021226:	e265      	b.n	80216f4 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8021228:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802122a:	3301      	adds	r3, #1
 802122c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802122e:	8952      	ldrh	r2, [r2, #10]
 8021230:	4293      	cmp	r3, r2
 8021232:	da07      	bge.n	8021244 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8021234:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021236:	3301      	adds	r3, #1
 8021238:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802123a:	4413      	add	r3, r2
 802123c:	781b      	ldrb	r3, [r3, #0]
 802123e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021242:	e00b      	b.n	802125c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8021244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021246:	681b      	ldr	r3, [r3, #0]
 8021248:	2b00      	cmp	r3, #0
 802124a:	d004      	beq.n	8021256 <dhcp_parse_reply+0xde>
 802124c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802124e:	681b      	ldr	r3, [r3, #0]
 8021250:	685b      	ldr	r3, [r3, #4]
 8021252:	781b      	ldrb	r3, [r3, #0]
 8021254:	e000      	b.n	8021258 <dhcp_parse_reply+0xe0>
 8021256:	2300      	movs	r3, #0
 8021258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 802125c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021260:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8021264:	7dfb      	ldrb	r3, [r7, #23]
 8021266:	2b3b      	cmp	r3, #59	; 0x3b
 8021268:	f200 812d 	bhi.w	80214c6 <dhcp_parse_reply+0x34e>
 802126c:	a201      	add	r2, pc, #4	; (adr r2, 8021274 <dhcp_parse_reply+0xfc>)
 802126e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021272:	bf00      	nop
 8021274:	08021365 	.word	0x08021365
 8021278:	08021375 	.word	0x08021375
 802127c:	080214c7 	.word	0x080214c7
 8021280:	08021397 	.word	0x08021397
 8021284:	080214c7 	.word	0x080214c7
 8021288:	080214c7 	.word	0x080214c7
 802128c:	080214c7 	.word	0x080214c7
 8021290:	080214c7 	.word	0x080214c7
 8021294:	080214c7 	.word	0x080214c7
 8021298:	080214c7 	.word	0x080214c7
 802129c:	080214c7 	.word	0x080214c7
 80212a0:	080214c7 	.word	0x080214c7
 80212a4:	080214c7 	.word	0x080214c7
 80212a8:	080214c7 	.word	0x080214c7
 80212ac:	080214c7 	.word	0x080214c7
 80212b0:	080214c7 	.word	0x080214c7
 80212b4:	080214c7 	.word	0x080214c7
 80212b8:	080214c7 	.word	0x080214c7
 80212bc:	080214c7 	.word	0x080214c7
 80212c0:	080214c7 	.word	0x080214c7
 80212c4:	080214c7 	.word	0x080214c7
 80212c8:	080214c7 	.word	0x080214c7
 80212cc:	080214c7 	.word	0x080214c7
 80212d0:	080214c7 	.word	0x080214c7
 80212d4:	080214c7 	.word	0x080214c7
 80212d8:	080214c7 	.word	0x080214c7
 80212dc:	080214c7 	.word	0x080214c7
 80212e0:	080214c7 	.word	0x080214c7
 80212e4:	080214c7 	.word	0x080214c7
 80212e8:	080214c7 	.word	0x080214c7
 80212ec:	080214c7 	.word	0x080214c7
 80212f0:	080214c7 	.word	0x080214c7
 80212f4:	080214c7 	.word	0x080214c7
 80212f8:	080214c7 	.word	0x080214c7
 80212fc:	080214c7 	.word	0x080214c7
 8021300:	080214c7 	.word	0x080214c7
 8021304:	080214c7 	.word	0x080214c7
 8021308:	080214c7 	.word	0x080214c7
 802130c:	080214c7 	.word	0x080214c7
 8021310:	080214c7 	.word	0x080214c7
 8021314:	080214c7 	.word	0x080214c7
 8021318:	080214c7 	.word	0x080214c7
 802131c:	080214c7 	.word	0x080214c7
 8021320:	080214c7 	.word	0x080214c7
 8021324:	080214c7 	.word	0x080214c7
 8021328:	080214c7 	.word	0x080214c7
 802132c:	080214c7 	.word	0x080214c7
 8021330:	080214c7 	.word	0x080214c7
 8021334:	080214c7 	.word	0x080214c7
 8021338:	080214c7 	.word	0x080214c7
 802133c:	080214c7 	.word	0x080214c7
 8021340:	080213c3 	.word	0x080213c3
 8021344:	080213e5 	.word	0x080213e5
 8021348:	08021421 	.word	0x08021421
 802134c:	08021443 	.word	0x08021443
 8021350:	080214c7 	.word	0x080214c7
 8021354:	080214c7 	.word	0x080214c7
 8021358:	080214c7 	.word	0x080214c7
 802135c:	08021465 	.word	0x08021465
 8021360:	080214a5 	.word	0x080214a5
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8021364:	2300      	movs	r3, #0
 8021366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802136a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802136e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8021372:	e0ac      	b.n	80214ce <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021378:	2b04      	cmp	r3, #4
 802137a:	d009      	beq.n	8021390 <dhcp_parse_reply+0x218>
 802137c:	4b43      	ldr	r3, [pc, #268]	; (802148c <dhcp_parse_reply+0x314>)
 802137e:	f240 622e 	movw	r2, #1582	; 0x62e
 8021382:	4943      	ldr	r1, [pc, #268]	; (8021490 <dhcp_parse_reply+0x318>)
 8021384:	4843      	ldr	r0, [pc, #268]	; (8021494 <dhcp_parse_reply+0x31c>)
 8021386:	f005 fb07 	bl	8026998 <iprintf>
 802138a:	f06f 0305 	mvn.w	r3, #5
 802138e:	e1b1      	b.n	80216f4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8021390:	2306      	movs	r3, #6
 8021392:	623b      	str	r3, [r7, #32]
        break;
 8021394:	e09b      	b.n	80214ce <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8021396:	2304      	movs	r3, #4
 8021398:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 802139c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80213a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80213a4:	429a      	cmp	r2, r3
 80213a6:	d209      	bcs.n	80213bc <dhcp_parse_reply+0x244>
 80213a8:	4b38      	ldr	r3, [pc, #224]	; (802148c <dhcp_parse_reply+0x314>)
 80213aa:	f240 6233 	movw	r2, #1587	; 0x633
 80213ae:	493a      	ldr	r1, [pc, #232]	; (8021498 <dhcp_parse_reply+0x320>)
 80213b0:	4838      	ldr	r0, [pc, #224]	; (8021494 <dhcp_parse_reply+0x31c>)
 80213b2:	f005 faf1 	bl	8026998 <iprintf>
 80213b6:	f06f 0305 	mvn.w	r3, #5
 80213ba:	e19b      	b.n	80216f4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80213bc:	2307      	movs	r3, #7
 80213be:	623b      	str	r3, [r7, #32]
        break;
 80213c0:	e085      	b.n	80214ce <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80213c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80213c6:	2b04      	cmp	r3, #4
 80213c8:	d009      	beq.n	80213de <dhcp_parse_reply+0x266>
 80213ca:	4b30      	ldr	r3, [pc, #192]	; (802148c <dhcp_parse_reply+0x314>)
 80213cc:	f240 6241 	movw	r2, #1601	; 0x641
 80213d0:	492f      	ldr	r1, [pc, #188]	; (8021490 <dhcp_parse_reply+0x318>)
 80213d2:	4830      	ldr	r0, [pc, #192]	; (8021494 <dhcp_parse_reply+0x31c>)
 80213d4:	f005 fae0 	bl	8026998 <iprintf>
 80213d8:	f06f 0305 	mvn.w	r3, #5
 80213dc:	e18a      	b.n	80216f4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80213de:	2303      	movs	r3, #3
 80213e0:	623b      	str	r3, [r7, #32]
        break;
 80213e2:	e074      	b.n	80214ce <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80213e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80213e8:	2b01      	cmp	r3, #1
 80213ea:	d009      	beq.n	8021400 <dhcp_parse_reply+0x288>
 80213ec:	4b27      	ldr	r3, [pc, #156]	; (802148c <dhcp_parse_reply+0x314>)
 80213ee:	f240 624f 	movw	r2, #1615	; 0x64f
 80213f2:	492a      	ldr	r1, [pc, #168]	; (802149c <dhcp_parse_reply+0x324>)
 80213f4:	4827      	ldr	r0, [pc, #156]	; (8021494 <dhcp_parse_reply+0x31c>)
 80213f6:	f005 facf 	bl	8026998 <iprintf>
 80213fa:	f06f 0305 	mvn.w	r3, #5
 80213fe:	e179      	b.n	80216f4 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8021400:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8021402:	2bf0      	cmp	r3, #240	; 0xf0
 8021404:	d009      	beq.n	802141a <dhcp_parse_reply+0x2a2>
 8021406:	4b21      	ldr	r3, [pc, #132]	; (802148c <dhcp_parse_reply+0x314>)
 8021408:	f240 6251 	movw	r2, #1617	; 0x651
 802140c:	4924      	ldr	r1, [pc, #144]	; (80214a0 <dhcp_parse_reply+0x328>)
 802140e:	4821      	ldr	r0, [pc, #132]	; (8021494 <dhcp_parse_reply+0x31c>)
 8021410:	f005 fac2 	bl	8026998 <iprintf>
 8021414:	f06f 0305 	mvn.w	r3, #5
 8021418:	e16c      	b.n	80216f4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 802141a:	2300      	movs	r3, #0
 802141c:	623b      	str	r3, [r7, #32]
        break;
 802141e:	e056      	b.n	80214ce <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8021420:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021424:	2b01      	cmp	r3, #1
 8021426:	d009      	beq.n	802143c <dhcp_parse_reply+0x2c4>
 8021428:	4b18      	ldr	r3, [pc, #96]	; (802148c <dhcp_parse_reply+0x314>)
 802142a:	f240 6255 	movw	r2, #1621	; 0x655
 802142e:	491b      	ldr	r1, [pc, #108]	; (802149c <dhcp_parse_reply+0x324>)
 8021430:	4818      	ldr	r0, [pc, #96]	; (8021494 <dhcp_parse_reply+0x31c>)
 8021432:	f005 fab1 	bl	8026998 <iprintf>
 8021436:	f06f 0305 	mvn.w	r3, #5
 802143a:	e15b      	b.n	80216f4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 802143c:	2301      	movs	r3, #1
 802143e:	623b      	str	r3, [r7, #32]
        break;
 8021440:	e045      	b.n	80214ce <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021442:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021446:	2b04      	cmp	r3, #4
 8021448:	d009      	beq.n	802145e <dhcp_parse_reply+0x2e6>
 802144a:	4b10      	ldr	r3, [pc, #64]	; (802148c <dhcp_parse_reply+0x314>)
 802144c:	f240 6259 	movw	r2, #1625	; 0x659
 8021450:	490f      	ldr	r1, [pc, #60]	; (8021490 <dhcp_parse_reply+0x318>)
 8021452:	4810      	ldr	r0, [pc, #64]	; (8021494 <dhcp_parse_reply+0x31c>)
 8021454:	f005 faa0 	bl	8026998 <iprintf>
 8021458:	f06f 0305 	mvn.w	r3, #5
 802145c:	e14a      	b.n	80216f4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 802145e:	2302      	movs	r3, #2
 8021460:	623b      	str	r3, [r7, #32]
        break;
 8021462:	e034      	b.n	80214ce <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021468:	2b04      	cmp	r3, #4
 802146a:	d009      	beq.n	8021480 <dhcp_parse_reply+0x308>
 802146c:	4b07      	ldr	r3, [pc, #28]	; (802148c <dhcp_parse_reply+0x314>)
 802146e:	f240 625d 	movw	r2, #1629	; 0x65d
 8021472:	4907      	ldr	r1, [pc, #28]	; (8021490 <dhcp_parse_reply+0x318>)
 8021474:	4807      	ldr	r0, [pc, #28]	; (8021494 <dhcp_parse_reply+0x31c>)
 8021476:	f005 fa8f 	bl	8026998 <iprintf>
 802147a:	f06f 0305 	mvn.w	r3, #5
 802147e:	e139      	b.n	80216f4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8021480:	2304      	movs	r3, #4
 8021482:	623b      	str	r3, [r7, #32]
        break;
 8021484:	e023      	b.n	80214ce <dhcp_parse_reply+0x356>
 8021486:	bf00      	nop
 8021488:	2001a010 	.word	0x2001a010
 802148c:	0802af64 	.word	0x0802af64
 8021490:	0802b1ec 	.word	0x0802b1ec
 8021494:	0802afc4 	.word	0x0802afc4
 8021498:	0802b1f8 	.word	0x0802b1f8
 802149c:	0802b20c 	.word	0x0802b20c
 80214a0:	0802b218 	.word	0x0802b218
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80214a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80214a8:	2b04      	cmp	r3, #4
 80214aa:	d009      	beq.n	80214c0 <dhcp_parse_reply+0x348>
 80214ac:	4b93      	ldr	r3, [pc, #588]	; (80216fc <dhcp_parse_reply+0x584>)
 80214ae:	f240 6261 	movw	r2, #1633	; 0x661
 80214b2:	4993      	ldr	r1, [pc, #588]	; (8021700 <dhcp_parse_reply+0x588>)
 80214b4:	4893      	ldr	r0, [pc, #588]	; (8021704 <dhcp_parse_reply+0x58c>)
 80214b6:	f005 fa6f 	bl	8026998 <iprintf>
 80214ba:	f06f 0305 	mvn.w	r3, #5
 80214be:	e119      	b.n	80216f4 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 80214c0:	2305      	movs	r3, #5
 80214c2:	623b      	str	r3, [r7, #32]
        break;
 80214c4:	e003      	b.n	80214ce <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 80214c6:	2300      	movs	r3, #0
 80214c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80214cc:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80214ce:	7dfb      	ldrb	r3, [r7, #23]
 80214d0:	2b00      	cmp	r3, #0
 80214d2:	d103      	bne.n	80214dc <dhcp_parse_reply+0x364>
      offset++;
 80214d4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80214d6:	3301      	adds	r3, #1
 80214d8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80214da:	e0a1      	b.n	8021620 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80214dc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80214de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80214e2:	4413      	add	r3, r2
 80214e4:	3302      	adds	r3, #2
 80214e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80214ea:	db02      	blt.n	80214f2 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 80214ec:	f06f 0301 	mvn.w	r3, #1
 80214f0:	e100      	b.n	80216f4 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 80214f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80214f6:	b29a      	uxth	r2, r3
 80214f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80214fa:	4413      	add	r3, r2
 80214fc:	b29b      	uxth	r3, r3
 80214fe:	3302      	adds	r3, #2
 8021500:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8021502:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021506:	2b00      	cmp	r3, #0
 8021508:	f000 808a 	beq.w	8021620 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 802150c:	2300      	movs	r3, #0
 802150e:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8021510:	6a3b      	ldr	r3, [r7, #32]
 8021512:	2b00      	cmp	r3, #0
 8021514:	db02      	blt.n	802151c <dhcp_parse_reply+0x3a4>
 8021516:	6a3b      	ldr	r3, [r7, #32]
 8021518:	2b07      	cmp	r3, #7
 802151a:	dd06      	ble.n	802152a <dhcp_parse_reply+0x3b2>
 802151c:	4b77      	ldr	r3, [pc, #476]	; (80216fc <dhcp_parse_reply+0x584>)
 802151e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8021522:	4979      	ldr	r1, [pc, #484]	; (8021708 <dhcp_parse_reply+0x590>)
 8021524:	4877      	ldr	r0, [pc, #476]	; (8021704 <dhcp_parse_reply+0x58c>)
 8021526:	f005 fa37 	bl	8026998 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 802152a:	4a78      	ldr	r2, [pc, #480]	; (802170c <dhcp_parse_reply+0x594>)
 802152c:	6a3b      	ldr	r3, [r7, #32]
 802152e:	4413      	add	r3, r2
 8021530:	781b      	ldrb	r3, [r3, #0]
 8021532:	2b00      	cmp	r3, #0
 8021534:	d174      	bne.n	8021620 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8021536:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802153a:	2b04      	cmp	r3, #4
 802153c:	bf28      	it	cs
 802153e:	2304      	movcs	r3, #4
 8021540:	b2db      	uxtb	r3, r3
 8021542:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8021544:	8bfb      	ldrh	r3, [r7, #30]
 8021546:	8aba      	ldrh	r2, [r7, #20]
 8021548:	f107 0108 	add.w	r1, r7, #8
 802154c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802154e:	f7f7 fb3b 	bl	8018bc8 <pbuf_copy_partial>
 8021552:	4603      	mov	r3, r0
 8021554:	461a      	mov	r2, r3
 8021556:	8abb      	ldrh	r3, [r7, #20]
 8021558:	4293      	cmp	r3, r2
 802155a:	d002      	beq.n	8021562 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 802155c:	f06f 0301 	mvn.w	r3, #1
 8021560:	e0c8      	b.n	80216f4 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8021562:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021566:	2b04      	cmp	r3, #4
 8021568:	d933      	bls.n	80215d2 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 802156a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802156e:	f003 0303 	and.w	r3, r3, #3
 8021572:	b2db      	uxtb	r3, r3
 8021574:	2b00      	cmp	r3, #0
 8021576:	d009      	beq.n	802158c <dhcp_parse_reply+0x414>
 8021578:	4b60      	ldr	r3, [pc, #384]	; (80216fc <dhcp_parse_reply+0x584>)
 802157a:	f240 6281 	movw	r2, #1665	; 0x681
 802157e:	4964      	ldr	r1, [pc, #400]	; (8021710 <dhcp_parse_reply+0x598>)
 8021580:	4860      	ldr	r0, [pc, #384]	; (8021704 <dhcp_parse_reply+0x58c>)
 8021582:	f005 fa09 	bl	8026998 <iprintf>
 8021586:	f06f 0305 	mvn.w	r3, #5
 802158a:	e0b3      	b.n	80216f4 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 802158c:	4a5f      	ldr	r2, [pc, #380]	; (802170c <dhcp_parse_reply+0x594>)
 802158e:	6a3b      	ldr	r3, [r7, #32]
 8021590:	4413      	add	r3, r2
 8021592:	2201      	movs	r2, #1
 8021594:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8021596:	68bb      	ldr	r3, [r7, #8]
 8021598:	4618      	mov	r0, r3
 802159a:	f7f5 fd00 	bl	8016f9e <lwip_htonl>
 802159e:	4601      	mov	r1, r0
 80215a0:	4a5c      	ldr	r2, [pc, #368]	; (8021714 <dhcp_parse_reply+0x59c>)
 80215a2:	6a3b      	ldr	r3, [r7, #32]
 80215a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80215a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80215ac:	3b04      	subs	r3, #4
 80215ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80215b2:	8bfb      	ldrh	r3, [r7, #30]
 80215b4:	3304      	adds	r3, #4
 80215b6:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80215b8:	8a7a      	ldrh	r2, [r7, #18]
 80215ba:	8bfb      	ldrh	r3, [r7, #30]
 80215bc:	429a      	cmp	r2, r3
 80215be:	d202      	bcs.n	80215c6 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 80215c0:	f06f 0301 	mvn.w	r3, #1
 80215c4:	e096      	b.n	80216f4 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 80215c6:	8a7b      	ldrh	r3, [r7, #18]
 80215c8:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80215ca:	6a3b      	ldr	r3, [r7, #32]
 80215cc:	3301      	adds	r3, #1
 80215ce:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80215d0:	e79e      	b.n	8021510 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 80215d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80215d6:	2b04      	cmp	r3, #4
 80215d8:	d106      	bne.n	80215e8 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 80215da:	68bb      	ldr	r3, [r7, #8]
 80215dc:	4618      	mov	r0, r3
 80215de:	f7f5 fcde 	bl	8016f9e <lwip_htonl>
 80215e2:	4603      	mov	r3, r0
 80215e4:	60bb      	str	r3, [r7, #8]
 80215e6:	e011      	b.n	802160c <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80215e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80215ec:	2b01      	cmp	r3, #1
 80215ee:	d009      	beq.n	8021604 <dhcp_parse_reply+0x48c>
 80215f0:	4b42      	ldr	r3, [pc, #264]	; (80216fc <dhcp_parse_reply+0x584>)
 80215f2:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80215f6:	4948      	ldr	r1, [pc, #288]	; (8021718 <dhcp_parse_reply+0x5a0>)
 80215f8:	4842      	ldr	r0, [pc, #264]	; (8021704 <dhcp_parse_reply+0x58c>)
 80215fa:	f005 f9cd 	bl	8026998 <iprintf>
 80215fe:	f06f 0305 	mvn.w	r3, #5
 8021602:	e077      	b.n	80216f4 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8021604:	f107 0308 	add.w	r3, r7, #8
 8021608:	781b      	ldrb	r3, [r3, #0]
 802160a:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 802160c:	4a3f      	ldr	r2, [pc, #252]	; (802170c <dhcp_parse_reply+0x594>)
 802160e:	6a3b      	ldr	r3, [r7, #32]
 8021610:	4413      	add	r3, r2
 8021612:	2201      	movs	r2, #1
 8021614:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8021616:	68ba      	ldr	r2, [r7, #8]
 8021618:	493e      	ldr	r1, [pc, #248]	; (8021714 <dhcp_parse_reply+0x59c>)
 802161a:	6a3b      	ldr	r3, [r7, #32]
 802161c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8021620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021622:	895b      	ldrh	r3, [r3, #10]
 8021624:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8021626:	429a      	cmp	r2, r3
 8021628:	d324      	bcc.n	8021674 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 802162a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802162c:	895b      	ldrh	r3, [r3, #10]
 802162e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8021630:	1ad3      	subs	r3, r2, r3
 8021632:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8021634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021636:	895b      	ldrh	r3, [r3, #10]
 8021638:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 802163a:	1ad3      	subs	r3, r2, r3
 802163c:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 802163e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8021640:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8021642:	429a      	cmp	r2, r3
 8021644:	d213      	bcs.n	802166e <dhcp_parse_reply+0x4f6>
        q = q->next;
 8021646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021648:	681b      	ldr	r3, [r3, #0]
 802164a:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 802164c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802164e:	2b00      	cmp	r3, #0
 8021650:	d109      	bne.n	8021666 <dhcp_parse_reply+0x4ee>
 8021652:	4b2a      	ldr	r3, [pc, #168]	; (80216fc <dhcp_parse_reply+0x584>)
 8021654:	f240 629d 	movw	r2, #1693	; 0x69d
 8021658:	4930      	ldr	r1, [pc, #192]	; (802171c <dhcp_parse_reply+0x5a4>)
 802165a:	482a      	ldr	r0, [pc, #168]	; (8021704 <dhcp_parse_reply+0x58c>)
 802165c:	f005 f99c 	bl	8026998 <iprintf>
 8021660:	f06f 0305 	mvn.w	r3, #5
 8021664:	e046      	b.n	80216f4 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8021666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021668:	685b      	ldr	r3, [r3, #4]
 802166a:	63fb      	str	r3, [r7, #60]	; 0x3c
 802166c:	e002      	b.n	8021674 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 802166e:	f06f 0301 	mvn.w	r3, #1
 8021672:	e03f      	b.n	80216f4 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8021674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021676:	2b00      	cmp	r3, #0
 8021678:	d00a      	beq.n	8021690 <dhcp_parse_reply+0x518>
 802167a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 802167c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 802167e:	429a      	cmp	r2, r3
 8021680:	d206      	bcs.n	8021690 <dhcp_parse_reply+0x518>
 8021682:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021684:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8021686:	4413      	add	r3, r2
 8021688:	781b      	ldrb	r3, [r3, #0]
 802168a:	2bff      	cmp	r3, #255	; 0xff
 802168c:	f47f adb7 	bne.w	80211fe <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8021690:	4b1e      	ldr	r3, [pc, #120]	; (802170c <dhcp_parse_reply+0x594>)
 8021692:	781b      	ldrb	r3, [r3, #0]
 8021694:	2b00      	cmp	r3, #0
 8021696:	d018      	beq.n	80216ca <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8021698:	4b1e      	ldr	r3, [pc, #120]	; (8021714 <dhcp_parse_reply+0x59c>)
 802169a:	681b      	ldr	r3, [r3, #0]
 802169c:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 802169e:	4b1b      	ldr	r3, [pc, #108]	; (802170c <dhcp_parse_reply+0x594>)
 80216a0:	2200      	movs	r2, #0
 80216a2:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80216a4:	68fb      	ldr	r3, [r7, #12]
 80216a6:	2b01      	cmp	r3, #1
 80216a8:	d102      	bne.n	80216b0 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 80216aa:	2301      	movs	r3, #1
 80216ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80216ae:	e00c      	b.n	80216ca <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80216b0:	68fb      	ldr	r3, [r7, #12]
 80216b2:	2b02      	cmp	r3, #2
 80216b4:	d102      	bne.n	80216bc <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 80216b6:	2301      	movs	r3, #1
 80216b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80216ba:	e006      	b.n	80216ca <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80216bc:	68fb      	ldr	r3, [r7, #12]
 80216be:	2b03      	cmp	r3, #3
 80216c0:	d103      	bne.n	80216ca <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 80216c2:	2301      	movs	r3, #1
 80216c4:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80216c6:	2301      	movs	r3, #1
 80216c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80216ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216cc:	2b00      	cmp	r3, #0
 80216ce:	d006      	beq.n	80216de <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80216d0:	2300      	movs	r3, #0
 80216d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80216d4:	236c      	movs	r3, #108	; 0x6c
 80216d6:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80216d8:	23ec      	movs	r3, #236	; 0xec
 80216da:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80216dc:	e569      	b.n	80211b2 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80216de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80216e0:	2b00      	cmp	r3, #0
 80216e2:	d006      	beq.n	80216f2 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 80216e4:	2300      	movs	r3, #0
 80216e6:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80216e8:	232c      	movs	r3, #44	; 0x2c
 80216ea:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80216ec:	236c      	movs	r3, #108	; 0x6c
 80216ee:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80216f0:	e55f      	b.n	80211b2 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80216f2:	2300      	movs	r3, #0
}
 80216f4:	4618      	mov	r0, r3
 80216f6:	3740      	adds	r7, #64	; 0x40
 80216f8:	46bd      	mov	sp, r7
 80216fa:	bd80      	pop	{r7, pc}
 80216fc:	0802af64 	.word	0x0802af64
 8021700:	0802b1ec 	.word	0x0802b1ec
 8021704:	0802afc4 	.word	0x0802afc4
 8021708:	0802b230 	.word	0x0802b230
 802170c:	2001a010 	.word	0x2001a010
 8021710:	0802b244 	.word	0x0802b244
 8021714:	2001a018 	.word	0x2001a018
 8021718:	0802b25c 	.word	0x0802b25c
 802171c:	0802b270 	.word	0x0802b270

08021720 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8021720:	b580      	push	{r7, lr}
 8021722:	b08a      	sub	sp, #40	; 0x28
 8021724:	af00      	add	r7, sp, #0
 8021726:	60f8      	str	r0, [r7, #12]
 8021728:	60b9      	str	r1, [r7, #8]
 802172a:	607a      	str	r2, [r7, #4]
 802172c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 802172e:	4b5f      	ldr	r3, [pc, #380]	; (80218ac <dhcp_recv+0x18c>)
 8021730:	685b      	ldr	r3, [r3, #4]
 8021732:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021734:	6a3b      	ldr	r3, [r7, #32]
 8021736:	6a1b      	ldr	r3, [r3, #32]
 8021738:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 802173a:	687b      	ldr	r3, [r7, #4]
 802173c:	685b      	ldr	r3, [r3, #4]
 802173e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8021740:	69fb      	ldr	r3, [r7, #28]
 8021742:	2b00      	cmp	r3, #0
 8021744:	f000 809d 	beq.w	8021882 <dhcp_recv+0x162>
 8021748:	69fb      	ldr	r3, [r7, #28]
 802174a:	791b      	ldrb	r3, [r3, #4]
 802174c:	2b00      	cmp	r3, #0
 802174e:	f000 8098 	beq.w	8021882 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8021752:	687b      	ldr	r3, [r7, #4]
 8021754:	895b      	ldrh	r3, [r3, #10]
 8021756:	2b2b      	cmp	r3, #43	; 0x2b
 8021758:	f240 8095 	bls.w	8021886 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 802175c:	69bb      	ldr	r3, [r7, #24]
 802175e:	781b      	ldrb	r3, [r3, #0]
 8021760:	2b02      	cmp	r3, #2
 8021762:	f040 8092 	bne.w	802188a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8021766:	2300      	movs	r3, #0
 8021768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802176c:	e012      	b.n	8021794 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 802176e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021772:	6a3a      	ldr	r2, [r7, #32]
 8021774:	4413      	add	r3, r2
 8021776:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 802177a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802177e:	69b9      	ldr	r1, [r7, #24]
 8021780:	440b      	add	r3, r1
 8021782:	7f1b      	ldrb	r3, [r3, #28]
 8021784:	429a      	cmp	r2, r3
 8021786:	f040 8082 	bne.w	802188e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 802178a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802178e:	3301      	adds	r3, #1
 8021790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021794:	6a3b      	ldr	r3, [r7, #32]
 8021796:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 802179a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 802179e:	429a      	cmp	r2, r3
 80217a0:	d203      	bcs.n	80217aa <dhcp_recv+0x8a>
 80217a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80217a6:	2b05      	cmp	r3, #5
 80217a8:	d9e1      	bls.n	802176e <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80217aa:	69bb      	ldr	r3, [r7, #24]
 80217ac:	685b      	ldr	r3, [r3, #4]
 80217ae:	4618      	mov	r0, r3
 80217b0:	f7f5 fbf5 	bl	8016f9e <lwip_htonl>
 80217b4:	4602      	mov	r2, r0
 80217b6:	69fb      	ldr	r3, [r7, #28]
 80217b8:	681b      	ldr	r3, [r3, #0]
 80217ba:	429a      	cmp	r2, r3
 80217bc:	d169      	bne.n	8021892 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80217be:	69f9      	ldr	r1, [r7, #28]
 80217c0:	6878      	ldr	r0, [r7, #4]
 80217c2:	f7ff fcd9 	bl	8021178 <dhcp_parse_reply>
 80217c6:	4603      	mov	r3, r0
 80217c8:	2b00      	cmp	r3, #0
 80217ca:	d164      	bne.n	8021896 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80217cc:	4b38      	ldr	r3, [pc, #224]	; (80218b0 <dhcp_recv+0x190>)
 80217ce:	785b      	ldrb	r3, [r3, #1]
 80217d0:	2b00      	cmp	r3, #0
 80217d2:	d062      	beq.n	802189a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80217d4:	687b      	ldr	r3, [r7, #4]
 80217d6:	685b      	ldr	r3, [r3, #4]
 80217d8:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80217da:	4b36      	ldr	r3, [pc, #216]	; (80218b4 <dhcp_recv+0x194>)
 80217dc:	685b      	ldr	r3, [r3, #4]
 80217de:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80217e0:	7cfb      	ldrb	r3, [r7, #19]
 80217e2:	2b05      	cmp	r3, #5
 80217e4:	d12a      	bne.n	802183c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80217e6:	69fb      	ldr	r3, [r7, #28]
 80217e8:	795b      	ldrb	r3, [r3, #5]
 80217ea:	2b01      	cmp	r3, #1
 80217ec:	d112      	bne.n	8021814 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80217ee:	6979      	ldr	r1, [r7, #20]
 80217f0:	6a38      	ldr	r0, [r7, #32]
 80217f2:	f7fe fe3b 	bl	802046c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80217f6:	6a3b      	ldr	r3, [r7, #32]
 80217f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80217fc:	f003 0308 	and.w	r3, r3, #8
 8021800:	2b00      	cmp	r3, #0
 8021802:	d003      	beq.n	802180c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8021804:	6a38      	ldr	r0, [r7, #32]
 8021806:	f7fe fbab 	bl	801ff60 <dhcp_check>
 802180a:	e047      	b.n	802189c <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 802180c:	6a38      	ldr	r0, [r7, #32]
 802180e:	f7ff f84f 	bl	80208b0 <dhcp_bind>
 8021812:	e043      	b.n	802189c <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8021814:	69fb      	ldr	r3, [r7, #28]
 8021816:	795b      	ldrb	r3, [r3, #5]
 8021818:	2b03      	cmp	r3, #3
 802181a:	d007      	beq.n	802182c <dhcp_recv+0x10c>
 802181c:	69fb      	ldr	r3, [r7, #28]
 802181e:	795b      	ldrb	r3, [r3, #5]
 8021820:	2b04      	cmp	r3, #4
 8021822:	d003      	beq.n	802182c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8021824:	69fb      	ldr	r3, [r7, #28]
 8021826:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8021828:	2b05      	cmp	r3, #5
 802182a:	d137      	bne.n	802189c <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 802182c:	6979      	ldr	r1, [r7, #20]
 802182e:	6a38      	ldr	r0, [r7, #32]
 8021830:	f7fe fe1c 	bl	802046c <dhcp_handle_ack>
      dhcp_bind(netif);
 8021834:	6a38      	ldr	r0, [r7, #32]
 8021836:	f7ff f83b 	bl	80208b0 <dhcp_bind>
 802183a:	e02f      	b.n	802189c <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 802183c:	7cfb      	ldrb	r3, [r7, #19]
 802183e:	2b06      	cmp	r3, #6
 8021840:	d113      	bne.n	802186a <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8021842:	69fb      	ldr	r3, [r7, #28]
 8021844:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8021846:	2b03      	cmp	r3, #3
 8021848:	d00b      	beq.n	8021862 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 802184a:	69fb      	ldr	r3, [r7, #28]
 802184c:	795b      	ldrb	r3, [r3, #5]
 802184e:	2b01      	cmp	r3, #1
 8021850:	d007      	beq.n	8021862 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8021852:	69fb      	ldr	r3, [r7, #28]
 8021854:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8021856:	2b04      	cmp	r3, #4
 8021858:	d003      	beq.n	8021862 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 802185a:	69fb      	ldr	r3, [r7, #28]
 802185c:	795b      	ldrb	r3, [r3, #5]
 802185e:	2b05      	cmp	r3, #5
 8021860:	d103      	bne.n	802186a <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8021862:	6a38      	ldr	r0, [r7, #32]
 8021864:	f7fe fb62 	bl	801ff2c <dhcp_handle_nak>
 8021868:	e018      	b.n	802189c <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 802186a:	7cfb      	ldrb	r3, [r7, #19]
 802186c:	2b02      	cmp	r3, #2
 802186e:	d108      	bne.n	8021882 <dhcp_recv+0x162>
 8021870:	69fb      	ldr	r3, [r7, #28]
 8021872:	795b      	ldrb	r3, [r3, #5]
 8021874:	2b06      	cmp	r3, #6
 8021876:	d104      	bne.n	8021882 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8021878:	6979      	ldr	r1, [r7, #20]
 802187a:	6a38      	ldr	r0, [r7, #32]
 802187c:	f7fe fba4 	bl	801ffc8 <dhcp_handle_offer>
 8021880:	e00c      	b.n	802189c <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 8021882:	bf00      	nop
 8021884:	e00a      	b.n	802189c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8021886:	bf00      	nop
 8021888:	e008      	b.n	802189c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 802188a:	bf00      	nop
 802188c:	e006      	b.n	802189c <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 802188e:	bf00      	nop
 8021890:	e004      	b.n	802189c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8021892:	bf00      	nop
 8021894:	e002      	b.n	802189c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8021896:	bf00      	nop
 8021898:	e000      	b.n	802189c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 802189a:	bf00      	nop
  pbuf_free(p);
 802189c:	6878      	ldr	r0, [r7, #4]
 802189e:	f7f6 ff8d 	bl	80187bc <pbuf_free>
}
 80218a2:	bf00      	nop
 80218a4:	3728      	adds	r7, #40	; 0x28
 80218a6:	46bd      	mov	sp, r7
 80218a8:	bd80      	pop	{r7, pc}
 80218aa:	bf00      	nop
 80218ac:	20016b40 	.word	0x20016b40
 80218b0:	2001a010 	.word	0x2001a010
 80218b4:	2001a018 	.word	0x2001a018

080218b8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80218b8:	b580      	push	{r7, lr}
 80218ba:	b088      	sub	sp, #32
 80218bc:	af00      	add	r7, sp, #0
 80218be:	60f8      	str	r0, [r7, #12]
 80218c0:	60b9      	str	r1, [r7, #8]
 80218c2:	603b      	str	r3, [r7, #0]
 80218c4:	4613      	mov	r3, r2
 80218c6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80218c8:	68fb      	ldr	r3, [r7, #12]
 80218ca:	2b00      	cmp	r3, #0
 80218cc:	d108      	bne.n	80218e0 <dhcp_create_msg+0x28>
 80218ce:	4b5f      	ldr	r3, [pc, #380]	; (8021a4c <dhcp_create_msg+0x194>)
 80218d0:	f240 7269 	movw	r2, #1897	; 0x769
 80218d4:	495e      	ldr	r1, [pc, #376]	; (8021a50 <dhcp_create_msg+0x198>)
 80218d6:	485f      	ldr	r0, [pc, #380]	; (8021a54 <dhcp_create_msg+0x19c>)
 80218d8:	f005 f85e 	bl	8026998 <iprintf>
 80218dc:	2300      	movs	r3, #0
 80218de:	e0b1      	b.n	8021a44 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80218e0:	68bb      	ldr	r3, [r7, #8]
 80218e2:	2b00      	cmp	r3, #0
 80218e4:	d108      	bne.n	80218f8 <dhcp_create_msg+0x40>
 80218e6:	4b59      	ldr	r3, [pc, #356]	; (8021a4c <dhcp_create_msg+0x194>)
 80218e8:	f240 726a 	movw	r2, #1898	; 0x76a
 80218ec:	495a      	ldr	r1, [pc, #360]	; (8021a58 <dhcp_create_msg+0x1a0>)
 80218ee:	4859      	ldr	r0, [pc, #356]	; (8021a54 <dhcp_create_msg+0x19c>)
 80218f0:	f005 f852 	bl	8026998 <iprintf>
 80218f4:	2300      	movs	r3, #0
 80218f6:	e0a5      	b.n	8021a44 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80218f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80218fc:	f44f 719a 	mov.w	r1, #308	; 0x134
 8021900:	2036      	movs	r0, #54	; 0x36
 8021902:	f7f6 fc49 	bl	8018198 <pbuf_alloc>
 8021906:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8021908:	69bb      	ldr	r3, [r7, #24]
 802190a:	2b00      	cmp	r3, #0
 802190c:	d101      	bne.n	8021912 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 802190e:	2300      	movs	r3, #0
 8021910:	e098      	b.n	8021a44 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8021912:	69bb      	ldr	r3, [r7, #24]
 8021914:	895b      	ldrh	r3, [r3, #10]
 8021916:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 802191a:	d206      	bcs.n	802192a <dhcp_create_msg+0x72>
 802191c:	4b4b      	ldr	r3, [pc, #300]	; (8021a4c <dhcp_create_msg+0x194>)
 802191e:	f240 7272 	movw	r2, #1906	; 0x772
 8021922:	494e      	ldr	r1, [pc, #312]	; (8021a5c <dhcp_create_msg+0x1a4>)
 8021924:	484b      	ldr	r0, [pc, #300]	; (8021a54 <dhcp_create_msg+0x19c>)
 8021926:	f005 f837 	bl	8026998 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 802192a:	79fb      	ldrb	r3, [r7, #7]
 802192c:	2b03      	cmp	r3, #3
 802192e:	d103      	bne.n	8021938 <dhcp_create_msg+0x80>
 8021930:	68bb      	ldr	r3, [r7, #8]
 8021932:	795b      	ldrb	r3, [r3, #5]
 8021934:	2b03      	cmp	r3, #3
 8021936:	d10d      	bne.n	8021954 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8021938:	68bb      	ldr	r3, [r7, #8]
 802193a:	799b      	ldrb	r3, [r3, #6]
 802193c:	2b00      	cmp	r3, #0
 802193e:	d105      	bne.n	802194c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8021940:	f005 f842 	bl	80269c8 <rand>
 8021944:	4603      	mov	r3, r0
 8021946:	461a      	mov	r2, r3
 8021948:	4b45      	ldr	r3, [pc, #276]	; (8021a60 <dhcp_create_msg+0x1a8>)
 802194a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 802194c:	4b44      	ldr	r3, [pc, #272]	; (8021a60 <dhcp_create_msg+0x1a8>)
 802194e:	681a      	ldr	r2, [r3, #0]
 8021950:	68bb      	ldr	r3, [r7, #8]
 8021952:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8021954:	69bb      	ldr	r3, [r7, #24]
 8021956:	685b      	ldr	r3, [r3, #4]
 8021958:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 802195a:	f44f 729a 	mov.w	r2, #308	; 0x134
 802195e:	2100      	movs	r1, #0
 8021960:	6978      	ldr	r0, [r7, #20]
 8021962:	f004 ff69 	bl	8026838 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8021966:	697b      	ldr	r3, [r7, #20]
 8021968:	2201      	movs	r2, #1
 802196a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 802196c:	697b      	ldr	r3, [r7, #20]
 802196e:	2201      	movs	r2, #1
 8021970:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8021972:	68fb      	ldr	r3, [r7, #12]
 8021974:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8021978:	697b      	ldr	r3, [r7, #20]
 802197a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 802197c:	68bb      	ldr	r3, [r7, #8]
 802197e:	681b      	ldr	r3, [r3, #0]
 8021980:	4618      	mov	r0, r3
 8021982:	f7f5 fb0c 	bl	8016f9e <lwip_htonl>
 8021986:	4602      	mov	r2, r0
 8021988:	697b      	ldr	r3, [r7, #20]
 802198a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 802198c:	79fb      	ldrb	r3, [r7, #7]
 802198e:	2b08      	cmp	r3, #8
 8021990:	d010      	beq.n	80219b4 <dhcp_create_msg+0xfc>
 8021992:	79fb      	ldrb	r3, [r7, #7]
 8021994:	2b04      	cmp	r3, #4
 8021996:	d00d      	beq.n	80219b4 <dhcp_create_msg+0xfc>
 8021998:	79fb      	ldrb	r3, [r7, #7]
 802199a:	2b07      	cmp	r3, #7
 802199c:	d00a      	beq.n	80219b4 <dhcp_create_msg+0xfc>
 802199e:	79fb      	ldrb	r3, [r7, #7]
 80219a0:	2b03      	cmp	r3, #3
 80219a2:	d10c      	bne.n	80219be <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80219a4:	68bb      	ldr	r3, [r7, #8]
 80219a6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80219a8:	2b05      	cmp	r3, #5
 80219aa:	d003      	beq.n	80219b4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80219ac:	68bb      	ldr	r3, [r7, #8]
 80219ae:	795b      	ldrb	r3, [r3, #5]
 80219b0:	2b04      	cmp	r3, #4
 80219b2:	d104      	bne.n	80219be <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80219b4:	68fb      	ldr	r3, [r7, #12]
 80219b6:	3304      	adds	r3, #4
 80219b8:	681a      	ldr	r2, [r3, #0]
 80219ba:	697b      	ldr	r3, [r7, #20]
 80219bc:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80219be:	2300      	movs	r3, #0
 80219c0:	83fb      	strh	r3, [r7, #30]
 80219c2:	e00c      	b.n	80219de <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80219c4:	8bfa      	ldrh	r2, [r7, #30]
 80219c6:	8bfb      	ldrh	r3, [r7, #30]
 80219c8:	68f9      	ldr	r1, [r7, #12]
 80219ca:	440a      	add	r2, r1
 80219cc:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
 80219d0:	697a      	ldr	r2, [r7, #20]
 80219d2:	4413      	add	r3, r2
 80219d4:	460a      	mov	r2, r1
 80219d6:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80219d8:	8bfb      	ldrh	r3, [r7, #30]
 80219da:	3301      	adds	r3, #1
 80219dc:	83fb      	strh	r3, [r7, #30]
 80219de:	8bfb      	ldrh	r3, [r7, #30]
 80219e0:	2b05      	cmp	r3, #5
 80219e2:	d9ef      	bls.n	80219c4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80219e4:	697b      	ldr	r3, [r7, #20]
 80219e6:	2200      	movs	r2, #0
 80219e8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80219ec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80219f0:	2200      	movs	r2, #0
 80219f2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80219f6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80219fa:	2200      	movs	r2, #0
 80219fc:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8021a00:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8021a04:	2200      	movs	r2, #0
 8021a06:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8021a0a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8021a0e:	697b      	ldr	r3, [r7, #20]
 8021a10:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021a14:	2301      	movs	r3, #1
 8021a16:	2235      	movs	r2, #53	; 0x35
 8021a18:	2000      	movs	r0, #0
 8021a1a:	f7ff fadd 	bl	8020fd8 <dhcp_option>
 8021a1e:	4603      	mov	r3, r0
 8021a20:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8021a22:	697b      	ldr	r3, [r7, #20]
 8021a24:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8021a28:	79fa      	ldrb	r2, [r7, #7]
 8021a2a:	8a7b      	ldrh	r3, [r7, #18]
 8021a2c:	4618      	mov	r0, r3
 8021a2e:	f7ff fb07 	bl	8021040 <dhcp_option_byte>
 8021a32:	4603      	mov	r3, r0
 8021a34:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8021a36:	683b      	ldr	r3, [r7, #0]
 8021a38:	2b00      	cmp	r3, #0
 8021a3a:	d002      	beq.n	8021a42 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8021a3c:	683b      	ldr	r3, [r7, #0]
 8021a3e:	8a7a      	ldrh	r2, [r7, #18]
 8021a40:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8021a42:	69bb      	ldr	r3, [r7, #24]
}
 8021a44:	4618      	mov	r0, r3
 8021a46:	3720      	adds	r7, #32
 8021a48:	46bd      	mov	sp, r7
 8021a4a:	bd80      	pop	{r7, pc}
 8021a4c:	0802af64 	.word	0x0802af64
 8021a50:	0802b284 	.word	0x0802b284
 8021a54:	0802afc4 	.word	0x0802afc4
 8021a58:	0802b2a4 	.word	0x0802b2a4
 8021a5c:	0802b2c4 	.word	0x0802b2c4
 8021a60:	2001320c 	.word	0x2001320c

08021a64 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8021a64:	b580      	push	{r7, lr}
 8021a66:	b084      	sub	sp, #16
 8021a68:	af00      	add	r7, sp, #0
 8021a6a:	4603      	mov	r3, r0
 8021a6c:	60b9      	str	r1, [r7, #8]
 8021a6e:	607a      	str	r2, [r7, #4]
 8021a70:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8021a72:	89fb      	ldrh	r3, [r7, #14]
 8021a74:	1c5a      	adds	r2, r3, #1
 8021a76:	81fa      	strh	r2, [r7, #14]
 8021a78:	461a      	mov	r2, r3
 8021a7a:	68bb      	ldr	r3, [r7, #8]
 8021a7c:	4413      	add	r3, r2
 8021a7e:	22ff      	movs	r2, #255	; 0xff
 8021a80:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021a82:	e007      	b.n	8021a94 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8021a84:	89fb      	ldrh	r3, [r7, #14]
 8021a86:	1c5a      	adds	r2, r3, #1
 8021a88:	81fa      	strh	r2, [r7, #14]
 8021a8a:	461a      	mov	r2, r3
 8021a8c:	68bb      	ldr	r3, [r7, #8]
 8021a8e:	4413      	add	r3, r2
 8021a90:	2200      	movs	r2, #0
 8021a92:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021a94:	89fb      	ldrh	r3, [r7, #14]
 8021a96:	2b43      	cmp	r3, #67	; 0x43
 8021a98:	d904      	bls.n	8021aa4 <dhcp_option_trailer+0x40>
 8021a9a:	89fb      	ldrh	r3, [r7, #14]
 8021a9c:	f003 0303 	and.w	r3, r3, #3
 8021aa0:	2b00      	cmp	r3, #0
 8021aa2:	d002      	beq.n	8021aaa <dhcp_option_trailer+0x46>
 8021aa4:	89fb      	ldrh	r3, [r7, #14]
 8021aa6:	2b43      	cmp	r3, #67	; 0x43
 8021aa8:	d9ec      	bls.n	8021a84 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8021aaa:	89fb      	ldrh	r3, [r7, #14]
 8021aac:	33f0      	adds	r3, #240	; 0xf0
 8021aae:	b29b      	uxth	r3, r3
 8021ab0:	4619      	mov	r1, r3
 8021ab2:	6878      	ldr	r0, [r7, #4]
 8021ab4:	f7f6 fcca 	bl	801844c <pbuf_realloc>
}
 8021ab8:	bf00      	nop
 8021aba:	3710      	adds	r7, #16
 8021abc:	46bd      	mov	sp, r7
 8021abe:	bd80      	pop	{r7, pc}

08021ac0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8021ac0:	b480      	push	{r7}
 8021ac2:	b085      	sub	sp, #20
 8021ac4:	af00      	add	r7, sp, #0
 8021ac6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8021ac8:	687b      	ldr	r3, [r7, #4]
 8021aca:	2b00      	cmp	r3, #0
 8021acc:	d017      	beq.n	8021afe <dhcp_supplied_address+0x3e>
 8021ace:	687b      	ldr	r3, [r7, #4]
 8021ad0:	6a1b      	ldr	r3, [r3, #32]
 8021ad2:	2b00      	cmp	r3, #0
 8021ad4:	d013      	beq.n	8021afe <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8021ad6:	687b      	ldr	r3, [r7, #4]
 8021ad8:	6a1b      	ldr	r3, [r3, #32]
 8021ada:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8021adc:	68fb      	ldr	r3, [r7, #12]
 8021ade:	795b      	ldrb	r3, [r3, #5]
 8021ae0:	2b0a      	cmp	r3, #10
 8021ae2:	d007      	beq.n	8021af4 <dhcp_supplied_address+0x34>
 8021ae4:	68fb      	ldr	r3, [r7, #12]
 8021ae6:	795b      	ldrb	r3, [r3, #5]
 8021ae8:	2b05      	cmp	r3, #5
 8021aea:	d003      	beq.n	8021af4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8021aec:	68fb      	ldr	r3, [r7, #12]
 8021aee:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8021af0:	2b04      	cmp	r3, #4
 8021af2:	d101      	bne.n	8021af8 <dhcp_supplied_address+0x38>
 8021af4:	2301      	movs	r3, #1
 8021af6:	e000      	b.n	8021afa <dhcp_supplied_address+0x3a>
 8021af8:	2300      	movs	r3, #0
 8021afa:	b2db      	uxtb	r3, r3
 8021afc:	e000      	b.n	8021b00 <dhcp_supplied_address+0x40>
  }
  return 0;
 8021afe:	2300      	movs	r3, #0
}
 8021b00:	4618      	mov	r0, r3
 8021b02:	3714      	adds	r7, #20
 8021b04:	46bd      	mov	sp, r7
 8021b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b0a:	4770      	bx	lr

08021b0c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8021b0c:	b580      	push	{r7, lr}
 8021b0e:	b082      	sub	sp, #8
 8021b10:	af00      	add	r7, sp, #0
 8021b12:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8021b14:	4915      	ldr	r1, [pc, #84]	; (8021b6c <etharp_free_entry+0x60>)
 8021b16:	687a      	ldr	r2, [r7, #4]
 8021b18:	4613      	mov	r3, r2
 8021b1a:	005b      	lsls	r3, r3, #1
 8021b1c:	4413      	add	r3, r2
 8021b1e:	00db      	lsls	r3, r3, #3
 8021b20:	440b      	add	r3, r1
 8021b22:	681b      	ldr	r3, [r3, #0]
 8021b24:	2b00      	cmp	r3, #0
 8021b26:	d013      	beq.n	8021b50 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8021b28:	4910      	ldr	r1, [pc, #64]	; (8021b6c <etharp_free_entry+0x60>)
 8021b2a:	687a      	ldr	r2, [r7, #4]
 8021b2c:	4613      	mov	r3, r2
 8021b2e:	005b      	lsls	r3, r3, #1
 8021b30:	4413      	add	r3, r2
 8021b32:	00db      	lsls	r3, r3, #3
 8021b34:	440b      	add	r3, r1
 8021b36:	681b      	ldr	r3, [r3, #0]
 8021b38:	4618      	mov	r0, r3
 8021b3a:	f7f6 fe3f 	bl	80187bc <pbuf_free>
    arp_table[i].q = NULL;
 8021b3e:	490b      	ldr	r1, [pc, #44]	; (8021b6c <etharp_free_entry+0x60>)
 8021b40:	687a      	ldr	r2, [r7, #4]
 8021b42:	4613      	mov	r3, r2
 8021b44:	005b      	lsls	r3, r3, #1
 8021b46:	4413      	add	r3, r2
 8021b48:	00db      	lsls	r3, r3, #3
 8021b4a:	440b      	add	r3, r1
 8021b4c:	2200      	movs	r2, #0
 8021b4e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8021b50:	4906      	ldr	r1, [pc, #24]	; (8021b6c <etharp_free_entry+0x60>)
 8021b52:	687a      	ldr	r2, [r7, #4]
 8021b54:	4613      	mov	r3, r2
 8021b56:	005b      	lsls	r3, r3, #1
 8021b58:	4413      	add	r3, r2
 8021b5a:	00db      	lsls	r3, r3, #3
 8021b5c:	440b      	add	r3, r1
 8021b5e:	3314      	adds	r3, #20
 8021b60:	2200      	movs	r2, #0
 8021b62:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8021b64:	bf00      	nop
 8021b66:	3708      	adds	r7, #8
 8021b68:	46bd      	mov	sp, r7
 8021b6a:	bd80      	pop	{r7, pc}
 8021b6c:	20013210 	.word	0x20013210

08021b70 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8021b70:	b580      	push	{r7, lr}
 8021b72:	b082      	sub	sp, #8
 8021b74:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021b76:	2300      	movs	r3, #0
 8021b78:	607b      	str	r3, [r7, #4]
 8021b7a:	e097      	b.n	8021cac <etharp_tmr+0x13c>
    u8_t state = arp_table[i].state;
 8021b7c:	494f      	ldr	r1, [pc, #316]	; (8021cbc <etharp_tmr+0x14c>)
 8021b7e:	687a      	ldr	r2, [r7, #4]
 8021b80:	4613      	mov	r3, r2
 8021b82:	005b      	lsls	r3, r3, #1
 8021b84:	4413      	add	r3, r2
 8021b86:	00db      	lsls	r3, r3, #3
 8021b88:	440b      	add	r3, r1
 8021b8a:	3314      	adds	r3, #20
 8021b8c:	781b      	ldrb	r3, [r3, #0]
 8021b8e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8021b90:	78fb      	ldrb	r3, [r7, #3]
 8021b92:	2b00      	cmp	r3, #0
 8021b94:	f000 8087 	beq.w	8021ca6 <etharp_tmr+0x136>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8021b98:	4948      	ldr	r1, [pc, #288]	; (8021cbc <etharp_tmr+0x14c>)
 8021b9a:	687a      	ldr	r2, [r7, #4]
 8021b9c:	4613      	mov	r3, r2
 8021b9e:	005b      	lsls	r3, r3, #1
 8021ba0:	4413      	add	r3, r2
 8021ba2:	00db      	lsls	r3, r3, #3
 8021ba4:	440b      	add	r3, r1
 8021ba6:	3312      	adds	r3, #18
 8021ba8:	881b      	ldrh	r3, [r3, #0]
 8021baa:	3301      	adds	r3, #1
 8021bac:	b298      	uxth	r0, r3
 8021bae:	4943      	ldr	r1, [pc, #268]	; (8021cbc <etharp_tmr+0x14c>)
 8021bb0:	687a      	ldr	r2, [r7, #4]
 8021bb2:	4613      	mov	r3, r2
 8021bb4:	005b      	lsls	r3, r3, #1
 8021bb6:	4413      	add	r3, r2
 8021bb8:	00db      	lsls	r3, r3, #3
 8021bba:	440b      	add	r3, r1
 8021bbc:	3312      	adds	r3, #18
 8021bbe:	4602      	mov	r2, r0
 8021bc0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8021bc2:	493e      	ldr	r1, [pc, #248]	; (8021cbc <etharp_tmr+0x14c>)
 8021bc4:	687a      	ldr	r2, [r7, #4]
 8021bc6:	4613      	mov	r3, r2
 8021bc8:	005b      	lsls	r3, r3, #1
 8021bca:	4413      	add	r3, r2
 8021bcc:	00db      	lsls	r3, r3, #3
 8021bce:	440b      	add	r3, r1
 8021bd0:	3312      	adds	r3, #18
 8021bd2:	881b      	ldrh	r3, [r3, #0]
 8021bd4:	f241 726f 	movw	r2, #5999	; 0x176f
 8021bd8:	4293      	cmp	r3, r2
 8021bda:	d815      	bhi.n	8021c08 <etharp_tmr+0x98>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8021bdc:	4937      	ldr	r1, [pc, #220]	; (8021cbc <etharp_tmr+0x14c>)
 8021bde:	687a      	ldr	r2, [r7, #4]
 8021be0:	4613      	mov	r3, r2
 8021be2:	005b      	lsls	r3, r3, #1
 8021be4:	4413      	add	r3, r2
 8021be6:	00db      	lsls	r3, r3, #3
 8021be8:	440b      	add	r3, r1
 8021bea:	3314      	adds	r3, #20
 8021bec:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8021bee:	2b01      	cmp	r3, #1
 8021bf0:	d10e      	bne.n	8021c10 <etharp_tmr+0xa0>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8021bf2:	4932      	ldr	r1, [pc, #200]	; (8021cbc <etharp_tmr+0x14c>)
 8021bf4:	687a      	ldr	r2, [r7, #4]
 8021bf6:	4613      	mov	r3, r2
 8021bf8:	005b      	lsls	r3, r3, #1
 8021bfa:	4413      	add	r3, r2
 8021bfc:	00db      	lsls	r3, r3, #3
 8021bfe:	440b      	add	r3, r1
 8021c00:	3312      	adds	r3, #18
 8021c02:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8021c04:	2b04      	cmp	r3, #4
 8021c06:	d903      	bls.n	8021c10 <etharp_tmr+0xa0>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8021c08:	6878      	ldr	r0, [r7, #4]
 8021c0a:	f7ff ff7f 	bl	8021b0c <etharp_free_entry>
 8021c0e:	e04a      	b.n	8021ca6 <etharp_tmr+0x136>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8021c10:	492a      	ldr	r1, [pc, #168]	; (8021cbc <etharp_tmr+0x14c>)
 8021c12:	687a      	ldr	r2, [r7, #4]
 8021c14:	4613      	mov	r3, r2
 8021c16:	005b      	lsls	r3, r3, #1
 8021c18:	4413      	add	r3, r2
 8021c1a:	00db      	lsls	r3, r3, #3
 8021c1c:	440b      	add	r3, r1
 8021c1e:	3314      	adds	r3, #20
 8021c20:	781b      	ldrb	r3, [r3, #0]
 8021c22:	2b03      	cmp	r3, #3
 8021c24:	d10a      	bne.n	8021c3c <etharp_tmr+0xcc>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8021c26:	4925      	ldr	r1, [pc, #148]	; (8021cbc <etharp_tmr+0x14c>)
 8021c28:	687a      	ldr	r2, [r7, #4]
 8021c2a:	4613      	mov	r3, r2
 8021c2c:	005b      	lsls	r3, r3, #1
 8021c2e:	4413      	add	r3, r2
 8021c30:	00db      	lsls	r3, r3, #3
 8021c32:	440b      	add	r3, r1
 8021c34:	3314      	adds	r3, #20
 8021c36:	2204      	movs	r2, #4
 8021c38:	701a      	strb	r2, [r3, #0]
 8021c3a:	e034      	b.n	8021ca6 <etharp_tmr+0x136>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8021c3c:	491f      	ldr	r1, [pc, #124]	; (8021cbc <etharp_tmr+0x14c>)
 8021c3e:	687a      	ldr	r2, [r7, #4]
 8021c40:	4613      	mov	r3, r2
 8021c42:	005b      	lsls	r3, r3, #1
 8021c44:	4413      	add	r3, r2
 8021c46:	00db      	lsls	r3, r3, #3
 8021c48:	440b      	add	r3, r1
 8021c4a:	3314      	adds	r3, #20
 8021c4c:	781b      	ldrb	r3, [r3, #0]
 8021c4e:	2b04      	cmp	r3, #4
 8021c50:	d10a      	bne.n	8021c68 <etharp_tmr+0xf8>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8021c52:	491a      	ldr	r1, [pc, #104]	; (8021cbc <etharp_tmr+0x14c>)
 8021c54:	687a      	ldr	r2, [r7, #4]
 8021c56:	4613      	mov	r3, r2
 8021c58:	005b      	lsls	r3, r3, #1
 8021c5a:	4413      	add	r3, r2
 8021c5c:	00db      	lsls	r3, r3, #3
 8021c5e:	440b      	add	r3, r1
 8021c60:	3314      	adds	r3, #20
 8021c62:	2202      	movs	r2, #2
 8021c64:	701a      	strb	r2, [r3, #0]
 8021c66:	e01e      	b.n	8021ca6 <etharp_tmr+0x136>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8021c68:	4914      	ldr	r1, [pc, #80]	; (8021cbc <etharp_tmr+0x14c>)
 8021c6a:	687a      	ldr	r2, [r7, #4]
 8021c6c:	4613      	mov	r3, r2
 8021c6e:	005b      	lsls	r3, r3, #1
 8021c70:	4413      	add	r3, r2
 8021c72:	00db      	lsls	r3, r3, #3
 8021c74:	440b      	add	r3, r1
 8021c76:	3314      	adds	r3, #20
 8021c78:	781b      	ldrb	r3, [r3, #0]
 8021c7a:	2b01      	cmp	r3, #1
 8021c7c:	d113      	bne.n	8021ca6 <etharp_tmr+0x136>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8021c7e:	490f      	ldr	r1, [pc, #60]	; (8021cbc <etharp_tmr+0x14c>)
 8021c80:	687a      	ldr	r2, [r7, #4]
 8021c82:	4613      	mov	r3, r2
 8021c84:	005b      	lsls	r3, r3, #1
 8021c86:	4413      	add	r3, r2
 8021c88:	00db      	lsls	r3, r3, #3
 8021c8a:	440b      	add	r3, r1
 8021c8c:	3308      	adds	r3, #8
 8021c8e:	6818      	ldr	r0, [r3, #0]
 8021c90:	687a      	ldr	r2, [r7, #4]
 8021c92:	4613      	mov	r3, r2
 8021c94:	005b      	lsls	r3, r3, #1
 8021c96:	4413      	add	r3, r2
 8021c98:	00db      	lsls	r3, r3, #3
 8021c9a:	4a08      	ldr	r2, [pc, #32]	; (8021cbc <etharp_tmr+0x14c>)
 8021c9c:	4413      	add	r3, r2
 8021c9e:	3304      	adds	r3, #4
 8021ca0:	4619      	mov	r1, r3
 8021ca2:	f000 fe73 	bl	802298c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021ca6:	687b      	ldr	r3, [r7, #4]
 8021ca8:	3301      	adds	r3, #1
 8021caa:	607b      	str	r3, [r7, #4]
 8021cac:	687b      	ldr	r3, [r7, #4]
 8021cae:	2b09      	cmp	r3, #9
 8021cb0:	f77f af64 	ble.w	8021b7c <etharp_tmr+0xc>
      }
    }
  }
}
 8021cb4:	bf00      	nop
 8021cb6:	3708      	adds	r7, #8
 8021cb8:	46bd      	mov	sp, r7
 8021cba:	bd80      	pop	{r7, pc}
 8021cbc:	20013210 	.word	0x20013210

08021cc0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8021cc0:	b580      	push	{r7, lr}
 8021cc2:	b08a      	sub	sp, #40	; 0x28
 8021cc4:	af00      	add	r7, sp, #0
 8021cc6:	60f8      	str	r0, [r7, #12]
 8021cc8:	460b      	mov	r3, r1
 8021cca:	607a      	str	r2, [r7, #4]
 8021ccc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8021cce:	230a      	movs	r3, #10
 8021cd0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8021cd2:	230a      	movs	r3, #10
 8021cd4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8021cd6:	230a      	movs	r3, #10
 8021cd8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8021cda:	2300      	movs	r3, #0
 8021cdc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8021cde:	230a      	movs	r3, #10
 8021ce0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8021ce2:	2300      	movs	r3, #0
 8021ce4:	83bb      	strh	r3, [r7, #28]
 8021ce6:	2300      	movs	r3, #0
 8021ce8:	837b      	strh	r3, [r7, #26]
 8021cea:	2300      	movs	r3, #0
 8021cec:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021cee:	2300      	movs	r3, #0
 8021cf0:	843b      	strh	r3, [r7, #32]
 8021cf2:	e0ae      	b.n	8021e52 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8021cf4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021cf8:	49a6      	ldr	r1, [pc, #664]	; (8021f94 <etharp_find_entry+0x2d4>)
 8021cfa:	4613      	mov	r3, r2
 8021cfc:	005b      	lsls	r3, r3, #1
 8021cfe:	4413      	add	r3, r2
 8021d00:	00db      	lsls	r3, r3, #3
 8021d02:	440b      	add	r3, r1
 8021d04:	3314      	adds	r3, #20
 8021d06:	781b      	ldrb	r3, [r3, #0]
 8021d08:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8021d0a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8021d0e:	2b0a      	cmp	r3, #10
 8021d10:	d105      	bne.n	8021d1e <etharp_find_entry+0x5e>
 8021d12:	7dfb      	ldrb	r3, [r7, #23]
 8021d14:	2b00      	cmp	r3, #0
 8021d16:	d102      	bne.n	8021d1e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8021d18:	8c3b      	ldrh	r3, [r7, #32]
 8021d1a:	847b      	strh	r3, [r7, #34]	; 0x22
 8021d1c:	e095      	b.n	8021e4a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8021d1e:	7dfb      	ldrb	r3, [r7, #23]
 8021d20:	2b00      	cmp	r3, #0
 8021d22:	f000 8092 	beq.w	8021e4a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8021d26:	7dfb      	ldrb	r3, [r7, #23]
 8021d28:	2b01      	cmp	r3, #1
 8021d2a:	d009      	beq.n	8021d40 <etharp_find_entry+0x80>
 8021d2c:	7dfb      	ldrb	r3, [r7, #23]
 8021d2e:	2b01      	cmp	r3, #1
 8021d30:	d806      	bhi.n	8021d40 <etharp_find_entry+0x80>
 8021d32:	4b99      	ldr	r3, [pc, #612]	; (8021f98 <etharp_find_entry+0x2d8>)
 8021d34:	f44f 7292 	mov.w	r2, #292	; 0x124
 8021d38:	4998      	ldr	r1, [pc, #608]	; (8021f9c <etharp_find_entry+0x2dc>)
 8021d3a:	4899      	ldr	r0, [pc, #612]	; (8021fa0 <etharp_find_entry+0x2e0>)
 8021d3c:	f004 fe2c 	bl	8026998 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8021d40:	68fb      	ldr	r3, [r7, #12]
 8021d42:	2b00      	cmp	r3, #0
 8021d44:	d020      	beq.n	8021d88 <etharp_find_entry+0xc8>
 8021d46:	68fb      	ldr	r3, [r7, #12]
 8021d48:	6819      	ldr	r1, [r3, #0]
 8021d4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021d4e:	4891      	ldr	r0, [pc, #580]	; (8021f94 <etharp_find_entry+0x2d4>)
 8021d50:	4613      	mov	r3, r2
 8021d52:	005b      	lsls	r3, r3, #1
 8021d54:	4413      	add	r3, r2
 8021d56:	00db      	lsls	r3, r3, #3
 8021d58:	4403      	add	r3, r0
 8021d5a:	3304      	adds	r3, #4
 8021d5c:	681b      	ldr	r3, [r3, #0]
 8021d5e:	4299      	cmp	r1, r3
 8021d60:	d112      	bne.n	8021d88 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8021d62:	687b      	ldr	r3, [r7, #4]
 8021d64:	2b00      	cmp	r3, #0
 8021d66:	d00c      	beq.n	8021d82 <etharp_find_entry+0xc2>
 8021d68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021d6c:	4989      	ldr	r1, [pc, #548]	; (8021f94 <etharp_find_entry+0x2d4>)
 8021d6e:	4613      	mov	r3, r2
 8021d70:	005b      	lsls	r3, r3, #1
 8021d72:	4413      	add	r3, r2
 8021d74:	00db      	lsls	r3, r3, #3
 8021d76:	440b      	add	r3, r1
 8021d78:	3308      	adds	r3, #8
 8021d7a:	681b      	ldr	r3, [r3, #0]
 8021d7c:	687a      	ldr	r2, [r7, #4]
 8021d7e:	429a      	cmp	r2, r3
 8021d80:	d102      	bne.n	8021d88 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8021d82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8021d86:	e100      	b.n	8021f8a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8021d88:	7dfb      	ldrb	r3, [r7, #23]
 8021d8a:	2b01      	cmp	r3, #1
 8021d8c:	d140      	bne.n	8021e10 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8021d8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021d92:	4980      	ldr	r1, [pc, #512]	; (8021f94 <etharp_find_entry+0x2d4>)
 8021d94:	4613      	mov	r3, r2
 8021d96:	005b      	lsls	r3, r3, #1
 8021d98:	4413      	add	r3, r2
 8021d9a:	00db      	lsls	r3, r3, #3
 8021d9c:	440b      	add	r3, r1
 8021d9e:	681b      	ldr	r3, [r3, #0]
 8021da0:	2b00      	cmp	r3, #0
 8021da2:	d01a      	beq.n	8021dda <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8021da4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021da8:	497a      	ldr	r1, [pc, #488]	; (8021f94 <etharp_find_entry+0x2d4>)
 8021daa:	4613      	mov	r3, r2
 8021dac:	005b      	lsls	r3, r3, #1
 8021dae:	4413      	add	r3, r2
 8021db0:	00db      	lsls	r3, r3, #3
 8021db2:	440b      	add	r3, r1
 8021db4:	3312      	adds	r3, #18
 8021db6:	881b      	ldrh	r3, [r3, #0]
 8021db8:	8bba      	ldrh	r2, [r7, #28]
 8021dba:	429a      	cmp	r2, r3
 8021dbc:	d845      	bhi.n	8021e4a <etharp_find_entry+0x18a>
            old_queue = i;
 8021dbe:	8c3b      	ldrh	r3, [r7, #32]
 8021dc0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8021dc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021dc6:	4973      	ldr	r1, [pc, #460]	; (8021f94 <etharp_find_entry+0x2d4>)
 8021dc8:	4613      	mov	r3, r2
 8021dca:	005b      	lsls	r3, r3, #1
 8021dcc:	4413      	add	r3, r2
 8021dce:	00db      	lsls	r3, r3, #3
 8021dd0:	440b      	add	r3, r1
 8021dd2:	3312      	adds	r3, #18
 8021dd4:	881b      	ldrh	r3, [r3, #0]
 8021dd6:	83bb      	strh	r3, [r7, #28]
 8021dd8:	e037      	b.n	8021e4a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8021dda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021dde:	496d      	ldr	r1, [pc, #436]	; (8021f94 <etharp_find_entry+0x2d4>)
 8021de0:	4613      	mov	r3, r2
 8021de2:	005b      	lsls	r3, r3, #1
 8021de4:	4413      	add	r3, r2
 8021de6:	00db      	lsls	r3, r3, #3
 8021de8:	440b      	add	r3, r1
 8021dea:	3312      	adds	r3, #18
 8021dec:	881b      	ldrh	r3, [r3, #0]
 8021dee:	8b7a      	ldrh	r2, [r7, #26]
 8021df0:	429a      	cmp	r2, r3
 8021df2:	d82a      	bhi.n	8021e4a <etharp_find_entry+0x18a>
            old_pending = i;
 8021df4:	8c3b      	ldrh	r3, [r7, #32]
 8021df6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8021df8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021dfc:	4965      	ldr	r1, [pc, #404]	; (8021f94 <etharp_find_entry+0x2d4>)
 8021dfe:	4613      	mov	r3, r2
 8021e00:	005b      	lsls	r3, r3, #1
 8021e02:	4413      	add	r3, r2
 8021e04:	00db      	lsls	r3, r3, #3
 8021e06:	440b      	add	r3, r1
 8021e08:	3312      	adds	r3, #18
 8021e0a:	881b      	ldrh	r3, [r3, #0]
 8021e0c:	837b      	strh	r3, [r7, #26]
 8021e0e:	e01c      	b.n	8021e4a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8021e10:	7dfb      	ldrb	r3, [r7, #23]
 8021e12:	2b01      	cmp	r3, #1
 8021e14:	d919      	bls.n	8021e4a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8021e16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021e1a:	495e      	ldr	r1, [pc, #376]	; (8021f94 <etharp_find_entry+0x2d4>)
 8021e1c:	4613      	mov	r3, r2
 8021e1e:	005b      	lsls	r3, r3, #1
 8021e20:	4413      	add	r3, r2
 8021e22:	00db      	lsls	r3, r3, #3
 8021e24:	440b      	add	r3, r1
 8021e26:	3312      	adds	r3, #18
 8021e28:	881b      	ldrh	r3, [r3, #0]
 8021e2a:	8b3a      	ldrh	r2, [r7, #24]
 8021e2c:	429a      	cmp	r2, r3
 8021e2e:	d80c      	bhi.n	8021e4a <etharp_find_entry+0x18a>
            old_stable = i;
 8021e30:	8c3b      	ldrh	r3, [r7, #32]
 8021e32:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8021e34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021e38:	4956      	ldr	r1, [pc, #344]	; (8021f94 <etharp_find_entry+0x2d4>)
 8021e3a:	4613      	mov	r3, r2
 8021e3c:	005b      	lsls	r3, r3, #1
 8021e3e:	4413      	add	r3, r2
 8021e40:	00db      	lsls	r3, r3, #3
 8021e42:	440b      	add	r3, r1
 8021e44:	3312      	adds	r3, #18
 8021e46:	881b      	ldrh	r3, [r3, #0]
 8021e48:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021e4a:	8c3b      	ldrh	r3, [r7, #32]
 8021e4c:	3301      	adds	r3, #1
 8021e4e:	b29b      	uxth	r3, r3
 8021e50:	843b      	strh	r3, [r7, #32]
 8021e52:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8021e56:	2b09      	cmp	r3, #9
 8021e58:	f77f af4c 	ble.w	8021cf4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8021e5c:	7afb      	ldrb	r3, [r7, #11]
 8021e5e:	f003 0302 	and.w	r3, r3, #2
 8021e62:	2b00      	cmp	r3, #0
 8021e64:	d108      	bne.n	8021e78 <etharp_find_entry+0x1b8>
 8021e66:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8021e6a:	2b0a      	cmp	r3, #10
 8021e6c:	d107      	bne.n	8021e7e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8021e6e:	7afb      	ldrb	r3, [r7, #11]
 8021e70:	f003 0301 	and.w	r3, r3, #1
 8021e74:	2b00      	cmp	r3, #0
 8021e76:	d102      	bne.n	8021e7e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8021e78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021e7c:	e085      	b.n	8021f8a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8021e7e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8021e82:	2b09      	cmp	r3, #9
 8021e84:	dc02      	bgt.n	8021e8c <etharp_find_entry+0x1cc>
    i = empty;
 8021e86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021e88:	843b      	strh	r3, [r7, #32]
 8021e8a:	e039      	b.n	8021f00 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8021e8c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8021e90:	2b09      	cmp	r3, #9
 8021e92:	dc14      	bgt.n	8021ebe <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8021e94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021e96:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8021e98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021e9c:	493d      	ldr	r1, [pc, #244]	; (8021f94 <etharp_find_entry+0x2d4>)
 8021e9e:	4613      	mov	r3, r2
 8021ea0:	005b      	lsls	r3, r3, #1
 8021ea2:	4413      	add	r3, r2
 8021ea4:	00db      	lsls	r3, r3, #3
 8021ea6:	440b      	add	r3, r1
 8021ea8:	681b      	ldr	r3, [r3, #0]
 8021eaa:	2b00      	cmp	r3, #0
 8021eac:	d018      	beq.n	8021ee0 <etharp_find_entry+0x220>
 8021eae:	4b3a      	ldr	r3, [pc, #232]	; (8021f98 <etharp_find_entry+0x2d8>)
 8021eb0:	f240 126d 	movw	r2, #365	; 0x16d
 8021eb4:	493b      	ldr	r1, [pc, #236]	; (8021fa4 <etharp_find_entry+0x2e4>)
 8021eb6:	483a      	ldr	r0, [pc, #232]	; (8021fa0 <etharp_find_entry+0x2e0>)
 8021eb8:	f004 fd6e 	bl	8026998 <iprintf>
 8021ebc:	e010      	b.n	8021ee0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8021ebe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8021ec2:	2b09      	cmp	r3, #9
 8021ec4:	dc02      	bgt.n	8021ecc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8021ec6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021ec8:	843b      	strh	r3, [r7, #32]
 8021eca:	e009      	b.n	8021ee0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8021ecc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8021ed0:	2b09      	cmp	r3, #9
 8021ed2:	dc02      	bgt.n	8021eda <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8021ed4:	8bfb      	ldrh	r3, [r7, #30]
 8021ed6:	843b      	strh	r3, [r7, #32]
 8021ed8:	e002      	b.n	8021ee0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8021eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021ede:	e054      	b.n	8021f8a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8021ee0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8021ee4:	2b09      	cmp	r3, #9
 8021ee6:	dd06      	ble.n	8021ef6 <etharp_find_entry+0x236>
 8021ee8:	4b2b      	ldr	r3, [pc, #172]	; (8021f98 <etharp_find_entry+0x2d8>)
 8021eea:	f240 127f 	movw	r2, #383	; 0x17f
 8021eee:	492e      	ldr	r1, [pc, #184]	; (8021fa8 <etharp_find_entry+0x2e8>)
 8021ef0:	482b      	ldr	r0, [pc, #172]	; (8021fa0 <etharp_find_entry+0x2e0>)
 8021ef2:	f004 fd51 	bl	8026998 <iprintf>
    etharp_free_entry(i);
 8021ef6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8021efa:	4618      	mov	r0, r3
 8021efc:	f7ff fe06 	bl	8021b0c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8021f00:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8021f04:	2b09      	cmp	r3, #9
 8021f06:	dd06      	ble.n	8021f16 <etharp_find_entry+0x256>
 8021f08:	4b23      	ldr	r3, [pc, #140]	; (8021f98 <etharp_find_entry+0x2d8>)
 8021f0a:	f240 1283 	movw	r2, #387	; 0x183
 8021f0e:	4926      	ldr	r1, [pc, #152]	; (8021fa8 <etharp_find_entry+0x2e8>)
 8021f10:	4823      	ldr	r0, [pc, #140]	; (8021fa0 <etharp_find_entry+0x2e0>)
 8021f12:	f004 fd41 	bl	8026998 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8021f16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021f1a:	491e      	ldr	r1, [pc, #120]	; (8021f94 <etharp_find_entry+0x2d4>)
 8021f1c:	4613      	mov	r3, r2
 8021f1e:	005b      	lsls	r3, r3, #1
 8021f20:	4413      	add	r3, r2
 8021f22:	00db      	lsls	r3, r3, #3
 8021f24:	440b      	add	r3, r1
 8021f26:	3314      	adds	r3, #20
 8021f28:	781b      	ldrb	r3, [r3, #0]
 8021f2a:	2b00      	cmp	r3, #0
 8021f2c:	d006      	beq.n	8021f3c <etharp_find_entry+0x27c>
 8021f2e:	4b1a      	ldr	r3, [pc, #104]	; (8021f98 <etharp_find_entry+0x2d8>)
 8021f30:	f240 1285 	movw	r2, #389	; 0x185
 8021f34:	491d      	ldr	r1, [pc, #116]	; (8021fac <etharp_find_entry+0x2ec>)
 8021f36:	481a      	ldr	r0, [pc, #104]	; (8021fa0 <etharp_find_entry+0x2e0>)
 8021f38:	f004 fd2e 	bl	8026998 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8021f3c:	68fb      	ldr	r3, [r7, #12]
 8021f3e:	2b00      	cmp	r3, #0
 8021f40:	d00b      	beq.n	8021f5a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8021f42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021f46:	68fb      	ldr	r3, [r7, #12]
 8021f48:	6819      	ldr	r1, [r3, #0]
 8021f4a:	4812      	ldr	r0, [pc, #72]	; (8021f94 <etharp_find_entry+0x2d4>)
 8021f4c:	4613      	mov	r3, r2
 8021f4e:	005b      	lsls	r3, r3, #1
 8021f50:	4413      	add	r3, r2
 8021f52:	00db      	lsls	r3, r3, #3
 8021f54:	4403      	add	r3, r0
 8021f56:	3304      	adds	r3, #4
 8021f58:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8021f5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021f5e:	490d      	ldr	r1, [pc, #52]	; (8021f94 <etharp_find_entry+0x2d4>)
 8021f60:	4613      	mov	r3, r2
 8021f62:	005b      	lsls	r3, r3, #1
 8021f64:	4413      	add	r3, r2
 8021f66:	00db      	lsls	r3, r3, #3
 8021f68:	440b      	add	r3, r1
 8021f6a:	3312      	adds	r3, #18
 8021f6c:	2200      	movs	r2, #0
 8021f6e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8021f70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8021f74:	4907      	ldr	r1, [pc, #28]	; (8021f94 <etharp_find_entry+0x2d4>)
 8021f76:	4613      	mov	r3, r2
 8021f78:	005b      	lsls	r3, r3, #1
 8021f7a:	4413      	add	r3, r2
 8021f7c:	00db      	lsls	r3, r3, #3
 8021f7e:	440b      	add	r3, r1
 8021f80:	3308      	adds	r3, #8
 8021f82:	687a      	ldr	r2, [r7, #4]
 8021f84:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8021f86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8021f8a:	4618      	mov	r0, r3
 8021f8c:	3728      	adds	r7, #40	; 0x28
 8021f8e:	46bd      	mov	sp, r7
 8021f90:	bd80      	pop	{r7, pc}
 8021f92:	bf00      	nop
 8021f94:	20013210 	.word	0x20013210
 8021f98:	0802b304 	.word	0x0802b304
 8021f9c:	0802b33c 	.word	0x0802b33c
 8021fa0:	0802b37c 	.word	0x0802b37c
 8021fa4:	0802b3a4 	.word	0x0802b3a4
 8021fa8:	0802b3bc 	.word	0x0802b3bc
 8021fac:	0802b3d0 	.word	0x0802b3d0

08021fb0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8021fb0:	b580      	push	{r7, lr}
 8021fb2:	b088      	sub	sp, #32
 8021fb4:	af02      	add	r7, sp, #8
 8021fb6:	60f8      	str	r0, [r7, #12]
 8021fb8:	60b9      	str	r1, [r7, #8]
 8021fba:	607a      	str	r2, [r7, #4]
 8021fbc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8021fbe:	68fb      	ldr	r3, [r7, #12]
 8021fc0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8021fc4:	2b06      	cmp	r3, #6
 8021fc6:	d006      	beq.n	8021fd6 <etharp_update_arp_entry+0x26>
 8021fc8:	4b48      	ldr	r3, [pc, #288]	; (80220ec <etharp_update_arp_entry+0x13c>)
 8021fca:	f240 12a9 	movw	r2, #425	; 0x1a9
 8021fce:	4948      	ldr	r1, [pc, #288]	; (80220f0 <etharp_update_arp_entry+0x140>)
 8021fd0:	4848      	ldr	r0, [pc, #288]	; (80220f4 <etharp_update_arp_entry+0x144>)
 8021fd2:	f004 fce1 	bl	8026998 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8021fd6:	68bb      	ldr	r3, [r7, #8]
 8021fd8:	2b00      	cmp	r3, #0
 8021fda:	d012      	beq.n	8022002 <etharp_update_arp_entry+0x52>
 8021fdc:	68bb      	ldr	r3, [r7, #8]
 8021fde:	681b      	ldr	r3, [r3, #0]
 8021fe0:	2b00      	cmp	r3, #0
 8021fe2:	d00e      	beq.n	8022002 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8021fe4:	68bb      	ldr	r3, [r7, #8]
 8021fe6:	681b      	ldr	r3, [r3, #0]
 8021fe8:	68f9      	ldr	r1, [r7, #12]
 8021fea:	4618      	mov	r0, r3
 8021fec:	f001 f99c 	bl	8023328 <ip4_addr_isbroadcast_u32>
 8021ff0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8021ff2:	2b00      	cmp	r3, #0
 8021ff4:	d105      	bne.n	8022002 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8021ff6:	68bb      	ldr	r3, [r7, #8]
 8021ff8:	681b      	ldr	r3, [r3, #0]
 8021ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8021ffe:	2be0      	cmp	r3, #224	; 0xe0
 8022000:	d102      	bne.n	8022008 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8022002:	f06f 030f 	mvn.w	r3, #15
 8022006:	e06c      	b.n	80220e2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8022008:	78fb      	ldrb	r3, [r7, #3]
 802200a:	68fa      	ldr	r2, [r7, #12]
 802200c:	4619      	mov	r1, r3
 802200e:	68b8      	ldr	r0, [r7, #8]
 8022010:	f7ff fe56 	bl	8021cc0 <etharp_find_entry>
 8022014:	4603      	mov	r3, r0
 8022016:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8022018:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 802201c:	2b00      	cmp	r3, #0
 802201e:	da02      	bge.n	8022026 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8022020:	8afb      	ldrh	r3, [r7, #22]
 8022022:	b25b      	sxtb	r3, r3
 8022024:	e05d      	b.n	80220e2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8022026:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802202a:	4933      	ldr	r1, [pc, #204]	; (80220f8 <etharp_update_arp_entry+0x148>)
 802202c:	4613      	mov	r3, r2
 802202e:	005b      	lsls	r3, r3, #1
 8022030:	4413      	add	r3, r2
 8022032:	00db      	lsls	r3, r3, #3
 8022034:	440b      	add	r3, r1
 8022036:	3314      	adds	r3, #20
 8022038:	2202      	movs	r2, #2
 802203a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 802203c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022040:	492d      	ldr	r1, [pc, #180]	; (80220f8 <etharp_update_arp_entry+0x148>)
 8022042:	4613      	mov	r3, r2
 8022044:	005b      	lsls	r3, r3, #1
 8022046:	4413      	add	r3, r2
 8022048:	00db      	lsls	r3, r3, #3
 802204a:	440b      	add	r3, r1
 802204c:	3308      	adds	r3, #8
 802204e:	68fa      	ldr	r2, [r7, #12]
 8022050:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8022052:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022056:	4613      	mov	r3, r2
 8022058:	005b      	lsls	r3, r3, #1
 802205a:	4413      	add	r3, r2
 802205c:	00db      	lsls	r3, r3, #3
 802205e:	3308      	adds	r3, #8
 8022060:	4a25      	ldr	r2, [pc, #148]	; (80220f8 <etharp_update_arp_entry+0x148>)
 8022062:	4413      	add	r3, r2
 8022064:	3304      	adds	r3, #4
 8022066:	2206      	movs	r2, #6
 8022068:	6879      	ldr	r1, [r7, #4]
 802206a:	4618      	mov	r0, r3
 802206c:	f004 fbd9 	bl	8026822 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8022070:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8022074:	4920      	ldr	r1, [pc, #128]	; (80220f8 <etharp_update_arp_entry+0x148>)
 8022076:	4613      	mov	r3, r2
 8022078:	005b      	lsls	r3, r3, #1
 802207a:	4413      	add	r3, r2
 802207c:	00db      	lsls	r3, r3, #3
 802207e:	440b      	add	r3, r1
 8022080:	3312      	adds	r3, #18
 8022082:	2200      	movs	r2, #0
 8022084:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8022086:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802208a:	491b      	ldr	r1, [pc, #108]	; (80220f8 <etharp_update_arp_entry+0x148>)
 802208c:	4613      	mov	r3, r2
 802208e:	005b      	lsls	r3, r3, #1
 8022090:	4413      	add	r3, r2
 8022092:	00db      	lsls	r3, r3, #3
 8022094:	440b      	add	r3, r1
 8022096:	681b      	ldr	r3, [r3, #0]
 8022098:	2b00      	cmp	r3, #0
 802209a:	d021      	beq.n	80220e0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 802209c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80220a0:	4915      	ldr	r1, [pc, #84]	; (80220f8 <etharp_update_arp_entry+0x148>)
 80220a2:	4613      	mov	r3, r2
 80220a4:	005b      	lsls	r3, r3, #1
 80220a6:	4413      	add	r3, r2
 80220a8:	00db      	lsls	r3, r3, #3
 80220aa:	440b      	add	r3, r1
 80220ac:	681b      	ldr	r3, [r3, #0]
 80220ae:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80220b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80220b4:	4910      	ldr	r1, [pc, #64]	; (80220f8 <etharp_update_arp_entry+0x148>)
 80220b6:	4613      	mov	r3, r2
 80220b8:	005b      	lsls	r3, r3, #1
 80220ba:	4413      	add	r3, r2
 80220bc:	00db      	lsls	r3, r3, #3
 80220be:	440b      	add	r3, r1
 80220c0:	2200      	movs	r2, #0
 80220c2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80220c4:	68fb      	ldr	r3, [r7, #12]
 80220c6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80220ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80220ce:	9300      	str	r3, [sp, #0]
 80220d0:	687b      	ldr	r3, [r7, #4]
 80220d2:	6939      	ldr	r1, [r7, #16]
 80220d4:	68f8      	ldr	r0, [r7, #12]
 80220d6:	f002 f83b 	bl	8024150 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80220da:	6938      	ldr	r0, [r7, #16]
 80220dc:	f7f6 fb6e 	bl	80187bc <pbuf_free>
  }
  return ERR_OK;
 80220e0:	2300      	movs	r3, #0
}
 80220e2:	4618      	mov	r0, r3
 80220e4:	3718      	adds	r7, #24
 80220e6:	46bd      	mov	sp, r7
 80220e8:	bd80      	pop	{r7, pc}
 80220ea:	bf00      	nop
 80220ec:	0802b304 	.word	0x0802b304
 80220f0:	0802b3fc 	.word	0x0802b3fc
 80220f4:	0802b37c 	.word	0x0802b37c
 80220f8:	20013210 	.word	0x20013210

080220fc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80220fc:	b580      	push	{r7, lr}
 80220fe:	b084      	sub	sp, #16
 8022100:	af00      	add	r7, sp, #0
 8022102:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022104:	2300      	movs	r3, #0
 8022106:	60fb      	str	r3, [r7, #12]
 8022108:	e01e      	b.n	8022148 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 802210a:	4913      	ldr	r1, [pc, #76]	; (8022158 <etharp_cleanup_netif+0x5c>)
 802210c:	68fa      	ldr	r2, [r7, #12]
 802210e:	4613      	mov	r3, r2
 8022110:	005b      	lsls	r3, r3, #1
 8022112:	4413      	add	r3, r2
 8022114:	00db      	lsls	r3, r3, #3
 8022116:	440b      	add	r3, r1
 8022118:	3314      	adds	r3, #20
 802211a:	781b      	ldrb	r3, [r3, #0]
 802211c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 802211e:	7afb      	ldrb	r3, [r7, #11]
 8022120:	2b00      	cmp	r3, #0
 8022122:	d00e      	beq.n	8022142 <etharp_cleanup_netif+0x46>
 8022124:	490c      	ldr	r1, [pc, #48]	; (8022158 <etharp_cleanup_netif+0x5c>)
 8022126:	68fa      	ldr	r2, [r7, #12]
 8022128:	4613      	mov	r3, r2
 802212a:	005b      	lsls	r3, r3, #1
 802212c:	4413      	add	r3, r2
 802212e:	00db      	lsls	r3, r3, #3
 8022130:	440b      	add	r3, r1
 8022132:	3308      	adds	r3, #8
 8022134:	681b      	ldr	r3, [r3, #0]
 8022136:	687a      	ldr	r2, [r7, #4]
 8022138:	429a      	cmp	r2, r3
 802213a:	d102      	bne.n	8022142 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 802213c:	68f8      	ldr	r0, [r7, #12]
 802213e:	f7ff fce5 	bl	8021b0c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022142:	68fb      	ldr	r3, [r7, #12]
 8022144:	3301      	adds	r3, #1
 8022146:	60fb      	str	r3, [r7, #12]
 8022148:	68fb      	ldr	r3, [r7, #12]
 802214a:	2b09      	cmp	r3, #9
 802214c:	dddd      	ble.n	802210a <etharp_cleanup_netif+0xe>
    }
  }
}
 802214e:	bf00      	nop
 8022150:	3710      	adds	r7, #16
 8022152:	46bd      	mov	sp, r7
 8022154:	bd80      	pop	{r7, pc}
 8022156:	bf00      	nop
 8022158:	20013210 	.word	0x20013210

0802215c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 802215c:	b5b0      	push	{r4, r5, r7, lr}
 802215e:	b08a      	sub	sp, #40	; 0x28
 8022160:	af04      	add	r7, sp, #16
 8022162:	6078      	str	r0, [r7, #4]
 8022164:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8022166:	683b      	ldr	r3, [r7, #0]
 8022168:	2b00      	cmp	r3, #0
 802216a:	d107      	bne.n	802217c <etharp_input+0x20>
 802216c:	4b3f      	ldr	r3, [pc, #252]	; (802226c <etharp_input+0x110>)
 802216e:	f240 228a 	movw	r2, #650	; 0x28a
 8022172:	493f      	ldr	r1, [pc, #252]	; (8022270 <etharp_input+0x114>)
 8022174:	483f      	ldr	r0, [pc, #252]	; (8022274 <etharp_input+0x118>)
 8022176:	f004 fc0f 	bl	8026998 <iprintf>
 802217a:	e074      	b.n	8022266 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 802217c:	687b      	ldr	r3, [r7, #4]
 802217e:	685b      	ldr	r3, [r3, #4]
 8022180:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8022182:	693b      	ldr	r3, [r7, #16]
 8022184:	881b      	ldrh	r3, [r3, #0]
 8022186:	b29b      	uxth	r3, r3
 8022188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802218c:	d10c      	bne.n	80221a8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802218e:	693b      	ldr	r3, [r7, #16]
 8022190:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8022192:	2b06      	cmp	r3, #6
 8022194:	d108      	bne.n	80221a8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8022196:	693b      	ldr	r3, [r7, #16]
 8022198:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802219a:	2b04      	cmp	r3, #4
 802219c:	d104      	bne.n	80221a8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 802219e:	693b      	ldr	r3, [r7, #16]
 80221a0:	885b      	ldrh	r3, [r3, #2]
 80221a2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80221a4:	2b08      	cmp	r3, #8
 80221a6:	d003      	beq.n	80221b0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80221a8:	6878      	ldr	r0, [r7, #4]
 80221aa:	f7f6 fb07 	bl	80187bc <pbuf_free>
    return;
 80221ae:	e05a      	b.n	8022266 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80221b0:	693b      	ldr	r3, [r7, #16]
 80221b2:	330e      	adds	r3, #14
 80221b4:	681b      	ldr	r3, [r3, #0]
 80221b6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80221b8:	693b      	ldr	r3, [r7, #16]
 80221ba:	3318      	adds	r3, #24
 80221bc:	681b      	ldr	r3, [r3, #0]
 80221be:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80221c0:	683b      	ldr	r3, [r7, #0]
 80221c2:	3304      	adds	r3, #4
 80221c4:	681b      	ldr	r3, [r3, #0]
 80221c6:	2b00      	cmp	r3, #0
 80221c8:	d102      	bne.n	80221d0 <etharp_input+0x74>
    for_us = 0;
 80221ca:	2300      	movs	r3, #0
 80221cc:	75fb      	strb	r3, [r7, #23]
 80221ce:	e009      	b.n	80221e4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80221d0:	68ba      	ldr	r2, [r7, #8]
 80221d2:	683b      	ldr	r3, [r7, #0]
 80221d4:	3304      	adds	r3, #4
 80221d6:	681b      	ldr	r3, [r3, #0]
 80221d8:	429a      	cmp	r2, r3
 80221da:	bf0c      	ite	eq
 80221dc:	2301      	moveq	r3, #1
 80221de:	2300      	movne	r3, #0
 80221e0:	b2db      	uxtb	r3, r3
 80221e2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80221e4:	693b      	ldr	r3, [r7, #16]
 80221e6:	f103 0208 	add.w	r2, r3, #8
 80221ea:	7dfb      	ldrb	r3, [r7, #23]
 80221ec:	2b00      	cmp	r3, #0
 80221ee:	d001      	beq.n	80221f4 <etharp_input+0x98>
 80221f0:	2301      	movs	r3, #1
 80221f2:	e000      	b.n	80221f6 <etharp_input+0x9a>
 80221f4:	2302      	movs	r3, #2
 80221f6:	f107 010c 	add.w	r1, r7, #12
 80221fa:	6838      	ldr	r0, [r7, #0]
 80221fc:	f7ff fed8 	bl	8021fb0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8022200:	693b      	ldr	r3, [r7, #16]
 8022202:	88db      	ldrh	r3, [r3, #6]
 8022204:	b29b      	uxth	r3, r3
 8022206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802220a:	d003      	beq.n	8022214 <etharp_input+0xb8>
 802220c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022210:	d01e      	beq.n	8022250 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8022212:	e025      	b.n	8022260 <etharp_input+0x104>
      if (for_us) {
 8022214:	7dfb      	ldrb	r3, [r7, #23]
 8022216:	2b00      	cmp	r3, #0
 8022218:	d021      	beq.n	802225e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 802221a:	683b      	ldr	r3, [r7, #0]
 802221c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8022220:	693b      	ldr	r3, [r7, #16]
 8022222:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8022226:	683b      	ldr	r3, [r7, #0]
 8022228:	f103 0526 	add.w	r5, r3, #38	; 0x26
 802222c:	683b      	ldr	r3, [r7, #0]
 802222e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8022230:	693a      	ldr	r2, [r7, #16]
 8022232:	3208      	adds	r2, #8
        etharp_raw(netif,
 8022234:	2102      	movs	r1, #2
 8022236:	9103      	str	r1, [sp, #12]
 8022238:	f107 010c 	add.w	r1, r7, #12
 802223c:	9102      	str	r1, [sp, #8]
 802223e:	9201      	str	r2, [sp, #4]
 8022240:	9300      	str	r3, [sp, #0]
 8022242:	462b      	mov	r3, r5
 8022244:	4622      	mov	r2, r4
 8022246:	4601      	mov	r1, r0
 8022248:	6838      	ldr	r0, [r7, #0]
 802224a:	f000 faf1 	bl	8022830 <etharp_raw>
      break;
 802224e:	e006      	b.n	802225e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8022250:	f107 030c 	add.w	r3, r7, #12
 8022254:	4619      	mov	r1, r3
 8022256:	6838      	ldr	r0, [r7, #0]
 8022258:	f7fe f9e6 	bl	8020628 <dhcp_arp_reply>
      break;
 802225c:	e000      	b.n	8022260 <etharp_input+0x104>
      break;
 802225e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8022260:	6878      	ldr	r0, [r7, #4]
 8022262:	f7f6 faab 	bl	80187bc <pbuf_free>
}
 8022266:	3718      	adds	r7, #24
 8022268:	46bd      	mov	sp, r7
 802226a:	bdb0      	pop	{r4, r5, r7, pc}
 802226c:	0802b304 	.word	0x0802b304
 8022270:	0802b454 	.word	0x0802b454
 8022274:	0802b37c 	.word	0x0802b37c

08022278 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8022278:	b580      	push	{r7, lr}
 802227a:	b086      	sub	sp, #24
 802227c:	af02      	add	r7, sp, #8
 802227e:	60f8      	str	r0, [r7, #12]
 8022280:	60b9      	str	r1, [r7, #8]
 8022282:	4613      	mov	r3, r2
 8022284:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8022286:	79fa      	ldrb	r2, [r7, #7]
 8022288:	4945      	ldr	r1, [pc, #276]	; (80223a0 <etharp_output_to_arp_index+0x128>)
 802228a:	4613      	mov	r3, r2
 802228c:	005b      	lsls	r3, r3, #1
 802228e:	4413      	add	r3, r2
 8022290:	00db      	lsls	r3, r3, #3
 8022292:	440b      	add	r3, r1
 8022294:	3314      	adds	r3, #20
 8022296:	781b      	ldrb	r3, [r3, #0]
 8022298:	2b01      	cmp	r3, #1
 802229a:	d806      	bhi.n	80222aa <etharp_output_to_arp_index+0x32>
 802229c:	4b41      	ldr	r3, [pc, #260]	; (80223a4 <etharp_output_to_arp_index+0x12c>)
 802229e:	f240 22ef 	movw	r2, #751	; 0x2ef
 80222a2:	4941      	ldr	r1, [pc, #260]	; (80223a8 <etharp_output_to_arp_index+0x130>)
 80222a4:	4841      	ldr	r0, [pc, #260]	; (80223ac <etharp_output_to_arp_index+0x134>)
 80222a6:	f004 fb77 	bl	8026998 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80222aa:	79fa      	ldrb	r2, [r7, #7]
 80222ac:	493c      	ldr	r1, [pc, #240]	; (80223a0 <etharp_output_to_arp_index+0x128>)
 80222ae:	4613      	mov	r3, r2
 80222b0:	005b      	lsls	r3, r3, #1
 80222b2:	4413      	add	r3, r2
 80222b4:	00db      	lsls	r3, r3, #3
 80222b6:	440b      	add	r3, r1
 80222b8:	3314      	adds	r3, #20
 80222ba:	781b      	ldrb	r3, [r3, #0]
 80222bc:	2b02      	cmp	r3, #2
 80222be:	d154      	bne.n	802236a <etharp_output_to_arp_index+0xf2>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80222c0:	79fa      	ldrb	r2, [r7, #7]
 80222c2:	4937      	ldr	r1, [pc, #220]	; (80223a0 <etharp_output_to_arp_index+0x128>)
 80222c4:	4613      	mov	r3, r2
 80222c6:	005b      	lsls	r3, r3, #1
 80222c8:	4413      	add	r3, r2
 80222ca:	00db      	lsls	r3, r3, #3
 80222cc:	440b      	add	r3, r1
 80222ce:	3312      	adds	r3, #18
 80222d0:	881b      	ldrh	r3, [r3, #0]
 80222d2:	f5b3 5fbb 	cmp.w	r3, #5984	; 0x1760
 80222d6:	d919      	bls.n	802230c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80222d8:	79fa      	ldrb	r2, [r7, #7]
 80222da:	4613      	mov	r3, r2
 80222dc:	005b      	lsls	r3, r3, #1
 80222de:	4413      	add	r3, r2
 80222e0:	00db      	lsls	r3, r3, #3
 80222e2:	4a2f      	ldr	r2, [pc, #188]	; (80223a0 <etharp_output_to_arp_index+0x128>)
 80222e4:	4413      	add	r3, r2
 80222e6:	3304      	adds	r3, #4
 80222e8:	4619      	mov	r1, r3
 80222ea:	68f8      	ldr	r0, [r7, #12]
 80222ec:	f000 fb4e 	bl	802298c <etharp_request>
 80222f0:	4603      	mov	r3, r0
 80222f2:	2b00      	cmp	r3, #0
 80222f4:	d139      	bne.n	802236a <etharp_output_to_arp_index+0xf2>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80222f6:	79fa      	ldrb	r2, [r7, #7]
 80222f8:	4929      	ldr	r1, [pc, #164]	; (80223a0 <etharp_output_to_arp_index+0x128>)
 80222fa:	4613      	mov	r3, r2
 80222fc:	005b      	lsls	r3, r3, #1
 80222fe:	4413      	add	r3, r2
 8022300:	00db      	lsls	r3, r3, #3
 8022302:	440b      	add	r3, r1
 8022304:	3314      	adds	r3, #20
 8022306:	2203      	movs	r2, #3
 8022308:	701a      	strb	r2, [r3, #0]
 802230a:	e02e      	b.n	802236a <etharp_output_to_arp_index+0xf2>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 802230c:	79fa      	ldrb	r2, [r7, #7]
 802230e:	4924      	ldr	r1, [pc, #144]	; (80223a0 <etharp_output_to_arp_index+0x128>)
 8022310:	4613      	mov	r3, r2
 8022312:	005b      	lsls	r3, r3, #1
 8022314:	4413      	add	r3, r2
 8022316:	00db      	lsls	r3, r3, #3
 8022318:	440b      	add	r3, r1
 802231a:	3312      	adds	r3, #18
 802231c:	881b      	ldrh	r3, [r3, #0]
 802231e:	f241 7251 	movw	r2, #5969	; 0x1751
 8022322:	4293      	cmp	r3, r2
 8022324:	d921      	bls.n	802236a <etharp_output_to_arp_index+0xf2>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8022326:	79fa      	ldrb	r2, [r7, #7]
 8022328:	4613      	mov	r3, r2
 802232a:	005b      	lsls	r3, r3, #1
 802232c:	4413      	add	r3, r2
 802232e:	00db      	lsls	r3, r3, #3
 8022330:	4a1b      	ldr	r2, [pc, #108]	; (80223a0 <etharp_output_to_arp_index+0x128>)
 8022332:	4413      	add	r3, r2
 8022334:	1d19      	adds	r1, r3, #4
 8022336:	79fa      	ldrb	r2, [r7, #7]
 8022338:	4613      	mov	r3, r2
 802233a:	005b      	lsls	r3, r3, #1
 802233c:	4413      	add	r3, r2
 802233e:	00db      	lsls	r3, r3, #3
 8022340:	3308      	adds	r3, #8
 8022342:	4a17      	ldr	r2, [pc, #92]	; (80223a0 <etharp_output_to_arp_index+0x128>)
 8022344:	4413      	add	r3, r2
 8022346:	3304      	adds	r3, #4
 8022348:	461a      	mov	r2, r3
 802234a:	68f8      	ldr	r0, [r7, #12]
 802234c:	f000 fafc 	bl	8022948 <etharp_request_dst>
 8022350:	4603      	mov	r3, r0
 8022352:	2b00      	cmp	r3, #0
 8022354:	d109      	bne.n	802236a <etharp_output_to_arp_index+0xf2>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8022356:	79fa      	ldrb	r2, [r7, #7]
 8022358:	4911      	ldr	r1, [pc, #68]	; (80223a0 <etharp_output_to_arp_index+0x128>)
 802235a:	4613      	mov	r3, r2
 802235c:	005b      	lsls	r3, r3, #1
 802235e:	4413      	add	r3, r2
 8022360:	00db      	lsls	r3, r3, #3
 8022362:	440b      	add	r3, r1
 8022364:	3314      	adds	r3, #20
 8022366:	2203      	movs	r2, #3
 8022368:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 802236a:	68fb      	ldr	r3, [r7, #12]
 802236c:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8022370:	79fa      	ldrb	r2, [r7, #7]
 8022372:	4613      	mov	r3, r2
 8022374:	005b      	lsls	r3, r3, #1
 8022376:	4413      	add	r3, r2
 8022378:	00db      	lsls	r3, r3, #3
 802237a:	3308      	adds	r3, #8
 802237c:	4a08      	ldr	r2, [pc, #32]	; (80223a0 <etharp_output_to_arp_index+0x128>)
 802237e:	4413      	add	r3, r2
 8022380:	1d1a      	adds	r2, r3, #4
 8022382:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8022386:	9300      	str	r3, [sp, #0]
 8022388:	4613      	mov	r3, r2
 802238a:	460a      	mov	r2, r1
 802238c:	68b9      	ldr	r1, [r7, #8]
 802238e:	68f8      	ldr	r0, [r7, #12]
 8022390:	f001 fede 	bl	8024150 <ethernet_output>
 8022394:	4603      	mov	r3, r0
}
 8022396:	4618      	mov	r0, r3
 8022398:	3710      	adds	r7, #16
 802239a:	46bd      	mov	sp, r7
 802239c:	bd80      	pop	{r7, pc}
 802239e:	bf00      	nop
 80223a0:	20013210 	.word	0x20013210
 80223a4:	0802b304 	.word	0x0802b304
 80223a8:	0802b474 	.word	0x0802b474
 80223ac:	0802b37c 	.word	0x0802b37c

080223b0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80223b0:	b580      	push	{r7, lr}
 80223b2:	b08a      	sub	sp, #40	; 0x28
 80223b4:	af02      	add	r7, sp, #8
 80223b6:	60f8      	str	r0, [r7, #12]
 80223b8:	60b9      	str	r1, [r7, #8]
 80223ba:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80223bc:	687b      	ldr	r3, [r7, #4]
 80223be:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80223c0:	68fb      	ldr	r3, [r7, #12]
 80223c2:	2b00      	cmp	r3, #0
 80223c4:	d106      	bne.n	80223d4 <etharp_output+0x24>
 80223c6:	4b73      	ldr	r3, [pc, #460]	; (8022594 <etharp_output+0x1e4>)
 80223c8:	f240 321e 	movw	r2, #798	; 0x31e
 80223cc:	4972      	ldr	r1, [pc, #456]	; (8022598 <etharp_output+0x1e8>)
 80223ce:	4873      	ldr	r0, [pc, #460]	; (802259c <etharp_output+0x1ec>)
 80223d0:	f004 fae2 	bl	8026998 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80223d4:	68bb      	ldr	r3, [r7, #8]
 80223d6:	2b00      	cmp	r3, #0
 80223d8:	d106      	bne.n	80223e8 <etharp_output+0x38>
 80223da:	4b6e      	ldr	r3, [pc, #440]	; (8022594 <etharp_output+0x1e4>)
 80223dc:	f240 321f 	movw	r2, #799	; 0x31f
 80223e0:	496f      	ldr	r1, [pc, #444]	; (80225a0 <etharp_output+0x1f0>)
 80223e2:	486e      	ldr	r0, [pc, #440]	; (802259c <etharp_output+0x1ec>)
 80223e4:	f004 fad8 	bl	8026998 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80223e8:	687b      	ldr	r3, [r7, #4]
 80223ea:	2b00      	cmp	r3, #0
 80223ec:	d106      	bne.n	80223fc <etharp_output+0x4c>
 80223ee:	4b69      	ldr	r3, [pc, #420]	; (8022594 <etharp_output+0x1e4>)
 80223f0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80223f4:	496b      	ldr	r1, [pc, #428]	; (80225a4 <etharp_output+0x1f4>)
 80223f6:	4869      	ldr	r0, [pc, #420]	; (802259c <etharp_output+0x1ec>)
 80223f8:	f004 face 	bl	8026998 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80223fc:	687b      	ldr	r3, [r7, #4]
 80223fe:	681b      	ldr	r3, [r3, #0]
 8022400:	68f9      	ldr	r1, [r7, #12]
 8022402:	4618      	mov	r0, r3
 8022404:	f000 ff90 	bl	8023328 <ip4_addr_isbroadcast_u32>
 8022408:	4603      	mov	r3, r0
 802240a:	2b00      	cmp	r3, #0
 802240c:	d002      	beq.n	8022414 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 802240e:	4b66      	ldr	r3, [pc, #408]	; (80225a8 <etharp_output+0x1f8>)
 8022410:	61fb      	str	r3, [r7, #28]
 8022412:	e0af      	b.n	8022574 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8022414:	687b      	ldr	r3, [r7, #4]
 8022416:	681b      	ldr	r3, [r3, #0]
 8022418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802241c:	2be0      	cmp	r3, #224	; 0xe0
 802241e:	d118      	bne.n	8022452 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8022420:	2301      	movs	r3, #1
 8022422:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8022424:	2300      	movs	r3, #0
 8022426:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8022428:	235e      	movs	r3, #94	; 0x5e
 802242a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 802242c:	687b      	ldr	r3, [r7, #4]
 802242e:	3301      	adds	r3, #1
 8022430:	781b      	ldrb	r3, [r3, #0]
 8022432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8022436:	b2db      	uxtb	r3, r3
 8022438:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 802243a:	687b      	ldr	r3, [r7, #4]
 802243c:	3302      	adds	r3, #2
 802243e:	781b      	ldrb	r3, [r3, #0]
 8022440:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8022442:	687b      	ldr	r3, [r7, #4]
 8022444:	3303      	adds	r3, #3
 8022446:	781b      	ldrb	r3, [r3, #0]
 8022448:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 802244a:	f107 0310 	add.w	r3, r7, #16
 802244e:	61fb      	str	r3, [r7, #28]
 8022450:	e090      	b.n	8022574 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8022452:	687b      	ldr	r3, [r7, #4]
 8022454:	681a      	ldr	r2, [r3, #0]
 8022456:	68fb      	ldr	r3, [r7, #12]
 8022458:	3304      	adds	r3, #4
 802245a:	681b      	ldr	r3, [r3, #0]
 802245c:	405a      	eors	r2, r3
 802245e:	68fb      	ldr	r3, [r7, #12]
 8022460:	3308      	adds	r3, #8
 8022462:	681b      	ldr	r3, [r3, #0]
 8022464:	4013      	ands	r3, r2
 8022466:	2b00      	cmp	r3, #0
 8022468:	d012      	beq.n	8022490 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 802246a:	687b      	ldr	r3, [r7, #4]
 802246c:	681b      	ldr	r3, [r3, #0]
 802246e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8022470:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8022474:	4293      	cmp	r3, r2
 8022476:	d00b      	beq.n	8022490 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8022478:	68fb      	ldr	r3, [r7, #12]
 802247a:	330c      	adds	r3, #12
 802247c:	681b      	ldr	r3, [r3, #0]
 802247e:	2b00      	cmp	r3, #0
 8022480:	d003      	beq.n	802248a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8022482:	68fb      	ldr	r3, [r7, #12]
 8022484:	330c      	adds	r3, #12
 8022486:	61bb      	str	r3, [r7, #24]
 8022488:	e002      	b.n	8022490 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 802248a:	f06f 0303 	mvn.w	r3, #3
 802248e:	e07d      	b.n	802258c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8022490:	4b46      	ldr	r3, [pc, #280]	; (80225ac <etharp_output+0x1fc>)
 8022492:	781b      	ldrb	r3, [r3, #0]
 8022494:	4619      	mov	r1, r3
 8022496:	4a46      	ldr	r2, [pc, #280]	; (80225b0 <etharp_output+0x200>)
 8022498:	460b      	mov	r3, r1
 802249a:	005b      	lsls	r3, r3, #1
 802249c:	440b      	add	r3, r1
 802249e:	00db      	lsls	r3, r3, #3
 80224a0:	4413      	add	r3, r2
 80224a2:	3314      	adds	r3, #20
 80224a4:	781b      	ldrb	r3, [r3, #0]
 80224a6:	2b01      	cmp	r3, #1
 80224a8:	d925      	bls.n	80224f6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80224aa:	4b40      	ldr	r3, [pc, #256]	; (80225ac <etharp_output+0x1fc>)
 80224ac:	781b      	ldrb	r3, [r3, #0]
 80224ae:	4619      	mov	r1, r3
 80224b0:	4a3f      	ldr	r2, [pc, #252]	; (80225b0 <etharp_output+0x200>)
 80224b2:	460b      	mov	r3, r1
 80224b4:	005b      	lsls	r3, r3, #1
 80224b6:	440b      	add	r3, r1
 80224b8:	00db      	lsls	r3, r3, #3
 80224ba:	4413      	add	r3, r2
 80224bc:	3308      	adds	r3, #8
 80224be:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80224c0:	68fa      	ldr	r2, [r7, #12]
 80224c2:	429a      	cmp	r2, r3
 80224c4:	d117      	bne.n	80224f6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80224c6:	69bb      	ldr	r3, [r7, #24]
 80224c8:	681a      	ldr	r2, [r3, #0]
 80224ca:	4b38      	ldr	r3, [pc, #224]	; (80225ac <etharp_output+0x1fc>)
 80224cc:	781b      	ldrb	r3, [r3, #0]
 80224ce:	4618      	mov	r0, r3
 80224d0:	4937      	ldr	r1, [pc, #220]	; (80225b0 <etharp_output+0x200>)
 80224d2:	4603      	mov	r3, r0
 80224d4:	005b      	lsls	r3, r3, #1
 80224d6:	4403      	add	r3, r0
 80224d8:	00db      	lsls	r3, r3, #3
 80224da:	440b      	add	r3, r1
 80224dc:	3304      	adds	r3, #4
 80224de:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80224e0:	429a      	cmp	r2, r3
 80224e2:	d108      	bne.n	80224f6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80224e4:	4b31      	ldr	r3, [pc, #196]	; (80225ac <etharp_output+0x1fc>)
 80224e6:	781b      	ldrb	r3, [r3, #0]
 80224e8:	461a      	mov	r2, r3
 80224ea:	68b9      	ldr	r1, [r7, #8]
 80224ec:	68f8      	ldr	r0, [r7, #12]
 80224ee:	f7ff fec3 	bl	8022278 <etharp_output_to_arp_index>
 80224f2:	4603      	mov	r3, r0
 80224f4:	e04a      	b.n	802258c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80224f6:	2300      	movs	r3, #0
 80224f8:	75fb      	strb	r3, [r7, #23]
 80224fa:	e031      	b.n	8022560 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80224fc:	7dfa      	ldrb	r2, [r7, #23]
 80224fe:	492c      	ldr	r1, [pc, #176]	; (80225b0 <etharp_output+0x200>)
 8022500:	4613      	mov	r3, r2
 8022502:	005b      	lsls	r3, r3, #1
 8022504:	4413      	add	r3, r2
 8022506:	00db      	lsls	r3, r3, #3
 8022508:	440b      	add	r3, r1
 802250a:	3314      	adds	r3, #20
 802250c:	781b      	ldrb	r3, [r3, #0]
 802250e:	2b01      	cmp	r3, #1
 8022510:	d923      	bls.n	802255a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8022512:	7dfa      	ldrb	r2, [r7, #23]
 8022514:	4926      	ldr	r1, [pc, #152]	; (80225b0 <etharp_output+0x200>)
 8022516:	4613      	mov	r3, r2
 8022518:	005b      	lsls	r3, r3, #1
 802251a:	4413      	add	r3, r2
 802251c:	00db      	lsls	r3, r3, #3
 802251e:	440b      	add	r3, r1
 8022520:	3308      	adds	r3, #8
 8022522:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8022524:	68fa      	ldr	r2, [r7, #12]
 8022526:	429a      	cmp	r2, r3
 8022528:	d117      	bne.n	802255a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 802252a:	69bb      	ldr	r3, [r7, #24]
 802252c:	6819      	ldr	r1, [r3, #0]
 802252e:	7dfa      	ldrb	r2, [r7, #23]
 8022530:	481f      	ldr	r0, [pc, #124]	; (80225b0 <etharp_output+0x200>)
 8022532:	4613      	mov	r3, r2
 8022534:	005b      	lsls	r3, r3, #1
 8022536:	4413      	add	r3, r2
 8022538:	00db      	lsls	r3, r3, #3
 802253a:	4403      	add	r3, r0
 802253c:	3304      	adds	r3, #4
 802253e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8022540:	4299      	cmp	r1, r3
 8022542:	d10a      	bne.n	802255a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8022544:	4a19      	ldr	r2, [pc, #100]	; (80225ac <etharp_output+0x1fc>)
 8022546:	7dfb      	ldrb	r3, [r7, #23]
 8022548:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 802254a:	7dfb      	ldrb	r3, [r7, #23]
 802254c:	461a      	mov	r2, r3
 802254e:	68b9      	ldr	r1, [r7, #8]
 8022550:	68f8      	ldr	r0, [r7, #12]
 8022552:	f7ff fe91 	bl	8022278 <etharp_output_to_arp_index>
 8022556:	4603      	mov	r3, r0
 8022558:	e018      	b.n	802258c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 802255a:	7dfb      	ldrb	r3, [r7, #23]
 802255c:	3301      	adds	r3, #1
 802255e:	75fb      	strb	r3, [r7, #23]
 8022560:	7dfb      	ldrb	r3, [r7, #23]
 8022562:	2b09      	cmp	r3, #9
 8022564:	d9ca      	bls.n	80224fc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8022566:	68ba      	ldr	r2, [r7, #8]
 8022568:	69b9      	ldr	r1, [r7, #24]
 802256a:	68f8      	ldr	r0, [r7, #12]
 802256c:	f000 f822 	bl	80225b4 <etharp_query>
 8022570:	4603      	mov	r3, r0
 8022572:	e00b      	b.n	802258c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8022574:	68fb      	ldr	r3, [r7, #12]
 8022576:	f103 0226 	add.w	r2, r3, #38	; 0x26
 802257a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802257e:	9300      	str	r3, [sp, #0]
 8022580:	69fb      	ldr	r3, [r7, #28]
 8022582:	68b9      	ldr	r1, [r7, #8]
 8022584:	68f8      	ldr	r0, [r7, #12]
 8022586:	f001 fde3 	bl	8024150 <ethernet_output>
 802258a:	4603      	mov	r3, r0
}
 802258c:	4618      	mov	r0, r3
 802258e:	3720      	adds	r7, #32
 8022590:	46bd      	mov	sp, r7
 8022592:	bd80      	pop	{r7, pc}
 8022594:	0802b304 	.word	0x0802b304
 8022598:	0802b454 	.word	0x0802b454
 802259c:	0802b37c 	.word	0x0802b37c
 80225a0:	0802b4a4 	.word	0x0802b4a4
 80225a4:	0802b444 	.word	0x0802b444
 80225a8:	0802bde0 	.word	0x0802bde0
 80225ac:	20013300 	.word	0x20013300
 80225b0:	20013210 	.word	0x20013210

080225b4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80225b4:	b580      	push	{r7, lr}
 80225b6:	b08c      	sub	sp, #48	; 0x30
 80225b8:	af02      	add	r7, sp, #8
 80225ba:	60f8      	str	r0, [r7, #12]
 80225bc:	60b9      	str	r1, [r7, #8]
 80225be:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80225c0:	68fb      	ldr	r3, [r7, #12]
 80225c2:	3326      	adds	r3, #38	; 0x26
 80225c4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80225c6:	23ff      	movs	r3, #255	; 0xff
 80225c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80225cc:	2300      	movs	r3, #0
 80225ce:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80225d0:	68bb      	ldr	r3, [r7, #8]
 80225d2:	681b      	ldr	r3, [r3, #0]
 80225d4:	68f9      	ldr	r1, [r7, #12]
 80225d6:	4618      	mov	r0, r3
 80225d8:	f000 fea6 	bl	8023328 <ip4_addr_isbroadcast_u32>
 80225dc:	4603      	mov	r3, r0
 80225de:	2b00      	cmp	r3, #0
 80225e0:	d10c      	bne.n	80225fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80225e2:	68bb      	ldr	r3, [r7, #8]
 80225e4:	681b      	ldr	r3, [r3, #0]
 80225e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80225ea:	2be0      	cmp	r3, #224	; 0xe0
 80225ec:	d006      	beq.n	80225fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80225ee:	68bb      	ldr	r3, [r7, #8]
 80225f0:	2b00      	cmp	r3, #0
 80225f2:	d003      	beq.n	80225fc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80225f4:	68bb      	ldr	r3, [r7, #8]
 80225f6:	681b      	ldr	r3, [r3, #0]
 80225f8:	2b00      	cmp	r3, #0
 80225fa:	d102      	bne.n	8022602 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80225fc:	f06f 030f 	mvn.w	r3, #15
 8022600:	e102      	b.n	8022808 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8022602:	68fa      	ldr	r2, [r7, #12]
 8022604:	2101      	movs	r1, #1
 8022606:	68b8      	ldr	r0, [r7, #8]
 8022608:	f7ff fb5a 	bl	8021cc0 <etharp_find_entry>
 802260c:	4603      	mov	r3, r0
 802260e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8022610:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8022614:	2b00      	cmp	r3, #0
 8022616:	da02      	bge.n	802261e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8022618:	8a7b      	ldrh	r3, [r7, #18]
 802261a:	b25b      	sxtb	r3, r3
 802261c:	e0f4      	b.n	8022808 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 802261e:	8a7b      	ldrh	r3, [r7, #18]
 8022620:	2b7e      	cmp	r3, #126	; 0x7e
 8022622:	d906      	bls.n	8022632 <etharp_query+0x7e>
 8022624:	4b7a      	ldr	r3, [pc, #488]	; (8022810 <etharp_query+0x25c>)
 8022626:	f240 32c1 	movw	r2, #961	; 0x3c1
 802262a:	497a      	ldr	r1, [pc, #488]	; (8022814 <etharp_query+0x260>)
 802262c:	487a      	ldr	r0, [pc, #488]	; (8022818 <etharp_query+0x264>)
 802262e:	f004 f9b3 	bl	8026998 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8022632:	8a7b      	ldrh	r3, [r7, #18]
 8022634:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8022636:	7c7a      	ldrb	r2, [r7, #17]
 8022638:	4978      	ldr	r1, [pc, #480]	; (802281c <etharp_query+0x268>)
 802263a:	4613      	mov	r3, r2
 802263c:	005b      	lsls	r3, r3, #1
 802263e:	4413      	add	r3, r2
 8022640:	00db      	lsls	r3, r3, #3
 8022642:	440b      	add	r3, r1
 8022644:	3314      	adds	r3, #20
 8022646:	781b      	ldrb	r3, [r3, #0]
 8022648:	2b00      	cmp	r3, #0
 802264a:	d115      	bne.n	8022678 <etharp_query+0xc4>
    is_new_entry = 1;
 802264c:	2301      	movs	r3, #1
 802264e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8022650:	7c7a      	ldrb	r2, [r7, #17]
 8022652:	4972      	ldr	r1, [pc, #456]	; (802281c <etharp_query+0x268>)
 8022654:	4613      	mov	r3, r2
 8022656:	005b      	lsls	r3, r3, #1
 8022658:	4413      	add	r3, r2
 802265a:	00db      	lsls	r3, r3, #3
 802265c:	440b      	add	r3, r1
 802265e:	3314      	adds	r3, #20
 8022660:	2201      	movs	r2, #1
 8022662:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8022664:	7c7a      	ldrb	r2, [r7, #17]
 8022666:	496d      	ldr	r1, [pc, #436]	; (802281c <etharp_query+0x268>)
 8022668:	4613      	mov	r3, r2
 802266a:	005b      	lsls	r3, r3, #1
 802266c:	4413      	add	r3, r2
 802266e:	00db      	lsls	r3, r3, #3
 8022670:	440b      	add	r3, r1
 8022672:	3308      	adds	r3, #8
 8022674:	68fa      	ldr	r2, [r7, #12]
 8022676:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8022678:	7c7a      	ldrb	r2, [r7, #17]
 802267a:	4968      	ldr	r1, [pc, #416]	; (802281c <etharp_query+0x268>)
 802267c:	4613      	mov	r3, r2
 802267e:	005b      	lsls	r3, r3, #1
 8022680:	4413      	add	r3, r2
 8022682:	00db      	lsls	r3, r3, #3
 8022684:	440b      	add	r3, r1
 8022686:	3314      	adds	r3, #20
 8022688:	781b      	ldrb	r3, [r3, #0]
 802268a:	2b01      	cmp	r3, #1
 802268c:	d011      	beq.n	80226b2 <etharp_query+0xfe>
 802268e:	7c7a      	ldrb	r2, [r7, #17]
 8022690:	4962      	ldr	r1, [pc, #392]	; (802281c <etharp_query+0x268>)
 8022692:	4613      	mov	r3, r2
 8022694:	005b      	lsls	r3, r3, #1
 8022696:	4413      	add	r3, r2
 8022698:	00db      	lsls	r3, r3, #3
 802269a:	440b      	add	r3, r1
 802269c:	3314      	adds	r3, #20
 802269e:	781b      	ldrb	r3, [r3, #0]
 80226a0:	2b01      	cmp	r3, #1
 80226a2:	d806      	bhi.n	80226b2 <etharp_query+0xfe>
 80226a4:	4b5a      	ldr	r3, [pc, #360]	; (8022810 <etharp_query+0x25c>)
 80226a6:	f240 32cf 	movw	r2, #975	; 0x3cf
 80226aa:	495d      	ldr	r1, [pc, #372]	; (8022820 <etharp_query+0x26c>)
 80226ac:	485a      	ldr	r0, [pc, #360]	; (8022818 <etharp_query+0x264>)
 80226ae:	f004 f973 	bl	8026998 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80226b2:	6a3b      	ldr	r3, [r7, #32]
 80226b4:	2b00      	cmp	r3, #0
 80226b6:	d102      	bne.n	80226be <etharp_query+0x10a>
 80226b8:	687b      	ldr	r3, [r7, #4]
 80226ba:	2b00      	cmp	r3, #0
 80226bc:	d10c      	bne.n	80226d8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80226be:	68b9      	ldr	r1, [r7, #8]
 80226c0:	68f8      	ldr	r0, [r7, #12]
 80226c2:	f000 f963 	bl	802298c <etharp_request>
 80226c6:	4603      	mov	r3, r0
 80226c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80226cc:	687b      	ldr	r3, [r7, #4]
 80226ce:	2b00      	cmp	r3, #0
 80226d0:	d102      	bne.n	80226d8 <etharp_query+0x124>
      return result;
 80226d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80226d6:	e097      	b.n	8022808 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80226d8:	687b      	ldr	r3, [r7, #4]
 80226da:	2b00      	cmp	r3, #0
 80226dc:	d106      	bne.n	80226ec <etharp_query+0x138>
 80226de:	4b4c      	ldr	r3, [pc, #304]	; (8022810 <etharp_query+0x25c>)
 80226e0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80226e4:	494f      	ldr	r1, [pc, #316]	; (8022824 <etharp_query+0x270>)
 80226e6:	484c      	ldr	r0, [pc, #304]	; (8022818 <etharp_query+0x264>)
 80226e8:	f004 f956 	bl	8026998 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80226ec:	7c7a      	ldrb	r2, [r7, #17]
 80226ee:	494b      	ldr	r1, [pc, #300]	; (802281c <etharp_query+0x268>)
 80226f0:	4613      	mov	r3, r2
 80226f2:	005b      	lsls	r3, r3, #1
 80226f4:	4413      	add	r3, r2
 80226f6:	00db      	lsls	r3, r3, #3
 80226f8:	440b      	add	r3, r1
 80226fa:	3314      	adds	r3, #20
 80226fc:	781b      	ldrb	r3, [r3, #0]
 80226fe:	2b01      	cmp	r3, #1
 8022700:	d918      	bls.n	8022734 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8022702:	4a49      	ldr	r2, [pc, #292]	; (8022828 <etharp_query+0x274>)
 8022704:	7c7b      	ldrb	r3, [r7, #17]
 8022706:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8022708:	7c7a      	ldrb	r2, [r7, #17]
 802270a:	4613      	mov	r3, r2
 802270c:	005b      	lsls	r3, r3, #1
 802270e:	4413      	add	r3, r2
 8022710:	00db      	lsls	r3, r3, #3
 8022712:	3308      	adds	r3, #8
 8022714:	4a41      	ldr	r2, [pc, #260]	; (802281c <etharp_query+0x268>)
 8022716:	4413      	add	r3, r2
 8022718:	1d1a      	adds	r2, r3, #4
 802271a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802271e:	9300      	str	r3, [sp, #0]
 8022720:	4613      	mov	r3, r2
 8022722:	697a      	ldr	r2, [r7, #20]
 8022724:	6879      	ldr	r1, [r7, #4]
 8022726:	68f8      	ldr	r0, [r7, #12]
 8022728:	f001 fd12 	bl	8024150 <ethernet_output>
 802272c:	4603      	mov	r3, r0
 802272e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8022732:	e067      	b.n	8022804 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8022734:	7c7a      	ldrb	r2, [r7, #17]
 8022736:	4939      	ldr	r1, [pc, #228]	; (802281c <etharp_query+0x268>)
 8022738:	4613      	mov	r3, r2
 802273a:	005b      	lsls	r3, r3, #1
 802273c:	4413      	add	r3, r2
 802273e:	00db      	lsls	r3, r3, #3
 8022740:	440b      	add	r3, r1
 8022742:	3314      	adds	r3, #20
 8022744:	781b      	ldrb	r3, [r3, #0]
 8022746:	2b01      	cmp	r3, #1
 8022748:	d15c      	bne.n	8022804 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 802274a:	2300      	movs	r3, #0
 802274c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 802274e:	687b      	ldr	r3, [r7, #4]
 8022750:	61fb      	str	r3, [r7, #28]
    while (p) {
 8022752:	e01c      	b.n	802278e <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8022754:	69fb      	ldr	r3, [r7, #28]
 8022756:	895a      	ldrh	r2, [r3, #10]
 8022758:	69fb      	ldr	r3, [r7, #28]
 802275a:	891b      	ldrh	r3, [r3, #8]
 802275c:	429a      	cmp	r2, r3
 802275e:	d10a      	bne.n	8022776 <etharp_query+0x1c2>
 8022760:	69fb      	ldr	r3, [r7, #28]
 8022762:	681b      	ldr	r3, [r3, #0]
 8022764:	2b00      	cmp	r3, #0
 8022766:	d006      	beq.n	8022776 <etharp_query+0x1c2>
 8022768:	4b29      	ldr	r3, [pc, #164]	; (8022810 <etharp_query+0x25c>)
 802276a:	f240 32f1 	movw	r2, #1009	; 0x3f1
 802276e:	492f      	ldr	r1, [pc, #188]	; (802282c <etharp_query+0x278>)
 8022770:	4829      	ldr	r0, [pc, #164]	; (8022818 <etharp_query+0x264>)
 8022772:	f004 f911 	bl	8026998 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8022776:	69fb      	ldr	r3, [r7, #28]
 8022778:	7b1b      	ldrb	r3, [r3, #12]
 802277a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802277e:	2b00      	cmp	r3, #0
 8022780:	d002      	beq.n	8022788 <etharp_query+0x1d4>
        copy_needed = 1;
 8022782:	2301      	movs	r3, #1
 8022784:	61bb      	str	r3, [r7, #24]
        break;
 8022786:	e005      	b.n	8022794 <etharp_query+0x1e0>
      }
      p = p->next;
 8022788:	69fb      	ldr	r3, [r7, #28]
 802278a:	681b      	ldr	r3, [r3, #0]
 802278c:	61fb      	str	r3, [r7, #28]
    while (p) {
 802278e:	69fb      	ldr	r3, [r7, #28]
 8022790:	2b00      	cmp	r3, #0
 8022792:	d1df      	bne.n	8022754 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8022794:	69bb      	ldr	r3, [r7, #24]
 8022796:	2b00      	cmp	r3, #0
 8022798:	d007      	beq.n	80227aa <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 802279a:	687a      	ldr	r2, [r7, #4]
 802279c:	f44f 7120 	mov.w	r1, #640	; 0x280
 80227a0:	200e      	movs	r0, #14
 80227a2:	f7f6 fa83 	bl	8018cac <pbuf_clone>
 80227a6:	61f8      	str	r0, [r7, #28]
 80227a8:	e004      	b.n	80227b4 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80227aa:	687b      	ldr	r3, [r7, #4]
 80227ac:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80227ae:	69f8      	ldr	r0, [r7, #28]
 80227b0:	f7f6 f8aa 	bl	8018908 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80227b4:	69fb      	ldr	r3, [r7, #28]
 80227b6:	2b00      	cmp	r3, #0
 80227b8:	d021      	beq.n	80227fe <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80227ba:	7c7a      	ldrb	r2, [r7, #17]
 80227bc:	4917      	ldr	r1, [pc, #92]	; (802281c <etharp_query+0x268>)
 80227be:	4613      	mov	r3, r2
 80227c0:	005b      	lsls	r3, r3, #1
 80227c2:	4413      	add	r3, r2
 80227c4:	00db      	lsls	r3, r3, #3
 80227c6:	440b      	add	r3, r1
 80227c8:	681b      	ldr	r3, [r3, #0]
 80227ca:	2b00      	cmp	r3, #0
 80227cc:	d00a      	beq.n	80227e4 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80227ce:	7c7a      	ldrb	r2, [r7, #17]
 80227d0:	4912      	ldr	r1, [pc, #72]	; (802281c <etharp_query+0x268>)
 80227d2:	4613      	mov	r3, r2
 80227d4:	005b      	lsls	r3, r3, #1
 80227d6:	4413      	add	r3, r2
 80227d8:	00db      	lsls	r3, r3, #3
 80227da:	440b      	add	r3, r1
 80227dc:	681b      	ldr	r3, [r3, #0]
 80227de:	4618      	mov	r0, r3
 80227e0:	f7f5 ffec 	bl	80187bc <pbuf_free>
      }
      arp_table[i].q = p;
 80227e4:	7c7a      	ldrb	r2, [r7, #17]
 80227e6:	490d      	ldr	r1, [pc, #52]	; (802281c <etharp_query+0x268>)
 80227e8:	4613      	mov	r3, r2
 80227ea:	005b      	lsls	r3, r3, #1
 80227ec:	4413      	add	r3, r2
 80227ee:	00db      	lsls	r3, r3, #3
 80227f0:	440b      	add	r3, r1
 80227f2:	69fa      	ldr	r2, [r7, #28]
 80227f4:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80227f6:	2300      	movs	r3, #0
 80227f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80227fc:	e002      	b.n	8022804 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80227fe:	23ff      	movs	r3, #255	; 0xff
 8022800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8022804:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8022808:	4618      	mov	r0, r3
 802280a:	3728      	adds	r7, #40	; 0x28
 802280c:	46bd      	mov	sp, r7
 802280e:	bd80      	pop	{r7, pc}
 8022810:	0802b304 	.word	0x0802b304
 8022814:	0802b4b0 	.word	0x0802b4b0
 8022818:	0802b37c 	.word	0x0802b37c
 802281c:	20013210 	.word	0x20013210
 8022820:	0802b4c0 	.word	0x0802b4c0
 8022824:	0802b4a4 	.word	0x0802b4a4
 8022828:	20013300 	.word	0x20013300
 802282c:	0802b4e8 	.word	0x0802b4e8

08022830 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8022830:	b580      	push	{r7, lr}
 8022832:	b08a      	sub	sp, #40	; 0x28
 8022834:	af02      	add	r7, sp, #8
 8022836:	60f8      	str	r0, [r7, #12]
 8022838:	60b9      	str	r1, [r7, #8]
 802283a:	607a      	str	r2, [r7, #4]
 802283c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 802283e:	2300      	movs	r3, #0
 8022840:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8022842:	68fb      	ldr	r3, [r7, #12]
 8022844:	2b00      	cmp	r3, #0
 8022846:	d106      	bne.n	8022856 <etharp_raw+0x26>
 8022848:	4b3a      	ldr	r3, [pc, #232]	; (8022934 <etharp_raw+0x104>)
 802284a:	f240 4257 	movw	r2, #1111	; 0x457
 802284e:	493a      	ldr	r1, [pc, #232]	; (8022938 <etharp_raw+0x108>)
 8022850:	483a      	ldr	r0, [pc, #232]	; (802293c <etharp_raw+0x10c>)
 8022852:	f004 f8a1 	bl	8026998 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8022856:	f44f 7220 	mov.w	r2, #640	; 0x280
 802285a:	211c      	movs	r1, #28
 802285c:	200e      	movs	r0, #14
 802285e:	f7f5 fc9b 	bl	8018198 <pbuf_alloc>
 8022862:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8022864:	69bb      	ldr	r3, [r7, #24]
 8022866:	2b00      	cmp	r3, #0
 8022868:	d102      	bne.n	8022870 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 802286a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802286e:	e05d      	b.n	802292c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8022870:	69bb      	ldr	r3, [r7, #24]
 8022872:	895b      	ldrh	r3, [r3, #10]
 8022874:	2b1b      	cmp	r3, #27
 8022876:	d806      	bhi.n	8022886 <etharp_raw+0x56>
 8022878:	4b2e      	ldr	r3, [pc, #184]	; (8022934 <etharp_raw+0x104>)
 802287a:	f240 4263 	movw	r2, #1123	; 0x463
 802287e:	4930      	ldr	r1, [pc, #192]	; (8022940 <etharp_raw+0x110>)
 8022880:	482e      	ldr	r0, [pc, #184]	; (802293c <etharp_raw+0x10c>)
 8022882:	f004 f889 	bl	8026998 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8022886:	69bb      	ldr	r3, [r7, #24]
 8022888:	685b      	ldr	r3, [r3, #4]
 802288a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 802288c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 802288e:	4618      	mov	r0, r3
 8022890:	f7f4 fb70 	bl	8016f74 <lwip_htons>
 8022894:	4603      	mov	r3, r0
 8022896:	461a      	mov	r2, r3
 8022898:	697b      	ldr	r3, [r7, #20]
 802289a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 802289c:	68fb      	ldr	r3, [r7, #12]
 802289e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80228a2:	2b06      	cmp	r3, #6
 80228a4:	d006      	beq.n	80228b4 <etharp_raw+0x84>
 80228a6:	4b23      	ldr	r3, [pc, #140]	; (8022934 <etharp_raw+0x104>)
 80228a8:	f240 426a 	movw	r2, #1130	; 0x46a
 80228ac:	4925      	ldr	r1, [pc, #148]	; (8022944 <etharp_raw+0x114>)
 80228ae:	4823      	ldr	r0, [pc, #140]	; (802293c <etharp_raw+0x10c>)
 80228b0:	f004 f872 	bl	8026998 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80228b4:	697b      	ldr	r3, [r7, #20]
 80228b6:	3308      	adds	r3, #8
 80228b8:	2206      	movs	r2, #6
 80228ba:	6839      	ldr	r1, [r7, #0]
 80228bc:	4618      	mov	r0, r3
 80228be:	f003 ffb0 	bl	8026822 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80228c2:	697b      	ldr	r3, [r7, #20]
 80228c4:	3312      	adds	r3, #18
 80228c6:	2206      	movs	r2, #6
 80228c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80228ca:	4618      	mov	r0, r3
 80228cc:	f003 ffa9 	bl	8026822 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80228d0:	697b      	ldr	r3, [r7, #20]
 80228d2:	330e      	adds	r3, #14
 80228d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80228d6:	6812      	ldr	r2, [r2, #0]
 80228d8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80228da:	697b      	ldr	r3, [r7, #20]
 80228dc:	3318      	adds	r3, #24
 80228de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80228e0:	6812      	ldr	r2, [r2, #0]
 80228e2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80228e4:	697b      	ldr	r3, [r7, #20]
 80228e6:	2200      	movs	r2, #0
 80228e8:	701a      	strb	r2, [r3, #0]
 80228ea:	2200      	movs	r2, #0
 80228ec:	f042 0201 	orr.w	r2, r2, #1
 80228f0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80228f2:	697b      	ldr	r3, [r7, #20]
 80228f4:	2200      	movs	r2, #0
 80228f6:	f042 0208 	orr.w	r2, r2, #8
 80228fa:	709a      	strb	r2, [r3, #2]
 80228fc:	2200      	movs	r2, #0
 80228fe:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8022900:	697b      	ldr	r3, [r7, #20]
 8022902:	2206      	movs	r2, #6
 8022904:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8022906:	697b      	ldr	r3, [r7, #20]
 8022908:	2204      	movs	r2, #4
 802290a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 802290c:	f640 0306 	movw	r3, #2054	; 0x806
 8022910:	9300      	str	r3, [sp, #0]
 8022912:	687b      	ldr	r3, [r7, #4]
 8022914:	68ba      	ldr	r2, [r7, #8]
 8022916:	69b9      	ldr	r1, [r7, #24]
 8022918:	68f8      	ldr	r0, [r7, #12]
 802291a:	f001 fc19 	bl	8024150 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 802291e:	69b8      	ldr	r0, [r7, #24]
 8022920:	f7f5 ff4c 	bl	80187bc <pbuf_free>
  p = NULL;
 8022924:	2300      	movs	r3, #0
 8022926:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8022928:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 802292c:	4618      	mov	r0, r3
 802292e:	3720      	adds	r7, #32
 8022930:	46bd      	mov	sp, r7
 8022932:	bd80      	pop	{r7, pc}
 8022934:	0802b304 	.word	0x0802b304
 8022938:	0802b454 	.word	0x0802b454
 802293c:	0802b37c 	.word	0x0802b37c
 8022940:	0802b504 	.word	0x0802b504
 8022944:	0802b538 	.word	0x0802b538

08022948 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8022948:	b580      	push	{r7, lr}
 802294a:	b088      	sub	sp, #32
 802294c:	af04      	add	r7, sp, #16
 802294e:	60f8      	str	r0, [r7, #12]
 8022950:	60b9      	str	r1, [r7, #8]
 8022952:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8022954:	68fb      	ldr	r3, [r7, #12]
 8022956:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 802295a:	68fb      	ldr	r3, [r7, #12]
 802295c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8022960:	68fb      	ldr	r3, [r7, #12]
 8022962:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8022964:	2201      	movs	r2, #1
 8022966:	9203      	str	r2, [sp, #12]
 8022968:	68ba      	ldr	r2, [r7, #8]
 802296a:	9202      	str	r2, [sp, #8]
 802296c:	4a06      	ldr	r2, [pc, #24]	; (8022988 <etharp_request_dst+0x40>)
 802296e:	9201      	str	r2, [sp, #4]
 8022970:	9300      	str	r3, [sp, #0]
 8022972:	4603      	mov	r3, r0
 8022974:	687a      	ldr	r2, [r7, #4]
 8022976:	68f8      	ldr	r0, [r7, #12]
 8022978:	f7ff ff5a 	bl	8022830 <etharp_raw>
 802297c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 802297e:	4618      	mov	r0, r3
 8022980:	3710      	adds	r7, #16
 8022982:	46bd      	mov	sp, r7
 8022984:	bd80      	pop	{r7, pc}
 8022986:	bf00      	nop
 8022988:	0802bde8 	.word	0x0802bde8

0802298c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 802298c:	b580      	push	{r7, lr}
 802298e:	b082      	sub	sp, #8
 8022990:	af00      	add	r7, sp, #0
 8022992:	6078      	str	r0, [r7, #4]
 8022994:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8022996:	4a05      	ldr	r2, [pc, #20]	; (80229ac <etharp_request+0x20>)
 8022998:	6839      	ldr	r1, [r7, #0]
 802299a:	6878      	ldr	r0, [r7, #4]
 802299c:	f7ff ffd4 	bl	8022948 <etharp_request_dst>
 80229a0:	4603      	mov	r3, r0
}
 80229a2:	4618      	mov	r0, r3
 80229a4:	3708      	adds	r7, #8
 80229a6:	46bd      	mov	sp, r7
 80229a8:	bd80      	pop	{r7, pc}
 80229aa:	bf00      	nop
 80229ac:	0802bde0 	.word	0x0802bde0

080229b0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80229b0:	b580      	push	{r7, lr}
 80229b2:	b08e      	sub	sp, #56	; 0x38
 80229b4:	af04      	add	r7, sp, #16
 80229b6:	6078      	str	r0, [r7, #4]
 80229b8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80229ba:	4b7e      	ldr	r3, [pc, #504]	; (8022bb4 <icmp_input+0x204>)
 80229bc:	689b      	ldr	r3, [r3, #8]
 80229be:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80229c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80229c2:	781b      	ldrb	r3, [r3, #0]
 80229c4:	f003 030f 	and.w	r3, r3, #15
 80229c8:	b2db      	uxtb	r3, r3
 80229ca:	009b      	lsls	r3, r3, #2
 80229cc:	b2db      	uxtb	r3, r3
 80229ce:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80229d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80229d2:	2b13      	cmp	r3, #19
 80229d4:	f240 80d6 	bls.w	8022b84 <icmp_input+0x1d4>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80229d8:	687b      	ldr	r3, [r7, #4]
 80229da:	895b      	ldrh	r3, [r3, #10]
 80229dc:	2b03      	cmp	r3, #3
 80229de:	f240 80d3 	bls.w	8022b88 <icmp_input+0x1d8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80229e2:	687b      	ldr	r3, [r7, #4]
 80229e4:	685b      	ldr	r3, [r3, #4]
 80229e6:	781b      	ldrb	r3, [r3, #0]
 80229e8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80229ec:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80229f0:	2b00      	cmp	r3, #0
 80229f2:	f000 80c0 	beq.w	8022b76 <icmp_input+0x1c6>
 80229f6:	2b08      	cmp	r3, #8
 80229f8:	f040 80c0 	bne.w	8022b7c <icmp_input+0x1cc>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80229fc:	4b6e      	ldr	r3, [pc, #440]	; (8022bb8 <icmp_input+0x208>)
 80229fe:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8022a00:	4b6c      	ldr	r3, [pc, #432]	; (8022bb4 <icmp_input+0x204>)
 8022a02:	695b      	ldr	r3, [r3, #20]
 8022a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022a08:	2be0      	cmp	r3, #224	; 0xe0
 8022a0a:	f000 80c4 	beq.w	8022b96 <icmp_input+0x1e6>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8022a0e:	4b69      	ldr	r3, [pc, #420]	; (8022bb4 <icmp_input+0x204>)
 8022a10:	695a      	ldr	r2, [r3, #20]
 8022a12:	4b68      	ldr	r3, [pc, #416]	; (8022bb4 <icmp_input+0x204>)
 8022a14:	681b      	ldr	r3, [r3, #0]
 8022a16:	4619      	mov	r1, r3
 8022a18:	4610      	mov	r0, r2
 8022a1a:	f000 fc85 	bl	8023328 <ip4_addr_isbroadcast_u32>
 8022a1e:	4603      	mov	r3, r0
 8022a20:	2b00      	cmp	r3, #0
 8022a22:	f040 80ba 	bne.w	8022b9a <icmp_input+0x1ea>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8022a26:	687b      	ldr	r3, [r7, #4]
 8022a28:	891b      	ldrh	r3, [r3, #8]
 8022a2a:	2b07      	cmp	r3, #7
 8022a2c:	f240 80ae 	bls.w	8022b8c <icmp_input+0x1dc>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8022a30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022a32:	330e      	adds	r3, #14
 8022a34:	4619      	mov	r1, r3
 8022a36:	6878      	ldr	r0, [r7, #4]
 8022a38:	f7f5 fdf8 	bl	801862c <pbuf_add_header>
 8022a3c:	4603      	mov	r3, r0
 8022a3e:	2b00      	cmp	r3, #0
 8022a40:	d04b      	beq.n	8022ada <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8022a42:	687b      	ldr	r3, [r7, #4]
 8022a44:	891a      	ldrh	r2, [r3, #8]
 8022a46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022a48:	4413      	add	r3, r2
 8022a4a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8022a4c:	687b      	ldr	r3, [r7, #4]
 8022a4e:	891b      	ldrh	r3, [r3, #8]
 8022a50:	8b7a      	ldrh	r2, [r7, #26]
 8022a52:	429a      	cmp	r2, r3
 8022a54:	f0c0 80a3 	bcc.w	8022b9e <icmp_input+0x1ee>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8022a58:	8b7b      	ldrh	r3, [r7, #26]
 8022a5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022a5e:	4619      	mov	r1, r3
 8022a60:	200e      	movs	r0, #14
 8022a62:	f7f5 fb99 	bl	8018198 <pbuf_alloc>
 8022a66:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8022a68:	697b      	ldr	r3, [r7, #20]
 8022a6a:	2b00      	cmp	r3, #0
 8022a6c:	f000 8099 	beq.w	8022ba2 <icmp_input+0x1f2>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8022a70:	697b      	ldr	r3, [r7, #20]
 8022a72:	895b      	ldrh	r3, [r3, #10]
 8022a74:	461a      	mov	r2, r3
 8022a76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022a78:	3308      	adds	r3, #8
 8022a7a:	429a      	cmp	r2, r3
 8022a7c:	d203      	bcs.n	8022a86 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8022a7e:	6978      	ldr	r0, [r7, #20]
 8022a80:	f7f5 fe9c 	bl	80187bc <pbuf_free>
          goto icmperr;
 8022a84:	e08e      	b.n	8022ba4 <icmp_input+0x1f4>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8022a86:	697b      	ldr	r3, [r7, #20]
 8022a88:	685b      	ldr	r3, [r3, #4]
 8022a8a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8022a8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8022a8e:	4618      	mov	r0, r3
 8022a90:	f003 fec7 	bl	8026822 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8022a94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022a96:	4619      	mov	r1, r3
 8022a98:	6978      	ldr	r0, [r7, #20]
 8022a9a:	f7f5 fdd7 	bl	801864c <pbuf_remove_header>
 8022a9e:	4603      	mov	r3, r0
 8022aa0:	2b00      	cmp	r3, #0
 8022aa2:	d009      	beq.n	8022ab8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8022aa4:	4b45      	ldr	r3, [pc, #276]	; (8022bbc <icmp_input+0x20c>)
 8022aa6:	22b6      	movs	r2, #182	; 0xb6
 8022aa8:	4945      	ldr	r1, [pc, #276]	; (8022bc0 <icmp_input+0x210>)
 8022aaa:	4846      	ldr	r0, [pc, #280]	; (8022bc4 <icmp_input+0x214>)
 8022aac:	f003 ff74 	bl	8026998 <iprintf>
          pbuf_free(r);
 8022ab0:	6978      	ldr	r0, [r7, #20]
 8022ab2:	f7f5 fe83 	bl	80187bc <pbuf_free>
          goto icmperr;
 8022ab6:	e075      	b.n	8022ba4 <icmp_input+0x1f4>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8022ab8:	6879      	ldr	r1, [r7, #4]
 8022aba:	6978      	ldr	r0, [r7, #20]
 8022abc:	f7f5 ffb2 	bl	8018a24 <pbuf_copy>
 8022ac0:	4603      	mov	r3, r0
 8022ac2:	2b00      	cmp	r3, #0
 8022ac4:	d003      	beq.n	8022ace <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8022ac6:	6978      	ldr	r0, [r7, #20]
 8022ac8:	f7f5 fe78 	bl	80187bc <pbuf_free>
          goto icmperr;
 8022acc:	e06a      	b.n	8022ba4 <icmp_input+0x1f4>
        }
        /* free the original p */
        pbuf_free(p);
 8022ace:	6878      	ldr	r0, [r7, #4]
 8022ad0:	f7f5 fe74 	bl	80187bc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8022ad4:	697b      	ldr	r3, [r7, #20]
 8022ad6:	607b      	str	r3, [r7, #4]
 8022ad8:	e00f      	b.n	8022afa <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8022ada:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022adc:	330e      	adds	r3, #14
 8022ade:	4619      	mov	r1, r3
 8022ae0:	6878      	ldr	r0, [r7, #4]
 8022ae2:	f7f5 fdb3 	bl	801864c <pbuf_remove_header>
 8022ae6:	4603      	mov	r3, r0
 8022ae8:	2b00      	cmp	r3, #0
 8022aea:	d006      	beq.n	8022afa <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8022aec:	4b33      	ldr	r3, [pc, #204]	; (8022bbc <icmp_input+0x20c>)
 8022aee:	22c7      	movs	r2, #199	; 0xc7
 8022af0:	4935      	ldr	r1, [pc, #212]	; (8022bc8 <icmp_input+0x218>)
 8022af2:	4834      	ldr	r0, [pc, #208]	; (8022bc4 <icmp_input+0x214>)
 8022af4:	f003 ff50 	bl	8026998 <iprintf>
          goto icmperr;
 8022af8:	e054      	b.n	8022ba4 <icmp_input+0x1f4>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8022afa:	687b      	ldr	r3, [r7, #4]
 8022afc:	685b      	ldr	r3, [r3, #4]
 8022afe:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8022b00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022b02:	4619      	mov	r1, r3
 8022b04:	6878      	ldr	r0, [r7, #4]
 8022b06:	f7f5 fd91 	bl	801862c <pbuf_add_header>
 8022b0a:	4603      	mov	r3, r0
 8022b0c:	2b00      	cmp	r3, #0
 8022b0e:	d134      	bne.n	8022b7a <icmp_input+0x1ca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8022b10:	687b      	ldr	r3, [r7, #4]
 8022b12:	685b      	ldr	r3, [r3, #4]
 8022b14:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8022b16:	69fb      	ldr	r3, [r7, #28]
 8022b18:	681a      	ldr	r2, [r3, #0]
 8022b1a:	68fb      	ldr	r3, [r7, #12]
 8022b1c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8022b1e:	4b25      	ldr	r3, [pc, #148]	; (8022bb4 <icmp_input+0x204>)
 8022b20:	691a      	ldr	r2, [r3, #16]
 8022b22:	68fb      	ldr	r3, [r7, #12]
 8022b24:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8022b26:	693b      	ldr	r3, [r7, #16]
 8022b28:	2200      	movs	r2, #0
 8022b2a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8022b2c:	693b      	ldr	r3, [r7, #16]
 8022b2e:	2200      	movs	r2, #0
 8022b30:	709a      	strb	r2, [r3, #2]
 8022b32:	2200      	movs	r2, #0
 8022b34:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8022b36:	68fb      	ldr	r3, [r7, #12]
 8022b38:	22ff      	movs	r2, #255	; 0xff
 8022b3a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8022b3c:	68fb      	ldr	r3, [r7, #12]
 8022b3e:	2200      	movs	r2, #0
 8022b40:	729a      	strb	r2, [r3, #10]
 8022b42:	2200      	movs	r2, #0
 8022b44:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8022b46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022b48:	4619      	mov	r1, r3
 8022b4a:	68f8      	ldr	r0, [r7, #12]
 8022b4c:	f7f4 fa9d 	bl	801708a <inet_chksum>
 8022b50:	4603      	mov	r3, r0
 8022b52:	461a      	mov	r2, r3
 8022b54:	68fb      	ldr	r3, [r7, #12]
 8022b56:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8022b58:	683b      	ldr	r3, [r7, #0]
 8022b5a:	9302      	str	r3, [sp, #8]
 8022b5c:	2301      	movs	r3, #1
 8022b5e:	9301      	str	r3, [sp, #4]
 8022b60:	2300      	movs	r3, #0
 8022b62:	9300      	str	r3, [sp, #0]
 8022b64:	23ff      	movs	r3, #255	; 0xff
 8022b66:	2200      	movs	r2, #0
 8022b68:	69f9      	ldr	r1, [r7, #28]
 8022b6a:	6878      	ldr	r0, [r7, #4]
 8022b6c:	f000 fa9e 	bl	80230ac <ip4_output_if>
 8022b70:	4603      	mov	r3, r0
 8022b72:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8022b74:	e001      	b.n	8022b7a <icmp_input+0x1ca>
      break;
 8022b76:	bf00      	nop
 8022b78:	e000      	b.n	8022b7c <icmp_input+0x1cc>
      break;
 8022b7a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8022b7c:	6878      	ldr	r0, [r7, #4]
 8022b7e:	f7f5 fe1d 	bl	80187bc <pbuf_free>
  return;
 8022b82:	e013      	b.n	8022bac <icmp_input+0x1fc>
    goto lenerr;
 8022b84:	bf00      	nop
 8022b86:	e002      	b.n	8022b8e <icmp_input+0x1de>
    goto lenerr;
 8022b88:	bf00      	nop
 8022b8a:	e000      	b.n	8022b8e <icmp_input+0x1de>
        goto lenerr;
 8022b8c:	bf00      	nop
lenerr:
  pbuf_free(p);
 8022b8e:	6878      	ldr	r0, [r7, #4]
 8022b90:	f7f5 fe14 	bl	80187bc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8022b94:	e00a      	b.n	8022bac <icmp_input+0x1fc>
        goto icmperr;
 8022b96:	bf00      	nop
 8022b98:	e004      	b.n	8022ba4 <icmp_input+0x1f4>
        goto icmperr;
 8022b9a:	bf00      	nop
 8022b9c:	e002      	b.n	8022ba4 <icmp_input+0x1f4>
          goto icmperr;
 8022b9e:	bf00      	nop
 8022ba0:	e000      	b.n	8022ba4 <icmp_input+0x1f4>
          goto icmperr;
 8022ba2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8022ba4:	6878      	ldr	r0, [r7, #4]
 8022ba6:	f7f5 fe09 	bl	80187bc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8022baa:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8022bac:	3728      	adds	r7, #40	; 0x28
 8022bae:	46bd      	mov	sp, r7
 8022bb0:	bd80      	pop	{r7, pc}
 8022bb2:	bf00      	nop
 8022bb4:	20016b40 	.word	0x20016b40
 8022bb8:	20016b54 	.word	0x20016b54
 8022bbc:	0802b57c 	.word	0x0802b57c
 8022bc0:	0802b5b4 	.word	0x0802b5b4
 8022bc4:	0802b5ec 	.word	0x0802b5ec
 8022bc8:	0802b614 	.word	0x0802b614

08022bcc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8022bcc:	b580      	push	{r7, lr}
 8022bce:	b082      	sub	sp, #8
 8022bd0:	af00      	add	r7, sp, #0
 8022bd2:	6078      	str	r0, [r7, #4]
 8022bd4:	460b      	mov	r3, r1
 8022bd6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8022bd8:	78fb      	ldrb	r3, [r7, #3]
 8022bda:	461a      	mov	r2, r3
 8022bdc:	2103      	movs	r1, #3
 8022bde:	6878      	ldr	r0, [r7, #4]
 8022be0:	f000 f814 	bl	8022c0c <icmp_send_response>
}
 8022be4:	bf00      	nop
 8022be6:	3708      	adds	r7, #8
 8022be8:	46bd      	mov	sp, r7
 8022bea:	bd80      	pop	{r7, pc}

08022bec <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8022bec:	b580      	push	{r7, lr}
 8022bee:	b082      	sub	sp, #8
 8022bf0:	af00      	add	r7, sp, #0
 8022bf2:	6078      	str	r0, [r7, #4]
 8022bf4:	460b      	mov	r3, r1
 8022bf6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8022bf8:	78fb      	ldrb	r3, [r7, #3]
 8022bfa:	461a      	mov	r2, r3
 8022bfc:	210b      	movs	r1, #11
 8022bfe:	6878      	ldr	r0, [r7, #4]
 8022c00:	f000 f804 	bl	8022c0c <icmp_send_response>
}
 8022c04:	bf00      	nop
 8022c06:	3708      	adds	r7, #8
 8022c08:	46bd      	mov	sp, r7
 8022c0a:	bd80      	pop	{r7, pc}

08022c0c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8022c0c:	b580      	push	{r7, lr}
 8022c0e:	b08c      	sub	sp, #48	; 0x30
 8022c10:	af04      	add	r7, sp, #16
 8022c12:	6078      	str	r0, [r7, #4]
 8022c14:	460b      	mov	r3, r1
 8022c16:	70fb      	strb	r3, [r7, #3]
 8022c18:	4613      	mov	r3, r2
 8022c1a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8022c1c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022c20:	2124      	movs	r1, #36	; 0x24
 8022c22:	2022      	movs	r0, #34	; 0x22
 8022c24:	f7f5 fab8 	bl	8018198 <pbuf_alloc>
 8022c28:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8022c2a:	69fb      	ldr	r3, [r7, #28]
 8022c2c:	2b00      	cmp	r3, #0
 8022c2e:	d04c      	beq.n	8022cca <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8022c30:	69fb      	ldr	r3, [r7, #28]
 8022c32:	895b      	ldrh	r3, [r3, #10]
 8022c34:	2b23      	cmp	r3, #35	; 0x23
 8022c36:	d806      	bhi.n	8022c46 <icmp_send_response+0x3a>
 8022c38:	4b26      	ldr	r3, [pc, #152]	; (8022cd4 <icmp_send_response+0xc8>)
 8022c3a:	f240 1269 	movw	r2, #361	; 0x169
 8022c3e:	4926      	ldr	r1, [pc, #152]	; (8022cd8 <icmp_send_response+0xcc>)
 8022c40:	4826      	ldr	r0, [pc, #152]	; (8022cdc <icmp_send_response+0xd0>)
 8022c42:	f003 fea9 	bl	8026998 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8022c46:	687b      	ldr	r3, [r7, #4]
 8022c48:	685b      	ldr	r3, [r3, #4]
 8022c4a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8022c4c:	69fb      	ldr	r3, [r7, #28]
 8022c4e:	685b      	ldr	r3, [r3, #4]
 8022c50:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8022c52:	697b      	ldr	r3, [r7, #20]
 8022c54:	78fa      	ldrb	r2, [r7, #3]
 8022c56:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8022c58:	697b      	ldr	r3, [r7, #20]
 8022c5a:	78ba      	ldrb	r2, [r7, #2]
 8022c5c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8022c5e:	697b      	ldr	r3, [r7, #20]
 8022c60:	2200      	movs	r2, #0
 8022c62:	711a      	strb	r2, [r3, #4]
 8022c64:	2200      	movs	r2, #0
 8022c66:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8022c68:	697b      	ldr	r3, [r7, #20]
 8022c6a:	2200      	movs	r2, #0
 8022c6c:	719a      	strb	r2, [r3, #6]
 8022c6e:	2200      	movs	r2, #0
 8022c70:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8022c72:	69fb      	ldr	r3, [r7, #28]
 8022c74:	685b      	ldr	r3, [r3, #4]
 8022c76:	f103 0008 	add.w	r0, r3, #8
 8022c7a:	687b      	ldr	r3, [r7, #4]
 8022c7c:	685b      	ldr	r3, [r3, #4]
 8022c7e:	221c      	movs	r2, #28
 8022c80:	4619      	mov	r1, r3
 8022c82:	f003 fdce 	bl	8026822 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8022c86:	69bb      	ldr	r3, [r7, #24]
 8022c88:	68db      	ldr	r3, [r3, #12]
 8022c8a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8022c8c:	f107 030c 	add.w	r3, r7, #12
 8022c90:	4618      	mov	r0, r3
 8022c92:	f000 f825 	bl	8022ce0 <ip4_route>
 8022c96:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8022c98:	693b      	ldr	r3, [r7, #16]
 8022c9a:	2b00      	cmp	r3, #0
 8022c9c:	d011      	beq.n	8022cc2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8022c9e:	697b      	ldr	r3, [r7, #20]
 8022ca0:	2200      	movs	r2, #0
 8022ca2:	709a      	strb	r2, [r3, #2]
 8022ca4:	2200      	movs	r2, #0
 8022ca6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8022ca8:	f107 020c 	add.w	r2, r7, #12
 8022cac:	693b      	ldr	r3, [r7, #16]
 8022cae:	9302      	str	r3, [sp, #8]
 8022cb0:	2301      	movs	r3, #1
 8022cb2:	9301      	str	r3, [sp, #4]
 8022cb4:	2300      	movs	r3, #0
 8022cb6:	9300      	str	r3, [sp, #0]
 8022cb8:	23ff      	movs	r3, #255	; 0xff
 8022cba:	2100      	movs	r1, #0
 8022cbc:	69f8      	ldr	r0, [r7, #28]
 8022cbe:	f000 f9f5 	bl	80230ac <ip4_output_if>
  }
  pbuf_free(q);
 8022cc2:	69f8      	ldr	r0, [r7, #28]
 8022cc4:	f7f5 fd7a 	bl	80187bc <pbuf_free>
 8022cc8:	e000      	b.n	8022ccc <icmp_send_response+0xc0>
    return;
 8022cca:	bf00      	nop
}
 8022ccc:	3720      	adds	r7, #32
 8022cce:	46bd      	mov	sp, r7
 8022cd0:	bd80      	pop	{r7, pc}
 8022cd2:	bf00      	nop
 8022cd4:	0802b57c 	.word	0x0802b57c
 8022cd8:	0802b648 	.word	0x0802b648
 8022cdc:	0802b5ec 	.word	0x0802b5ec

08022ce0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8022ce0:	b480      	push	{r7}
 8022ce2:	b085      	sub	sp, #20
 8022ce4:	af00      	add	r7, sp, #0
 8022ce6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8022ce8:	4b33      	ldr	r3, [pc, #204]	; (8022db8 <ip4_route+0xd8>)
 8022cea:	681b      	ldr	r3, [r3, #0]
 8022cec:	60fb      	str	r3, [r7, #12]
 8022cee:	e036      	b.n	8022d5e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8022cf0:	68fb      	ldr	r3, [r7, #12]
 8022cf2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8022cf6:	f003 0301 	and.w	r3, r3, #1
 8022cfa:	b2db      	uxtb	r3, r3
 8022cfc:	2b00      	cmp	r3, #0
 8022cfe:	d02b      	beq.n	8022d58 <ip4_route+0x78>
 8022d00:	68fb      	ldr	r3, [r7, #12]
 8022d02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8022d06:	089b      	lsrs	r3, r3, #2
 8022d08:	f003 0301 	and.w	r3, r3, #1
 8022d0c:	b2db      	uxtb	r3, r3
 8022d0e:	2b00      	cmp	r3, #0
 8022d10:	d022      	beq.n	8022d58 <ip4_route+0x78>
 8022d12:	68fb      	ldr	r3, [r7, #12]
 8022d14:	3304      	adds	r3, #4
 8022d16:	681b      	ldr	r3, [r3, #0]
 8022d18:	2b00      	cmp	r3, #0
 8022d1a:	d01d      	beq.n	8022d58 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8022d1c:	687b      	ldr	r3, [r7, #4]
 8022d1e:	681a      	ldr	r2, [r3, #0]
 8022d20:	68fb      	ldr	r3, [r7, #12]
 8022d22:	3304      	adds	r3, #4
 8022d24:	681b      	ldr	r3, [r3, #0]
 8022d26:	405a      	eors	r2, r3
 8022d28:	68fb      	ldr	r3, [r7, #12]
 8022d2a:	3308      	adds	r3, #8
 8022d2c:	681b      	ldr	r3, [r3, #0]
 8022d2e:	4013      	ands	r3, r2
 8022d30:	2b00      	cmp	r3, #0
 8022d32:	d101      	bne.n	8022d38 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8022d34:	68fb      	ldr	r3, [r7, #12]
 8022d36:	e038      	b.n	8022daa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8022d38:	68fb      	ldr	r3, [r7, #12]
 8022d3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8022d3e:	f003 0302 	and.w	r3, r3, #2
 8022d42:	2b00      	cmp	r3, #0
 8022d44:	d108      	bne.n	8022d58 <ip4_route+0x78>
 8022d46:	687b      	ldr	r3, [r7, #4]
 8022d48:	681a      	ldr	r2, [r3, #0]
 8022d4a:	68fb      	ldr	r3, [r7, #12]
 8022d4c:	330c      	adds	r3, #12
 8022d4e:	681b      	ldr	r3, [r3, #0]
 8022d50:	429a      	cmp	r2, r3
 8022d52:	d101      	bne.n	8022d58 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8022d54:	68fb      	ldr	r3, [r7, #12]
 8022d56:	e028      	b.n	8022daa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8022d58:	68fb      	ldr	r3, [r7, #12]
 8022d5a:	681b      	ldr	r3, [r3, #0]
 8022d5c:	60fb      	str	r3, [r7, #12]
 8022d5e:	68fb      	ldr	r3, [r7, #12]
 8022d60:	2b00      	cmp	r3, #0
 8022d62:	d1c5      	bne.n	8022cf0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8022d64:	4b15      	ldr	r3, [pc, #84]	; (8022dbc <ip4_route+0xdc>)
 8022d66:	681b      	ldr	r3, [r3, #0]
 8022d68:	2b00      	cmp	r3, #0
 8022d6a:	d01a      	beq.n	8022da2 <ip4_route+0xc2>
 8022d6c:	4b13      	ldr	r3, [pc, #76]	; (8022dbc <ip4_route+0xdc>)
 8022d6e:	681b      	ldr	r3, [r3, #0]
 8022d70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8022d74:	f003 0301 	and.w	r3, r3, #1
 8022d78:	2b00      	cmp	r3, #0
 8022d7a:	d012      	beq.n	8022da2 <ip4_route+0xc2>
 8022d7c:	4b0f      	ldr	r3, [pc, #60]	; (8022dbc <ip4_route+0xdc>)
 8022d7e:	681b      	ldr	r3, [r3, #0]
 8022d80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8022d84:	f003 0304 	and.w	r3, r3, #4
 8022d88:	2b00      	cmp	r3, #0
 8022d8a:	d00a      	beq.n	8022da2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8022d8c:	4b0b      	ldr	r3, [pc, #44]	; (8022dbc <ip4_route+0xdc>)
 8022d8e:	681b      	ldr	r3, [r3, #0]
 8022d90:	3304      	adds	r3, #4
 8022d92:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8022d94:	2b00      	cmp	r3, #0
 8022d96:	d004      	beq.n	8022da2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8022d98:	687b      	ldr	r3, [r7, #4]
 8022d9a:	681b      	ldr	r3, [r3, #0]
 8022d9c:	b2db      	uxtb	r3, r3
 8022d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8022da0:	d101      	bne.n	8022da6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8022da2:	2300      	movs	r3, #0
 8022da4:	e001      	b.n	8022daa <ip4_route+0xca>
  }

  return netif_default;
 8022da6:	4b05      	ldr	r3, [pc, #20]	; (8022dbc <ip4_route+0xdc>)
 8022da8:	681b      	ldr	r3, [r3, #0]
}
 8022daa:	4618      	mov	r0, r3
 8022dac:	3714      	adds	r7, #20
 8022dae:	46bd      	mov	sp, r7
 8022db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022db4:	4770      	bx	lr
 8022db6:	bf00      	nop
 8022db8:	20019fe4 	.word	0x20019fe4
 8022dbc:	20019fe8 	.word	0x20019fe8

08022dc0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8022dc0:	b580      	push	{r7, lr}
 8022dc2:	b082      	sub	sp, #8
 8022dc4:	af00      	add	r7, sp, #0
 8022dc6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8022dc8:	687b      	ldr	r3, [r7, #4]
 8022dca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8022dce:	f003 0301 	and.w	r3, r3, #1
 8022dd2:	b2db      	uxtb	r3, r3
 8022dd4:	2b00      	cmp	r3, #0
 8022dd6:	d016      	beq.n	8022e06 <ip4_input_accept+0x46>
 8022dd8:	687b      	ldr	r3, [r7, #4]
 8022dda:	3304      	adds	r3, #4
 8022ddc:	681b      	ldr	r3, [r3, #0]
 8022dde:	2b00      	cmp	r3, #0
 8022de0:	d011      	beq.n	8022e06 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022de2:	4b0b      	ldr	r3, [pc, #44]	; (8022e10 <ip4_input_accept+0x50>)
 8022de4:	695a      	ldr	r2, [r3, #20]
 8022de6:	687b      	ldr	r3, [r7, #4]
 8022de8:	3304      	adds	r3, #4
 8022dea:	681b      	ldr	r3, [r3, #0]
 8022dec:	429a      	cmp	r2, r3
 8022dee:	d008      	beq.n	8022e02 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8022df0:	4b07      	ldr	r3, [pc, #28]	; (8022e10 <ip4_input_accept+0x50>)
 8022df2:	695b      	ldr	r3, [r3, #20]
 8022df4:	6879      	ldr	r1, [r7, #4]
 8022df6:	4618      	mov	r0, r3
 8022df8:	f000 fa96 	bl	8023328 <ip4_addr_isbroadcast_u32>
 8022dfc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022dfe:	2b00      	cmp	r3, #0
 8022e00:	d001      	beq.n	8022e06 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8022e02:	2301      	movs	r3, #1
 8022e04:	e000      	b.n	8022e08 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8022e06:	2300      	movs	r3, #0
}
 8022e08:	4618      	mov	r0, r3
 8022e0a:	3708      	adds	r7, #8
 8022e0c:	46bd      	mov	sp, r7
 8022e0e:	bd80      	pop	{r7, pc}
 8022e10:	20016b40 	.word	0x20016b40

08022e14 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8022e14:	b580      	push	{r7, lr}
 8022e16:	b088      	sub	sp, #32
 8022e18:	af00      	add	r7, sp, #0
 8022e1a:	6078      	str	r0, [r7, #4]
 8022e1c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8022e1e:	2301      	movs	r3, #1
 8022e20:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8022e22:	687b      	ldr	r3, [r7, #4]
 8022e24:	685b      	ldr	r3, [r3, #4]
 8022e26:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8022e28:	69fb      	ldr	r3, [r7, #28]
 8022e2a:	781b      	ldrb	r3, [r3, #0]
 8022e2c:	091b      	lsrs	r3, r3, #4
 8022e2e:	b2db      	uxtb	r3, r3
 8022e30:	2b04      	cmp	r3, #4
 8022e32:	d004      	beq.n	8022e3e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8022e34:	6878      	ldr	r0, [r7, #4]
 8022e36:	f7f5 fcc1 	bl	80187bc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8022e3a:	2300      	movs	r3, #0
 8022e3c:	e12e      	b.n	802309c <ip4_input+0x288>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8022e3e:	69fb      	ldr	r3, [r7, #28]
 8022e40:	781b      	ldrb	r3, [r3, #0]
 8022e42:	f003 030f 	and.w	r3, r3, #15
 8022e46:	b2db      	uxtb	r3, r3
 8022e48:	009b      	lsls	r3, r3, #2
 8022e4a:	b2db      	uxtb	r3, r3
 8022e4c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8022e4e:	69fb      	ldr	r3, [r7, #28]
 8022e50:	885b      	ldrh	r3, [r3, #2]
 8022e52:	b29b      	uxth	r3, r3
 8022e54:	4618      	mov	r0, r3
 8022e56:	f7f4 f88d 	bl	8016f74 <lwip_htons>
 8022e5a:	4603      	mov	r3, r0
 8022e5c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8022e5e:	687b      	ldr	r3, [r7, #4]
 8022e60:	891b      	ldrh	r3, [r3, #8]
 8022e62:	8a3a      	ldrh	r2, [r7, #16]
 8022e64:	429a      	cmp	r2, r3
 8022e66:	d204      	bcs.n	8022e72 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8022e68:	8a3b      	ldrh	r3, [r7, #16]
 8022e6a:	4619      	mov	r1, r3
 8022e6c:	6878      	ldr	r0, [r7, #4]
 8022e6e:	f7f5 faed 	bl	801844c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8022e72:	687b      	ldr	r3, [r7, #4]
 8022e74:	895b      	ldrh	r3, [r3, #10]
 8022e76:	8a7a      	ldrh	r2, [r7, #18]
 8022e78:	429a      	cmp	r2, r3
 8022e7a:	d807      	bhi.n	8022e8c <ip4_input+0x78>
 8022e7c:	687b      	ldr	r3, [r7, #4]
 8022e7e:	891b      	ldrh	r3, [r3, #8]
 8022e80:	8a3a      	ldrh	r2, [r7, #16]
 8022e82:	429a      	cmp	r2, r3
 8022e84:	d802      	bhi.n	8022e8c <ip4_input+0x78>
 8022e86:	8a7b      	ldrh	r3, [r7, #18]
 8022e88:	2b13      	cmp	r3, #19
 8022e8a:	d804      	bhi.n	8022e96 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8022e8c:	6878      	ldr	r0, [r7, #4]
 8022e8e:	f7f5 fc95 	bl	80187bc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8022e92:	2300      	movs	r3, #0
 8022e94:	e102      	b.n	802309c <ip4_input+0x288>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 8022e96:	8a7b      	ldrh	r3, [r7, #18]
 8022e98:	4619      	mov	r1, r3
 8022e9a:	69f8      	ldr	r0, [r7, #28]
 8022e9c:	f7f4 f8f5 	bl	801708a <inet_chksum>
 8022ea0:	4603      	mov	r3, r0
 8022ea2:	2b00      	cmp	r3, #0
 8022ea4:	d004      	beq.n	8022eb0 <ip4_input+0x9c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 8022ea6:	6878      	ldr	r0, [r7, #4]
 8022ea8:	f7f5 fc88 	bl	80187bc <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8022eac:	2300      	movs	r3, #0
 8022eae:	e0f5      	b.n	802309c <ip4_input+0x288>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8022eb0:	69fb      	ldr	r3, [r7, #28]
 8022eb2:	691b      	ldr	r3, [r3, #16]
 8022eb4:	4a7b      	ldr	r2, [pc, #492]	; (80230a4 <ip4_input+0x290>)
 8022eb6:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8022eb8:	69fb      	ldr	r3, [r7, #28]
 8022eba:	68db      	ldr	r3, [r3, #12]
 8022ebc:	4a79      	ldr	r2, [pc, #484]	; (80230a4 <ip4_input+0x290>)
 8022ebe:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8022ec0:	4b78      	ldr	r3, [pc, #480]	; (80230a4 <ip4_input+0x290>)
 8022ec2:	695b      	ldr	r3, [r3, #20]
 8022ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022ec8:	2be0      	cmp	r3, #224	; 0xe0
 8022eca:	d112      	bne.n	8022ef2 <ip4_input+0xde>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8022ecc:	683b      	ldr	r3, [r7, #0]
 8022ece:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8022ed2:	f003 0301 	and.w	r3, r3, #1
 8022ed6:	b2db      	uxtb	r3, r3
 8022ed8:	2b00      	cmp	r3, #0
 8022eda:	d007      	beq.n	8022eec <ip4_input+0xd8>
 8022edc:	683b      	ldr	r3, [r7, #0]
 8022ede:	3304      	adds	r3, #4
 8022ee0:	681b      	ldr	r3, [r3, #0]
 8022ee2:	2b00      	cmp	r3, #0
 8022ee4:	d002      	beq.n	8022eec <ip4_input+0xd8>
      netif = inp;
 8022ee6:	683b      	ldr	r3, [r7, #0]
 8022ee8:	61bb      	str	r3, [r7, #24]
 8022eea:	e02a      	b.n	8022f42 <ip4_input+0x12e>
    } else {
      netif = NULL;
 8022eec:	2300      	movs	r3, #0
 8022eee:	61bb      	str	r3, [r7, #24]
 8022ef0:	e027      	b.n	8022f42 <ip4_input+0x12e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8022ef2:	6838      	ldr	r0, [r7, #0]
 8022ef4:	f7ff ff64 	bl	8022dc0 <ip4_input_accept>
 8022ef8:	4603      	mov	r3, r0
 8022efa:	2b00      	cmp	r3, #0
 8022efc:	d002      	beq.n	8022f04 <ip4_input+0xf0>
      netif = inp;
 8022efe:	683b      	ldr	r3, [r7, #0]
 8022f00:	61bb      	str	r3, [r7, #24]
 8022f02:	e01e      	b.n	8022f42 <ip4_input+0x12e>
    } else {
      netif = NULL;
 8022f04:	2300      	movs	r3, #0
 8022f06:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8022f08:	4b66      	ldr	r3, [pc, #408]	; (80230a4 <ip4_input+0x290>)
 8022f0a:	695b      	ldr	r3, [r3, #20]
 8022f0c:	b2db      	uxtb	r3, r3
 8022f0e:	2b7f      	cmp	r3, #127	; 0x7f
 8022f10:	d017      	beq.n	8022f42 <ip4_input+0x12e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8022f12:	4b65      	ldr	r3, [pc, #404]	; (80230a8 <ip4_input+0x294>)
 8022f14:	681b      	ldr	r3, [r3, #0]
 8022f16:	61bb      	str	r3, [r7, #24]
 8022f18:	e00e      	b.n	8022f38 <ip4_input+0x124>
          if (netif == inp) {
 8022f1a:	69ba      	ldr	r2, [r7, #24]
 8022f1c:	683b      	ldr	r3, [r7, #0]
 8022f1e:	429a      	cmp	r2, r3
 8022f20:	d006      	beq.n	8022f30 <ip4_input+0x11c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8022f22:	69b8      	ldr	r0, [r7, #24]
 8022f24:	f7ff ff4c 	bl	8022dc0 <ip4_input_accept>
 8022f28:	4603      	mov	r3, r0
 8022f2a:	2b00      	cmp	r3, #0
 8022f2c:	d108      	bne.n	8022f40 <ip4_input+0x12c>
 8022f2e:	e000      	b.n	8022f32 <ip4_input+0x11e>
            continue;
 8022f30:	bf00      	nop
        NETIF_FOREACH(netif) {
 8022f32:	69bb      	ldr	r3, [r7, #24]
 8022f34:	681b      	ldr	r3, [r3, #0]
 8022f36:	61bb      	str	r3, [r7, #24]
 8022f38:	69bb      	ldr	r3, [r7, #24]
 8022f3a:	2b00      	cmp	r3, #0
 8022f3c:	d1ed      	bne.n	8022f1a <ip4_input+0x106>
 8022f3e:	e000      	b.n	8022f42 <ip4_input+0x12e>
            break;
 8022f40:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8022f42:	69bb      	ldr	r3, [r7, #24]
 8022f44:	2b00      	cmp	r3, #0
 8022f46:	d111      	bne.n	8022f6c <ip4_input+0x158>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8022f48:	69fb      	ldr	r3, [r7, #28]
 8022f4a:	7a5b      	ldrb	r3, [r3, #9]
 8022f4c:	2b11      	cmp	r3, #17
 8022f4e:	d10d      	bne.n	8022f6c <ip4_input+0x158>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8022f50:	8a7b      	ldrh	r3, [r7, #18]
 8022f52:	69fa      	ldr	r2, [r7, #28]
 8022f54:	4413      	add	r3, r2
 8022f56:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8022f58:	68fb      	ldr	r3, [r7, #12]
 8022f5a:	885b      	ldrh	r3, [r3, #2]
 8022f5c:	b29b      	uxth	r3, r3
 8022f5e:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8022f62:	d103      	bne.n	8022f6c <ip4_input+0x158>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8022f64:	683b      	ldr	r3, [r7, #0]
 8022f66:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8022f68:	2300      	movs	r3, #0
 8022f6a:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8022f6c:	697b      	ldr	r3, [r7, #20]
 8022f6e:	2b00      	cmp	r3, #0
 8022f70:	d017      	beq.n	8022fa2 <ip4_input+0x18e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8022f72:	4b4c      	ldr	r3, [pc, #304]	; (80230a4 <ip4_input+0x290>)
 8022f74:	691b      	ldr	r3, [r3, #16]
 8022f76:	2b00      	cmp	r3, #0
 8022f78:	d013      	beq.n	8022fa2 <ip4_input+0x18e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8022f7a:	4b4a      	ldr	r3, [pc, #296]	; (80230a4 <ip4_input+0x290>)
 8022f7c:	691b      	ldr	r3, [r3, #16]
 8022f7e:	6839      	ldr	r1, [r7, #0]
 8022f80:	4618      	mov	r0, r3
 8022f82:	f000 f9d1 	bl	8023328 <ip4_addr_isbroadcast_u32>
 8022f86:	4603      	mov	r3, r0
 8022f88:	2b00      	cmp	r3, #0
 8022f8a:	d105      	bne.n	8022f98 <ip4_input+0x184>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8022f8c:	4b45      	ldr	r3, [pc, #276]	; (80230a4 <ip4_input+0x290>)
 8022f8e:	691b      	ldr	r3, [r3, #16]
 8022f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8022f94:	2be0      	cmp	r3, #224	; 0xe0
 8022f96:	d104      	bne.n	8022fa2 <ip4_input+0x18e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8022f98:	6878      	ldr	r0, [r7, #4]
 8022f9a:	f7f5 fc0f 	bl	80187bc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8022f9e:	2300      	movs	r3, #0
 8022fa0:	e07c      	b.n	802309c <ip4_input+0x288>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8022fa2:	69bb      	ldr	r3, [r7, #24]
 8022fa4:	2b00      	cmp	r3, #0
 8022fa6:	d104      	bne.n	8022fb2 <ip4_input+0x19e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8022fa8:	6878      	ldr	r0, [r7, #4]
 8022faa:	f7f5 fc07 	bl	80187bc <pbuf_free>
    return ERR_OK;
 8022fae:	2300      	movs	r3, #0
 8022fb0:	e074      	b.n	802309c <ip4_input+0x288>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8022fb2:	69fb      	ldr	r3, [r7, #28]
 8022fb4:	88db      	ldrh	r3, [r3, #6]
 8022fb6:	b29b      	uxth	r3, r3
 8022fb8:	461a      	mov	r2, r3
 8022fba:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8022fbe:	4013      	ands	r3, r2
 8022fc0:	2b00      	cmp	r3, #0
 8022fc2:	d00b      	beq.n	8022fdc <ip4_input+0x1c8>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8022fc4:	6878      	ldr	r0, [r7, #4]
 8022fc6:	f000 fcf5 	bl	80239b4 <ip4_reass>
 8022fca:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8022fcc:	687b      	ldr	r3, [r7, #4]
 8022fce:	2b00      	cmp	r3, #0
 8022fd0:	d101      	bne.n	8022fd6 <ip4_input+0x1c2>
      return ERR_OK;
 8022fd2:	2300      	movs	r3, #0
 8022fd4:	e062      	b.n	802309c <ip4_input+0x288>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8022fd6:	687b      	ldr	r3, [r7, #4]
 8022fd8:	685b      	ldr	r3, [r3, #4]
 8022fda:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8022fdc:	4a31      	ldr	r2, [pc, #196]	; (80230a4 <ip4_input+0x290>)
 8022fde:	69bb      	ldr	r3, [r7, #24]
 8022fe0:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8022fe2:	4a30      	ldr	r2, [pc, #192]	; (80230a4 <ip4_input+0x290>)
 8022fe4:	683b      	ldr	r3, [r7, #0]
 8022fe6:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8022fe8:	4a2e      	ldr	r2, [pc, #184]	; (80230a4 <ip4_input+0x290>)
 8022fea:	69fb      	ldr	r3, [r7, #28]
 8022fec:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8022fee:	69fb      	ldr	r3, [r7, #28]
 8022ff0:	781b      	ldrb	r3, [r3, #0]
 8022ff2:	f003 030f 	and.w	r3, r3, #15
 8022ff6:	b2db      	uxtb	r3, r3
 8022ff8:	009b      	lsls	r3, r3, #2
 8022ffa:	b2db      	uxtb	r3, r3
 8022ffc:	b29a      	uxth	r2, r3
 8022ffe:	4b29      	ldr	r3, [pc, #164]	; (80230a4 <ip4_input+0x290>)
 8023000:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8023002:	8a7b      	ldrh	r3, [r7, #18]
 8023004:	4619      	mov	r1, r3
 8023006:	6878      	ldr	r0, [r7, #4]
 8023008:	f7f5 fb20 	bl	801864c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 802300c:	69fb      	ldr	r3, [r7, #28]
 802300e:	7a5b      	ldrb	r3, [r3, #9]
 8023010:	2b06      	cmp	r3, #6
 8023012:	d009      	beq.n	8023028 <ip4_input+0x214>
 8023014:	2b11      	cmp	r3, #17
 8023016:	d002      	beq.n	802301e <ip4_input+0x20a>
 8023018:	2b01      	cmp	r3, #1
 802301a:	d00a      	beq.n	8023032 <ip4_input+0x21e>
 802301c:	e00e      	b.n	802303c <ip4_input+0x228>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 802301e:	6839      	ldr	r1, [r7, #0]
 8023020:	6878      	ldr	r0, [r7, #4]
 8023022:	f7fc fa35 	bl	801f490 <udp_input>
        break;
 8023026:	e026      	b.n	8023076 <ip4_input+0x262>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8023028:	6839      	ldr	r1, [r7, #0]
 802302a:	6878      	ldr	r0, [r7, #4]
 802302c:	f7f7 fde6 	bl	801abfc <tcp_input>
        break;
 8023030:	e021      	b.n	8023076 <ip4_input+0x262>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8023032:	6839      	ldr	r1, [r7, #0]
 8023034:	6878      	ldr	r0, [r7, #4]
 8023036:	f7ff fcbb 	bl	80229b0 <icmp_input>
        break;
 802303a:	e01c      	b.n	8023076 <ip4_input+0x262>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 802303c:	4b19      	ldr	r3, [pc, #100]	; (80230a4 <ip4_input+0x290>)
 802303e:	695b      	ldr	r3, [r3, #20]
 8023040:	69b9      	ldr	r1, [r7, #24]
 8023042:	4618      	mov	r0, r3
 8023044:	f000 f970 	bl	8023328 <ip4_addr_isbroadcast_u32>
 8023048:	4603      	mov	r3, r0
 802304a:	2b00      	cmp	r3, #0
 802304c:	d10f      	bne.n	802306e <ip4_input+0x25a>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802304e:	4b15      	ldr	r3, [pc, #84]	; (80230a4 <ip4_input+0x290>)
 8023050:	695b      	ldr	r3, [r3, #20]
 8023052:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8023056:	2be0      	cmp	r3, #224	; 0xe0
 8023058:	d009      	beq.n	802306e <ip4_input+0x25a>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 802305a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802305e:	4619      	mov	r1, r3
 8023060:	6878      	ldr	r0, [r7, #4]
 8023062:	f7f5 fb66 	bl	8018732 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8023066:	2102      	movs	r1, #2
 8023068:	6878      	ldr	r0, [r7, #4]
 802306a:	f7ff fdaf 	bl	8022bcc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 802306e:	6878      	ldr	r0, [r7, #4]
 8023070:	f7f5 fba4 	bl	80187bc <pbuf_free>
        break;
 8023074:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8023076:	4b0b      	ldr	r3, [pc, #44]	; (80230a4 <ip4_input+0x290>)
 8023078:	2200      	movs	r2, #0
 802307a:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 802307c:	4b09      	ldr	r3, [pc, #36]	; (80230a4 <ip4_input+0x290>)
 802307e:	2200      	movs	r2, #0
 8023080:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8023082:	4b08      	ldr	r3, [pc, #32]	; (80230a4 <ip4_input+0x290>)
 8023084:	2200      	movs	r2, #0
 8023086:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8023088:	4b06      	ldr	r3, [pc, #24]	; (80230a4 <ip4_input+0x290>)
 802308a:	2200      	movs	r2, #0
 802308c:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 802308e:	4b05      	ldr	r3, [pc, #20]	; (80230a4 <ip4_input+0x290>)
 8023090:	2200      	movs	r2, #0
 8023092:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8023094:	4b03      	ldr	r3, [pc, #12]	; (80230a4 <ip4_input+0x290>)
 8023096:	2200      	movs	r2, #0
 8023098:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 802309a:	2300      	movs	r3, #0
}
 802309c:	4618      	mov	r0, r3
 802309e:	3720      	adds	r7, #32
 80230a0:	46bd      	mov	sp, r7
 80230a2:	bd80      	pop	{r7, pc}
 80230a4:	20016b40 	.word	0x20016b40
 80230a8:	20019fe4 	.word	0x20019fe4

080230ac <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80230ac:	b580      	push	{r7, lr}
 80230ae:	b08a      	sub	sp, #40	; 0x28
 80230b0:	af04      	add	r7, sp, #16
 80230b2:	60f8      	str	r0, [r7, #12]
 80230b4:	60b9      	str	r1, [r7, #8]
 80230b6:	607a      	str	r2, [r7, #4]
 80230b8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80230ba:	68bb      	ldr	r3, [r7, #8]
 80230bc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80230be:	687b      	ldr	r3, [r7, #4]
 80230c0:	2b00      	cmp	r3, #0
 80230c2:	d009      	beq.n	80230d8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80230c4:	68bb      	ldr	r3, [r7, #8]
 80230c6:	2b00      	cmp	r3, #0
 80230c8:	d003      	beq.n	80230d2 <ip4_output_if+0x26>
 80230ca:	68bb      	ldr	r3, [r7, #8]
 80230cc:	681b      	ldr	r3, [r3, #0]
 80230ce:	2b00      	cmp	r3, #0
 80230d0:	d102      	bne.n	80230d8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80230d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80230d4:	3304      	adds	r3, #4
 80230d6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80230d8:	78fa      	ldrb	r2, [r7, #3]
 80230da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80230dc:	9302      	str	r3, [sp, #8]
 80230de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80230e2:	9301      	str	r3, [sp, #4]
 80230e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80230e8:	9300      	str	r3, [sp, #0]
 80230ea:	4613      	mov	r3, r2
 80230ec:	687a      	ldr	r2, [r7, #4]
 80230ee:	6979      	ldr	r1, [r7, #20]
 80230f0:	68f8      	ldr	r0, [r7, #12]
 80230f2:	f000 f805 	bl	8023100 <ip4_output_if_src>
 80230f6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80230f8:	4618      	mov	r0, r3
 80230fa:	3718      	adds	r7, #24
 80230fc:	46bd      	mov	sp, r7
 80230fe:	bd80      	pop	{r7, pc}

08023100 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8023100:	b580      	push	{r7, lr}
 8023102:	b088      	sub	sp, #32
 8023104:	af00      	add	r7, sp, #0
 8023106:	60f8      	str	r0, [r7, #12]
 8023108:	60b9      	str	r1, [r7, #8]
 802310a:	607a      	str	r2, [r7, #4]
 802310c:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 802310e:	2300      	movs	r3, #0
 8023110:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8023112:	68fb      	ldr	r3, [r7, #12]
 8023114:	7b9b      	ldrb	r3, [r3, #14]
 8023116:	2b01      	cmp	r3, #1
 8023118:	d006      	beq.n	8023128 <ip4_output_if_src+0x28>
 802311a:	4b7d      	ldr	r3, [pc, #500]	; (8023310 <ip4_output_if_src+0x210>)
 802311c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8023120:	497c      	ldr	r1, [pc, #496]	; (8023314 <ip4_output_if_src+0x214>)
 8023122:	487d      	ldr	r0, [pc, #500]	; (8023318 <ip4_output_if_src+0x218>)
 8023124:	f003 fc38 	bl	8026998 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8023128:	687b      	ldr	r3, [r7, #4]
 802312a:	2b00      	cmp	r3, #0
 802312c:	f000 80c4 	beq.w	80232b8 <ip4_output_if_src+0x1b8>
    u16_t ip_hlen = IP_HLEN;
 8023130:	2314      	movs	r3, #20
 8023132:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8023134:	2114      	movs	r1, #20
 8023136:	68f8      	ldr	r0, [r7, #12]
 8023138:	f7f5 fa78 	bl	801862c <pbuf_add_header>
 802313c:	4603      	mov	r3, r0
 802313e:	2b00      	cmp	r3, #0
 8023140:	d002      	beq.n	8023148 <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8023142:	f06f 0301 	mvn.w	r3, #1
 8023146:	e0df      	b.n	8023308 <ip4_output_if_src+0x208>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8023148:	68fb      	ldr	r3, [r7, #12]
 802314a:	685b      	ldr	r3, [r3, #4]
 802314c:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 802314e:	68fb      	ldr	r3, [r7, #12]
 8023150:	895b      	ldrh	r3, [r3, #10]
 8023152:	2b13      	cmp	r3, #19
 8023154:	d806      	bhi.n	8023164 <ip4_output_if_src+0x64>
 8023156:	4b6e      	ldr	r3, [pc, #440]	; (8023310 <ip4_output_if_src+0x210>)
 8023158:	f240 3289 	movw	r2, #905	; 0x389
 802315c:	496f      	ldr	r1, [pc, #444]	; (802331c <ip4_output_if_src+0x21c>)
 802315e:	486e      	ldr	r0, [pc, #440]	; (8023318 <ip4_output_if_src+0x218>)
 8023160:	f003 fc1a 	bl	8026998 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8023164:	69bb      	ldr	r3, [r7, #24]
 8023166:	78fa      	ldrb	r2, [r7, #3]
 8023168:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 802316a:	69bb      	ldr	r3, [r7, #24]
 802316c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8023170:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8023172:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8023176:	78fb      	ldrb	r3, [r7, #3]
 8023178:	021b      	lsls	r3, r3, #8
 802317a:	4313      	orrs	r3, r2
 802317c:	021b      	lsls	r3, r3, #8
 802317e:	b21a      	sxth	r2, r3
 8023180:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8023184:	78fb      	ldrb	r3, [r7, #3]
 8023186:	021b      	lsls	r3, r3, #8
 8023188:	430b      	orrs	r3, r1
 802318a:	121b      	asrs	r3, r3, #8
 802318c:	b21b      	sxth	r3, r3
 802318e:	b2db      	uxtb	r3, r3
 8023190:	b21b      	sxth	r3, r3
 8023192:	4313      	orrs	r3, r2
 8023194:	b21b      	sxth	r3, r3
 8023196:	b29b      	uxth	r3, r3
 8023198:	461a      	mov	r2, r3
 802319a:	69fb      	ldr	r3, [r7, #28]
 802319c:	4413      	add	r3, r2
 802319e:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80231a0:	687b      	ldr	r3, [r7, #4]
 80231a2:	681a      	ldr	r2, [r3, #0]
 80231a4:	69bb      	ldr	r3, [r7, #24]
 80231a6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 80231a8:	69bb      	ldr	r3, [r7, #24]
 80231aa:	691b      	ldr	r3, [r3, #16]
 80231ac:	b29b      	uxth	r3, r3
 80231ae:	69fa      	ldr	r2, [r7, #28]
 80231b0:	4413      	add	r3, r2
 80231b2:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 80231b4:	69bb      	ldr	r3, [r7, #24]
 80231b6:	691b      	ldr	r3, [r3, #16]
 80231b8:	0c1b      	lsrs	r3, r3, #16
 80231ba:	69fa      	ldr	r2, [r7, #28]
 80231bc:	4413      	add	r3, r2
 80231be:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80231c0:	8afb      	ldrh	r3, [r7, #22]
 80231c2:	089b      	lsrs	r3, r3, #2
 80231c4:	b29b      	uxth	r3, r3
 80231c6:	b2db      	uxtb	r3, r3
 80231c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80231cc:	b2da      	uxtb	r2, r3
 80231ce:	69bb      	ldr	r3, [r7, #24]
 80231d0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80231d2:	69bb      	ldr	r3, [r7, #24]
 80231d4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80231d8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 80231da:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80231de:	69bb      	ldr	r3, [r7, #24]
 80231e0:	781b      	ldrb	r3, [r3, #0]
 80231e2:	021b      	lsls	r3, r3, #8
 80231e4:	4313      	orrs	r3, r2
 80231e6:	021b      	lsls	r3, r3, #8
 80231e8:	b21a      	sxth	r2, r3
 80231ea:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80231ee:	69bb      	ldr	r3, [r7, #24]
 80231f0:	781b      	ldrb	r3, [r3, #0]
 80231f2:	021b      	lsls	r3, r3, #8
 80231f4:	430b      	orrs	r3, r1
 80231f6:	121b      	asrs	r3, r3, #8
 80231f8:	b21b      	sxth	r3, r3
 80231fa:	b2db      	uxtb	r3, r3
 80231fc:	b21b      	sxth	r3, r3
 80231fe:	4313      	orrs	r3, r2
 8023200:	b21b      	sxth	r3, r3
 8023202:	b29b      	uxth	r3, r3
 8023204:	461a      	mov	r2, r3
 8023206:	69fb      	ldr	r3, [r7, #28]
 8023208:	4413      	add	r3, r2
 802320a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 802320c:	68fb      	ldr	r3, [r7, #12]
 802320e:	891b      	ldrh	r3, [r3, #8]
 8023210:	4618      	mov	r0, r3
 8023212:	f7f3 feaf 	bl	8016f74 <lwip_htons>
 8023216:	4603      	mov	r3, r0
 8023218:	461a      	mov	r2, r3
 802321a:	69bb      	ldr	r3, [r7, #24]
 802321c:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 802321e:	69bb      	ldr	r3, [r7, #24]
 8023220:	885b      	ldrh	r3, [r3, #2]
 8023222:	b29b      	uxth	r3, r3
 8023224:	461a      	mov	r2, r3
 8023226:	69fb      	ldr	r3, [r7, #28]
 8023228:	4413      	add	r3, r2
 802322a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 802322c:	69bb      	ldr	r3, [r7, #24]
 802322e:	2200      	movs	r2, #0
 8023230:	719a      	strb	r2, [r3, #6]
 8023232:	2200      	movs	r2, #0
 8023234:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8023236:	4b3a      	ldr	r3, [pc, #232]	; (8023320 <ip4_output_if_src+0x220>)
 8023238:	881b      	ldrh	r3, [r3, #0]
 802323a:	4618      	mov	r0, r3
 802323c:	f7f3 fe9a 	bl	8016f74 <lwip_htons>
 8023240:	4603      	mov	r3, r0
 8023242:	461a      	mov	r2, r3
 8023244:	69bb      	ldr	r3, [r7, #24]
 8023246:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8023248:	69bb      	ldr	r3, [r7, #24]
 802324a:	889b      	ldrh	r3, [r3, #4]
 802324c:	b29b      	uxth	r3, r3
 802324e:	461a      	mov	r2, r3
 8023250:	69fb      	ldr	r3, [r7, #28]
 8023252:	4413      	add	r3, r2
 8023254:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8023256:	4b32      	ldr	r3, [pc, #200]	; (8023320 <ip4_output_if_src+0x220>)
 8023258:	881b      	ldrh	r3, [r3, #0]
 802325a:	3301      	adds	r3, #1
 802325c:	b29a      	uxth	r2, r3
 802325e:	4b30      	ldr	r3, [pc, #192]	; (8023320 <ip4_output_if_src+0x220>)
 8023260:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8023262:	68bb      	ldr	r3, [r7, #8]
 8023264:	2b00      	cmp	r3, #0
 8023266:	d104      	bne.n	8023272 <ip4_output_if_src+0x172>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8023268:	4b2e      	ldr	r3, [pc, #184]	; (8023324 <ip4_output_if_src+0x224>)
 802326a:	681a      	ldr	r2, [r3, #0]
 802326c:	69bb      	ldr	r3, [r7, #24]
 802326e:	60da      	str	r2, [r3, #12]
 8023270:	e003      	b.n	802327a <ip4_output_if_src+0x17a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8023272:	68bb      	ldr	r3, [r7, #8]
 8023274:	681a      	ldr	r2, [r3, #0]
 8023276:	69bb      	ldr	r3, [r7, #24]
 8023278:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 802327a:	69bb      	ldr	r3, [r7, #24]
 802327c:	68db      	ldr	r3, [r3, #12]
 802327e:	b29b      	uxth	r3, r3
 8023280:	69fa      	ldr	r2, [r7, #28]
 8023282:	4413      	add	r3, r2
 8023284:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8023286:	69bb      	ldr	r3, [r7, #24]
 8023288:	68db      	ldr	r3, [r3, #12]
 802328a:	0c1b      	lsrs	r3, r3, #16
 802328c:	69fa      	ldr	r2, [r7, #28]
 802328e:	4413      	add	r3, r2
 8023290:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8023292:	69fb      	ldr	r3, [r7, #28]
 8023294:	0c1a      	lsrs	r2, r3, #16
 8023296:	69fb      	ldr	r3, [r7, #28]
 8023298:	b29b      	uxth	r3, r3
 802329a:	4413      	add	r3, r2
 802329c:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 802329e:	69fb      	ldr	r3, [r7, #28]
 80232a0:	0c1b      	lsrs	r3, r3, #16
 80232a2:	69fa      	ldr	r2, [r7, #28]
 80232a4:	4413      	add	r3, r2
 80232a6:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 80232a8:	69fb      	ldr	r3, [r7, #28]
 80232aa:	43db      	mvns	r3, r3
 80232ac:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 80232ae:	69fb      	ldr	r3, [r7, #28]
 80232b0:	b29a      	uxth	r2, r3
 80232b2:	69bb      	ldr	r3, [r7, #24]
 80232b4:	815a      	strh	r2, [r3, #10]
 80232b6:	e00f      	b.n	80232d8 <ip4_output_if_src+0x1d8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80232b8:	68fb      	ldr	r3, [r7, #12]
 80232ba:	895b      	ldrh	r3, [r3, #10]
 80232bc:	2b13      	cmp	r3, #19
 80232be:	d802      	bhi.n	80232c6 <ip4_output_if_src+0x1c6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80232c0:	f06f 0301 	mvn.w	r3, #1
 80232c4:	e020      	b.n	8023308 <ip4_output_if_src+0x208>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80232c6:	68fb      	ldr	r3, [r7, #12]
 80232c8:	685b      	ldr	r3, [r3, #4]
 80232ca:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80232cc:	69bb      	ldr	r3, [r7, #24]
 80232ce:	691b      	ldr	r3, [r3, #16]
 80232d0:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 80232d2:	f107 0310 	add.w	r3, r7, #16
 80232d6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80232d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80232da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80232dc:	2b00      	cmp	r3, #0
 80232de:	d00c      	beq.n	80232fa <ip4_output_if_src+0x1fa>
 80232e0:	68fb      	ldr	r3, [r7, #12]
 80232e2:	891a      	ldrh	r2, [r3, #8]
 80232e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80232e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80232e8:	429a      	cmp	r2, r3
 80232ea:	d906      	bls.n	80232fa <ip4_output_if_src+0x1fa>
    return ip4_frag(p, netif, dest);
 80232ec:	687a      	ldr	r2, [r7, #4]
 80232ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80232f0:	68f8      	ldr	r0, [r7, #12]
 80232f2:	f000 fd53 	bl	8023d9c <ip4_frag>
 80232f6:	4603      	mov	r3, r0
 80232f8:	e006      	b.n	8023308 <ip4_output_if_src+0x208>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80232fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80232fc:	695b      	ldr	r3, [r3, #20]
 80232fe:	687a      	ldr	r2, [r7, #4]
 8023300:	68f9      	ldr	r1, [r7, #12]
 8023302:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8023304:	4798      	blx	r3
 8023306:	4603      	mov	r3, r0
}
 8023308:	4618      	mov	r0, r3
 802330a:	3720      	adds	r7, #32
 802330c:	46bd      	mov	sp, r7
 802330e:	bd80      	pop	{r7, pc}
 8023310:	0802b674 	.word	0x0802b674
 8023314:	0802b6a8 	.word	0x0802b6a8
 8023318:	0802b6b4 	.word	0x0802b6b4
 802331c:	0802b6dc 	.word	0x0802b6dc
 8023320:	20013302 	.word	0x20013302
 8023324:	0802bdd8 	.word	0x0802bdd8

08023328 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8023328:	b480      	push	{r7}
 802332a:	b085      	sub	sp, #20
 802332c:	af00      	add	r7, sp, #0
 802332e:	6078      	str	r0, [r7, #4]
 8023330:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8023332:	687b      	ldr	r3, [r7, #4]
 8023334:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8023336:	687b      	ldr	r3, [r7, #4]
 8023338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802333c:	d002      	beq.n	8023344 <ip4_addr_isbroadcast_u32+0x1c>
 802333e:	687b      	ldr	r3, [r7, #4]
 8023340:	2b00      	cmp	r3, #0
 8023342:	d101      	bne.n	8023348 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8023344:	2301      	movs	r3, #1
 8023346:	e02a      	b.n	802339e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8023348:	683b      	ldr	r3, [r7, #0]
 802334a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802334e:	f003 0302 	and.w	r3, r3, #2
 8023352:	2b00      	cmp	r3, #0
 8023354:	d101      	bne.n	802335a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8023356:	2300      	movs	r3, #0
 8023358:	e021      	b.n	802339e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 802335a:	683b      	ldr	r3, [r7, #0]
 802335c:	3304      	adds	r3, #4
 802335e:	681b      	ldr	r3, [r3, #0]
 8023360:	687a      	ldr	r2, [r7, #4]
 8023362:	429a      	cmp	r2, r3
 8023364:	d101      	bne.n	802336a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8023366:	2300      	movs	r3, #0
 8023368:	e019      	b.n	802339e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 802336a:	68fa      	ldr	r2, [r7, #12]
 802336c:	683b      	ldr	r3, [r7, #0]
 802336e:	3304      	adds	r3, #4
 8023370:	681b      	ldr	r3, [r3, #0]
 8023372:	405a      	eors	r2, r3
 8023374:	683b      	ldr	r3, [r7, #0]
 8023376:	3308      	adds	r3, #8
 8023378:	681b      	ldr	r3, [r3, #0]
 802337a:	4013      	ands	r3, r2
 802337c:	2b00      	cmp	r3, #0
 802337e:	d10d      	bne.n	802339c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8023380:	683b      	ldr	r3, [r7, #0]
 8023382:	3308      	adds	r3, #8
 8023384:	681b      	ldr	r3, [r3, #0]
 8023386:	43da      	mvns	r2, r3
 8023388:	687b      	ldr	r3, [r7, #4]
 802338a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 802338c:	683b      	ldr	r3, [r7, #0]
 802338e:	3308      	adds	r3, #8
 8023390:	681b      	ldr	r3, [r3, #0]
 8023392:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8023394:	429a      	cmp	r2, r3
 8023396:	d101      	bne.n	802339c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8023398:	2301      	movs	r3, #1
 802339a:	e000      	b.n	802339e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 802339c:	2300      	movs	r3, #0
  }
}
 802339e:	4618      	mov	r0, r3
 80233a0:	3714      	adds	r7, #20
 80233a2:	46bd      	mov	sp, r7
 80233a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233a8:	4770      	bx	lr
	...

080233ac <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80233ac:	b580      	push	{r7, lr}
 80233ae:	b084      	sub	sp, #16
 80233b0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80233b2:	2300      	movs	r3, #0
 80233b4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80233b6:	4b12      	ldr	r3, [pc, #72]	; (8023400 <ip_reass_tmr+0x54>)
 80233b8:	681b      	ldr	r3, [r3, #0]
 80233ba:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80233bc:	e018      	b.n	80233f0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80233be:	68fb      	ldr	r3, [r7, #12]
 80233c0:	7fdb      	ldrb	r3, [r3, #31]
 80233c2:	2b00      	cmp	r3, #0
 80233c4:	d00b      	beq.n	80233de <ip_reass_tmr+0x32>
      r->timer--;
 80233c6:	68fb      	ldr	r3, [r7, #12]
 80233c8:	7fdb      	ldrb	r3, [r3, #31]
 80233ca:	3b01      	subs	r3, #1
 80233cc:	b2da      	uxtb	r2, r3
 80233ce:	68fb      	ldr	r3, [r7, #12]
 80233d0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80233d2:	68fb      	ldr	r3, [r7, #12]
 80233d4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80233d6:	68fb      	ldr	r3, [r7, #12]
 80233d8:	681b      	ldr	r3, [r3, #0]
 80233da:	60fb      	str	r3, [r7, #12]
 80233dc:	e008      	b.n	80233f0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80233de:	68fb      	ldr	r3, [r7, #12]
 80233e0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80233e2:	68fb      	ldr	r3, [r7, #12]
 80233e4:	681b      	ldr	r3, [r3, #0]
 80233e6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80233e8:	68b9      	ldr	r1, [r7, #8]
 80233ea:	6878      	ldr	r0, [r7, #4]
 80233ec:	f000 f80a 	bl	8023404 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80233f0:	68fb      	ldr	r3, [r7, #12]
 80233f2:	2b00      	cmp	r3, #0
 80233f4:	d1e3      	bne.n	80233be <ip_reass_tmr+0x12>
    }
  }
}
 80233f6:	bf00      	nop
 80233f8:	3710      	adds	r7, #16
 80233fa:	46bd      	mov	sp, r7
 80233fc:	bd80      	pop	{r7, pc}
 80233fe:	bf00      	nop
 8023400:	20013304 	.word	0x20013304

08023404 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8023404:	b580      	push	{r7, lr}
 8023406:	b088      	sub	sp, #32
 8023408:	af00      	add	r7, sp, #0
 802340a:	6078      	str	r0, [r7, #4]
 802340c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 802340e:	2300      	movs	r3, #0
 8023410:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8023412:	683a      	ldr	r2, [r7, #0]
 8023414:	687b      	ldr	r3, [r7, #4]
 8023416:	429a      	cmp	r2, r3
 8023418:	d105      	bne.n	8023426 <ip_reass_free_complete_datagram+0x22>
 802341a:	4b45      	ldr	r3, [pc, #276]	; (8023530 <ip_reass_free_complete_datagram+0x12c>)
 802341c:	22ab      	movs	r2, #171	; 0xab
 802341e:	4945      	ldr	r1, [pc, #276]	; (8023534 <ip_reass_free_complete_datagram+0x130>)
 8023420:	4845      	ldr	r0, [pc, #276]	; (8023538 <ip_reass_free_complete_datagram+0x134>)
 8023422:	f003 fab9 	bl	8026998 <iprintf>
  if (prev != NULL) {
 8023426:	683b      	ldr	r3, [r7, #0]
 8023428:	2b00      	cmp	r3, #0
 802342a:	d00a      	beq.n	8023442 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 802342c:	683b      	ldr	r3, [r7, #0]
 802342e:	681b      	ldr	r3, [r3, #0]
 8023430:	687a      	ldr	r2, [r7, #4]
 8023432:	429a      	cmp	r2, r3
 8023434:	d005      	beq.n	8023442 <ip_reass_free_complete_datagram+0x3e>
 8023436:	4b3e      	ldr	r3, [pc, #248]	; (8023530 <ip_reass_free_complete_datagram+0x12c>)
 8023438:	22ad      	movs	r2, #173	; 0xad
 802343a:	4940      	ldr	r1, [pc, #256]	; (802353c <ip_reass_free_complete_datagram+0x138>)
 802343c:	483e      	ldr	r0, [pc, #248]	; (8023538 <ip_reass_free_complete_datagram+0x134>)
 802343e:	f003 faab 	bl	8026998 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8023442:	687b      	ldr	r3, [r7, #4]
 8023444:	685b      	ldr	r3, [r3, #4]
 8023446:	685b      	ldr	r3, [r3, #4]
 8023448:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 802344a:	697b      	ldr	r3, [r7, #20]
 802344c:	889b      	ldrh	r3, [r3, #4]
 802344e:	b29b      	uxth	r3, r3
 8023450:	2b00      	cmp	r3, #0
 8023452:	d12a      	bne.n	80234aa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8023454:	687b      	ldr	r3, [r7, #4]
 8023456:	685b      	ldr	r3, [r3, #4]
 8023458:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 802345a:	697b      	ldr	r3, [r7, #20]
 802345c:	681a      	ldr	r2, [r3, #0]
 802345e:	687b      	ldr	r3, [r7, #4]
 8023460:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8023462:	69bb      	ldr	r3, [r7, #24]
 8023464:	6858      	ldr	r0, [r3, #4]
 8023466:	687b      	ldr	r3, [r7, #4]
 8023468:	3308      	adds	r3, #8
 802346a:	2214      	movs	r2, #20
 802346c:	4619      	mov	r1, r3
 802346e:	f003 f9d8 	bl	8026822 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8023472:	2101      	movs	r1, #1
 8023474:	69b8      	ldr	r0, [r7, #24]
 8023476:	f7ff fbb9 	bl	8022bec <icmp_time_exceeded>
    clen = pbuf_clen(p);
 802347a:	69b8      	ldr	r0, [r7, #24]
 802347c:	f7f5 fa2c 	bl	80188d8 <pbuf_clen>
 8023480:	4603      	mov	r3, r0
 8023482:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8023484:	8bfa      	ldrh	r2, [r7, #30]
 8023486:	8a7b      	ldrh	r3, [r7, #18]
 8023488:	4413      	add	r3, r2
 802348a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802348e:	db05      	blt.n	802349c <ip_reass_free_complete_datagram+0x98>
 8023490:	4b27      	ldr	r3, [pc, #156]	; (8023530 <ip_reass_free_complete_datagram+0x12c>)
 8023492:	22bc      	movs	r2, #188	; 0xbc
 8023494:	492a      	ldr	r1, [pc, #168]	; (8023540 <ip_reass_free_complete_datagram+0x13c>)
 8023496:	4828      	ldr	r0, [pc, #160]	; (8023538 <ip_reass_free_complete_datagram+0x134>)
 8023498:	f003 fa7e 	bl	8026998 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 802349c:	8bfa      	ldrh	r2, [r7, #30]
 802349e:	8a7b      	ldrh	r3, [r7, #18]
 80234a0:	4413      	add	r3, r2
 80234a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80234a4:	69b8      	ldr	r0, [r7, #24]
 80234a6:	f7f5 f989 	bl	80187bc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80234aa:	687b      	ldr	r3, [r7, #4]
 80234ac:	685b      	ldr	r3, [r3, #4]
 80234ae:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80234b0:	e01f      	b.n	80234f2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80234b2:	69bb      	ldr	r3, [r7, #24]
 80234b4:	685b      	ldr	r3, [r3, #4]
 80234b6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80234b8:	69bb      	ldr	r3, [r7, #24]
 80234ba:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80234bc:	697b      	ldr	r3, [r7, #20]
 80234be:	681b      	ldr	r3, [r3, #0]
 80234c0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80234c2:	68f8      	ldr	r0, [r7, #12]
 80234c4:	f7f5 fa08 	bl	80188d8 <pbuf_clen>
 80234c8:	4603      	mov	r3, r0
 80234ca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80234cc:	8bfa      	ldrh	r2, [r7, #30]
 80234ce:	8a7b      	ldrh	r3, [r7, #18]
 80234d0:	4413      	add	r3, r2
 80234d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80234d6:	db05      	blt.n	80234e4 <ip_reass_free_complete_datagram+0xe0>
 80234d8:	4b15      	ldr	r3, [pc, #84]	; (8023530 <ip_reass_free_complete_datagram+0x12c>)
 80234da:	22cc      	movs	r2, #204	; 0xcc
 80234dc:	4918      	ldr	r1, [pc, #96]	; (8023540 <ip_reass_free_complete_datagram+0x13c>)
 80234de:	4816      	ldr	r0, [pc, #88]	; (8023538 <ip_reass_free_complete_datagram+0x134>)
 80234e0:	f003 fa5a 	bl	8026998 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80234e4:	8bfa      	ldrh	r2, [r7, #30]
 80234e6:	8a7b      	ldrh	r3, [r7, #18]
 80234e8:	4413      	add	r3, r2
 80234ea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80234ec:	68f8      	ldr	r0, [r7, #12]
 80234ee:	f7f5 f965 	bl	80187bc <pbuf_free>
  while (p != NULL) {
 80234f2:	69bb      	ldr	r3, [r7, #24]
 80234f4:	2b00      	cmp	r3, #0
 80234f6:	d1dc      	bne.n	80234b2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80234f8:	6839      	ldr	r1, [r7, #0]
 80234fa:	6878      	ldr	r0, [r7, #4]
 80234fc:	f000 f8c2 	bl	8023684 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8023500:	4b10      	ldr	r3, [pc, #64]	; (8023544 <ip_reass_free_complete_datagram+0x140>)
 8023502:	881b      	ldrh	r3, [r3, #0]
 8023504:	8bfa      	ldrh	r2, [r7, #30]
 8023506:	429a      	cmp	r2, r3
 8023508:	d905      	bls.n	8023516 <ip_reass_free_complete_datagram+0x112>
 802350a:	4b09      	ldr	r3, [pc, #36]	; (8023530 <ip_reass_free_complete_datagram+0x12c>)
 802350c:	22d2      	movs	r2, #210	; 0xd2
 802350e:	490e      	ldr	r1, [pc, #56]	; (8023548 <ip_reass_free_complete_datagram+0x144>)
 8023510:	4809      	ldr	r0, [pc, #36]	; (8023538 <ip_reass_free_complete_datagram+0x134>)
 8023512:	f003 fa41 	bl	8026998 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8023516:	4b0b      	ldr	r3, [pc, #44]	; (8023544 <ip_reass_free_complete_datagram+0x140>)
 8023518:	881a      	ldrh	r2, [r3, #0]
 802351a:	8bfb      	ldrh	r3, [r7, #30]
 802351c:	1ad3      	subs	r3, r2, r3
 802351e:	b29a      	uxth	r2, r3
 8023520:	4b08      	ldr	r3, [pc, #32]	; (8023544 <ip_reass_free_complete_datagram+0x140>)
 8023522:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8023524:	8bfb      	ldrh	r3, [r7, #30]
}
 8023526:	4618      	mov	r0, r3
 8023528:	3720      	adds	r7, #32
 802352a:	46bd      	mov	sp, r7
 802352c:	bd80      	pop	{r7, pc}
 802352e:	bf00      	nop
 8023530:	0802b70c 	.word	0x0802b70c
 8023534:	0802b748 	.word	0x0802b748
 8023538:	0802b754 	.word	0x0802b754
 802353c:	0802b77c 	.word	0x0802b77c
 8023540:	0802b790 	.word	0x0802b790
 8023544:	20013308 	.word	0x20013308
 8023548:	0802b7b0 	.word	0x0802b7b0

0802354c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 802354c:	b580      	push	{r7, lr}
 802354e:	b08a      	sub	sp, #40	; 0x28
 8023550:	af00      	add	r7, sp, #0
 8023552:	6078      	str	r0, [r7, #4]
 8023554:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8023556:	2300      	movs	r3, #0
 8023558:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 802355a:	2300      	movs	r3, #0
 802355c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 802355e:	2300      	movs	r3, #0
 8023560:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8023562:	2300      	movs	r3, #0
 8023564:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8023566:	2300      	movs	r3, #0
 8023568:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 802356a:	4b28      	ldr	r3, [pc, #160]	; (802360c <ip_reass_remove_oldest_datagram+0xc0>)
 802356c:	681b      	ldr	r3, [r3, #0]
 802356e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8023570:	e030      	b.n	80235d4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8023572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023574:	695a      	ldr	r2, [r3, #20]
 8023576:	687b      	ldr	r3, [r7, #4]
 8023578:	68db      	ldr	r3, [r3, #12]
 802357a:	429a      	cmp	r2, r3
 802357c:	d10c      	bne.n	8023598 <ip_reass_remove_oldest_datagram+0x4c>
 802357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023580:	699a      	ldr	r2, [r3, #24]
 8023582:	687b      	ldr	r3, [r7, #4]
 8023584:	691b      	ldr	r3, [r3, #16]
 8023586:	429a      	cmp	r2, r3
 8023588:	d106      	bne.n	8023598 <ip_reass_remove_oldest_datagram+0x4c>
 802358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802358c:	899a      	ldrh	r2, [r3, #12]
 802358e:	687b      	ldr	r3, [r7, #4]
 8023590:	889b      	ldrh	r3, [r3, #4]
 8023592:	b29b      	uxth	r3, r3
 8023594:	429a      	cmp	r2, r3
 8023596:	d014      	beq.n	80235c2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8023598:	693b      	ldr	r3, [r7, #16]
 802359a:	3301      	adds	r3, #1
 802359c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 802359e:	6a3b      	ldr	r3, [r7, #32]
 80235a0:	2b00      	cmp	r3, #0
 80235a2:	d104      	bne.n	80235ae <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80235a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80235a6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80235a8:	69fb      	ldr	r3, [r7, #28]
 80235aa:	61bb      	str	r3, [r7, #24]
 80235ac:	e009      	b.n	80235c2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80235ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80235b0:	7fda      	ldrb	r2, [r3, #31]
 80235b2:	6a3b      	ldr	r3, [r7, #32]
 80235b4:	7fdb      	ldrb	r3, [r3, #31]
 80235b6:	429a      	cmp	r2, r3
 80235b8:	d803      	bhi.n	80235c2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80235ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80235bc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80235be:	69fb      	ldr	r3, [r7, #28]
 80235c0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80235c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80235c4:	681b      	ldr	r3, [r3, #0]
 80235c6:	2b00      	cmp	r3, #0
 80235c8:	d001      	beq.n	80235ce <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80235ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80235cc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80235ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80235d0:	681b      	ldr	r3, [r3, #0]
 80235d2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80235d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80235d6:	2b00      	cmp	r3, #0
 80235d8:	d1cb      	bne.n	8023572 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80235da:	6a3b      	ldr	r3, [r7, #32]
 80235dc:	2b00      	cmp	r3, #0
 80235de:	d008      	beq.n	80235f2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80235e0:	69b9      	ldr	r1, [r7, #24]
 80235e2:	6a38      	ldr	r0, [r7, #32]
 80235e4:	f7ff ff0e 	bl	8023404 <ip_reass_free_complete_datagram>
 80235e8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80235ea:	697a      	ldr	r2, [r7, #20]
 80235ec:	68fb      	ldr	r3, [r7, #12]
 80235ee:	4413      	add	r3, r2
 80235f0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80235f2:	697a      	ldr	r2, [r7, #20]
 80235f4:	683b      	ldr	r3, [r7, #0]
 80235f6:	429a      	cmp	r2, r3
 80235f8:	da02      	bge.n	8023600 <ip_reass_remove_oldest_datagram+0xb4>
 80235fa:	693b      	ldr	r3, [r7, #16]
 80235fc:	2b01      	cmp	r3, #1
 80235fe:	dcac      	bgt.n	802355a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8023600:	697b      	ldr	r3, [r7, #20]
}
 8023602:	4618      	mov	r0, r3
 8023604:	3728      	adds	r7, #40	; 0x28
 8023606:	46bd      	mov	sp, r7
 8023608:	bd80      	pop	{r7, pc}
 802360a:	bf00      	nop
 802360c:	20013304 	.word	0x20013304

08023610 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8023610:	b580      	push	{r7, lr}
 8023612:	b084      	sub	sp, #16
 8023614:	af00      	add	r7, sp, #0
 8023616:	6078      	str	r0, [r7, #4]
 8023618:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 802361a:	2004      	movs	r0, #4
 802361c:	f7f4 f9ce 	bl	80179bc <memp_malloc>
 8023620:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8023622:	68fb      	ldr	r3, [r7, #12]
 8023624:	2b00      	cmp	r3, #0
 8023626:	d110      	bne.n	802364a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8023628:	6839      	ldr	r1, [r7, #0]
 802362a:	6878      	ldr	r0, [r7, #4]
 802362c:	f7ff ff8e 	bl	802354c <ip_reass_remove_oldest_datagram>
 8023630:	4602      	mov	r2, r0
 8023632:	683b      	ldr	r3, [r7, #0]
 8023634:	4293      	cmp	r3, r2
 8023636:	dc03      	bgt.n	8023640 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8023638:	2004      	movs	r0, #4
 802363a:	f7f4 f9bf 	bl	80179bc <memp_malloc>
 802363e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8023640:	68fb      	ldr	r3, [r7, #12]
 8023642:	2b00      	cmp	r3, #0
 8023644:	d101      	bne.n	802364a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8023646:	2300      	movs	r3, #0
 8023648:	e016      	b.n	8023678 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 802364a:	2220      	movs	r2, #32
 802364c:	2100      	movs	r1, #0
 802364e:	68f8      	ldr	r0, [r7, #12]
 8023650:	f003 f8f2 	bl	8026838 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8023654:	68fb      	ldr	r3, [r7, #12]
 8023656:	220f      	movs	r2, #15
 8023658:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 802365a:	4b09      	ldr	r3, [pc, #36]	; (8023680 <ip_reass_enqueue_new_datagram+0x70>)
 802365c:	681a      	ldr	r2, [r3, #0]
 802365e:	68fb      	ldr	r3, [r7, #12]
 8023660:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8023662:	4a07      	ldr	r2, [pc, #28]	; (8023680 <ip_reass_enqueue_new_datagram+0x70>)
 8023664:	68fb      	ldr	r3, [r7, #12]
 8023666:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8023668:	68fb      	ldr	r3, [r7, #12]
 802366a:	3308      	adds	r3, #8
 802366c:	2214      	movs	r2, #20
 802366e:	6879      	ldr	r1, [r7, #4]
 8023670:	4618      	mov	r0, r3
 8023672:	f003 f8d6 	bl	8026822 <memcpy>
  return ipr;
 8023676:	68fb      	ldr	r3, [r7, #12]
}
 8023678:	4618      	mov	r0, r3
 802367a:	3710      	adds	r7, #16
 802367c:	46bd      	mov	sp, r7
 802367e:	bd80      	pop	{r7, pc}
 8023680:	20013304 	.word	0x20013304

08023684 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8023684:	b580      	push	{r7, lr}
 8023686:	b082      	sub	sp, #8
 8023688:	af00      	add	r7, sp, #0
 802368a:	6078      	str	r0, [r7, #4]
 802368c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 802368e:	4b10      	ldr	r3, [pc, #64]	; (80236d0 <ip_reass_dequeue_datagram+0x4c>)
 8023690:	681b      	ldr	r3, [r3, #0]
 8023692:	687a      	ldr	r2, [r7, #4]
 8023694:	429a      	cmp	r2, r3
 8023696:	d104      	bne.n	80236a2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8023698:	687b      	ldr	r3, [r7, #4]
 802369a:	681b      	ldr	r3, [r3, #0]
 802369c:	4a0c      	ldr	r2, [pc, #48]	; (80236d0 <ip_reass_dequeue_datagram+0x4c>)
 802369e:	6013      	str	r3, [r2, #0]
 80236a0:	e00d      	b.n	80236be <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80236a2:	683b      	ldr	r3, [r7, #0]
 80236a4:	2b00      	cmp	r3, #0
 80236a6:	d106      	bne.n	80236b6 <ip_reass_dequeue_datagram+0x32>
 80236a8:	4b0a      	ldr	r3, [pc, #40]	; (80236d4 <ip_reass_dequeue_datagram+0x50>)
 80236aa:	f240 1245 	movw	r2, #325	; 0x145
 80236ae:	490a      	ldr	r1, [pc, #40]	; (80236d8 <ip_reass_dequeue_datagram+0x54>)
 80236b0:	480a      	ldr	r0, [pc, #40]	; (80236dc <ip_reass_dequeue_datagram+0x58>)
 80236b2:	f003 f971 	bl	8026998 <iprintf>
    prev->next = ipr->next;
 80236b6:	687b      	ldr	r3, [r7, #4]
 80236b8:	681a      	ldr	r2, [r3, #0]
 80236ba:	683b      	ldr	r3, [r7, #0]
 80236bc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80236be:	6879      	ldr	r1, [r7, #4]
 80236c0:	2004      	movs	r0, #4
 80236c2:	f7f4 f9cd 	bl	8017a60 <memp_free>
}
 80236c6:	bf00      	nop
 80236c8:	3708      	adds	r7, #8
 80236ca:	46bd      	mov	sp, r7
 80236cc:	bd80      	pop	{r7, pc}
 80236ce:	bf00      	nop
 80236d0:	20013304 	.word	0x20013304
 80236d4:	0802b70c 	.word	0x0802b70c
 80236d8:	0802b7d4 	.word	0x0802b7d4
 80236dc:	0802b754 	.word	0x0802b754

080236e0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80236e0:	b580      	push	{r7, lr}
 80236e2:	b08c      	sub	sp, #48	; 0x30
 80236e4:	af00      	add	r7, sp, #0
 80236e6:	60f8      	str	r0, [r7, #12]
 80236e8:	60b9      	str	r1, [r7, #8]
 80236ea:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80236ec:	2300      	movs	r3, #0
 80236ee:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80236f0:	2301      	movs	r3, #1
 80236f2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80236f4:	68bb      	ldr	r3, [r7, #8]
 80236f6:	685b      	ldr	r3, [r3, #4]
 80236f8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80236fa:	69fb      	ldr	r3, [r7, #28]
 80236fc:	885b      	ldrh	r3, [r3, #2]
 80236fe:	b29b      	uxth	r3, r3
 8023700:	4618      	mov	r0, r3
 8023702:	f7f3 fc37 	bl	8016f74 <lwip_htons>
 8023706:	4603      	mov	r3, r0
 8023708:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 802370a:	69fb      	ldr	r3, [r7, #28]
 802370c:	781b      	ldrb	r3, [r3, #0]
 802370e:	f003 030f 	and.w	r3, r3, #15
 8023712:	b2db      	uxtb	r3, r3
 8023714:	009b      	lsls	r3, r3, #2
 8023716:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8023718:	7e7b      	ldrb	r3, [r7, #25]
 802371a:	b29b      	uxth	r3, r3
 802371c:	8b7a      	ldrh	r2, [r7, #26]
 802371e:	429a      	cmp	r2, r3
 8023720:	d202      	bcs.n	8023728 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023726:	e135      	b.n	8023994 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8023728:	7e7b      	ldrb	r3, [r7, #25]
 802372a:	b29b      	uxth	r3, r3
 802372c:	8b7a      	ldrh	r2, [r7, #26]
 802372e:	1ad3      	subs	r3, r2, r3
 8023730:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8023732:	69fb      	ldr	r3, [r7, #28]
 8023734:	88db      	ldrh	r3, [r3, #6]
 8023736:	b29b      	uxth	r3, r3
 8023738:	4618      	mov	r0, r3
 802373a:	f7f3 fc1b 	bl	8016f74 <lwip_htons>
 802373e:	4603      	mov	r3, r0
 8023740:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8023744:	b29b      	uxth	r3, r3
 8023746:	00db      	lsls	r3, r3, #3
 8023748:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 802374a:	68bb      	ldr	r3, [r7, #8]
 802374c:	685b      	ldr	r3, [r3, #4]
 802374e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8023750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023752:	2200      	movs	r2, #0
 8023754:	701a      	strb	r2, [r3, #0]
 8023756:	2200      	movs	r2, #0
 8023758:	705a      	strb	r2, [r3, #1]
 802375a:	2200      	movs	r2, #0
 802375c:	709a      	strb	r2, [r3, #2]
 802375e:	2200      	movs	r2, #0
 8023760:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8023762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023764:	8afa      	ldrh	r2, [r7, #22]
 8023766:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8023768:	8afa      	ldrh	r2, [r7, #22]
 802376a:	8b7b      	ldrh	r3, [r7, #26]
 802376c:	4413      	add	r3, r2
 802376e:	b29a      	uxth	r2, r3
 8023770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023772:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8023774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023776:	88db      	ldrh	r3, [r3, #6]
 8023778:	b29b      	uxth	r3, r3
 802377a:	8afa      	ldrh	r2, [r7, #22]
 802377c:	429a      	cmp	r2, r3
 802377e:	d902      	bls.n	8023786 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023784:	e106      	b.n	8023994 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8023786:	68fb      	ldr	r3, [r7, #12]
 8023788:	685b      	ldr	r3, [r3, #4]
 802378a:	627b      	str	r3, [r7, #36]	; 0x24
 802378c:	e068      	b.n	8023860 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 802378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023790:	685b      	ldr	r3, [r3, #4]
 8023792:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8023794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023796:	889b      	ldrh	r3, [r3, #4]
 8023798:	b29a      	uxth	r2, r3
 802379a:	693b      	ldr	r3, [r7, #16]
 802379c:	889b      	ldrh	r3, [r3, #4]
 802379e:	b29b      	uxth	r3, r3
 80237a0:	429a      	cmp	r2, r3
 80237a2:	d235      	bcs.n	8023810 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80237a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80237a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80237a8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80237aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80237ac:	2b00      	cmp	r3, #0
 80237ae:	d020      	beq.n	80237f2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80237b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80237b2:	889b      	ldrh	r3, [r3, #4]
 80237b4:	b29a      	uxth	r2, r3
 80237b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80237b8:	88db      	ldrh	r3, [r3, #6]
 80237ba:	b29b      	uxth	r3, r3
 80237bc:	429a      	cmp	r2, r3
 80237be:	d307      	bcc.n	80237d0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80237c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80237c2:	88db      	ldrh	r3, [r3, #6]
 80237c4:	b29a      	uxth	r2, r3
 80237c6:	693b      	ldr	r3, [r7, #16]
 80237c8:	889b      	ldrh	r3, [r3, #4]
 80237ca:	b29b      	uxth	r3, r3
 80237cc:	429a      	cmp	r2, r3
 80237ce:	d902      	bls.n	80237d6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80237d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80237d4:	e0de      	b.n	8023994 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80237d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80237d8:	68ba      	ldr	r2, [r7, #8]
 80237da:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80237dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80237de:	88db      	ldrh	r3, [r3, #6]
 80237e0:	b29a      	uxth	r2, r3
 80237e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80237e4:	889b      	ldrh	r3, [r3, #4]
 80237e6:	b29b      	uxth	r3, r3
 80237e8:	429a      	cmp	r2, r3
 80237ea:	d03d      	beq.n	8023868 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80237ec:	2300      	movs	r3, #0
 80237ee:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80237f0:	e03a      	b.n	8023868 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80237f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80237f4:	88db      	ldrh	r3, [r3, #6]
 80237f6:	b29a      	uxth	r2, r3
 80237f8:	693b      	ldr	r3, [r7, #16]
 80237fa:	889b      	ldrh	r3, [r3, #4]
 80237fc:	b29b      	uxth	r3, r3
 80237fe:	429a      	cmp	r2, r3
 8023800:	d902      	bls.n	8023808 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023806:	e0c5      	b.n	8023994 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8023808:	68fb      	ldr	r3, [r7, #12]
 802380a:	68ba      	ldr	r2, [r7, #8]
 802380c:	605a      	str	r2, [r3, #4]
      break;
 802380e:	e02b      	b.n	8023868 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8023810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023812:	889b      	ldrh	r3, [r3, #4]
 8023814:	b29a      	uxth	r2, r3
 8023816:	693b      	ldr	r3, [r7, #16]
 8023818:	889b      	ldrh	r3, [r3, #4]
 802381a:	b29b      	uxth	r3, r3
 802381c:	429a      	cmp	r2, r3
 802381e:	d102      	bne.n	8023826 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8023824:	e0b6      	b.n	8023994 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8023826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023828:	889b      	ldrh	r3, [r3, #4]
 802382a:	b29a      	uxth	r2, r3
 802382c:	693b      	ldr	r3, [r7, #16]
 802382e:	88db      	ldrh	r3, [r3, #6]
 8023830:	b29b      	uxth	r3, r3
 8023832:	429a      	cmp	r2, r3
 8023834:	d202      	bcs.n	802383c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8023836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802383a:	e0ab      	b.n	8023994 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 802383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802383e:	2b00      	cmp	r3, #0
 8023840:	d009      	beq.n	8023856 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8023842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023844:	88db      	ldrh	r3, [r3, #6]
 8023846:	b29a      	uxth	r2, r3
 8023848:	693b      	ldr	r3, [r7, #16]
 802384a:	889b      	ldrh	r3, [r3, #4]
 802384c:	b29b      	uxth	r3, r3
 802384e:	429a      	cmp	r2, r3
 8023850:	d001      	beq.n	8023856 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8023852:	2300      	movs	r3, #0
 8023854:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8023856:	693b      	ldr	r3, [r7, #16]
 8023858:	681b      	ldr	r3, [r3, #0]
 802385a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 802385c:	693b      	ldr	r3, [r7, #16]
 802385e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8023860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023862:	2b00      	cmp	r3, #0
 8023864:	d193      	bne.n	802378e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8023866:	e000      	b.n	802386a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8023868:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 802386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802386c:	2b00      	cmp	r3, #0
 802386e:	d12d      	bne.n	80238cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8023870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023872:	2b00      	cmp	r3, #0
 8023874:	d01c      	beq.n	80238b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8023876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023878:	88db      	ldrh	r3, [r3, #6]
 802387a:	b29a      	uxth	r2, r3
 802387c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802387e:	889b      	ldrh	r3, [r3, #4]
 8023880:	b29b      	uxth	r3, r3
 8023882:	429a      	cmp	r2, r3
 8023884:	d906      	bls.n	8023894 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8023886:	4b45      	ldr	r3, [pc, #276]	; (802399c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8023888:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 802388c:	4944      	ldr	r1, [pc, #272]	; (80239a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 802388e:	4845      	ldr	r0, [pc, #276]	; (80239a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8023890:	f003 f882 	bl	8026998 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8023894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023896:	68ba      	ldr	r2, [r7, #8]
 8023898:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 802389a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802389c:	88db      	ldrh	r3, [r3, #6]
 802389e:	b29a      	uxth	r2, r3
 80238a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80238a2:	889b      	ldrh	r3, [r3, #4]
 80238a4:	b29b      	uxth	r3, r3
 80238a6:	429a      	cmp	r2, r3
 80238a8:	d010      	beq.n	80238cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80238aa:	2300      	movs	r3, #0
 80238ac:	623b      	str	r3, [r7, #32]
 80238ae:	e00d      	b.n	80238cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80238b0:	68fb      	ldr	r3, [r7, #12]
 80238b2:	685b      	ldr	r3, [r3, #4]
 80238b4:	2b00      	cmp	r3, #0
 80238b6:	d006      	beq.n	80238c6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80238b8:	4b38      	ldr	r3, [pc, #224]	; (802399c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80238ba:	f240 12bf 	movw	r2, #447	; 0x1bf
 80238be:	493a      	ldr	r1, [pc, #232]	; (80239a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80238c0:	4838      	ldr	r0, [pc, #224]	; (80239a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80238c2:	f003 f869 	bl	8026998 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80238c6:	68fb      	ldr	r3, [r7, #12]
 80238c8:	68ba      	ldr	r2, [r7, #8]
 80238ca:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80238cc:	687b      	ldr	r3, [r7, #4]
 80238ce:	2b00      	cmp	r3, #0
 80238d0:	d105      	bne.n	80238de <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80238d2:	68fb      	ldr	r3, [r7, #12]
 80238d4:	7f9b      	ldrb	r3, [r3, #30]
 80238d6:	f003 0301 	and.w	r3, r3, #1
 80238da:	2b00      	cmp	r3, #0
 80238dc:	d059      	beq.n	8023992 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80238de:	6a3b      	ldr	r3, [r7, #32]
 80238e0:	2b00      	cmp	r3, #0
 80238e2:	d04f      	beq.n	8023984 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80238e4:	68fb      	ldr	r3, [r7, #12]
 80238e6:	685b      	ldr	r3, [r3, #4]
 80238e8:	2b00      	cmp	r3, #0
 80238ea:	d006      	beq.n	80238fa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80238ec:	68fb      	ldr	r3, [r7, #12]
 80238ee:	685b      	ldr	r3, [r3, #4]
 80238f0:	685b      	ldr	r3, [r3, #4]
 80238f2:	889b      	ldrh	r3, [r3, #4]
 80238f4:	b29b      	uxth	r3, r3
 80238f6:	2b00      	cmp	r3, #0
 80238f8:	d002      	beq.n	8023900 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80238fa:	2300      	movs	r3, #0
 80238fc:	623b      	str	r3, [r7, #32]
 80238fe:	e041      	b.n	8023984 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8023900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023902:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8023904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023906:	681b      	ldr	r3, [r3, #0]
 8023908:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 802390a:	e012      	b.n	8023932 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 802390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802390e:	685b      	ldr	r3, [r3, #4]
 8023910:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8023912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023914:	88db      	ldrh	r3, [r3, #6]
 8023916:	b29a      	uxth	r2, r3
 8023918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802391a:	889b      	ldrh	r3, [r3, #4]
 802391c:	b29b      	uxth	r3, r3
 802391e:	429a      	cmp	r2, r3
 8023920:	d002      	beq.n	8023928 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8023922:	2300      	movs	r3, #0
 8023924:	623b      	str	r3, [r7, #32]
            break;
 8023926:	e007      	b.n	8023938 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8023928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802392a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 802392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802392e:	681b      	ldr	r3, [r3, #0]
 8023930:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8023932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023934:	2b00      	cmp	r3, #0
 8023936:	d1e9      	bne.n	802390c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8023938:	6a3b      	ldr	r3, [r7, #32]
 802393a:	2b00      	cmp	r3, #0
 802393c:	d022      	beq.n	8023984 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 802393e:	68fb      	ldr	r3, [r7, #12]
 8023940:	685b      	ldr	r3, [r3, #4]
 8023942:	2b00      	cmp	r3, #0
 8023944:	d106      	bne.n	8023954 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8023946:	4b15      	ldr	r3, [pc, #84]	; (802399c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8023948:	f240 12df 	movw	r2, #479	; 0x1df
 802394c:	4917      	ldr	r1, [pc, #92]	; (80239ac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 802394e:	4815      	ldr	r0, [pc, #84]	; (80239a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8023950:	f003 f822 	bl	8026998 <iprintf>
          LWIP_ASSERT("sanity check",
 8023954:	68fb      	ldr	r3, [r7, #12]
 8023956:	685b      	ldr	r3, [r3, #4]
 8023958:	685b      	ldr	r3, [r3, #4]
 802395a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802395c:	429a      	cmp	r2, r3
 802395e:	d106      	bne.n	802396e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8023960:	4b0e      	ldr	r3, [pc, #56]	; (802399c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8023962:	f240 12e1 	movw	r2, #481	; 0x1e1
 8023966:	4911      	ldr	r1, [pc, #68]	; (80239ac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8023968:	480e      	ldr	r0, [pc, #56]	; (80239a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 802396a:	f003 f815 	bl	8026998 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 802396e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023970:	681b      	ldr	r3, [r3, #0]
 8023972:	2b00      	cmp	r3, #0
 8023974:	d006      	beq.n	8023984 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8023976:	4b09      	ldr	r3, [pc, #36]	; (802399c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8023978:	f240 12e3 	movw	r2, #483	; 0x1e3
 802397c:	490c      	ldr	r1, [pc, #48]	; (80239b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 802397e:	4809      	ldr	r0, [pc, #36]	; (80239a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8023980:	f003 f80a 	bl	8026998 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8023984:	6a3b      	ldr	r3, [r7, #32]
 8023986:	2b00      	cmp	r3, #0
 8023988:	bf14      	ite	ne
 802398a:	2301      	movne	r3, #1
 802398c:	2300      	moveq	r3, #0
 802398e:	b2db      	uxtb	r3, r3
 8023990:	e000      	b.n	8023994 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8023992:	2300      	movs	r3, #0
}
 8023994:	4618      	mov	r0, r3
 8023996:	3730      	adds	r7, #48	; 0x30
 8023998:	46bd      	mov	sp, r7
 802399a:	bd80      	pop	{r7, pc}
 802399c:	0802b70c 	.word	0x0802b70c
 80239a0:	0802b7f0 	.word	0x0802b7f0
 80239a4:	0802b754 	.word	0x0802b754
 80239a8:	0802b810 	.word	0x0802b810
 80239ac:	0802b848 	.word	0x0802b848
 80239b0:	0802b858 	.word	0x0802b858

080239b4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80239b4:	b580      	push	{r7, lr}
 80239b6:	b08e      	sub	sp, #56	; 0x38
 80239b8:	af00      	add	r7, sp, #0
 80239ba:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80239bc:	687b      	ldr	r3, [r7, #4]
 80239be:	685b      	ldr	r3, [r3, #4]
 80239c0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80239c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80239c4:	781b      	ldrb	r3, [r3, #0]
 80239c6:	f003 030f 	and.w	r3, r3, #15
 80239ca:	b2db      	uxtb	r3, r3
 80239cc:	009b      	lsls	r3, r3, #2
 80239ce:	b2db      	uxtb	r3, r3
 80239d0:	2b14      	cmp	r3, #20
 80239d2:	f040 816f 	bne.w	8023cb4 <ip4_reass+0x300>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80239d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80239d8:	88db      	ldrh	r3, [r3, #6]
 80239da:	b29b      	uxth	r3, r3
 80239dc:	4618      	mov	r0, r3
 80239de:	f7f3 fac9 	bl	8016f74 <lwip_htons>
 80239e2:	4603      	mov	r3, r0
 80239e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80239e8:	b29b      	uxth	r3, r3
 80239ea:	00db      	lsls	r3, r3, #3
 80239ec:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80239ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80239f0:	885b      	ldrh	r3, [r3, #2]
 80239f2:	b29b      	uxth	r3, r3
 80239f4:	4618      	mov	r0, r3
 80239f6:	f7f3 fabd 	bl	8016f74 <lwip_htons>
 80239fa:	4603      	mov	r3, r0
 80239fc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80239fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023a00:	781b      	ldrb	r3, [r3, #0]
 8023a02:	f003 030f 	and.w	r3, r3, #15
 8023a06:	b2db      	uxtb	r3, r3
 8023a08:	009b      	lsls	r3, r3, #2
 8023a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8023a0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8023a12:	b29b      	uxth	r3, r3
 8023a14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8023a16:	429a      	cmp	r2, r3
 8023a18:	f0c0 814e 	bcc.w	8023cb8 <ip4_reass+0x304>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8023a1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8023a20:	b29b      	uxth	r3, r3
 8023a22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8023a24:	1ad3      	subs	r3, r2, r3
 8023a26:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8023a28:	6878      	ldr	r0, [r7, #4]
 8023a2a:	f7f4 ff55 	bl	80188d8 <pbuf_clen>
 8023a2e:	4603      	mov	r3, r0
 8023a30:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8023a32:	4ba2      	ldr	r3, [pc, #648]	; (8023cbc <ip4_reass+0x308>)
 8023a34:	881b      	ldrh	r3, [r3, #0]
 8023a36:	461a      	mov	r2, r3
 8023a38:	8c3b      	ldrh	r3, [r7, #32]
 8023a3a:	4413      	add	r3, r2
 8023a3c:	2b0a      	cmp	r3, #10
 8023a3e:	dd10      	ble.n	8023a62 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8023a40:	8c3b      	ldrh	r3, [r7, #32]
 8023a42:	4619      	mov	r1, r3
 8023a44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8023a46:	f7ff fd81 	bl	802354c <ip_reass_remove_oldest_datagram>
 8023a4a:	4603      	mov	r3, r0
 8023a4c:	2b00      	cmp	r3, #0
 8023a4e:	f000 8143 	beq.w	8023cd8 <ip4_reass+0x324>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8023a52:	4b9a      	ldr	r3, [pc, #616]	; (8023cbc <ip4_reass+0x308>)
 8023a54:	881b      	ldrh	r3, [r3, #0]
 8023a56:	461a      	mov	r2, r3
 8023a58:	8c3b      	ldrh	r3, [r7, #32]
 8023a5a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8023a5c:	2b0a      	cmp	r3, #10
 8023a5e:	f300 813b 	bgt.w	8023cd8 <ip4_reass+0x324>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8023a62:	4b97      	ldr	r3, [pc, #604]	; (8023cc0 <ip4_reass+0x30c>)
 8023a64:	681b      	ldr	r3, [r3, #0]
 8023a66:	633b      	str	r3, [r7, #48]	; 0x30
 8023a68:	e015      	b.n	8023a96 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8023a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023a6c:	695a      	ldr	r2, [r3, #20]
 8023a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023a70:	68db      	ldr	r3, [r3, #12]
 8023a72:	429a      	cmp	r2, r3
 8023a74:	d10c      	bne.n	8023a90 <ip4_reass+0xdc>
 8023a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023a78:	699a      	ldr	r2, [r3, #24]
 8023a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023a7c:	691b      	ldr	r3, [r3, #16]
 8023a7e:	429a      	cmp	r2, r3
 8023a80:	d106      	bne.n	8023a90 <ip4_reass+0xdc>
 8023a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023a84:	899a      	ldrh	r2, [r3, #12]
 8023a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023a88:	889b      	ldrh	r3, [r3, #4]
 8023a8a:	b29b      	uxth	r3, r3
 8023a8c:	429a      	cmp	r2, r3
 8023a8e:	d006      	beq.n	8023a9e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8023a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023a92:	681b      	ldr	r3, [r3, #0]
 8023a94:	633b      	str	r3, [r7, #48]	; 0x30
 8023a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023a98:	2b00      	cmp	r3, #0
 8023a9a:	d1e6      	bne.n	8023a6a <ip4_reass+0xb6>
 8023a9c:	e000      	b.n	8023aa0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8023a9e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8023aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023aa2:	2b00      	cmp	r3, #0
 8023aa4:	d109      	bne.n	8023aba <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8023aa6:	8c3b      	ldrh	r3, [r7, #32]
 8023aa8:	4619      	mov	r1, r3
 8023aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8023aac:	f7ff fdb0 	bl	8023610 <ip_reass_enqueue_new_datagram>
 8023ab0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8023ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023ab4:	2b00      	cmp	r3, #0
 8023ab6:	d11c      	bne.n	8023af2 <ip4_reass+0x13e>
      goto nullreturn;
 8023ab8:	e10f      	b.n	8023cda <ip4_reass+0x326>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8023aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023abc:	88db      	ldrh	r3, [r3, #6]
 8023abe:	b29b      	uxth	r3, r3
 8023ac0:	4618      	mov	r0, r3
 8023ac2:	f7f3 fa57 	bl	8016f74 <lwip_htons>
 8023ac6:	4603      	mov	r3, r0
 8023ac8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8023acc:	2b00      	cmp	r3, #0
 8023ace:	d110      	bne.n	8023af2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8023ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023ad2:	89db      	ldrh	r3, [r3, #14]
 8023ad4:	4618      	mov	r0, r3
 8023ad6:	f7f3 fa4d 	bl	8016f74 <lwip_htons>
 8023ada:	4603      	mov	r3, r0
 8023adc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8023ae0:	2b00      	cmp	r3, #0
 8023ae2:	d006      	beq.n	8023af2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8023ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023ae6:	3308      	adds	r3, #8
 8023ae8:	2214      	movs	r2, #20
 8023aea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8023aec:	4618      	mov	r0, r3
 8023aee:	f002 fe98 	bl	8026822 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8023af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023af4:	88db      	ldrh	r3, [r3, #6]
 8023af6:	b29b      	uxth	r3, r3
 8023af8:	f003 0320 	and.w	r3, r3, #32
 8023afc:	2b00      	cmp	r3, #0
 8023afe:	bf0c      	ite	eq
 8023b00:	2301      	moveq	r3, #1
 8023b02:	2300      	movne	r3, #0
 8023b04:	b2db      	uxtb	r3, r3
 8023b06:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8023b08:	69fb      	ldr	r3, [r7, #28]
 8023b0a:	2b00      	cmp	r3, #0
 8023b0c:	d00e      	beq.n	8023b2c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8023b0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8023b10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8023b12:	4413      	add	r3, r2
 8023b14:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8023b16:	8b7a      	ldrh	r2, [r7, #26]
 8023b18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023b1a:	429a      	cmp	r2, r3
 8023b1c:	f0c0 80a8 	bcc.w	8023c70 <ip4_reass+0x2bc>
 8023b20:	8b7b      	ldrh	r3, [r7, #26]
 8023b22:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8023b26:	4293      	cmp	r3, r2
 8023b28:	f200 80a2 	bhi.w	8023c70 <ip4_reass+0x2bc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8023b2c:	69fa      	ldr	r2, [r7, #28]
 8023b2e:	6879      	ldr	r1, [r7, #4]
 8023b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8023b32:	f7ff fdd5 	bl	80236e0 <ip_reass_chain_frag_into_datagram_and_validate>
 8023b36:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8023b38:	697b      	ldr	r3, [r7, #20]
 8023b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8023b3e:	f000 8099 	beq.w	8023c74 <ip4_reass+0x2c0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8023b42:	4b5e      	ldr	r3, [pc, #376]	; (8023cbc <ip4_reass+0x308>)
 8023b44:	881a      	ldrh	r2, [r3, #0]
 8023b46:	8c3b      	ldrh	r3, [r7, #32]
 8023b48:	4413      	add	r3, r2
 8023b4a:	b29a      	uxth	r2, r3
 8023b4c:	4b5b      	ldr	r3, [pc, #364]	; (8023cbc <ip4_reass+0x308>)
 8023b4e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8023b50:	69fb      	ldr	r3, [r7, #28]
 8023b52:	2b00      	cmp	r3, #0
 8023b54:	d00d      	beq.n	8023b72 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8023b56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8023b58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8023b5a:	4413      	add	r3, r2
 8023b5c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8023b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023b60:	8a7a      	ldrh	r2, [r7, #18]
 8023b62:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8023b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023b66:	7f9b      	ldrb	r3, [r3, #30]
 8023b68:	f043 0301 	orr.w	r3, r3, #1
 8023b6c:	b2da      	uxtb	r2, r3
 8023b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023b70:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8023b72:	697b      	ldr	r3, [r7, #20]
 8023b74:	2b01      	cmp	r3, #1
 8023b76:	d179      	bne.n	8023c6c <ip4_reass+0x2b8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8023b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023b7a:	8b9b      	ldrh	r3, [r3, #28]
 8023b7c:	3314      	adds	r3, #20
 8023b7e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8023b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023b82:	685b      	ldr	r3, [r3, #4]
 8023b84:	685b      	ldr	r3, [r3, #4]
 8023b86:	681b      	ldr	r3, [r3, #0]
 8023b88:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8023b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023b8c:	685b      	ldr	r3, [r3, #4]
 8023b8e:	685b      	ldr	r3, [r3, #4]
 8023b90:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8023b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023b94:	3308      	adds	r3, #8
 8023b96:	2214      	movs	r2, #20
 8023b98:	4619      	mov	r1, r3
 8023b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8023b9c:	f002 fe41 	bl	8026822 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8023ba0:	8a3b      	ldrh	r3, [r7, #16]
 8023ba2:	4618      	mov	r0, r3
 8023ba4:	f7f3 f9e6 	bl	8016f74 <lwip_htons>
 8023ba8:	4603      	mov	r3, r0
 8023baa:	461a      	mov	r2, r3
 8023bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023bae:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8023bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023bb2:	2200      	movs	r2, #0
 8023bb4:	719a      	strb	r2, [r3, #6]
 8023bb6:	2200      	movs	r2, #0
 8023bb8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8023bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023bbc:	2200      	movs	r2, #0
 8023bbe:	729a      	strb	r2, [r3, #10]
 8023bc0:	2200      	movs	r2, #0
 8023bc2:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8023bc4:	2114      	movs	r1, #20
 8023bc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8023bc8:	f7f3 fa5f 	bl	801708a <inet_chksum>
 8023bcc:	4603      	mov	r3, r0
 8023bce:	461a      	mov	r2, r3
 8023bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023bd2:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8023bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023bd6:	685b      	ldr	r3, [r3, #4]
 8023bd8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8023bda:	e00d      	b.n	8023bf8 <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 8023bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023bde:	685b      	ldr	r3, [r3, #4]
 8023be0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8023be2:	2114      	movs	r1, #20
 8023be4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8023be6:	f7f4 fd31 	bl	801864c <pbuf_remove_header>
      pbuf_cat(p, r);
 8023bea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8023bec:	6878      	ldr	r0, [r7, #4]
 8023bee:	f7f4 feb3 	bl	8018958 <pbuf_cat>
      r = iprh->next_pbuf;
 8023bf2:	68fb      	ldr	r3, [r7, #12]
 8023bf4:	681b      	ldr	r3, [r3, #0]
 8023bf6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8023bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023bfa:	2b00      	cmp	r3, #0
 8023bfc:	d1ee      	bne.n	8023bdc <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8023bfe:	4b30      	ldr	r3, [pc, #192]	; (8023cc0 <ip4_reass+0x30c>)
 8023c00:	681b      	ldr	r3, [r3, #0]
 8023c02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023c04:	429a      	cmp	r2, r3
 8023c06:	d102      	bne.n	8023c0e <ip4_reass+0x25a>
      ipr_prev = NULL;
 8023c08:	2300      	movs	r3, #0
 8023c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8023c0c:	e010      	b.n	8023c30 <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8023c0e:	4b2c      	ldr	r3, [pc, #176]	; (8023cc0 <ip4_reass+0x30c>)
 8023c10:	681b      	ldr	r3, [r3, #0]
 8023c12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8023c14:	e007      	b.n	8023c26 <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 8023c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023c18:	681b      	ldr	r3, [r3, #0]
 8023c1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023c1c:	429a      	cmp	r2, r3
 8023c1e:	d006      	beq.n	8023c2e <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8023c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023c22:	681b      	ldr	r3, [r3, #0]
 8023c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8023c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023c28:	2b00      	cmp	r3, #0
 8023c2a:	d1f4      	bne.n	8023c16 <ip4_reass+0x262>
 8023c2c:	e000      	b.n	8023c30 <ip4_reass+0x27c>
          break;
 8023c2e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8023c30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8023c32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8023c34:	f7ff fd26 	bl	8023684 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8023c38:	6878      	ldr	r0, [r7, #4]
 8023c3a:	f7f4 fe4d 	bl	80188d8 <pbuf_clen>
 8023c3e:	4603      	mov	r3, r0
 8023c40:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8023c42:	4b1e      	ldr	r3, [pc, #120]	; (8023cbc <ip4_reass+0x308>)
 8023c44:	881b      	ldrh	r3, [r3, #0]
 8023c46:	8c3a      	ldrh	r2, [r7, #32]
 8023c48:	429a      	cmp	r2, r3
 8023c4a:	d906      	bls.n	8023c5a <ip4_reass+0x2a6>
 8023c4c:	4b1d      	ldr	r3, [pc, #116]	; (8023cc4 <ip4_reass+0x310>)
 8023c4e:	f240 229b 	movw	r2, #667	; 0x29b
 8023c52:	491d      	ldr	r1, [pc, #116]	; (8023cc8 <ip4_reass+0x314>)
 8023c54:	481d      	ldr	r0, [pc, #116]	; (8023ccc <ip4_reass+0x318>)
 8023c56:	f002 fe9f 	bl	8026998 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8023c5a:	4b18      	ldr	r3, [pc, #96]	; (8023cbc <ip4_reass+0x308>)
 8023c5c:	881a      	ldrh	r2, [r3, #0]
 8023c5e:	8c3b      	ldrh	r3, [r7, #32]
 8023c60:	1ad3      	subs	r3, r2, r3
 8023c62:	b29a      	uxth	r2, r3
 8023c64:	4b15      	ldr	r3, [pc, #84]	; (8023cbc <ip4_reass+0x308>)
 8023c66:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8023c68:	687b      	ldr	r3, [r7, #4]
 8023c6a:	e03a      	b.n	8023ce2 <ip4_reass+0x32e>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8023c6c:	2300      	movs	r3, #0
 8023c6e:	e038      	b.n	8023ce2 <ip4_reass+0x32e>

nullreturn_ipr:
 8023c70:	bf00      	nop
 8023c72:	e000      	b.n	8023c76 <ip4_reass+0x2c2>
    goto nullreturn_ipr;
 8023c74:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8023c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023c78:	2b00      	cmp	r3, #0
 8023c7a:	d106      	bne.n	8023c8a <ip4_reass+0x2d6>
 8023c7c:	4b11      	ldr	r3, [pc, #68]	; (8023cc4 <ip4_reass+0x310>)
 8023c7e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8023c82:	4913      	ldr	r1, [pc, #76]	; (8023cd0 <ip4_reass+0x31c>)
 8023c84:	4811      	ldr	r0, [pc, #68]	; (8023ccc <ip4_reass+0x318>)
 8023c86:	f002 fe87 	bl	8026998 <iprintf>
  if (ipr->p == NULL) {
 8023c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023c8c:	685b      	ldr	r3, [r3, #4]
 8023c8e:	2b00      	cmp	r3, #0
 8023c90:	d122      	bne.n	8023cd8 <ip4_reass+0x324>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8023c92:	4b0b      	ldr	r3, [pc, #44]	; (8023cc0 <ip4_reass+0x30c>)
 8023c94:	681b      	ldr	r3, [r3, #0]
 8023c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023c98:	429a      	cmp	r2, r3
 8023c9a:	d006      	beq.n	8023caa <ip4_reass+0x2f6>
 8023c9c:	4b09      	ldr	r3, [pc, #36]	; (8023cc4 <ip4_reass+0x310>)
 8023c9e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8023ca2:	490c      	ldr	r1, [pc, #48]	; (8023cd4 <ip4_reass+0x320>)
 8023ca4:	4809      	ldr	r0, [pc, #36]	; (8023ccc <ip4_reass+0x318>)
 8023ca6:	f002 fe77 	bl	8026998 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8023caa:	2100      	movs	r1, #0
 8023cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8023cae:	f7ff fce9 	bl	8023684 <ip_reass_dequeue_datagram>
 8023cb2:	e012      	b.n	8023cda <ip4_reass+0x326>
    goto nullreturn;
 8023cb4:	bf00      	nop
 8023cb6:	e010      	b.n	8023cda <ip4_reass+0x326>
    goto nullreturn;
 8023cb8:	bf00      	nop
 8023cba:	e00e      	b.n	8023cda <ip4_reass+0x326>
 8023cbc:	20013308 	.word	0x20013308
 8023cc0:	20013304 	.word	0x20013304
 8023cc4:	0802b70c 	.word	0x0802b70c
 8023cc8:	0802b87c 	.word	0x0802b87c
 8023ccc:	0802b754 	.word	0x0802b754
 8023cd0:	0802b898 	.word	0x0802b898
 8023cd4:	0802b8a4 	.word	0x0802b8a4
  }

nullreturn:
 8023cd8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8023cda:	6878      	ldr	r0, [r7, #4]
 8023cdc:	f7f4 fd6e 	bl	80187bc <pbuf_free>
  return NULL;
 8023ce0:	2300      	movs	r3, #0
}
 8023ce2:	4618      	mov	r0, r3
 8023ce4:	3738      	adds	r7, #56	; 0x38
 8023ce6:	46bd      	mov	sp, r7
 8023ce8:	bd80      	pop	{r7, pc}
 8023cea:	bf00      	nop

08023cec <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8023cec:	b580      	push	{r7, lr}
 8023cee:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8023cf0:	2005      	movs	r0, #5
 8023cf2:	f7f3 fe63 	bl	80179bc <memp_malloc>
 8023cf6:	4603      	mov	r3, r0
}
 8023cf8:	4618      	mov	r0, r3
 8023cfa:	bd80      	pop	{r7, pc}

08023cfc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8023cfc:	b580      	push	{r7, lr}
 8023cfe:	b082      	sub	sp, #8
 8023d00:	af00      	add	r7, sp, #0
 8023d02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8023d04:	687b      	ldr	r3, [r7, #4]
 8023d06:	2b00      	cmp	r3, #0
 8023d08:	d106      	bne.n	8023d18 <ip_frag_free_pbuf_custom_ref+0x1c>
 8023d0a:	4b07      	ldr	r3, [pc, #28]	; (8023d28 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8023d0c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8023d10:	4906      	ldr	r1, [pc, #24]	; (8023d2c <ip_frag_free_pbuf_custom_ref+0x30>)
 8023d12:	4807      	ldr	r0, [pc, #28]	; (8023d30 <ip_frag_free_pbuf_custom_ref+0x34>)
 8023d14:	f002 fe40 	bl	8026998 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8023d18:	6879      	ldr	r1, [r7, #4]
 8023d1a:	2005      	movs	r0, #5
 8023d1c:	f7f3 fea0 	bl	8017a60 <memp_free>
}
 8023d20:	bf00      	nop
 8023d22:	3708      	adds	r7, #8
 8023d24:	46bd      	mov	sp, r7
 8023d26:	bd80      	pop	{r7, pc}
 8023d28:	0802b70c 	.word	0x0802b70c
 8023d2c:	0802b8c4 	.word	0x0802b8c4
 8023d30:	0802b754 	.word	0x0802b754

08023d34 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8023d34:	b580      	push	{r7, lr}
 8023d36:	b084      	sub	sp, #16
 8023d38:	af00      	add	r7, sp, #0
 8023d3a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8023d3c:	687b      	ldr	r3, [r7, #4]
 8023d3e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8023d40:	68fb      	ldr	r3, [r7, #12]
 8023d42:	2b00      	cmp	r3, #0
 8023d44:	d106      	bne.n	8023d54 <ipfrag_free_pbuf_custom+0x20>
 8023d46:	4b11      	ldr	r3, [pc, #68]	; (8023d8c <ipfrag_free_pbuf_custom+0x58>)
 8023d48:	f240 22ce 	movw	r2, #718	; 0x2ce
 8023d4c:	4910      	ldr	r1, [pc, #64]	; (8023d90 <ipfrag_free_pbuf_custom+0x5c>)
 8023d4e:	4811      	ldr	r0, [pc, #68]	; (8023d94 <ipfrag_free_pbuf_custom+0x60>)
 8023d50:	f002 fe22 	bl	8026998 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8023d54:	68fa      	ldr	r2, [r7, #12]
 8023d56:	687b      	ldr	r3, [r7, #4]
 8023d58:	429a      	cmp	r2, r3
 8023d5a:	d006      	beq.n	8023d6a <ipfrag_free_pbuf_custom+0x36>
 8023d5c:	4b0b      	ldr	r3, [pc, #44]	; (8023d8c <ipfrag_free_pbuf_custom+0x58>)
 8023d5e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8023d62:	490d      	ldr	r1, [pc, #52]	; (8023d98 <ipfrag_free_pbuf_custom+0x64>)
 8023d64:	480b      	ldr	r0, [pc, #44]	; (8023d94 <ipfrag_free_pbuf_custom+0x60>)
 8023d66:	f002 fe17 	bl	8026998 <iprintf>
  if (pcr->original != NULL) {
 8023d6a:	68fb      	ldr	r3, [r7, #12]
 8023d6c:	695b      	ldr	r3, [r3, #20]
 8023d6e:	2b00      	cmp	r3, #0
 8023d70:	d004      	beq.n	8023d7c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8023d72:	68fb      	ldr	r3, [r7, #12]
 8023d74:	695b      	ldr	r3, [r3, #20]
 8023d76:	4618      	mov	r0, r3
 8023d78:	f7f4 fd20 	bl	80187bc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8023d7c:	68f8      	ldr	r0, [r7, #12]
 8023d7e:	f7ff ffbd 	bl	8023cfc <ip_frag_free_pbuf_custom_ref>
}
 8023d82:	bf00      	nop
 8023d84:	3710      	adds	r7, #16
 8023d86:	46bd      	mov	sp, r7
 8023d88:	bd80      	pop	{r7, pc}
 8023d8a:	bf00      	nop
 8023d8c:	0802b70c 	.word	0x0802b70c
 8023d90:	0802b8d0 	.word	0x0802b8d0
 8023d94:	0802b754 	.word	0x0802b754
 8023d98:	0802b8dc 	.word	0x0802b8dc

08023d9c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8023d9c:	b580      	push	{r7, lr}
 8023d9e:	b094      	sub	sp, #80	; 0x50
 8023da0:	af02      	add	r7, sp, #8
 8023da2:	60f8      	str	r0, [r7, #12]
 8023da4:	60b9      	str	r1, [r7, #8]
 8023da6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8023da8:	2300      	movs	r3, #0
 8023daa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8023dae:	68bb      	ldr	r3, [r7, #8]
 8023db0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8023db2:	3b14      	subs	r3, #20
 8023db4:	2b00      	cmp	r3, #0
 8023db6:	da00      	bge.n	8023dba <ip4_frag+0x1e>
 8023db8:	3307      	adds	r3, #7
 8023dba:	10db      	asrs	r3, r3, #3
 8023dbc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8023dbe:	2314      	movs	r3, #20
 8023dc0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8023dc2:	68fb      	ldr	r3, [r7, #12]
 8023dc4:	685b      	ldr	r3, [r3, #4]
 8023dc6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8023dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023dca:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8023dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023dce:	781b      	ldrb	r3, [r3, #0]
 8023dd0:	f003 030f 	and.w	r3, r3, #15
 8023dd4:	b2db      	uxtb	r3, r3
 8023dd6:	009b      	lsls	r3, r3, #2
 8023dd8:	b2db      	uxtb	r3, r3
 8023dda:	2b14      	cmp	r3, #20
 8023ddc:	d002      	beq.n	8023de4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8023dde:	f06f 0305 	mvn.w	r3, #5
 8023de2:	e117      	b.n	8024014 <ip4_frag+0x278>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8023de4:	68fb      	ldr	r3, [r7, #12]
 8023de6:	895b      	ldrh	r3, [r3, #10]
 8023de8:	2b13      	cmp	r3, #19
 8023dea:	d809      	bhi.n	8023e00 <ip4_frag+0x64>
 8023dec:	4b8b      	ldr	r3, [pc, #556]	; (802401c <ip4_frag+0x280>)
 8023dee:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8023df2:	498b      	ldr	r1, [pc, #556]	; (8024020 <ip4_frag+0x284>)
 8023df4:	488b      	ldr	r0, [pc, #556]	; (8024024 <ip4_frag+0x288>)
 8023df6:	f002 fdcf 	bl	8026998 <iprintf>
 8023dfa:	f06f 0305 	mvn.w	r3, #5
 8023dfe:	e109      	b.n	8024014 <ip4_frag+0x278>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8023e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023e02:	88db      	ldrh	r3, [r3, #6]
 8023e04:	b29b      	uxth	r3, r3
 8023e06:	4618      	mov	r0, r3
 8023e08:	f7f3 f8b4 	bl	8016f74 <lwip_htons>
 8023e0c:	4603      	mov	r3, r0
 8023e0e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8023e10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8023e12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8023e16:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8023e1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8023e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8023e20:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8023e22:	68fb      	ldr	r3, [r7, #12]
 8023e24:	891b      	ldrh	r3, [r3, #8]
 8023e26:	3b14      	subs	r3, #20
 8023e28:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8023e2c:	e0e8      	b.n	8024000 <ip4_frag+0x264>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8023e2e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8023e30:	00db      	lsls	r3, r3, #3
 8023e32:	b29b      	uxth	r3, r3
 8023e34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8023e38:	4293      	cmp	r3, r2
 8023e3a:	bf28      	it	cs
 8023e3c:	4613      	movcs	r3, r2
 8023e3e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8023e40:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023e44:	2114      	movs	r1, #20
 8023e46:	200e      	movs	r0, #14
 8023e48:	f7f4 f9a6 	bl	8018198 <pbuf_alloc>
 8023e4c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8023e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023e50:	2b00      	cmp	r3, #0
 8023e52:	f000 80dc 	beq.w	802400e <ip4_frag+0x272>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8023e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023e58:	895b      	ldrh	r3, [r3, #10]
 8023e5a:	2b13      	cmp	r3, #19
 8023e5c:	d806      	bhi.n	8023e6c <ip4_frag+0xd0>
 8023e5e:	4b6f      	ldr	r3, [pc, #444]	; (802401c <ip4_frag+0x280>)
 8023e60:	f240 3225 	movw	r2, #805	; 0x325
 8023e64:	4970      	ldr	r1, [pc, #448]	; (8024028 <ip4_frag+0x28c>)
 8023e66:	486f      	ldr	r0, [pc, #444]	; (8024024 <ip4_frag+0x288>)
 8023e68:	f002 fd96 	bl	8026998 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8023e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023e6e:	685b      	ldr	r3, [r3, #4]
 8023e70:	2214      	movs	r2, #20
 8023e72:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8023e74:	4618      	mov	r0, r3
 8023e76:	f002 fcd4 	bl	8026822 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8023e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023e7c:	685b      	ldr	r3, [r3, #4]
 8023e7e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8023e80:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8023e82:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8023e86:	e064      	b.n	8023f52 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8023e88:	68fb      	ldr	r3, [r7, #12]
 8023e8a:	895a      	ldrh	r2, [r3, #10]
 8023e8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8023e8e:	1ad3      	subs	r3, r2, r3
 8023e90:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8023e92:	68fb      	ldr	r3, [r7, #12]
 8023e94:	895b      	ldrh	r3, [r3, #10]
 8023e96:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8023e98:	429a      	cmp	r2, r3
 8023e9a:	d906      	bls.n	8023eaa <ip4_frag+0x10e>
 8023e9c:	4b5f      	ldr	r3, [pc, #380]	; (802401c <ip4_frag+0x280>)
 8023e9e:	f240 322d 	movw	r2, #813	; 0x32d
 8023ea2:	4962      	ldr	r1, [pc, #392]	; (802402c <ip4_frag+0x290>)
 8023ea4:	485f      	ldr	r0, [pc, #380]	; (8024024 <ip4_frag+0x288>)
 8023ea6:	f002 fd77 	bl	8026998 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8023eaa:	8bfa      	ldrh	r2, [r7, #30]
 8023eac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8023eb0:	4293      	cmp	r3, r2
 8023eb2:	bf28      	it	cs
 8023eb4:	4613      	movcs	r3, r2
 8023eb6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8023eba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8023ebe:	2b00      	cmp	r3, #0
 8023ec0:	d105      	bne.n	8023ece <ip4_frag+0x132>
        poff = 0;
 8023ec2:	2300      	movs	r3, #0
 8023ec4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8023ec6:	68fb      	ldr	r3, [r7, #12]
 8023ec8:	681b      	ldr	r3, [r3, #0]
 8023eca:	60fb      	str	r3, [r7, #12]
        continue;
 8023ecc:	e041      	b.n	8023f52 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8023ece:	f7ff ff0d 	bl	8023cec <ip_frag_alloc_pbuf_custom_ref>
 8023ed2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8023ed4:	69bb      	ldr	r3, [r7, #24]
 8023ed6:	2b00      	cmp	r3, #0
 8023ed8:	d103      	bne.n	8023ee2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8023eda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8023edc:	f7f4 fc6e 	bl	80187bc <pbuf_free>
        goto memerr;
 8023ee0:	e096      	b.n	8024010 <ip4_frag+0x274>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8023ee2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8023ee4:	68fb      	ldr	r3, [r7, #12]
 8023ee6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8023ee8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8023eea:	4413      	add	r3, r2
 8023eec:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8023ef0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8023ef4:	9201      	str	r2, [sp, #4]
 8023ef6:	9300      	str	r3, [sp, #0]
 8023ef8:	4603      	mov	r3, r0
 8023efa:	2241      	movs	r2, #65	; 0x41
 8023efc:	2000      	movs	r0, #0
 8023efe:	f7f4 fa71 	bl	80183e4 <pbuf_alloced_custom>
 8023f02:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8023f04:	697b      	ldr	r3, [r7, #20]
 8023f06:	2b00      	cmp	r3, #0
 8023f08:	d106      	bne.n	8023f18 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8023f0a:	69b8      	ldr	r0, [r7, #24]
 8023f0c:	f7ff fef6 	bl	8023cfc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8023f10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8023f12:	f7f4 fc53 	bl	80187bc <pbuf_free>
        goto memerr;
 8023f16:	e07b      	b.n	8024010 <ip4_frag+0x274>
      }
      pbuf_ref(p);
 8023f18:	68f8      	ldr	r0, [r7, #12]
 8023f1a:	f7f4 fcf5 	bl	8018908 <pbuf_ref>
      pcr->original = p;
 8023f1e:	69bb      	ldr	r3, [r7, #24]
 8023f20:	68fa      	ldr	r2, [r7, #12]
 8023f22:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8023f24:	69bb      	ldr	r3, [r7, #24]
 8023f26:	4a42      	ldr	r2, [pc, #264]	; (8024030 <ip4_frag+0x294>)
 8023f28:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8023f2a:	6979      	ldr	r1, [r7, #20]
 8023f2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8023f2e:	f7f4 fd13 	bl	8018958 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8023f32:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8023f36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8023f3a:	1ad3      	subs	r3, r2, r3
 8023f3c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8023f40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8023f44:	2b00      	cmp	r3, #0
 8023f46:	d004      	beq.n	8023f52 <ip4_frag+0x1b6>
        poff = 0;
 8023f48:	2300      	movs	r3, #0
 8023f4a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8023f4c:	68fb      	ldr	r3, [r7, #12]
 8023f4e:	681b      	ldr	r3, [r3, #0]
 8023f50:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8023f52:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8023f56:	2b00      	cmp	r3, #0
 8023f58:	d196      	bne.n	8023e88 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8023f5a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8023f5c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8023f60:	4413      	add	r3, r2
 8023f62:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8023f64:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8023f68:	68bb      	ldr	r3, [r7, #8]
 8023f6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8023f6c:	3b14      	subs	r3, #20
 8023f6e:	429a      	cmp	r2, r3
 8023f70:	bfd4      	ite	le
 8023f72:	2301      	movle	r3, #1
 8023f74:	2300      	movgt	r3, #0
 8023f76:	b2db      	uxtb	r3, r3
 8023f78:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8023f7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8023f7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8023f82:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8023f84:	6a3b      	ldr	r3, [r7, #32]
 8023f86:	2b00      	cmp	r3, #0
 8023f88:	d002      	beq.n	8023f90 <ip4_frag+0x1f4>
 8023f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023f8c:	2b00      	cmp	r3, #0
 8023f8e:	d003      	beq.n	8023f98 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8023f90:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8023f92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8023f96:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8023f98:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8023f9a:	4618      	mov	r0, r3
 8023f9c:	f7f2 ffea 	bl	8016f74 <lwip_htons>
 8023fa0:	4603      	mov	r3, r0
 8023fa2:	461a      	mov	r2, r3
 8023fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023fa6:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8023fa8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8023faa:	3314      	adds	r3, #20
 8023fac:	b29b      	uxth	r3, r3
 8023fae:	4618      	mov	r0, r3
 8023fb0:	f7f2 ffe0 	bl	8016f74 <lwip_htons>
 8023fb4:	4603      	mov	r3, r0
 8023fb6:	461a      	mov	r2, r3
 8023fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023fba:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8023fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023fbe:	2200      	movs	r2, #0
 8023fc0:	729a      	strb	r2, [r3, #10]
 8023fc2:	2200      	movs	r2, #0
 8023fc4:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8023fc6:	2114      	movs	r1, #20
 8023fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8023fca:	f7f3 f85e 	bl	801708a <inet_chksum>
 8023fce:	4603      	mov	r3, r0
 8023fd0:	461a      	mov	r2, r3
 8023fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023fd4:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8023fd6:	68bb      	ldr	r3, [r7, #8]
 8023fd8:	695b      	ldr	r3, [r3, #20]
 8023fda:	687a      	ldr	r2, [r7, #4]
 8023fdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8023fde:	68b8      	ldr	r0, [r7, #8]
 8023fe0:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8023fe2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8023fe4:	f7f4 fbea 	bl	80187bc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8023fe8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8023fec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8023fee:	1ad3      	subs	r3, r2, r3
 8023ff0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8023ff4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8023ff8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8023ffa:	4413      	add	r3, r2
 8023ffc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8024000:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8024004:	2b00      	cmp	r3, #0
 8024006:	f47f af12 	bne.w	8023e2e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 802400a:	2300      	movs	r3, #0
 802400c:	e002      	b.n	8024014 <ip4_frag+0x278>
      goto memerr;
 802400e:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8024010:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8024014:	4618      	mov	r0, r3
 8024016:	3748      	adds	r7, #72	; 0x48
 8024018:	46bd      	mov	sp, r7
 802401a:	bd80      	pop	{r7, pc}
 802401c:	0802b70c 	.word	0x0802b70c
 8024020:	0802b8e8 	.word	0x0802b8e8
 8024024:	0802b754 	.word	0x0802b754
 8024028:	0802b904 	.word	0x0802b904
 802402c:	0802b924 	.word	0x0802b924
 8024030:	08023d35 	.word	0x08023d35

08024034 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8024034:	b580      	push	{r7, lr}
 8024036:	b086      	sub	sp, #24
 8024038:	af00      	add	r7, sp, #0
 802403a:	6078      	str	r0, [r7, #4]
 802403c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 802403e:	230e      	movs	r3, #14
 8024040:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8024042:	687b      	ldr	r3, [r7, #4]
 8024044:	895b      	ldrh	r3, [r3, #10]
 8024046:	2b0e      	cmp	r3, #14
 8024048:	d96e      	bls.n	8024128 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 802404a:	687b      	ldr	r3, [r7, #4]
 802404c:	7bdb      	ldrb	r3, [r3, #15]
 802404e:	2b00      	cmp	r3, #0
 8024050:	d106      	bne.n	8024060 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8024052:	683b      	ldr	r3, [r7, #0]
 8024054:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8024058:	3301      	adds	r3, #1
 802405a:	b2da      	uxtb	r2, r3
 802405c:	687b      	ldr	r3, [r7, #4]
 802405e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8024060:	687b      	ldr	r3, [r7, #4]
 8024062:	685b      	ldr	r3, [r3, #4]
 8024064:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8024066:	693b      	ldr	r3, [r7, #16]
 8024068:	7b1a      	ldrb	r2, [r3, #12]
 802406a:	7b5b      	ldrb	r3, [r3, #13]
 802406c:	021b      	lsls	r3, r3, #8
 802406e:	4313      	orrs	r3, r2
 8024070:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8024072:	693b      	ldr	r3, [r7, #16]
 8024074:	781b      	ldrb	r3, [r3, #0]
 8024076:	f003 0301 	and.w	r3, r3, #1
 802407a:	2b00      	cmp	r3, #0
 802407c:	d023      	beq.n	80240c6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 802407e:	693b      	ldr	r3, [r7, #16]
 8024080:	781b      	ldrb	r3, [r3, #0]
 8024082:	2b01      	cmp	r3, #1
 8024084:	d10f      	bne.n	80240a6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8024086:	693b      	ldr	r3, [r7, #16]
 8024088:	785b      	ldrb	r3, [r3, #1]
 802408a:	2b00      	cmp	r3, #0
 802408c:	d11b      	bne.n	80240c6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 802408e:	693b      	ldr	r3, [r7, #16]
 8024090:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8024092:	2b5e      	cmp	r3, #94	; 0x5e
 8024094:	d117      	bne.n	80240c6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8024096:	687b      	ldr	r3, [r7, #4]
 8024098:	7b5b      	ldrb	r3, [r3, #13]
 802409a:	f043 0310 	orr.w	r3, r3, #16
 802409e:	b2da      	uxtb	r2, r3
 80240a0:	687b      	ldr	r3, [r7, #4]
 80240a2:	735a      	strb	r2, [r3, #13]
 80240a4:	e00f      	b.n	80240c6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80240a6:	693b      	ldr	r3, [r7, #16]
 80240a8:	2206      	movs	r2, #6
 80240aa:	4928      	ldr	r1, [pc, #160]	; (802414c <ethernet_input+0x118>)
 80240ac:	4618      	mov	r0, r3
 80240ae:	f002 fba9 	bl	8026804 <memcmp>
 80240b2:	4603      	mov	r3, r0
 80240b4:	2b00      	cmp	r3, #0
 80240b6:	d106      	bne.n	80240c6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80240b8:	687b      	ldr	r3, [r7, #4]
 80240ba:	7b5b      	ldrb	r3, [r3, #13]
 80240bc:	f043 0308 	orr.w	r3, r3, #8
 80240c0:	b2da      	uxtb	r2, r3
 80240c2:	687b      	ldr	r3, [r7, #4]
 80240c4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80240c6:	89fb      	ldrh	r3, [r7, #14]
 80240c8:	2b08      	cmp	r3, #8
 80240ca:	d003      	beq.n	80240d4 <ethernet_input+0xa0>
 80240cc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80240d0:	d014      	beq.n	80240fc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80240d2:	e032      	b.n	802413a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80240d4:	683b      	ldr	r3, [r7, #0]
 80240d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80240da:	f003 0308 	and.w	r3, r3, #8
 80240de:	2b00      	cmp	r3, #0
 80240e0:	d024      	beq.n	802412c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80240e2:	8afb      	ldrh	r3, [r7, #22]
 80240e4:	4619      	mov	r1, r3
 80240e6:	6878      	ldr	r0, [r7, #4]
 80240e8:	f7f4 fab0 	bl	801864c <pbuf_remove_header>
 80240ec:	4603      	mov	r3, r0
 80240ee:	2b00      	cmp	r3, #0
 80240f0:	d11e      	bne.n	8024130 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80240f2:	6839      	ldr	r1, [r7, #0]
 80240f4:	6878      	ldr	r0, [r7, #4]
 80240f6:	f7fe fe8d 	bl	8022e14 <ip4_input>
      break;
 80240fa:	e013      	b.n	8024124 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80240fc:	683b      	ldr	r3, [r7, #0]
 80240fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8024102:	f003 0308 	and.w	r3, r3, #8
 8024106:	2b00      	cmp	r3, #0
 8024108:	d014      	beq.n	8024134 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802410a:	8afb      	ldrh	r3, [r7, #22]
 802410c:	4619      	mov	r1, r3
 802410e:	6878      	ldr	r0, [r7, #4]
 8024110:	f7f4 fa9c 	bl	801864c <pbuf_remove_header>
 8024114:	4603      	mov	r3, r0
 8024116:	2b00      	cmp	r3, #0
 8024118:	d10e      	bne.n	8024138 <ethernet_input+0x104>
        etharp_input(p, netif);
 802411a:	6839      	ldr	r1, [r7, #0]
 802411c:	6878      	ldr	r0, [r7, #4]
 802411e:	f7fe f81d 	bl	802215c <etharp_input>
      break;
 8024122:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8024124:	2300      	movs	r3, #0
 8024126:	e00c      	b.n	8024142 <ethernet_input+0x10e>
    goto free_and_return;
 8024128:	bf00      	nop
 802412a:	e006      	b.n	802413a <ethernet_input+0x106>
        goto free_and_return;
 802412c:	bf00      	nop
 802412e:	e004      	b.n	802413a <ethernet_input+0x106>
        goto free_and_return;
 8024130:	bf00      	nop
 8024132:	e002      	b.n	802413a <ethernet_input+0x106>
        goto free_and_return;
 8024134:	bf00      	nop
 8024136:	e000      	b.n	802413a <ethernet_input+0x106>
        goto free_and_return;
 8024138:	bf00      	nop

free_and_return:
  pbuf_free(p);
 802413a:	6878      	ldr	r0, [r7, #4]
 802413c:	f7f4 fb3e 	bl	80187bc <pbuf_free>
  return ERR_OK;
 8024140:	2300      	movs	r3, #0
}
 8024142:	4618      	mov	r0, r3
 8024144:	3718      	adds	r7, #24
 8024146:	46bd      	mov	sp, r7
 8024148:	bd80      	pop	{r7, pc}
 802414a:	bf00      	nop
 802414c:	0802bde0 	.word	0x0802bde0

08024150 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8024150:	b580      	push	{r7, lr}
 8024152:	b086      	sub	sp, #24
 8024154:	af00      	add	r7, sp, #0
 8024156:	60f8      	str	r0, [r7, #12]
 8024158:	60b9      	str	r1, [r7, #8]
 802415a:	607a      	str	r2, [r7, #4]
 802415c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 802415e:	8c3b      	ldrh	r3, [r7, #32]
 8024160:	4618      	mov	r0, r3
 8024162:	f7f2 ff07 	bl	8016f74 <lwip_htons>
 8024166:	4603      	mov	r3, r0
 8024168:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 802416a:	210e      	movs	r1, #14
 802416c:	68b8      	ldr	r0, [r7, #8]
 802416e:	f7f4 fa5d 	bl	801862c <pbuf_add_header>
 8024172:	4603      	mov	r3, r0
 8024174:	2b00      	cmp	r3, #0
 8024176:	d125      	bne.n	80241c4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8024178:	68bb      	ldr	r3, [r7, #8]
 802417a:	685b      	ldr	r3, [r3, #4]
 802417c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 802417e:	693b      	ldr	r3, [r7, #16]
 8024180:	8afa      	ldrh	r2, [r7, #22]
 8024182:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8024184:	693b      	ldr	r3, [r7, #16]
 8024186:	2206      	movs	r2, #6
 8024188:	6839      	ldr	r1, [r7, #0]
 802418a:	4618      	mov	r0, r3
 802418c:	f002 fb49 	bl	8026822 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8024190:	693b      	ldr	r3, [r7, #16]
 8024192:	3306      	adds	r3, #6
 8024194:	2206      	movs	r2, #6
 8024196:	6879      	ldr	r1, [r7, #4]
 8024198:	4618      	mov	r0, r3
 802419a:	f002 fb42 	bl	8026822 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 802419e:	68fb      	ldr	r3, [r7, #12]
 80241a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80241a4:	2b06      	cmp	r3, #6
 80241a6:	d006      	beq.n	80241b6 <ethernet_output+0x66>
 80241a8:	4b0a      	ldr	r3, [pc, #40]	; (80241d4 <ethernet_output+0x84>)
 80241aa:	f240 1233 	movw	r2, #307	; 0x133
 80241ae:	490a      	ldr	r1, [pc, #40]	; (80241d8 <ethernet_output+0x88>)
 80241b0:	480a      	ldr	r0, [pc, #40]	; (80241dc <ethernet_output+0x8c>)
 80241b2:	f002 fbf1 	bl	8026998 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80241b6:	68fb      	ldr	r3, [r7, #12]
 80241b8:	699b      	ldr	r3, [r3, #24]
 80241ba:	68b9      	ldr	r1, [r7, #8]
 80241bc:	68f8      	ldr	r0, [r7, #12]
 80241be:	4798      	blx	r3
 80241c0:	4603      	mov	r3, r0
 80241c2:	e002      	b.n	80241ca <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80241c4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80241c6:	f06f 0301 	mvn.w	r3, #1
}
 80241ca:	4618      	mov	r0, r3
 80241cc:	3718      	adds	r7, #24
 80241ce:	46bd      	mov	sp, r7
 80241d0:	bd80      	pop	{r7, pc}
 80241d2:	bf00      	nop
 80241d4:	0802b934 	.word	0x0802b934
 80241d8:	0802b96c 	.word	0x0802b96c
 80241dc:	0802b9a0 	.word	0x0802b9a0

080241e0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80241e0:	b580      	push	{r7, lr}
 80241e2:	b086      	sub	sp, #24
 80241e4:	af00      	add	r7, sp, #0
 80241e6:	6078      	str	r0, [r7, #4]
 80241e8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80241ea:	683b      	ldr	r3, [r7, #0]
 80241ec:	60bb      	str	r3, [r7, #8]
 80241ee:	2304      	movs	r3, #4
 80241f0:	60fb      	str	r3, [r7, #12]
 80241f2:	2300      	movs	r3, #0
 80241f4:	613b      	str	r3, [r7, #16]
 80241f6:	2300      	movs	r3, #0
 80241f8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80241fa:	f107 0308 	add.w	r3, r7, #8
 80241fe:	2100      	movs	r1, #0
 8024200:	4618      	mov	r0, r3
 8024202:	f7eb fbaa 	bl	800f95a <osMessageCreate>
 8024206:	4602      	mov	r2, r0
 8024208:	687b      	ldr	r3, [r7, #4]
 802420a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 802420c:	687b      	ldr	r3, [r7, #4]
 802420e:	681b      	ldr	r3, [r3, #0]
 8024210:	2b00      	cmp	r3, #0
 8024212:	d102      	bne.n	802421a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8024214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8024218:	e000      	b.n	802421c <sys_mbox_new+0x3c>

  return ERR_OK;
 802421a:	2300      	movs	r3, #0
}
 802421c:	4618      	mov	r0, r3
 802421e:	3718      	adds	r7, #24
 8024220:	46bd      	mov	sp, r7
 8024222:	bd80      	pop	{r7, pc}

08024224 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8024224:	b580      	push	{r7, lr}
 8024226:	b082      	sub	sp, #8
 8024228:	af00      	add	r7, sp, #0
 802422a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 802422c:	687b      	ldr	r3, [r7, #4]
 802422e:	681b      	ldr	r3, [r3, #0]
 8024230:	4618      	mov	r0, r3
 8024232:	f7eb fc6f 	bl	800fb14 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8024236:	687b      	ldr	r3, [r7, #4]
 8024238:	681b      	ldr	r3, [r3, #0]
 802423a:	4618      	mov	r0, r3
 802423c:	f7eb fc80 	bl	800fb40 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8024240:	bf00      	nop
 8024242:	3708      	adds	r7, #8
 8024244:	46bd      	mov	sp, r7
 8024246:	bd80      	pop	{r7, pc}

08024248 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8024248:	b580      	push	{r7, lr}
 802424a:	b084      	sub	sp, #16
 802424c:	af00      	add	r7, sp, #0
 802424e:	6078      	str	r0, [r7, #4]
 8024250:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8024252:	687b      	ldr	r3, [r7, #4]
 8024254:	681b      	ldr	r3, [r3, #0]
 8024256:	6839      	ldr	r1, [r7, #0]
 8024258:	2200      	movs	r2, #0
 802425a:	4618      	mov	r0, r3
 802425c:	f7eb fba6 	bl	800f9ac <osMessagePut>
 8024260:	4603      	mov	r3, r0
 8024262:	2b00      	cmp	r3, #0
 8024264:	d102      	bne.n	802426c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8024266:	2300      	movs	r3, #0
 8024268:	73fb      	strb	r3, [r7, #15]
 802426a:	e001      	b.n	8024270 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 802426c:	23ff      	movs	r3, #255	; 0xff
 802426e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8024270:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8024274:	4618      	mov	r0, r3
 8024276:	3710      	adds	r7, #16
 8024278:	46bd      	mov	sp, r7
 802427a:	bd80      	pop	{r7, pc}

0802427c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 802427c:	b580      	push	{r7, lr}
 802427e:	b08c      	sub	sp, #48	; 0x30
 8024280:	af00      	add	r7, sp, #0
 8024282:	61f8      	str	r0, [r7, #28]
 8024284:	61b9      	str	r1, [r7, #24]
 8024286:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8024288:	f7eb f8da 	bl	800f440 <osKernelSysTick>
 802428c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 802428e:	697b      	ldr	r3, [r7, #20]
 8024290:	2b00      	cmp	r3, #0
 8024292:	d017      	beq.n	80242c4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8024294:	69fb      	ldr	r3, [r7, #28]
 8024296:	6819      	ldr	r1, [r3, #0]
 8024298:	f107 0320 	add.w	r3, r7, #32
 802429c:	697a      	ldr	r2, [r7, #20]
 802429e:	4618      	mov	r0, r3
 80242a0:	f7eb fbc4 	bl	800fa2c <osMessageGet>

    if(event.status == osEventMessage)
 80242a4:	6a3b      	ldr	r3, [r7, #32]
 80242a6:	2b10      	cmp	r3, #16
 80242a8:	d109      	bne.n	80242be <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80242aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80242ac:	461a      	mov	r2, r3
 80242ae:	69bb      	ldr	r3, [r7, #24]
 80242b0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80242b2:	f7eb f8c5 	bl	800f440 <osKernelSysTick>
 80242b6:	4602      	mov	r2, r0
 80242b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80242ba:	1ad3      	subs	r3, r2, r3
 80242bc:	e019      	b.n	80242f2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80242be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80242c2:	e016      	b.n	80242f2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80242c4:	69fb      	ldr	r3, [r7, #28]
 80242c6:	6819      	ldr	r1, [r3, #0]
 80242c8:	463b      	mov	r3, r7
 80242ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80242ce:	4618      	mov	r0, r3
 80242d0:	f7eb fbac 	bl	800fa2c <osMessageGet>
 80242d4:	f107 0320 	add.w	r3, r7, #32
 80242d8:	463a      	mov	r2, r7
 80242da:	ca07      	ldmia	r2, {r0, r1, r2}
 80242dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80242e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80242e2:	461a      	mov	r2, r3
 80242e4:	69bb      	ldr	r3, [r7, #24]
 80242e6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80242e8:	f7eb f8aa 	bl	800f440 <osKernelSysTick>
 80242ec:	4602      	mov	r2, r0
 80242ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80242f0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80242f2:	4618      	mov	r0, r3
 80242f4:	3730      	adds	r7, #48	; 0x30
 80242f6:	46bd      	mov	sp, r7
 80242f8:	bd80      	pop	{r7, pc}

080242fa <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80242fa:	b580      	push	{r7, lr}
 80242fc:	b086      	sub	sp, #24
 80242fe:	af00      	add	r7, sp, #0
 8024300:	6078      	str	r0, [r7, #4]
 8024302:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8024304:	687b      	ldr	r3, [r7, #4]
 8024306:	6819      	ldr	r1, [r3, #0]
 8024308:	f107 030c 	add.w	r3, r7, #12
 802430c:	2200      	movs	r2, #0
 802430e:	4618      	mov	r0, r3
 8024310:	f7eb fb8c 	bl	800fa2c <osMessageGet>

  if(event.status == osEventMessage)
 8024314:	68fb      	ldr	r3, [r7, #12]
 8024316:	2b10      	cmp	r3, #16
 8024318:	d105      	bne.n	8024326 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 802431a:	693b      	ldr	r3, [r7, #16]
 802431c:	461a      	mov	r2, r3
 802431e:	683b      	ldr	r3, [r7, #0]
 8024320:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8024322:	2300      	movs	r3, #0
 8024324:	e001      	b.n	802432a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8024326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 802432a:	4618      	mov	r0, r3
 802432c:	3718      	adds	r7, #24
 802432e:	46bd      	mov	sp, r7
 8024330:	bd80      	pop	{r7, pc}

08024332 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8024332:	b480      	push	{r7}
 8024334:	b083      	sub	sp, #12
 8024336:	af00      	add	r7, sp, #0
 8024338:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 802433a:	687b      	ldr	r3, [r7, #4]
 802433c:	681b      	ldr	r3, [r3, #0]
 802433e:	2b00      	cmp	r3, #0
 8024340:	d101      	bne.n	8024346 <sys_mbox_valid+0x14>
    return 0;
 8024342:	2300      	movs	r3, #0
 8024344:	e000      	b.n	8024348 <sys_mbox_valid+0x16>
  else
    return 1;
 8024346:	2301      	movs	r3, #1
}
 8024348:	4618      	mov	r0, r3
 802434a:	370c      	adds	r7, #12
 802434c:	46bd      	mov	sp, r7
 802434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024352:	4770      	bx	lr

08024354 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8024354:	b480      	push	{r7}
 8024356:	b083      	sub	sp, #12
 8024358:	af00      	add	r7, sp, #0
 802435a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 802435c:	687b      	ldr	r3, [r7, #4]
 802435e:	2200      	movs	r2, #0
 8024360:	601a      	str	r2, [r3, #0]
}
 8024362:	bf00      	nop
 8024364:	370c      	adds	r7, #12
 8024366:	46bd      	mov	sp, r7
 8024368:	f85d 7b04 	ldr.w	r7, [sp], #4
 802436c:	4770      	bx	lr

0802436e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 802436e:	b580      	push	{r7, lr}
 8024370:	b084      	sub	sp, #16
 8024372:	af00      	add	r7, sp, #0
 8024374:	6078      	str	r0, [r7, #4]
 8024376:	460b      	mov	r3, r1
 8024378:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 802437a:	2300      	movs	r3, #0
 802437c:	60bb      	str	r3, [r7, #8]
 802437e:	2300      	movs	r3, #0
 8024380:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8024382:	f107 0308 	add.w	r3, r7, #8
 8024386:	2101      	movs	r1, #1
 8024388:	4618      	mov	r0, r3
 802438a:	f7eb fa1b 	bl	800f7c4 <osSemaphoreCreate>
 802438e:	4602      	mov	r2, r0
 8024390:	687b      	ldr	r3, [r7, #4]
 8024392:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8024394:	687b      	ldr	r3, [r7, #4]
 8024396:	681b      	ldr	r3, [r3, #0]
 8024398:	2b00      	cmp	r3, #0
 802439a:	d102      	bne.n	80243a2 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 802439c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80243a0:	e009      	b.n	80243b6 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80243a2:	78fb      	ldrb	r3, [r7, #3]
 80243a4:	2b00      	cmp	r3, #0
 80243a6:	d105      	bne.n	80243b4 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80243a8:	687b      	ldr	r3, [r7, #4]
 80243aa:	681b      	ldr	r3, [r3, #0]
 80243ac:	2100      	movs	r1, #0
 80243ae:	4618      	mov	r0, r3
 80243b0:	f7eb fa3c 	bl	800f82c <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80243b4:	2300      	movs	r3, #0
}
 80243b6:	4618      	mov	r0, r3
 80243b8:	3710      	adds	r7, #16
 80243ba:	46bd      	mov	sp, r7
 80243bc:	bd80      	pop	{r7, pc}

080243be <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80243be:	b580      	push	{r7, lr}
 80243c0:	b084      	sub	sp, #16
 80243c2:	af00      	add	r7, sp, #0
 80243c4:	6078      	str	r0, [r7, #4]
 80243c6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80243c8:	f7eb f83a 	bl	800f440 <osKernelSysTick>
 80243cc:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80243ce:	683b      	ldr	r3, [r7, #0]
 80243d0:	2b00      	cmp	r3, #0
 80243d2:	d011      	beq.n	80243f8 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80243d4:	687b      	ldr	r3, [r7, #4]
 80243d6:	681b      	ldr	r3, [r3, #0]
 80243d8:	6839      	ldr	r1, [r7, #0]
 80243da:	4618      	mov	r0, r3
 80243dc:	f7eb fa26 	bl	800f82c <osSemaphoreWait>
 80243e0:	4603      	mov	r3, r0
 80243e2:	2b00      	cmp	r3, #0
 80243e4:	d105      	bne.n	80243f2 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80243e6:	f7eb f82b 	bl	800f440 <osKernelSysTick>
 80243ea:	4602      	mov	r2, r0
 80243ec:	68fb      	ldr	r3, [r7, #12]
 80243ee:	1ad3      	subs	r3, r2, r3
 80243f0:	e012      	b.n	8024418 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80243f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80243f6:	e00f      	b.n	8024418 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80243f8:	bf00      	nop
 80243fa:	687b      	ldr	r3, [r7, #4]
 80243fc:	681b      	ldr	r3, [r3, #0]
 80243fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8024402:	4618      	mov	r0, r3
 8024404:	f7eb fa12 	bl	800f82c <osSemaphoreWait>
 8024408:	4603      	mov	r3, r0
 802440a:	2b00      	cmp	r3, #0
 802440c:	d1f5      	bne.n	80243fa <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 802440e:	f7eb f817 	bl	800f440 <osKernelSysTick>
 8024412:	4602      	mov	r2, r0
 8024414:	68fb      	ldr	r3, [r7, #12]
 8024416:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8024418:	4618      	mov	r0, r3
 802441a:	3710      	adds	r7, #16
 802441c:	46bd      	mov	sp, r7
 802441e:	bd80      	pop	{r7, pc}

08024420 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8024420:	b580      	push	{r7, lr}
 8024422:	b082      	sub	sp, #8
 8024424:	af00      	add	r7, sp, #0
 8024426:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8024428:	687b      	ldr	r3, [r7, #4]
 802442a:	681b      	ldr	r3, [r3, #0]
 802442c:	4618      	mov	r0, r3
 802442e:	f7eb fa4b 	bl	800f8c8 <osSemaphoreRelease>
}
 8024432:	bf00      	nop
 8024434:	3708      	adds	r7, #8
 8024436:	46bd      	mov	sp, r7
 8024438:	bd80      	pop	{r7, pc}

0802443a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 802443a:	b580      	push	{r7, lr}
 802443c:	b082      	sub	sp, #8
 802443e:	af00      	add	r7, sp, #0
 8024440:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8024442:	687b      	ldr	r3, [r7, #4]
 8024444:	681b      	ldr	r3, [r3, #0]
 8024446:	4618      	mov	r0, r3
 8024448:	f7eb fa74 	bl	800f934 <osSemaphoreDelete>
}
 802444c:	bf00      	nop
 802444e:	3708      	adds	r7, #8
 8024450:	46bd      	mov	sp, r7
 8024452:	bd80      	pop	{r7, pc}

08024454 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8024454:	b480      	push	{r7}
 8024456:	b083      	sub	sp, #12
 8024458:	af00      	add	r7, sp, #0
 802445a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 802445c:	687b      	ldr	r3, [r7, #4]
 802445e:	681b      	ldr	r3, [r3, #0]
 8024460:	2b00      	cmp	r3, #0
 8024462:	d101      	bne.n	8024468 <sys_sem_valid+0x14>
    return 0;
 8024464:	2300      	movs	r3, #0
 8024466:	e000      	b.n	802446a <sys_sem_valid+0x16>
  else
    return 1;
 8024468:	2301      	movs	r3, #1
}
 802446a:	4618      	mov	r0, r3
 802446c:	370c      	adds	r7, #12
 802446e:	46bd      	mov	sp, r7
 8024470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024474:	4770      	bx	lr

08024476 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8024476:	b480      	push	{r7}
 8024478:	b083      	sub	sp, #12
 802447a:	af00      	add	r7, sp, #0
 802447c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 802447e:	687b      	ldr	r3, [r7, #4]
 8024480:	2200      	movs	r2, #0
 8024482:	601a      	str	r2, [r3, #0]
}
 8024484:	bf00      	nop
 8024486:	370c      	adds	r7, #12
 8024488:	46bd      	mov	sp, r7
 802448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802448e:	4770      	bx	lr

08024490 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8024490:	b580      	push	{r7, lr}
 8024492:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8024494:	4803      	ldr	r0, [pc, #12]	; (80244a4 <sys_init+0x14>)
 8024496:	f7eb f8f9 	bl	800f68c <osMutexCreate>
 802449a:	4602      	mov	r2, r0
 802449c:	4b02      	ldr	r3, [pc, #8]	; (80244a8 <sys_init+0x18>)
 802449e:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80244a0:	bf00      	nop
 80244a2:	bd80      	pop	{r7, pc}
 80244a4:	0802bdf0 	.word	0x0802bdf0
 80244a8:	2001a03c 	.word	0x2001a03c

080244ac <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80244ac:	b580      	push	{r7, lr}
 80244ae:	b084      	sub	sp, #16
 80244b0:	af00      	add	r7, sp, #0
 80244b2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80244b4:	2300      	movs	r3, #0
 80244b6:	60bb      	str	r3, [r7, #8]
 80244b8:	2300      	movs	r3, #0
 80244ba:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80244bc:	f107 0308 	add.w	r3, r7, #8
 80244c0:	4618      	mov	r0, r3
 80244c2:	f7eb f8e3 	bl	800f68c <osMutexCreate>
 80244c6:	4602      	mov	r2, r0
 80244c8:	687b      	ldr	r3, [r7, #4]
 80244ca:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80244cc:	687b      	ldr	r3, [r7, #4]
 80244ce:	681b      	ldr	r3, [r3, #0]
 80244d0:	2b00      	cmp	r3, #0
 80244d2:	d102      	bne.n	80244da <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80244d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80244d8:	e000      	b.n	80244dc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80244da:	2300      	movs	r3, #0
}
 80244dc:	4618      	mov	r0, r3
 80244de:	3710      	adds	r7, #16
 80244e0:	46bd      	mov	sp, r7
 80244e2:	bd80      	pop	{r7, pc}

080244e4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80244e4:	b580      	push	{r7, lr}
 80244e6:	b082      	sub	sp, #8
 80244e8:	af00      	add	r7, sp, #0
 80244ea:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80244ec:	687b      	ldr	r3, [r7, #4]
 80244ee:	681b      	ldr	r3, [r3, #0]
 80244f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80244f4:	4618      	mov	r0, r3
 80244f6:	f7eb f8e1 	bl	800f6bc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80244fa:	bf00      	nop
 80244fc:	3708      	adds	r7, #8
 80244fe:	46bd      	mov	sp, r7
 8024500:	bd80      	pop	{r7, pc}

08024502 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8024502:	b580      	push	{r7, lr}
 8024504:	b082      	sub	sp, #8
 8024506:	af00      	add	r7, sp, #0
 8024508:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 802450a:	687b      	ldr	r3, [r7, #4]
 802450c:	681b      	ldr	r3, [r3, #0]
 802450e:	4618      	mov	r0, r3
 8024510:	f7eb f922 	bl	800f758 <osMutexRelease>
}
 8024514:	bf00      	nop
 8024516:	3708      	adds	r7, #8
 8024518:	46bd      	mov	sp, r7
 802451a:	bd80      	pop	{r7, pc}

0802451c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 802451c:	b580      	push	{r7, lr}
 802451e:	b08c      	sub	sp, #48	; 0x30
 8024520:	af00      	add	r7, sp, #0
 8024522:	60f8      	str	r0, [r7, #12]
 8024524:	60b9      	str	r1, [r7, #8]
 8024526:	607a      	str	r2, [r7, #4]
 8024528:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 802452a:	f107 0314 	add.w	r3, r7, #20
 802452e:	2200      	movs	r2, #0
 8024530:	601a      	str	r2, [r3, #0]
 8024532:	605a      	str	r2, [r3, #4]
 8024534:	609a      	str	r2, [r3, #8]
 8024536:	60da      	str	r2, [r3, #12]
 8024538:	611a      	str	r2, [r3, #16]
 802453a:	615a      	str	r2, [r3, #20]
 802453c:	619a      	str	r2, [r3, #24]
 802453e:	68fb      	ldr	r3, [r7, #12]
 8024540:	617b      	str	r3, [r7, #20]
 8024542:	68bb      	ldr	r3, [r7, #8]
 8024544:	61bb      	str	r3, [r7, #24]
 8024546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024548:	b21b      	sxth	r3, r3
 802454a:	83bb      	strh	r3, [r7, #28]
 802454c:	683b      	ldr	r3, [r7, #0]
 802454e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8024550:	f107 0314 	add.w	r3, r7, #20
 8024554:	6879      	ldr	r1, [r7, #4]
 8024556:	4618      	mov	r0, r3
 8024558:	f7ea ff82 	bl	800f460 <osThreadCreate>
 802455c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 802455e:	4618      	mov	r0, r3
 8024560:	3730      	adds	r7, #48	; 0x30
 8024562:	46bd      	mov	sp, r7
 8024564:	bd80      	pop	{r7, pc}
	...

08024568 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8024568:	b580      	push	{r7, lr}
 802456a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 802456c:	4b04      	ldr	r3, [pc, #16]	; (8024580 <sys_arch_protect+0x18>)
 802456e:	681b      	ldr	r3, [r3, #0]
 8024570:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8024574:	4618      	mov	r0, r3
 8024576:	f7eb f8a1 	bl	800f6bc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 802457a:	2301      	movs	r3, #1
}
 802457c:	4618      	mov	r0, r3
 802457e:	bd80      	pop	{r7, pc}
 8024580:	2001a03c 	.word	0x2001a03c

08024584 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8024584:	b580      	push	{r7, lr}
 8024586:	b082      	sub	sp, #8
 8024588:	af00      	add	r7, sp, #0
 802458a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 802458c:	4b04      	ldr	r3, [pc, #16]	; (80245a0 <sys_arch_unprotect+0x1c>)
 802458e:	681b      	ldr	r3, [r3, #0]
 8024590:	4618      	mov	r0, r3
 8024592:	f7eb f8e1 	bl	800f758 <osMutexRelease>
}
 8024596:	bf00      	nop
 8024598:	3708      	adds	r7, #8
 802459a:	46bd      	mov	sp, r7
 802459c:	bd80      	pop	{r7, pc}
 802459e:	bf00      	nop
 80245a0:	2001a03c 	.word	0x2001a03c

080245a4 <__cxa_pure_virtual>:
 80245a4:	b508      	push	{r3, lr}
 80245a6:	f000 f811 	bl	80245cc <_ZSt9terminatev>

080245aa <_ZdlPvj>:
 80245aa:	f000 b800 	b.w	80245ae <_ZdlPv>

080245ae <_ZdlPv>:
 80245ae:	f002 b921 	b.w	80267f4 <free>

080245b2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80245b2:	b508      	push	{r3, lr}
 80245b4:	4780      	blx	r0
 80245b6:	f002 f8ea 	bl	802678e <abort>
	...

080245bc <_ZSt13get_terminatev>:
 80245bc:	4b02      	ldr	r3, [pc, #8]	; (80245c8 <_ZSt13get_terminatev+0xc>)
 80245be:	6818      	ldr	r0, [r3, #0]
 80245c0:	f3bf 8f5b 	dmb	ish
 80245c4:	4770      	bx	lr
 80245c6:	bf00      	nop
 80245c8:	20000020 	.word	0x20000020

080245cc <_ZSt9terminatev>:
 80245cc:	b508      	push	{r3, lr}
 80245ce:	f7ff fff5 	bl	80245bc <_ZSt13get_terminatev>
 80245d2:	f7ff ffee 	bl	80245b2 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080245d8 <cos>:
 80245d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80245da:	ec51 0b10 	vmov	r0, r1, d0
 80245de:	4a1e      	ldr	r2, [pc, #120]	; (8024658 <cos+0x80>)
 80245e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80245e4:	4293      	cmp	r3, r2
 80245e6:	dc06      	bgt.n	80245f6 <cos+0x1e>
 80245e8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8024650 <cos+0x78>
 80245ec:	f000 fd78 	bl	80250e0 <__kernel_cos>
 80245f0:	ec51 0b10 	vmov	r0, r1, d0
 80245f4:	e007      	b.n	8024606 <cos+0x2e>
 80245f6:	4a19      	ldr	r2, [pc, #100]	; (802465c <cos+0x84>)
 80245f8:	4293      	cmp	r3, r2
 80245fa:	dd09      	ble.n	8024610 <cos+0x38>
 80245fc:	ee10 2a10 	vmov	r2, s0
 8024600:	460b      	mov	r3, r1
 8024602:	f7db fe41 	bl	8000288 <__aeabi_dsub>
 8024606:	ec41 0b10 	vmov	d0, r0, r1
 802460a:	b005      	add	sp, #20
 802460c:	f85d fb04 	ldr.w	pc, [sp], #4
 8024610:	4668      	mov	r0, sp
 8024612:	f000 fa45 	bl	8024aa0 <__ieee754_rem_pio2>
 8024616:	f000 0003 	and.w	r0, r0, #3
 802461a:	2801      	cmp	r0, #1
 802461c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024620:	ed9d 0b00 	vldr	d0, [sp]
 8024624:	d007      	beq.n	8024636 <cos+0x5e>
 8024626:	2802      	cmp	r0, #2
 8024628:	d00e      	beq.n	8024648 <cos+0x70>
 802462a:	2800      	cmp	r0, #0
 802462c:	d0de      	beq.n	80245ec <cos+0x14>
 802462e:	2001      	movs	r0, #1
 8024630:	f001 f95e 	bl	80258f0 <__kernel_sin>
 8024634:	e7dc      	b.n	80245f0 <cos+0x18>
 8024636:	f001 f95b 	bl	80258f0 <__kernel_sin>
 802463a:	ec53 2b10 	vmov	r2, r3, d0
 802463e:	ee10 0a10 	vmov	r0, s0
 8024642:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8024646:	e7de      	b.n	8024606 <cos+0x2e>
 8024648:	f000 fd4a 	bl	80250e0 <__kernel_cos>
 802464c:	e7f5      	b.n	802463a <cos+0x62>
 802464e:	bf00      	nop
	...
 8024658:	3fe921fb 	.word	0x3fe921fb
 802465c:	7fefffff 	.word	0x7fefffff

08024660 <round>:
 8024660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024662:	ec57 6b10 	vmov	r6, r7, d0
 8024666:	f3c7 500a 	ubfx	r0, r7, #20, #11
 802466a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 802466e:	2c13      	cmp	r4, #19
 8024670:	463b      	mov	r3, r7
 8024672:	463d      	mov	r5, r7
 8024674:	dc17      	bgt.n	80246a6 <round+0x46>
 8024676:	2c00      	cmp	r4, #0
 8024678:	da09      	bge.n	802468e <round+0x2e>
 802467a:	3401      	adds	r4, #1
 802467c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8024680:	d103      	bne.n	802468a <round+0x2a>
 8024682:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8024686:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802468a:	2100      	movs	r1, #0
 802468c:	e02c      	b.n	80246e8 <round+0x88>
 802468e:	4a18      	ldr	r2, [pc, #96]	; (80246f0 <round+0x90>)
 8024690:	4122      	asrs	r2, r4
 8024692:	4217      	tst	r7, r2
 8024694:	d100      	bne.n	8024698 <round+0x38>
 8024696:	b19e      	cbz	r6, 80246c0 <round+0x60>
 8024698:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 802469c:	4123      	asrs	r3, r4
 802469e:	442b      	add	r3, r5
 80246a0:	ea23 0302 	bic.w	r3, r3, r2
 80246a4:	e7f1      	b.n	802468a <round+0x2a>
 80246a6:	2c33      	cmp	r4, #51	; 0x33
 80246a8:	dd0d      	ble.n	80246c6 <round+0x66>
 80246aa:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80246ae:	d107      	bne.n	80246c0 <round+0x60>
 80246b0:	4630      	mov	r0, r6
 80246b2:	4639      	mov	r1, r7
 80246b4:	ee10 2a10 	vmov	r2, s0
 80246b8:	f7db fde8 	bl	800028c <__adddf3>
 80246bc:	4606      	mov	r6, r0
 80246be:	460f      	mov	r7, r1
 80246c0:	ec47 6b10 	vmov	d0, r6, r7
 80246c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80246c6:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80246ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80246ce:	40d0      	lsrs	r0, r2
 80246d0:	4206      	tst	r6, r0
 80246d2:	d0f5      	beq.n	80246c0 <round+0x60>
 80246d4:	2201      	movs	r2, #1
 80246d6:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80246da:	fa02 f404 	lsl.w	r4, r2, r4
 80246de:	1931      	adds	r1, r6, r4
 80246e0:	bf28      	it	cs
 80246e2:	189b      	addcs	r3, r3, r2
 80246e4:	ea21 0100 	bic.w	r1, r1, r0
 80246e8:	461f      	mov	r7, r3
 80246ea:	460e      	mov	r6, r1
 80246ec:	e7e8      	b.n	80246c0 <round+0x60>
 80246ee:	bf00      	nop
 80246f0:	000fffff 	.word	0x000fffff
 80246f4:	00000000 	.word	0x00000000

080246f8 <sin>:
 80246f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80246fa:	ec51 0b10 	vmov	r0, r1, d0
 80246fe:	4a20      	ldr	r2, [pc, #128]	; (8024780 <sin+0x88>)
 8024700:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8024704:	4293      	cmp	r3, r2
 8024706:	dc07      	bgt.n	8024718 <sin+0x20>
 8024708:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8024778 <sin+0x80>
 802470c:	2000      	movs	r0, #0
 802470e:	f001 f8ef 	bl	80258f0 <__kernel_sin>
 8024712:	ec51 0b10 	vmov	r0, r1, d0
 8024716:	e007      	b.n	8024728 <sin+0x30>
 8024718:	4a1a      	ldr	r2, [pc, #104]	; (8024784 <sin+0x8c>)
 802471a:	4293      	cmp	r3, r2
 802471c:	dd09      	ble.n	8024732 <sin+0x3a>
 802471e:	ee10 2a10 	vmov	r2, s0
 8024722:	460b      	mov	r3, r1
 8024724:	f7db fdb0 	bl	8000288 <__aeabi_dsub>
 8024728:	ec41 0b10 	vmov	d0, r0, r1
 802472c:	b005      	add	sp, #20
 802472e:	f85d fb04 	ldr.w	pc, [sp], #4
 8024732:	4668      	mov	r0, sp
 8024734:	f000 f9b4 	bl	8024aa0 <__ieee754_rem_pio2>
 8024738:	f000 0003 	and.w	r0, r0, #3
 802473c:	2801      	cmp	r0, #1
 802473e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8024742:	ed9d 0b00 	vldr	d0, [sp]
 8024746:	d004      	beq.n	8024752 <sin+0x5a>
 8024748:	2802      	cmp	r0, #2
 802474a:	d005      	beq.n	8024758 <sin+0x60>
 802474c:	b970      	cbnz	r0, 802476c <sin+0x74>
 802474e:	2001      	movs	r0, #1
 8024750:	e7dd      	b.n	802470e <sin+0x16>
 8024752:	f000 fcc5 	bl	80250e0 <__kernel_cos>
 8024756:	e7dc      	b.n	8024712 <sin+0x1a>
 8024758:	2001      	movs	r0, #1
 802475a:	f001 f8c9 	bl	80258f0 <__kernel_sin>
 802475e:	ec53 2b10 	vmov	r2, r3, d0
 8024762:	ee10 0a10 	vmov	r0, s0
 8024766:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802476a:	e7dd      	b.n	8024728 <sin+0x30>
 802476c:	f000 fcb8 	bl	80250e0 <__kernel_cos>
 8024770:	e7f5      	b.n	802475e <sin+0x66>
 8024772:	bf00      	nop
 8024774:	f3af 8000 	nop.w
	...
 8024780:	3fe921fb 	.word	0x3fe921fb
 8024784:	7fefffff 	.word	0x7fefffff

08024788 <cosf>:
 8024788:	ee10 3a10 	vmov	r3, s0
 802478c:	b507      	push	{r0, r1, r2, lr}
 802478e:	4a1c      	ldr	r2, [pc, #112]	; (8024800 <cosf+0x78>)
 8024790:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024794:	4293      	cmp	r3, r2
 8024796:	dc04      	bgt.n	80247a2 <cosf+0x1a>
 8024798:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8024804 <cosf+0x7c>
 802479c:	f001 f962 	bl	8025a64 <__kernel_cosf>
 80247a0:	e004      	b.n	80247ac <cosf+0x24>
 80247a2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80247a6:	db04      	blt.n	80247b2 <cosf+0x2a>
 80247a8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80247ac:	b003      	add	sp, #12
 80247ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80247b2:	4668      	mov	r0, sp
 80247b4:	f000 fb66 	bl	8024e84 <__ieee754_rem_pio2f>
 80247b8:	f000 0003 	and.w	r0, r0, #3
 80247bc:	2801      	cmp	r0, #1
 80247be:	d007      	beq.n	80247d0 <cosf+0x48>
 80247c0:	2802      	cmp	r0, #2
 80247c2:	d00e      	beq.n	80247e2 <cosf+0x5a>
 80247c4:	b9a0      	cbnz	r0, 80247f0 <cosf+0x68>
 80247c6:	eddd 0a01 	vldr	s1, [sp, #4]
 80247ca:	ed9d 0a00 	vldr	s0, [sp]
 80247ce:	e7e5      	b.n	802479c <cosf+0x14>
 80247d0:	eddd 0a01 	vldr	s1, [sp, #4]
 80247d4:	ed9d 0a00 	vldr	s0, [sp]
 80247d8:	f001 fc24 	bl	8026024 <__kernel_sinf>
 80247dc:	eeb1 0a40 	vneg.f32	s0, s0
 80247e0:	e7e4      	b.n	80247ac <cosf+0x24>
 80247e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80247e6:	ed9d 0a00 	vldr	s0, [sp]
 80247ea:	f001 f93b 	bl	8025a64 <__kernel_cosf>
 80247ee:	e7f5      	b.n	80247dc <cosf+0x54>
 80247f0:	2001      	movs	r0, #1
 80247f2:	eddd 0a01 	vldr	s1, [sp, #4]
 80247f6:	ed9d 0a00 	vldr	s0, [sp]
 80247fa:	f001 fc13 	bl	8026024 <__kernel_sinf>
 80247fe:	e7d5      	b.n	80247ac <cosf+0x24>
 8024800:	3f490fd8 	.word	0x3f490fd8
 8024804:	00000000 	.word	0x00000000

08024808 <roundf>:
 8024808:	ee10 0a10 	vmov	r0, s0
 802480c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8024810:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8024814:	2a16      	cmp	r2, #22
 8024816:	dc15      	bgt.n	8024844 <roundf+0x3c>
 8024818:	2a00      	cmp	r2, #0
 802481a:	da08      	bge.n	802482e <roundf+0x26>
 802481c:	3201      	adds	r2, #1
 802481e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8024822:	d101      	bne.n	8024828 <roundf+0x20>
 8024824:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8024828:	ee00 3a10 	vmov	s0, r3
 802482c:	4770      	bx	lr
 802482e:	4908      	ldr	r1, [pc, #32]	; (8024850 <roundf+0x48>)
 8024830:	4111      	asrs	r1, r2
 8024832:	4208      	tst	r0, r1
 8024834:	d0fa      	beq.n	802482c <roundf+0x24>
 8024836:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 802483a:	4113      	asrs	r3, r2
 802483c:	4403      	add	r3, r0
 802483e:	ea23 0301 	bic.w	r3, r3, r1
 8024842:	e7f1      	b.n	8024828 <roundf+0x20>
 8024844:	2a80      	cmp	r2, #128	; 0x80
 8024846:	d1f1      	bne.n	802482c <roundf+0x24>
 8024848:	ee30 0a00 	vadd.f32	s0, s0, s0
 802484c:	4770      	bx	lr
 802484e:	bf00      	nop
 8024850:	007fffff 	.word	0x007fffff

08024854 <sinf>:
 8024854:	ee10 3a10 	vmov	r3, s0
 8024858:	b507      	push	{r0, r1, r2, lr}
 802485a:	4a1d      	ldr	r2, [pc, #116]	; (80248d0 <sinf+0x7c>)
 802485c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024860:	4293      	cmp	r3, r2
 8024862:	dc05      	bgt.n	8024870 <sinf+0x1c>
 8024864:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80248d4 <sinf+0x80>
 8024868:	2000      	movs	r0, #0
 802486a:	f001 fbdb 	bl	8026024 <__kernel_sinf>
 802486e:	e004      	b.n	802487a <sinf+0x26>
 8024870:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8024874:	db04      	blt.n	8024880 <sinf+0x2c>
 8024876:	ee30 0a40 	vsub.f32	s0, s0, s0
 802487a:	b003      	add	sp, #12
 802487c:	f85d fb04 	ldr.w	pc, [sp], #4
 8024880:	4668      	mov	r0, sp
 8024882:	f000 faff 	bl	8024e84 <__ieee754_rem_pio2f>
 8024886:	f000 0003 	and.w	r0, r0, #3
 802488a:	2801      	cmp	r0, #1
 802488c:	d008      	beq.n	80248a0 <sinf+0x4c>
 802488e:	2802      	cmp	r0, #2
 8024890:	d00d      	beq.n	80248ae <sinf+0x5a>
 8024892:	b9b0      	cbnz	r0, 80248c2 <sinf+0x6e>
 8024894:	2001      	movs	r0, #1
 8024896:	eddd 0a01 	vldr	s1, [sp, #4]
 802489a:	ed9d 0a00 	vldr	s0, [sp]
 802489e:	e7e4      	b.n	802486a <sinf+0x16>
 80248a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80248a4:	ed9d 0a00 	vldr	s0, [sp]
 80248a8:	f001 f8dc 	bl	8025a64 <__kernel_cosf>
 80248ac:	e7e5      	b.n	802487a <sinf+0x26>
 80248ae:	2001      	movs	r0, #1
 80248b0:	eddd 0a01 	vldr	s1, [sp, #4]
 80248b4:	ed9d 0a00 	vldr	s0, [sp]
 80248b8:	f001 fbb4 	bl	8026024 <__kernel_sinf>
 80248bc:	eeb1 0a40 	vneg.f32	s0, s0
 80248c0:	e7db      	b.n	802487a <sinf+0x26>
 80248c2:	eddd 0a01 	vldr	s1, [sp, #4]
 80248c6:	ed9d 0a00 	vldr	s0, [sp]
 80248ca:	f001 f8cb 	bl	8025a64 <__kernel_cosf>
 80248ce:	e7f5      	b.n	80248bc <sinf+0x68>
 80248d0:	3f490fd8 	.word	0x3f490fd8
 80248d4:	00000000 	.word	0x00000000

080248d8 <atan2>:
 80248d8:	f000 b802 	b.w	80248e0 <__ieee754_atan2>
 80248dc:	0000      	movs	r0, r0
	...

080248e0 <__ieee754_atan2>:
 80248e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80248e4:	ec57 6b11 	vmov	r6, r7, d1
 80248e8:	4273      	negs	r3, r6
 80248ea:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80248ee:	4333      	orrs	r3, r6
 80248f0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8024a98 <__ieee754_atan2+0x1b8>
 80248f4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80248f8:	4573      	cmp	r3, lr
 80248fa:	ec51 0b10 	vmov	r0, r1, d0
 80248fe:	ee11 8a10 	vmov	r8, s2
 8024902:	d80a      	bhi.n	802491a <__ieee754_atan2+0x3a>
 8024904:	4244      	negs	r4, r0
 8024906:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802490a:	4304      	orrs	r4, r0
 802490c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8024910:	4574      	cmp	r4, lr
 8024912:	468c      	mov	ip, r1
 8024914:	ee10 9a10 	vmov	r9, s0
 8024918:	d907      	bls.n	802492a <__ieee754_atan2+0x4a>
 802491a:	4632      	mov	r2, r6
 802491c:	463b      	mov	r3, r7
 802491e:	f7db fcb5 	bl	800028c <__adddf3>
 8024922:	ec41 0b10 	vmov	d0, r0, r1
 8024926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802492a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 802492e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8024932:	4334      	orrs	r4, r6
 8024934:	d103      	bne.n	802493e <__ieee754_atan2+0x5e>
 8024936:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802493a:	f001 bbbd 	b.w	80260b8 <atan>
 802493e:	17bc      	asrs	r4, r7, #30
 8024940:	f004 0402 	and.w	r4, r4, #2
 8024944:	ea53 0909 	orrs.w	r9, r3, r9
 8024948:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 802494c:	d107      	bne.n	802495e <__ieee754_atan2+0x7e>
 802494e:	2c02      	cmp	r4, #2
 8024950:	d073      	beq.n	8024a3a <__ieee754_atan2+0x15a>
 8024952:	2c03      	cmp	r4, #3
 8024954:	d1e5      	bne.n	8024922 <__ieee754_atan2+0x42>
 8024956:	a13e      	add	r1, pc, #248	; (adr r1, 8024a50 <__ieee754_atan2+0x170>)
 8024958:	e9d1 0100 	ldrd	r0, r1, [r1]
 802495c:	e7e1      	b.n	8024922 <__ieee754_atan2+0x42>
 802495e:	ea52 0808 	orrs.w	r8, r2, r8
 8024962:	d106      	bne.n	8024972 <__ieee754_atan2+0x92>
 8024964:	f1bc 0f00 	cmp.w	ip, #0
 8024968:	da6b      	bge.n	8024a42 <__ieee754_atan2+0x162>
 802496a:	a13b      	add	r1, pc, #236	; (adr r1, 8024a58 <__ieee754_atan2+0x178>)
 802496c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024970:	e7d7      	b.n	8024922 <__ieee754_atan2+0x42>
 8024972:	4572      	cmp	r2, lr
 8024974:	d120      	bne.n	80249b8 <__ieee754_atan2+0xd8>
 8024976:	4293      	cmp	r3, r2
 8024978:	d111      	bne.n	802499e <__ieee754_atan2+0xbe>
 802497a:	2c02      	cmp	r4, #2
 802497c:	d007      	beq.n	802498e <__ieee754_atan2+0xae>
 802497e:	2c03      	cmp	r4, #3
 8024980:	d009      	beq.n	8024996 <__ieee754_atan2+0xb6>
 8024982:	2c01      	cmp	r4, #1
 8024984:	d155      	bne.n	8024a32 <__ieee754_atan2+0x152>
 8024986:	a136      	add	r1, pc, #216	; (adr r1, 8024a60 <__ieee754_atan2+0x180>)
 8024988:	e9d1 0100 	ldrd	r0, r1, [r1]
 802498c:	e7c9      	b.n	8024922 <__ieee754_atan2+0x42>
 802498e:	a136      	add	r1, pc, #216	; (adr r1, 8024a68 <__ieee754_atan2+0x188>)
 8024990:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024994:	e7c5      	b.n	8024922 <__ieee754_atan2+0x42>
 8024996:	a136      	add	r1, pc, #216	; (adr r1, 8024a70 <__ieee754_atan2+0x190>)
 8024998:	e9d1 0100 	ldrd	r0, r1, [r1]
 802499c:	e7c1      	b.n	8024922 <__ieee754_atan2+0x42>
 802499e:	2c02      	cmp	r4, #2
 80249a0:	d04b      	beq.n	8024a3a <__ieee754_atan2+0x15a>
 80249a2:	2c03      	cmp	r4, #3
 80249a4:	d0d7      	beq.n	8024956 <__ieee754_atan2+0x76>
 80249a6:	2c01      	cmp	r4, #1
 80249a8:	f04f 0000 	mov.w	r0, #0
 80249ac:	d102      	bne.n	80249b4 <__ieee754_atan2+0xd4>
 80249ae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80249b2:	e7b6      	b.n	8024922 <__ieee754_atan2+0x42>
 80249b4:	2100      	movs	r1, #0
 80249b6:	e7b4      	b.n	8024922 <__ieee754_atan2+0x42>
 80249b8:	4573      	cmp	r3, lr
 80249ba:	d0d3      	beq.n	8024964 <__ieee754_atan2+0x84>
 80249bc:	1a9b      	subs	r3, r3, r2
 80249be:	151b      	asrs	r3, r3, #20
 80249c0:	2b3c      	cmp	r3, #60	; 0x3c
 80249c2:	dc1e      	bgt.n	8024a02 <__ieee754_atan2+0x122>
 80249c4:	2f00      	cmp	r7, #0
 80249c6:	da01      	bge.n	80249cc <__ieee754_atan2+0xec>
 80249c8:	333c      	adds	r3, #60	; 0x3c
 80249ca:	db1e      	blt.n	8024a0a <__ieee754_atan2+0x12a>
 80249cc:	4632      	mov	r2, r6
 80249ce:	463b      	mov	r3, r7
 80249d0:	f7db ff3c 	bl	800084c <__aeabi_ddiv>
 80249d4:	ec41 0b10 	vmov	d0, r0, r1
 80249d8:	f001 fd0e 	bl	80263f8 <fabs>
 80249dc:	f001 fb6c 	bl	80260b8 <atan>
 80249e0:	ec51 0b10 	vmov	r0, r1, d0
 80249e4:	2c01      	cmp	r4, #1
 80249e6:	d013      	beq.n	8024a10 <__ieee754_atan2+0x130>
 80249e8:	2c02      	cmp	r4, #2
 80249ea:	d015      	beq.n	8024a18 <__ieee754_atan2+0x138>
 80249ec:	2c00      	cmp	r4, #0
 80249ee:	d098      	beq.n	8024922 <__ieee754_atan2+0x42>
 80249f0:	a321      	add	r3, pc, #132	; (adr r3, 8024a78 <__ieee754_atan2+0x198>)
 80249f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80249f6:	f7db fc47 	bl	8000288 <__aeabi_dsub>
 80249fa:	a321      	add	r3, pc, #132	; (adr r3, 8024a80 <__ieee754_atan2+0x1a0>)
 80249fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a00:	e014      	b.n	8024a2c <__ieee754_atan2+0x14c>
 8024a02:	a121      	add	r1, pc, #132	; (adr r1, 8024a88 <__ieee754_atan2+0x1a8>)
 8024a04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024a08:	e7ec      	b.n	80249e4 <__ieee754_atan2+0x104>
 8024a0a:	2000      	movs	r0, #0
 8024a0c:	2100      	movs	r1, #0
 8024a0e:	e7e9      	b.n	80249e4 <__ieee754_atan2+0x104>
 8024a10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024a14:	4619      	mov	r1, r3
 8024a16:	e784      	b.n	8024922 <__ieee754_atan2+0x42>
 8024a18:	a317      	add	r3, pc, #92	; (adr r3, 8024a78 <__ieee754_atan2+0x198>)
 8024a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024a1e:	f7db fc33 	bl	8000288 <__aeabi_dsub>
 8024a22:	4602      	mov	r2, r0
 8024a24:	460b      	mov	r3, r1
 8024a26:	a116      	add	r1, pc, #88	; (adr r1, 8024a80 <__ieee754_atan2+0x1a0>)
 8024a28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024a2c:	f7db fc2c 	bl	8000288 <__aeabi_dsub>
 8024a30:	e777      	b.n	8024922 <__ieee754_atan2+0x42>
 8024a32:	a117      	add	r1, pc, #92	; (adr r1, 8024a90 <__ieee754_atan2+0x1b0>)
 8024a34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024a38:	e773      	b.n	8024922 <__ieee754_atan2+0x42>
 8024a3a:	a111      	add	r1, pc, #68	; (adr r1, 8024a80 <__ieee754_atan2+0x1a0>)
 8024a3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024a40:	e76f      	b.n	8024922 <__ieee754_atan2+0x42>
 8024a42:	a111      	add	r1, pc, #68	; (adr r1, 8024a88 <__ieee754_atan2+0x1a8>)
 8024a44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024a48:	e76b      	b.n	8024922 <__ieee754_atan2+0x42>
 8024a4a:	bf00      	nop
 8024a4c:	f3af 8000 	nop.w
 8024a50:	54442d18 	.word	0x54442d18
 8024a54:	c00921fb 	.word	0xc00921fb
 8024a58:	54442d18 	.word	0x54442d18
 8024a5c:	bff921fb 	.word	0xbff921fb
 8024a60:	54442d18 	.word	0x54442d18
 8024a64:	bfe921fb 	.word	0xbfe921fb
 8024a68:	7f3321d2 	.word	0x7f3321d2
 8024a6c:	4002d97c 	.word	0x4002d97c
 8024a70:	7f3321d2 	.word	0x7f3321d2
 8024a74:	c002d97c 	.word	0xc002d97c
 8024a78:	33145c07 	.word	0x33145c07
 8024a7c:	3ca1a626 	.word	0x3ca1a626
 8024a80:	54442d18 	.word	0x54442d18
 8024a84:	400921fb 	.word	0x400921fb
 8024a88:	54442d18 	.word	0x54442d18
 8024a8c:	3ff921fb 	.word	0x3ff921fb
 8024a90:	54442d18 	.word	0x54442d18
 8024a94:	3fe921fb 	.word	0x3fe921fb
 8024a98:	7ff00000 	.word	0x7ff00000
 8024a9c:	00000000 	.word	0x00000000

08024aa0 <__ieee754_rem_pio2>:
 8024aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024aa4:	ec57 6b10 	vmov	r6, r7, d0
 8024aa8:	4bc3      	ldr	r3, [pc, #780]	; (8024db8 <__ieee754_rem_pio2+0x318>)
 8024aaa:	b08d      	sub	sp, #52	; 0x34
 8024aac:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8024ab0:	4598      	cmp	r8, r3
 8024ab2:	4604      	mov	r4, r0
 8024ab4:	9704      	str	r7, [sp, #16]
 8024ab6:	dc07      	bgt.n	8024ac8 <__ieee754_rem_pio2+0x28>
 8024ab8:	2200      	movs	r2, #0
 8024aba:	2300      	movs	r3, #0
 8024abc:	ed84 0b00 	vstr	d0, [r4]
 8024ac0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8024ac4:	2500      	movs	r5, #0
 8024ac6:	e027      	b.n	8024b18 <__ieee754_rem_pio2+0x78>
 8024ac8:	4bbc      	ldr	r3, [pc, #752]	; (8024dbc <__ieee754_rem_pio2+0x31c>)
 8024aca:	4598      	cmp	r8, r3
 8024acc:	dc75      	bgt.n	8024bba <__ieee754_rem_pio2+0x11a>
 8024ace:	9b04      	ldr	r3, [sp, #16]
 8024ad0:	4dbb      	ldr	r5, [pc, #748]	; (8024dc0 <__ieee754_rem_pio2+0x320>)
 8024ad2:	2b00      	cmp	r3, #0
 8024ad4:	ee10 0a10 	vmov	r0, s0
 8024ad8:	a3a9      	add	r3, pc, #676	; (adr r3, 8024d80 <__ieee754_rem_pio2+0x2e0>)
 8024ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ade:	4639      	mov	r1, r7
 8024ae0:	dd36      	ble.n	8024b50 <__ieee754_rem_pio2+0xb0>
 8024ae2:	f7db fbd1 	bl	8000288 <__aeabi_dsub>
 8024ae6:	45a8      	cmp	r8, r5
 8024ae8:	4606      	mov	r6, r0
 8024aea:	460f      	mov	r7, r1
 8024aec:	d018      	beq.n	8024b20 <__ieee754_rem_pio2+0x80>
 8024aee:	a3a6      	add	r3, pc, #664	; (adr r3, 8024d88 <__ieee754_rem_pio2+0x2e8>)
 8024af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024af4:	f7db fbc8 	bl	8000288 <__aeabi_dsub>
 8024af8:	4602      	mov	r2, r0
 8024afa:	460b      	mov	r3, r1
 8024afc:	e9c4 2300 	strd	r2, r3, [r4]
 8024b00:	4630      	mov	r0, r6
 8024b02:	4639      	mov	r1, r7
 8024b04:	f7db fbc0 	bl	8000288 <__aeabi_dsub>
 8024b08:	a39f      	add	r3, pc, #636	; (adr r3, 8024d88 <__ieee754_rem_pio2+0x2e8>)
 8024b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b0e:	f7db fbbb 	bl	8000288 <__aeabi_dsub>
 8024b12:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8024b16:	2501      	movs	r5, #1
 8024b18:	4628      	mov	r0, r5
 8024b1a:	b00d      	add	sp, #52	; 0x34
 8024b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b20:	a39b      	add	r3, pc, #620	; (adr r3, 8024d90 <__ieee754_rem_pio2+0x2f0>)
 8024b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b26:	f7db fbaf 	bl	8000288 <__aeabi_dsub>
 8024b2a:	a39b      	add	r3, pc, #620	; (adr r3, 8024d98 <__ieee754_rem_pio2+0x2f8>)
 8024b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b30:	4606      	mov	r6, r0
 8024b32:	460f      	mov	r7, r1
 8024b34:	f7db fba8 	bl	8000288 <__aeabi_dsub>
 8024b38:	4602      	mov	r2, r0
 8024b3a:	460b      	mov	r3, r1
 8024b3c:	e9c4 2300 	strd	r2, r3, [r4]
 8024b40:	4630      	mov	r0, r6
 8024b42:	4639      	mov	r1, r7
 8024b44:	f7db fba0 	bl	8000288 <__aeabi_dsub>
 8024b48:	a393      	add	r3, pc, #588	; (adr r3, 8024d98 <__ieee754_rem_pio2+0x2f8>)
 8024b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b4e:	e7de      	b.n	8024b0e <__ieee754_rem_pio2+0x6e>
 8024b50:	f7db fb9c 	bl	800028c <__adddf3>
 8024b54:	45a8      	cmp	r8, r5
 8024b56:	4606      	mov	r6, r0
 8024b58:	460f      	mov	r7, r1
 8024b5a:	d016      	beq.n	8024b8a <__ieee754_rem_pio2+0xea>
 8024b5c:	a38a      	add	r3, pc, #552	; (adr r3, 8024d88 <__ieee754_rem_pio2+0x2e8>)
 8024b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b62:	f7db fb93 	bl	800028c <__adddf3>
 8024b66:	4602      	mov	r2, r0
 8024b68:	460b      	mov	r3, r1
 8024b6a:	e9c4 2300 	strd	r2, r3, [r4]
 8024b6e:	4630      	mov	r0, r6
 8024b70:	4639      	mov	r1, r7
 8024b72:	f7db fb89 	bl	8000288 <__aeabi_dsub>
 8024b76:	a384      	add	r3, pc, #528	; (adr r3, 8024d88 <__ieee754_rem_pio2+0x2e8>)
 8024b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b7c:	f7db fb86 	bl	800028c <__adddf3>
 8024b80:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8024b84:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8024b88:	e7c6      	b.n	8024b18 <__ieee754_rem_pio2+0x78>
 8024b8a:	a381      	add	r3, pc, #516	; (adr r3, 8024d90 <__ieee754_rem_pio2+0x2f0>)
 8024b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b90:	f7db fb7c 	bl	800028c <__adddf3>
 8024b94:	a380      	add	r3, pc, #512	; (adr r3, 8024d98 <__ieee754_rem_pio2+0x2f8>)
 8024b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b9a:	4606      	mov	r6, r0
 8024b9c:	460f      	mov	r7, r1
 8024b9e:	f7db fb75 	bl	800028c <__adddf3>
 8024ba2:	4602      	mov	r2, r0
 8024ba4:	460b      	mov	r3, r1
 8024ba6:	e9c4 2300 	strd	r2, r3, [r4]
 8024baa:	4630      	mov	r0, r6
 8024bac:	4639      	mov	r1, r7
 8024bae:	f7db fb6b 	bl	8000288 <__aeabi_dsub>
 8024bb2:	a379      	add	r3, pc, #484	; (adr r3, 8024d98 <__ieee754_rem_pio2+0x2f8>)
 8024bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024bb8:	e7e0      	b.n	8024b7c <__ieee754_rem_pio2+0xdc>
 8024bba:	4b82      	ldr	r3, [pc, #520]	; (8024dc4 <__ieee754_rem_pio2+0x324>)
 8024bbc:	4598      	cmp	r8, r3
 8024bbe:	f300 80d0 	bgt.w	8024d62 <__ieee754_rem_pio2+0x2c2>
 8024bc2:	f001 fc19 	bl	80263f8 <fabs>
 8024bc6:	ec57 6b10 	vmov	r6, r7, d0
 8024bca:	ee10 0a10 	vmov	r0, s0
 8024bce:	a374      	add	r3, pc, #464	; (adr r3, 8024da0 <__ieee754_rem_pio2+0x300>)
 8024bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024bd4:	4639      	mov	r1, r7
 8024bd6:	f7db fd0f 	bl	80005f8 <__aeabi_dmul>
 8024bda:	2200      	movs	r2, #0
 8024bdc:	4b7a      	ldr	r3, [pc, #488]	; (8024dc8 <__ieee754_rem_pio2+0x328>)
 8024bde:	f7db fb55 	bl	800028c <__adddf3>
 8024be2:	f7db ffa3 	bl	8000b2c <__aeabi_d2iz>
 8024be6:	4605      	mov	r5, r0
 8024be8:	f7db fc9c 	bl	8000524 <__aeabi_i2d>
 8024bec:	a364      	add	r3, pc, #400	; (adr r3, 8024d80 <__ieee754_rem_pio2+0x2e0>)
 8024bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024bf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024bf6:	f7db fcff 	bl	80005f8 <__aeabi_dmul>
 8024bfa:	4602      	mov	r2, r0
 8024bfc:	460b      	mov	r3, r1
 8024bfe:	4630      	mov	r0, r6
 8024c00:	4639      	mov	r1, r7
 8024c02:	f7db fb41 	bl	8000288 <__aeabi_dsub>
 8024c06:	a360      	add	r3, pc, #384	; (adr r3, 8024d88 <__ieee754_rem_pio2+0x2e8>)
 8024c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c0c:	4682      	mov	sl, r0
 8024c0e:	468b      	mov	fp, r1
 8024c10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024c14:	f7db fcf0 	bl	80005f8 <__aeabi_dmul>
 8024c18:	2d1f      	cmp	r5, #31
 8024c1a:	4606      	mov	r6, r0
 8024c1c:	460f      	mov	r7, r1
 8024c1e:	dc0c      	bgt.n	8024c3a <__ieee754_rem_pio2+0x19a>
 8024c20:	1e6a      	subs	r2, r5, #1
 8024c22:	4b6a      	ldr	r3, [pc, #424]	; (8024dcc <__ieee754_rem_pio2+0x32c>)
 8024c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024c28:	4543      	cmp	r3, r8
 8024c2a:	d006      	beq.n	8024c3a <__ieee754_rem_pio2+0x19a>
 8024c2c:	4632      	mov	r2, r6
 8024c2e:	463b      	mov	r3, r7
 8024c30:	4650      	mov	r0, sl
 8024c32:	4659      	mov	r1, fp
 8024c34:	f7db fb28 	bl	8000288 <__aeabi_dsub>
 8024c38:	e00e      	b.n	8024c58 <__ieee754_rem_pio2+0x1b8>
 8024c3a:	4632      	mov	r2, r6
 8024c3c:	463b      	mov	r3, r7
 8024c3e:	4650      	mov	r0, sl
 8024c40:	4659      	mov	r1, fp
 8024c42:	f7db fb21 	bl	8000288 <__aeabi_dsub>
 8024c46:	ea4f 5328 	mov.w	r3, r8, asr #20
 8024c4a:	9305      	str	r3, [sp, #20]
 8024c4c:	9a05      	ldr	r2, [sp, #20]
 8024c4e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8024c52:	1ad3      	subs	r3, r2, r3
 8024c54:	2b10      	cmp	r3, #16
 8024c56:	dc02      	bgt.n	8024c5e <__ieee754_rem_pio2+0x1be>
 8024c58:	e9c4 0100 	strd	r0, r1, [r4]
 8024c5c:	e039      	b.n	8024cd2 <__ieee754_rem_pio2+0x232>
 8024c5e:	a34c      	add	r3, pc, #304	; (adr r3, 8024d90 <__ieee754_rem_pio2+0x2f0>)
 8024c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024c68:	f7db fcc6 	bl	80005f8 <__aeabi_dmul>
 8024c6c:	4606      	mov	r6, r0
 8024c6e:	460f      	mov	r7, r1
 8024c70:	4602      	mov	r2, r0
 8024c72:	460b      	mov	r3, r1
 8024c74:	4650      	mov	r0, sl
 8024c76:	4659      	mov	r1, fp
 8024c78:	f7db fb06 	bl	8000288 <__aeabi_dsub>
 8024c7c:	4602      	mov	r2, r0
 8024c7e:	460b      	mov	r3, r1
 8024c80:	4680      	mov	r8, r0
 8024c82:	4689      	mov	r9, r1
 8024c84:	4650      	mov	r0, sl
 8024c86:	4659      	mov	r1, fp
 8024c88:	f7db fafe 	bl	8000288 <__aeabi_dsub>
 8024c8c:	4632      	mov	r2, r6
 8024c8e:	463b      	mov	r3, r7
 8024c90:	f7db fafa 	bl	8000288 <__aeabi_dsub>
 8024c94:	a340      	add	r3, pc, #256	; (adr r3, 8024d98 <__ieee754_rem_pio2+0x2f8>)
 8024c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c9a:	4606      	mov	r6, r0
 8024c9c:	460f      	mov	r7, r1
 8024c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024ca2:	f7db fca9 	bl	80005f8 <__aeabi_dmul>
 8024ca6:	4632      	mov	r2, r6
 8024ca8:	463b      	mov	r3, r7
 8024caa:	f7db faed 	bl	8000288 <__aeabi_dsub>
 8024cae:	4602      	mov	r2, r0
 8024cb0:	460b      	mov	r3, r1
 8024cb2:	4606      	mov	r6, r0
 8024cb4:	460f      	mov	r7, r1
 8024cb6:	4640      	mov	r0, r8
 8024cb8:	4649      	mov	r1, r9
 8024cba:	f7db fae5 	bl	8000288 <__aeabi_dsub>
 8024cbe:	9a05      	ldr	r2, [sp, #20]
 8024cc0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8024cc4:	1ad3      	subs	r3, r2, r3
 8024cc6:	2b31      	cmp	r3, #49	; 0x31
 8024cc8:	dc20      	bgt.n	8024d0c <__ieee754_rem_pio2+0x26c>
 8024cca:	e9c4 0100 	strd	r0, r1, [r4]
 8024cce:	46c2      	mov	sl, r8
 8024cd0:	46cb      	mov	fp, r9
 8024cd2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8024cd6:	4650      	mov	r0, sl
 8024cd8:	4642      	mov	r2, r8
 8024cda:	464b      	mov	r3, r9
 8024cdc:	4659      	mov	r1, fp
 8024cde:	f7db fad3 	bl	8000288 <__aeabi_dsub>
 8024ce2:	463b      	mov	r3, r7
 8024ce4:	4632      	mov	r2, r6
 8024ce6:	f7db facf 	bl	8000288 <__aeabi_dsub>
 8024cea:	9b04      	ldr	r3, [sp, #16]
 8024cec:	2b00      	cmp	r3, #0
 8024cee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8024cf2:	f6bf af11 	bge.w	8024b18 <__ieee754_rem_pio2+0x78>
 8024cf6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8024cfa:	6063      	str	r3, [r4, #4]
 8024cfc:	f8c4 8000 	str.w	r8, [r4]
 8024d00:	60a0      	str	r0, [r4, #8]
 8024d02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024d06:	60e3      	str	r3, [r4, #12]
 8024d08:	426d      	negs	r5, r5
 8024d0a:	e705      	b.n	8024b18 <__ieee754_rem_pio2+0x78>
 8024d0c:	a326      	add	r3, pc, #152	; (adr r3, 8024da8 <__ieee754_rem_pio2+0x308>)
 8024d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024d16:	f7db fc6f 	bl	80005f8 <__aeabi_dmul>
 8024d1a:	4606      	mov	r6, r0
 8024d1c:	460f      	mov	r7, r1
 8024d1e:	4602      	mov	r2, r0
 8024d20:	460b      	mov	r3, r1
 8024d22:	4640      	mov	r0, r8
 8024d24:	4649      	mov	r1, r9
 8024d26:	f7db faaf 	bl	8000288 <__aeabi_dsub>
 8024d2a:	4602      	mov	r2, r0
 8024d2c:	460b      	mov	r3, r1
 8024d2e:	4682      	mov	sl, r0
 8024d30:	468b      	mov	fp, r1
 8024d32:	4640      	mov	r0, r8
 8024d34:	4649      	mov	r1, r9
 8024d36:	f7db faa7 	bl	8000288 <__aeabi_dsub>
 8024d3a:	4632      	mov	r2, r6
 8024d3c:	463b      	mov	r3, r7
 8024d3e:	f7db faa3 	bl	8000288 <__aeabi_dsub>
 8024d42:	a31b      	add	r3, pc, #108	; (adr r3, 8024db0 <__ieee754_rem_pio2+0x310>)
 8024d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d48:	4606      	mov	r6, r0
 8024d4a:	460f      	mov	r7, r1
 8024d4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024d50:	f7db fc52 	bl	80005f8 <__aeabi_dmul>
 8024d54:	4632      	mov	r2, r6
 8024d56:	463b      	mov	r3, r7
 8024d58:	f7db fa96 	bl	8000288 <__aeabi_dsub>
 8024d5c:	4606      	mov	r6, r0
 8024d5e:	460f      	mov	r7, r1
 8024d60:	e764      	b.n	8024c2c <__ieee754_rem_pio2+0x18c>
 8024d62:	4b1b      	ldr	r3, [pc, #108]	; (8024dd0 <__ieee754_rem_pio2+0x330>)
 8024d64:	4598      	cmp	r8, r3
 8024d66:	dd35      	ble.n	8024dd4 <__ieee754_rem_pio2+0x334>
 8024d68:	ee10 2a10 	vmov	r2, s0
 8024d6c:	463b      	mov	r3, r7
 8024d6e:	4630      	mov	r0, r6
 8024d70:	4639      	mov	r1, r7
 8024d72:	f7db fa89 	bl	8000288 <__aeabi_dsub>
 8024d76:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8024d7a:	e9c4 0100 	strd	r0, r1, [r4]
 8024d7e:	e6a1      	b.n	8024ac4 <__ieee754_rem_pio2+0x24>
 8024d80:	54400000 	.word	0x54400000
 8024d84:	3ff921fb 	.word	0x3ff921fb
 8024d88:	1a626331 	.word	0x1a626331
 8024d8c:	3dd0b461 	.word	0x3dd0b461
 8024d90:	1a600000 	.word	0x1a600000
 8024d94:	3dd0b461 	.word	0x3dd0b461
 8024d98:	2e037073 	.word	0x2e037073
 8024d9c:	3ba3198a 	.word	0x3ba3198a
 8024da0:	6dc9c883 	.word	0x6dc9c883
 8024da4:	3fe45f30 	.word	0x3fe45f30
 8024da8:	2e000000 	.word	0x2e000000
 8024dac:	3ba3198a 	.word	0x3ba3198a
 8024db0:	252049c1 	.word	0x252049c1
 8024db4:	397b839a 	.word	0x397b839a
 8024db8:	3fe921fb 	.word	0x3fe921fb
 8024dbc:	4002d97b 	.word	0x4002d97b
 8024dc0:	3ff921fb 	.word	0x3ff921fb
 8024dc4:	413921fb 	.word	0x413921fb
 8024dc8:	3fe00000 	.word	0x3fe00000
 8024dcc:	0802bdf8 	.word	0x0802bdf8
 8024dd0:	7fefffff 	.word	0x7fefffff
 8024dd4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8024dd8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8024ddc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8024de0:	4630      	mov	r0, r6
 8024de2:	460f      	mov	r7, r1
 8024de4:	f7db fea2 	bl	8000b2c <__aeabi_d2iz>
 8024de8:	f7db fb9c 	bl	8000524 <__aeabi_i2d>
 8024dec:	4602      	mov	r2, r0
 8024dee:	460b      	mov	r3, r1
 8024df0:	4630      	mov	r0, r6
 8024df2:	4639      	mov	r1, r7
 8024df4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8024df8:	f7db fa46 	bl	8000288 <__aeabi_dsub>
 8024dfc:	2200      	movs	r2, #0
 8024dfe:	4b1f      	ldr	r3, [pc, #124]	; (8024e7c <__ieee754_rem_pio2+0x3dc>)
 8024e00:	f7db fbfa 	bl	80005f8 <__aeabi_dmul>
 8024e04:	460f      	mov	r7, r1
 8024e06:	4606      	mov	r6, r0
 8024e08:	f7db fe90 	bl	8000b2c <__aeabi_d2iz>
 8024e0c:	f7db fb8a 	bl	8000524 <__aeabi_i2d>
 8024e10:	4602      	mov	r2, r0
 8024e12:	460b      	mov	r3, r1
 8024e14:	4630      	mov	r0, r6
 8024e16:	4639      	mov	r1, r7
 8024e18:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8024e1c:	f7db fa34 	bl	8000288 <__aeabi_dsub>
 8024e20:	2200      	movs	r2, #0
 8024e22:	4b16      	ldr	r3, [pc, #88]	; (8024e7c <__ieee754_rem_pio2+0x3dc>)
 8024e24:	f7db fbe8 	bl	80005f8 <__aeabi_dmul>
 8024e28:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8024e2c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8024e30:	f04f 0803 	mov.w	r8, #3
 8024e34:	2600      	movs	r6, #0
 8024e36:	2700      	movs	r7, #0
 8024e38:	4632      	mov	r2, r6
 8024e3a:	463b      	mov	r3, r7
 8024e3c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8024e40:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8024e44:	f7db fe40 	bl	8000ac8 <__aeabi_dcmpeq>
 8024e48:	b9b0      	cbnz	r0, 8024e78 <__ieee754_rem_pio2+0x3d8>
 8024e4a:	4b0d      	ldr	r3, [pc, #52]	; (8024e80 <__ieee754_rem_pio2+0x3e0>)
 8024e4c:	9301      	str	r3, [sp, #4]
 8024e4e:	2302      	movs	r3, #2
 8024e50:	9300      	str	r3, [sp, #0]
 8024e52:	462a      	mov	r2, r5
 8024e54:	4643      	mov	r3, r8
 8024e56:	4621      	mov	r1, r4
 8024e58:	a806      	add	r0, sp, #24
 8024e5a:	f000 fa09 	bl	8025270 <__kernel_rem_pio2>
 8024e5e:	9b04      	ldr	r3, [sp, #16]
 8024e60:	2b00      	cmp	r3, #0
 8024e62:	4605      	mov	r5, r0
 8024e64:	f6bf ae58 	bge.w	8024b18 <__ieee754_rem_pio2+0x78>
 8024e68:	6863      	ldr	r3, [r4, #4]
 8024e6a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8024e6e:	6063      	str	r3, [r4, #4]
 8024e70:	68e3      	ldr	r3, [r4, #12]
 8024e72:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8024e76:	e746      	b.n	8024d06 <__ieee754_rem_pio2+0x266>
 8024e78:	46d0      	mov	r8, sl
 8024e7a:	e7dd      	b.n	8024e38 <__ieee754_rem_pio2+0x398>
 8024e7c:	41700000 	.word	0x41700000
 8024e80:	0802be78 	.word	0x0802be78

08024e84 <__ieee754_rem_pio2f>:
 8024e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024e86:	ee10 6a10 	vmov	r6, s0
 8024e8a:	4b86      	ldr	r3, [pc, #536]	; (80250a4 <__ieee754_rem_pio2f+0x220>)
 8024e8c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8024e90:	429c      	cmp	r4, r3
 8024e92:	b087      	sub	sp, #28
 8024e94:	4605      	mov	r5, r0
 8024e96:	dc05      	bgt.n	8024ea4 <__ieee754_rem_pio2f+0x20>
 8024e98:	2300      	movs	r3, #0
 8024e9a:	ed85 0a00 	vstr	s0, [r5]
 8024e9e:	6043      	str	r3, [r0, #4]
 8024ea0:	2000      	movs	r0, #0
 8024ea2:	e020      	b.n	8024ee6 <__ieee754_rem_pio2f+0x62>
 8024ea4:	4b80      	ldr	r3, [pc, #512]	; (80250a8 <__ieee754_rem_pio2f+0x224>)
 8024ea6:	429c      	cmp	r4, r3
 8024ea8:	dc38      	bgt.n	8024f1c <__ieee754_rem_pio2f+0x98>
 8024eaa:	2e00      	cmp	r6, #0
 8024eac:	f024 040f 	bic.w	r4, r4, #15
 8024eb0:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80250ac <__ieee754_rem_pio2f+0x228>
 8024eb4:	4b7e      	ldr	r3, [pc, #504]	; (80250b0 <__ieee754_rem_pio2f+0x22c>)
 8024eb6:	dd18      	ble.n	8024eea <__ieee754_rem_pio2f+0x66>
 8024eb8:	429c      	cmp	r4, r3
 8024eba:	ee70 7a47 	vsub.f32	s15, s0, s14
 8024ebe:	bf09      	itett	eq
 8024ec0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80250b4 <__ieee754_rem_pio2f+0x230>
 8024ec4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80250b8 <__ieee754_rem_pio2f+0x234>
 8024ec8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8024ecc:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80250bc <__ieee754_rem_pio2f+0x238>
 8024ed0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8024ed4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8024ed8:	edc0 6a00 	vstr	s13, [r0]
 8024edc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8024ee0:	edc0 7a01 	vstr	s15, [r0, #4]
 8024ee4:	2001      	movs	r0, #1
 8024ee6:	b007      	add	sp, #28
 8024ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024eea:	429c      	cmp	r4, r3
 8024eec:	ee70 7a07 	vadd.f32	s15, s0, s14
 8024ef0:	bf09      	itett	eq
 8024ef2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80250b4 <__ieee754_rem_pio2f+0x230>
 8024ef6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80250b8 <__ieee754_rem_pio2f+0x234>
 8024efa:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8024efe:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80250bc <__ieee754_rem_pio2f+0x238>
 8024f02:	ee77 6a87 	vadd.f32	s13, s15, s14
 8024f06:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8024f0a:	edc0 6a00 	vstr	s13, [r0]
 8024f0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024f12:	edc0 7a01 	vstr	s15, [r0, #4]
 8024f16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024f1a:	e7e4      	b.n	8024ee6 <__ieee754_rem_pio2f+0x62>
 8024f1c:	4b68      	ldr	r3, [pc, #416]	; (80250c0 <__ieee754_rem_pio2f+0x23c>)
 8024f1e:	429c      	cmp	r4, r3
 8024f20:	dc71      	bgt.n	8025006 <__ieee754_rem_pio2f+0x182>
 8024f22:	f001 fb6f 	bl	8026604 <fabsf>
 8024f26:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80250c4 <__ieee754_rem_pio2f+0x240>
 8024f2a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8024f2e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8024f32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8024f36:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8024f3a:	ee17 0a90 	vmov	r0, s15
 8024f3e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80250ac <__ieee754_rem_pio2f+0x228>
 8024f42:	eeb1 7a46 	vneg.f32	s14, s12
 8024f46:	eea7 0a27 	vfma.f32	s0, s14, s15
 8024f4a:	281f      	cmp	r0, #31
 8024f4c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80250b8 <__ieee754_rem_pio2f+0x234>
 8024f50:	ee66 7a27 	vmul.f32	s15, s12, s15
 8024f54:	ee70 6a67 	vsub.f32	s13, s0, s15
 8024f58:	ee16 3a90 	vmov	r3, s13
 8024f5c:	dc1c      	bgt.n	8024f98 <__ieee754_rem_pio2f+0x114>
 8024f5e:	1e47      	subs	r7, r0, #1
 8024f60:	4959      	ldr	r1, [pc, #356]	; (80250c8 <__ieee754_rem_pio2f+0x244>)
 8024f62:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8024f66:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8024f6a:	428a      	cmp	r2, r1
 8024f6c:	d014      	beq.n	8024f98 <__ieee754_rem_pio2f+0x114>
 8024f6e:	602b      	str	r3, [r5, #0]
 8024f70:	ed95 7a00 	vldr	s14, [r5]
 8024f74:	ee30 0a47 	vsub.f32	s0, s0, s14
 8024f78:	2e00      	cmp	r6, #0
 8024f7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8024f7e:	ed85 0a01 	vstr	s0, [r5, #4]
 8024f82:	dab0      	bge.n	8024ee6 <__ieee754_rem_pio2f+0x62>
 8024f84:	eeb1 7a47 	vneg.f32	s14, s14
 8024f88:	eeb1 0a40 	vneg.f32	s0, s0
 8024f8c:	ed85 7a00 	vstr	s14, [r5]
 8024f90:	ed85 0a01 	vstr	s0, [r5, #4]
 8024f94:	4240      	negs	r0, r0
 8024f96:	e7a6      	b.n	8024ee6 <__ieee754_rem_pio2f+0x62>
 8024f98:	15e4      	asrs	r4, r4, #23
 8024f9a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8024f9e:	1aa2      	subs	r2, r4, r2
 8024fa0:	2a08      	cmp	r2, #8
 8024fa2:	dde4      	ble.n	8024f6e <__ieee754_rem_pio2f+0xea>
 8024fa4:	eddf 7a43 	vldr	s15, [pc, #268]	; 80250b4 <__ieee754_rem_pio2f+0x230>
 8024fa8:	eef0 6a40 	vmov.f32	s13, s0
 8024fac:	eee7 6a27 	vfma.f32	s13, s14, s15
 8024fb0:	ee30 0a66 	vsub.f32	s0, s0, s13
 8024fb4:	eea7 0a27 	vfma.f32	s0, s14, s15
 8024fb8:	eddf 7a40 	vldr	s15, [pc, #256]	; 80250bc <__ieee754_rem_pio2f+0x238>
 8024fbc:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8024fc0:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8024fc4:	eef0 7a40 	vmov.f32	s15, s0
 8024fc8:	ee15 3a90 	vmov	r3, s11
 8024fcc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8024fd0:	1aa4      	subs	r4, r4, r2
 8024fd2:	2c19      	cmp	r4, #25
 8024fd4:	dc04      	bgt.n	8024fe0 <__ieee754_rem_pio2f+0x15c>
 8024fd6:	edc5 5a00 	vstr	s11, [r5]
 8024fda:	eeb0 0a66 	vmov.f32	s0, s13
 8024fde:	e7c7      	b.n	8024f70 <__ieee754_rem_pio2f+0xec>
 8024fe0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80250cc <__ieee754_rem_pio2f+0x248>
 8024fe4:	eeb0 0a66 	vmov.f32	s0, s13
 8024fe8:	eea7 0a25 	vfma.f32	s0, s14, s11
 8024fec:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8024ff0:	eee7 7a25 	vfma.f32	s15, s14, s11
 8024ff4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80250d0 <__ieee754_rem_pio2f+0x24c>
 8024ff8:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8024ffc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8025000:	ed85 7a00 	vstr	s14, [r5]
 8025004:	e7b4      	b.n	8024f70 <__ieee754_rem_pio2f+0xec>
 8025006:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 802500a:	db06      	blt.n	802501a <__ieee754_rem_pio2f+0x196>
 802500c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8025010:	edc0 7a01 	vstr	s15, [r0, #4]
 8025014:	edc0 7a00 	vstr	s15, [r0]
 8025018:	e742      	b.n	8024ea0 <__ieee754_rem_pio2f+0x1c>
 802501a:	15e2      	asrs	r2, r4, #23
 802501c:	3a86      	subs	r2, #134	; 0x86
 802501e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8025022:	ee07 3a90 	vmov	s15, r3
 8025026:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802502a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80250d4 <__ieee754_rem_pio2f+0x250>
 802502e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8025032:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025036:	ed8d 7a03 	vstr	s14, [sp, #12]
 802503a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802503e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8025042:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8025046:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802504a:	ed8d 7a04 	vstr	s14, [sp, #16]
 802504e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8025052:	eef5 7a40 	vcmp.f32	s15, #0.0
 8025056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802505a:	edcd 7a05 	vstr	s15, [sp, #20]
 802505e:	d11e      	bne.n	802509e <__ieee754_rem_pio2f+0x21a>
 8025060:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8025064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025068:	bf0c      	ite	eq
 802506a:	2301      	moveq	r3, #1
 802506c:	2302      	movne	r3, #2
 802506e:	491a      	ldr	r1, [pc, #104]	; (80250d8 <__ieee754_rem_pio2f+0x254>)
 8025070:	9101      	str	r1, [sp, #4]
 8025072:	2102      	movs	r1, #2
 8025074:	9100      	str	r1, [sp, #0]
 8025076:	a803      	add	r0, sp, #12
 8025078:	4629      	mov	r1, r5
 802507a:	f000 fd51 	bl	8025b20 <__kernel_rem_pio2f>
 802507e:	2e00      	cmp	r6, #0
 8025080:	f6bf af31 	bge.w	8024ee6 <__ieee754_rem_pio2f+0x62>
 8025084:	edd5 7a00 	vldr	s15, [r5]
 8025088:	eef1 7a67 	vneg.f32	s15, s15
 802508c:	edc5 7a00 	vstr	s15, [r5]
 8025090:	edd5 7a01 	vldr	s15, [r5, #4]
 8025094:	eef1 7a67 	vneg.f32	s15, s15
 8025098:	edc5 7a01 	vstr	s15, [r5, #4]
 802509c:	e77a      	b.n	8024f94 <__ieee754_rem_pio2f+0x110>
 802509e:	2303      	movs	r3, #3
 80250a0:	e7e5      	b.n	802506e <__ieee754_rem_pio2f+0x1ea>
 80250a2:	bf00      	nop
 80250a4:	3f490fd8 	.word	0x3f490fd8
 80250a8:	4016cbe3 	.word	0x4016cbe3
 80250ac:	3fc90f80 	.word	0x3fc90f80
 80250b0:	3fc90fd0 	.word	0x3fc90fd0
 80250b4:	37354400 	.word	0x37354400
 80250b8:	37354443 	.word	0x37354443
 80250bc:	2e85a308 	.word	0x2e85a308
 80250c0:	43490f80 	.word	0x43490f80
 80250c4:	3f22f984 	.word	0x3f22f984
 80250c8:	0802bf80 	.word	0x0802bf80
 80250cc:	2e85a300 	.word	0x2e85a300
 80250d0:	248d3132 	.word	0x248d3132
 80250d4:	43800000 	.word	0x43800000
 80250d8:	0802c000 	.word	0x0802c000
 80250dc:	00000000 	.word	0x00000000

080250e0 <__kernel_cos>:
 80250e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80250e4:	ec59 8b10 	vmov	r8, r9, d0
 80250e8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80250ec:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80250f0:	ed2d 8b02 	vpush	{d8}
 80250f4:	eeb0 8a41 	vmov.f32	s16, s2
 80250f8:	eef0 8a61 	vmov.f32	s17, s3
 80250fc:	da07      	bge.n	802510e <__kernel_cos+0x2e>
 80250fe:	ee10 0a10 	vmov	r0, s0
 8025102:	4649      	mov	r1, r9
 8025104:	f7db fd12 	bl	8000b2c <__aeabi_d2iz>
 8025108:	2800      	cmp	r0, #0
 802510a:	f000 8089 	beq.w	8025220 <__kernel_cos+0x140>
 802510e:	4642      	mov	r2, r8
 8025110:	464b      	mov	r3, r9
 8025112:	4640      	mov	r0, r8
 8025114:	4649      	mov	r1, r9
 8025116:	f7db fa6f 	bl	80005f8 <__aeabi_dmul>
 802511a:	2200      	movs	r2, #0
 802511c:	4b4e      	ldr	r3, [pc, #312]	; (8025258 <__kernel_cos+0x178>)
 802511e:	4604      	mov	r4, r0
 8025120:	460d      	mov	r5, r1
 8025122:	f7db fa69 	bl	80005f8 <__aeabi_dmul>
 8025126:	a340      	add	r3, pc, #256	; (adr r3, 8025228 <__kernel_cos+0x148>)
 8025128:	e9d3 2300 	ldrd	r2, r3, [r3]
 802512c:	4682      	mov	sl, r0
 802512e:	468b      	mov	fp, r1
 8025130:	4620      	mov	r0, r4
 8025132:	4629      	mov	r1, r5
 8025134:	f7db fa60 	bl	80005f8 <__aeabi_dmul>
 8025138:	a33d      	add	r3, pc, #244	; (adr r3, 8025230 <__kernel_cos+0x150>)
 802513a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802513e:	f7db f8a5 	bl	800028c <__adddf3>
 8025142:	4622      	mov	r2, r4
 8025144:	462b      	mov	r3, r5
 8025146:	f7db fa57 	bl	80005f8 <__aeabi_dmul>
 802514a:	a33b      	add	r3, pc, #236	; (adr r3, 8025238 <__kernel_cos+0x158>)
 802514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025150:	f7db f89a 	bl	8000288 <__aeabi_dsub>
 8025154:	4622      	mov	r2, r4
 8025156:	462b      	mov	r3, r5
 8025158:	f7db fa4e 	bl	80005f8 <__aeabi_dmul>
 802515c:	a338      	add	r3, pc, #224	; (adr r3, 8025240 <__kernel_cos+0x160>)
 802515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025162:	f7db f893 	bl	800028c <__adddf3>
 8025166:	4622      	mov	r2, r4
 8025168:	462b      	mov	r3, r5
 802516a:	f7db fa45 	bl	80005f8 <__aeabi_dmul>
 802516e:	a336      	add	r3, pc, #216	; (adr r3, 8025248 <__kernel_cos+0x168>)
 8025170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025174:	f7db f888 	bl	8000288 <__aeabi_dsub>
 8025178:	4622      	mov	r2, r4
 802517a:	462b      	mov	r3, r5
 802517c:	f7db fa3c 	bl	80005f8 <__aeabi_dmul>
 8025180:	a333      	add	r3, pc, #204	; (adr r3, 8025250 <__kernel_cos+0x170>)
 8025182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025186:	f7db f881 	bl	800028c <__adddf3>
 802518a:	4622      	mov	r2, r4
 802518c:	462b      	mov	r3, r5
 802518e:	f7db fa33 	bl	80005f8 <__aeabi_dmul>
 8025192:	4622      	mov	r2, r4
 8025194:	462b      	mov	r3, r5
 8025196:	f7db fa2f 	bl	80005f8 <__aeabi_dmul>
 802519a:	ec53 2b18 	vmov	r2, r3, d8
 802519e:	4604      	mov	r4, r0
 80251a0:	460d      	mov	r5, r1
 80251a2:	4640      	mov	r0, r8
 80251a4:	4649      	mov	r1, r9
 80251a6:	f7db fa27 	bl	80005f8 <__aeabi_dmul>
 80251aa:	460b      	mov	r3, r1
 80251ac:	4602      	mov	r2, r0
 80251ae:	4629      	mov	r1, r5
 80251b0:	4620      	mov	r0, r4
 80251b2:	f7db f869 	bl	8000288 <__aeabi_dsub>
 80251b6:	4b29      	ldr	r3, [pc, #164]	; (802525c <__kernel_cos+0x17c>)
 80251b8:	429e      	cmp	r6, r3
 80251ba:	4680      	mov	r8, r0
 80251bc:	4689      	mov	r9, r1
 80251be:	dc11      	bgt.n	80251e4 <__kernel_cos+0x104>
 80251c0:	4602      	mov	r2, r0
 80251c2:	460b      	mov	r3, r1
 80251c4:	4650      	mov	r0, sl
 80251c6:	4659      	mov	r1, fp
 80251c8:	f7db f85e 	bl	8000288 <__aeabi_dsub>
 80251cc:	460b      	mov	r3, r1
 80251ce:	4924      	ldr	r1, [pc, #144]	; (8025260 <__kernel_cos+0x180>)
 80251d0:	4602      	mov	r2, r0
 80251d2:	2000      	movs	r0, #0
 80251d4:	f7db f858 	bl	8000288 <__aeabi_dsub>
 80251d8:	ecbd 8b02 	vpop	{d8}
 80251dc:	ec41 0b10 	vmov	d0, r0, r1
 80251e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80251e4:	4b1f      	ldr	r3, [pc, #124]	; (8025264 <__kernel_cos+0x184>)
 80251e6:	491e      	ldr	r1, [pc, #120]	; (8025260 <__kernel_cos+0x180>)
 80251e8:	429e      	cmp	r6, r3
 80251ea:	bfcc      	ite	gt
 80251ec:	4d1e      	ldrgt	r5, [pc, #120]	; (8025268 <__kernel_cos+0x188>)
 80251ee:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80251f2:	2400      	movs	r4, #0
 80251f4:	4622      	mov	r2, r4
 80251f6:	462b      	mov	r3, r5
 80251f8:	2000      	movs	r0, #0
 80251fa:	f7db f845 	bl	8000288 <__aeabi_dsub>
 80251fe:	4622      	mov	r2, r4
 8025200:	4606      	mov	r6, r0
 8025202:	460f      	mov	r7, r1
 8025204:	462b      	mov	r3, r5
 8025206:	4650      	mov	r0, sl
 8025208:	4659      	mov	r1, fp
 802520a:	f7db f83d 	bl	8000288 <__aeabi_dsub>
 802520e:	4642      	mov	r2, r8
 8025210:	464b      	mov	r3, r9
 8025212:	f7db f839 	bl	8000288 <__aeabi_dsub>
 8025216:	4602      	mov	r2, r0
 8025218:	460b      	mov	r3, r1
 802521a:	4630      	mov	r0, r6
 802521c:	4639      	mov	r1, r7
 802521e:	e7d9      	b.n	80251d4 <__kernel_cos+0xf4>
 8025220:	2000      	movs	r0, #0
 8025222:	490f      	ldr	r1, [pc, #60]	; (8025260 <__kernel_cos+0x180>)
 8025224:	e7d8      	b.n	80251d8 <__kernel_cos+0xf8>
 8025226:	bf00      	nop
 8025228:	be8838d4 	.word	0xbe8838d4
 802522c:	bda8fae9 	.word	0xbda8fae9
 8025230:	bdb4b1c4 	.word	0xbdb4b1c4
 8025234:	3e21ee9e 	.word	0x3e21ee9e
 8025238:	809c52ad 	.word	0x809c52ad
 802523c:	3e927e4f 	.word	0x3e927e4f
 8025240:	19cb1590 	.word	0x19cb1590
 8025244:	3efa01a0 	.word	0x3efa01a0
 8025248:	16c15177 	.word	0x16c15177
 802524c:	3f56c16c 	.word	0x3f56c16c
 8025250:	5555554c 	.word	0x5555554c
 8025254:	3fa55555 	.word	0x3fa55555
 8025258:	3fe00000 	.word	0x3fe00000
 802525c:	3fd33332 	.word	0x3fd33332
 8025260:	3ff00000 	.word	0x3ff00000
 8025264:	3fe90000 	.word	0x3fe90000
 8025268:	3fd20000 	.word	0x3fd20000
 802526c:	00000000 	.word	0x00000000

08025270 <__kernel_rem_pio2>:
 8025270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025274:	ed2d 8b02 	vpush	{d8}
 8025278:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 802527c:	1ed4      	subs	r4, r2, #3
 802527e:	9308      	str	r3, [sp, #32]
 8025280:	9101      	str	r1, [sp, #4]
 8025282:	4bc5      	ldr	r3, [pc, #788]	; (8025598 <__kernel_rem_pio2+0x328>)
 8025284:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8025286:	9009      	str	r0, [sp, #36]	; 0x24
 8025288:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 802528c:	9304      	str	r3, [sp, #16]
 802528e:	9b08      	ldr	r3, [sp, #32]
 8025290:	3b01      	subs	r3, #1
 8025292:	9307      	str	r3, [sp, #28]
 8025294:	2318      	movs	r3, #24
 8025296:	fb94 f4f3 	sdiv	r4, r4, r3
 802529a:	f06f 0317 	mvn.w	r3, #23
 802529e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80252a2:	fb04 3303 	mla	r3, r4, r3, r3
 80252a6:	eb03 0a02 	add.w	sl, r3, r2
 80252aa:	9b04      	ldr	r3, [sp, #16]
 80252ac:	9a07      	ldr	r2, [sp, #28]
 80252ae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8025588 <__kernel_rem_pio2+0x318>
 80252b2:	eb03 0802 	add.w	r8, r3, r2
 80252b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80252b8:	1aa7      	subs	r7, r4, r2
 80252ba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80252be:	ae22      	add	r6, sp, #136	; 0x88
 80252c0:	2500      	movs	r5, #0
 80252c2:	4545      	cmp	r5, r8
 80252c4:	dd13      	ble.n	80252ee <__kernel_rem_pio2+0x7e>
 80252c6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8025588 <__kernel_rem_pio2+0x318>
 80252ca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80252ce:	2600      	movs	r6, #0
 80252d0:	9b04      	ldr	r3, [sp, #16]
 80252d2:	429e      	cmp	r6, r3
 80252d4:	dc32      	bgt.n	802533c <__kernel_rem_pio2+0xcc>
 80252d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80252d8:	9302      	str	r3, [sp, #8]
 80252da:	9b08      	ldr	r3, [sp, #32]
 80252dc:	199d      	adds	r5, r3, r6
 80252de:	ab22      	add	r3, sp, #136	; 0x88
 80252e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80252e4:	9306      	str	r3, [sp, #24]
 80252e6:	ec59 8b18 	vmov	r8, r9, d8
 80252ea:	2700      	movs	r7, #0
 80252ec:	e01f      	b.n	802532e <__kernel_rem_pio2+0xbe>
 80252ee:	42ef      	cmn	r7, r5
 80252f0:	d407      	bmi.n	8025302 <__kernel_rem_pio2+0x92>
 80252f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80252f6:	f7db f915 	bl	8000524 <__aeabi_i2d>
 80252fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80252fe:	3501      	adds	r5, #1
 8025300:	e7df      	b.n	80252c2 <__kernel_rem_pio2+0x52>
 8025302:	ec51 0b18 	vmov	r0, r1, d8
 8025306:	e7f8      	b.n	80252fa <__kernel_rem_pio2+0x8a>
 8025308:	9906      	ldr	r1, [sp, #24]
 802530a:	9d02      	ldr	r5, [sp, #8]
 802530c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8025310:	9106      	str	r1, [sp, #24]
 8025312:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8025316:	9502      	str	r5, [sp, #8]
 8025318:	f7db f96e 	bl	80005f8 <__aeabi_dmul>
 802531c:	4602      	mov	r2, r0
 802531e:	460b      	mov	r3, r1
 8025320:	4640      	mov	r0, r8
 8025322:	4649      	mov	r1, r9
 8025324:	f7da ffb2 	bl	800028c <__adddf3>
 8025328:	3701      	adds	r7, #1
 802532a:	4680      	mov	r8, r0
 802532c:	4689      	mov	r9, r1
 802532e:	9b07      	ldr	r3, [sp, #28]
 8025330:	429f      	cmp	r7, r3
 8025332:	dde9      	ble.n	8025308 <__kernel_rem_pio2+0x98>
 8025334:	e8eb 8902 	strd	r8, r9, [fp], #8
 8025338:	3601      	adds	r6, #1
 802533a:	e7c9      	b.n	80252d0 <__kernel_rem_pio2+0x60>
 802533c:	9b04      	ldr	r3, [sp, #16]
 802533e:	aa0e      	add	r2, sp, #56	; 0x38
 8025340:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8025344:	930c      	str	r3, [sp, #48]	; 0x30
 8025346:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8025348:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802534c:	9c04      	ldr	r4, [sp, #16]
 802534e:	930b      	str	r3, [sp, #44]	; 0x2c
 8025350:	ab9a      	add	r3, sp, #616	; 0x268
 8025352:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8025356:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802535a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 802535e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8025362:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8025366:	ab9a      	add	r3, sp, #616	; 0x268
 8025368:	445b      	add	r3, fp
 802536a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 802536e:	2500      	movs	r5, #0
 8025370:	1b63      	subs	r3, r4, r5
 8025372:	2b00      	cmp	r3, #0
 8025374:	dc78      	bgt.n	8025468 <__kernel_rem_pio2+0x1f8>
 8025376:	4650      	mov	r0, sl
 8025378:	ec49 8b10 	vmov	d0, r8, r9
 802537c:	f001 f8cc 	bl	8026518 <scalbn>
 8025380:	ec57 6b10 	vmov	r6, r7, d0
 8025384:	2200      	movs	r2, #0
 8025386:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 802538a:	ee10 0a10 	vmov	r0, s0
 802538e:	4639      	mov	r1, r7
 8025390:	f7db f932 	bl	80005f8 <__aeabi_dmul>
 8025394:	ec41 0b10 	vmov	d0, r0, r1
 8025398:	f001 f83a 	bl	8026410 <floor>
 802539c:	2200      	movs	r2, #0
 802539e:	ec51 0b10 	vmov	r0, r1, d0
 80253a2:	4b7e      	ldr	r3, [pc, #504]	; (802559c <__kernel_rem_pio2+0x32c>)
 80253a4:	f7db f928 	bl	80005f8 <__aeabi_dmul>
 80253a8:	4602      	mov	r2, r0
 80253aa:	460b      	mov	r3, r1
 80253ac:	4630      	mov	r0, r6
 80253ae:	4639      	mov	r1, r7
 80253b0:	f7da ff6a 	bl	8000288 <__aeabi_dsub>
 80253b4:	460f      	mov	r7, r1
 80253b6:	4606      	mov	r6, r0
 80253b8:	f7db fbb8 	bl	8000b2c <__aeabi_d2iz>
 80253bc:	9006      	str	r0, [sp, #24]
 80253be:	f7db f8b1 	bl	8000524 <__aeabi_i2d>
 80253c2:	4602      	mov	r2, r0
 80253c4:	460b      	mov	r3, r1
 80253c6:	4630      	mov	r0, r6
 80253c8:	4639      	mov	r1, r7
 80253ca:	f7da ff5d 	bl	8000288 <__aeabi_dsub>
 80253ce:	f1ba 0f00 	cmp.w	sl, #0
 80253d2:	4606      	mov	r6, r0
 80253d4:	460f      	mov	r7, r1
 80253d6:	dd6c      	ble.n	80254b2 <__kernel_rem_pio2+0x242>
 80253d8:	1e62      	subs	r2, r4, #1
 80253da:	ab0e      	add	r3, sp, #56	; 0x38
 80253dc:	f1ca 0118 	rsb	r1, sl, #24
 80253e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80253e4:	9d06      	ldr	r5, [sp, #24]
 80253e6:	fa40 f301 	asr.w	r3, r0, r1
 80253ea:	441d      	add	r5, r3
 80253ec:	408b      	lsls	r3, r1
 80253ee:	1ac0      	subs	r0, r0, r3
 80253f0:	ab0e      	add	r3, sp, #56	; 0x38
 80253f2:	9506      	str	r5, [sp, #24]
 80253f4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80253f8:	f1ca 0317 	rsb	r3, sl, #23
 80253fc:	fa40 f303 	asr.w	r3, r0, r3
 8025400:	9302      	str	r3, [sp, #8]
 8025402:	9b02      	ldr	r3, [sp, #8]
 8025404:	2b00      	cmp	r3, #0
 8025406:	dd62      	ble.n	80254ce <__kernel_rem_pio2+0x25e>
 8025408:	9b06      	ldr	r3, [sp, #24]
 802540a:	2200      	movs	r2, #0
 802540c:	3301      	adds	r3, #1
 802540e:	9306      	str	r3, [sp, #24]
 8025410:	4615      	mov	r5, r2
 8025412:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8025416:	4294      	cmp	r4, r2
 8025418:	f300 8095 	bgt.w	8025546 <__kernel_rem_pio2+0x2d6>
 802541c:	f1ba 0f00 	cmp.w	sl, #0
 8025420:	dd07      	ble.n	8025432 <__kernel_rem_pio2+0x1c2>
 8025422:	f1ba 0f01 	cmp.w	sl, #1
 8025426:	f000 80a2 	beq.w	802556e <__kernel_rem_pio2+0x2fe>
 802542a:	f1ba 0f02 	cmp.w	sl, #2
 802542e:	f000 80c1 	beq.w	80255b4 <__kernel_rem_pio2+0x344>
 8025432:	9b02      	ldr	r3, [sp, #8]
 8025434:	2b02      	cmp	r3, #2
 8025436:	d14a      	bne.n	80254ce <__kernel_rem_pio2+0x25e>
 8025438:	4632      	mov	r2, r6
 802543a:	463b      	mov	r3, r7
 802543c:	2000      	movs	r0, #0
 802543e:	4958      	ldr	r1, [pc, #352]	; (80255a0 <__kernel_rem_pio2+0x330>)
 8025440:	f7da ff22 	bl	8000288 <__aeabi_dsub>
 8025444:	4606      	mov	r6, r0
 8025446:	460f      	mov	r7, r1
 8025448:	2d00      	cmp	r5, #0
 802544a:	d040      	beq.n	80254ce <__kernel_rem_pio2+0x25e>
 802544c:	4650      	mov	r0, sl
 802544e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8025590 <__kernel_rem_pio2+0x320>
 8025452:	f001 f861 	bl	8026518 <scalbn>
 8025456:	4630      	mov	r0, r6
 8025458:	4639      	mov	r1, r7
 802545a:	ec53 2b10 	vmov	r2, r3, d0
 802545e:	f7da ff13 	bl	8000288 <__aeabi_dsub>
 8025462:	4606      	mov	r6, r0
 8025464:	460f      	mov	r7, r1
 8025466:	e032      	b.n	80254ce <__kernel_rem_pio2+0x25e>
 8025468:	2200      	movs	r2, #0
 802546a:	4b4e      	ldr	r3, [pc, #312]	; (80255a4 <__kernel_rem_pio2+0x334>)
 802546c:	4640      	mov	r0, r8
 802546e:	4649      	mov	r1, r9
 8025470:	f7db f8c2 	bl	80005f8 <__aeabi_dmul>
 8025474:	f7db fb5a 	bl	8000b2c <__aeabi_d2iz>
 8025478:	f7db f854 	bl	8000524 <__aeabi_i2d>
 802547c:	2200      	movs	r2, #0
 802547e:	4b4a      	ldr	r3, [pc, #296]	; (80255a8 <__kernel_rem_pio2+0x338>)
 8025480:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025484:	f7db f8b8 	bl	80005f8 <__aeabi_dmul>
 8025488:	4602      	mov	r2, r0
 802548a:	460b      	mov	r3, r1
 802548c:	4640      	mov	r0, r8
 802548e:	4649      	mov	r1, r9
 8025490:	f7da fefa 	bl	8000288 <__aeabi_dsub>
 8025494:	f7db fb4a 	bl	8000b2c <__aeabi_d2iz>
 8025498:	ab0e      	add	r3, sp, #56	; 0x38
 802549a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 802549e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80254a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80254a6:	f7da fef1 	bl	800028c <__adddf3>
 80254aa:	3501      	adds	r5, #1
 80254ac:	4680      	mov	r8, r0
 80254ae:	4689      	mov	r9, r1
 80254b0:	e75e      	b.n	8025370 <__kernel_rem_pio2+0x100>
 80254b2:	d105      	bne.n	80254c0 <__kernel_rem_pio2+0x250>
 80254b4:	1e63      	subs	r3, r4, #1
 80254b6:	aa0e      	add	r2, sp, #56	; 0x38
 80254b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80254bc:	15c3      	asrs	r3, r0, #23
 80254be:	e79f      	b.n	8025400 <__kernel_rem_pio2+0x190>
 80254c0:	2200      	movs	r2, #0
 80254c2:	4b3a      	ldr	r3, [pc, #232]	; (80255ac <__kernel_rem_pio2+0x33c>)
 80254c4:	f7db fb1e 	bl	8000b04 <__aeabi_dcmpge>
 80254c8:	2800      	cmp	r0, #0
 80254ca:	d139      	bne.n	8025540 <__kernel_rem_pio2+0x2d0>
 80254cc:	9002      	str	r0, [sp, #8]
 80254ce:	2200      	movs	r2, #0
 80254d0:	2300      	movs	r3, #0
 80254d2:	4630      	mov	r0, r6
 80254d4:	4639      	mov	r1, r7
 80254d6:	f7db faf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80254da:	2800      	cmp	r0, #0
 80254dc:	f000 80c7 	beq.w	802566e <__kernel_rem_pio2+0x3fe>
 80254e0:	1e65      	subs	r5, r4, #1
 80254e2:	462b      	mov	r3, r5
 80254e4:	2200      	movs	r2, #0
 80254e6:	9904      	ldr	r1, [sp, #16]
 80254e8:	428b      	cmp	r3, r1
 80254ea:	da6a      	bge.n	80255c2 <__kernel_rem_pio2+0x352>
 80254ec:	2a00      	cmp	r2, #0
 80254ee:	f000 8088 	beq.w	8025602 <__kernel_rem_pio2+0x392>
 80254f2:	ab0e      	add	r3, sp, #56	; 0x38
 80254f4:	f1aa 0a18 	sub.w	sl, sl, #24
 80254f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80254fc:	2b00      	cmp	r3, #0
 80254fe:	f000 80b4 	beq.w	802566a <__kernel_rem_pio2+0x3fa>
 8025502:	4650      	mov	r0, sl
 8025504:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8025590 <__kernel_rem_pio2+0x320>
 8025508:	f001 f806 	bl	8026518 <scalbn>
 802550c:	00ec      	lsls	r4, r5, #3
 802550e:	ab72      	add	r3, sp, #456	; 0x1c8
 8025510:	191e      	adds	r6, r3, r4
 8025512:	ec59 8b10 	vmov	r8, r9, d0
 8025516:	f106 0a08 	add.w	sl, r6, #8
 802551a:	462f      	mov	r7, r5
 802551c:	2f00      	cmp	r7, #0
 802551e:	f280 80df 	bge.w	80256e0 <__kernel_rem_pio2+0x470>
 8025522:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8025588 <__kernel_rem_pio2+0x318>
 8025526:	f04f 0a00 	mov.w	sl, #0
 802552a:	eba5 030a 	sub.w	r3, r5, sl
 802552e:	2b00      	cmp	r3, #0
 8025530:	f2c0 810a 	blt.w	8025748 <__kernel_rem_pio2+0x4d8>
 8025534:	f8df b078 	ldr.w	fp, [pc, #120]	; 80255b0 <__kernel_rem_pio2+0x340>
 8025538:	ec59 8b18 	vmov	r8, r9, d8
 802553c:	2700      	movs	r7, #0
 802553e:	e0f5      	b.n	802572c <__kernel_rem_pio2+0x4bc>
 8025540:	2302      	movs	r3, #2
 8025542:	9302      	str	r3, [sp, #8]
 8025544:	e760      	b.n	8025408 <__kernel_rem_pio2+0x198>
 8025546:	ab0e      	add	r3, sp, #56	; 0x38
 8025548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802554c:	b94d      	cbnz	r5, 8025562 <__kernel_rem_pio2+0x2f2>
 802554e:	b12b      	cbz	r3, 802555c <__kernel_rem_pio2+0x2ec>
 8025550:	a80e      	add	r0, sp, #56	; 0x38
 8025552:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8025556:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 802555a:	2301      	movs	r3, #1
 802555c:	3201      	adds	r2, #1
 802555e:	461d      	mov	r5, r3
 8025560:	e759      	b.n	8025416 <__kernel_rem_pio2+0x1a6>
 8025562:	a80e      	add	r0, sp, #56	; 0x38
 8025564:	1acb      	subs	r3, r1, r3
 8025566:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 802556a:	462b      	mov	r3, r5
 802556c:	e7f6      	b.n	802555c <__kernel_rem_pio2+0x2ec>
 802556e:	1e62      	subs	r2, r4, #1
 8025570:	ab0e      	add	r3, sp, #56	; 0x38
 8025572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8025576:	f3c3 0316 	ubfx	r3, r3, #0, #23
 802557a:	a90e      	add	r1, sp, #56	; 0x38
 802557c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8025580:	e757      	b.n	8025432 <__kernel_rem_pio2+0x1c2>
 8025582:	bf00      	nop
 8025584:	f3af 8000 	nop.w
	...
 8025594:	3ff00000 	.word	0x3ff00000
 8025598:	0802c358 	.word	0x0802c358
 802559c:	40200000 	.word	0x40200000
 80255a0:	3ff00000 	.word	0x3ff00000
 80255a4:	3e700000 	.word	0x3e700000
 80255a8:	41700000 	.word	0x41700000
 80255ac:	3fe00000 	.word	0x3fe00000
 80255b0:	0802c318 	.word	0x0802c318
 80255b4:	1e62      	subs	r2, r4, #1
 80255b6:	ab0e      	add	r3, sp, #56	; 0x38
 80255b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80255bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80255c0:	e7db      	b.n	802557a <__kernel_rem_pio2+0x30a>
 80255c2:	a90e      	add	r1, sp, #56	; 0x38
 80255c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80255c8:	3b01      	subs	r3, #1
 80255ca:	430a      	orrs	r2, r1
 80255cc:	e78b      	b.n	80254e6 <__kernel_rem_pio2+0x276>
 80255ce:	3301      	adds	r3, #1
 80255d0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80255d4:	2900      	cmp	r1, #0
 80255d6:	d0fa      	beq.n	80255ce <__kernel_rem_pio2+0x35e>
 80255d8:	9a08      	ldr	r2, [sp, #32]
 80255da:	4422      	add	r2, r4
 80255dc:	00d2      	lsls	r2, r2, #3
 80255de:	a922      	add	r1, sp, #136	; 0x88
 80255e0:	18e3      	adds	r3, r4, r3
 80255e2:	9206      	str	r2, [sp, #24]
 80255e4:	440a      	add	r2, r1
 80255e6:	9302      	str	r3, [sp, #8]
 80255e8:	f10b 0108 	add.w	r1, fp, #8
 80255ec:	f102 0308 	add.w	r3, r2, #8
 80255f0:	1c66      	adds	r6, r4, #1
 80255f2:	910a      	str	r1, [sp, #40]	; 0x28
 80255f4:	2500      	movs	r5, #0
 80255f6:	930d      	str	r3, [sp, #52]	; 0x34
 80255f8:	9b02      	ldr	r3, [sp, #8]
 80255fa:	42b3      	cmp	r3, r6
 80255fc:	da04      	bge.n	8025608 <__kernel_rem_pio2+0x398>
 80255fe:	461c      	mov	r4, r3
 8025600:	e6a6      	b.n	8025350 <__kernel_rem_pio2+0xe0>
 8025602:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025604:	2301      	movs	r3, #1
 8025606:	e7e3      	b.n	80255d0 <__kernel_rem_pio2+0x360>
 8025608:	9b06      	ldr	r3, [sp, #24]
 802560a:	18ef      	adds	r7, r5, r3
 802560c:	ab22      	add	r3, sp, #136	; 0x88
 802560e:	441f      	add	r7, r3
 8025610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025612:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8025616:	f7da ff85 	bl	8000524 <__aeabi_i2d>
 802561a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802561c:	461c      	mov	r4, r3
 802561e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025620:	e9c7 0100 	strd	r0, r1, [r7]
 8025624:	eb03 0b05 	add.w	fp, r3, r5
 8025628:	2700      	movs	r7, #0
 802562a:	f04f 0800 	mov.w	r8, #0
 802562e:	f04f 0900 	mov.w	r9, #0
 8025632:	9b07      	ldr	r3, [sp, #28]
 8025634:	429f      	cmp	r7, r3
 8025636:	dd08      	ble.n	802564a <__kernel_rem_pio2+0x3da>
 8025638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802563a:	aa72      	add	r2, sp, #456	; 0x1c8
 802563c:	18eb      	adds	r3, r5, r3
 802563e:	4413      	add	r3, r2
 8025640:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8025644:	3601      	adds	r6, #1
 8025646:	3508      	adds	r5, #8
 8025648:	e7d6      	b.n	80255f8 <__kernel_rem_pio2+0x388>
 802564a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 802564e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8025652:	f7da ffd1 	bl	80005f8 <__aeabi_dmul>
 8025656:	4602      	mov	r2, r0
 8025658:	460b      	mov	r3, r1
 802565a:	4640      	mov	r0, r8
 802565c:	4649      	mov	r1, r9
 802565e:	f7da fe15 	bl	800028c <__adddf3>
 8025662:	3701      	adds	r7, #1
 8025664:	4680      	mov	r8, r0
 8025666:	4689      	mov	r9, r1
 8025668:	e7e3      	b.n	8025632 <__kernel_rem_pio2+0x3c2>
 802566a:	3d01      	subs	r5, #1
 802566c:	e741      	b.n	80254f2 <__kernel_rem_pio2+0x282>
 802566e:	f1ca 0000 	rsb	r0, sl, #0
 8025672:	ec47 6b10 	vmov	d0, r6, r7
 8025676:	f000 ff4f 	bl	8026518 <scalbn>
 802567a:	ec57 6b10 	vmov	r6, r7, d0
 802567e:	2200      	movs	r2, #0
 8025680:	4b99      	ldr	r3, [pc, #612]	; (80258e8 <__kernel_rem_pio2+0x678>)
 8025682:	ee10 0a10 	vmov	r0, s0
 8025686:	4639      	mov	r1, r7
 8025688:	f7db fa3c 	bl	8000b04 <__aeabi_dcmpge>
 802568c:	b1f8      	cbz	r0, 80256ce <__kernel_rem_pio2+0x45e>
 802568e:	2200      	movs	r2, #0
 8025690:	4b96      	ldr	r3, [pc, #600]	; (80258ec <__kernel_rem_pio2+0x67c>)
 8025692:	4630      	mov	r0, r6
 8025694:	4639      	mov	r1, r7
 8025696:	f7da ffaf 	bl	80005f8 <__aeabi_dmul>
 802569a:	f7db fa47 	bl	8000b2c <__aeabi_d2iz>
 802569e:	4680      	mov	r8, r0
 80256a0:	f7da ff40 	bl	8000524 <__aeabi_i2d>
 80256a4:	2200      	movs	r2, #0
 80256a6:	4b90      	ldr	r3, [pc, #576]	; (80258e8 <__kernel_rem_pio2+0x678>)
 80256a8:	f7da ffa6 	bl	80005f8 <__aeabi_dmul>
 80256ac:	460b      	mov	r3, r1
 80256ae:	4602      	mov	r2, r0
 80256b0:	4639      	mov	r1, r7
 80256b2:	4630      	mov	r0, r6
 80256b4:	f7da fde8 	bl	8000288 <__aeabi_dsub>
 80256b8:	f7db fa38 	bl	8000b2c <__aeabi_d2iz>
 80256bc:	1c65      	adds	r5, r4, #1
 80256be:	ab0e      	add	r3, sp, #56	; 0x38
 80256c0:	f10a 0a18 	add.w	sl, sl, #24
 80256c4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80256c8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80256cc:	e719      	b.n	8025502 <__kernel_rem_pio2+0x292>
 80256ce:	4630      	mov	r0, r6
 80256d0:	4639      	mov	r1, r7
 80256d2:	f7db fa2b 	bl	8000b2c <__aeabi_d2iz>
 80256d6:	ab0e      	add	r3, sp, #56	; 0x38
 80256d8:	4625      	mov	r5, r4
 80256da:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80256de:	e710      	b.n	8025502 <__kernel_rem_pio2+0x292>
 80256e0:	ab0e      	add	r3, sp, #56	; 0x38
 80256e2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80256e6:	f7da ff1d 	bl	8000524 <__aeabi_i2d>
 80256ea:	4642      	mov	r2, r8
 80256ec:	464b      	mov	r3, r9
 80256ee:	f7da ff83 	bl	80005f8 <__aeabi_dmul>
 80256f2:	2200      	movs	r2, #0
 80256f4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80256f8:	4b7c      	ldr	r3, [pc, #496]	; (80258ec <__kernel_rem_pio2+0x67c>)
 80256fa:	4640      	mov	r0, r8
 80256fc:	4649      	mov	r1, r9
 80256fe:	f7da ff7b 	bl	80005f8 <__aeabi_dmul>
 8025702:	3f01      	subs	r7, #1
 8025704:	4680      	mov	r8, r0
 8025706:	4689      	mov	r9, r1
 8025708:	e708      	b.n	802551c <__kernel_rem_pio2+0x2ac>
 802570a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 802570e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025712:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8025716:	f7da ff6f 	bl	80005f8 <__aeabi_dmul>
 802571a:	4602      	mov	r2, r0
 802571c:	460b      	mov	r3, r1
 802571e:	4640      	mov	r0, r8
 8025720:	4649      	mov	r1, r9
 8025722:	f7da fdb3 	bl	800028c <__adddf3>
 8025726:	3701      	adds	r7, #1
 8025728:	4680      	mov	r8, r0
 802572a:	4689      	mov	r9, r1
 802572c:	9b04      	ldr	r3, [sp, #16]
 802572e:	429f      	cmp	r7, r3
 8025730:	dc01      	bgt.n	8025736 <__kernel_rem_pio2+0x4c6>
 8025732:	45ba      	cmp	sl, r7
 8025734:	dae9      	bge.n	802570a <__kernel_rem_pio2+0x49a>
 8025736:	ab4a      	add	r3, sp, #296	; 0x128
 8025738:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 802573c:	e9c3 8900 	strd	r8, r9, [r3]
 8025740:	f10a 0a01 	add.w	sl, sl, #1
 8025744:	3e08      	subs	r6, #8
 8025746:	e6f0      	b.n	802552a <__kernel_rem_pio2+0x2ba>
 8025748:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 802574a:	2b03      	cmp	r3, #3
 802574c:	d85b      	bhi.n	8025806 <__kernel_rem_pio2+0x596>
 802574e:	e8df f003 	tbb	[pc, r3]
 8025752:	264a      	.short	0x264a
 8025754:	0226      	.short	0x0226
 8025756:	ab9a      	add	r3, sp, #616	; 0x268
 8025758:	441c      	add	r4, r3
 802575a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 802575e:	46a2      	mov	sl, r4
 8025760:	46ab      	mov	fp, r5
 8025762:	f1bb 0f00 	cmp.w	fp, #0
 8025766:	dc6c      	bgt.n	8025842 <__kernel_rem_pio2+0x5d2>
 8025768:	46a2      	mov	sl, r4
 802576a:	46ab      	mov	fp, r5
 802576c:	f1bb 0f01 	cmp.w	fp, #1
 8025770:	f300 8086 	bgt.w	8025880 <__kernel_rem_pio2+0x610>
 8025774:	2000      	movs	r0, #0
 8025776:	2100      	movs	r1, #0
 8025778:	2d01      	cmp	r5, #1
 802577a:	f300 80a0 	bgt.w	80258be <__kernel_rem_pio2+0x64e>
 802577e:	9b02      	ldr	r3, [sp, #8]
 8025780:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8025784:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8025788:	2b00      	cmp	r3, #0
 802578a:	f040 809e 	bne.w	80258ca <__kernel_rem_pio2+0x65a>
 802578e:	9b01      	ldr	r3, [sp, #4]
 8025790:	e9c3 7800 	strd	r7, r8, [r3]
 8025794:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8025798:	e9c3 0104 	strd	r0, r1, [r3, #16]
 802579c:	e033      	b.n	8025806 <__kernel_rem_pio2+0x596>
 802579e:	3408      	adds	r4, #8
 80257a0:	ab4a      	add	r3, sp, #296	; 0x128
 80257a2:	441c      	add	r4, r3
 80257a4:	462e      	mov	r6, r5
 80257a6:	2000      	movs	r0, #0
 80257a8:	2100      	movs	r1, #0
 80257aa:	2e00      	cmp	r6, #0
 80257ac:	da3a      	bge.n	8025824 <__kernel_rem_pio2+0x5b4>
 80257ae:	9b02      	ldr	r3, [sp, #8]
 80257b0:	2b00      	cmp	r3, #0
 80257b2:	d03d      	beq.n	8025830 <__kernel_rem_pio2+0x5c0>
 80257b4:	4602      	mov	r2, r0
 80257b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80257ba:	9c01      	ldr	r4, [sp, #4]
 80257bc:	e9c4 2300 	strd	r2, r3, [r4]
 80257c0:	4602      	mov	r2, r0
 80257c2:	460b      	mov	r3, r1
 80257c4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80257c8:	f7da fd5e 	bl	8000288 <__aeabi_dsub>
 80257cc:	ae4c      	add	r6, sp, #304	; 0x130
 80257ce:	2401      	movs	r4, #1
 80257d0:	42a5      	cmp	r5, r4
 80257d2:	da30      	bge.n	8025836 <__kernel_rem_pio2+0x5c6>
 80257d4:	9b02      	ldr	r3, [sp, #8]
 80257d6:	b113      	cbz	r3, 80257de <__kernel_rem_pio2+0x56e>
 80257d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80257dc:	4619      	mov	r1, r3
 80257de:	9b01      	ldr	r3, [sp, #4]
 80257e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80257e4:	e00f      	b.n	8025806 <__kernel_rem_pio2+0x596>
 80257e6:	ab9a      	add	r3, sp, #616	; 0x268
 80257e8:	441c      	add	r4, r3
 80257ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80257ee:	2000      	movs	r0, #0
 80257f0:	2100      	movs	r1, #0
 80257f2:	2d00      	cmp	r5, #0
 80257f4:	da10      	bge.n	8025818 <__kernel_rem_pio2+0x5a8>
 80257f6:	9b02      	ldr	r3, [sp, #8]
 80257f8:	b113      	cbz	r3, 8025800 <__kernel_rem_pio2+0x590>
 80257fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80257fe:	4619      	mov	r1, r3
 8025800:	9b01      	ldr	r3, [sp, #4]
 8025802:	e9c3 0100 	strd	r0, r1, [r3]
 8025806:	9b06      	ldr	r3, [sp, #24]
 8025808:	f003 0007 	and.w	r0, r3, #7
 802580c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8025810:	ecbd 8b02 	vpop	{d8}
 8025814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025818:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 802581c:	f7da fd36 	bl	800028c <__adddf3>
 8025820:	3d01      	subs	r5, #1
 8025822:	e7e6      	b.n	80257f2 <__kernel_rem_pio2+0x582>
 8025824:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8025828:	f7da fd30 	bl	800028c <__adddf3>
 802582c:	3e01      	subs	r6, #1
 802582e:	e7bc      	b.n	80257aa <__kernel_rem_pio2+0x53a>
 8025830:	4602      	mov	r2, r0
 8025832:	460b      	mov	r3, r1
 8025834:	e7c1      	b.n	80257ba <__kernel_rem_pio2+0x54a>
 8025836:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 802583a:	f7da fd27 	bl	800028c <__adddf3>
 802583e:	3401      	adds	r4, #1
 8025840:	e7c6      	b.n	80257d0 <__kernel_rem_pio2+0x560>
 8025842:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8025846:	ed3a 7b02 	vldmdb	sl!, {d7}
 802584a:	4640      	mov	r0, r8
 802584c:	ec53 2b17 	vmov	r2, r3, d7
 8025850:	4649      	mov	r1, r9
 8025852:	ed8d 7b04 	vstr	d7, [sp, #16]
 8025856:	f7da fd19 	bl	800028c <__adddf3>
 802585a:	4602      	mov	r2, r0
 802585c:	460b      	mov	r3, r1
 802585e:	4606      	mov	r6, r0
 8025860:	460f      	mov	r7, r1
 8025862:	4640      	mov	r0, r8
 8025864:	4649      	mov	r1, r9
 8025866:	f7da fd0f 	bl	8000288 <__aeabi_dsub>
 802586a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802586e:	f7da fd0d 	bl	800028c <__adddf3>
 8025872:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8025876:	e9ca 0100 	strd	r0, r1, [sl]
 802587a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 802587e:	e770      	b.n	8025762 <__kernel_rem_pio2+0x4f2>
 8025880:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8025884:	ed3a 7b02 	vldmdb	sl!, {d7}
 8025888:	4630      	mov	r0, r6
 802588a:	ec53 2b17 	vmov	r2, r3, d7
 802588e:	4639      	mov	r1, r7
 8025890:	ed8d 7b04 	vstr	d7, [sp, #16]
 8025894:	f7da fcfa 	bl	800028c <__adddf3>
 8025898:	4602      	mov	r2, r0
 802589a:	460b      	mov	r3, r1
 802589c:	4680      	mov	r8, r0
 802589e:	4689      	mov	r9, r1
 80258a0:	4630      	mov	r0, r6
 80258a2:	4639      	mov	r1, r7
 80258a4:	f7da fcf0 	bl	8000288 <__aeabi_dsub>
 80258a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80258ac:	f7da fcee 	bl	800028c <__adddf3>
 80258b0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80258b4:	e9ca 0100 	strd	r0, r1, [sl]
 80258b8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80258bc:	e756      	b.n	802576c <__kernel_rem_pio2+0x4fc>
 80258be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80258c2:	f7da fce3 	bl	800028c <__adddf3>
 80258c6:	3d01      	subs	r5, #1
 80258c8:	e756      	b.n	8025778 <__kernel_rem_pio2+0x508>
 80258ca:	9b01      	ldr	r3, [sp, #4]
 80258cc:	9a01      	ldr	r2, [sp, #4]
 80258ce:	601f      	str	r7, [r3, #0]
 80258d0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80258d4:	605c      	str	r4, [r3, #4]
 80258d6:	609d      	str	r5, [r3, #8]
 80258d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80258dc:	60d3      	str	r3, [r2, #12]
 80258de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80258e2:	6110      	str	r0, [r2, #16]
 80258e4:	6153      	str	r3, [r2, #20]
 80258e6:	e78e      	b.n	8025806 <__kernel_rem_pio2+0x596>
 80258e8:	41700000 	.word	0x41700000
 80258ec:	3e700000 	.word	0x3e700000

080258f0 <__kernel_sin>:
 80258f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80258f4:	ec55 4b10 	vmov	r4, r5, d0
 80258f8:	b085      	sub	sp, #20
 80258fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80258fe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8025902:	ed8d 1b00 	vstr	d1, [sp]
 8025906:	9002      	str	r0, [sp, #8]
 8025908:	da06      	bge.n	8025918 <__kernel_sin+0x28>
 802590a:	ee10 0a10 	vmov	r0, s0
 802590e:	4629      	mov	r1, r5
 8025910:	f7db f90c 	bl	8000b2c <__aeabi_d2iz>
 8025914:	2800      	cmp	r0, #0
 8025916:	d051      	beq.n	80259bc <__kernel_sin+0xcc>
 8025918:	4622      	mov	r2, r4
 802591a:	462b      	mov	r3, r5
 802591c:	4620      	mov	r0, r4
 802591e:	4629      	mov	r1, r5
 8025920:	f7da fe6a 	bl	80005f8 <__aeabi_dmul>
 8025924:	4682      	mov	sl, r0
 8025926:	468b      	mov	fp, r1
 8025928:	4602      	mov	r2, r0
 802592a:	460b      	mov	r3, r1
 802592c:	4620      	mov	r0, r4
 802592e:	4629      	mov	r1, r5
 8025930:	f7da fe62 	bl	80005f8 <__aeabi_dmul>
 8025934:	a341      	add	r3, pc, #260	; (adr r3, 8025a3c <__kernel_sin+0x14c>)
 8025936:	e9d3 2300 	ldrd	r2, r3, [r3]
 802593a:	4680      	mov	r8, r0
 802593c:	4689      	mov	r9, r1
 802593e:	4650      	mov	r0, sl
 8025940:	4659      	mov	r1, fp
 8025942:	f7da fe59 	bl	80005f8 <__aeabi_dmul>
 8025946:	a33f      	add	r3, pc, #252	; (adr r3, 8025a44 <__kernel_sin+0x154>)
 8025948:	e9d3 2300 	ldrd	r2, r3, [r3]
 802594c:	f7da fc9c 	bl	8000288 <__aeabi_dsub>
 8025950:	4652      	mov	r2, sl
 8025952:	465b      	mov	r3, fp
 8025954:	f7da fe50 	bl	80005f8 <__aeabi_dmul>
 8025958:	a33c      	add	r3, pc, #240	; (adr r3, 8025a4c <__kernel_sin+0x15c>)
 802595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802595e:	f7da fc95 	bl	800028c <__adddf3>
 8025962:	4652      	mov	r2, sl
 8025964:	465b      	mov	r3, fp
 8025966:	f7da fe47 	bl	80005f8 <__aeabi_dmul>
 802596a:	a33a      	add	r3, pc, #232	; (adr r3, 8025a54 <__kernel_sin+0x164>)
 802596c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025970:	f7da fc8a 	bl	8000288 <__aeabi_dsub>
 8025974:	4652      	mov	r2, sl
 8025976:	465b      	mov	r3, fp
 8025978:	f7da fe3e 	bl	80005f8 <__aeabi_dmul>
 802597c:	a337      	add	r3, pc, #220	; (adr r3, 8025a5c <__kernel_sin+0x16c>)
 802597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025982:	f7da fc83 	bl	800028c <__adddf3>
 8025986:	9b02      	ldr	r3, [sp, #8]
 8025988:	4606      	mov	r6, r0
 802598a:	460f      	mov	r7, r1
 802598c:	b9db      	cbnz	r3, 80259c6 <__kernel_sin+0xd6>
 802598e:	4602      	mov	r2, r0
 8025990:	460b      	mov	r3, r1
 8025992:	4650      	mov	r0, sl
 8025994:	4659      	mov	r1, fp
 8025996:	f7da fe2f 	bl	80005f8 <__aeabi_dmul>
 802599a:	a325      	add	r3, pc, #148	; (adr r3, 8025a30 <__kernel_sin+0x140>)
 802599c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80259a0:	f7da fc72 	bl	8000288 <__aeabi_dsub>
 80259a4:	4642      	mov	r2, r8
 80259a6:	464b      	mov	r3, r9
 80259a8:	f7da fe26 	bl	80005f8 <__aeabi_dmul>
 80259ac:	4602      	mov	r2, r0
 80259ae:	460b      	mov	r3, r1
 80259b0:	4620      	mov	r0, r4
 80259b2:	4629      	mov	r1, r5
 80259b4:	f7da fc6a 	bl	800028c <__adddf3>
 80259b8:	4604      	mov	r4, r0
 80259ba:	460d      	mov	r5, r1
 80259bc:	ec45 4b10 	vmov	d0, r4, r5
 80259c0:	b005      	add	sp, #20
 80259c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80259c6:	2200      	movs	r2, #0
 80259c8:	4b1b      	ldr	r3, [pc, #108]	; (8025a38 <__kernel_sin+0x148>)
 80259ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80259ce:	f7da fe13 	bl	80005f8 <__aeabi_dmul>
 80259d2:	4632      	mov	r2, r6
 80259d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80259d8:	463b      	mov	r3, r7
 80259da:	4640      	mov	r0, r8
 80259dc:	4649      	mov	r1, r9
 80259de:	f7da fe0b 	bl	80005f8 <__aeabi_dmul>
 80259e2:	4602      	mov	r2, r0
 80259e4:	460b      	mov	r3, r1
 80259e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80259ea:	f7da fc4d 	bl	8000288 <__aeabi_dsub>
 80259ee:	4652      	mov	r2, sl
 80259f0:	465b      	mov	r3, fp
 80259f2:	f7da fe01 	bl	80005f8 <__aeabi_dmul>
 80259f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80259fa:	f7da fc45 	bl	8000288 <__aeabi_dsub>
 80259fe:	a30c      	add	r3, pc, #48	; (adr r3, 8025a30 <__kernel_sin+0x140>)
 8025a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a04:	4606      	mov	r6, r0
 8025a06:	460f      	mov	r7, r1
 8025a08:	4640      	mov	r0, r8
 8025a0a:	4649      	mov	r1, r9
 8025a0c:	f7da fdf4 	bl	80005f8 <__aeabi_dmul>
 8025a10:	4602      	mov	r2, r0
 8025a12:	460b      	mov	r3, r1
 8025a14:	4630      	mov	r0, r6
 8025a16:	4639      	mov	r1, r7
 8025a18:	f7da fc38 	bl	800028c <__adddf3>
 8025a1c:	4602      	mov	r2, r0
 8025a1e:	460b      	mov	r3, r1
 8025a20:	4620      	mov	r0, r4
 8025a22:	4629      	mov	r1, r5
 8025a24:	f7da fc30 	bl	8000288 <__aeabi_dsub>
 8025a28:	e7c6      	b.n	80259b8 <__kernel_sin+0xc8>
 8025a2a:	bf00      	nop
 8025a2c:	f3af 8000 	nop.w
 8025a30:	55555549 	.word	0x55555549
 8025a34:	3fc55555 	.word	0x3fc55555
 8025a38:	3fe00000 	.word	0x3fe00000
 8025a3c:	5acfd57c 	.word	0x5acfd57c
 8025a40:	3de5d93a 	.word	0x3de5d93a
 8025a44:	8a2b9ceb 	.word	0x8a2b9ceb
 8025a48:	3e5ae5e6 	.word	0x3e5ae5e6
 8025a4c:	57b1fe7d 	.word	0x57b1fe7d
 8025a50:	3ec71de3 	.word	0x3ec71de3
 8025a54:	19c161d5 	.word	0x19c161d5
 8025a58:	3f2a01a0 	.word	0x3f2a01a0
 8025a5c:	1110f8a6 	.word	0x1110f8a6
 8025a60:	3f811111 	.word	0x3f811111

08025a64 <__kernel_cosf>:
 8025a64:	ee10 3a10 	vmov	r3, s0
 8025a68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8025a6c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8025a70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8025a74:	da05      	bge.n	8025a82 <__kernel_cosf+0x1e>
 8025a76:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8025a7a:	ee17 2a90 	vmov	r2, s15
 8025a7e:	2a00      	cmp	r2, #0
 8025a80:	d03b      	beq.n	8025afa <__kernel_cosf+0x96>
 8025a82:	ee20 6a00 	vmul.f32	s12, s0, s0
 8025a86:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8025a8a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8025b00 <__kernel_cosf+0x9c>
 8025a8e:	4a1d      	ldr	r2, [pc, #116]	; (8025b04 <__kernel_cosf+0xa0>)
 8025a90:	ee66 7a07 	vmul.f32	s15, s12, s14
 8025a94:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8025b08 <__kernel_cosf+0xa4>
 8025a98:	eea6 7a25 	vfma.f32	s14, s12, s11
 8025a9c:	4293      	cmp	r3, r2
 8025a9e:	eddf 5a1b 	vldr	s11, [pc, #108]	; 8025b0c <__kernel_cosf+0xa8>
 8025aa2:	eee7 5a06 	vfma.f32	s11, s14, s12
 8025aa6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8025b10 <__kernel_cosf+0xac>
 8025aaa:	eea5 7a86 	vfma.f32	s14, s11, s12
 8025aae:	eddf 5a19 	vldr	s11, [pc, #100]	; 8025b14 <__kernel_cosf+0xb0>
 8025ab2:	eee7 5a06 	vfma.f32	s11, s14, s12
 8025ab6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8025b18 <__kernel_cosf+0xb4>
 8025aba:	eea5 7a86 	vfma.f32	s14, s11, s12
 8025abe:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8025ac2:	ee27 7a06 	vmul.f32	s14, s14, s12
 8025ac6:	eee6 0a07 	vfma.f32	s1, s12, s14
 8025aca:	dc04      	bgt.n	8025ad6 <__kernel_cosf+0x72>
 8025acc:	ee77 0ae0 	vsub.f32	s1, s15, s1
 8025ad0:	ee36 0ae0 	vsub.f32	s0, s13, s1
 8025ad4:	4770      	bx	lr
 8025ad6:	4a11      	ldr	r2, [pc, #68]	; (8025b1c <__kernel_cosf+0xb8>)
 8025ad8:	4293      	cmp	r3, r2
 8025ada:	bfda      	itte	le
 8025adc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8025ae0:	ee07 3a10 	vmovle	s14, r3
 8025ae4:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8025ae8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025aec:	ee36 0ac7 	vsub.f32	s0, s13, s14
 8025af0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8025af4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8025af8:	4770      	bx	lr
 8025afa:	eeb0 0a66 	vmov.f32	s0, s13
 8025afe:	4770      	bx	lr
 8025b00:	ad47d74e 	.word	0xad47d74e
 8025b04:	3e999999 	.word	0x3e999999
 8025b08:	310f74f6 	.word	0x310f74f6
 8025b0c:	b493f27c 	.word	0xb493f27c
 8025b10:	37d00d01 	.word	0x37d00d01
 8025b14:	bab60b61 	.word	0xbab60b61
 8025b18:	3d2aaaab 	.word	0x3d2aaaab
 8025b1c:	3f480000 	.word	0x3f480000

08025b20 <__kernel_rem_pio2f>:
 8025b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b24:	ed2d 8b04 	vpush	{d8-d9}
 8025b28:	b0d7      	sub	sp, #348	; 0x15c
 8025b2a:	469b      	mov	fp, r3
 8025b2c:	460e      	mov	r6, r1
 8025b2e:	4bbe      	ldr	r3, [pc, #760]	; (8025e28 <__kernel_rem_pio2f+0x308>)
 8025b30:	9964      	ldr	r1, [sp, #400]	; 0x190
 8025b32:	9002      	str	r0, [sp, #8]
 8025b34:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8025b38:	9865      	ldr	r0, [sp, #404]	; 0x194
 8025b3a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8025e38 <__kernel_rem_pio2f+0x318>
 8025b3e:	1ed1      	subs	r1, r2, #3
 8025b40:	2308      	movs	r3, #8
 8025b42:	fb91 f1f3 	sdiv	r1, r1, r3
 8025b46:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8025b4a:	f10b 3aff 	add.w	sl, fp, #4294967295	; 0xffffffff
 8025b4e:	1c4c      	adds	r4, r1, #1
 8025b50:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8025b54:	eba1 050a 	sub.w	r5, r1, sl
 8025b58:	aa1a      	add	r2, sp, #104	; 0x68
 8025b5a:	eb09 070a 	add.w	r7, r9, sl
 8025b5e:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8025b62:	4696      	mov	lr, r2
 8025b64:	2300      	movs	r3, #0
 8025b66:	42bb      	cmp	r3, r7
 8025b68:	dd0f      	ble.n	8025b8a <__kernel_rem_pio2f+0x6a>
 8025b6a:	af42      	add	r7, sp, #264	; 0x108
 8025b6c:	2200      	movs	r2, #0
 8025b6e:	454a      	cmp	r2, r9
 8025b70:	dc27      	bgt.n	8025bc2 <__kernel_rem_pio2f+0xa2>
 8025b72:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8025b76:	eb0b 0302 	add.w	r3, fp, r2
 8025b7a:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8025b7e:	9d02      	ldr	r5, [sp, #8]
 8025b80:	eddf 7aad 	vldr	s15, [pc, #692]	; 8025e38 <__kernel_rem_pio2f+0x318>
 8025b84:	f04f 0c00 	mov.w	ip, #0
 8025b88:	e015      	b.n	8025bb6 <__kernel_rem_pio2f+0x96>
 8025b8a:	42dd      	cmn	r5, r3
 8025b8c:	bf5d      	ittte	pl
 8025b8e:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 8025b92:	ee07 2a90 	vmovpl	s15, r2
 8025b96:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8025b9a:	eef0 7a47 	vmovmi.f32	s15, s14
 8025b9e:	ecee 7a01 	vstmia	lr!, {s15}
 8025ba2:	3301      	adds	r3, #1
 8025ba4:	e7df      	b.n	8025b66 <__kernel_rem_pio2f+0x46>
 8025ba6:	ecf5 6a01 	vldmia	r5!, {s13}
 8025baa:	ed33 7a01 	vldmdb	r3!, {s14}
 8025bae:	eee6 7a87 	vfma.f32	s15, s13, s14
 8025bb2:	f10c 0c01 	add.w	ip, ip, #1
 8025bb6:	45d4      	cmp	ip, sl
 8025bb8:	ddf5      	ble.n	8025ba6 <__kernel_rem_pio2f+0x86>
 8025bba:	ece7 7a01 	vstmia	r7!, {s15}
 8025bbe:	3201      	adds	r2, #1
 8025bc0:	e7d5      	b.n	8025b6e <__kernel_rem_pio2f+0x4e>
 8025bc2:	ab06      	add	r3, sp, #24
 8025bc4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8025bc8:	9304      	str	r3, [sp, #16]
 8025bca:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8025e34 <__kernel_rem_pio2f+0x314>
 8025bce:	ed9f 9a98 	vldr	s18, [pc, #608]	; 8025e30 <__kernel_rem_pio2f+0x310>
 8025bd2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8025bd6:	9303      	str	r3, [sp, #12]
 8025bd8:	464d      	mov	r5, r9
 8025bda:	ab56      	add	r3, sp, #344	; 0x158
 8025bdc:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8025be0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8025be4:	3f01      	subs	r7, #1
 8025be6:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8025bea:	00bf      	lsls	r7, r7, #2
 8025bec:	ab56      	add	r3, sp, #344	; 0x158
 8025bee:	19da      	adds	r2, r3, r7
 8025bf0:	3a4c      	subs	r2, #76	; 0x4c
 8025bf2:	2300      	movs	r3, #0
 8025bf4:	1ae9      	subs	r1, r5, r3
 8025bf6:	2900      	cmp	r1, #0
 8025bf8:	dc4c      	bgt.n	8025c94 <__kernel_rem_pio2f+0x174>
 8025bfa:	4620      	mov	r0, r4
 8025bfc:	f000 fd4c 	bl	8026698 <scalbnf>
 8025c00:	eeb0 8a40 	vmov.f32	s16, s0
 8025c04:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8025c08:	ee28 0a00 	vmul.f32	s0, s16, s0
 8025c0c:	f000 fd02 	bl	8026614 <floorf>
 8025c10:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8025c14:	eea0 8a67 	vfms.f32	s16, s0, s15
 8025c18:	2c00      	cmp	r4, #0
 8025c1a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8025c1e:	edcd 7a01 	vstr	s15, [sp, #4]
 8025c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025c26:	ee38 8a67 	vsub.f32	s16, s16, s15
 8025c2a:	dd48      	ble.n	8025cbe <__kernel_rem_pio2f+0x19e>
 8025c2c:	1e69      	subs	r1, r5, #1
 8025c2e:	ab06      	add	r3, sp, #24
 8025c30:	f1c4 0008 	rsb	r0, r4, #8
 8025c34:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 8025c38:	9a01      	ldr	r2, [sp, #4]
 8025c3a:	fa4c f300 	asr.w	r3, ip, r0
 8025c3e:	441a      	add	r2, r3
 8025c40:	4083      	lsls	r3, r0
 8025c42:	9201      	str	r2, [sp, #4]
 8025c44:	ebac 0203 	sub.w	r2, ip, r3
 8025c48:	ab06      	add	r3, sp, #24
 8025c4a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8025c4e:	f1c4 0307 	rsb	r3, r4, #7
 8025c52:	fa42 f803 	asr.w	r8, r2, r3
 8025c56:	f1b8 0f00 	cmp.w	r8, #0
 8025c5a:	dd41      	ble.n	8025ce0 <__kernel_rem_pio2f+0x1c0>
 8025c5c:	9b01      	ldr	r3, [sp, #4]
 8025c5e:	2000      	movs	r0, #0
 8025c60:	3301      	adds	r3, #1
 8025c62:	9301      	str	r3, [sp, #4]
 8025c64:	4601      	mov	r1, r0
 8025c66:	4285      	cmp	r5, r0
 8025c68:	dc6d      	bgt.n	8025d46 <__kernel_rem_pio2f+0x226>
 8025c6a:	2c00      	cmp	r4, #0
 8025c6c:	dd04      	ble.n	8025c78 <__kernel_rem_pio2f+0x158>
 8025c6e:	2c01      	cmp	r4, #1
 8025c70:	d07e      	beq.n	8025d70 <__kernel_rem_pio2f+0x250>
 8025c72:	2c02      	cmp	r4, #2
 8025c74:	f000 8086 	beq.w	8025d84 <__kernel_rem_pio2f+0x264>
 8025c78:	f1b8 0f02 	cmp.w	r8, #2
 8025c7c:	d130      	bne.n	8025ce0 <__kernel_rem_pio2f+0x1c0>
 8025c7e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8025c82:	ee30 8a48 	vsub.f32	s16, s0, s16
 8025c86:	b359      	cbz	r1, 8025ce0 <__kernel_rem_pio2f+0x1c0>
 8025c88:	4620      	mov	r0, r4
 8025c8a:	f000 fd05 	bl	8026698 <scalbnf>
 8025c8e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8025c92:	e025      	b.n	8025ce0 <__kernel_rem_pio2f+0x1c0>
 8025c94:	ee60 7a28 	vmul.f32	s15, s0, s17
 8025c98:	a806      	add	r0, sp, #24
 8025c9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025ca2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8025ca6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8025caa:	ee10 1a10 	vmov	r1, s0
 8025cae:	ed32 0a01 	vldmdb	r2!, {s0}
 8025cb2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8025cb6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8025cba:	3301      	adds	r3, #1
 8025cbc:	e79a      	b.n	8025bf4 <__kernel_rem_pio2f+0xd4>
 8025cbe:	d106      	bne.n	8025cce <__kernel_rem_pio2f+0x1ae>
 8025cc0:	1e6b      	subs	r3, r5, #1
 8025cc2:	aa06      	add	r2, sp, #24
 8025cc4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8025cc8:	ea4f 2822 	mov.w	r8, r2, asr #8
 8025ccc:	e7c3      	b.n	8025c56 <__kernel_rem_pio2f+0x136>
 8025cce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8025cd2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8025cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025cda:	da31      	bge.n	8025d40 <__kernel_rem_pio2f+0x220>
 8025cdc:	f04f 0800 	mov.w	r8, #0
 8025ce0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8025ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ce8:	f040 80a8 	bne.w	8025e3c <__kernel_rem_pio2f+0x31c>
 8025cec:	1e6b      	subs	r3, r5, #1
 8025cee:	4618      	mov	r0, r3
 8025cf0:	2200      	movs	r2, #0
 8025cf2:	4548      	cmp	r0, r9
 8025cf4:	da4d      	bge.n	8025d92 <__kernel_rem_pio2f+0x272>
 8025cf6:	2a00      	cmp	r2, #0
 8025cf8:	f000 8087 	beq.w	8025e0a <__kernel_rem_pio2f+0x2ea>
 8025cfc:	aa06      	add	r2, sp, #24
 8025cfe:	3c08      	subs	r4, #8
 8025d00:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8025d04:	2900      	cmp	r1, #0
 8025d06:	f000 808d 	beq.w	8025e24 <__kernel_rem_pio2f+0x304>
 8025d0a:	4620      	mov	r0, r4
 8025d0c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8025d10:	9302      	str	r3, [sp, #8]
 8025d12:	f000 fcc1 	bl	8026698 <scalbnf>
 8025d16:	9b02      	ldr	r3, [sp, #8]
 8025d18:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8025e34 <__kernel_rem_pio2f+0x314>
 8025d1c:	0099      	lsls	r1, r3, #2
 8025d1e:	aa42      	add	r2, sp, #264	; 0x108
 8025d20:	1850      	adds	r0, r2, r1
 8025d22:	1d05      	adds	r5, r0, #4
 8025d24:	461c      	mov	r4, r3
 8025d26:	2c00      	cmp	r4, #0
 8025d28:	f280 80b8 	bge.w	8025e9c <__kernel_rem_pio2f+0x37c>
 8025d2c:	2500      	movs	r5, #0
 8025d2e:	1b5c      	subs	r4, r3, r5
 8025d30:	2c00      	cmp	r4, #0
 8025d32:	f2c0 80d8 	blt.w	8025ee6 <__kernel_rem_pio2f+0x3c6>
 8025d36:	4f3d      	ldr	r7, [pc, #244]	; (8025e2c <__kernel_rem_pio2f+0x30c>)
 8025d38:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8025e38 <__kernel_rem_pio2f+0x318>
 8025d3c:	2400      	movs	r4, #0
 8025d3e:	e0c6      	b.n	8025ece <__kernel_rem_pio2f+0x3ae>
 8025d40:	f04f 0802 	mov.w	r8, #2
 8025d44:	e78a      	b.n	8025c5c <__kernel_rem_pio2f+0x13c>
 8025d46:	ab06      	add	r3, sp, #24
 8025d48:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8025d4c:	b949      	cbnz	r1, 8025d62 <__kernel_rem_pio2f+0x242>
 8025d4e:	b12b      	cbz	r3, 8025d5c <__kernel_rem_pio2f+0x23c>
 8025d50:	aa06      	add	r2, sp, #24
 8025d52:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8025d56:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8025d5a:	2301      	movs	r3, #1
 8025d5c:	3001      	adds	r0, #1
 8025d5e:	4619      	mov	r1, r3
 8025d60:	e781      	b.n	8025c66 <__kernel_rem_pio2f+0x146>
 8025d62:	aa06      	add	r2, sp, #24
 8025d64:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8025d68:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8025d6c:	460b      	mov	r3, r1
 8025d6e:	e7f5      	b.n	8025d5c <__kernel_rem_pio2f+0x23c>
 8025d70:	1e68      	subs	r0, r5, #1
 8025d72:	ab06      	add	r3, sp, #24
 8025d74:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8025d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8025d7c:	aa06      	add	r2, sp, #24
 8025d7e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8025d82:	e779      	b.n	8025c78 <__kernel_rem_pio2f+0x158>
 8025d84:	1e68      	subs	r0, r5, #1
 8025d86:	ab06      	add	r3, sp, #24
 8025d88:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8025d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8025d90:	e7f4      	b.n	8025d7c <__kernel_rem_pio2f+0x25c>
 8025d92:	a906      	add	r1, sp, #24
 8025d94:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8025d98:	3801      	subs	r0, #1
 8025d9a:	430a      	orrs	r2, r1
 8025d9c:	e7a9      	b.n	8025cf2 <__kernel_rem_pio2f+0x1d2>
 8025d9e:	f10c 0c01 	add.w	ip, ip, #1
 8025da2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8025da6:	2a00      	cmp	r2, #0
 8025da8:	d0f9      	beq.n	8025d9e <__kernel_rem_pio2f+0x27e>
 8025daa:	eb0b 0305 	add.w	r3, fp, r5
 8025dae:	aa1a      	add	r2, sp, #104	; 0x68
 8025db0:	009b      	lsls	r3, r3, #2
 8025db2:	1898      	adds	r0, r3, r2
 8025db4:	3004      	adds	r0, #4
 8025db6:	1c69      	adds	r1, r5, #1
 8025db8:	3704      	adds	r7, #4
 8025dba:	2200      	movs	r2, #0
 8025dbc:	4465      	add	r5, ip
 8025dbe:	9005      	str	r0, [sp, #20]
 8025dc0:	428d      	cmp	r5, r1
 8025dc2:	f6ff af0a 	blt.w	8025bda <__kernel_rem_pio2f+0xba>
 8025dc6:	a81a      	add	r0, sp, #104	; 0x68
 8025dc8:	eb02 0c03 	add.w	ip, r2, r3
 8025dcc:	4484      	add	ip, r0
 8025dce:	9803      	ldr	r0, [sp, #12]
 8025dd0:	f8dd e008 	ldr.w	lr, [sp, #8]
 8025dd4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8025dd8:	9001      	str	r0, [sp, #4]
 8025dda:	ee07 0a90 	vmov	s15, r0
 8025dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025de2:	9805      	ldr	r0, [sp, #20]
 8025de4:	edcc 7a00 	vstr	s15, [ip]
 8025de8:	eddf 7a13 	vldr	s15, [pc, #76]	; 8025e38 <__kernel_rem_pio2f+0x318>
 8025dec:	eb00 0802 	add.w	r8, r0, r2
 8025df0:	f04f 0c00 	mov.w	ip, #0
 8025df4:	45d4      	cmp	ip, sl
 8025df6:	dd0c      	ble.n	8025e12 <__kernel_rem_pio2f+0x2f2>
 8025df8:	eb02 0c07 	add.w	ip, r2, r7
 8025dfc:	a842      	add	r0, sp, #264	; 0x108
 8025dfe:	4484      	add	ip, r0
 8025e00:	edcc 7a01 	vstr	s15, [ip, #4]
 8025e04:	3101      	adds	r1, #1
 8025e06:	3204      	adds	r2, #4
 8025e08:	e7da      	b.n	8025dc0 <__kernel_rem_pio2f+0x2a0>
 8025e0a:	9b04      	ldr	r3, [sp, #16]
 8025e0c:	f04f 0c01 	mov.w	ip, #1
 8025e10:	e7c7      	b.n	8025da2 <__kernel_rem_pio2f+0x282>
 8025e12:	ecfe 6a01 	vldmia	lr!, {s13}
 8025e16:	ed38 7a01 	vldmdb	r8!, {s14}
 8025e1a:	f10c 0c01 	add.w	ip, ip, #1
 8025e1e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8025e22:	e7e7      	b.n	8025df4 <__kernel_rem_pio2f+0x2d4>
 8025e24:	3b01      	subs	r3, #1
 8025e26:	e769      	b.n	8025cfc <__kernel_rem_pio2f+0x1dc>
 8025e28:	0802c394 	.word	0x0802c394
 8025e2c:	0802c368 	.word	0x0802c368
 8025e30:	43800000 	.word	0x43800000
 8025e34:	3b800000 	.word	0x3b800000
 8025e38:	00000000 	.word	0x00000000
 8025e3c:	4260      	negs	r0, r4
 8025e3e:	eeb0 0a48 	vmov.f32	s0, s16
 8025e42:	f000 fc29 	bl	8026698 <scalbnf>
 8025e46:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8025e30 <__kernel_rem_pio2f+0x310>
 8025e4a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8025e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e52:	db1a      	blt.n	8025e8a <__kernel_rem_pio2f+0x36a>
 8025e54:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8025e34 <__kernel_rem_pio2f+0x314>
 8025e58:	ee60 7a27 	vmul.f32	s15, s0, s15
 8025e5c:	aa06      	add	r2, sp, #24
 8025e5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025e62:	a906      	add	r1, sp, #24
 8025e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025e68:	3408      	adds	r4, #8
 8025e6a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8025e6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8025e72:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8025e76:	ee10 3a10 	vmov	r3, s0
 8025e7a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8025e7e:	1c6b      	adds	r3, r5, #1
 8025e80:	ee17 2a90 	vmov	r2, s15
 8025e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8025e88:	e73f      	b.n	8025d0a <__kernel_rem_pio2f+0x1ea>
 8025e8a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8025e8e:	aa06      	add	r2, sp, #24
 8025e90:	ee10 3a10 	vmov	r3, s0
 8025e94:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8025e98:	462b      	mov	r3, r5
 8025e9a:	e736      	b.n	8025d0a <__kernel_rem_pio2f+0x1ea>
 8025e9c:	aa06      	add	r2, sp, #24
 8025e9e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8025ea2:	9202      	str	r2, [sp, #8]
 8025ea4:	ee07 2a90 	vmov	s15, r2
 8025ea8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8025eac:	3c01      	subs	r4, #1
 8025eae:	ee67 7a80 	vmul.f32	s15, s15, s0
 8025eb2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8025eb6:	ed65 7a01 	vstmdb	r5!, {s15}
 8025eba:	e734      	b.n	8025d26 <__kernel_rem_pio2f+0x206>
 8025ebc:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8025ec0:	ecf7 6a01 	vldmia	r7!, {s13}
 8025ec4:	ed9c 7a00 	vldr	s14, [ip]
 8025ec8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8025ecc:	3401      	adds	r4, #1
 8025ece:	454c      	cmp	r4, r9
 8025ed0:	dc01      	bgt.n	8025ed6 <__kernel_rem_pio2f+0x3b6>
 8025ed2:	42a5      	cmp	r5, r4
 8025ed4:	daf2      	bge.n	8025ebc <__kernel_rem_pio2f+0x39c>
 8025ed6:	aa56      	add	r2, sp, #344	; 0x158
 8025ed8:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8025edc:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8025ee0:	3501      	adds	r5, #1
 8025ee2:	3804      	subs	r0, #4
 8025ee4:	e723      	b.n	8025d2e <__kernel_rem_pio2f+0x20e>
 8025ee6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8025ee8:	2a03      	cmp	r2, #3
 8025eea:	d84d      	bhi.n	8025f88 <__kernel_rem_pio2f+0x468>
 8025eec:	e8df f002 	tbb	[pc, r2]
 8025ef0:	021f1f3e 	.word	0x021f1f3e
 8025ef4:	aa56      	add	r2, sp, #344	; 0x158
 8025ef6:	4411      	add	r1, r2
 8025ef8:	399c      	subs	r1, #156	; 0x9c
 8025efa:	4608      	mov	r0, r1
 8025efc:	461c      	mov	r4, r3
 8025efe:	2c00      	cmp	r4, #0
 8025f00:	dc5f      	bgt.n	8025fc2 <__kernel_rem_pio2f+0x4a2>
 8025f02:	4608      	mov	r0, r1
 8025f04:	461c      	mov	r4, r3
 8025f06:	2c01      	cmp	r4, #1
 8025f08:	dc6b      	bgt.n	8025fe2 <__kernel_rem_pio2f+0x4c2>
 8025f0a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 8025e38 <__kernel_rem_pio2f+0x318>
 8025f0e:	2b01      	cmp	r3, #1
 8025f10:	dc77      	bgt.n	8026002 <__kernel_rem_pio2f+0x4e2>
 8025f12:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8025f16:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8025f1a:	f1b8 0f00 	cmp.w	r8, #0
 8025f1e:	d176      	bne.n	802600e <__kernel_rem_pio2f+0x4ee>
 8025f20:	edc6 6a00 	vstr	s13, [r6]
 8025f24:	ed86 7a01 	vstr	s14, [r6, #4]
 8025f28:	edc6 7a02 	vstr	s15, [r6, #8]
 8025f2c:	e02c      	b.n	8025f88 <__kernel_rem_pio2f+0x468>
 8025f2e:	aa56      	add	r2, sp, #344	; 0x158
 8025f30:	4411      	add	r1, r2
 8025f32:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 8025e38 <__kernel_rem_pio2f+0x318>
 8025f36:	399c      	subs	r1, #156	; 0x9c
 8025f38:	4618      	mov	r0, r3
 8025f3a:	2800      	cmp	r0, #0
 8025f3c:	da32      	bge.n	8025fa4 <__kernel_rem_pio2f+0x484>
 8025f3e:	f1b8 0f00 	cmp.w	r8, #0
 8025f42:	d035      	beq.n	8025fb0 <__kernel_rem_pio2f+0x490>
 8025f44:	eef1 7a47 	vneg.f32	s15, s14
 8025f48:	edc6 7a00 	vstr	s15, [r6]
 8025f4c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8025f50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025f54:	a82f      	add	r0, sp, #188	; 0xbc
 8025f56:	2101      	movs	r1, #1
 8025f58:	428b      	cmp	r3, r1
 8025f5a:	da2c      	bge.n	8025fb6 <__kernel_rem_pio2f+0x496>
 8025f5c:	f1b8 0f00 	cmp.w	r8, #0
 8025f60:	d001      	beq.n	8025f66 <__kernel_rem_pio2f+0x446>
 8025f62:	eef1 7a67 	vneg.f32	s15, s15
 8025f66:	edc6 7a01 	vstr	s15, [r6, #4]
 8025f6a:	e00d      	b.n	8025f88 <__kernel_rem_pio2f+0x468>
 8025f6c:	aa56      	add	r2, sp, #344	; 0x158
 8025f6e:	4411      	add	r1, r2
 8025f70:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8025e38 <__kernel_rem_pio2f+0x318>
 8025f74:	399c      	subs	r1, #156	; 0x9c
 8025f76:	2b00      	cmp	r3, #0
 8025f78:	da0e      	bge.n	8025f98 <__kernel_rem_pio2f+0x478>
 8025f7a:	f1b8 0f00 	cmp.w	r8, #0
 8025f7e:	d001      	beq.n	8025f84 <__kernel_rem_pio2f+0x464>
 8025f80:	eef1 7a67 	vneg.f32	s15, s15
 8025f84:	edc6 7a00 	vstr	s15, [r6]
 8025f88:	9b01      	ldr	r3, [sp, #4]
 8025f8a:	f003 0007 	and.w	r0, r3, #7
 8025f8e:	b057      	add	sp, #348	; 0x15c
 8025f90:	ecbd 8b04 	vpop	{d8-d9}
 8025f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f98:	ed31 7a01 	vldmdb	r1!, {s14}
 8025f9c:	3b01      	subs	r3, #1
 8025f9e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025fa2:	e7e8      	b.n	8025f76 <__kernel_rem_pio2f+0x456>
 8025fa4:	ed71 7a01 	vldmdb	r1!, {s15}
 8025fa8:	3801      	subs	r0, #1
 8025faa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8025fae:	e7c4      	b.n	8025f3a <__kernel_rem_pio2f+0x41a>
 8025fb0:	eef0 7a47 	vmov.f32	s15, s14
 8025fb4:	e7c8      	b.n	8025f48 <__kernel_rem_pio2f+0x428>
 8025fb6:	ecb0 7a01 	vldmia	r0!, {s14}
 8025fba:	3101      	adds	r1, #1
 8025fbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8025fc0:	e7ca      	b.n	8025f58 <__kernel_rem_pio2f+0x438>
 8025fc2:	ed50 7a02 	vldr	s15, [r0, #-8]
 8025fc6:	ed70 6a01 	vldmdb	r0!, {s13}
 8025fca:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8025fce:	3c01      	subs	r4, #1
 8025fd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025fd4:	ed00 7a01 	vstr	s14, [r0, #-4]
 8025fd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8025fdc:	edc0 7a00 	vstr	s15, [r0]
 8025fe0:	e78d      	b.n	8025efe <__kernel_rem_pio2f+0x3de>
 8025fe2:	ed50 7a02 	vldr	s15, [r0, #-8]
 8025fe6:	ed70 6a01 	vldmdb	r0!, {s13}
 8025fea:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8025fee:	3c01      	subs	r4, #1
 8025ff0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8025ff4:	ed00 7a01 	vstr	s14, [r0, #-4]
 8025ff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8025ffc:	edc0 7a00 	vstr	s15, [r0]
 8026000:	e781      	b.n	8025f06 <__kernel_rem_pio2f+0x3e6>
 8026002:	ed31 7a01 	vldmdb	r1!, {s14}
 8026006:	3b01      	subs	r3, #1
 8026008:	ee77 7a87 	vadd.f32	s15, s15, s14
 802600c:	e77f      	b.n	8025f0e <__kernel_rem_pio2f+0x3ee>
 802600e:	eef1 6a66 	vneg.f32	s13, s13
 8026012:	eeb1 7a47 	vneg.f32	s14, s14
 8026016:	edc6 6a00 	vstr	s13, [r6]
 802601a:	ed86 7a01 	vstr	s14, [r6, #4]
 802601e:	eef1 7a67 	vneg.f32	s15, s15
 8026022:	e781      	b.n	8025f28 <__kernel_rem_pio2f+0x408>

08026024 <__kernel_sinf>:
 8026024:	ee10 3a10 	vmov	r3, s0
 8026028:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802602c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8026030:	da04      	bge.n	802603c <__kernel_sinf+0x18>
 8026032:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8026036:	ee17 3a90 	vmov	r3, s15
 802603a:	b35b      	cbz	r3, 8026094 <__kernel_sinf+0x70>
 802603c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8026040:	eddf 7a15 	vldr	s15, [pc, #84]	; 8026098 <__kernel_sinf+0x74>
 8026044:	ed9f 6a15 	vldr	s12, [pc, #84]	; 802609c <__kernel_sinf+0x78>
 8026048:	eea7 6a27 	vfma.f32	s12, s14, s15
 802604c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80260a0 <__kernel_sinf+0x7c>
 8026050:	eee6 7a07 	vfma.f32	s15, s12, s14
 8026054:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80260a4 <__kernel_sinf+0x80>
 8026058:	eea7 6a87 	vfma.f32	s12, s15, s14
 802605c:	eddf 7a12 	vldr	s15, [pc, #72]	; 80260a8 <__kernel_sinf+0x84>
 8026060:	ee60 6a07 	vmul.f32	s13, s0, s14
 8026064:	eee6 7a07 	vfma.f32	s15, s12, s14
 8026068:	b930      	cbnz	r0, 8026078 <__kernel_sinf+0x54>
 802606a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80260ac <__kernel_sinf+0x88>
 802606e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8026072:	eea6 0a26 	vfma.f32	s0, s12, s13
 8026076:	4770      	bx	lr
 8026078:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 802607c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8026080:	eee0 7a86 	vfma.f32	s15, s1, s12
 8026084:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8026088:	eddf 7a09 	vldr	s15, [pc, #36]	; 80260b0 <__kernel_sinf+0x8c>
 802608c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8026090:	ee30 0a60 	vsub.f32	s0, s0, s1
 8026094:	4770      	bx	lr
 8026096:	bf00      	nop
 8026098:	2f2ec9d3 	.word	0x2f2ec9d3
 802609c:	b2d72f34 	.word	0xb2d72f34
 80260a0:	3638ef1b 	.word	0x3638ef1b
 80260a4:	b9500d01 	.word	0xb9500d01
 80260a8:	3c088889 	.word	0x3c088889
 80260ac:	be2aaaab 	.word	0xbe2aaaab
 80260b0:	3e2aaaab 	.word	0x3e2aaaab
 80260b4:	00000000 	.word	0x00000000

080260b8 <atan>:
 80260b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80260bc:	ec55 4b10 	vmov	r4, r5, d0
 80260c0:	4bc3      	ldr	r3, [pc, #780]	; (80263d0 <atan+0x318>)
 80260c2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80260c6:	429e      	cmp	r6, r3
 80260c8:	46ab      	mov	fp, r5
 80260ca:	dd18      	ble.n	80260fe <atan+0x46>
 80260cc:	4bc1      	ldr	r3, [pc, #772]	; (80263d4 <atan+0x31c>)
 80260ce:	429e      	cmp	r6, r3
 80260d0:	dc01      	bgt.n	80260d6 <atan+0x1e>
 80260d2:	d109      	bne.n	80260e8 <atan+0x30>
 80260d4:	b144      	cbz	r4, 80260e8 <atan+0x30>
 80260d6:	4622      	mov	r2, r4
 80260d8:	462b      	mov	r3, r5
 80260da:	4620      	mov	r0, r4
 80260dc:	4629      	mov	r1, r5
 80260de:	f7da f8d5 	bl	800028c <__adddf3>
 80260e2:	4604      	mov	r4, r0
 80260e4:	460d      	mov	r5, r1
 80260e6:	e006      	b.n	80260f6 <atan+0x3e>
 80260e8:	f1bb 0f00 	cmp.w	fp, #0
 80260ec:	f340 8131 	ble.w	8026352 <atan+0x29a>
 80260f0:	a59b      	add	r5, pc, #620	; (adr r5, 8026360 <atan+0x2a8>)
 80260f2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80260f6:	ec45 4b10 	vmov	d0, r4, r5
 80260fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80260fe:	4bb6      	ldr	r3, [pc, #728]	; (80263d8 <atan+0x320>)
 8026100:	429e      	cmp	r6, r3
 8026102:	dc14      	bgt.n	802612e <atan+0x76>
 8026104:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8026108:	429e      	cmp	r6, r3
 802610a:	dc0d      	bgt.n	8026128 <atan+0x70>
 802610c:	a396      	add	r3, pc, #600	; (adr r3, 8026368 <atan+0x2b0>)
 802610e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026112:	ee10 0a10 	vmov	r0, s0
 8026116:	4629      	mov	r1, r5
 8026118:	f7da f8b8 	bl	800028c <__adddf3>
 802611c:	2200      	movs	r2, #0
 802611e:	4baf      	ldr	r3, [pc, #700]	; (80263dc <atan+0x324>)
 8026120:	f7da fcfa 	bl	8000b18 <__aeabi_dcmpgt>
 8026124:	2800      	cmp	r0, #0
 8026126:	d1e6      	bne.n	80260f6 <atan+0x3e>
 8026128:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 802612c:	e02b      	b.n	8026186 <atan+0xce>
 802612e:	f000 f963 	bl	80263f8 <fabs>
 8026132:	4bab      	ldr	r3, [pc, #684]	; (80263e0 <atan+0x328>)
 8026134:	429e      	cmp	r6, r3
 8026136:	ec55 4b10 	vmov	r4, r5, d0
 802613a:	f300 80bf 	bgt.w	80262bc <atan+0x204>
 802613e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8026142:	429e      	cmp	r6, r3
 8026144:	f300 80a0 	bgt.w	8026288 <atan+0x1d0>
 8026148:	ee10 2a10 	vmov	r2, s0
 802614c:	ee10 0a10 	vmov	r0, s0
 8026150:	462b      	mov	r3, r5
 8026152:	4629      	mov	r1, r5
 8026154:	f7da f89a 	bl	800028c <__adddf3>
 8026158:	2200      	movs	r2, #0
 802615a:	4ba0      	ldr	r3, [pc, #640]	; (80263dc <atan+0x324>)
 802615c:	f7da f894 	bl	8000288 <__aeabi_dsub>
 8026160:	2200      	movs	r2, #0
 8026162:	4606      	mov	r6, r0
 8026164:	460f      	mov	r7, r1
 8026166:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802616a:	4620      	mov	r0, r4
 802616c:	4629      	mov	r1, r5
 802616e:	f7da f88d 	bl	800028c <__adddf3>
 8026172:	4602      	mov	r2, r0
 8026174:	460b      	mov	r3, r1
 8026176:	4630      	mov	r0, r6
 8026178:	4639      	mov	r1, r7
 802617a:	f7da fb67 	bl	800084c <__aeabi_ddiv>
 802617e:	f04f 0a00 	mov.w	sl, #0
 8026182:	4604      	mov	r4, r0
 8026184:	460d      	mov	r5, r1
 8026186:	4622      	mov	r2, r4
 8026188:	462b      	mov	r3, r5
 802618a:	4620      	mov	r0, r4
 802618c:	4629      	mov	r1, r5
 802618e:	f7da fa33 	bl	80005f8 <__aeabi_dmul>
 8026192:	4602      	mov	r2, r0
 8026194:	460b      	mov	r3, r1
 8026196:	4680      	mov	r8, r0
 8026198:	4689      	mov	r9, r1
 802619a:	f7da fa2d 	bl	80005f8 <__aeabi_dmul>
 802619e:	a374      	add	r3, pc, #464	; (adr r3, 8026370 <atan+0x2b8>)
 80261a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80261a4:	4606      	mov	r6, r0
 80261a6:	460f      	mov	r7, r1
 80261a8:	f7da fa26 	bl	80005f8 <__aeabi_dmul>
 80261ac:	a372      	add	r3, pc, #456	; (adr r3, 8026378 <atan+0x2c0>)
 80261ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80261b2:	f7da f86b 	bl	800028c <__adddf3>
 80261b6:	4632      	mov	r2, r6
 80261b8:	463b      	mov	r3, r7
 80261ba:	f7da fa1d 	bl	80005f8 <__aeabi_dmul>
 80261be:	a370      	add	r3, pc, #448	; (adr r3, 8026380 <atan+0x2c8>)
 80261c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80261c4:	f7da f862 	bl	800028c <__adddf3>
 80261c8:	4632      	mov	r2, r6
 80261ca:	463b      	mov	r3, r7
 80261cc:	f7da fa14 	bl	80005f8 <__aeabi_dmul>
 80261d0:	a36d      	add	r3, pc, #436	; (adr r3, 8026388 <atan+0x2d0>)
 80261d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80261d6:	f7da f859 	bl	800028c <__adddf3>
 80261da:	4632      	mov	r2, r6
 80261dc:	463b      	mov	r3, r7
 80261de:	f7da fa0b 	bl	80005f8 <__aeabi_dmul>
 80261e2:	a36b      	add	r3, pc, #428	; (adr r3, 8026390 <atan+0x2d8>)
 80261e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80261e8:	f7da f850 	bl	800028c <__adddf3>
 80261ec:	4632      	mov	r2, r6
 80261ee:	463b      	mov	r3, r7
 80261f0:	f7da fa02 	bl	80005f8 <__aeabi_dmul>
 80261f4:	a368      	add	r3, pc, #416	; (adr r3, 8026398 <atan+0x2e0>)
 80261f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80261fa:	f7da f847 	bl	800028c <__adddf3>
 80261fe:	4642      	mov	r2, r8
 8026200:	464b      	mov	r3, r9
 8026202:	f7da f9f9 	bl	80005f8 <__aeabi_dmul>
 8026206:	a366      	add	r3, pc, #408	; (adr r3, 80263a0 <atan+0x2e8>)
 8026208:	e9d3 2300 	ldrd	r2, r3, [r3]
 802620c:	4680      	mov	r8, r0
 802620e:	4689      	mov	r9, r1
 8026210:	4630      	mov	r0, r6
 8026212:	4639      	mov	r1, r7
 8026214:	f7da f9f0 	bl	80005f8 <__aeabi_dmul>
 8026218:	a363      	add	r3, pc, #396	; (adr r3, 80263a8 <atan+0x2f0>)
 802621a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802621e:	f7da f833 	bl	8000288 <__aeabi_dsub>
 8026222:	4632      	mov	r2, r6
 8026224:	463b      	mov	r3, r7
 8026226:	f7da f9e7 	bl	80005f8 <__aeabi_dmul>
 802622a:	a361      	add	r3, pc, #388	; (adr r3, 80263b0 <atan+0x2f8>)
 802622c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026230:	f7da f82a 	bl	8000288 <__aeabi_dsub>
 8026234:	4632      	mov	r2, r6
 8026236:	463b      	mov	r3, r7
 8026238:	f7da f9de 	bl	80005f8 <__aeabi_dmul>
 802623c:	a35e      	add	r3, pc, #376	; (adr r3, 80263b8 <atan+0x300>)
 802623e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026242:	f7da f821 	bl	8000288 <__aeabi_dsub>
 8026246:	4632      	mov	r2, r6
 8026248:	463b      	mov	r3, r7
 802624a:	f7da f9d5 	bl	80005f8 <__aeabi_dmul>
 802624e:	a35c      	add	r3, pc, #368	; (adr r3, 80263c0 <atan+0x308>)
 8026250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026254:	f7da f818 	bl	8000288 <__aeabi_dsub>
 8026258:	4632      	mov	r2, r6
 802625a:	463b      	mov	r3, r7
 802625c:	f7da f9cc 	bl	80005f8 <__aeabi_dmul>
 8026260:	4602      	mov	r2, r0
 8026262:	460b      	mov	r3, r1
 8026264:	4640      	mov	r0, r8
 8026266:	4649      	mov	r1, r9
 8026268:	f7da f810 	bl	800028c <__adddf3>
 802626c:	4622      	mov	r2, r4
 802626e:	462b      	mov	r3, r5
 8026270:	f7da f9c2 	bl	80005f8 <__aeabi_dmul>
 8026274:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8026278:	4602      	mov	r2, r0
 802627a:	460b      	mov	r3, r1
 802627c:	d14b      	bne.n	8026316 <atan+0x25e>
 802627e:	4620      	mov	r0, r4
 8026280:	4629      	mov	r1, r5
 8026282:	f7da f801 	bl	8000288 <__aeabi_dsub>
 8026286:	e72c      	b.n	80260e2 <atan+0x2a>
 8026288:	ee10 0a10 	vmov	r0, s0
 802628c:	2200      	movs	r2, #0
 802628e:	4b53      	ldr	r3, [pc, #332]	; (80263dc <atan+0x324>)
 8026290:	4629      	mov	r1, r5
 8026292:	f7d9 fff9 	bl	8000288 <__aeabi_dsub>
 8026296:	2200      	movs	r2, #0
 8026298:	4606      	mov	r6, r0
 802629a:	460f      	mov	r7, r1
 802629c:	4b4f      	ldr	r3, [pc, #316]	; (80263dc <atan+0x324>)
 802629e:	4620      	mov	r0, r4
 80262a0:	4629      	mov	r1, r5
 80262a2:	f7d9 fff3 	bl	800028c <__adddf3>
 80262a6:	4602      	mov	r2, r0
 80262a8:	460b      	mov	r3, r1
 80262aa:	4630      	mov	r0, r6
 80262ac:	4639      	mov	r1, r7
 80262ae:	f7da facd 	bl	800084c <__aeabi_ddiv>
 80262b2:	f04f 0a01 	mov.w	sl, #1
 80262b6:	4604      	mov	r4, r0
 80262b8:	460d      	mov	r5, r1
 80262ba:	e764      	b.n	8026186 <atan+0xce>
 80262bc:	4b49      	ldr	r3, [pc, #292]	; (80263e4 <atan+0x32c>)
 80262be:	429e      	cmp	r6, r3
 80262c0:	dc1d      	bgt.n	80262fe <atan+0x246>
 80262c2:	ee10 0a10 	vmov	r0, s0
 80262c6:	2200      	movs	r2, #0
 80262c8:	4b47      	ldr	r3, [pc, #284]	; (80263e8 <atan+0x330>)
 80262ca:	4629      	mov	r1, r5
 80262cc:	f7d9 ffdc 	bl	8000288 <__aeabi_dsub>
 80262d0:	2200      	movs	r2, #0
 80262d2:	4606      	mov	r6, r0
 80262d4:	460f      	mov	r7, r1
 80262d6:	4b44      	ldr	r3, [pc, #272]	; (80263e8 <atan+0x330>)
 80262d8:	4620      	mov	r0, r4
 80262da:	4629      	mov	r1, r5
 80262dc:	f7da f98c 	bl	80005f8 <__aeabi_dmul>
 80262e0:	2200      	movs	r2, #0
 80262e2:	4b3e      	ldr	r3, [pc, #248]	; (80263dc <atan+0x324>)
 80262e4:	f7d9 ffd2 	bl	800028c <__adddf3>
 80262e8:	4602      	mov	r2, r0
 80262ea:	460b      	mov	r3, r1
 80262ec:	4630      	mov	r0, r6
 80262ee:	4639      	mov	r1, r7
 80262f0:	f7da faac 	bl	800084c <__aeabi_ddiv>
 80262f4:	f04f 0a02 	mov.w	sl, #2
 80262f8:	4604      	mov	r4, r0
 80262fa:	460d      	mov	r5, r1
 80262fc:	e743      	b.n	8026186 <atan+0xce>
 80262fe:	462b      	mov	r3, r5
 8026300:	ee10 2a10 	vmov	r2, s0
 8026304:	2000      	movs	r0, #0
 8026306:	4939      	ldr	r1, [pc, #228]	; (80263ec <atan+0x334>)
 8026308:	f7da faa0 	bl	800084c <__aeabi_ddiv>
 802630c:	f04f 0a03 	mov.w	sl, #3
 8026310:	4604      	mov	r4, r0
 8026312:	460d      	mov	r5, r1
 8026314:	e737      	b.n	8026186 <atan+0xce>
 8026316:	4b36      	ldr	r3, [pc, #216]	; (80263f0 <atan+0x338>)
 8026318:	4e36      	ldr	r6, [pc, #216]	; (80263f4 <atan+0x33c>)
 802631a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 802631e:	4456      	add	r6, sl
 8026320:	449a      	add	sl, r3
 8026322:	e9da 2300 	ldrd	r2, r3, [sl]
 8026326:	f7d9 ffaf 	bl	8000288 <__aeabi_dsub>
 802632a:	4622      	mov	r2, r4
 802632c:	462b      	mov	r3, r5
 802632e:	f7d9 ffab 	bl	8000288 <__aeabi_dsub>
 8026332:	4602      	mov	r2, r0
 8026334:	460b      	mov	r3, r1
 8026336:	e9d6 0100 	ldrd	r0, r1, [r6]
 802633a:	f7d9 ffa5 	bl	8000288 <__aeabi_dsub>
 802633e:	f1bb 0f00 	cmp.w	fp, #0
 8026342:	4604      	mov	r4, r0
 8026344:	460d      	mov	r5, r1
 8026346:	f6bf aed6 	bge.w	80260f6 <atan+0x3e>
 802634a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802634e:	461d      	mov	r5, r3
 8026350:	e6d1      	b.n	80260f6 <atan+0x3e>
 8026352:	a51d      	add	r5, pc, #116	; (adr r5, 80263c8 <atan+0x310>)
 8026354:	e9d5 4500 	ldrd	r4, r5, [r5]
 8026358:	e6cd      	b.n	80260f6 <atan+0x3e>
 802635a:	bf00      	nop
 802635c:	f3af 8000 	nop.w
 8026360:	54442d18 	.word	0x54442d18
 8026364:	3ff921fb 	.word	0x3ff921fb
 8026368:	8800759c 	.word	0x8800759c
 802636c:	7e37e43c 	.word	0x7e37e43c
 8026370:	e322da11 	.word	0xe322da11
 8026374:	3f90ad3a 	.word	0x3f90ad3a
 8026378:	24760deb 	.word	0x24760deb
 802637c:	3fa97b4b 	.word	0x3fa97b4b
 8026380:	a0d03d51 	.word	0xa0d03d51
 8026384:	3fb10d66 	.word	0x3fb10d66
 8026388:	c54c206e 	.word	0xc54c206e
 802638c:	3fb745cd 	.word	0x3fb745cd
 8026390:	920083ff 	.word	0x920083ff
 8026394:	3fc24924 	.word	0x3fc24924
 8026398:	5555550d 	.word	0x5555550d
 802639c:	3fd55555 	.word	0x3fd55555
 80263a0:	2c6a6c2f 	.word	0x2c6a6c2f
 80263a4:	bfa2b444 	.word	0xbfa2b444
 80263a8:	52defd9a 	.word	0x52defd9a
 80263ac:	3fadde2d 	.word	0x3fadde2d
 80263b0:	af749a6d 	.word	0xaf749a6d
 80263b4:	3fb3b0f2 	.word	0x3fb3b0f2
 80263b8:	fe231671 	.word	0xfe231671
 80263bc:	3fbc71c6 	.word	0x3fbc71c6
 80263c0:	9998ebc4 	.word	0x9998ebc4
 80263c4:	3fc99999 	.word	0x3fc99999
 80263c8:	54442d18 	.word	0x54442d18
 80263cc:	bff921fb 	.word	0xbff921fb
 80263d0:	440fffff 	.word	0x440fffff
 80263d4:	7ff00000 	.word	0x7ff00000
 80263d8:	3fdbffff 	.word	0x3fdbffff
 80263dc:	3ff00000 	.word	0x3ff00000
 80263e0:	3ff2ffff 	.word	0x3ff2ffff
 80263e4:	40037fff 	.word	0x40037fff
 80263e8:	3ff80000 	.word	0x3ff80000
 80263ec:	bff00000 	.word	0xbff00000
 80263f0:	0802c3c0 	.word	0x0802c3c0
 80263f4:	0802c3a0 	.word	0x0802c3a0

080263f8 <fabs>:
 80263f8:	ec51 0b10 	vmov	r0, r1, d0
 80263fc:	ee10 2a10 	vmov	r2, s0
 8026400:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8026404:	ec43 2b10 	vmov	d0, r2, r3
 8026408:	4770      	bx	lr
 802640a:	0000      	movs	r0, r0
 802640c:	0000      	movs	r0, r0
	...

08026410 <floor>:
 8026410:	ec51 0b10 	vmov	r0, r1, d0
 8026414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026418:	f3c1 570a 	ubfx	r7, r1, #20, #11
 802641c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8026420:	2e13      	cmp	r6, #19
 8026422:	460c      	mov	r4, r1
 8026424:	ee10 5a10 	vmov	r5, s0
 8026428:	4680      	mov	r8, r0
 802642a:	dc34      	bgt.n	8026496 <floor+0x86>
 802642c:	2e00      	cmp	r6, #0
 802642e:	da16      	bge.n	802645e <floor+0x4e>
 8026430:	a335      	add	r3, pc, #212	; (adr r3, 8026508 <floor+0xf8>)
 8026432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026436:	f7d9 ff29 	bl	800028c <__adddf3>
 802643a:	2200      	movs	r2, #0
 802643c:	2300      	movs	r3, #0
 802643e:	f7da fb6b 	bl	8000b18 <__aeabi_dcmpgt>
 8026442:	b148      	cbz	r0, 8026458 <floor+0x48>
 8026444:	2c00      	cmp	r4, #0
 8026446:	da59      	bge.n	80264fc <floor+0xec>
 8026448:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 802644c:	4a30      	ldr	r2, [pc, #192]	; (8026510 <floor+0x100>)
 802644e:	432b      	orrs	r3, r5
 8026450:	2500      	movs	r5, #0
 8026452:	42ab      	cmp	r3, r5
 8026454:	bf18      	it	ne
 8026456:	4614      	movne	r4, r2
 8026458:	4621      	mov	r1, r4
 802645a:	4628      	mov	r0, r5
 802645c:	e025      	b.n	80264aa <floor+0x9a>
 802645e:	4f2d      	ldr	r7, [pc, #180]	; (8026514 <floor+0x104>)
 8026460:	4137      	asrs	r7, r6
 8026462:	ea01 0307 	and.w	r3, r1, r7
 8026466:	4303      	orrs	r3, r0
 8026468:	d01f      	beq.n	80264aa <floor+0x9a>
 802646a:	a327      	add	r3, pc, #156	; (adr r3, 8026508 <floor+0xf8>)
 802646c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026470:	f7d9 ff0c 	bl	800028c <__adddf3>
 8026474:	2200      	movs	r2, #0
 8026476:	2300      	movs	r3, #0
 8026478:	f7da fb4e 	bl	8000b18 <__aeabi_dcmpgt>
 802647c:	2800      	cmp	r0, #0
 802647e:	d0eb      	beq.n	8026458 <floor+0x48>
 8026480:	2c00      	cmp	r4, #0
 8026482:	bfbe      	ittt	lt
 8026484:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8026488:	fa43 f606 	asrlt.w	r6, r3, r6
 802648c:	19a4      	addlt	r4, r4, r6
 802648e:	ea24 0407 	bic.w	r4, r4, r7
 8026492:	2500      	movs	r5, #0
 8026494:	e7e0      	b.n	8026458 <floor+0x48>
 8026496:	2e33      	cmp	r6, #51	; 0x33
 8026498:	dd0b      	ble.n	80264b2 <floor+0xa2>
 802649a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802649e:	d104      	bne.n	80264aa <floor+0x9a>
 80264a0:	ee10 2a10 	vmov	r2, s0
 80264a4:	460b      	mov	r3, r1
 80264a6:	f7d9 fef1 	bl	800028c <__adddf3>
 80264aa:	ec41 0b10 	vmov	d0, r0, r1
 80264ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80264b2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80264b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80264ba:	fa23 f707 	lsr.w	r7, r3, r7
 80264be:	4207      	tst	r7, r0
 80264c0:	d0f3      	beq.n	80264aa <floor+0x9a>
 80264c2:	a311      	add	r3, pc, #68	; (adr r3, 8026508 <floor+0xf8>)
 80264c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80264c8:	f7d9 fee0 	bl	800028c <__adddf3>
 80264cc:	2200      	movs	r2, #0
 80264ce:	2300      	movs	r3, #0
 80264d0:	f7da fb22 	bl	8000b18 <__aeabi_dcmpgt>
 80264d4:	2800      	cmp	r0, #0
 80264d6:	d0bf      	beq.n	8026458 <floor+0x48>
 80264d8:	2c00      	cmp	r4, #0
 80264da:	da02      	bge.n	80264e2 <floor+0xd2>
 80264dc:	2e14      	cmp	r6, #20
 80264de:	d103      	bne.n	80264e8 <floor+0xd8>
 80264e0:	3401      	adds	r4, #1
 80264e2:	ea25 0507 	bic.w	r5, r5, r7
 80264e6:	e7b7      	b.n	8026458 <floor+0x48>
 80264e8:	2301      	movs	r3, #1
 80264ea:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80264ee:	fa03 f606 	lsl.w	r6, r3, r6
 80264f2:	4435      	add	r5, r6
 80264f4:	4545      	cmp	r5, r8
 80264f6:	bf38      	it	cc
 80264f8:	18e4      	addcc	r4, r4, r3
 80264fa:	e7f2      	b.n	80264e2 <floor+0xd2>
 80264fc:	2500      	movs	r5, #0
 80264fe:	462c      	mov	r4, r5
 8026500:	e7aa      	b.n	8026458 <floor+0x48>
 8026502:	bf00      	nop
 8026504:	f3af 8000 	nop.w
 8026508:	8800759c 	.word	0x8800759c
 802650c:	7e37e43c 	.word	0x7e37e43c
 8026510:	bff00000 	.word	0xbff00000
 8026514:	000fffff 	.word	0x000fffff

08026518 <scalbn>:
 8026518:	b570      	push	{r4, r5, r6, lr}
 802651a:	ec55 4b10 	vmov	r4, r5, d0
 802651e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8026522:	4606      	mov	r6, r0
 8026524:	462b      	mov	r3, r5
 8026526:	b9aa      	cbnz	r2, 8026554 <scalbn+0x3c>
 8026528:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802652c:	4323      	orrs	r3, r4
 802652e:	d03b      	beq.n	80265a8 <scalbn+0x90>
 8026530:	4b31      	ldr	r3, [pc, #196]	; (80265f8 <scalbn+0xe0>)
 8026532:	4629      	mov	r1, r5
 8026534:	2200      	movs	r2, #0
 8026536:	ee10 0a10 	vmov	r0, s0
 802653a:	f7da f85d 	bl	80005f8 <__aeabi_dmul>
 802653e:	4b2f      	ldr	r3, [pc, #188]	; (80265fc <scalbn+0xe4>)
 8026540:	429e      	cmp	r6, r3
 8026542:	4604      	mov	r4, r0
 8026544:	460d      	mov	r5, r1
 8026546:	da12      	bge.n	802656e <scalbn+0x56>
 8026548:	a327      	add	r3, pc, #156	; (adr r3, 80265e8 <scalbn+0xd0>)
 802654a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802654e:	f7da f853 	bl	80005f8 <__aeabi_dmul>
 8026552:	e009      	b.n	8026568 <scalbn+0x50>
 8026554:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8026558:	428a      	cmp	r2, r1
 802655a:	d10c      	bne.n	8026576 <scalbn+0x5e>
 802655c:	ee10 2a10 	vmov	r2, s0
 8026560:	4620      	mov	r0, r4
 8026562:	4629      	mov	r1, r5
 8026564:	f7d9 fe92 	bl	800028c <__adddf3>
 8026568:	4604      	mov	r4, r0
 802656a:	460d      	mov	r5, r1
 802656c:	e01c      	b.n	80265a8 <scalbn+0x90>
 802656e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8026572:	460b      	mov	r3, r1
 8026574:	3a36      	subs	r2, #54	; 0x36
 8026576:	4432      	add	r2, r6
 8026578:	f240 71fe 	movw	r1, #2046	; 0x7fe
 802657c:	428a      	cmp	r2, r1
 802657e:	dd0b      	ble.n	8026598 <scalbn+0x80>
 8026580:	ec45 4b11 	vmov	d1, r4, r5
 8026584:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80265f0 <scalbn+0xd8>
 8026588:	f000 f8e6 	bl	8026758 <copysign>
 802658c:	a318      	add	r3, pc, #96	; (adr r3, 80265f0 <scalbn+0xd8>)
 802658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026592:	ec51 0b10 	vmov	r0, r1, d0
 8026596:	e7da      	b.n	802654e <scalbn+0x36>
 8026598:	2a00      	cmp	r2, #0
 802659a:	dd08      	ble.n	80265ae <scalbn+0x96>
 802659c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80265a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80265a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80265a8:	ec45 4b10 	vmov	d0, r4, r5
 80265ac:	bd70      	pop	{r4, r5, r6, pc}
 80265ae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80265b2:	da0d      	bge.n	80265d0 <scalbn+0xb8>
 80265b4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80265b8:	429e      	cmp	r6, r3
 80265ba:	ec45 4b11 	vmov	d1, r4, r5
 80265be:	dce1      	bgt.n	8026584 <scalbn+0x6c>
 80265c0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80265e8 <scalbn+0xd0>
 80265c4:	f000 f8c8 	bl	8026758 <copysign>
 80265c8:	a307      	add	r3, pc, #28	; (adr r3, 80265e8 <scalbn+0xd0>)
 80265ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80265ce:	e7e0      	b.n	8026592 <scalbn+0x7a>
 80265d0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80265d4:	3236      	adds	r2, #54	; 0x36
 80265d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80265da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80265de:	4620      	mov	r0, r4
 80265e0:	4629      	mov	r1, r5
 80265e2:	2200      	movs	r2, #0
 80265e4:	4b06      	ldr	r3, [pc, #24]	; (8026600 <scalbn+0xe8>)
 80265e6:	e7b2      	b.n	802654e <scalbn+0x36>
 80265e8:	c2f8f359 	.word	0xc2f8f359
 80265ec:	01a56e1f 	.word	0x01a56e1f
 80265f0:	8800759c 	.word	0x8800759c
 80265f4:	7e37e43c 	.word	0x7e37e43c
 80265f8:	43500000 	.word	0x43500000
 80265fc:	ffff3cb0 	.word	0xffff3cb0
 8026600:	3c900000 	.word	0x3c900000

08026604 <fabsf>:
 8026604:	ee10 3a10 	vmov	r3, s0
 8026608:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802660c:	ee00 3a10 	vmov	s0, r3
 8026610:	4770      	bx	lr
	...

08026614 <floorf>:
 8026614:	ee10 3a10 	vmov	r3, s0
 8026618:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802661c:	0dca      	lsrs	r2, r1, #23
 802661e:	3a7f      	subs	r2, #127	; 0x7f
 8026620:	2a16      	cmp	r2, #22
 8026622:	dc2a      	bgt.n	802667a <floorf+0x66>
 8026624:	2a00      	cmp	r2, #0
 8026626:	da11      	bge.n	802664c <floorf+0x38>
 8026628:	eddf 7a18 	vldr	s15, [pc, #96]	; 802668c <floorf+0x78>
 802662c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8026630:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8026634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026638:	dd05      	ble.n	8026646 <floorf+0x32>
 802663a:	2b00      	cmp	r3, #0
 802663c:	da23      	bge.n	8026686 <floorf+0x72>
 802663e:	4a14      	ldr	r2, [pc, #80]	; (8026690 <floorf+0x7c>)
 8026640:	2900      	cmp	r1, #0
 8026642:	bf18      	it	ne
 8026644:	4613      	movne	r3, r2
 8026646:	ee00 3a10 	vmov	s0, r3
 802664a:	4770      	bx	lr
 802664c:	4911      	ldr	r1, [pc, #68]	; (8026694 <floorf+0x80>)
 802664e:	4111      	asrs	r1, r2
 8026650:	420b      	tst	r3, r1
 8026652:	d0fa      	beq.n	802664a <floorf+0x36>
 8026654:	eddf 7a0d 	vldr	s15, [pc, #52]	; 802668c <floorf+0x78>
 8026658:	ee30 0a27 	vadd.f32	s0, s0, s15
 802665c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8026660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026664:	ddef      	ble.n	8026646 <floorf+0x32>
 8026666:	2b00      	cmp	r3, #0
 8026668:	bfbe      	ittt	lt
 802666a:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 802666e:	fa40 f202 	asrlt.w	r2, r0, r2
 8026672:	189b      	addlt	r3, r3, r2
 8026674:	ea23 0301 	bic.w	r3, r3, r1
 8026678:	e7e5      	b.n	8026646 <floorf+0x32>
 802667a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 802667e:	d3e4      	bcc.n	802664a <floorf+0x36>
 8026680:	ee30 0a00 	vadd.f32	s0, s0, s0
 8026684:	4770      	bx	lr
 8026686:	2300      	movs	r3, #0
 8026688:	e7dd      	b.n	8026646 <floorf+0x32>
 802668a:	bf00      	nop
 802668c:	7149f2ca 	.word	0x7149f2ca
 8026690:	bf800000 	.word	0xbf800000
 8026694:	007fffff 	.word	0x007fffff

08026698 <scalbnf>:
 8026698:	b508      	push	{r3, lr}
 802669a:	ee10 2a10 	vmov	r2, s0
 802669e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80266a2:	ed2d 8b02 	vpush	{d8}
 80266a6:	eef0 0a40 	vmov.f32	s1, s0
 80266aa:	d004      	beq.n	80266b6 <scalbnf+0x1e>
 80266ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80266b0:	d306      	bcc.n	80266c0 <scalbnf+0x28>
 80266b2:	ee70 0a00 	vadd.f32	s1, s0, s0
 80266b6:	ecbd 8b02 	vpop	{d8}
 80266ba:	eeb0 0a60 	vmov.f32	s0, s1
 80266be:	bd08      	pop	{r3, pc}
 80266c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80266c4:	d21c      	bcs.n	8026700 <scalbnf+0x68>
 80266c6:	4b1f      	ldr	r3, [pc, #124]	; (8026744 <scalbnf+0xac>)
 80266c8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8026748 <scalbnf+0xb0>
 80266cc:	4298      	cmp	r0, r3
 80266ce:	ee60 0a27 	vmul.f32	s1, s0, s15
 80266d2:	db10      	blt.n	80266f6 <scalbnf+0x5e>
 80266d4:	ee10 2a90 	vmov	r2, s1
 80266d8:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80266dc:	3b19      	subs	r3, #25
 80266de:	4403      	add	r3, r0
 80266e0:	2bfe      	cmp	r3, #254	; 0xfe
 80266e2:	dd0f      	ble.n	8026704 <scalbnf+0x6c>
 80266e4:	ed9f 8a19 	vldr	s16, [pc, #100]	; 802674c <scalbnf+0xb4>
 80266e8:	eeb0 0a48 	vmov.f32	s0, s16
 80266ec:	f000 f843 	bl	8026776 <copysignf>
 80266f0:	ee60 0a08 	vmul.f32	s1, s0, s16
 80266f4:	e7df      	b.n	80266b6 <scalbnf+0x1e>
 80266f6:	eddf 7a16 	vldr	s15, [pc, #88]	; 8026750 <scalbnf+0xb8>
 80266fa:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80266fe:	e7da      	b.n	80266b6 <scalbnf+0x1e>
 8026700:	0ddb      	lsrs	r3, r3, #23
 8026702:	e7ec      	b.n	80266de <scalbnf+0x46>
 8026704:	2b00      	cmp	r3, #0
 8026706:	dd06      	ble.n	8026716 <scalbnf+0x7e>
 8026708:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 802670c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8026710:	ee00 3a90 	vmov	s1, r3
 8026714:	e7cf      	b.n	80266b6 <scalbnf+0x1e>
 8026716:	f113 0f16 	cmn.w	r3, #22
 802671a:	da06      	bge.n	802672a <scalbnf+0x92>
 802671c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8026720:	4298      	cmp	r0, r3
 8026722:	dcdf      	bgt.n	80266e4 <scalbnf+0x4c>
 8026724:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8026750 <scalbnf+0xb8>
 8026728:	e7de      	b.n	80266e8 <scalbnf+0x50>
 802672a:	3319      	adds	r3, #25
 802672c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8026730:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8026734:	eddf 7a07 	vldr	s15, [pc, #28]	; 8026754 <scalbnf+0xbc>
 8026738:	ee07 3a10 	vmov	s14, r3
 802673c:	ee67 0a27 	vmul.f32	s1, s14, s15
 8026740:	e7b9      	b.n	80266b6 <scalbnf+0x1e>
 8026742:	bf00      	nop
 8026744:	ffff3cb0 	.word	0xffff3cb0
 8026748:	4c000000 	.word	0x4c000000
 802674c:	7149f2ca 	.word	0x7149f2ca
 8026750:	0da24260 	.word	0x0da24260
 8026754:	33000000 	.word	0x33000000

08026758 <copysign>:
 8026758:	ec51 0b10 	vmov	r0, r1, d0
 802675c:	ee11 0a90 	vmov	r0, s3
 8026760:	ee10 2a10 	vmov	r2, s0
 8026764:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8026768:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 802676c:	ea41 0300 	orr.w	r3, r1, r0
 8026770:	ec43 2b10 	vmov	d0, r2, r3
 8026774:	4770      	bx	lr

08026776 <copysignf>:
 8026776:	ee10 3a10 	vmov	r3, s0
 802677a:	ee10 2a90 	vmov	r2, s1
 802677e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8026782:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8026786:	4313      	orrs	r3, r2
 8026788:	ee00 3a10 	vmov	s0, r3
 802678c:	4770      	bx	lr

0802678e <abort>:
 802678e:	b508      	push	{r3, lr}
 8026790:	2006      	movs	r0, #6
 8026792:	f000 f98d 	bl	8026ab0 <raise>
 8026796:	2001      	movs	r0, #1
 8026798:	f7e1 fe92 	bl	80084c0 <_exit>

0802679c <__libc_init_array>:
 802679c:	b570      	push	{r4, r5, r6, lr}
 802679e:	4e0d      	ldr	r6, [pc, #52]	; (80267d4 <__libc_init_array+0x38>)
 80267a0:	4c0d      	ldr	r4, [pc, #52]	; (80267d8 <__libc_init_array+0x3c>)
 80267a2:	1ba4      	subs	r4, r4, r6
 80267a4:	10a4      	asrs	r4, r4, #2
 80267a6:	2500      	movs	r5, #0
 80267a8:	42a5      	cmp	r5, r4
 80267aa:	d109      	bne.n	80267c0 <__libc_init_array+0x24>
 80267ac:	4e0b      	ldr	r6, [pc, #44]	; (80267dc <__libc_init_array+0x40>)
 80267ae:	4c0c      	ldr	r4, [pc, #48]	; (80267e0 <__libc_init_array+0x44>)
 80267b0:	f000 ffdc 	bl	802776c <_init>
 80267b4:	1ba4      	subs	r4, r4, r6
 80267b6:	10a4      	asrs	r4, r4, #2
 80267b8:	2500      	movs	r5, #0
 80267ba:	42a5      	cmp	r5, r4
 80267bc:	d105      	bne.n	80267ca <__libc_init_array+0x2e>
 80267be:	bd70      	pop	{r4, r5, r6, pc}
 80267c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80267c4:	4798      	blx	r3
 80267c6:	3501      	adds	r5, #1
 80267c8:	e7ee      	b.n	80267a8 <__libc_init_array+0xc>
 80267ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80267ce:	4798      	blx	r3
 80267d0:	3501      	adds	r5, #1
 80267d2:	e7f2      	b.n	80267ba <__libc_init_array+0x1e>
 80267d4:	0802c480 	.word	0x0802c480
 80267d8:	0802c480 	.word	0x0802c480
 80267dc:	0802c480 	.word	0x0802c480
 80267e0:	0802c488 	.word	0x0802c488

080267e4 <malloc>:
 80267e4:	4b02      	ldr	r3, [pc, #8]	; (80267f0 <malloc+0xc>)
 80267e6:	4601      	mov	r1, r0
 80267e8:	6818      	ldr	r0, [r3, #0]
 80267ea:	f000 b87b 	b.w	80268e4 <_malloc_r>
 80267ee:	bf00      	nop
 80267f0:	20000024 	.word	0x20000024

080267f4 <free>:
 80267f4:	4b02      	ldr	r3, [pc, #8]	; (8026800 <free+0xc>)
 80267f6:	4601      	mov	r1, r0
 80267f8:	6818      	ldr	r0, [r3, #0]
 80267fa:	f000 b825 	b.w	8026848 <_free_r>
 80267fe:	bf00      	nop
 8026800:	20000024 	.word	0x20000024

08026804 <memcmp>:
 8026804:	b530      	push	{r4, r5, lr}
 8026806:	2400      	movs	r4, #0
 8026808:	42a2      	cmp	r2, r4
 802680a:	d101      	bne.n	8026810 <memcmp+0xc>
 802680c:	2000      	movs	r0, #0
 802680e:	e007      	b.n	8026820 <memcmp+0x1c>
 8026810:	5d03      	ldrb	r3, [r0, r4]
 8026812:	3401      	adds	r4, #1
 8026814:	190d      	adds	r5, r1, r4
 8026816:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 802681a:	42ab      	cmp	r3, r5
 802681c:	d0f4      	beq.n	8026808 <memcmp+0x4>
 802681e:	1b58      	subs	r0, r3, r5
 8026820:	bd30      	pop	{r4, r5, pc}

08026822 <memcpy>:
 8026822:	b510      	push	{r4, lr}
 8026824:	1e43      	subs	r3, r0, #1
 8026826:	440a      	add	r2, r1
 8026828:	4291      	cmp	r1, r2
 802682a:	d100      	bne.n	802682e <memcpy+0xc>
 802682c:	bd10      	pop	{r4, pc}
 802682e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026832:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026836:	e7f7      	b.n	8026828 <memcpy+0x6>

08026838 <memset>:
 8026838:	4402      	add	r2, r0
 802683a:	4603      	mov	r3, r0
 802683c:	4293      	cmp	r3, r2
 802683e:	d100      	bne.n	8026842 <memset+0xa>
 8026840:	4770      	bx	lr
 8026842:	f803 1b01 	strb.w	r1, [r3], #1
 8026846:	e7f9      	b.n	802683c <memset+0x4>

08026848 <_free_r>:
 8026848:	b538      	push	{r3, r4, r5, lr}
 802684a:	4605      	mov	r5, r0
 802684c:	2900      	cmp	r1, #0
 802684e:	d045      	beq.n	80268dc <_free_r+0x94>
 8026850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026854:	1f0c      	subs	r4, r1, #4
 8026856:	2b00      	cmp	r3, #0
 8026858:	bfb8      	it	lt
 802685a:	18e4      	addlt	r4, r4, r3
 802685c:	f000 fa0e 	bl	8026c7c <__malloc_lock>
 8026860:	4a1f      	ldr	r2, [pc, #124]	; (80268e0 <_free_r+0x98>)
 8026862:	6813      	ldr	r3, [r2, #0]
 8026864:	4610      	mov	r0, r2
 8026866:	b933      	cbnz	r3, 8026876 <_free_r+0x2e>
 8026868:	6063      	str	r3, [r4, #4]
 802686a:	6014      	str	r4, [r2, #0]
 802686c:	4628      	mov	r0, r5
 802686e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026872:	f000 ba04 	b.w	8026c7e <__malloc_unlock>
 8026876:	42a3      	cmp	r3, r4
 8026878:	d90c      	bls.n	8026894 <_free_r+0x4c>
 802687a:	6821      	ldr	r1, [r4, #0]
 802687c:	1862      	adds	r2, r4, r1
 802687e:	4293      	cmp	r3, r2
 8026880:	bf04      	itt	eq
 8026882:	681a      	ldreq	r2, [r3, #0]
 8026884:	685b      	ldreq	r3, [r3, #4]
 8026886:	6063      	str	r3, [r4, #4]
 8026888:	bf04      	itt	eq
 802688a:	1852      	addeq	r2, r2, r1
 802688c:	6022      	streq	r2, [r4, #0]
 802688e:	6004      	str	r4, [r0, #0]
 8026890:	e7ec      	b.n	802686c <_free_r+0x24>
 8026892:	4613      	mov	r3, r2
 8026894:	685a      	ldr	r2, [r3, #4]
 8026896:	b10a      	cbz	r2, 802689c <_free_r+0x54>
 8026898:	42a2      	cmp	r2, r4
 802689a:	d9fa      	bls.n	8026892 <_free_r+0x4a>
 802689c:	6819      	ldr	r1, [r3, #0]
 802689e:	1858      	adds	r0, r3, r1
 80268a0:	42a0      	cmp	r0, r4
 80268a2:	d10b      	bne.n	80268bc <_free_r+0x74>
 80268a4:	6820      	ldr	r0, [r4, #0]
 80268a6:	4401      	add	r1, r0
 80268a8:	1858      	adds	r0, r3, r1
 80268aa:	4282      	cmp	r2, r0
 80268ac:	6019      	str	r1, [r3, #0]
 80268ae:	d1dd      	bne.n	802686c <_free_r+0x24>
 80268b0:	6810      	ldr	r0, [r2, #0]
 80268b2:	6852      	ldr	r2, [r2, #4]
 80268b4:	605a      	str	r2, [r3, #4]
 80268b6:	4401      	add	r1, r0
 80268b8:	6019      	str	r1, [r3, #0]
 80268ba:	e7d7      	b.n	802686c <_free_r+0x24>
 80268bc:	d902      	bls.n	80268c4 <_free_r+0x7c>
 80268be:	230c      	movs	r3, #12
 80268c0:	602b      	str	r3, [r5, #0]
 80268c2:	e7d3      	b.n	802686c <_free_r+0x24>
 80268c4:	6820      	ldr	r0, [r4, #0]
 80268c6:	1821      	adds	r1, r4, r0
 80268c8:	428a      	cmp	r2, r1
 80268ca:	bf04      	itt	eq
 80268cc:	6811      	ldreq	r1, [r2, #0]
 80268ce:	6852      	ldreq	r2, [r2, #4]
 80268d0:	6062      	str	r2, [r4, #4]
 80268d2:	bf04      	itt	eq
 80268d4:	1809      	addeq	r1, r1, r0
 80268d6:	6021      	streq	r1, [r4, #0]
 80268d8:	605c      	str	r4, [r3, #4]
 80268da:	e7c7      	b.n	802686c <_free_r+0x24>
 80268dc:	bd38      	pop	{r3, r4, r5, pc}
 80268de:	bf00      	nop
 80268e0:	2001330c 	.word	0x2001330c

080268e4 <_malloc_r>:
 80268e4:	b570      	push	{r4, r5, r6, lr}
 80268e6:	1ccd      	adds	r5, r1, #3
 80268e8:	f025 0503 	bic.w	r5, r5, #3
 80268ec:	3508      	adds	r5, #8
 80268ee:	2d0c      	cmp	r5, #12
 80268f0:	bf38      	it	cc
 80268f2:	250c      	movcc	r5, #12
 80268f4:	2d00      	cmp	r5, #0
 80268f6:	4606      	mov	r6, r0
 80268f8:	db01      	blt.n	80268fe <_malloc_r+0x1a>
 80268fa:	42a9      	cmp	r1, r5
 80268fc:	d903      	bls.n	8026906 <_malloc_r+0x22>
 80268fe:	230c      	movs	r3, #12
 8026900:	6033      	str	r3, [r6, #0]
 8026902:	2000      	movs	r0, #0
 8026904:	bd70      	pop	{r4, r5, r6, pc}
 8026906:	f000 f9b9 	bl	8026c7c <__malloc_lock>
 802690a:	4a21      	ldr	r2, [pc, #132]	; (8026990 <_malloc_r+0xac>)
 802690c:	6814      	ldr	r4, [r2, #0]
 802690e:	4621      	mov	r1, r4
 8026910:	b991      	cbnz	r1, 8026938 <_malloc_r+0x54>
 8026912:	4c20      	ldr	r4, [pc, #128]	; (8026994 <_malloc_r+0xb0>)
 8026914:	6823      	ldr	r3, [r4, #0]
 8026916:	b91b      	cbnz	r3, 8026920 <_malloc_r+0x3c>
 8026918:	4630      	mov	r0, r6
 802691a:	f000 f891 	bl	8026a40 <_sbrk_r>
 802691e:	6020      	str	r0, [r4, #0]
 8026920:	4629      	mov	r1, r5
 8026922:	4630      	mov	r0, r6
 8026924:	f000 f88c 	bl	8026a40 <_sbrk_r>
 8026928:	1c43      	adds	r3, r0, #1
 802692a:	d124      	bne.n	8026976 <_malloc_r+0x92>
 802692c:	230c      	movs	r3, #12
 802692e:	6033      	str	r3, [r6, #0]
 8026930:	4630      	mov	r0, r6
 8026932:	f000 f9a4 	bl	8026c7e <__malloc_unlock>
 8026936:	e7e4      	b.n	8026902 <_malloc_r+0x1e>
 8026938:	680b      	ldr	r3, [r1, #0]
 802693a:	1b5b      	subs	r3, r3, r5
 802693c:	d418      	bmi.n	8026970 <_malloc_r+0x8c>
 802693e:	2b0b      	cmp	r3, #11
 8026940:	d90f      	bls.n	8026962 <_malloc_r+0x7e>
 8026942:	600b      	str	r3, [r1, #0]
 8026944:	50cd      	str	r5, [r1, r3]
 8026946:	18cc      	adds	r4, r1, r3
 8026948:	4630      	mov	r0, r6
 802694a:	f000 f998 	bl	8026c7e <__malloc_unlock>
 802694e:	f104 000b 	add.w	r0, r4, #11
 8026952:	1d23      	adds	r3, r4, #4
 8026954:	f020 0007 	bic.w	r0, r0, #7
 8026958:	1ac3      	subs	r3, r0, r3
 802695a:	d0d3      	beq.n	8026904 <_malloc_r+0x20>
 802695c:	425a      	negs	r2, r3
 802695e:	50e2      	str	r2, [r4, r3]
 8026960:	e7d0      	b.n	8026904 <_malloc_r+0x20>
 8026962:	428c      	cmp	r4, r1
 8026964:	684b      	ldr	r3, [r1, #4]
 8026966:	bf16      	itet	ne
 8026968:	6063      	strne	r3, [r4, #4]
 802696a:	6013      	streq	r3, [r2, #0]
 802696c:	460c      	movne	r4, r1
 802696e:	e7eb      	b.n	8026948 <_malloc_r+0x64>
 8026970:	460c      	mov	r4, r1
 8026972:	6849      	ldr	r1, [r1, #4]
 8026974:	e7cc      	b.n	8026910 <_malloc_r+0x2c>
 8026976:	1cc4      	adds	r4, r0, #3
 8026978:	f024 0403 	bic.w	r4, r4, #3
 802697c:	42a0      	cmp	r0, r4
 802697e:	d005      	beq.n	802698c <_malloc_r+0xa8>
 8026980:	1a21      	subs	r1, r4, r0
 8026982:	4630      	mov	r0, r6
 8026984:	f000 f85c 	bl	8026a40 <_sbrk_r>
 8026988:	3001      	adds	r0, #1
 802698a:	d0cf      	beq.n	802692c <_malloc_r+0x48>
 802698c:	6025      	str	r5, [r4, #0]
 802698e:	e7db      	b.n	8026948 <_malloc_r+0x64>
 8026990:	2001330c 	.word	0x2001330c
 8026994:	20013310 	.word	0x20013310

08026998 <iprintf>:
 8026998:	b40f      	push	{r0, r1, r2, r3}
 802699a:	4b0a      	ldr	r3, [pc, #40]	; (80269c4 <iprintf+0x2c>)
 802699c:	b513      	push	{r0, r1, r4, lr}
 802699e:	681c      	ldr	r4, [r3, #0]
 80269a0:	b124      	cbz	r4, 80269ac <iprintf+0x14>
 80269a2:	69a3      	ldr	r3, [r4, #24]
 80269a4:	b913      	cbnz	r3, 80269ac <iprintf+0x14>
 80269a6:	4620      	mov	r0, r4
 80269a8:	f000 f8de 	bl	8026b68 <__sinit>
 80269ac:	ab05      	add	r3, sp, #20
 80269ae:	9a04      	ldr	r2, [sp, #16]
 80269b0:	68a1      	ldr	r1, [r4, #8]
 80269b2:	9301      	str	r3, [sp, #4]
 80269b4:	4620      	mov	r0, r4
 80269b6:	f000 f9b3 	bl	8026d20 <_vfiprintf_r>
 80269ba:	b002      	add	sp, #8
 80269bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80269c0:	b004      	add	sp, #16
 80269c2:	4770      	bx	lr
 80269c4:	20000024 	.word	0x20000024

080269c8 <rand>:
 80269c8:	b538      	push	{r3, r4, r5, lr}
 80269ca:	4b13      	ldr	r3, [pc, #76]	; (8026a18 <rand+0x50>)
 80269cc:	681c      	ldr	r4, [r3, #0]
 80269ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80269d0:	b97b      	cbnz	r3, 80269f2 <rand+0x2a>
 80269d2:	2018      	movs	r0, #24
 80269d4:	f7ff ff06 	bl	80267e4 <malloc>
 80269d8:	4a10      	ldr	r2, [pc, #64]	; (8026a1c <rand+0x54>)
 80269da:	4b11      	ldr	r3, [pc, #68]	; (8026a20 <rand+0x58>)
 80269dc:	63a0      	str	r0, [r4, #56]	; 0x38
 80269de:	e9c0 2300 	strd	r2, r3, [r0]
 80269e2:	4b10      	ldr	r3, [pc, #64]	; (8026a24 <rand+0x5c>)
 80269e4:	6083      	str	r3, [r0, #8]
 80269e6:	230b      	movs	r3, #11
 80269e8:	8183      	strh	r3, [r0, #12]
 80269ea:	2201      	movs	r2, #1
 80269ec:	2300      	movs	r3, #0
 80269ee:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80269f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80269f4:	480c      	ldr	r0, [pc, #48]	; (8026a28 <rand+0x60>)
 80269f6:	690a      	ldr	r2, [r1, #16]
 80269f8:	694b      	ldr	r3, [r1, #20]
 80269fa:	4c0c      	ldr	r4, [pc, #48]	; (8026a2c <rand+0x64>)
 80269fc:	4350      	muls	r0, r2
 80269fe:	fb04 0003 	mla	r0, r4, r3, r0
 8026a02:	fba2 2304 	umull	r2, r3, r2, r4
 8026a06:	4403      	add	r3, r0
 8026a08:	1c54      	adds	r4, r2, #1
 8026a0a:	f143 0500 	adc.w	r5, r3, #0
 8026a0e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8026a12:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8026a16:	bd38      	pop	{r3, r4, r5, pc}
 8026a18:	20000024 	.word	0x20000024
 8026a1c:	abcd330e 	.word	0xabcd330e
 8026a20:	e66d1234 	.word	0xe66d1234
 8026a24:	0005deec 	.word	0x0005deec
 8026a28:	5851f42d 	.word	0x5851f42d
 8026a2c:	4c957f2d 	.word	0x4c957f2d

08026a30 <realloc>:
 8026a30:	4b02      	ldr	r3, [pc, #8]	; (8026a3c <realloc+0xc>)
 8026a32:	460a      	mov	r2, r1
 8026a34:	4601      	mov	r1, r0
 8026a36:	6818      	ldr	r0, [r3, #0]
 8026a38:	f000 b922 	b.w	8026c80 <_realloc_r>
 8026a3c:	20000024 	.word	0x20000024

08026a40 <_sbrk_r>:
 8026a40:	b538      	push	{r3, r4, r5, lr}
 8026a42:	4c06      	ldr	r4, [pc, #24]	; (8026a5c <_sbrk_r+0x1c>)
 8026a44:	2300      	movs	r3, #0
 8026a46:	4605      	mov	r5, r0
 8026a48:	4608      	mov	r0, r1
 8026a4a:	6023      	str	r3, [r4, #0]
 8026a4c:	f7e1 fdb0 	bl	80085b0 <_sbrk>
 8026a50:	1c43      	adds	r3, r0, #1
 8026a52:	d102      	bne.n	8026a5a <_sbrk_r+0x1a>
 8026a54:	6823      	ldr	r3, [r4, #0]
 8026a56:	b103      	cbz	r3, 8026a5a <_sbrk_r+0x1a>
 8026a58:	602b      	str	r3, [r5, #0]
 8026a5a:	bd38      	pop	{r3, r4, r5, pc}
 8026a5c:	2001a038 	.word	0x2001a038

08026a60 <_raise_r>:
 8026a60:	291f      	cmp	r1, #31
 8026a62:	b538      	push	{r3, r4, r5, lr}
 8026a64:	4604      	mov	r4, r0
 8026a66:	460d      	mov	r5, r1
 8026a68:	d904      	bls.n	8026a74 <_raise_r+0x14>
 8026a6a:	2316      	movs	r3, #22
 8026a6c:	6003      	str	r3, [r0, #0]
 8026a6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8026a72:	bd38      	pop	{r3, r4, r5, pc}
 8026a74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8026a76:	b112      	cbz	r2, 8026a7e <_raise_r+0x1e>
 8026a78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026a7c:	b94b      	cbnz	r3, 8026a92 <_raise_r+0x32>
 8026a7e:	4620      	mov	r0, r4
 8026a80:	f000 f830 	bl	8026ae4 <_getpid_r>
 8026a84:	462a      	mov	r2, r5
 8026a86:	4601      	mov	r1, r0
 8026a88:	4620      	mov	r0, r4
 8026a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026a8e:	f000 b817 	b.w	8026ac0 <_kill_r>
 8026a92:	2b01      	cmp	r3, #1
 8026a94:	d00a      	beq.n	8026aac <_raise_r+0x4c>
 8026a96:	1c59      	adds	r1, r3, #1
 8026a98:	d103      	bne.n	8026aa2 <_raise_r+0x42>
 8026a9a:	2316      	movs	r3, #22
 8026a9c:	6003      	str	r3, [r0, #0]
 8026a9e:	2001      	movs	r0, #1
 8026aa0:	e7e7      	b.n	8026a72 <_raise_r+0x12>
 8026aa2:	2400      	movs	r4, #0
 8026aa4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026aa8:	4628      	mov	r0, r5
 8026aaa:	4798      	blx	r3
 8026aac:	2000      	movs	r0, #0
 8026aae:	e7e0      	b.n	8026a72 <_raise_r+0x12>

08026ab0 <raise>:
 8026ab0:	4b02      	ldr	r3, [pc, #8]	; (8026abc <raise+0xc>)
 8026ab2:	4601      	mov	r1, r0
 8026ab4:	6818      	ldr	r0, [r3, #0]
 8026ab6:	f7ff bfd3 	b.w	8026a60 <_raise_r>
 8026aba:	bf00      	nop
 8026abc:	20000024 	.word	0x20000024

08026ac0 <_kill_r>:
 8026ac0:	b538      	push	{r3, r4, r5, lr}
 8026ac2:	4c07      	ldr	r4, [pc, #28]	; (8026ae0 <_kill_r+0x20>)
 8026ac4:	2300      	movs	r3, #0
 8026ac6:	4605      	mov	r5, r0
 8026ac8:	4608      	mov	r0, r1
 8026aca:	4611      	mov	r1, r2
 8026acc:	6023      	str	r3, [r4, #0]
 8026ace:	f7e1 fce5 	bl	800849c <_kill>
 8026ad2:	1c43      	adds	r3, r0, #1
 8026ad4:	d102      	bne.n	8026adc <_kill_r+0x1c>
 8026ad6:	6823      	ldr	r3, [r4, #0]
 8026ad8:	b103      	cbz	r3, 8026adc <_kill_r+0x1c>
 8026ada:	602b      	str	r3, [r5, #0]
 8026adc:	bd38      	pop	{r3, r4, r5, pc}
 8026ade:	bf00      	nop
 8026ae0:	2001a038 	.word	0x2001a038

08026ae4 <_getpid_r>:
 8026ae4:	f7e1 bcd2 	b.w	800848c <_getpid>

08026ae8 <std>:
 8026ae8:	2300      	movs	r3, #0
 8026aea:	b510      	push	{r4, lr}
 8026aec:	4604      	mov	r4, r0
 8026aee:	e9c0 3300 	strd	r3, r3, [r0]
 8026af2:	6083      	str	r3, [r0, #8]
 8026af4:	8181      	strh	r1, [r0, #12]
 8026af6:	6643      	str	r3, [r0, #100]	; 0x64
 8026af8:	81c2      	strh	r2, [r0, #14]
 8026afa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8026afe:	6183      	str	r3, [r0, #24]
 8026b00:	4619      	mov	r1, r3
 8026b02:	2208      	movs	r2, #8
 8026b04:	305c      	adds	r0, #92	; 0x5c
 8026b06:	f7ff fe97 	bl	8026838 <memset>
 8026b0a:	4b05      	ldr	r3, [pc, #20]	; (8026b20 <std+0x38>)
 8026b0c:	6263      	str	r3, [r4, #36]	; 0x24
 8026b0e:	4b05      	ldr	r3, [pc, #20]	; (8026b24 <std+0x3c>)
 8026b10:	62a3      	str	r3, [r4, #40]	; 0x28
 8026b12:	4b05      	ldr	r3, [pc, #20]	; (8026b28 <std+0x40>)
 8026b14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8026b16:	4b05      	ldr	r3, [pc, #20]	; (8026b2c <std+0x44>)
 8026b18:	6224      	str	r4, [r4, #32]
 8026b1a:	6323      	str	r3, [r4, #48]	; 0x30
 8026b1c:	bd10      	pop	{r4, pc}
 8026b1e:	bf00      	nop
 8026b20:	0802725d 	.word	0x0802725d
 8026b24:	0802727f 	.word	0x0802727f
 8026b28:	080272b7 	.word	0x080272b7
 8026b2c:	080272db 	.word	0x080272db

08026b30 <_cleanup_r>:
 8026b30:	4901      	ldr	r1, [pc, #4]	; (8026b38 <_cleanup_r+0x8>)
 8026b32:	f000 b885 	b.w	8026c40 <_fwalk_reent>
 8026b36:	bf00      	nop
 8026b38:	080275b5 	.word	0x080275b5

08026b3c <__sfmoreglue>:
 8026b3c:	b570      	push	{r4, r5, r6, lr}
 8026b3e:	1e4a      	subs	r2, r1, #1
 8026b40:	2568      	movs	r5, #104	; 0x68
 8026b42:	4355      	muls	r5, r2
 8026b44:	460e      	mov	r6, r1
 8026b46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8026b4a:	f7ff fecb 	bl	80268e4 <_malloc_r>
 8026b4e:	4604      	mov	r4, r0
 8026b50:	b140      	cbz	r0, 8026b64 <__sfmoreglue+0x28>
 8026b52:	2100      	movs	r1, #0
 8026b54:	e9c0 1600 	strd	r1, r6, [r0]
 8026b58:	300c      	adds	r0, #12
 8026b5a:	60a0      	str	r0, [r4, #8]
 8026b5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8026b60:	f7ff fe6a 	bl	8026838 <memset>
 8026b64:	4620      	mov	r0, r4
 8026b66:	bd70      	pop	{r4, r5, r6, pc}

08026b68 <__sinit>:
 8026b68:	6983      	ldr	r3, [r0, #24]
 8026b6a:	b510      	push	{r4, lr}
 8026b6c:	4604      	mov	r4, r0
 8026b6e:	bb33      	cbnz	r3, 8026bbe <__sinit+0x56>
 8026b70:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8026b74:	6503      	str	r3, [r0, #80]	; 0x50
 8026b76:	4b12      	ldr	r3, [pc, #72]	; (8026bc0 <__sinit+0x58>)
 8026b78:	4a12      	ldr	r2, [pc, #72]	; (8026bc4 <__sinit+0x5c>)
 8026b7a:	681b      	ldr	r3, [r3, #0]
 8026b7c:	6282      	str	r2, [r0, #40]	; 0x28
 8026b7e:	4298      	cmp	r0, r3
 8026b80:	bf04      	itt	eq
 8026b82:	2301      	moveq	r3, #1
 8026b84:	6183      	streq	r3, [r0, #24]
 8026b86:	f000 f81f 	bl	8026bc8 <__sfp>
 8026b8a:	6060      	str	r0, [r4, #4]
 8026b8c:	4620      	mov	r0, r4
 8026b8e:	f000 f81b 	bl	8026bc8 <__sfp>
 8026b92:	60a0      	str	r0, [r4, #8]
 8026b94:	4620      	mov	r0, r4
 8026b96:	f000 f817 	bl	8026bc8 <__sfp>
 8026b9a:	2200      	movs	r2, #0
 8026b9c:	60e0      	str	r0, [r4, #12]
 8026b9e:	2104      	movs	r1, #4
 8026ba0:	6860      	ldr	r0, [r4, #4]
 8026ba2:	f7ff ffa1 	bl	8026ae8 <std>
 8026ba6:	2201      	movs	r2, #1
 8026ba8:	2109      	movs	r1, #9
 8026baa:	68a0      	ldr	r0, [r4, #8]
 8026bac:	f7ff ff9c 	bl	8026ae8 <std>
 8026bb0:	2202      	movs	r2, #2
 8026bb2:	2112      	movs	r1, #18
 8026bb4:	68e0      	ldr	r0, [r4, #12]
 8026bb6:	f7ff ff97 	bl	8026ae8 <std>
 8026bba:	2301      	movs	r3, #1
 8026bbc:	61a3      	str	r3, [r4, #24]
 8026bbe:	bd10      	pop	{r4, pc}
 8026bc0:	0802c3e0 	.word	0x0802c3e0
 8026bc4:	08026b31 	.word	0x08026b31

08026bc8 <__sfp>:
 8026bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026bca:	4b1b      	ldr	r3, [pc, #108]	; (8026c38 <__sfp+0x70>)
 8026bcc:	681e      	ldr	r6, [r3, #0]
 8026bce:	69b3      	ldr	r3, [r6, #24]
 8026bd0:	4607      	mov	r7, r0
 8026bd2:	b913      	cbnz	r3, 8026bda <__sfp+0x12>
 8026bd4:	4630      	mov	r0, r6
 8026bd6:	f7ff ffc7 	bl	8026b68 <__sinit>
 8026bda:	3648      	adds	r6, #72	; 0x48
 8026bdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8026be0:	3b01      	subs	r3, #1
 8026be2:	d503      	bpl.n	8026bec <__sfp+0x24>
 8026be4:	6833      	ldr	r3, [r6, #0]
 8026be6:	b133      	cbz	r3, 8026bf6 <__sfp+0x2e>
 8026be8:	6836      	ldr	r6, [r6, #0]
 8026bea:	e7f7      	b.n	8026bdc <__sfp+0x14>
 8026bec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8026bf0:	b16d      	cbz	r5, 8026c0e <__sfp+0x46>
 8026bf2:	3468      	adds	r4, #104	; 0x68
 8026bf4:	e7f4      	b.n	8026be0 <__sfp+0x18>
 8026bf6:	2104      	movs	r1, #4
 8026bf8:	4638      	mov	r0, r7
 8026bfa:	f7ff ff9f 	bl	8026b3c <__sfmoreglue>
 8026bfe:	6030      	str	r0, [r6, #0]
 8026c00:	2800      	cmp	r0, #0
 8026c02:	d1f1      	bne.n	8026be8 <__sfp+0x20>
 8026c04:	230c      	movs	r3, #12
 8026c06:	603b      	str	r3, [r7, #0]
 8026c08:	4604      	mov	r4, r0
 8026c0a:	4620      	mov	r0, r4
 8026c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026c0e:	4b0b      	ldr	r3, [pc, #44]	; (8026c3c <__sfp+0x74>)
 8026c10:	6665      	str	r5, [r4, #100]	; 0x64
 8026c12:	e9c4 5500 	strd	r5, r5, [r4]
 8026c16:	60a5      	str	r5, [r4, #8]
 8026c18:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8026c1c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8026c20:	2208      	movs	r2, #8
 8026c22:	4629      	mov	r1, r5
 8026c24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8026c28:	f7ff fe06 	bl	8026838 <memset>
 8026c2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8026c30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8026c34:	e7e9      	b.n	8026c0a <__sfp+0x42>
 8026c36:	bf00      	nop
 8026c38:	0802c3e0 	.word	0x0802c3e0
 8026c3c:	ffff0001 	.word	0xffff0001

08026c40 <_fwalk_reent>:
 8026c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026c44:	4680      	mov	r8, r0
 8026c46:	4689      	mov	r9, r1
 8026c48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8026c4c:	2600      	movs	r6, #0
 8026c4e:	b914      	cbnz	r4, 8026c56 <_fwalk_reent+0x16>
 8026c50:	4630      	mov	r0, r6
 8026c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026c56:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8026c5a:	3f01      	subs	r7, #1
 8026c5c:	d501      	bpl.n	8026c62 <_fwalk_reent+0x22>
 8026c5e:	6824      	ldr	r4, [r4, #0]
 8026c60:	e7f5      	b.n	8026c4e <_fwalk_reent+0xe>
 8026c62:	89ab      	ldrh	r3, [r5, #12]
 8026c64:	2b01      	cmp	r3, #1
 8026c66:	d907      	bls.n	8026c78 <_fwalk_reent+0x38>
 8026c68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026c6c:	3301      	adds	r3, #1
 8026c6e:	d003      	beq.n	8026c78 <_fwalk_reent+0x38>
 8026c70:	4629      	mov	r1, r5
 8026c72:	4640      	mov	r0, r8
 8026c74:	47c8      	blx	r9
 8026c76:	4306      	orrs	r6, r0
 8026c78:	3568      	adds	r5, #104	; 0x68
 8026c7a:	e7ee      	b.n	8026c5a <_fwalk_reent+0x1a>

08026c7c <__malloc_lock>:
 8026c7c:	4770      	bx	lr

08026c7e <__malloc_unlock>:
 8026c7e:	4770      	bx	lr

08026c80 <_realloc_r>:
 8026c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026c82:	4607      	mov	r7, r0
 8026c84:	4614      	mov	r4, r2
 8026c86:	460e      	mov	r6, r1
 8026c88:	b921      	cbnz	r1, 8026c94 <_realloc_r+0x14>
 8026c8a:	4611      	mov	r1, r2
 8026c8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8026c90:	f7ff be28 	b.w	80268e4 <_malloc_r>
 8026c94:	b922      	cbnz	r2, 8026ca0 <_realloc_r+0x20>
 8026c96:	f7ff fdd7 	bl	8026848 <_free_r>
 8026c9a:	4625      	mov	r5, r4
 8026c9c:	4628      	mov	r0, r5
 8026c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026ca0:	f000 fd28 	bl	80276f4 <_malloc_usable_size_r>
 8026ca4:	42a0      	cmp	r0, r4
 8026ca6:	d20f      	bcs.n	8026cc8 <_realloc_r+0x48>
 8026ca8:	4621      	mov	r1, r4
 8026caa:	4638      	mov	r0, r7
 8026cac:	f7ff fe1a 	bl	80268e4 <_malloc_r>
 8026cb0:	4605      	mov	r5, r0
 8026cb2:	2800      	cmp	r0, #0
 8026cb4:	d0f2      	beq.n	8026c9c <_realloc_r+0x1c>
 8026cb6:	4631      	mov	r1, r6
 8026cb8:	4622      	mov	r2, r4
 8026cba:	f7ff fdb2 	bl	8026822 <memcpy>
 8026cbe:	4631      	mov	r1, r6
 8026cc0:	4638      	mov	r0, r7
 8026cc2:	f7ff fdc1 	bl	8026848 <_free_r>
 8026cc6:	e7e9      	b.n	8026c9c <_realloc_r+0x1c>
 8026cc8:	4635      	mov	r5, r6
 8026cca:	e7e7      	b.n	8026c9c <_realloc_r+0x1c>

08026ccc <__sfputc_r>:
 8026ccc:	6893      	ldr	r3, [r2, #8]
 8026cce:	3b01      	subs	r3, #1
 8026cd0:	2b00      	cmp	r3, #0
 8026cd2:	b410      	push	{r4}
 8026cd4:	6093      	str	r3, [r2, #8]
 8026cd6:	da08      	bge.n	8026cea <__sfputc_r+0x1e>
 8026cd8:	6994      	ldr	r4, [r2, #24]
 8026cda:	42a3      	cmp	r3, r4
 8026cdc:	db01      	blt.n	8026ce2 <__sfputc_r+0x16>
 8026cde:	290a      	cmp	r1, #10
 8026ce0:	d103      	bne.n	8026cea <__sfputc_r+0x1e>
 8026ce2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026ce6:	f000 bafd 	b.w	80272e4 <__swbuf_r>
 8026cea:	6813      	ldr	r3, [r2, #0]
 8026cec:	1c58      	adds	r0, r3, #1
 8026cee:	6010      	str	r0, [r2, #0]
 8026cf0:	7019      	strb	r1, [r3, #0]
 8026cf2:	4608      	mov	r0, r1
 8026cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026cf8:	4770      	bx	lr

08026cfa <__sfputs_r>:
 8026cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026cfc:	4606      	mov	r6, r0
 8026cfe:	460f      	mov	r7, r1
 8026d00:	4614      	mov	r4, r2
 8026d02:	18d5      	adds	r5, r2, r3
 8026d04:	42ac      	cmp	r4, r5
 8026d06:	d101      	bne.n	8026d0c <__sfputs_r+0x12>
 8026d08:	2000      	movs	r0, #0
 8026d0a:	e007      	b.n	8026d1c <__sfputs_r+0x22>
 8026d0c:	463a      	mov	r2, r7
 8026d0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026d12:	4630      	mov	r0, r6
 8026d14:	f7ff ffda 	bl	8026ccc <__sfputc_r>
 8026d18:	1c43      	adds	r3, r0, #1
 8026d1a:	d1f3      	bne.n	8026d04 <__sfputs_r+0xa>
 8026d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026d20 <_vfiprintf_r>:
 8026d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d24:	460c      	mov	r4, r1
 8026d26:	b09d      	sub	sp, #116	; 0x74
 8026d28:	4617      	mov	r7, r2
 8026d2a:	461d      	mov	r5, r3
 8026d2c:	4606      	mov	r6, r0
 8026d2e:	b118      	cbz	r0, 8026d38 <_vfiprintf_r+0x18>
 8026d30:	6983      	ldr	r3, [r0, #24]
 8026d32:	b90b      	cbnz	r3, 8026d38 <_vfiprintf_r+0x18>
 8026d34:	f7ff ff18 	bl	8026b68 <__sinit>
 8026d38:	4b7c      	ldr	r3, [pc, #496]	; (8026f2c <_vfiprintf_r+0x20c>)
 8026d3a:	429c      	cmp	r4, r3
 8026d3c:	d158      	bne.n	8026df0 <_vfiprintf_r+0xd0>
 8026d3e:	6874      	ldr	r4, [r6, #4]
 8026d40:	89a3      	ldrh	r3, [r4, #12]
 8026d42:	0718      	lsls	r0, r3, #28
 8026d44:	d55e      	bpl.n	8026e04 <_vfiprintf_r+0xe4>
 8026d46:	6923      	ldr	r3, [r4, #16]
 8026d48:	2b00      	cmp	r3, #0
 8026d4a:	d05b      	beq.n	8026e04 <_vfiprintf_r+0xe4>
 8026d4c:	2300      	movs	r3, #0
 8026d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8026d50:	2320      	movs	r3, #32
 8026d52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026d56:	2330      	movs	r3, #48	; 0x30
 8026d58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026d5c:	9503      	str	r5, [sp, #12]
 8026d5e:	f04f 0b01 	mov.w	fp, #1
 8026d62:	46b8      	mov	r8, r7
 8026d64:	4645      	mov	r5, r8
 8026d66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8026d6a:	b10b      	cbz	r3, 8026d70 <_vfiprintf_r+0x50>
 8026d6c:	2b25      	cmp	r3, #37	; 0x25
 8026d6e:	d154      	bne.n	8026e1a <_vfiprintf_r+0xfa>
 8026d70:	ebb8 0a07 	subs.w	sl, r8, r7
 8026d74:	d00b      	beq.n	8026d8e <_vfiprintf_r+0x6e>
 8026d76:	4653      	mov	r3, sl
 8026d78:	463a      	mov	r2, r7
 8026d7a:	4621      	mov	r1, r4
 8026d7c:	4630      	mov	r0, r6
 8026d7e:	f7ff ffbc 	bl	8026cfa <__sfputs_r>
 8026d82:	3001      	adds	r0, #1
 8026d84:	f000 80c2 	beq.w	8026f0c <_vfiprintf_r+0x1ec>
 8026d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026d8a:	4453      	add	r3, sl
 8026d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8026d8e:	f898 3000 	ldrb.w	r3, [r8]
 8026d92:	2b00      	cmp	r3, #0
 8026d94:	f000 80ba 	beq.w	8026f0c <_vfiprintf_r+0x1ec>
 8026d98:	2300      	movs	r3, #0
 8026d9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8026d9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026da2:	9304      	str	r3, [sp, #16]
 8026da4:	9307      	str	r3, [sp, #28]
 8026da6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026daa:	931a      	str	r3, [sp, #104]	; 0x68
 8026dac:	46a8      	mov	r8, r5
 8026dae:	2205      	movs	r2, #5
 8026db0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8026db4:	485e      	ldr	r0, [pc, #376]	; (8026f30 <_vfiprintf_r+0x210>)
 8026db6:	f7d9 fa13 	bl	80001e0 <memchr>
 8026dba:	9b04      	ldr	r3, [sp, #16]
 8026dbc:	bb78      	cbnz	r0, 8026e1e <_vfiprintf_r+0xfe>
 8026dbe:	06d9      	lsls	r1, r3, #27
 8026dc0:	bf44      	itt	mi
 8026dc2:	2220      	movmi	r2, #32
 8026dc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8026dc8:	071a      	lsls	r2, r3, #28
 8026dca:	bf44      	itt	mi
 8026dcc:	222b      	movmi	r2, #43	; 0x2b
 8026dce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8026dd2:	782a      	ldrb	r2, [r5, #0]
 8026dd4:	2a2a      	cmp	r2, #42	; 0x2a
 8026dd6:	d02a      	beq.n	8026e2e <_vfiprintf_r+0x10e>
 8026dd8:	9a07      	ldr	r2, [sp, #28]
 8026dda:	46a8      	mov	r8, r5
 8026ddc:	2000      	movs	r0, #0
 8026dde:	250a      	movs	r5, #10
 8026de0:	4641      	mov	r1, r8
 8026de2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026de6:	3b30      	subs	r3, #48	; 0x30
 8026de8:	2b09      	cmp	r3, #9
 8026dea:	d969      	bls.n	8026ec0 <_vfiprintf_r+0x1a0>
 8026dec:	b360      	cbz	r0, 8026e48 <_vfiprintf_r+0x128>
 8026dee:	e024      	b.n	8026e3a <_vfiprintf_r+0x11a>
 8026df0:	4b50      	ldr	r3, [pc, #320]	; (8026f34 <_vfiprintf_r+0x214>)
 8026df2:	429c      	cmp	r4, r3
 8026df4:	d101      	bne.n	8026dfa <_vfiprintf_r+0xda>
 8026df6:	68b4      	ldr	r4, [r6, #8]
 8026df8:	e7a2      	b.n	8026d40 <_vfiprintf_r+0x20>
 8026dfa:	4b4f      	ldr	r3, [pc, #316]	; (8026f38 <_vfiprintf_r+0x218>)
 8026dfc:	429c      	cmp	r4, r3
 8026dfe:	bf08      	it	eq
 8026e00:	68f4      	ldreq	r4, [r6, #12]
 8026e02:	e79d      	b.n	8026d40 <_vfiprintf_r+0x20>
 8026e04:	4621      	mov	r1, r4
 8026e06:	4630      	mov	r0, r6
 8026e08:	f000 fad0 	bl	80273ac <__swsetup_r>
 8026e0c:	2800      	cmp	r0, #0
 8026e0e:	d09d      	beq.n	8026d4c <_vfiprintf_r+0x2c>
 8026e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8026e14:	b01d      	add	sp, #116	; 0x74
 8026e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e1a:	46a8      	mov	r8, r5
 8026e1c:	e7a2      	b.n	8026d64 <_vfiprintf_r+0x44>
 8026e1e:	4a44      	ldr	r2, [pc, #272]	; (8026f30 <_vfiprintf_r+0x210>)
 8026e20:	1a80      	subs	r0, r0, r2
 8026e22:	fa0b f000 	lsl.w	r0, fp, r0
 8026e26:	4318      	orrs	r0, r3
 8026e28:	9004      	str	r0, [sp, #16]
 8026e2a:	4645      	mov	r5, r8
 8026e2c:	e7be      	b.n	8026dac <_vfiprintf_r+0x8c>
 8026e2e:	9a03      	ldr	r2, [sp, #12]
 8026e30:	1d11      	adds	r1, r2, #4
 8026e32:	6812      	ldr	r2, [r2, #0]
 8026e34:	9103      	str	r1, [sp, #12]
 8026e36:	2a00      	cmp	r2, #0
 8026e38:	db01      	blt.n	8026e3e <_vfiprintf_r+0x11e>
 8026e3a:	9207      	str	r2, [sp, #28]
 8026e3c:	e004      	b.n	8026e48 <_vfiprintf_r+0x128>
 8026e3e:	4252      	negs	r2, r2
 8026e40:	f043 0302 	orr.w	r3, r3, #2
 8026e44:	9207      	str	r2, [sp, #28]
 8026e46:	9304      	str	r3, [sp, #16]
 8026e48:	f898 3000 	ldrb.w	r3, [r8]
 8026e4c:	2b2e      	cmp	r3, #46	; 0x2e
 8026e4e:	d10e      	bne.n	8026e6e <_vfiprintf_r+0x14e>
 8026e50:	f898 3001 	ldrb.w	r3, [r8, #1]
 8026e54:	2b2a      	cmp	r3, #42	; 0x2a
 8026e56:	d138      	bne.n	8026eca <_vfiprintf_r+0x1aa>
 8026e58:	9b03      	ldr	r3, [sp, #12]
 8026e5a:	1d1a      	adds	r2, r3, #4
 8026e5c:	681b      	ldr	r3, [r3, #0]
 8026e5e:	9203      	str	r2, [sp, #12]
 8026e60:	2b00      	cmp	r3, #0
 8026e62:	bfb8      	it	lt
 8026e64:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8026e68:	f108 0802 	add.w	r8, r8, #2
 8026e6c:	9305      	str	r3, [sp, #20]
 8026e6e:	4d33      	ldr	r5, [pc, #204]	; (8026f3c <_vfiprintf_r+0x21c>)
 8026e70:	f898 1000 	ldrb.w	r1, [r8]
 8026e74:	2203      	movs	r2, #3
 8026e76:	4628      	mov	r0, r5
 8026e78:	f7d9 f9b2 	bl	80001e0 <memchr>
 8026e7c:	b140      	cbz	r0, 8026e90 <_vfiprintf_r+0x170>
 8026e7e:	2340      	movs	r3, #64	; 0x40
 8026e80:	1b40      	subs	r0, r0, r5
 8026e82:	fa03 f000 	lsl.w	r0, r3, r0
 8026e86:	9b04      	ldr	r3, [sp, #16]
 8026e88:	4303      	orrs	r3, r0
 8026e8a:	f108 0801 	add.w	r8, r8, #1
 8026e8e:	9304      	str	r3, [sp, #16]
 8026e90:	f898 1000 	ldrb.w	r1, [r8]
 8026e94:	482a      	ldr	r0, [pc, #168]	; (8026f40 <_vfiprintf_r+0x220>)
 8026e96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026e9a:	2206      	movs	r2, #6
 8026e9c:	f108 0701 	add.w	r7, r8, #1
 8026ea0:	f7d9 f99e 	bl	80001e0 <memchr>
 8026ea4:	2800      	cmp	r0, #0
 8026ea6:	d037      	beq.n	8026f18 <_vfiprintf_r+0x1f8>
 8026ea8:	4b26      	ldr	r3, [pc, #152]	; (8026f44 <_vfiprintf_r+0x224>)
 8026eaa:	bb1b      	cbnz	r3, 8026ef4 <_vfiprintf_r+0x1d4>
 8026eac:	9b03      	ldr	r3, [sp, #12]
 8026eae:	3307      	adds	r3, #7
 8026eb0:	f023 0307 	bic.w	r3, r3, #7
 8026eb4:	3308      	adds	r3, #8
 8026eb6:	9303      	str	r3, [sp, #12]
 8026eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026eba:	444b      	add	r3, r9
 8026ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8026ebe:	e750      	b.n	8026d62 <_vfiprintf_r+0x42>
 8026ec0:	fb05 3202 	mla	r2, r5, r2, r3
 8026ec4:	2001      	movs	r0, #1
 8026ec6:	4688      	mov	r8, r1
 8026ec8:	e78a      	b.n	8026de0 <_vfiprintf_r+0xc0>
 8026eca:	2300      	movs	r3, #0
 8026ecc:	f108 0801 	add.w	r8, r8, #1
 8026ed0:	9305      	str	r3, [sp, #20]
 8026ed2:	4619      	mov	r1, r3
 8026ed4:	250a      	movs	r5, #10
 8026ed6:	4640      	mov	r0, r8
 8026ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026edc:	3a30      	subs	r2, #48	; 0x30
 8026ede:	2a09      	cmp	r2, #9
 8026ee0:	d903      	bls.n	8026eea <_vfiprintf_r+0x1ca>
 8026ee2:	2b00      	cmp	r3, #0
 8026ee4:	d0c3      	beq.n	8026e6e <_vfiprintf_r+0x14e>
 8026ee6:	9105      	str	r1, [sp, #20]
 8026ee8:	e7c1      	b.n	8026e6e <_vfiprintf_r+0x14e>
 8026eea:	fb05 2101 	mla	r1, r5, r1, r2
 8026eee:	2301      	movs	r3, #1
 8026ef0:	4680      	mov	r8, r0
 8026ef2:	e7f0      	b.n	8026ed6 <_vfiprintf_r+0x1b6>
 8026ef4:	ab03      	add	r3, sp, #12
 8026ef6:	9300      	str	r3, [sp, #0]
 8026ef8:	4622      	mov	r2, r4
 8026efa:	4b13      	ldr	r3, [pc, #76]	; (8026f48 <_vfiprintf_r+0x228>)
 8026efc:	a904      	add	r1, sp, #16
 8026efe:	4630      	mov	r0, r6
 8026f00:	f3af 8000 	nop.w
 8026f04:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8026f08:	4681      	mov	r9, r0
 8026f0a:	d1d5      	bne.n	8026eb8 <_vfiprintf_r+0x198>
 8026f0c:	89a3      	ldrh	r3, [r4, #12]
 8026f0e:	065b      	lsls	r3, r3, #25
 8026f10:	f53f af7e 	bmi.w	8026e10 <_vfiprintf_r+0xf0>
 8026f14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026f16:	e77d      	b.n	8026e14 <_vfiprintf_r+0xf4>
 8026f18:	ab03      	add	r3, sp, #12
 8026f1a:	9300      	str	r3, [sp, #0]
 8026f1c:	4622      	mov	r2, r4
 8026f1e:	4b0a      	ldr	r3, [pc, #40]	; (8026f48 <_vfiprintf_r+0x228>)
 8026f20:	a904      	add	r1, sp, #16
 8026f22:	4630      	mov	r0, r6
 8026f24:	f000 f888 	bl	8027038 <_printf_i>
 8026f28:	e7ec      	b.n	8026f04 <_vfiprintf_r+0x1e4>
 8026f2a:	bf00      	nop
 8026f2c:	0802c404 	.word	0x0802c404
 8026f30:	0802c444 	.word	0x0802c444
 8026f34:	0802c424 	.word	0x0802c424
 8026f38:	0802c3e4 	.word	0x0802c3e4
 8026f3c:	0802c44a 	.word	0x0802c44a
 8026f40:	0802c44e 	.word	0x0802c44e
 8026f44:	00000000 	.word	0x00000000
 8026f48:	08026cfb 	.word	0x08026cfb

08026f4c <_printf_common>:
 8026f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026f50:	4691      	mov	r9, r2
 8026f52:	461f      	mov	r7, r3
 8026f54:	688a      	ldr	r2, [r1, #8]
 8026f56:	690b      	ldr	r3, [r1, #16]
 8026f58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8026f5c:	4293      	cmp	r3, r2
 8026f5e:	bfb8      	it	lt
 8026f60:	4613      	movlt	r3, r2
 8026f62:	f8c9 3000 	str.w	r3, [r9]
 8026f66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8026f6a:	4606      	mov	r6, r0
 8026f6c:	460c      	mov	r4, r1
 8026f6e:	b112      	cbz	r2, 8026f76 <_printf_common+0x2a>
 8026f70:	3301      	adds	r3, #1
 8026f72:	f8c9 3000 	str.w	r3, [r9]
 8026f76:	6823      	ldr	r3, [r4, #0]
 8026f78:	0699      	lsls	r1, r3, #26
 8026f7a:	bf42      	ittt	mi
 8026f7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8026f80:	3302      	addmi	r3, #2
 8026f82:	f8c9 3000 	strmi.w	r3, [r9]
 8026f86:	6825      	ldr	r5, [r4, #0]
 8026f88:	f015 0506 	ands.w	r5, r5, #6
 8026f8c:	d107      	bne.n	8026f9e <_printf_common+0x52>
 8026f8e:	f104 0a19 	add.w	sl, r4, #25
 8026f92:	68e3      	ldr	r3, [r4, #12]
 8026f94:	f8d9 2000 	ldr.w	r2, [r9]
 8026f98:	1a9b      	subs	r3, r3, r2
 8026f9a:	42ab      	cmp	r3, r5
 8026f9c:	dc28      	bgt.n	8026ff0 <_printf_common+0xa4>
 8026f9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8026fa2:	6822      	ldr	r2, [r4, #0]
 8026fa4:	3300      	adds	r3, #0
 8026fa6:	bf18      	it	ne
 8026fa8:	2301      	movne	r3, #1
 8026faa:	0692      	lsls	r2, r2, #26
 8026fac:	d42d      	bmi.n	802700a <_printf_common+0xbe>
 8026fae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026fb2:	4639      	mov	r1, r7
 8026fb4:	4630      	mov	r0, r6
 8026fb6:	47c0      	blx	r8
 8026fb8:	3001      	adds	r0, #1
 8026fba:	d020      	beq.n	8026ffe <_printf_common+0xb2>
 8026fbc:	6823      	ldr	r3, [r4, #0]
 8026fbe:	68e5      	ldr	r5, [r4, #12]
 8026fc0:	f8d9 2000 	ldr.w	r2, [r9]
 8026fc4:	f003 0306 	and.w	r3, r3, #6
 8026fc8:	2b04      	cmp	r3, #4
 8026fca:	bf08      	it	eq
 8026fcc:	1aad      	subeq	r5, r5, r2
 8026fce:	68a3      	ldr	r3, [r4, #8]
 8026fd0:	6922      	ldr	r2, [r4, #16]
 8026fd2:	bf0c      	ite	eq
 8026fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026fd8:	2500      	movne	r5, #0
 8026fda:	4293      	cmp	r3, r2
 8026fdc:	bfc4      	itt	gt
 8026fde:	1a9b      	subgt	r3, r3, r2
 8026fe0:	18ed      	addgt	r5, r5, r3
 8026fe2:	f04f 0900 	mov.w	r9, #0
 8026fe6:	341a      	adds	r4, #26
 8026fe8:	454d      	cmp	r5, r9
 8026fea:	d11a      	bne.n	8027022 <_printf_common+0xd6>
 8026fec:	2000      	movs	r0, #0
 8026fee:	e008      	b.n	8027002 <_printf_common+0xb6>
 8026ff0:	2301      	movs	r3, #1
 8026ff2:	4652      	mov	r2, sl
 8026ff4:	4639      	mov	r1, r7
 8026ff6:	4630      	mov	r0, r6
 8026ff8:	47c0      	blx	r8
 8026ffa:	3001      	adds	r0, #1
 8026ffc:	d103      	bne.n	8027006 <_printf_common+0xba>
 8026ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8027002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027006:	3501      	adds	r5, #1
 8027008:	e7c3      	b.n	8026f92 <_printf_common+0x46>
 802700a:	18e1      	adds	r1, r4, r3
 802700c:	1c5a      	adds	r2, r3, #1
 802700e:	2030      	movs	r0, #48	; 0x30
 8027010:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8027014:	4422      	add	r2, r4
 8027016:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802701a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802701e:	3302      	adds	r3, #2
 8027020:	e7c5      	b.n	8026fae <_printf_common+0x62>
 8027022:	2301      	movs	r3, #1
 8027024:	4622      	mov	r2, r4
 8027026:	4639      	mov	r1, r7
 8027028:	4630      	mov	r0, r6
 802702a:	47c0      	blx	r8
 802702c:	3001      	adds	r0, #1
 802702e:	d0e6      	beq.n	8026ffe <_printf_common+0xb2>
 8027030:	f109 0901 	add.w	r9, r9, #1
 8027034:	e7d8      	b.n	8026fe8 <_printf_common+0x9c>
	...

08027038 <_printf_i>:
 8027038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802703c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8027040:	460c      	mov	r4, r1
 8027042:	7e09      	ldrb	r1, [r1, #24]
 8027044:	b085      	sub	sp, #20
 8027046:	296e      	cmp	r1, #110	; 0x6e
 8027048:	4617      	mov	r7, r2
 802704a:	4606      	mov	r6, r0
 802704c:	4698      	mov	r8, r3
 802704e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8027050:	f000 80b3 	beq.w	80271ba <_printf_i+0x182>
 8027054:	d822      	bhi.n	802709c <_printf_i+0x64>
 8027056:	2963      	cmp	r1, #99	; 0x63
 8027058:	d036      	beq.n	80270c8 <_printf_i+0x90>
 802705a:	d80a      	bhi.n	8027072 <_printf_i+0x3a>
 802705c:	2900      	cmp	r1, #0
 802705e:	f000 80b9 	beq.w	80271d4 <_printf_i+0x19c>
 8027062:	2958      	cmp	r1, #88	; 0x58
 8027064:	f000 8083 	beq.w	802716e <_printf_i+0x136>
 8027068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802706c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8027070:	e032      	b.n	80270d8 <_printf_i+0xa0>
 8027072:	2964      	cmp	r1, #100	; 0x64
 8027074:	d001      	beq.n	802707a <_printf_i+0x42>
 8027076:	2969      	cmp	r1, #105	; 0x69
 8027078:	d1f6      	bne.n	8027068 <_printf_i+0x30>
 802707a:	6820      	ldr	r0, [r4, #0]
 802707c:	6813      	ldr	r3, [r2, #0]
 802707e:	0605      	lsls	r5, r0, #24
 8027080:	f103 0104 	add.w	r1, r3, #4
 8027084:	d52a      	bpl.n	80270dc <_printf_i+0xa4>
 8027086:	681b      	ldr	r3, [r3, #0]
 8027088:	6011      	str	r1, [r2, #0]
 802708a:	2b00      	cmp	r3, #0
 802708c:	da03      	bge.n	8027096 <_printf_i+0x5e>
 802708e:	222d      	movs	r2, #45	; 0x2d
 8027090:	425b      	negs	r3, r3
 8027092:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8027096:	486f      	ldr	r0, [pc, #444]	; (8027254 <_printf_i+0x21c>)
 8027098:	220a      	movs	r2, #10
 802709a:	e039      	b.n	8027110 <_printf_i+0xd8>
 802709c:	2973      	cmp	r1, #115	; 0x73
 802709e:	f000 809d 	beq.w	80271dc <_printf_i+0x1a4>
 80270a2:	d808      	bhi.n	80270b6 <_printf_i+0x7e>
 80270a4:	296f      	cmp	r1, #111	; 0x6f
 80270a6:	d020      	beq.n	80270ea <_printf_i+0xb2>
 80270a8:	2970      	cmp	r1, #112	; 0x70
 80270aa:	d1dd      	bne.n	8027068 <_printf_i+0x30>
 80270ac:	6823      	ldr	r3, [r4, #0]
 80270ae:	f043 0320 	orr.w	r3, r3, #32
 80270b2:	6023      	str	r3, [r4, #0]
 80270b4:	e003      	b.n	80270be <_printf_i+0x86>
 80270b6:	2975      	cmp	r1, #117	; 0x75
 80270b8:	d017      	beq.n	80270ea <_printf_i+0xb2>
 80270ba:	2978      	cmp	r1, #120	; 0x78
 80270bc:	d1d4      	bne.n	8027068 <_printf_i+0x30>
 80270be:	2378      	movs	r3, #120	; 0x78
 80270c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80270c4:	4864      	ldr	r0, [pc, #400]	; (8027258 <_printf_i+0x220>)
 80270c6:	e055      	b.n	8027174 <_printf_i+0x13c>
 80270c8:	6813      	ldr	r3, [r2, #0]
 80270ca:	1d19      	adds	r1, r3, #4
 80270cc:	681b      	ldr	r3, [r3, #0]
 80270ce:	6011      	str	r1, [r2, #0]
 80270d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80270d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80270d8:	2301      	movs	r3, #1
 80270da:	e08c      	b.n	80271f6 <_printf_i+0x1be>
 80270dc:	681b      	ldr	r3, [r3, #0]
 80270de:	6011      	str	r1, [r2, #0]
 80270e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80270e4:	bf18      	it	ne
 80270e6:	b21b      	sxthne	r3, r3
 80270e8:	e7cf      	b.n	802708a <_printf_i+0x52>
 80270ea:	6813      	ldr	r3, [r2, #0]
 80270ec:	6825      	ldr	r5, [r4, #0]
 80270ee:	1d18      	adds	r0, r3, #4
 80270f0:	6010      	str	r0, [r2, #0]
 80270f2:	0628      	lsls	r0, r5, #24
 80270f4:	d501      	bpl.n	80270fa <_printf_i+0xc2>
 80270f6:	681b      	ldr	r3, [r3, #0]
 80270f8:	e002      	b.n	8027100 <_printf_i+0xc8>
 80270fa:	0668      	lsls	r0, r5, #25
 80270fc:	d5fb      	bpl.n	80270f6 <_printf_i+0xbe>
 80270fe:	881b      	ldrh	r3, [r3, #0]
 8027100:	4854      	ldr	r0, [pc, #336]	; (8027254 <_printf_i+0x21c>)
 8027102:	296f      	cmp	r1, #111	; 0x6f
 8027104:	bf14      	ite	ne
 8027106:	220a      	movne	r2, #10
 8027108:	2208      	moveq	r2, #8
 802710a:	2100      	movs	r1, #0
 802710c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8027110:	6865      	ldr	r5, [r4, #4]
 8027112:	60a5      	str	r5, [r4, #8]
 8027114:	2d00      	cmp	r5, #0
 8027116:	f2c0 8095 	blt.w	8027244 <_printf_i+0x20c>
 802711a:	6821      	ldr	r1, [r4, #0]
 802711c:	f021 0104 	bic.w	r1, r1, #4
 8027120:	6021      	str	r1, [r4, #0]
 8027122:	2b00      	cmp	r3, #0
 8027124:	d13d      	bne.n	80271a2 <_printf_i+0x16a>
 8027126:	2d00      	cmp	r5, #0
 8027128:	f040 808e 	bne.w	8027248 <_printf_i+0x210>
 802712c:	4665      	mov	r5, ip
 802712e:	2a08      	cmp	r2, #8
 8027130:	d10b      	bne.n	802714a <_printf_i+0x112>
 8027132:	6823      	ldr	r3, [r4, #0]
 8027134:	07db      	lsls	r3, r3, #31
 8027136:	d508      	bpl.n	802714a <_printf_i+0x112>
 8027138:	6923      	ldr	r3, [r4, #16]
 802713a:	6862      	ldr	r2, [r4, #4]
 802713c:	429a      	cmp	r2, r3
 802713e:	bfde      	ittt	le
 8027140:	2330      	movle	r3, #48	; 0x30
 8027142:	f805 3c01 	strble.w	r3, [r5, #-1]
 8027146:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 802714a:	ebac 0305 	sub.w	r3, ip, r5
 802714e:	6123      	str	r3, [r4, #16]
 8027150:	f8cd 8000 	str.w	r8, [sp]
 8027154:	463b      	mov	r3, r7
 8027156:	aa03      	add	r2, sp, #12
 8027158:	4621      	mov	r1, r4
 802715a:	4630      	mov	r0, r6
 802715c:	f7ff fef6 	bl	8026f4c <_printf_common>
 8027160:	3001      	adds	r0, #1
 8027162:	d14d      	bne.n	8027200 <_printf_i+0x1c8>
 8027164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8027168:	b005      	add	sp, #20
 802716a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802716e:	4839      	ldr	r0, [pc, #228]	; (8027254 <_printf_i+0x21c>)
 8027170:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8027174:	6813      	ldr	r3, [r2, #0]
 8027176:	6821      	ldr	r1, [r4, #0]
 8027178:	1d1d      	adds	r5, r3, #4
 802717a:	681b      	ldr	r3, [r3, #0]
 802717c:	6015      	str	r5, [r2, #0]
 802717e:	060a      	lsls	r2, r1, #24
 8027180:	d50b      	bpl.n	802719a <_printf_i+0x162>
 8027182:	07ca      	lsls	r2, r1, #31
 8027184:	bf44      	itt	mi
 8027186:	f041 0120 	orrmi.w	r1, r1, #32
 802718a:	6021      	strmi	r1, [r4, #0]
 802718c:	b91b      	cbnz	r3, 8027196 <_printf_i+0x15e>
 802718e:	6822      	ldr	r2, [r4, #0]
 8027190:	f022 0220 	bic.w	r2, r2, #32
 8027194:	6022      	str	r2, [r4, #0]
 8027196:	2210      	movs	r2, #16
 8027198:	e7b7      	b.n	802710a <_printf_i+0xd2>
 802719a:	064d      	lsls	r5, r1, #25
 802719c:	bf48      	it	mi
 802719e:	b29b      	uxthmi	r3, r3
 80271a0:	e7ef      	b.n	8027182 <_printf_i+0x14a>
 80271a2:	4665      	mov	r5, ip
 80271a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80271a8:	fb02 3311 	mls	r3, r2, r1, r3
 80271ac:	5cc3      	ldrb	r3, [r0, r3]
 80271ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80271b2:	460b      	mov	r3, r1
 80271b4:	2900      	cmp	r1, #0
 80271b6:	d1f5      	bne.n	80271a4 <_printf_i+0x16c>
 80271b8:	e7b9      	b.n	802712e <_printf_i+0xf6>
 80271ba:	6813      	ldr	r3, [r2, #0]
 80271bc:	6825      	ldr	r5, [r4, #0]
 80271be:	6961      	ldr	r1, [r4, #20]
 80271c0:	1d18      	adds	r0, r3, #4
 80271c2:	6010      	str	r0, [r2, #0]
 80271c4:	0628      	lsls	r0, r5, #24
 80271c6:	681b      	ldr	r3, [r3, #0]
 80271c8:	d501      	bpl.n	80271ce <_printf_i+0x196>
 80271ca:	6019      	str	r1, [r3, #0]
 80271cc:	e002      	b.n	80271d4 <_printf_i+0x19c>
 80271ce:	066a      	lsls	r2, r5, #25
 80271d0:	d5fb      	bpl.n	80271ca <_printf_i+0x192>
 80271d2:	8019      	strh	r1, [r3, #0]
 80271d4:	2300      	movs	r3, #0
 80271d6:	6123      	str	r3, [r4, #16]
 80271d8:	4665      	mov	r5, ip
 80271da:	e7b9      	b.n	8027150 <_printf_i+0x118>
 80271dc:	6813      	ldr	r3, [r2, #0]
 80271de:	1d19      	adds	r1, r3, #4
 80271e0:	6011      	str	r1, [r2, #0]
 80271e2:	681d      	ldr	r5, [r3, #0]
 80271e4:	6862      	ldr	r2, [r4, #4]
 80271e6:	2100      	movs	r1, #0
 80271e8:	4628      	mov	r0, r5
 80271ea:	f7d8 fff9 	bl	80001e0 <memchr>
 80271ee:	b108      	cbz	r0, 80271f4 <_printf_i+0x1bc>
 80271f0:	1b40      	subs	r0, r0, r5
 80271f2:	6060      	str	r0, [r4, #4]
 80271f4:	6863      	ldr	r3, [r4, #4]
 80271f6:	6123      	str	r3, [r4, #16]
 80271f8:	2300      	movs	r3, #0
 80271fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80271fe:	e7a7      	b.n	8027150 <_printf_i+0x118>
 8027200:	6923      	ldr	r3, [r4, #16]
 8027202:	462a      	mov	r2, r5
 8027204:	4639      	mov	r1, r7
 8027206:	4630      	mov	r0, r6
 8027208:	47c0      	blx	r8
 802720a:	3001      	adds	r0, #1
 802720c:	d0aa      	beq.n	8027164 <_printf_i+0x12c>
 802720e:	6823      	ldr	r3, [r4, #0]
 8027210:	079b      	lsls	r3, r3, #30
 8027212:	d413      	bmi.n	802723c <_printf_i+0x204>
 8027214:	68e0      	ldr	r0, [r4, #12]
 8027216:	9b03      	ldr	r3, [sp, #12]
 8027218:	4298      	cmp	r0, r3
 802721a:	bfb8      	it	lt
 802721c:	4618      	movlt	r0, r3
 802721e:	e7a3      	b.n	8027168 <_printf_i+0x130>
 8027220:	2301      	movs	r3, #1
 8027222:	464a      	mov	r2, r9
 8027224:	4639      	mov	r1, r7
 8027226:	4630      	mov	r0, r6
 8027228:	47c0      	blx	r8
 802722a:	3001      	adds	r0, #1
 802722c:	d09a      	beq.n	8027164 <_printf_i+0x12c>
 802722e:	3501      	adds	r5, #1
 8027230:	68e3      	ldr	r3, [r4, #12]
 8027232:	9a03      	ldr	r2, [sp, #12]
 8027234:	1a9b      	subs	r3, r3, r2
 8027236:	42ab      	cmp	r3, r5
 8027238:	dcf2      	bgt.n	8027220 <_printf_i+0x1e8>
 802723a:	e7eb      	b.n	8027214 <_printf_i+0x1dc>
 802723c:	2500      	movs	r5, #0
 802723e:	f104 0919 	add.w	r9, r4, #25
 8027242:	e7f5      	b.n	8027230 <_printf_i+0x1f8>
 8027244:	2b00      	cmp	r3, #0
 8027246:	d1ac      	bne.n	80271a2 <_printf_i+0x16a>
 8027248:	7803      	ldrb	r3, [r0, #0]
 802724a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802724e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027252:	e76c      	b.n	802712e <_printf_i+0xf6>
 8027254:	0802c455 	.word	0x0802c455
 8027258:	0802c466 	.word	0x0802c466

0802725c <__sread>:
 802725c:	b510      	push	{r4, lr}
 802725e:	460c      	mov	r4, r1
 8027260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027264:	f000 fa4e 	bl	8027704 <_read_r>
 8027268:	2800      	cmp	r0, #0
 802726a:	bfab      	itete	ge
 802726c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802726e:	89a3      	ldrhlt	r3, [r4, #12]
 8027270:	181b      	addge	r3, r3, r0
 8027272:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8027276:	bfac      	ite	ge
 8027278:	6563      	strge	r3, [r4, #84]	; 0x54
 802727a:	81a3      	strhlt	r3, [r4, #12]
 802727c:	bd10      	pop	{r4, pc}

0802727e <__swrite>:
 802727e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027282:	461f      	mov	r7, r3
 8027284:	898b      	ldrh	r3, [r1, #12]
 8027286:	05db      	lsls	r3, r3, #23
 8027288:	4605      	mov	r5, r0
 802728a:	460c      	mov	r4, r1
 802728c:	4616      	mov	r6, r2
 802728e:	d505      	bpl.n	802729c <__swrite+0x1e>
 8027290:	2302      	movs	r3, #2
 8027292:	2200      	movs	r2, #0
 8027294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027298:	f000 f9b6 	bl	8027608 <_lseek_r>
 802729c:	89a3      	ldrh	r3, [r4, #12]
 802729e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80272a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80272a6:	81a3      	strh	r3, [r4, #12]
 80272a8:	4632      	mov	r2, r6
 80272aa:	463b      	mov	r3, r7
 80272ac:	4628      	mov	r0, r5
 80272ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80272b2:	f000 b869 	b.w	8027388 <_write_r>

080272b6 <__sseek>:
 80272b6:	b510      	push	{r4, lr}
 80272b8:	460c      	mov	r4, r1
 80272ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80272be:	f000 f9a3 	bl	8027608 <_lseek_r>
 80272c2:	1c43      	adds	r3, r0, #1
 80272c4:	89a3      	ldrh	r3, [r4, #12]
 80272c6:	bf15      	itete	ne
 80272c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80272ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80272ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80272d2:	81a3      	strheq	r3, [r4, #12]
 80272d4:	bf18      	it	ne
 80272d6:	81a3      	strhne	r3, [r4, #12]
 80272d8:	bd10      	pop	{r4, pc}

080272da <__sclose>:
 80272da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80272de:	f000 b8d3 	b.w	8027488 <_close_r>
	...

080272e4 <__swbuf_r>:
 80272e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80272e6:	460e      	mov	r6, r1
 80272e8:	4614      	mov	r4, r2
 80272ea:	4605      	mov	r5, r0
 80272ec:	b118      	cbz	r0, 80272f6 <__swbuf_r+0x12>
 80272ee:	6983      	ldr	r3, [r0, #24]
 80272f0:	b90b      	cbnz	r3, 80272f6 <__swbuf_r+0x12>
 80272f2:	f7ff fc39 	bl	8026b68 <__sinit>
 80272f6:	4b21      	ldr	r3, [pc, #132]	; (802737c <__swbuf_r+0x98>)
 80272f8:	429c      	cmp	r4, r3
 80272fa:	d12a      	bne.n	8027352 <__swbuf_r+0x6e>
 80272fc:	686c      	ldr	r4, [r5, #4]
 80272fe:	69a3      	ldr	r3, [r4, #24]
 8027300:	60a3      	str	r3, [r4, #8]
 8027302:	89a3      	ldrh	r3, [r4, #12]
 8027304:	071a      	lsls	r2, r3, #28
 8027306:	d52e      	bpl.n	8027366 <__swbuf_r+0x82>
 8027308:	6923      	ldr	r3, [r4, #16]
 802730a:	b363      	cbz	r3, 8027366 <__swbuf_r+0x82>
 802730c:	6923      	ldr	r3, [r4, #16]
 802730e:	6820      	ldr	r0, [r4, #0]
 8027310:	1ac0      	subs	r0, r0, r3
 8027312:	6963      	ldr	r3, [r4, #20]
 8027314:	b2f6      	uxtb	r6, r6
 8027316:	4283      	cmp	r3, r0
 8027318:	4637      	mov	r7, r6
 802731a:	dc04      	bgt.n	8027326 <__swbuf_r+0x42>
 802731c:	4621      	mov	r1, r4
 802731e:	4628      	mov	r0, r5
 8027320:	f000 f948 	bl	80275b4 <_fflush_r>
 8027324:	bb28      	cbnz	r0, 8027372 <__swbuf_r+0x8e>
 8027326:	68a3      	ldr	r3, [r4, #8]
 8027328:	3b01      	subs	r3, #1
 802732a:	60a3      	str	r3, [r4, #8]
 802732c:	6823      	ldr	r3, [r4, #0]
 802732e:	1c5a      	adds	r2, r3, #1
 8027330:	6022      	str	r2, [r4, #0]
 8027332:	701e      	strb	r6, [r3, #0]
 8027334:	6963      	ldr	r3, [r4, #20]
 8027336:	3001      	adds	r0, #1
 8027338:	4283      	cmp	r3, r0
 802733a:	d004      	beq.n	8027346 <__swbuf_r+0x62>
 802733c:	89a3      	ldrh	r3, [r4, #12]
 802733e:	07db      	lsls	r3, r3, #31
 8027340:	d519      	bpl.n	8027376 <__swbuf_r+0x92>
 8027342:	2e0a      	cmp	r6, #10
 8027344:	d117      	bne.n	8027376 <__swbuf_r+0x92>
 8027346:	4621      	mov	r1, r4
 8027348:	4628      	mov	r0, r5
 802734a:	f000 f933 	bl	80275b4 <_fflush_r>
 802734e:	b190      	cbz	r0, 8027376 <__swbuf_r+0x92>
 8027350:	e00f      	b.n	8027372 <__swbuf_r+0x8e>
 8027352:	4b0b      	ldr	r3, [pc, #44]	; (8027380 <__swbuf_r+0x9c>)
 8027354:	429c      	cmp	r4, r3
 8027356:	d101      	bne.n	802735c <__swbuf_r+0x78>
 8027358:	68ac      	ldr	r4, [r5, #8]
 802735a:	e7d0      	b.n	80272fe <__swbuf_r+0x1a>
 802735c:	4b09      	ldr	r3, [pc, #36]	; (8027384 <__swbuf_r+0xa0>)
 802735e:	429c      	cmp	r4, r3
 8027360:	bf08      	it	eq
 8027362:	68ec      	ldreq	r4, [r5, #12]
 8027364:	e7cb      	b.n	80272fe <__swbuf_r+0x1a>
 8027366:	4621      	mov	r1, r4
 8027368:	4628      	mov	r0, r5
 802736a:	f000 f81f 	bl	80273ac <__swsetup_r>
 802736e:	2800      	cmp	r0, #0
 8027370:	d0cc      	beq.n	802730c <__swbuf_r+0x28>
 8027372:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8027376:	4638      	mov	r0, r7
 8027378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802737a:	bf00      	nop
 802737c:	0802c404 	.word	0x0802c404
 8027380:	0802c424 	.word	0x0802c424
 8027384:	0802c3e4 	.word	0x0802c3e4

08027388 <_write_r>:
 8027388:	b538      	push	{r3, r4, r5, lr}
 802738a:	4c07      	ldr	r4, [pc, #28]	; (80273a8 <_write_r+0x20>)
 802738c:	4605      	mov	r5, r0
 802738e:	4608      	mov	r0, r1
 8027390:	4611      	mov	r1, r2
 8027392:	2200      	movs	r2, #0
 8027394:	6022      	str	r2, [r4, #0]
 8027396:	461a      	mov	r2, r3
 8027398:	f7e1 f8b9 	bl	800850e <_write>
 802739c:	1c43      	adds	r3, r0, #1
 802739e:	d102      	bne.n	80273a6 <_write_r+0x1e>
 80273a0:	6823      	ldr	r3, [r4, #0]
 80273a2:	b103      	cbz	r3, 80273a6 <_write_r+0x1e>
 80273a4:	602b      	str	r3, [r5, #0]
 80273a6:	bd38      	pop	{r3, r4, r5, pc}
 80273a8:	2001a038 	.word	0x2001a038

080273ac <__swsetup_r>:
 80273ac:	4b32      	ldr	r3, [pc, #200]	; (8027478 <__swsetup_r+0xcc>)
 80273ae:	b570      	push	{r4, r5, r6, lr}
 80273b0:	681d      	ldr	r5, [r3, #0]
 80273b2:	4606      	mov	r6, r0
 80273b4:	460c      	mov	r4, r1
 80273b6:	b125      	cbz	r5, 80273c2 <__swsetup_r+0x16>
 80273b8:	69ab      	ldr	r3, [r5, #24]
 80273ba:	b913      	cbnz	r3, 80273c2 <__swsetup_r+0x16>
 80273bc:	4628      	mov	r0, r5
 80273be:	f7ff fbd3 	bl	8026b68 <__sinit>
 80273c2:	4b2e      	ldr	r3, [pc, #184]	; (802747c <__swsetup_r+0xd0>)
 80273c4:	429c      	cmp	r4, r3
 80273c6:	d10f      	bne.n	80273e8 <__swsetup_r+0x3c>
 80273c8:	686c      	ldr	r4, [r5, #4]
 80273ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80273ce:	b29a      	uxth	r2, r3
 80273d0:	0715      	lsls	r5, r2, #28
 80273d2:	d42c      	bmi.n	802742e <__swsetup_r+0x82>
 80273d4:	06d0      	lsls	r0, r2, #27
 80273d6:	d411      	bmi.n	80273fc <__swsetup_r+0x50>
 80273d8:	2209      	movs	r2, #9
 80273da:	6032      	str	r2, [r6, #0]
 80273dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80273e0:	81a3      	strh	r3, [r4, #12]
 80273e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80273e6:	e03e      	b.n	8027466 <__swsetup_r+0xba>
 80273e8:	4b25      	ldr	r3, [pc, #148]	; (8027480 <__swsetup_r+0xd4>)
 80273ea:	429c      	cmp	r4, r3
 80273ec:	d101      	bne.n	80273f2 <__swsetup_r+0x46>
 80273ee:	68ac      	ldr	r4, [r5, #8]
 80273f0:	e7eb      	b.n	80273ca <__swsetup_r+0x1e>
 80273f2:	4b24      	ldr	r3, [pc, #144]	; (8027484 <__swsetup_r+0xd8>)
 80273f4:	429c      	cmp	r4, r3
 80273f6:	bf08      	it	eq
 80273f8:	68ec      	ldreq	r4, [r5, #12]
 80273fa:	e7e6      	b.n	80273ca <__swsetup_r+0x1e>
 80273fc:	0751      	lsls	r1, r2, #29
 80273fe:	d512      	bpl.n	8027426 <__swsetup_r+0x7a>
 8027400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027402:	b141      	cbz	r1, 8027416 <__swsetup_r+0x6a>
 8027404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027408:	4299      	cmp	r1, r3
 802740a:	d002      	beq.n	8027412 <__swsetup_r+0x66>
 802740c:	4630      	mov	r0, r6
 802740e:	f7ff fa1b 	bl	8026848 <_free_r>
 8027412:	2300      	movs	r3, #0
 8027414:	6363      	str	r3, [r4, #52]	; 0x34
 8027416:	89a3      	ldrh	r3, [r4, #12]
 8027418:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802741c:	81a3      	strh	r3, [r4, #12]
 802741e:	2300      	movs	r3, #0
 8027420:	6063      	str	r3, [r4, #4]
 8027422:	6923      	ldr	r3, [r4, #16]
 8027424:	6023      	str	r3, [r4, #0]
 8027426:	89a3      	ldrh	r3, [r4, #12]
 8027428:	f043 0308 	orr.w	r3, r3, #8
 802742c:	81a3      	strh	r3, [r4, #12]
 802742e:	6923      	ldr	r3, [r4, #16]
 8027430:	b94b      	cbnz	r3, 8027446 <__swsetup_r+0x9a>
 8027432:	89a3      	ldrh	r3, [r4, #12]
 8027434:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8027438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802743c:	d003      	beq.n	8027446 <__swsetup_r+0x9a>
 802743e:	4621      	mov	r1, r4
 8027440:	4630      	mov	r0, r6
 8027442:	f000 f917 	bl	8027674 <__smakebuf_r>
 8027446:	89a2      	ldrh	r2, [r4, #12]
 8027448:	f012 0301 	ands.w	r3, r2, #1
 802744c:	d00c      	beq.n	8027468 <__swsetup_r+0xbc>
 802744e:	2300      	movs	r3, #0
 8027450:	60a3      	str	r3, [r4, #8]
 8027452:	6963      	ldr	r3, [r4, #20]
 8027454:	425b      	negs	r3, r3
 8027456:	61a3      	str	r3, [r4, #24]
 8027458:	6923      	ldr	r3, [r4, #16]
 802745a:	b953      	cbnz	r3, 8027472 <__swsetup_r+0xc6>
 802745c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027460:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8027464:	d1ba      	bne.n	80273dc <__swsetup_r+0x30>
 8027466:	bd70      	pop	{r4, r5, r6, pc}
 8027468:	0792      	lsls	r2, r2, #30
 802746a:	bf58      	it	pl
 802746c:	6963      	ldrpl	r3, [r4, #20]
 802746e:	60a3      	str	r3, [r4, #8]
 8027470:	e7f2      	b.n	8027458 <__swsetup_r+0xac>
 8027472:	2000      	movs	r0, #0
 8027474:	e7f7      	b.n	8027466 <__swsetup_r+0xba>
 8027476:	bf00      	nop
 8027478:	20000024 	.word	0x20000024
 802747c:	0802c404 	.word	0x0802c404
 8027480:	0802c424 	.word	0x0802c424
 8027484:	0802c3e4 	.word	0x0802c3e4

08027488 <_close_r>:
 8027488:	b538      	push	{r3, r4, r5, lr}
 802748a:	4c06      	ldr	r4, [pc, #24]	; (80274a4 <_close_r+0x1c>)
 802748c:	2300      	movs	r3, #0
 802748e:	4605      	mov	r5, r0
 8027490:	4608      	mov	r0, r1
 8027492:	6023      	str	r3, [r4, #0]
 8027494:	f7e1 f857 	bl	8008546 <_close>
 8027498:	1c43      	adds	r3, r0, #1
 802749a:	d102      	bne.n	80274a2 <_close_r+0x1a>
 802749c:	6823      	ldr	r3, [r4, #0]
 802749e:	b103      	cbz	r3, 80274a2 <_close_r+0x1a>
 80274a0:	602b      	str	r3, [r5, #0]
 80274a2:	bd38      	pop	{r3, r4, r5, pc}
 80274a4:	2001a038 	.word	0x2001a038

080274a8 <__sflush_r>:
 80274a8:	898a      	ldrh	r2, [r1, #12]
 80274aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80274ae:	4605      	mov	r5, r0
 80274b0:	0710      	lsls	r0, r2, #28
 80274b2:	460c      	mov	r4, r1
 80274b4:	d458      	bmi.n	8027568 <__sflush_r+0xc0>
 80274b6:	684b      	ldr	r3, [r1, #4]
 80274b8:	2b00      	cmp	r3, #0
 80274ba:	dc05      	bgt.n	80274c8 <__sflush_r+0x20>
 80274bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80274be:	2b00      	cmp	r3, #0
 80274c0:	dc02      	bgt.n	80274c8 <__sflush_r+0x20>
 80274c2:	2000      	movs	r0, #0
 80274c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80274c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80274ca:	2e00      	cmp	r6, #0
 80274cc:	d0f9      	beq.n	80274c2 <__sflush_r+0x1a>
 80274ce:	2300      	movs	r3, #0
 80274d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80274d4:	682f      	ldr	r7, [r5, #0]
 80274d6:	6a21      	ldr	r1, [r4, #32]
 80274d8:	602b      	str	r3, [r5, #0]
 80274da:	d032      	beq.n	8027542 <__sflush_r+0x9a>
 80274dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80274de:	89a3      	ldrh	r3, [r4, #12]
 80274e0:	075a      	lsls	r2, r3, #29
 80274e2:	d505      	bpl.n	80274f0 <__sflush_r+0x48>
 80274e4:	6863      	ldr	r3, [r4, #4]
 80274e6:	1ac0      	subs	r0, r0, r3
 80274e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80274ea:	b10b      	cbz	r3, 80274f0 <__sflush_r+0x48>
 80274ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80274ee:	1ac0      	subs	r0, r0, r3
 80274f0:	2300      	movs	r3, #0
 80274f2:	4602      	mov	r2, r0
 80274f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80274f6:	6a21      	ldr	r1, [r4, #32]
 80274f8:	4628      	mov	r0, r5
 80274fa:	47b0      	blx	r6
 80274fc:	1c43      	adds	r3, r0, #1
 80274fe:	89a3      	ldrh	r3, [r4, #12]
 8027500:	d106      	bne.n	8027510 <__sflush_r+0x68>
 8027502:	6829      	ldr	r1, [r5, #0]
 8027504:	291d      	cmp	r1, #29
 8027506:	d848      	bhi.n	802759a <__sflush_r+0xf2>
 8027508:	4a29      	ldr	r2, [pc, #164]	; (80275b0 <__sflush_r+0x108>)
 802750a:	40ca      	lsrs	r2, r1
 802750c:	07d6      	lsls	r6, r2, #31
 802750e:	d544      	bpl.n	802759a <__sflush_r+0xf2>
 8027510:	2200      	movs	r2, #0
 8027512:	6062      	str	r2, [r4, #4]
 8027514:	04d9      	lsls	r1, r3, #19
 8027516:	6922      	ldr	r2, [r4, #16]
 8027518:	6022      	str	r2, [r4, #0]
 802751a:	d504      	bpl.n	8027526 <__sflush_r+0x7e>
 802751c:	1c42      	adds	r2, r0, #1
 802751e:	d101      	bne.n	8027524 <__sflush_r+0x7c>
 8027520:	682b      	ldr	r3, [r5, #0]
 8027522:	b903      	cbnz	r3, 8027526 <__sflush_r+0x7e>
 8027524:	6560      	str	r0, [r4, #84]	; 0x54
 8027526:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027528:	602f      	str	r7, [r5, #0]
 802752a:	2900      	cmp	r1, #0
 802752c:	d0c9      	beq.n	80274c2 <__sflush_r+0x1a>
 802752e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027532:	4299      	cmp	r1, r3
 8027534:	d002      	beq.n	802753c <__sflush_r+0x94>
 8027536:	4628      	mov	r0, r5
 8027538:	f7ff f986 	bl	8026848 <_free_r>
 802753c:	2000      	movs	r0, #0
 802753e:	6360      	str	r0, [r4, #52]	; 0x34
 8027540:	e7c0      	b.n	80274c4 <__sflush_r+0x1c>
 8027542:	2301      	movs	r3, #1
 8027544:	4628      	mov	r0, r5
 8027546:	47b0      	blx	r6
 8027548:	1c41      	adds	r1, r0, #1
 802754a:	d1c8      	bne.n	80274de <__sflush_r+0x36>
 802754c:	682b      	ldr	r3, [r5, #0]
 802754e:	2b00      	cmp	r3, #0
 8027550:	d0c5      	beq.n	80274de <__sflush_r+0x36>
 8027552:	2b1d      	cmp	r3, #29
 8027554:	d001      	beq.n	802755a <__sflush_r+0xb2>
 8027556:	2b16      	cmp	r3, #22
 8027558:	d101      	bne.n	802755e <__sflush_r+0xb6>
 802755a:	602f      	str	r7, [r5, #0]
 802755c:	e7b1      	b.n	80274c2 <__sflush_r+0x1a>
 802755e:	89a3      	ldrh	r3, [r4, #12]
 8027560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027564:	81a3      	strh	r3, [r4, #12]
 8027566:	e7ad      	b.n	80274c4 <__sflush_r+0x1c>
 8027568:	690f      	ldr	r7, [r1, #16]
 802756a:	2f00      	cmp	r7, #0
 802756c:	d0a9      	beq.n	80274c2 <__sflush_r+0x1a>
 802756e:	0793      	lsls	r3, r2, #30
 8027570:	680e      	ldr	r6, [r1, #0]
 8027572:	bf08      	it	eq
 8027574:	694b      	ldreq	r3, [r1, #20]
 8027576:	600f      	str	r7, [r1, #0]
 8027578:	bf18      	it	ne
 802757a:	2300      	movne	r3, #0
 802757c:	eba6 0807 	sub.w	r8, r6, r7
 8027580:	608b      	str	r3, [r1, #8]
 8027582:	f1b8 0f00 	cmp.w	r8, #0
 8027586:	dd9c      	ble.n	80274c2 <__sflush_r+0x1a>
 8027588:	4643      	mov	r3, r8
 802758a:	463a      	mov	r2, r7
 802758c:	6a21      	ldr	r1, [r4, #32]
 802758e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8027590:	4628      	mov	r0, r5
 8027592:	47b0      	blx	r6
 8027594:	2800      	cmp	r0, #0
 8027596:	dc06      	bgt.n	80275a6 <__sflush_r+0xfe>
 8027598:	89a3      	ldrh	r3, [r4, #12]
 802759a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802759e:	81a3      	strh	r3, [r4, #12]
 80275a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80275a4:	e78e      	b.n	80274c4 <__sflush_r+0x1c>
 80275a6:	4407      	add	r7, r0
 80275a8:	eba8 0800 	sub.w	r8, r8, r0
 80275ac:	e7e9      	b.n	8027582 <__sflush_r+0xda>
 80275ae:	bf00      	nop
 80275b0:	20400001 	.word	0x20400001

080275b4 <_fflush_r>:
 80275b4:	b538      	push	{r3, r4, r5, lr}
 80275b6:	690b      	ldr	r3, [r1, #16]
 80275b8:	4605      	mov	r5, r0
 80275ba:	460c      	mov	r4, r1
 80275bc:	b1db      	cbz	r3, 80275f6 <_fflush_r+0x42>
 80275be:	b118      	cbz	r0, 80275c8 <_fflush_r+0x14>
 80275c0:	6983      	ldr	r3, [r0, #24]
 80275c2:	b90b      	cbnz	r3, 80275c8 <_fflush_r+0x14>
 80275c4:	f7ff fad0 	bl	8026b68 <__sinit>
 80275c8:	4b0c      	ldr	r3, [pc, #48]	; (80275fc <_fflush_r+0x48>)
 80275ca:	429c      	cmp	r4, r3
 80275cc:	d109      	bne.n	80275e2 <_fflush_r+0x2e>
 80275ce:	686c      	ldr	r4, [r5, #4]
 80275d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80275d4:	b17b      	cbz	r3, 80275f6 <_fflush_r+0x42>
 80275d6:	4621      	mov	r1, r4
 80275d8:	4628      	mov	r0, r5
 80275da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80275de:	f7ff bf63 	b.w	80274a8 <__sflush_r>
 80275e2:	4b07      	ldr	r3, [pc, #28]	; (8027600 <_fflush_r+0x4c>)
 80275e4:	429c      	cmp	r4, r3
 80275e6:	d101      	bne.n	80275ec <_fflush_r+0x38>
 80275e8:	68ac      	ldr	r4, [r5, #8]
 80275ea:	e7f1      	b.n	80275d0 <_fflush_r+0x1c>
 80275ec:	4b05      	ldr	r3, [pc, #20]	; (8027604 <_fflush_r+0x50>)
 80275ee:	429c      	cmp	r4, r3
 80275f0:	bf08      	it	eq
 80275f2:	68ec      	ldreq	r4, [r5, #12]
 80275f4:	e7ec      	b.n	80275d0 <_fflush_r+0x1c>
 80275f6:	2000      	movs	r0, #0
 80275f8:	bd38      	pop	{r3, r4, r5, pc}
 80275fa:	bf00      	nop
 80275fc:	0802c404 	.word	0x0802c404
 8027600:	0802c424 	.word	0x0802c424
 8027604:	0802c3e4 	.word	0x0802c3e4

08027608 <_lseek_r>:
 8027608:	b538      	push	{r3, r4, r5, lr}
 802760a:	4c07      	ldr	r4, [pc, #28]	; (8027628 <_lseek_r+0x20>)
 802760c:	4605      	mov	r5, r0
 802760e:	4608      	mov	r0, r1
 8027610:	4611      	mov	r1, r2
 8027612:	2200      	movs	r2, #0
 8027614:	6022      	str	r2, [r4, #0]
 8027616:	461a      	mov	r2, r3
 8027618:	f7e0 ffbc 	bl	8008594 <_lseek>
 802761c:	1c43      	adds	r3, r0, #1
 802761e:	d102      	bne.n	8027626 <_lseek_r+0x1e>
 8027620:	6823      	ldr	r3, [r4, #0]
 8027622:	b103      	cbz	r3, 8027626 <_lseek_r+0x1e>
 8027624:	602b      	str	r3, [r5, #0]
 8027626:	bd38      	pop	{r3, r4, r5, pc}
 8027628:	2001a038 	.word	0x2001a038

0802762c <__swhatbuf_r>:
 802762c:	b570      	push	{r4, r5, r6, lr}
 802762e:	460e      	mov	r6, r1
 8027630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027634:	2900      	cmp	r1, #0
 8027636:	b096      	sub	sp, #88	; 0x58
 8027638:	4614      	mov	r4, r2
 802763a:	461d      	mov	r5, r3
 802763c:	da07      	bge.n	802764e <__swhatbuf_r+0x22>
 802763e:	2300      	movs	r3, #0
 8027640:	602b      	str	r3, [r5, #0]
 8027642:	89b3      	ldrh	r3, [r6, #12]
 8027644:	061a      	lsls	r2, r3, #24
 8027646:	d410      	bmi.n	802766a <__swhatbuf_r+0x3e>
 8027648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802764c:	e00e      	b.n	802766c <__swhatbuf_r+0x40>
 802764e:	466a      	mov	r2, sp
 8027650:	f000 f86a 	bl	8027728 <_fstat_r>
 8027654:	2800      	cmp	r0, #0
 8027656:	dbf2      	blt.n	802763e <__swhatbuf_r+0x12>
 8027658:	9a01      	ldr	r2, [sp, #4]
 802765a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802765e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8027662:	425a      	negs	r2, r3
 8027664:	415a      	adcs	r2, r3
 8027666:	602a      	str	r2, [r5, #0]
 8027668:	e7ee      	b.n	8027648 <__swhatbuf_r+0x1c>
 802766a:	2340      	movs	r3, #64	; 0x40
 802766c:	2000      	movs	r0, #0
 802766e:	6023      	str	r3, [r4, #0]
 8027670:	b016      	add	sp, #88	; 0x58
 8027672:	bd70      	pop	{r4, r5, r6, pc}

08027674 <__smakebuf_r>:
 8027674:	898b      	ldrh	r3, [r1, #12]
 8027676:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027678:	079d      	lsls	r5, r3, #30
 802767a:	4606      	mov	r6, r0
 802767c:	460c      	mov	r4, r1
 802767e:	d507      	bpl.n	8027690 <__smakebuf_r+0x1c>
 8027680:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8027684:	6023      	str	r3, [r4, #0]
 8027686:	6123      	str	r3, [r4, #16]
 8027688:	2301      	movs	r3, #1
 802768a:	6163      	str	r3, [r4, #20]
 802768c:	b002      	add	sp, #8
 802768e:	bd70      	pop	{r4, r5, r6, pc}
 8027690:	ab01      	add	r3, sp, #4
 8027692:	466a      	mov	r2, sp
 8027694:	f7ff ffca 	bl	802762c <__swhatbuf_r>
 8027698:	9900      	ldr	r1, [sp, #0]
 802769a:	4605      	mov	r5, r0
 802769c:	4630      	mov	r0, r6
 802769e:	f7ff f921 	bl	80268e4 <_malloc_r>
 80276a2:	b948      	cbnz	r0, 80276b8 <__smakebuf_r+0x44>
 80276a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80276a8:	059a      	lsls	r2, r3, #22
 80276aa:	d4ef      	bmi.n	802768c <__smakebuf_r+0x18>
 80276ac:	f023 0303 	bic.w	r3, r3, #3
 80276b0:	f043 0302 	orr.w	r3, r3, #2
 80276b4:	81a3      	strh	r3, [r4, #12]
 80276b6:	e7e3      	b.n	8027680 <__smakebuf_r+0xc>
 80276b8:	4b0d      	ldr	r3, [pc, #52]	; (80276f0 <__smakebuf_r+0x7c>)
 80276ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80276bc:	89a3      	ldrh	r3, [r4, #12]
 80276be:	6020      	str	r0, [r4, #0]
 80276c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80276c4:	81a3      	strh	r3, [r4, #12]
 80276c6:	9b00      	ldr	r3, [sp, #0]
 80276c8:	6163      	str	r3, [r4, #20]
 80276ca:	9b01      	ldr	r3, [sp, #4]
 80276cc:	6120      	str	r0, [r4, #16]
 80276ce:	b15b      	cbz	r3, 80276e8 <__smakebuf_r+0x74>
 80276d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80276d4:	4630      	mov	r0, r6
 80276d6:	f000 f839 	bl	802774c <_isatty_r>
 80276da:	b128      	cbz	r0, 80276e8 <__smakebuf_r+0x74>
 80276dc:	89a3      	ldrh	r3, [r4, #12]
 80276de:	f023 0303 	bic.w	r3, r3, #3
 80276e2:	f043 0301 	orr.w	r3, r3, #1
 80276e6:	81a3      	strh	r3, [r4, #12]
 80276e8:	89a3      	ldrh	r3, [r4, #12]
 80276ea:	431d      	orrs	r5, r3
 80276ec:	81a5      	strh	r5, [r4, #12]
 80276ee:	e7cd      	b.n	802768c <__smakebuf_r+0x18>
 80276f0:	08026b31 	.word	0x08026b31

080276f4 <_malloc_usable_size_r>:
 80276f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80276f8:	1f18      	subs	r0, r3, #4
 80276fa:	2b00      	cmp	r3, #0
 80276fc:	bfbc      	itt	lt
 80276fe:	580b      	ldrlt	r3, [r1, r0]
 8027700:	18c0      	addlt	r0, r0, r3
 8027702:	4770      	bx	lr

08027704 <_read_r>:
 8027704:	b538      	push	{r3, r4, r5, lr}
 8027706:	4c07      	ldr	r4, [pc, #28]	; (8027724 <_read_r+0x20>)
 8027708:	4605      	mov	r5, r0
 802770a:	4608      	mov	r0, r1
 802770c:	4611      	mov	r1, r2
 802770e:	2200      	movs	r2, #0
 8027710:	6022      	str	r2, [r4, #0]
 8027712:	461a      	mov	r2, r3
 8027714:	f7e0 fede 	bl	80084d4 <_read>
 8027718:	1c43      	adds	r3, r0, #1
 802771a:	d102      	bne.n	8027722 <_read_r+0x1e>
 802771c:	6823      	ldr	r3, [r4, #0]
 802771e:	b103      	cbz	r3, 8027722 <_read_r+0x1e>
 8027720:	602b      	str	r3, [r5, #0]
 8027722:	bd38      	pop	{r3, r4, r5, pc}
 8027724:	2001a038 	.word	0x2001a038

08027728 <_fstat_r>:
 8027728:	b538      	push	{r3, r4, r5, lr}
 802772a:	4c07      	ldr	r4, [pc, #28]	; (8027748 <_fstat_r+0x20>)
 802772c:	2300      	movs	r3, #0
 802772e:	4605      	mov	r5, r0
 8027730:	4608      	mov	r0, r1
 8027732:	4611      	mov	r1, r2
 8027734:	6023      	str	r3, [r4, #0]
 8027736:	f7e0 ff12 	bl	800855e <_fstat>
 802773a:	1c43      	adds	r3, r0, #1
 802773c:	d102      	bne.n	8027744 <_fstat_r+0x1c>
 802773e:	6823      	ldr	r3, [r4, #0]
 8027740:	b103      	cbz	r3, 8027744 <_fstat_r+0x1c>
 8027742:	602b      	str	r3, [r5, #0]
 8027744:	bd38      	pop	{r3, r4, r5, pc}
 8027746:	bf00      	nop
 8027748:	2001a038 	.word	0x2001a038

0802774c <_isatty_r>:
 802774c:	b538      	push	{r3, r4, r5, lr}
 802774e:	4c06      	ldr	r4, [pc, #24]	; (8027768 <_isatty_r+0x1c>)
 8027750:	2300      	movs	r3, #0
 8027752:	4605      	mov	r5, r0
 8027754:	4608      	mov	r0, r1
 8027756:	6023      	str	r3, [r4, #0]
 8027758:	f7e0 ff11 	bl	800857e <_isatty>
 802775c:	1c43      	adds	r3, r0, #1
 802775e:	d102      	bne.n	8027766 <_isatty_r+0x1a>
 8027760:	6823      	ldr	r3, [r4, #0]
 8027762:	b103      	cbz	r3, 8027766 <_isatty_r+0x1a>
 8027764:	602b      	str	r3, [r5, #0]
 8027766:	bd38      	pop	{r3, r4, r5, pc}
 8027768:	2001a038 	.word	0x2001a038

0802776c <_init>:
 802776c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802776e:	bf00      	nop
 8027770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027772:	bc08      	pop	{r3}
 8027774:	469e      	mov	lr, r3
 8027776:	4770      	bx	lr

08027778 <_fini>:
 8027778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802777a:	bf00      	nop
 802777c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802777e:	bc08      	pop	{r3}
 8027780:	469e      	mov	lr, r3
 8027782:	4770      	bx	lr
